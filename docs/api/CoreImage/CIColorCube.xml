<Documentation>
  <Docs DocId="T:CoreImage.CIColorCube">
    <summary>The CIColorCube CoreImage filter</summary>
    <remarks>
      <para>The following example shows this filter in use</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Create the CIImage from a file
CIImage flower = CIImage.FromCGImage (UIImage.FromFile ("flower.png").CGImage);

// Setup the color cube data
float [] color_cube_data = {
	0, 0, 0, 1,
	.1f, 0, 1, 1,
	0, 1, 0, 1,
	1, 1, 0, 1,
	0, 0, 1, 1,
	1, 0, 1, 1,
	0, 1, 1, 1,
	1, 1, 1, 1
};

var byteArray = new byte[color_cube_data.Length * 4];
Buffer.BlockCopy(color_cube_data, 0, byteArray, 0, byteArray.Length);
var data = NSData.FromArray (byteArray);

// Create a CIColorCube filter with the input image
var color_cube = new CIColorCube ()
{
	Image = flower,
	CubeDimension = 2,
	CubeData = data
};

// Get the altered image from the filter
var output = color_cube.OutputImage;

// To render the results, we need to create a context, and then
// use one of the context rendering APIs, in this case, we render the
// result into a CoreGraphics image, which is merely a useful representation
//
var context = CIContext.FromOptions (null);

var cgimage = context.CreateCGImage (output, output.Extent);

// The above cgimage can be added to a screen view, for example, this
// would add it to a UIImageView on the screen:
myImageView.Image = UIImage.FromImage (cgimage);
        ]]></code>
      </example>
      <para>
		With the following source:
      </para>
      <para>
        <img href="~/CoreImage/_images/flower.png" alt="Photograph of a sunflower." />
      </para>
      <para>
         Produces the following output:
      </para>
      <para>
        <img href="~/CoreImage/_images/color_cube.png" alt="Result of applying the filter." />
      </para>
      <para>
      	"Flower" Â© 2012 Milica Sekulic, used under a Creative Commons Attribution-ShareAlike license: https://creativecommons.org/licenses/by-sa/3.0/ 
      </para>
    </remarks>
  </Docs>
</Documentation>