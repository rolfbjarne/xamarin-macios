using System.Collections.Generic;
namespace Cecil.Tests {
	public partial class HandleSafety {
		static HashSet<string> AllKnownFailures = new HashSet<string> {
			"Accessibility.AXBrailleMap::.ctor(Foundation.NSCoder)",
			"Accessibility.AXBrailleMap::Copy(Foundation.NSZone)",
			"Accessibility.AXBrailleMap::EncodeTo(Foundation.NSCoder)",
			"Accessibility.AXBrailleMap::Present(CoreGraphics.CGImage)",
			"Accessibility.AXBrailleMapRenderer_Extensions::GetAccessibilityBrailleMapRenderer(Accessibility.IAXBrailleMapRenderer)",
			"Accessibility.AXBrailleMapRenderer_Extensions::GetAccessibilityBrailleMapRenderRegion(Accessibility.IAXBrailleMapRenderer)",
			"Accessibility.AXBrailleMapRenderer_Extensions::SetAccessibilityBrailleMapRenderer(Accessibility.IAXBrailleMapRenderer,System.Action`1<Accessibility.AXBrailleMap>)",
			"Accessibility.AXBrailleMapRenderer_Extensions::SetAccessibilityBrailleMapRenderRegion(Accessibility.IAXBrailleMapRenderer,CoreGraphics.CGRect)",
			"Accessibility.AXCategoricalDataAxisDescriptor::.ctor(Foundation.NSAttributedString,System.String[])",
			"Accessibility.AXCategoricalDataAxisDescriptor::Copy(Foundation.NSZone)",
			"Accessibility.AXCategoricalDataAxisDescriptor::set_AttributedTitle(Foundation.NSAttributedString)",
			"Accessibility.AXChartDescriptor::.ctor(Foundation.NSAttributedString,System.String,Accessibility.IAXDataAxisDescriptor,Accessibility.AXNumericDataAxisDescriptor,Accessibility.AXDataSeriesDescriptor[])",
			"Accessibility.AXChartDescriptor::.ctor(Foundation.NSAttributedString,System.String,Accessibility.IAXDataAxisDescriptor,Accessibility.AXNumericDataAxisDescriptor,Accessibility.IAXDataAxisDescriptor[],Accessibility.AXDataSeriesDescriptor[])",
			"Accessibility.AXChartDescriptor::.ctor(System.String,System.String,Accessibility.IAXDataAxisDescriptor,Accessibility.AXNumericDataAxisDescriptor,Accessibility.AXDataSeriesDescriptor[])",
			"Accessibility.AXChartDescriptor::.ctor(System.String,System.String,Accessibility.IAXDataAxisDescriptor,Accessibility.AXNumericDataAxisDescriptor,Accessibility.IAXDataAxisDescriptor[],Accessibility.AXDataSeriesDescriptor[])",
			"Accessibility.AXChartDescriptor::Copy(Foundation.NSZone)",
			"Accessibility.AXChartDescriptor::set_AttributedTitle(Foundation.NSAttributedString)",
			"Accessibility.AXChartDescriptor::set_XAxis(Accessibility.IAXDataAxisDescriptor)",
			"Accessibility.AXChartDescriptor::set_YAxis(Accessibility.AXNumericDataAxisDescriptor)",
			"Accessibility.AXChartWrapper::set_AccessibilityChartDescriptor(Accessibility.AXChartDescriptor)",
			"Accessibility.AXCustomContent::.ctor(Foundation.NSCoder)",
			"Accessibility.AXCustomContent::Copy(Foundation.NSZone)",
			"Accessibility.AXCustomContent::Create(Foundation.NSAttributedString,Foundation.NSAttributedString)",
			"Accessibility.AXCustomContent::EncodeTo(Foundation.NSCoder)",
			"Accessibility.AXDataAxisDescriptorWrapper::Copy(Foundation.NSZone)",
			"Accessibility.AXDataAxisDescriptorWrapper::set_AttributedTitle(Foundation.NSAttributedString)",
			"Accessibility.AXDataPoint::.ctor(Accessibility.AXDataPointValue,Accessibility.AXDataPointValue)",
			"Accessibility.AXDataPoint::.ctor(Accessibility.AXDataPointValue,Accessibility.AXDataPointValue,Accessibility.AXDataPointValue[])",
			"Accessibility.AXDataPoint::.ctor(Accessibility.AXDataPointValue,Accessibility.AXDataPointValue,Accessibility.AXDataPointValue[],System.String)",
			"Accessibility.AXDataPoint::Copy(Foundation.NSZone)",
			"Accessibility.AXDataPoint::set_AttributedLabel(Foundation.NSAttributedString)",
			"Accessibility.AXDataPoint::set_XValue(Accessibility.AXDataPointValue)",
			"Accessibility.AXDataPoint::set_YValue(Accessibility.AXDataPointValue)",
			"Accessibility.AXDataPointValue::Copy(Foundation.NSZone)",
			"Accessibility.AXDataSeriesDescriptor::.ctor(Foundation.NSAttributedString,System.Boolean,Accessibility.AXDataPoint[])",
			"Accessibility.AXDataSeriesDescriptor::Copy(Foundation.NSZone)",
			"Accessibility.AXDataSeriesDescriptor::set_AttributedName(Foundation.NSAttributedString)",
			"Accessibility.AXNumericDataAxisDescriptor::.ctor(Foundation.NSAttributedString,System.Double,System.Double,Foundation.NSNumber[],System.Func`2<System.Double,Foundation.NSString>)",
			"Accessibility.AXNumericDataAxisDescriptor::Copy(Foundation.NSZone)",
			"Accessibility.AXNumericDataAxisDescriptor::set_AttributedTitle(Foundation.NSAttributedString)",
			"Accounts.ACAccount::.ctor(Accounts.ACAccountType)",
			"Accounts.ACAccount::.ctor(Foundation.NSCoder)",
			"Accounts.ACAccount::EncodeTo(Foundation.NSCoder)",
			"Accounts.ACAccount::set_AccountType(Accounts.ACAccountType)",
			"Accounts.ACAccount::set_Credential(Accounts.ACAccountCredential)",
			"Accounts.ACAccountCredential::.ctor(Foundation.NSCoder)",
			"Accounts.ACAccountCredential::.ctor(System.String,System.String,Foundation.NSDate)",
			"Accounts.ACAccountCredential::EncodeTo(Foundation.NSCoder)",
			"Accounts.ACAccountStore::FindAccounts(Accounts.ACAccountType)",
			"Accounts.ACAccountStore::RemoveAccount(Accounts.ACAccount,Accounts.ACAccountStoreRemoveCompletionHandler)",
			"Accounts.ACAccountStore::RenewCredentials(Accounts.ACAccount,System.Action`2<Accounts.ACAccountCredentialRenewResult,Foundation.NSError>)",
			"Accounts.ACAccountStore::RequestAccess(Accounts.ACAccountType,Accounts.ACRequestCompletionHandler)",
			"Accounts.ACAccountStore::RequestAccess(Accounts.ACAccountType,Foundation.NSDictionary,Accounts.ACRequestCompletionHandler)",
			"Accounts.ACAccountStore::SaveAccount(Accounts.ACAccount,Accounts.ACAccountStoreSaveCompletionHandler)",
			"Accounts.ACAccountType::.ctor(Foundation.NSCoder)",
			"Accounts.ACAccountType::EncodeTo(Foundation.NSCoder)",
			"AddressBook.ABAddressBook::GetGroups(AddressBook.ABRecord)",
			"AddressBook.ABAddressBook::GetPeople(AddressBook.ABRecord)",
			"AddressBook.ABAddressBook::GetPeople(AddressBook.ABRecord,AddressBook.ABPersonSortBy)",
			"AddressBook.ABAddressBook::LocalizedLabel(Foundation.NSString)",
			"AddressBook.ABGroup::.ctor(AddressBook.ABRecord)",
			"AddressBook.ABGroup::Add(AddressBook.ABRecord)",
			"AddressBook.ABGroup::Remove(AddressBook.ABRecord)",
			"AddressBook.ABMultiValue`1/<>c::<.ctor>b__2_1(T)",
			"AddressBook.ABMultiValue`1::GetFirstIndexOfValue(Foundation.NSObject)",
			"AddressBook.ABMultiValueEntry`1::get_Identifier()",
			"AddressBook.ABMultiValueEntry`1::get_Label()",
			"AddressBook.ABMultiValueEntry`1::get_Value()",
			"AddressBook.ABMultiValueEntry`1::set_Label(Foundation.NSString)",
			"AddressBook.ABMultiValueEntry`1::set_Value(T)",
			"AddressBook.ABMutableMultiValue`1::Add(T,Foundation.NSString)",
			"AddressBook.ABMutableMultiValue`1::Insert(System.IntPtr,T,Foundation.NSString)",
			"AddressBook.ABPerson/<>c__95`1::<CreateDictionaryMultiValue>b__95_1(T)",
			"AddressBook.ABPerson::.ctor(AddressBook.ABRecord)",
			"AddressBook.ABPerson::CompareTo(AddressBook.ABPerson,AddressBook.ABPersonSortBy)",
			"AddressBook.ABPerson::CreateFromVCard(AddressBook.ABRecord,Foundation.NSData)",
			"AddressBook.ABPerson::GetCompositeNameDelimiter(AddressBook.ABRecord)",
			"AddressBook.ABPerson::GetCompositeNameFormat(AddressBook.ABRecord)",
			"AddressBook.ABPerson::set_Image(Foundation.NSData)",
			"AddressBook.ABPerson::SetAddresses(AddressBook.ABMultiValue`1<AddressBook.PersonAddress>)",
			"AddressBook.ABPerson::SetAddresses(AddressBook.ABMultiValue`1<Foundation.NSDictionary>)",
			"AddressBook.ABPerson::SetDates(AddressBook.ABMultiValue`1<Foundation.NSDate>)",
			"AddressBook.ABPerson::SetEmails(AddressBook.ABMultiValue`1<System.String>)",
			"AddressBook.ABPerson::SetInstantMessages(AddressBook.ABMultiValue`1<AddressBook.InstantMessageService>)",
			"AddressBook.ABPerson::SetInstantMessages(AddressBook.ABMultiValue`1<Foundation.NSDictionary>)",
			"AddressBook.ABPerson::SetPhones(AddressBook.ABMultiValue`1<System.String>)",
			"AddressBook.ABPerson::SetRelatedNames(AddressBook.ABMultiValue`1<System.String>)",
			"AddressBook.ABPerson::SetSocialProfile(AddressBook.ABMultiValue`1<AddressBook.SocialProfile>)",
			"AddressBook.ABPerson::SetSocialProfile(AddressBook.ABMultiValue`1<Foundation.NSDictionary>)",
			"AddressBook.ABPerson::SetUrls(AddressBook.ABMultiValue`1<System.String>)",
			"AddressBook.ABRecord::SetValue(System.Int32,Foundation.NSObject)",
			"AddressBookUI.ABAddressFormatting::ToString(Foundation.NSDictionary,System.Boolean)",
			"AddressBookUI.ABNewPersonViewController::.ctor(Foundation.NSCoder)",
			"AddressBookUI.ABNewPersonViewController::.ctor(System.String,Foundation.NSBundle)",
			"AddressBookUI.ABNewPersonViewControllerDelegateWrapper::DidCompleteWithNewPerson(AddressBookUI.ABNewPersonViewController,AddressBook.ABPerson)",
			"AddressBookUI.ABPeoplePickerNavigationController::.ctor(Foundation.NSCoder)",
			"AddressBookUI.ABPeoplePickerNavigationController::.ctor(System.String,Foundation.NSBundle)",
			"AddressBookUI.ABPeoplePickerNavigationController::.ctor(UIKit.UIViewController)",
			"AddressBookUI.ABPeoplePickerNavigationController::set_PredicateForEnablingPerson(Foundation.NSPredicate)",
			"AddressBookUI.ABPeoplePickerNavigationController::set_PredicateForSelectionOfPerson(Foundation.NSPredicate)",
			"AddressBookUI.ABPeoplePickerNavigationController::set_PredicateForSelectionOfProperty(Foundation.NSPredicate)",
			"AddressBookUI.ABPeoplePickerNavigationControllerDelegate_Extensions::Cancelled(AddressBookUI.IABPeoplePickerNavigationControllerDelegate,AddressBookUI.ABPeoplePickerNavigationController)",
			"AddressBookUI.ABPeoplePickerNavigationControllerDelegate_Extensions::DidSelectPerson(AddressBookUI.IABPeoplePickerNavigationControllerDelegate,AddressBookUI.ABPeoplePickerNavigationController,AddressBook.ABPerson)",
			"AddressBookUI.ABPeoplePickerNavigationControllerDelegate_Extensions::DidSelectPerson(AddressBookUI.IABPeoplePickerNavigationControllerDelegate,AddressBookUI.ABPeoplePickerNavigationController,AddressBook.ABPerson,System.Int32,System.Int32)",
			"AddressBookUI.ABPeoplePickerNavigationControllerDelegate_Extensions::ShouldContinue(AddressBookUI.IABPeoplePickerNavigationControllerDelegate,AddressBookUI.ABPeoplePickerNavigationController,AddressBook.ABPerson)",
			"AddressBookUI.ABPeoplePickerNavigationControllerDelegate_Extensions::ShouldContinue(AddressBookUI.IABPeoplePickerNavigationControllerDelegate,AddressBookUI.ABPeoplePickerNavigationController,AddressBook.ABPerson,System.Int32,System.Int32)",
			"AddressBookUI.ABPersonViewController::.ctor(Foundation.NSCoder)",
			"AddressBookUI.ABPersonViewController::.ctor(System.String,Foundation.NSBundle)",
			"AddressBookUI.ABPersonViewControllerDelegateWrapper::ShouldPerformDefaultActionForPerson(AddressBookUI.ABPersonViewController,AddressBook.ABPerson,System.Int32,System.Int32)",
			"AddressBookUI.ABUnknownPersonViewController::.ctor(Foundation.NSCoder)",
			"AddressBookUI.ABUnknownPersonViewController::.ctor(System.String,Foundation.NSBundle)",
			"AddressBookUI.ABUnknownPersonViewControllerDelegate_Extensions::ShouldPerformDefaultActionForPerson(AddressBookUI.IABUnknownPersonViewControllerDelegate,AddressBookUI.ABUnknownPersonViewController,AddressBook.ABPerson,System.Int32,System.Int32)",
			"AddressBookUI.ABUnknownPersonViewControllerDelegateWrapper::DidResolveToPerson(AddressBookUI.ABUnknownPersonViewController,AddressBook.ABPerson)",
			"AppClip.APActivationPayload::.ctor(Foundation.NSCoder)",
			"AppClip.APActivationPayload::ConfirmAcquired(CoreLocation.CLRegion,System.Action`2<System.Boolean,Foundation.NSError>)",
			"AppClip.APActivationPayload::Copy(Foundation.NSZone)",
			"AppClip.APActivationPayload::EncodeTo(Foundation.NSCoder)",
			"AppKit.INSDraggingInfo_Extensions::EnumerateDraggingItems(AppKit.INSDraggingInfo,AppKit.NSDraggingItemEnumerationOptions,AppKit.NSView,Foundation.NSArray,Foundation.NSDictionary,AppKit.NSDraggingEnumerator)",
			"AppKit.NSAccessibility::GetActionDescription(Foundation.NSString)",
			"AppKit.NSAccessibility::GetRoleDescription(Foundation.NSObject)",
			"AppKit.NSAccessibility::GetRoleDescription(Foundation.NSString,Foundation.NSString)",
			"AppKit.NSAccessibility::GetUnignoredAncestor(Foundation.NSObject)",
			"AppKit.NSAccessibility::GetUnignoredChildren(Foundation.NSArray)",
			"AppKit.NSAccessibility::GetUnignoredChildren(Foundation.NSObject)",
			"AppKit.NSAccessibility::GetUnignoredDescendant(Foundation.NSObject)",
			"AppKit.NSAccessibility::PostNotification(Foundation.NSObject,Foundation.NSString)",
			"AppKit.NSAccessibility::PostNotification(Foundation.NSObject,Foundation.NSString,Foundation.NSDictionary)",
			"AppKit.NSAccessibilityCustomAction::.ctor(System.String,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSAccessibilityCustomAction::set_Selector(ObjCRuntime.Selector)",
			"AppKit.NSAccessibilityCustomRotor::.ctor(AppKit.NSAccessibilityCustomRotorType,AppKit.INSAccessibilityCustomRotorItemSearchDelegate)",
			"AppKit.NSAccessibilityCustomRotor::.ctor(System.String,AppKit.INSAccessibilityCustomRotorItemSearchDelegate)",
			"AppKit.NSAccessibilityCustomRotorItemResult::.ctor(AppKit.NSAccessibilityElement)",
			"AppKit.NSAccessibilityCustomRotorItemResult::.ctor(Foundation.INSSecureCoding,System.String)",
			"AppKit.NSAccessibilityCustomRotorItemSearchDelegateWrapper::GetResult(AppKit.NSAccessibilityCustomRotor,AppKit.NSAccessibilityCustomRotorSearchParameters)",
			"AppKit.NSAccessibilityCustomRotorSearchParameters::set_CurrentItem(AppKit.NSAccessibilityCustomRotorItemResult)",
			"AppKit.NSAccessibilityElement::AccessibilityAddChildElement(AppKit.NSAccessibilityElement)",
			"AppKit.NSAccessibilityElement::CreateElement(Foundation.NSString,CoreGraphics.CGRect,Foundation.NSString,Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityApplicationFocusedUIElement(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityCancelButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityClearButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityCloseButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityCriticalValue(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityDecrementButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityDefaultButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityDisclosedRows(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityFocusedWindow(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityFullScreenButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityGrowArea(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityHeader(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityHorizontalScrollBar(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityIncrementButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityMainWindow(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityMarkerGroupUIElement(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityMarkerValues(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityMaxValue(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityMinimizeButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityMinValue(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityOverflowButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityProxy(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilitySearchButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilitySearchMenu(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityShownMenu(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityToolbarButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityUrl(Foundation.NSUrl)",
			"AppKit.NSAccessibilityElement::set_AccessibilityValue(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityVerticalScrollBar(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityWarningValue(Foundation.NSObject)",
			"AppKit.NSAccessibilityElement::set_AccessibilityZoomButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityElementLoading_Extensions::GetAccessibilityRangeInTargetElement(AppKit.INSAccessibilityElementLoading,Foundation.INSSecureCoding)",
			"AppKit.NSAccessibilityElementLoadingWrapper::GetAccessibilityElement(Foundation.INSSecureCoding)",
			"AppKit.NSAccessibilityElementProtocol_Extensions::GetAccessibilityFocused(AppKit.INSAccessibilityElementProtocol)",
			"AppKit.NSAccessibilityElementProtocol_Extensions::GetAccessibilityIdentifier(AppKit.INSAccessibilityElementProtocol)",
			"AppKit.NSAccessibilityLayoutItem_Extensions::SetAccessibilityFrame(AppKit.INSAccessibilityLayoutItem,CoreGraphics.CGRect)",
			"AppKit.NSAccessibilityRow_Extensions::GetAccessibilityDisclosureLevel(AppKit.INSAccessibilityRow)",
			"AppKit.NSAccessibilityStaticText_Extensions::GetAccessibilityAttributedString(AppKit.INSAccessibilityStaticText,Foundation.NSRange)",
			"AppKit.NSAccessibilityStaticText_Extensions::GetAccessibilityVisibleCharacterRange(AppKit.INSAccessibilityStaticText)",
			"AppKit.NSAccessibilityStepper_Extensions::GetAccessibilityValue(AppKit.INSAccessibilityStepper)",
			"AppKit.NSAccessibilitySwitch_Extensions::AccessibilityPerformDecrement(AppKit.INSAccessibilitySwitch)",
			"AppKit.NSAccessibilitySwitch_Extensions::AccessibilityPerformIncrement(AppKit.INSAccessibilitySwitch)",
			"AppKit.NSAccessibilityTable_Extensions::GetAccessibilityColumnHeaderUIElements(AppKit.INSAccessibilityTable)",
			"AppKit.NSAccessibilityTable_Extensions::GetAccessibilityColumns(AppKit.INSAccessibilityTable)",
			"AppKit.NSAccessibilityTable_Extensions::GetAccessibilityHeaderGroup(AppKit.INSAccessibilityTable)",
			"AppKit.NSAccessibilityTable_Extensions::GetAccessibilityRowHeaderUIElements(AppKit.INSAccessibilityTable)",
			"AppKit.NSAccessibilityTable_Extensions::GetAccessibilitySelectedCells(AppKit.INSAccessibilityTable)",
			"AppKit.NSAccessibilityTable_Extensions::GetAccessibilitySelectedColumns(AppKit.INSAccessibilityTable)",
			"AppKit.NSAccessibilityTable_Extensions::GetAccessibilitySelectedRows(AppKit.INSAccessibilityTable)",
			"AppKit.NSAccessibilityTable_Extensions::GetAccessibilityVisibleCells(AppKit.INSAccessibilityTable)",
			"AppKit.NSAccessibilityTable_Extensions::GetAccessibilityVisibleColumns(AppKit.INSAccessibilityTable)",
			"AppKit.NSAccessibilityTable_Extensions::GetAccessibilityVisibleRows(AppKit.INSAccessibilityTable)",
			"AppKit.NSAccessibilityTable_Extensions::SetAccessibilitySelectedRows(AppKit.INSAccessibilityTable,AppKit.INSAccessibilityRow[])",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityApplicationFocusedUIElement(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityCancelButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityClearButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityCloseButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityCriticalValue(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityDecrementButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityDefaultButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityDisclosedByRow(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityDisclosedRows(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityExtrasMenuBar(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityFocusedWindow(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityFullScreenButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityGrowArea(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityHeader(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityHorizontalScrollBar(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityIncrementButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityMainWindow(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityMarkerGroupUIElement(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityMarkerValues(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityMaxValue(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityMenuBar(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityMinimizeButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityMinValue(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityOverflowButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityParent(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityProxy(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilitySearchButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilitySearchMenu(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityShownMenu(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityTitleUIElement(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityToolbarButton(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityTopLevelUIElement(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityUrl(Foundation.NSUrl)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityValue(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityVerticalScrollBar(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityWarningValue(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityWindow(Foundation.NSObject)",
			"AppKit.NSAccessibilityWrapper::set_AccessibilityZoomButton(Foundation.NSObject)",
			"AppKit.NSActionCell::.ctor(AppKit.NSImage)",
			"AppKit.NSActionCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSActionCell::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSAlert::BeginSheet(AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSAlert::BeginSheet(AppKit.NSWindow,System.Action`1<AppKit.NSModalResponse>)",
			"AppKit.NSAlert::set_AccessoryView(AppKit.NSView)",
			"AppKit.NSAlert::set_Icon(AppKit.NSImage)",
			"AppKit.NSAlert::WithError(Foundation.NSError)",
			"AppKit.NSAlertDelegate_Extensions::ShowHelp(AppKit.INSAlertDelegate,AppKit.NSAlert)",
			"AppKit.NSAlignmentFeedbackFilter::GetTokenForHorizontalMovement(AppKit.NSView,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSAlignmentFeedbackFilter::GetTokenForMovement(AppKit.NSView,CoreGraphics.CGPoint,CoreGraphics.CGPoint,CoreGraphics.CGPoint)",
			"AppKit.NSAlignmentFeedbackFilter::GetTokenForVerticalMovement(AppKit.NSView,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSAlignmentFeedbackFilter::Update(AppKit.NSEvent)",
			"AppKit.NSAlignmentFeedbackFilter::Update(AppKit.NSPanGestureRecognizer)",
			"AppKit.NSAnimation::.ctor(Foundation.NSCoder)",
			"AppKit.NSAnimation::Copy(Foundation.NSZone)",
			"AppKit.NSAnimation::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSAnimation::StartWhenAnimationReaches(AppKit.NSAnimation,System.Single)",
			"AppKit.NSAnimation::StopWhenAnimationReaches(AppKit.NSAnimation,System.Single)",
			"AppKit.NSAnimationContext::set_TimingFunction(CoreAnimation.CAMediaTimingFunction)",
			"AppKit.NSAnimationDelegate_Extensions::AnimationDidEnd(AppKit.INSAnimationDelegate,AppKit.NSAnimation)",
			"AppKit.NSAnimationDelegate_Extensions::AnimationDidReachProgressMark(AppKit.INSAnimationDelegate,AppKit.NSAnimation,System.Single)",
			"AppKit.NSAnimationDelegate_Extensions::AnimationDidStop(AppKit.INSAnimationDelegate,AppKit.NSAnimation)",
			"AppKit.NSAnimationDelegate_Extensions::AnimationShouldStart(AppKit.INSAnimationDelegate,AppKit.NSAnimation)",
			"AppKit.NSAnimationDelegate_Extensions::ComputeAnimationCurve(AppKit.INSAnimationDelegate,AppKit.NSAnimation,System.Single)",
			"AppKit.NSAppearance::.ctor(Foundation.NSCoder)",
			"AppKit.NSAppearance::.ctor(System.String,Foundation.NSBundle)",
			"AppKit.NSAppearance::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSAppearance::GetAppearance(Foundation.NSString)",
			"AppKit.NSAppearance::set_CurrentAppearance(AppKit.NSAppearance)",
			"AppKit.NSAppearanceCustomizationWrapper::set_Appearance(AppKit.NSAppearance)",
			"AppKit.NSApplication::.ctor(Foundation.NSCoder)",
			"AppKit.NSApplication::AddWindowsItem(AppKit.NSWindow,System.String,System.Boolean)",
			"AppKit.NSApplication::ArrangeInFront(Foundation.NSObject)",
			"AppKit.NSApplication::BeginModalSession(AppKit.NSWindow)",
			"AppKit.NSApplication::BeginSheet(AppKit.NSWindow,AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSApplication::ChangeWindowsItem(AppKit.NSWindow,System.String,System.Boolean)",
			"AppKit.NSApplication::DetachDrawingThread(ObjCRuntime.Selector,Foundation.NSObject,Foundation.NSObject)",
			"AppKit.NSApplication::DiscardEvents(System.UIntPtr,AppKit.NSEvent)",
			"AppKit.NSApplication::EndSheet(AppKit.NSWindow)",
			"AppKit.NSApplication::EndSheet(AppKit.NSWindow,System.IntPtr)",
			"AppKit.NSApplication::Hide(Foundation.NSObject)",
			"AppKit.NSApplication::HideOtherApplications(Foundation.NSObject)",
			"AppKit.NSApplication::MiniaturizeAll(Foundation.NSObject)",
			"AppKit.NSApplication::NextEvent(AppKit.NSEventMask,Foundation.NSDate,Foundation.NSString,System.Boolean)",
			"AppKit.NSApplication::OrderFrontCharacterPalette(Foundation.NSObject)",
			"AppKit.NSApplication::OrderFrontColorPanel(Foundation.NSObject)",
			"AppKit.NSApplication::PostEvent(AppKit.NSEvent,System.Boolean)",
			"AppKit.NSApplication::RemoveWindowsItem(AppKit.NSWindow)",
			"AppKit.NSApplication::ReportException(Foundation.NSException)",
			"AppKit.NSApplication::RestoreWindowWithIdentifier(System.String,Foundation.NSCoder,AppKit.NSWindowCompletionHandler)",
			"AppKit.NSApplication::RunModalForWindow(AppKit.NSWindow)",
			"AppKit.NSApplication::SendAction(ObjCRuntime.Selector,Foundation.NSObject,Foundation.NSObject)",
			"AppKit.NSApplication::SendEvent(AppKit.NSEvent)",
			"AppKit.NSApplication::set_AccessibilityApplicationFocusedUIElement(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityCancelButton(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityClearButton(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityCloseButton(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityCriticalValue(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityDecrementButton(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityDefaultButton(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityDisclosedRows(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityFocusedWindow(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityFullScreenButton(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityGrowArea(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityHeader(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityHorizontalScrollBar(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityIncrementButton(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityMainWindow(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityMarkerGroupUIElement(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityMarkerValues(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityMaxValue(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityMinimizeButton(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityMinValue(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityOverflowButton(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityProxy(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilitySearchButton(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilitySearchMenu(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityShownMenu(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityToolbarButton(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityUrl(Foundation.NSUrl)",
			"AppKit.NSApplication::set_AccessibilityValue(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityVerticalScrollBar(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityWarningValue(Foundation.NSObject)",
			"AppKit.NSApplication::set_AccessibilityZoomButton(Foundation.NSObject)",
			"AppKit.NSApplication::set_Appearance(AppKit.NSAppearance)",
			"AppKit.NSApplication::set_ApplicationIconImage(AppKit.NSImage)",
			"AppKit.NSApplication::set_HelpMenu(AppKit.NSMenu)",
			"AppKit.NSApplication::set_MainMenu(AppKit.NSMenu)",
			"AppKit.NSApplication::set_ServicesMenu(AppKit.NSMenu)",
			"AppKit.NSApplication::set_ServicesProvider(Foundation.NSObject)",
			"AppKit.NSApplication::set_WindowsMenu(AppKit.NSMenu)",
			"AppKit.NSApplication::Stop(Foundation.NSObject)",
			"AppKit.NSApplication::TargetForAction(ObjCRuntime.Selector,Foundation.NSObject,Foundation.NSObject)",
			"AppKit.NSApplication::Terminate(Foundation.NSObject)",
			"AppKit.NSApplication::TryToPerform(ObjCRuntime.Selector,Foundation.NSObject)",
			"AppKit.NSApplication::Unhide(Foundation.NSObject)",
			"AppKit.NSApplication::UnhideAllApplications(Foundation.NSObject)",
			"AppKit.NSApplication::UpdateWindowsItem(AppKit.NSWindow)",
			"AppKit.NSApplication::ValidateMenuItem(AppKit.NSMenuItem)",
			"AppKit.NSApplication::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"AppKit.NSApplication_NSServicesMenu::RegisterServicesMenu(AppKit.NSApplication,System.String[],System.String[])",
			"AppKit.NSApplication_NSStandardAboutPanel::OrderFrontStandardAboutPanel(AppKit.NSApplication,Foundation.NSObject)",
			"AppKit.NSApplication_NSStandardAboutPanel::OrderFrontStandardAboutPanelWithOptions(AppKit.NSApplication,Foundation.NSDictionary)",
			"AppKit.NSApplication_NSTouchBarCustomization::GetAutomaticCustomizeTouchBarMenuItemEnabled(AppKit.NSApplication)",
			"AppKit.NSApplication_NSTouchBarCustomization::SetAutomaticCustomizeTouchBarMenuItemEnabled(AppKit.NSApplication,System.Boolean)",
			"AppKit.NSApplication_NSTouchBarCustomization::ToggleTouchBarCustomizationPalette(AppKit.NSApplication,Foundation.NSObject)",
			"AppKit.NSApplicationDelegate_Extensions::ApplicationDockMenu(AppKit.INSApplicationDelegate,AppKit.NSApplication)",
			"AppKit.NSApplicationDelegate_Extensions::ApplicationOpenUntitledFile(AppKit.INSApplicationDelegate,AppKit.NSApplication)",
			"AppKit.NSApplicationDelegate_Extensions::ApplicationShouldHandleReopen(AppKit.INSApplicationDelegate,AppKit.NSApplication,System.Boolean)",
			"AppKit.NSApplicationDelegate_Extensions::ApplicationShouldOpenUntitledFile(AppKit.INSApplicationDelegate,AppKit.NSApplication)",
			"AppKit.NSApplicationDelegate_Extensions::ApplicationShouldTerminate(AppKit.INSApplicationDelegate,AppKit.NSApplication)",
			"AppKit.NSApplicationDelegate_Extensions::ApplicationShouldTerminateAfterLastWindowClosed(AppKit.INSApplicationDelegate,AppKit.NSApplication)",
			"AppKit.NSApplicationDelegate_Extensions::ContinueUserActivity(AppKit.INSApplicationDelegate,AppKit.NSApplication,Foundation.NSUserActivity,AppKit.ContinueUserActivityRestorationHandler)",
			"AppKit.NSApplicationDelegate_Extensions::DecodedRestorableState(AppKit.INSApplicationDelegate,AppKit.NSApplication,Foundation.NSCoder)",
			"AppKit.NSApplicationDelegate_Extensions::DidBecomeActive(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::DidFinishLaunching(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::DidHide(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::DidResignActive(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::DidUnhide(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::DidUpdate(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::FailedToContinueUserActivity(AppKit.INSApplicationDelegate,AppKit.NSApplication,System.String,Foundation.NSError)",
			"AppKit.NSApplicationDelegate_Extensions::FailedToRegisterForRemoteNotifications(AppKit.INSApplicationDelegate,AppKit.NSApplication,Foundation.NSError)",
			"AppKit.NSApplicationDelegate_Extensions::GetHandler(AppKit.INSApplicationDelegate,AppKit.NSApplication,Intents.INIntent)",
			"AppKit.NSApplicationDelegate_Extensions::HandlesKey(AppKit.INSApplicationDelegate,AppKit.NSApplication,System.String)",
			"AppKit.NSApplicationDelegate_Extensions::OpenFile(AppKit.INSApplicationDelegate,AppKit.NSApplication,System.String)",
			"AppKit.NSApplicationDelegate_Extensions::OpenFiles(AppKit.INSApplicationDelegate,AppKit.NSApplication,System.String[])",
			"AppKit.NSApplicationDelegate_Extensions::OpenFileWithoutUI(AppKit.INSApplicationDelegate,Foundation.NSObject,System.String)",
			"AppKit.NSApplicationDelegate_Extensions::OpenTempFile(AppKit.INSApplicationDelegate,AppKit.NSApplication,System.String)",
			"AppKit.NSApplicationDelegate_Extensions::OpenUrls(AppKit.INSApplicationDelegate,AppKit.NSApplication,Foundation.NSUrl[])",
			"AppKit.NSApplicationDelegate_Extensions::PrintFile(AppKit.INSApplicationDelegate,AppKit.NSApplication,System.String)",
			"AppKit.NSApplicationDelegate_Extensions::PrintFiles(AppKit.INSApplicationDelegate,AppKit.NSApplication,System.String[],Foundation.NSDictionary,System.Boolean)",
			"AppKit.NSApplicationDelegate_Extensions::ProtectedDataDidBecomeAvailable(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::ProtectedDataWillBecomeUnavailable(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::ReceivedRemoteNotification(AppKit.INSApplicationDelegate,AppKit.NSApplication,Foundation.NSDictionary)",
			"AppKit.NSApplicationDelegate_Extensions::RegisteredForRemoteNotifications(AppKit.INSApplicationDelegate,AppKit.NSApplication,Foundation.NSData)",
			"AppKit.NSApplicationDelegate_Extensions::ScreenParametersChanged(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::ShouldAutomaticallyLocalizeKeyEquivalents(AppKit.INSApplicationDelegate,AppKit.NSApplication)",
			"AppKit.NSApplicationDelegate_Extensions::SupportsSecureRestorableState(AppKit.INSApplicationDelegate,AppKit.NSApplication)",
			"AppKit.NSApplicationDelegate_Extensions::UpdatedUserActivity(AppKit.INSApplicationDelegate,AppKit.NSApplication,Foundation.NSUserActivity)",
			"AppKit.NSApplicationDelegate_Extensions::UserDidAcceptCloudKitShare(AppKit.INSApplicationDelegate,AppKit.NSApplication,CloudKit.CKShareMetadata)",
			"AppKit.NSApplicationDelegate_Extensions::WillBecomeActive(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::WillContinueUserActivity(AppKit.INSApplicationDelegate,AppKit.NSApplication,System.String)",
			"AppKit.NSApplicationDelegate_Extensions::WillEncodeRestorableState(AppKit.INSApplicationDelegate,AppKit.NSApplication,Foundation.NSCoder)",
			"AppKit.NSApplicationDelegate_Extensions::WillFinishLaunching(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::WillHide(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::WillPresentError(AppKit.INSApplicationDelegate,AppKit.NSApplication,Foundation.NSError)",
			"AppKit.NSApplicationDelegate_Extensions::WillResignActive(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::WillTerminate(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::WillUnhide(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSApplicationDelegate_Extensions::WillUpdate(AppKit.INSApplicationDelegate,Foundation.NSNotification)",
			"AppKit.NSArrayController::.ctor(Foundation.NSCoder)",
			"AppKit.NSArrayController::Add(Foundation.NSObject)",
			"AppKit.NSArrayController::AddObject(Foundation.NSObject)",
			"AppKit.NSArrayController::AddObjects(Foundation.NSArray)",
			"AppKit.NSArrayController::AddSelectionIndexes(Foundation.NSIndexSet)",
			"AppKit.NSArrayController::Insert(Foundation.NSObject)",
			"AppKit.NSArrayController::Insert(Foundation.NSObject,System.IntPtr)",
			"AppKit.NSArrayController::Insert(Foundation.NSObject[],Foundation.NSIndexSet)",
			"AppKit.NSArrayController::Remove(Foundation.NSIndexSet)",
			"AppKit.NSArrayController::Remove(Foundation.NSObject)",
			"AppKit.NSArrayController::RemoveOp(Foundation.NSObject)",
			"AppKit.NSArrayController::RemoveSelectionIndexes(Foundation.NSIndexSet)",
			"AppKit.NSArrayController::SelectNext(Foundation.NSObject)",
			"AppKit.NSArrayController::SelectPrevious(Foundation.NSObject)",
			"AppKit.NSArrayController::set_FilterPredicate(Foundation.NSPredicate)",
			"AppKit.NSArrayController::SetSelectionIndexes(Foundation.NSIndexSet)",
			"AppKit.NSAttributedString_NSExtendedStringDrawing::BoundingRectWithSize(Foundation.NSAttributedString,CoreGraphics.CGSize,Foundation.NSStringDrawingOptions,AppKit.NSStringDrawingContext)",
			"AppKit.NSAttributedString_NSExtendedStringDrawing::DrawWithRect(Foundation.NSAttributedString,CoreGraphics.CGRect,Foundation.NSStringDrawingOptions,AppKit.NSStringDrawingContext)",
			"AppKit.NSBezierPath::.ctor(Foundation.NSCoder)",
			"AppKit.NSBezierPath::_AppendBezierPathWithCGGlyphs(System.IntPtr,System.IntPtr,AppKit.NSFont)",
			"AppKit.NSBezierPath::_AppendPathWithGlyphs(System.IntPtr,System.IntPtr,AppKit.NSFont)",
			"AppKit.NSBezierPath::AppendPath(AppKit.NSBezierPath)",
			"AppKit.NSBezierPath::AppendPathWithCGGlyph(System.UInt16,AppKit.NSFont)",
			"AppKit.NSBezierPath::AppendPathWithGlyph(System.UInt32,AppKit.NSFont)",
			"AppKit.NSBezierPath::Copy(Foundation.NSZone)",
			"AppKit.NSBezierPath::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSBezierPath::TransformUsingAffineTransform(Foundation.NSAffineTransform)",
			"AppKit.NSBitmapImageRep::.ctor(CoreGraphics.CGImage)",
			"AppKit.NSBitmapImageRep::.ctor(CoreImage.CIImage)",
			"AppKit.NSBitmapImageRep::.ctor(Foundation.NSCoder)",
			"AppKit.NSBitmapImageRep::.ctor(Foundation.NSData)",
			"AppKit.NSBitmapImageRep::Colorize(System.Runtime.InteropServices.NFloat,AppKit.NSColor,AppKit.NSColor,AppKit.NSColor)",
			"AppKit.NSBitmapImageRep::ConvertingToColorSpace(AppKit.NSColorSpace,AppKit.NSColorRenderingIntent)",
			"AppKit.NSBitmapImageRep::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSBitmapImageRep::ImageRepFromData(Foundation.NSData)",
			"AppKit.NSBitmapImageRep::ImageRepsWithData(Foundation.NSData)",
			"AppKit.NSBitmapImageRep::IncrementalLoad(Foundation.NSData,System.Boolean)",
			"AppKit.NSBitmapImageRep::RepresentationUsingTypeProperties(AppKit.NSBitmapImageFileType,Foundation.NSDictionary)",
			"AppKit.NSBitmapImageRep::RetaggedWithColorSpace(AppKit.NSColorSpace)",
			"AppKit.NSBitmapImageRep::SetColorAt(AppKit.NSColor,System.IntPtr,System.IntPtr)",
			"AppKit.NSBox::.ctor(Foundation.NSCoder)",
			"AppKit.NSBox::set_BorderColor(AppKit.NSColor)",
			"AppKit.NSBox::set_ContentView(Foundation.NSObject)",
			"AppKit.NSBox::set_FillColor(AppKit.NSColor)",
			"AppKit.NSBox::set_TitleFont(AppKit.NSFont)",
			"AppKit.NSBrowser::.ctor(Foundation.NSCoder)",
			"AppKit.NSBrowser::CanDragRowsWithIndexes(Foundation.NSIndexSet,System.IntPtr,AppKit.NSEvent)",
			"AppKit.NSBrowser::ColumnOfMatrix(AppKit.NSMatrix)",
			"AppKit.NSBrowser::DoClick(Foundation.NSObject)",
			"AppKit.NSBrowser::DoDoubleClick(Foundation.NSObject)",
			"AppKit.NSBrowser::EditItemAtIndexPath(Foundation.NSIndexPath,AppKit.NSEvent,System.Boolean)",
			"AppKit.NSBrowser::IsLeafItem(Foundation.NSObject)",
			"AppKit.NSBrowser::ItemAtIndexPath(Foundation.NSIndexPath)",
			"AppKit.NSBrowser::NoteHeightOfRows(Foundation.NSIndexSet,System.IntPtr)",
			"AppKit.NSBrowser::ReloadData(Foundation.NSIndexSet,System.IntPtr)",
			"AppKit.NSBrowser::SelectAll(Foundation.NSObject)",
			"AppKit.NSBrowser::SelectRowIndexes(Foundation.NSIndexSet,System.IntPtr)",
			"AppKit.NSBrowser::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSBrowser::set_CellPrototype(Foundation.NSObject)",
			"AppKit.NSBrowser::set_DoubleAction(ObjCRuntime.Selector)",
			"AppKit.NSBrowser::set_SelectionIndexPath(Foundation.NSIndexPath)",
			"AppKit.NSBrowserCell::.ctor(AppKit.NSImage)",
			"AppKit.NSBrowserCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSBrowserCell::HighlightColorInView(AppKit.NSView)",
			"AppKit.NSBrowserCell::set_AlternateImage(AppKit.NSImage)",
			"AppKit.NSBrowserCell::set_Image(AppKit.NSImage)",
			"AppKit.NSBrowserDelegate_Extensions::AcceptDrop(AppKit.INSBrowserDelegate,AppKit.NSBrowser,AppKit.INSDraggingInfo,System.IntPtr,System.IntPtr,AppKit.NSBrowserDropOperation)",
			"AppKit.NSBrowserDelegate_Extensions::CanDragRowsWithIndexes(AppKit.INSBrowserDelegate,AppKit.NSBrowser,Foundation.NSIndexSet,System.IntPtr,AppKit.NSEvent)",
			"AppKit.NSBrowserDelegate_Extensions::ColumnConfigurationDidChange(AppKit.INSBrowserDelegate,Foundation.NSNotification)",
			"AppKit.NSBrowserDelegate_Extensions::ColumnTitle(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::CountChildren(AppKit.INSBrowserDelegate,AppKit.NSBrowser,Foundation.NSObject)",
			"AppKit.NSBrowserDelegate_Extensions::CreateRowsForColumn(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr,AppKit.NSMatrix)",
			"AppKit.NSBrowserDelegate_Extensions::DidChangeLastColumn(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::DidScroll(AppKit.INSBrowserDelegate,AppKit.NSBrowser)",
			"AppKit.NSBrowserDelegate_Extensions::GetChild(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr,Foundation.NSObject)",
			"AppKit.NSBrowserDelegate_Extensions::HeaderViewControllerForItem(AppKit.INSBrowserDelegate,AppKit.NSBrowser,Foundation.NSObject)",
			"AppKit.NSBrowserDelegate_Extensions::IsColumnValid(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::IsLeafItem(AppKit.INSBrowserDelegate,AppKit.NSBrowser,Foundation.NSObject)",
			"AppKit.NSBrowserDelegate_Extensions::NextTypeSelectMatch(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr,System.IntPtr,System.IntPtr,System.String)",
			"AppKit.NSBrowserDelegate_Extensions::ObjectValueForItem(AppKit.INSBrowserDelegate,AppKit.NSBrowser,Foundation.NSObject)",
			"AppKit.NSBrowserDelegate_Extensions::PreviewViewControllerForLeafItem(AppKit.INSBrowserDelegate,AppKit.NSBrowser,Foundation.NSObject)",
			"AppKit.NSBrowserDelegate_Extensions::PromisedFilesDroppedAtDestination(AppKit.INSBrowserDelegate,AppKit.NSBrowser,Foundation.NSUrl,Foundation.NSIndexSet,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::RootItemForBrowser(AppKit.INSBrowserDelegate,AppKit.NSBrowser)",
			"AppKit.NSBrowserDelegate_Extensions::RowHeight(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::RowsInColumn(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::SelectCellWithString(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.String,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::SelectionIndexesForProposedSelection(AppKit.INSBrowserDelegate,AppKit.NSBrowser,Foundation.NSIndexSet,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::SelectRowInColumn(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::SetObjectValue(AppKit.INSBrowserDelegate,AppKit.NSBrowser,Foundation.NSObject,Foundation.NSObject)",
			"AppKit.NSBrowserDelegate_Extensions::ShouldEditItem(AppKit.INSBrowserDelegate,AppKit.NSBrowser,Foundation.NSObject)",
			"AppKit.NSBrowserDelegate_Extensions::ShouldShowCellExpansion(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::ShouldSizeColumn(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr,System.Boolean,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSBrowserDelegate_Extensions::ShouldTypeSelectForEvent(AppKit.INSBrowserDelegate,AppKit.NSBrowser,AppKit.NSEvent,System.String)",
			"AppKit.NSBrowserDelegate_Extensions::SizeToFitWidth(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::TypeSelectString(AppKit.INSBrowserDelegate,AppKit.NSBrowser,System.IntPtr,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::ValidateDrop(AppKit.INSBrowserDelegate,AppKit.NSBrowser,AppKit.INSDraggingInfo,System.IntPtr&,System.IntPtr&,AppKit.NSBrowserDropOperation&)",
			"AppKit.NSBrowserDelegate_Extensions::WillDisplayCell(AppKit.INSBrowserDelegate,AppKit.NSBrowser,Foundation.NSObject,System.IntPtr,System.IntPtr)",
			"AppKit.NSBrowserDelegate_Extensions::WillScroll(AppKit.INSBrowserDelegate,AppKit.NSBrowser)",
			"AppKit.NSBrowserDelegate_Extensions::WriteRowsWithIndexesToPasteboard(AppKit.INSBrowserDelegate,AppKit.NSBrowser,Foundation.NSIndexSet,System.IntPtr,AppKit.NSPasteboard)",
			"AppKit.NSButton::.ctor(Foundation.NSCoder)",
			"AppKit.NSButton::_CreateButton(AppKit.NSImage,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSButton::_CreateButton(System.String,AppKit.NSImage,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSButton::_CreateButton(System.String,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSButton::_CreateCheckbox(System.String,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSButton::_CreateRadioButton(System.String,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSButton::PerformKeyEquivalent(AppKit.NSEvent)",
			"AppKit.NSButton::set_AlternateImage(AppKit.NSImage)",
			"AppKit.NSButton::set_AttributedAlternateTitle(Foundation.NSAttributedString)",
			"AppKit.NSButton::set_AttributedTitle(Foundation.NSAttributedString)",
			"AppKit.NSButton::set_BezelColor(AppKit.NSColor)",
			"AppKit.NSButton::set_ContentTintColor(AppKit.NSColor)",
			"AppKit.NSButton::set_Image(AppKit.NSImage)",
			"AppKit.NSButton::set_Sound(AppKit.NSSound)",
			"AppKit.NSButton::set_SymbolConfiguration(AppKit.NSImageSymbolConfiguration)",
			"AppKit.NSButton::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"AppKit.NSButtonCell::.ctor(AppKit.NSImage)",
			"AppKit.NSButtonCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSButtonCell::DrawBezelWithFrame(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSButtonCell::DrawImage(AppKit.NSImage,CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSButtonCell::DrawTitle(Foundation.NSAttributedString,CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSButtonCell::MouseEntered(AppKit.NSEvent)",
			"AppKit.NSButtonCell::MouseExited(AppKit.NSEvent)",
			"AppKit.NSButtonCell::PerformClick(Foundation.NSObject)",
			"AppKit.NSButtonCell::set_AlternateImage(AppKit.NSImage)",
			"AppKit.NSButtonCell::set_AttributedAlternateTitle(Foundation.NSAttributedString)",
			"AppKit.NSButtonCell::set_AttributedTitle(Foundation.NSAttributedString)",
			"AppKit.NSButtonCell::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSButtonCell::set_KeyEquivalentFont(AppKit.NSFont)",
			"AppKit.NSButtonCell::set_Sound(AppKit.NSSound)",
			"AppKit.NSButtonCell::SetFont(AppKit.NSFont)",
			"AppKit.NSButtonTouchBarItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSButtonTouchBarItem::Create(AppKit.NSTouchBarItemIdentifier,AppKit.NSImage,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSButtonTouchBarItem::Create(AppKit.NSTouchBarItemIdentifier,System.String,AppKit.NSImage,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSButtonTouchBarItem::Create(AppKit.NSTouchBarItemIdentifier,System.String,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSButtonTouchBarItem::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSButtonTouchBarItem::set_BezelColor(AppKit.NSColor)",
			"AppKit.NSButtonTouchBarItem::set_BezelColor(UIKit.UIColor)",
			"AppKit.NSButtonTouchBarItem::set_Image(AppKit.NSImage)",
			"AppKit.NSCachedImageRep::.ctor(AppKit.NSWindow,CoreGraphics.CGRect)",
			"AppKit.NSCachedImageRep::.ctor(Foundation.NSCoder)",
			"AppKit.NSCandidateListTouchBarItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSCandidateListTouchBarItemDelegate_Extensions::BeginSelectingCandidate(AppKit.INSCandidateListTouchBarItemDelegate,AppKit.NSCandidateListTouchBarItem,System.IntPtr)",
			"AppKit.NSCandidateListTouchBarItemDelegate_Extensions::ChangedCandidateListVisibility(AppKit.INSCandidateListTouchBarItemDelegate,AppKit.NSCandidateListTouchBarItem,System.Boolean)",
			"AppKit.NSCandidateListTouchBarItemDelegate_Extensions::ChangeSelectionFromCandidate(AppKit.INSCandidateListTouchBarItemDelegate,AppKit.NSCandidateListTouchBarItem,System.IntPtr,System.IntPtr)",
			"AppKit.NSCandidateListTouchBarItemDelegate_Extensions::EndSelectingCandidate(AppKit.INSCandidateListTouchBarItemDelegate,AppKit.NSCandidateListTouchBarItem,System.IntPtr)",
			"AppKit.NSCell::.ctor(AppKit.NSImage)",
			"AppKit.NSCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSCell::AccessibilityPerformAction(Foundation.NSString)",
			"AppKit.NSCell::Compare(Foundation.NSObject)",
			"AppKit.NSCell::ContinueTracking(CoreGraphics.CGPoint,CoreGraphics.CGPoint,AppKit.NSView)",
			"AppKit.NSCell::Copy(Foundation.NSZone)",
			"AppKit.NSCell::DrawFocusRing(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSCell::DrawInteriorWithFrame(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSCell::DrawNinePartImage(CoreGraphics.CGRect,AppKit.NSImage,AppKit.NSImage,AppKit.NSImage,AppKit.NSImage,AppKit.NSImage,AppKit.NSImage,AppKit.NSImage,AppKit.NSImage,AppKit.NSImage,AppKit.NSCompositingOperation,System.Runtime.InteropServices.NFloat,System.Boolean)",
			"AppKit.NSCell::DrawThreePartImage(CoreGraphics.CGRect,AppKit.NSImage,AppKit.NSImage,AppKit.NSImage,System.Boolean,AppKit.NSCompositingOperation,System.Runtime.InteropServices.NFloat,System.Boolean)",
			"AppKit.NSCell::DrawWithExpansionFrame(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSCell::DrawWithFrame(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSCell::EditWithFrame(CoreGraphics.CGRect,AppKit.NSView,AppKit.NSText,Foundation.NSObject,AppKit.NSEvent)",
			"AppKit.NSCell::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSCell::EndEditing(AppKit.NSText)",
			"AppKit.NSCell::ExpansionFrame(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSCell::FieldEditorForView(AppKit.NSView)",
			"AppKit.NSCell::GenerateDraggingImageComponents(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSCell::GetAccessibilityActionDescription(Foundation.NSString)",
			"AppKit.NSCell::GetAccessibilityArrayAttributeCount(Foundation.NSString)",
			"AppKit.NSCell::GetAccessibilityArrayAttributeValues(Foundation.NSString,System.UIntPtr,System.UIntPtr)",
			"AppKit.NSCell::GetAccessibilityIndexOfChild(Foundation.NSObject)",
			"AppKit.NSCell::GetAccessibilityValue(Foundation.NSString)",
			"AppKit.NSCell::GetAccessibilityValue(Foundation.NSString,Foundation.NSObject)",
			"AppKit.NSCell::GetFocusRingMaskBounds(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSCell::Highlight(System.Boolean,CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSCell::HighlightColor(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSCell::HitTest(AppKit.NSEvent,CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSCell::IsAccessibilityAttributeSettable(Foundation.NSString)",
			"AppKit.NSCell::MenuForEvent(AppKit.NSEvent,CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSCell::PerformClick(Foundation.NSObject)",
			"AppKit.NSCell::ResetCursorRect(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSCell::SelectWithFrame(CoreGraphics.CGRect,AppKit.NSView,AppKit.NSText,Foundation.NSObject,System.IntPtr,System.IntPtr)",
			"AppKit.NSCell::set_AccessibilityApplicationFocusedUIElement(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityCancelButton(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityClearButton(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityCloseButton(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityCriticalValue(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityDecrementButton(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityDefaultButton(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityDisclosedRows(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityFocusedWindow(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityFullScreenButton(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityGrowArea(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityHeader(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityHorizontalScrollBar(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityIncrementButton(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityMainWindow(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityMarkerGroupUIElement(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityMarkerValues(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityMaxValue(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityMinimizeButton(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityMinValue(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityOverflowButton(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityProxy(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilitySearchButton(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilitySearchMenu(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityShownMenu(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityToolbarButton(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityUrl(Foundation.NSUrl)",
			"AppKit.NSCell::set_AccessibilityValue(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityVerticalScrollBar(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityWarningValue(Foundation.NSObject)",
			"AppKit.NSCell::set_AccessibilityZoomButton(Foundation.NSObject)",
			"AppKit.NSCell::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSCell::set_AttributedStringValue(Foundation.NSAttributedString)",
			"AppKit.NSCell::set_ControlView(AppKit.NSView)",
			"AppKit.NSCell::set_Font(AppKit.NSFont)",
			"AppKit.NSCell::set_Formatter(Foundation.NSFormatter)",
			"AppKit.NSCell::set_Image(AppKit.NSImage)",
			"AppKit.NSCell::set_Menu(AppKit.NSMenu)",
			"AppKit.NSCell::set_ObjectValue(Foundation.NSObject)",
			"AppKit.NSCell::set_RepresentedObject(Foundation.NSObject)",
			"AppKit.NSCell::SetAccessibilityValue(Foundation.NSString,Foundation.NSObject)",
			"AppKit.NSCell::SetUpFieldEditorAttributes(AppKit.NSText)",
			"AppKit.NSCell::StartTracking(CoreGraphics.CGPoint,AppKit.NSView)",
			"AppKit.NSCell::StopTracking(CoreGraphics.CGPoint,CoreGraphics.CGPoint,AppKit.NSView,System.Boolean)",
			"AppKit.NSCell::TakeDoubleValueFrom(Foundation.NSObject)",
			"AppKit.NSCell::TakeFloatValueFrom(Foundation.NSObject)",
			"AppKit.NSCell::TakeIntegerValueFrom(Foundation.NSObject)",
			"AppKit.NSCell::TakeIntValueFrom(Foundation.NSObject)",
			"AppKit.NSCell::TakeObjectValueFrom(Foundation.NSObject)",
			"AppKit.NSCell::TakeStringValueFrom(Foundation.NSObject)",
			"AppKit.NSCell::TrackMouse(AppKit.NSEvent,CoreGraphics.CGRect,AppKit.NSView,System.Boolean)",
			"AppKit.NSCIImageRep::.ctor(CoreImage.CIImage)",
			"AppKit.NSCIImageRep::.ctor(Foundation.NSCoder)",
			"AppKit.NSCIImageRep::FromCIImage(CoreImage.CIImage)",
			"AppKit.NSClickGestureRecognizer::.ctor(Foundation.NSCoder)",
			"AppKit.NSClickGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSClickGestureRecognizer::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSClipView::.ctor(Foundation.NSCoder)",
			"AppKit.NSClipView::Autoscroll(AppKit.NSEvent)",
			"AppKit.NSClipView::ScrollClipView(AppKit.NSClipView,CoreGraphics.CGPoint)",
			"AppKit.NSClipView::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSClipView::set_DocumentCursor(AppKit.NSCursor)",
			"AppKit.NSClipView::set_DocumentView(AppKit.NSView)",
			"AppKit.NSClipView::ViewBoundsChanged(Foundation.NSNotification)",
			"AppKit.NSClipView::ViewFrameChanged(Foundation.NSNotification)",
			"AppKit.NSCloudSharingServiceDelegate_Extensions::Completed(AppKit.INSCloudSharingServiceDelegate,AppKit.NSSharingService,Foundation.NSObject[],Foundation.NSError)",
			"AppKit.NSCloudSharingServiceDelegate_Extensions::Options(AppKit.INSCloudSharingServiceDelegate,AppKit.NSSharingService,Foundation.NSItemProvider)",
			"AppKit.NSCloudSharingServiceDelegate_Extensions::Saved(AppKit.INSCloudSharingServiceDelegate,AppKit.NSSharingService,CloudKit.CKShare)",
			"AppKit.NSCloudSharingServiceDelegate_Extensions::Stopped(AppKit.INSCloudSharingServiceDelegate,AppKit.NSSharingService,CloudKit.CKShare)",
			"AppKit.NSCloudSharingValidationWrapper::GetCloudShare(AppKit.INSValidatedUserInterfaceItem)",
			"AppKit.NSCoderAppKitAddons::DecodeNXColor(Foundation.NSCoder)",
			"AppKit.NSCollectionLayoutAnchor::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionLayoutBoundarySupplementaryItem::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionLayoutBoundarySupplementaryItem::Create(AppKit.NSCollectionLayoutSize,System.String,AppKit.NSRectAlignment)",
			"AppKit.NSCollectionLayoutBoundarySupplementaryItem::Create(AppKit.NSCollectionLayoutSize,System.String,AppKit.NSRectAlignment,CoreGraphics.CGPoint)",
			"AppKit.NSCollectionLayoutDecorationItem::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionLayoutDimension::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionLayoutEdgeSpacing::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionLayoutEdgeSpacing::Create(AppKit.NSCollectionLayoutSpacing,AppKit.NSCollectionLayoutSpacing,AppKit.NSCollectionLayoutSpacing,AppKit.NSCollectionLayoutSpacing)",
			"AppKit.NSCollectionLayoutGroup::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionLayoutGroup::CreateCustom(AppKit.NSCollectionLayoutSize,AppKit.NSCollectionLayoutGroupCustomItemProvider)",
			"AppKit.NSCollectionLayoutGroup::CreateHorizontal(AppKit.NSCollectionLayoutSize,AppKit.NSCollectionLayoutItem,System.IntPtr)",
			"AppKit.NSCollectionLayoutGroup::CreateHorizontal(AppKit.NSCollectionLayoutSize,AppKit.NSCollectionLayoutItem[])",
			"AppKit.NSCollectionLayoutGroup::CreateVertical(AppKit.NSCollectionLayoutSize,AppKit.NSCollectionLayoutItem,System.IntPtr)",
			"AppKit.NSCollectionLayoutGroup::CreateVertical(AppKit.NSCollectionLayoutSize,AppKit.NSCollectionLayoutItem[])",
			"AppKit.NSCollectionLayoutGroup::set_InterItemSpacing(AppKit.NSCollectionLayoutSpacing)",
			"AppKit.NSCollectionLayoutGroupCustomItem::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionLayoutItem::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionLayoutItem::Create(AppKit.NSCollectionLayoutSize)",
			"AppKit.NSCollectionLayoutItem::Create(AppKit.NSCollectionLayoutSize,AppKit.NSCollectionLayoutSupplementaryItem[])",
			"AppKit.NSCollectionLayoutItem::set_EdgeSpacing(AppKit.NSCollectionLayoutEdgeSpacing)",
			"AppKit.NSCollectionLayoutSection::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionLayoutSection::Create(AppKit.NSCollectionLayoutGroup)",
			"AppKit.NSCollectionLayoutSize::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionLayoutSize::Create(AppKit.NSCollectionLayoutDimension,AppKit.NSCollectionLayoutDimension)",
			"AppKit.NSCollectionLayoutSpacing::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionLayoutSupplementaryItem::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionLayoutSupplementaryItem::Create(AppKit.NSCollectionLayoutSize,System.String,AppKit.NSCollectionLayoutAnchor)",
			"AppKit.NSCollectionLayoutSupplementaryItem::Create(AppKit.NSCollectionLayoutSize,System.String,AppKit.NSCollectionLayoutAnchor,AppKit.NSCollectionLayoutAnchor)",
			"AppKit.NSCollectionView::.ctor(Foundation.NSCoder)",
			"AppKit.NSCollectionView::_RegisterClassForSupplementaryView(System.IntPtr,Foundation.NSString,System.String)",
			"AppKit.NSCollectionView::ConcludeDragOperation(AppKit.INSDraggingInfo)",
			"AppKit.NSCollectionView::DeleteItems(Foundation.NSSet`1<Foundation.NSIndexPath>)",
			"AppKit.NSCollectionView::DeleteSections(Foundation.NSIndexSet)",
			"AppKit.NSCollectionView::DeselectAll(Foundation.NSObject)",
			"AppKit.NSCollectionView::DeselectItems(Foundation.NSSet)",
			"AppKit.NSCollectionView::DraggedImageBeganAt(AppKit.NSImage,CoreGraphics.CGPoint)",
			"AppKit.NSCollectionView::DraggedImageEndedAtDeposited(AppKit.NSImage,CoreGraphics.CGPoint,System.Boolean)",
			"AppKit.NSCollectionView::DraggedImageEndedAtOperation(AppKit.NSImage,CoreGraphics.CGPoint,AppKit.NSDragOperation)",
			"AppKit.NSCollectionView::DraggedImageMovedTo(AppKit.NSImage,CoreGraphics.CGPoint)",
			"AppKit.NSCollectionView::DraggingEnded(AppKit.INSDraggingInfo)",
			"AppKit.NSCollectionView::DraggingEntered(AppKit.INSDraggingInfo)",
			"AppKit.NSCollectionView::DraggingExited(AppKit.INSDraggingInfo)",
			"AppKit.NSCollectionView::DraggingUpdated(AppKit.INSDraggingInfo)",
			"AppKit.NSCollectionView::GetDraggingImage(Foundation.NSSet`1<Foundation.NSIndexPath>,AppKit.NSEvent,CoreGraphics.CGPoint&)",
			"AppKit.NSCollectionView::GetIndexPath(AppKit.NSCollectionViewItem)",
			"AppKit.NSCollectionView::GetItem(Foundation.NSIndexPath)",
			"AppKit.NSCollectionView::GetLayoutAttributes(Foundation.NSIndexPath)",
			"AppKit.NSCollectionView::GetLayoutAttributes(System.String,Foundation.NSIndexPath)",
			"AppKit.NSCollectionView::GetSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)",
			"AppKit.NSCollectionView::GetVisibleSupplementaryViews(Foundation.NSString)",
			"AppKit.NSCollectionView::InsertItems(Foundation.NSSet`1<Foundation.NSIndexPath>)",
			"AppKit.NSCollectionView::InsertSections(Foundation.NSIndexSet)",
			"AppKit.NSCollectionView::MakeItem(System.String,Foundation.NSIndexPath)",
			"AppKit.NSCollectionView::MakeSupplementaryView(Foundation.NSString,System.String,Foundation.NSIndexPath)",
			"AppKit.NSCollectionView::MoveItem(Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"AppKit.NSCollectionView::NamesOfPromisedFilesDroppedAtDestination(Foundation.NSUrl)",
			"AppKit.NSCollectionView::NewItemForRepresentedObject(Foundation.NSObject)",
			"AppKit.NSCollectionView::PerformDragOperation(AppKit.INSDraggingInfo)",
			"AppKit.NSCollectionView::PrepareForDragOperation(AppKit.INSDraggingInfo)",
			"AppKit.NSCollectionView::RegisterNib(AppKit.NSNib,Foundation.NSString,System.String)",
			"AppKit.NSCollectionView::RegisterNib(AppKit.NSNib,System.String)",
			"AppKit.NSCollectionView::ReloadItems(Foundation.NSSet`1<Foundation.NSIndexPath>)",
			"AppKit.NSCollectionView::ReloadSections(Foundation.NSIndexSet)",
			"AppKit.NSCollectionView::ScrollToItems(Foundation.NSSet`1<Foundation.NSIndexPath>,AppKit.NSCollectionViewScrollPosition)",
			"AppKit.NSCollectionView::SelectAll(Foundation.NSObject)",
			"AppKit.NSCollectionView::SelectItems(Foundation.NSSet,AppKit.NSCollectionViewScrollPosition)",
			"AppKit.NSCollectionView::set_BackgroundView(AppKit.NSView)",
			"AppKit.NSCollectionView::set_CollectionViewLayout(AppKit.NSCollectionViewLayout)",
			"AppKit.NSCollectionView::set_ItemPrototype(AppKit.NSCollectionViewItem)",
			"AppKit.NSCollectionView::set_SelectionIndexes(Foundation.NSIndexSet)",
			"AppKit.NSCollectionView::set_SelectionIndexPaths(Foundation.NSSet)",
			"AppKit.NSCollectionView::ToggleSectionCollapse(Foundation.NSObject)",
			"AppKit.NSCollectionViewCompositionalLayout::.ctor(AppKit.NSCollectionLayoutSection)",
			"AppKit.NSCollectionViewCompositionalLayout::.ctor(AppKit.NSCollectionLayoutSection,AppKit.NSCollectionViewCompositionalLayoutConfiguration)",
			"AppKit.NSCollectionViewCompositionalLayout::.ctor(AppKit.NSCollectionViewCompositionalLayoutSectionProvider,AppKit.NSCollectionViewCompositionalLayoutConfiguration)",
			"AppKit.NSCollectionViewCompositionalLayout::.ctor(Foundation.NSCoder)",
			"AppKit.NSCollectionViewCompositionalLayout::set_Configuration(AppKit.NSCollectionViewCompositionalLayoutConfiguration)",
			"AppKit.NSCollectionViewCompositionalLayoutConfiguration::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionViewDataSource_Extensions::GetNumberOfSections(AppKit.INSCollectionViewDataSource,AppKit.NSCollectionView)",
			"AppKit.NSCollectionViewDataSource_Extensions::GetView(AppKit.INSCollectionViewDataSource,AppKit.NSCollectionView,Foundation.NSString,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewDataSourceWrapper::GetItem(AppKit.NSCollectionView,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewDataSourceWrapper::GetNumberofItems(AppKit.NSCollectionView,System.IntPtr)",
			"AppKit.NSCollectionViewDelegate_Extensions::AcceptDrop(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.INSDraggingInfo,Foundation.NSIndexPath,AppKit.NSCollectionViewDropOperation)",
			"AppKit.NSCollectionViewDelegate_Extensions::AcceptDrop(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.INSDraggingInfo,System.IntPtr,AppKit.NSCollectionViewDropOperation)",
			"AppKit.NSCollectionViewDelegate_Extensions::CanDragItems(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSIndexSet,AppKit.NSEvent)",
			"AppKit.NSCollectionViewDelegate_Extensions::CanDragItems(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSSet,AppKit.NSEvent)",
			"AppKit.NSCollectionViewDelegate_Extensions::DisplayingItemEnded(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.NSCollectionViewItem,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewDelegate_Extensions::DisplayingSupplementaryViewEnded(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.NSView,System.String,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewDelegate_Extensions::DraggingSessionEnded(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,AppKit.NSDragOperation)",
			"AppKit.NSCollectionViewDelegate_Extensions::DraggingSessionWillBegin(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,Foundation.NSIndexSet)",
			"AppKit.NSCollectionViewDelegate_Extensions::DraggingSessionWillBegin(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,Foundation.NSSet)",
			"AppKit.NSCollectionViewDelegate_Extensions::GetDraggingImage(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSSet,AppKit.NSEvent,CoreGraphics.CGPoint&)",
			"AppKit.NSCollectionViewDelegate_Extensions::GetNamesOfPromisedFiles(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSUrl,Foundation.NSSet)",
			"AppKit.NSCollectionViewDelegate_Extensions::GetPasteboardWriter(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewDelegate_Extensions::ItemsChanged(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSSet,AppKit.NSCollectionViewItemHighlightState)",
			"AppKit.NSCollectionViewDelegate_Extensions::ItemsDeselected(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSSet)",
			"AppKit.NSCollectionViewDelegate_Extensions::ItemsSelected(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSSet)",
			"AppKit.NSCollectionViewDelegate_Extensions::NamesOfPromisedFilesDroppedAtDestination(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSUrl,Foundation.NSIndexSet)",
			"AppKit.NSCollectionViewDelegate_Extensions::PasteboardWriterForItem(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,System.UIntPtr)",
			"AppKit.NSCollectionViewDelegate_Extensions::ShouldChangeItems(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSSet,AppKit.NSCollectionViewItemHighlightState)",
			"AppKit.NSCollectionViewDelegate_Extensions::ShouldDeselectItems(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSSet)",
			"AppKit.NSCollectionViewDelegate_Extensions::ShouldSelectItems(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSSet)",
			"AppKit.NSCollectionViewDelegate_Extensions::TransitionLayout(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.NSCollectionViewLayout,AppKit.NSCollectionViewLayout)",
			"AppKit.NSCollectionViewDelegate_Extensions::UpdateDraggingItemsForDrag(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.INSDraggingInfo)",
			"AppKit.NSCollectionViewDelegate_Extensions::ValidateDrop(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.INSDraggingInfo,Foundation.NSIndexPath&,AppKit.NSCollectionViewDropOperation&)",
			"AppKit.NSCollectionViewDelegate_Extensions::ValidateDrop(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.INSDraggingInfo,System.IntPtr&,AppKit.NSCollectionViewDropOperation&)",
			"AppKit.NSCollectionViewDelegate_Extensions::WillDisplayItem(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.NSCollectionViewItem,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewDelegate_Extensions::WillDisplaySupplementaryView(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,AppKit.NSView,Foundation.NSString,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewDelegate_Extensions::WriteItems(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSIndexSet,AppKit.NSPasteboard)",
			"AppKit.NSCollectionViewDelegate_Extensions::WriteItems(AppKit.INSCollectionViewDelegate,AppKit.NSCollectionView,Foundation.NSSet,AppKit.NSPasteboard)",
			"AppKit.NSCollectionViewDelegateFlowLayout_Extensions::InsetForSection(AppKit.INSCollectionViewDelegateFlowLayout,AppKit.NSCollectionView,AppKit.NSCollectionViewLayout,System.IntPtr)",
			"AppKit.NSCollectionViewDelegateFlowLayout_Extensions::MinimumInteritemSpacingForSection(AppKit.INSCollectionViewDelegateFlowLayout,AppKit.NSCollectionView,AppKit.NSCollectionViewLayout,System.IntPtr)",
			"AppKit.NSCollectionViewDelegateFlowLayout_Extensions::MinimumLineSpacing(AppKit.INSCollectionViewDelegateFlowLayout,AppKit.NSCollectionView,AppKit.NSCollectionViewLayout,System.IntPtr)",
			"AppKit.NSCollectionViewDelegateFlowLayout_Extensions::ReferenceSizeForFooter(AppKit.INSCollectionViewDelegateFlowLayout,AppKit.NSCollectionView,AppKit.NSCollectionViewLayout,System.IntPtr)",
			"AppKit.NSCollectionViewDelegateFlowLayout_Extensions::ReferenceSizeForHeader(AppKit.INSCollectionViewDelegateFlowLayout,AppKit.NSCollectionView,AppKit.NSCollectionViewLayout,System.IntPtr)",
			"AppKit.NSCollectionViewDelegateFlowLayout_Extensions::SizeForItem(AppKit.INSCollectionViewDelegateFlowLayout,AppKit.NSCollectionView,AppKit.NSCollectionViewLayout,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewDiffableDataSource`2::.ctor(AppKit.NSCollectionView,AppKit.NSCollectionViewDiffableDataSourceItemProvider)",
			"AppKit.NSCollectionViewDiffableDataSource`2::Apply(AppKit.NSDiffableDataSourceSnapshot`2<SectionIdentifierType,ItemIdentifierType>,System.Boolean)",
			"AppKit.NSCollectionViewDiffableDataSource`2::GetIndexPath(ItemIdentifierType)",
			"AppKit.NSCollectionViewDiffableDataSource`2::GetItem(AppKit.NSCollectionView,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewDiffableDataSource`2::GetItemIdentifier(Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewDiffableDataSource`2::GetNumberofItems(AppKit.NSCollectionView,System.IntPtr)",
			"AppKit.NSCollectionViewDiffableDataSource`2::GetNumberOfSections(AppKit.NSCollectionView)",
			"AppKit.NSCollectionViewDiffableDataSource`2::GetView(AppKit.NSCollectionView,Foundation.NSString,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewElement_Extensions::ApplyLayoutAttributes(AppKit.INSCollectionViewElement,AppKit.NSCollectionViewLayoutAttributes)",
			"AppKit.NSCollectionViewElement_Extensions::DidTransition(AppKit.INSCollectionViewElement,AppKit.NSCollectionViewLayout,AppKit.NSCollectionViewLayout)",
			"AppKit.NSCollectionViewElement_Extensions::GetPreferredLayoutAttributes(AppKit.INSCollectionViewElement,AppKit.NSCollectionViewLayoutAttributes)",
			"AppKit.NSCollectionViewElement_Extensions::PrepareForReuse(AppKit.INSCollectionViewElement)",
			"AppKit.NSCollectionViewElement_Extensions::WillTransition(AppKit.INSCollectionViewElement,AppKit.NSCollectionViewLayout,AppKit.NSCollectionViewLayout)",
			"AppKit.NSCollectionViewFlowLayout::.ctor(Foundation.NSCoder)",
			"AppKit.NSCollectionViewGridLayout::.ctor(Foundation.NSCoder)",
			"AppKit.NSCollectionViewItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSCollectionViewItem::.ctor(System.String,Foundation.NSBundle)",
			"AppKit.NSCollectionViewItem::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionViewLayout::.ctor(Foundation.NSCoder)",
			"AppKit.NSCollectionViewLayout::_RegisterClassForDecorationView(System.IntPtr,Foundation.NSString)",
			"AppKit.NSCollectionViewLayout::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSCollectionViewLayout::GetFinalLayoutAttributesForDisappearingDecorationElement(Foundation.NSString,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayout::GetFinalLayoutAttributesForDisappearingItem(Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayout::GetFinalLayoutAttributesForDisappearingSupplementaryElement(Foundation.NSString,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayout::GetIndexPathsToDeleteForDecorationView(Foundation.NSString)",
			"AppKit.NSCollectionViewLayout::GetIndexPathsToDeleteForSupplementaryView(Foundation.NSString)",
			"AppKit.NSCollectionViewLayout::GetIndexPathsToInsertForDecorationView(Foundation.NSString)",
			"AppKit.NSCollectionViewLayout::GetIndexPathsToInsertForSupplementaryView(Foundation.NSString)",
			"AppKit.NSCollectionViewLayout::GetInitialLayoutAttributesForAppearingDecorationElement(Foundation.NSString,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayout::GetInitialLayoutAttributesForAppearingItem(Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayout::GetInitialLayoutAttributesForAppearingSupplementaryElement(Foundation.NSString,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayout::GetInvalidationContext(AppKit.NSCollectionViewLayoutAttributes,AppKit.NSCollectionViewLayoutAttributes)",
			"AppKit.NSCollectionViewLayout::GetLayoutAttributesForDecorationView(Foundation.NSString,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayout::GetLayoutAttributesForInterItemGap(Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayout::GetLayoutAttributesForItem(Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayout::GetLayoutAttributesForSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayout::InvalidateLayout(AppKit.NSCollectionViewLayoutInvalidationContext)",
			"AppKit.NSCollectionViewLayout::PrepareForTransitionFromLayout(AppKit.NSCollectionViewLayout)",
			"AppKit.NSCollectionViewLayout::PrepareForTransitionToLayout(AppKit.NSCollectionViewLayout)",
			"AppKit.NSCollectionViewLayout::RegisterNib(AppKit.NSNib,Foundation.NSString)",
			"AppKit.NSCollectionViewLayout::ShouldInvalidateLayout(AppKit.NSCollectionViewLayoutAttributes,AppKit.NSCollectionViewLayoutAttributes)",
			"AppKit.NSCollectionViewLayoutAttributes::Copy(Foundation.NSZone)",
			"AppKit.NSCollectionViewLayoutAttributes::CreateForDecorationView(Foundation.NSString,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayoutAttributes::CreateForInterItemGap(Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayoutAttributes::CreateForItem(Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayoutAttributes::CreateForSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayoutAttributes::set_IndexPath(Foundation.NSIndexPath)",
			"AppKit.NSCollectionViewLayoutInvalidationContext::InvalidateDecorationElements(Foundation.NSString,Foundation.NSSet)",
			"AppKit.NSCollectionViewLayoutInvalidationContext::InvalidateItems(Foundation.NSSet)",
			"AppKit.NSCollectionViewLayoutInvalidationContext::InvalidateSupplementaryElements(Foundation.NSString,Foundation.NSSet)",
			"AppKit.NSCollectionViewPrefetching_Extensions::CancelPrefetching(AppKit.INSCollectionViewPrefetching,AppKit.NSCollectionView,Foundation.NSIndexPath[])",
			"AppKit.NSCollectionViewPrefetchingWrapper::PrefetchItems(AppKit.NSCollectionView,Foundation.NSIndexPath[])",
			"AppKit.NSCollectionViewSectionHeaderView_Extensions::GetSectionCollapseButton(AppKit.INSCollectionViewSectionHeaderView)",
			"AppKit.NSCollectionViewSectionHeaderView_Extensions::SetSectionCollapseButton(AppKit.INSCollectionViewSectionHeaderView,AppKit.NSButton)",
			"AppKit.NSCollectionViewTransitionLayout::.ctor(AppKit.NSCollectionViewLayout,AppKit.NSCollectionViewLayout)",
			"AppKit.NSCollectionViewTransitionLayout::.ctor(Foundation.NSCoder)",
			"AppKit.NSColor::.ctor(Foundation.NSCoder)",
			"AppKit.NSColor::_FromColorSpace(AppKit.NSColorSpace,System.IntPtr,System.IntPtr)",
			"AppKit.NSColor::BlendedColor(System.Runtime.InteropServices.NFloat,AppKit.NSColor)",
			"AppKit.NSColor::Copy(Foundation.NSZone)",
			"AppKit.NSColor::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSColor::FromCGColor(CoreGraphics.CGColor)",
			"AppKit.NSColor::FromCIColor(CoreImage.CIColor)",
			"AppKit.NSColor::FromColor(AppKit.NSColorSpace,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSColor::FromName(System.String,Foundation.NSBundle)",
			"AppKit.NSColor::FromPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSColor::FromPatternImage(AppKit.NSImage)",
			"AppKit.NSColor::GetReadableTypesForPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSColor::GetReadingOptionsForType(System.String,AppKit.NSPasteboard)",
			"AppKit.NSColor::GetWritableTypesForPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSColor::GetWritingOptionsForType(System.String,AppKit.NSPasteboard)",
			"AppKit.NSColor::UsingColorSpace(AppKit.NSColorSpace)",
			"AppKit.NSColor::UsingColorSpace(System.String,Foundation.NSDictionary)",
			"AppKit.NSColor::WriteToPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSColorChangingWrapper::ChangeColor(AppKit.NSColorPanel)",
			"AppKit.NSColorList::.ctor(Foundation.NSCoder)",
			"AppKit.NSColorList::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSColorList::InsertColor(AppKit.NSColor,System.String,System.IntPtr)",
			"AppKit.NSColorList::SetColorForKey(AppKit.NSColor,System.String)",
			"AppKit.NSColorList::WriteToUrl(Foundation.NSUrl,Foundation.NSError&)",
			"AppKit.NSColorPanel::.ctor(Foundation.NSCoder)",
			"AppKit.NSColorPanel::AttachColorList(AppKit.NSColorList)",
			"AppKit.NSColorPanel::DetachColorList(AppKit.NSColorList)",
			"AppKit.NSColorPanel::DragColor(AppKit.NSColor,AppKit.NSEvent,AppKit.NSView)",
			"AppKit.NSColorPanel::set_AccessoryView(AppKit.NSView)",
			"AppKit.NSColorPanel::set_Color(AppKit.NSColor)",
			"AppKit.NSColorPanel::SetAction(ObjCRuntime.Selector)",
			"AppKit.NSColorPanel::SetTarget(Foundation.NSObject)",
			"AppKit.NSColorPicker::.ctor(AppKit.NSColorPanelFlags,AppKit.NSColorPanel)",
			"AppKit.NSColorPicker::AttachColorList(AppKit.NSColorList)",
			"AppKit.NSColorPicker::DetachColorList(AppKit.NSColorList)",
			"AppKit.NSColorPicker::InsertNewButtonImage(AppKit.NSImage,AppKit.NSButtonCell)",
			"AppKit.NSColorPicker::ViewSizeChanged(Foundation.NSObject)",
			"AppKit.NSColorPickerTouchBarItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSColorPickerTouchBarItem::CreateColorPicker(System.String,AppKit.NSImage)",
			"AppKit.NSColorPickerTouchBarItem::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSColorPickerTouchBarItem::set_Color(AppKit.NSColor)",
			"AppKit.NSColorPickerTouchBarItem::set_Color(UIKit.UIColor)",
			"AppKit.NSColorPickerTouchBarItem::set_ColorList(AppKit.NSColorList)",
			"AppKit.NSColorSpace::.ctor(CoreGraphics.CGColorSpace)",
			"AppKit.NSColorSpace::.ctor(Foundation.NSCoder)",
			"AppKit.NSColorSpace::.ctor(Foundation.NSData)",
			"AppKit.NSColorSpace::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSColorWell::.ctor(Foundation.NSCoder)",
			"AppKit.NSColorWell::set_Color(AppKit.NSColor)",
			"AppKit.NSColorWell::TakeColorFrom(Foundation.NSObject)",
			"AppKit.NSComboBox::.ctor(Foundation.NSCoder)",
			"AppKit.NSComboBox::Add(Foundation.NSObject)",
			"AppKit.NSComboBox::IndexOf(Foundation.NSObject)",
			"AppKit.NSComboBox::Insert(Foundation.NSObject,System.IntPtr)",
			"AppKit.NSComboBox::Remove(Foundation.NSObject)",
			"AppKit.NSComboBox::Select(Foundation.NSObject)",
			"AppKit.NSComboBoxCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSComboBoxCell::Add(Foundation.NSObject)",
			"AppKit.NSComboBoxCell::IndexOf(Foundation.NSObject)",
			"AppKit.NSComboBoxCell::Insert(Foundation.NSObject,System.IntPtr)",
			"AppKit.NSComboBoxCell::Remove(Foundation.NSObject)",
			"AppKit.NSComboBoxCell::Select(Foundation.NSObject)",
			"AppKit.NSComboBoxCellDataSource_Extensions::CompletedString(AppKit.INSComboBoxCellDataSource,AppKit.NSComboBoxCell,System.String)",
			"AppKit.NSComboBoxCellDataSource_Extensions::IndexOfItem(AppKit.INSComboBoxCellDataSource,AppKit.NSComboBoxCell,System.String)",
			"AppKit.NSComboBoxCellDataSource_Extensions::ItemCount(AppKit.INSComboBoxCellDataSource,AppKit.NSComboBoxCell)",
			"AppKit.NSComboBoxCellDataSource_Extensions::ObjectValueForItem(AppKit.INSComboBoxCellDataSource,AppKit.NSComboBoxCell,System.IntPtr)",
			"AppKit.NSComboBoxDataSource_Extensions::CompletedString(AppKit.INSComboBoxDataSource,AppKit.NSComboBox,System.String)",
			"AppKit.NSComboBoxDataSource_Extensions::IndexOfItem(AppKit.INSComboBoxDataSource,AppKit.NSComboBox,System.String)",
			"AppKit.NSComboBoxDataSource_Extensions::ItemCount(AppKit.INSComboBoxDataSource,AppKit.NSComboBox)",
			"AppKit.NSComboBoxDataSource_Extensions::ObjectValueForItem(AppKit.INSComboBoxDataSource,AppKit.NSComboBox,System.IntPtr)",
			"AppKit.NSComboBoxDelegate_Extensions::SelectionChanged(AppKit.INSComboBoxDelegate,Foundation.NSNotification)",
			"AppKit.NSComboBoxDelegate_Extensions::SelectionIsChanging(AppKit.INSComboBoxDelegate,Foundation.NSNotification)",
			"AppKit.NSComboBoxDelegate_Extensions::WillDismiss(AppKit.INSComboBoxDelegate,Foundation.NSNotification)",
			"AppKit.NSComboBoxDelegate_Extensions::WillPopUp(AppKit.INSComboBoxDelegate,Foundation.NSNotification)",
			"AppKit.NSControl::.ctor(Foundation.NSCoder)",
			"AppKit.NSControl::DrawCell(AppKit.NSCell)",
			"AppKit.NSControl::DrawCellInside(AppKit.NSCell)",
			"AppKit.NSControl::DrawWithExpansionFrame(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSControl::EditWithFrame(CoreGraphics.CGRect,AppKit.NSText,Foundation.NSObject,AppKit.NSEvent)",
			"AppKit.NSControl::EndEditing(AppKit.NSText)",
			"AppKit.NSControl::InvalidateIntrinsicContentSizeForCell(AppKit.NSCell)",
			"AppKit.NSControl::MouseDown(AppKit.NSEvent)",
			"AppKit.NSControl::PerformClick(Foundation.NSObject)",
			"AppKit.NSControl::SelectCell(AppKit.NSCell)",
			"AppKit.NSControl::SelectWithFrame(CoreGraphics.CGRect,AppKit.NSText,Foundation.NSObject,System.IntPtr,System.IntPtr)",
			"AppKit.NSControl::SendAction(ObjCRuntime.Selector,Foundation.NSObject)",
			"AppKit.NSControl::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSControl::set_AttributedStringValue(Foundation.NSAttributedString)",
			"AppKit.NSControl::set_Cell(AppKit.NSCell)",
			"AppKit.NSControl::set_Font(AppKit.NSFont)",
			"AppKit.NSControl::set_Formatter(Foundation.NSFormatter)",
			"AppKit.NSControl::set_ObjectValue(Foundation.NSObject)",
			"AppKit.NSControl::TakeDoubleValueFrom(Foundation.NSObject)",
			"AppKit.NSControl::TakeFloatValueFrom(Foundation.NSObject)",
			"AppKit.NSControl::TakeIntegerValueFrom(Foundation.NSObject)",
			"AppKit.NSControl::TakeIntValueFrom(Foundation.NSObject)",
			"AppKit.NSControl::TakeObjectValueFrom(Foundation.NSObject)",
			"AppKit.NSControl::TakeStringValueFrom(Foundation.NSObject)",
			"AppKit.NSControl::UpdateCell(AppKit.NSCell)",
			"AppKit.NSControl::UpdateCellInside(AppKit.NSCell)",
			"AppKit.NSController::.ctor(Foundation.NSCoder)",
			"AppKit.NSController::CommitEditing(Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSController::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSController::ObjectDidBeginEditing(AppKit.INSEditor)",
			"AppKit.NSController::ObjectDidEndEditing(AppKit.INSEditor)",
			"AppKit.NSControlTextEditingDelegate_Extensions::ControlTextDidBeginEditing(AppKit.INSControlTextEditingDelegate,Foundation.NSNotification)",
			"AppKit.NSControlTextEditingDelegate_Extensions::ControlTextDidChange(AppKit.INSControlTextEditingDelegate,Foundation.NSNotification)",
			"AppKit.NSControlTextEditingDelegate_Extensions::ControlTextDidEndEditing(AppKit.INSControlTextEditingDelegate,Foundation.NSNotification)",
			"AppKit.NSControlTextEditingDelegate_Extensions::DidFailToFormatString(AppKit.INSControlTextEditingDelegate,AppKit.NSControl,System.String,System.String)",
			"AppKit.NSControlTextEditingDelegate_Extensions::DidFailToValidatePartialString(AppKit.INSControlTextEditingDelegate,AppKit.NSControl,System.String,System.String)",
			"AppKit.NSControlTextEditingDelegate_Extensions::DoCommandBySelector(AppKit.INSControlTextEditingDelegate,AppKit.NSControl,AppKit.NSTextView,ObjCRuntime.Selector)",
			"AppKit.NSControlTextEditingDelegate_Extensions::GetCompletions(AppKit.INSControlTextEditingDelegate,AppKit.NSControl,AppKit.NSTextView,System.String[],Foundation.NSRange,System.IntPtr&)",
			"AppKit.NSControlTextEditingDelegate_Extensions::IsValidObject(AppKit.INSControlTextEditingDelegate,AppKit.NSControl,Foundation.NSObject)",
			"AppKit.NSControlTextEditingDelegate_Extensions::TextShouldBeginEditing(AppKit.INSControlTextEditingDelegate,AppKit.NSControl,AppKit.NSText)",
			"AppKit.NSControlTextEditingDelegate_Extensions::TextShouldEndEditing(AppKit.INSControlTextEditingDelegate,AppKit.NSControl,AppKit.NSText)",
			"AppKit.NSCursor::.ctor(AppKit.NSImage,AppKit.NSColor,AppKit.NSColor,CoreGraphics.CGPoint)",
			"AppKit.NSCursor::.ctor(AppKit.NSImage,CoreGraphics.CGPoint)",
			"AppKit.NSCursor::.ctor(Foundation.NSCoder)",
			"AppKit.NSCursor::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSCursor::MouseEntered(AppKit.NSEvent)",
			"AppKit.NSCursor::MouseExited(AppKit.NSEvent)",
			"AppKit.NSCustomImageRep::.ctor(Foundation.NSCoder)",
			"AppKit.NSCustomImageRep::.ctor(ObjCRuntime.Selector,Foundation.NSObject)",
			"AppKit.NSCustomTouchBarItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSCustomTouchBarItem::set_View(AppKit.NSView)",
			"AppKit.NSCustomTouchBarItem::set_ViewController(AppKit.NSViewController)",
			"AppKit.NSDataAsset::.ctor(System.String,Foundation.NSBundle)",
			"AppKit.NSDataAsset::Copy(Foundation.NSZone)",
			"AppKit.NSDatePicker::.ctor(Foundation.NSCoder)",
			"AppKit.NSDatePicker::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSDatePicker::set_Calendar(Foundation.NSCalendar)",
			"AppKit.NSDatePicker::set_Cell(AppKit.NSDatePickerCell)",
			"AppKit.NSDatePicker::set_DateValue(Foundation.NSDate)",
			"AppKit.NSDatePicker::set_Locale(Foundation.NSLocale)",
			"AppKit.NSDatePicker::set_MaxDate(Foundation.NSDate)",
			"AppKit.NSDatePicker::set_MinDate(Foundation.NSDate)",
			"AppKit.NSDatePicker::set_TextColor(AppKit.NSColor)",
			"AppKit.NSDatePicker::set_TimeZone(Foundation.NSTimeZone)",
			"AppKit.NSDatePickerCell::.ctor(AppKit.NSImage)",
			"AppKit.NSDatePickerCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSDatePickerCell::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSDatePickerCell::set_Calendar(Foundation.NSCalendar)",
			"AppKit.NSDatePickerCell::set_DateValue(Foundation.NSDate)",
			"AppKit.NSDatePickerCell::set_Locale(Foundation.NSLocale)",
			"AppKit.NSDatePickerCell::set_MaxDate(Foundation.NSDate)",
			"AppKit.NSDatePickerCell::set_MinDate(Foundation.NSDate)",
			"AppKit.NSDatePickerCell::set_TextColor(AppKit.NSColor)",
			"AppKit.NSDatePickerCell::set_TimeZone(Foundation.NSTimeZone)",
			"AppKit.NSDatePickerCellDelegate_Extensions::ValidateProposedDateValue(AppKit.INSDatePickerCellDelegate,AppKit.NSDatePickerCell,Foundation.NSDate&,System.Double)",
			"AppKit.NSDictionaryController::.ctor(Foundation.NSCoder)",
			"AppKit.NSDictionaryController::set_InitialValue(Foundation.NSObject)",
			"AppKit.NSDictionaryController::set_LocalizedKeyDictionary(Foundation.NSDictionary)",
			"AppKit.NSDictionaryControllerKeyValuePair::set_Value(Foundation.NSObject)",
			"AppKit.NSDiffableDataSourceSnapshot`2::AppendItems(ItemIdentifierType[],SectionIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::Copy(Foundation.NSZone)",
			"AppKit.NSDiffableDataSourceSnapshot`2::GetIndex(ItemIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::GetIndex(SectionIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::GetItemIdentifiersInSection(SectionIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::GetNumberOfItems(SectionIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::GetSectionIdentifierForSection(ItemIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::InsertItemsAfter(ItemIdentifierType[],ItemIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::InsertItemsBefore(ItemIdentifierType[],ItemIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::InsertSectionsAfter(SectionIdentifierType[],SectionIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::InsertSectionsBefore(SectionIdentifierType[],SectionIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::MoveItemAfter(ItemIdentifierType,ItemIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::MoveItemBefore(ItemIdentifierType,ItemIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::MoveSectionAfter(SectionIdentifierType,SectionIdentifierType)",
			"AppKit.NSDiffableDataSourceSnapshot`2::MoveSectionBefore(SectionIdentifierType,SectionIdentifierType)",
			"AppKit.NSDockTile::set_ContentView(AppKit.NSView)",
			"AppKit.NSDockTilePlugIn_Extensions::DockMenu(AppKit.INSDockTilePlugIn)",
			"AppKit.NSDockTilePlugInWrapper::SetDockTile(AppKit.NSDockTile)",
			"AppKit.NSDocument::.ctor(Foundation.NSUrl,Foundation.NSUrl,System.String,Foundation.NSError&)",
			"AppKit.NSDocument::.ctor(Foundation.NSUrl,System.String,Foundation.NSError&)",
			"AppKit.NSDocument::_DuplicateDocument(Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocument::AccommodatePresentedSubitemDeletion(Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"AppKit.NSDocument::AddWindowController(AppKit.NSWindowController)",
			"AppKit.NSDocument::AutosaveDocument(Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocument::BrowseDocumentVersions(Foundation.NSObject)",
			"AppKit.NSDocument::CanCloseDocument(Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocument::CanWriteAsynchronously(Foundation.NSUrl,System.String,AppKit.NSSaveOperationType)",
			"AppKit.NSDocument::DuplicateDocument(Foundation.NSObject)",
			"AppKit.NSDocument::EncodeRestorableState(Foundation.NSCoder)",
			"AppKit.NSDocument::EncodeRestorableState(Foundation.NSCoder,Foundation.NSOperationQueue)",
			"AppKit.NSDocument::FileAttributesToWrite(Foundation.NSUrl,System.String,AppKit.NSSaveOperationType,Foundation.NSUrl,Foundation.NSError&)",
			"AppKit.NSDocument::LockDocument(Foundation.NSObject)",
			"AppKit.NSDocument::MoveDocument(Foundation.NSObject)",
			"AppKit.NSDocument::MoveDocumentToUbiquityContainer(Foundation.NSObject)",
			"AppKit.NSDocument::MoveToUrl(Foundation.NSUrl,AppKit.NSDocumentMoveToUrlCompletionHandler)",
			"AppKit.NSDocument::ObjectDidBeginEditing(AppKit.INSEditor)",
			"AppKit.NSDocument::ObjectDidEndEditing(AppKit.INSEditor)",
			"AppKit.NSDocument::Prepare(AppKit.NSSharingServicePicker)",
			"AppKit.NSDocument::PreparePageLayout(AppKit.NSPageLayout)",
			"AppKit.NSDocument::PrepareSavePanel(AppKit.NSSavePanel)",
			"AppKit.NSDocument::PresentedItemChangedUbiquityAttributes(Foundation.NSSet`1<Foundation.NSString>)",
			"AppKit.NSDocument::PresentedItemGainedVersion(Foundation.NSFileVersion)",
			"AppKit.NSDocument::PresentedItemLostVersion(Foundation.NSFileVersion)",
			"AppKit.NSDocument::PresentedItemMoved(Foundation.NSUrl)",
			"AppKit.NSDocument::PresentedItemResolveConflictVersion(Foundation.NSFileVersion)",
			"AppKit.NSDocument::PresentedSubitemAppeared(Foundation.NSUrl)",
			"AppKit.NSDocument::PresentedSubitemChanged(Foundation.NSUrl)",
			"AppKit.NSDocument::PresentedSubitemGainedVersion(Foundation.NSUrl,Foundation.NSFileVersion)",
			"AppKit.NSDocument::PresentedSubitemLostVersion(Foundation.NSUrl,Foundation.NSFileVersion)",
			"AppKit.NSDocument::PresentedSubitemMoved(Foundation.NSUrl,Foundation.NSUrl)",
			"AppKit.NSDocument::PresentedSubitemResolvedConflictVersion(Foundation.NSUrl,Foundation.NSFileVersion)",
			"AppKit.NSDocument::PresentError(Foundation.NSError)",
			"AppKit.NSDocument::PresentError(Foundation.NSError,AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocument::PrintDocument(Foundation.NSDictionary,System.Boolean,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocument::PrintDocument(Foundation.NSObject)",
			"AppKit.NSDocument::PrintOperation(Foundation.NSDictionary,Foundation.NSError&)",
			"AppKit.NSDocument::ReadFromData(Foundation.NSData,System.String,Foundation.NSError&)",
			"AppKit.NSDocument::ReadFromFileWrapper(Foundation.NSFileWrapper,System.String,Foundation.NSError&)",
			"AppKit.NSDocument::ReadFromUrl(Foundation.NSUrl,System.String,Foundation.NSError&)",
			"AppKit.NSDocument::RemoveWindowController(AppKit.NSWindowController)",
			"AppKit.NSDocument::RenameDocument(Foundation.NSObject)",
			"AppKit.NSDocument::RestoreDocumentWindow(System.String,Foundation.NSCoder,AppKit.NSWindowCompletionHandler)",
			"AppKit.NSDocument::RestoreState(Foundation.NSCoder)",
			"AppKit.NSDocument::RestoreUserActivityState(Foundation.NSUserActivity)",
			"AppKit.NSDocument::RevertDocumentToSaved(Foundation.NSObject)",
			"AppKit.NSDocument::RevertToContentsOfUrl(Foundation.NSUrl,System.String,Foundation.NSError&)",
			"AppKit.NSDocument::RunModalPageLayout(AppKit.NSPrintInfo,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocument::RunModalPrintOperation(AppKit.NSPrintOperation,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocument::RunModalSavePanelForSaveOperation(AppKit.NSSaveOperationType,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocument::RunPageLayout(Foundation.NSObject)",
			"AppKit.NSDocument::SaveDocument(Foundation.NSObject)",
			"AppKit.NSDocument::SaveDocument(Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocument::SaveDocumentAs(Foundation.NSObject)",
			"AppKit.NSDocument::SaveDocumentAsPdf(Foundation.NSObject)",
			"AppKit.NSDocument::SaveDocumentTo(Foundation.NSObject)",
			"AppKit.NSDocument::SaveTo(Foundation.NSUrl,System.String,AppKit.NSSaveOperationType,AppKit.NSDocumentCompletionHandler)",
			"AppKit.NSDocument::SaveToUrl(Foundation.NSUrl,System.String,AppKit.NSSaveOperationType,Foundation.NSError&)",
			"AppKit.NSDocument::SaveToUrl(Foundation.NSUrl,System.String,AppKit.NSSaveOperationType,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocument::set_AutosavedContentsFileUrl(Foundation.NSUrl)",
			"AppKit.NSDocument::set_FileModificationDate(Foundation.NSDate)",
			"AppKit.NSDocument::set_FileUrl(Foundation.NSUrl)",
			"AppKit.NSDocument::set_PrintInfo(AppKit.NSPrintInfo)",
			"AppKit.NSDocument::set_UndoManager(Foundation.NSUndoManager)",
			"AppKit.NSDocument::set_UserActivity(Foundation.NSUserActivity)",
			"AppKit.NSDocument::SetWindow(AppKit.NSWindow)",
			"AppKit.NSDocument::ShareDocument(AppKit.NSSharingService,System.Action`1<System.Boolean>)",
			"AppKit.NSDocument::ShouldChangePrintInfo(AppKit.NSPrintInfo)",
			"AppKit.NSDocument::ShouldCloseWindowController(AppKit.NSWindowController,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocument::UnlockDocument(Foundation.NSObject)",
			"AppKit.NSDocument::UpdateChangeCount(Foundation.NSObject,AppKit.NSSaveOperationType)",
			"AppKit.NSDocument::UpdateUserActivityState(Foundation.NSUserActivity)",
			"AppKit.NSDocument::ValidateMenuItem(AppKit.NSMenuItem)",
			"AppKit.NSDocument::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"AppKit.NSDocument::WillNotPresentError(Foundation.NSError)",
			"AppKit.NSDocument::WillPresentError(Foundation.NSError)",
			"AppKit.NSDocument::WindowControllerDidLoadNib(AppKit.NSWindowController)",
			"AppKit.NSDocument::WindowControllerWillLoadNib(AppKit.NSWindowController)",
			"AppKit.NSDocument::WriteSafelyToUrl(Foundation.NSUrl,System.String,AppKit.NSSaveOperationType,Foundation.NSError&)",
			"AppKit.NSDocument::WriteToUrl(Foundation.NSUrl,System.String,AppKit.NSSaveOperationType,Foundation.NSUrl,Foundation.NSError&)",
			"AppKit.NSDocument::WriteToUrl(Foundation.NSUrl,System.String,Foundation.NSError&)",
			"AppKit.NSDocumentController::.ctor(Foundation.NSCoder)",
			"AppKit.NSDocumentController::AddDocument(AppKit.NSDocument)",
			"AppKit.NSDocumentController::BeginOpenPanel(AppKit.NSOpenPanel,Foundation.NSArray,AppKit.NSDocumentControllerOpenPanelResultHandler)",
			"AppKit.NSDocumentController::ClearRecentDocuments(Foundation.NSObject)",
			"AppKit.NSDocumentController::CloseAllDocuments(Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocumentController::DocumentForUrl(Foundation.NSUrl)",
			"AppKit.NSDocumentController::DocumentForWindow(AppKit.NSWindow)",
			"AppKit.NSDocumentController::DuplicateDocumentWithContentsOfUrl(Foundation.NSUrl,System.Boolean,System.String,Foundation.NSError&)",
			"AppKit.NSDocumentController::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSDocumentController::MakeDocument(Foundation.NSUrl,Foundation.NSUrl,System.String,Foundation.NSError&)",
			"AppKit.NSDocumentController::MakeDocument(Foundation.NSUrl,System.String,Foundation.NSError&)",
			"AppKit.NSDocumentController::NewDocument(Foundation.NSObject)",
			"AppKit.NSDocumentController::NoteNewRecentDocument(AppKit.NSDocument)",
			"AppKit.NSDocumentController::NoteNewRecentDocumentURL(Foundation.NSUrl)",
			"AppKit.NSDocumentController::OpenDocument(Foundation.NSObject)",
			"AppKit.NSDocumentController::OpenDocument(Foundation.NSUrl,System.Boolean,AppKit.OpenDocumentCompletionHandler)",
			"AppKit.NSDocumentController::OpenDocument(Foundation.NSUrl,System.Boolean,Foundation.NSError&)",
			"AppKit.NSDocumentController::PresentError(Foundation.NSError)",
			"AppKit.NSDocumentController::PresentError(Foundation.NSError,AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocumentController::RemoveDocument(AppKit.NSDocument)",
			"AppKit.NSDocumentController::ReopenDocument(Foundation.NSUrl,Foundation.NSUrl,Foundation.NSError&)",
			"AppKit.NSDocumentController::ReopenDocumentForUrl(Foundation.NSUrl,Foundation.NSUrl,System.Boolean,AppKit.OpenDocumentCompletionHandler)",
			"AppKit.NSDocumentController::RestoreWindow(System.String,Foundation.NSCoder,AppKit.NSWindowCompletionHandler)",
			"AppKit.NSDocumentController::ReviewUnsavedDocuments(System.String,System.Boolean,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSDocumentController::RunModalOpenPanel(AppKit.NSOpenPanel,System.String[])",
			"AppKit.NSDocumentController::SaveAllDocuments(Foundation.NSObject)",
			"AppKit.NSDocumentController::TypeForUrl(Foundation.NSUrl,Foundation.NSError&)",
			"AppKit.NSDocumentController::ValidateMenuItem(AppKit.NSMenuItem)",
			"AppKit.NSDocumentController::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"AppKit.NSDocumentController::WillPresentError(Foundation.NSError)",
			"AppKit.NSDraggingDestination_Extensions::ConcludeDragOperation(AppKit.INSDraggingDestination,AppKit.INSDraggingInfo)",
			"AppKit.NSDraggingDestination_Extensions::DraggingEnded(AppKit.INSDraggingDestination,AppKit.INSDraggingInfo)",
			"AppKit.NSDraggingDestination_Extensions::DraggingEntered(AppKit.INSDraggingDestination,AppKit.INSDraggingInfo)",
			"AppKit.NSDraggingDestination_Extensions::DraggingExited(AppKit.INSDraggingDestination,AppKit.INSDraggingInfo)",
			"AppKit.NSDraggingDestination_Extensions::DraggingUpdated(AppKit.INSDraggingDestination,AppKit.INSDraggingInfo)",
			"AppKit.NSDraggingDestination_Extensions::GetWantsPeriodicDraggingUpdates(AppKit.INSDraggingDestination)",
			"AppKit.NSDraggingDestination_Extensions::PerformDragOperation(AppKit.INSDraggingDestination,AppKit.INSDraggingInfo)",
			"AppKit.NSDraggingDestination_Extensions::PrepareForDragOperation(AppKit.INSDraggingDestination,AppKit.INSDraggingInfo)",
			"AppKit.NSDraggingImageComponent::set_Contents(Foundation.NSObject)",
			"AppKit.NSDraggingInfoWrapper::EnumerateDraggingItems(AppKit.NSDraggingItemEnumerationOptions,AppKit.NSView,System.IntPtr,Foundation.NSDictionary,AppKit.NSDraggingEnumerator)",
			"AppKit.NSDraggingInfoWrapper::PromisedFilesDroppedAtDestination(Foundation.NSUrl)",
			"AppKit.NSDraggingItem::.ctor(AppKit.INSPasteboardWriting)",
			"AppKit.NSDraggingItem::SetDraggingFrame(CoreGraphics.CGRect,Foundation.NSObject)",
			"AppKit.NSDraggingSession::EnumerateDraggingItems(AppKit.NSDraggingItemEnumerationOptions,AppKit.NSView,Foundation.NSArray,Foundation.NSDictionary,AppKit.NSDraggingEnumerator)",
			"AppKit.NSDraggingSession::EnumerateDraggingItems(AppKit.NSDraggingItemEnumerationOptions,AppKit.NSView,System.IntPtr,Foundation.NSDictionary,AppKit.NSDraggingEnumerator)",
			"AppKit.NSDraggingSource_Extensions::DraggedImageBeganAt(AppKit.INSDraggingSource,AppKit.NSImage,CoreGraphics.CGPoint)",
			"AppKit.NSDraggingSource_Extensions::DraggedImageEndedAtDeposited(AppKit.INSDraggingSource,AppKit.NSImage,CoreGraphics.CGPoint,System.Boolean)",
			"AppKit.NSDraggingSource_Extensions::DraggedImageEndedAtOperation(AppKit.INSDraggingSource,AppKit.NSImage,CoreGraphics.CGPoint,AppKit.NSDragOperation)",
			"AppKit.NSDraggingSource_Extensions::DraggedImageMovedTo(AppKit.INSDraggingSource,AppKit.NSImage,CoreGraphics.CGPoint)",
			"AppKit.NSDraggingSource_Extensions::DraggingSourceOperationMaskForLocal(AppKit.INSDraggingSource,System.Boolean)",
			"AppKit.NSDraggingSource_Extensions::GetIgnoreModifierKeysWhileDragging(AppKit.INSDraggingSource)",
			"AppKit.NSDraggingSource_Extensions::NamesOfPromisedFilesDroppedAtDestination(AppKit.INSDraggingSource,Foundation.NSUrl)",
			"AppKit.NSDrawer::.ctor(Foundation.NSCoder)",
			"AppKit.NSDrawer::Close(Foundation.NSObject)",
			"AppKit.NSDrawer::Open(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityApplicationFocusedUIElement(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityCancelButton(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityClearButton(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityCloseButton(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityCriticalValue(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityDecrementButton(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityDefaultButton(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityDisclosedRows(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityFocusedWindow(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityFullScreenButton(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityGrowArea(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityHeader(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityHorizontalScrollBar(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityIncrementButton(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityMainWindow(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityMarkerGroupUIElement(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityMarkerValues(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityMaxValue(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityMinimizeButton(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityMinValue(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityOverflowButton(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityProxy(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilitySearchButton(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilitySearchMenu(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityShownMenu(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityToolbarButton(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityUrl(Foundation.NSUrl)",
			"AppKit.NSDrawer::set_AccessibilityValue(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityVerticalScrollBar(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityWarningValue(Foundation.NSObject)",
			"AppKit.NSDrawer::set_AccessibilityZoomButton(Foundation.NSObject)",
			"AppKit.NSDrawer::set_ContentView(AppKit.NSView)",
			"AppKit.NSDrawer::set_ParentWindow(AppKit.NSWindow)",
			"AppKit.NSDrawer::Toggle(Foundation.NSObject)",
			"AppKit.NSDrawerDelegate_Extensions::DrawerDidClose(AppKit.INSDrawerDelegate,Foundation.NSNotification)",
			"AppKit.NSDrawerDelegate_Extensions::DrawerDidOpen(AppKit.INSDrawerDelegate,Foundation.NSNotification)",
			"AppKit.NSDrawerDelegate_Extensions::DrawerShouldClose(AppKit.INSDrawerDelegate,AppKit.NSDrawer)",
			"AppKit.NSDrawerDelegate_Extensions::DrawerShouldOpen(AppKit.INSDrawerDelegate,AppKit.NSDrawer)",
			"AppKit.NSDrawerDelegate_Extensions::DrawerWillClose(AppKit.INSDrawerDelegate,Foundation.NSNotification)",
			"AppKit.NSDrawerDelegate_Extensions::DrawerWillOpen(AppKit.INSDrawerDelegate,Foundation.NSNotification)",
			"AppKit.NSDrawerDelegate_Extensions::DrawerWillResizeContents(AppKit.INSDrawerDelegate,AppKit.NSDrawer,CoreGraphics.CGSize)",
			"AppKit.NSEditorRegistration_Extensions::ObjectDidBeginEditing(AppKit.INSEditorRegistration,AppKit.INSEditor)",
			"AppKit.NSEditorRegistration_Extensions::ObjectDidEndEditing(AppKit.INSEditorRegistration,AppKit.INSEditor)",
			"AppKit.NSEditorWrapper::CommitEditing(Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSEPSImageRep::.ctor(Foundation.NSCoder)",
			"AppKit.NSEPSImageRep::.ctor(Foundation.NSData)",
			"AppKit.NSEPSImageRep::FromData(Foundation.NSData)",
			"AppKit.NSEvent::.ctor(Foundation.NSCoder)",
			"AppKit.NSEvent::Copy(Foundation.NSZone)",
			"AppKit.NSEvent::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSEvent::EnterExitEvent(AppKit.NSEventType,CoreGraphics.CGPoint,AppKit.NSEventModifierMask,System.Double,System.IntPtr,AppKit.NSGraphicsContext,System.IntPtr,System.IntPtr,System.IntPtr)",
			"AppKit.NSEvent::GetCoalescedTouches(AppKit.NSTouch)",
			"AppKit.NSEvent::GetTouches(AppKit.NSView)",
			"AppKit.NSEvent::KeyEvent(AppKit.NSEventType,CoreGraphics.CGPoint,AppKit.NSEventModifierMask,System.Double,System.IntPtr,AppKit.NSGraphicsContext,System.String,System.String,System.Boolean,System.UInt16)",
			"AppKit.NSEvent::MouseEvent(AppKit.NSEventType,CoreGraphics.CGPoint,AppKit.NSEventModifierMask,System.Double,System.IntPtr,AppKit.NSGraphicsContext,System.IntPtr,System.IntPtr,System.Single)",
			"AppKit.NSEvent::OtherEvent(AppKit.NSEventType,CoreGraphics.CGPoint,AppKit.NSEventModifierMask,System.Double,System.IntPtr,AppKit.NSGraphicsContext,System.Int16,System.IntPtr,System.IntPtr)",
			"AppKit.NSEvent::RemoveMonitor(Foundation.NSObject)",
			"AppKit.NSEvent::TouchesMatchingPhase(AppKit.NSTouchPhase,AppKit.NSView)",
			"AppKit.NSExtendedStringDrawing::WeakDrawString(Foundation.NSString,CoreGraphics.CGRect,Foundation.NSStringDrawingOptions,Foundation.NSDictionary,AppKit.NSStringDrawingContext)",
			"AppKit.NSExtendedStringDrawing::WeakGetBoundingRect(Foundation.NSString,CoreGraphics.CGSize,Foundation.NSStringDrawingOptions,Foundation.NSDictionary,AppKit.NSStringDrawingContext)",
			"AppKit.NSFilePromiseProvider::.ctor(System.String,AppKit.INSFilePromiseProviderDelegate)",
			"AppKit.NSFilePromiseProvider::GetWritableTypesForPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSFilePromiseProvider::GetWritingOptionsForType(System.String,AppKit.NSPasteboard)",
			"AppKit.NSFilePromiseProvider::set_UserInfo(Foundation.NSObject)",
			"AppKit.NSFilePromiseProviderDelegate_Extensions::GetOperationQueue(AppKit.INSFilePromiseProviderDelegate,AppKit.NSFilePromiseProvider)",
			"AppKit.NSFilePromiseProviderDelegateWrapper::GetFileNameForDestination(AppKit.NSFilePromiseProvider,System.String)",
			"AppKit.NSFilePromiseProviderDelegateWrapper::WritePromiseToUrl(AppKit.NSFilePromiseProvider,Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"AppKit.NSFilePromiseReceiver::GetReadableTypesForPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSFilePromiseReceiver::GetReadingOptionsForType(System.String,AppKit.NSPasteboard)",
			"AppKit.NSFilePromiseReceiver::ReceivePromisedFiles(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSOperationQueue,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"AppKit.NSFont::.ctor(Foundation.NSCoder)",
			"AppKit.NSFont::_FromDescription(AppKit.NSFontDescriptor,Foundation.NSAffineTransform)",
			"AppKit.NSFont::_FromDescription(AppKit.NSFontDescriptor,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSFont::Copy(Foundation.NSZone)",
			"AppKit.NSFont::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSFont::FromCTFont(CoreText.CTFont)",
			"AppKit.NSFont::GetPreferredFont(System.String,Foundation.NSDictionary)",
			"AppKit.NSFont::SetInContext(AppKit.NSGraphicsContext)",
			"AppKit.NSFont::SetUserFixedPitchFont(AppKit.NSFont)",
			"AppKit.NSFont::SetUserFont(AppKit.NSFont)",
			"AppKit.NSFontChanging_Extensions::ChangeFont(AppKit.INSFontChanging,AppKit.NSFontManager)",
			"AppKit.NSFontChanging_Extensions::GetValidModes(AppKit.INSFontChanging,AppKit.NSFontPanel)",
			"AppKit.NSFontCollection::.ctor(Foundation.NSCoder)",
			"AppKit.NSFontCollection::Copy(Foundation.NSZone)",
			"AppKit.NSFontCollection::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSFontCollection::FromLocale(Foundation.NSLocale)",
			"AppKit.NSFontCollection::GetMatchingDescriptors(Foundation.NSDictionary)",
			"AppKit.NSFontCollection::GetMatchingDescriptors(System.String,Foundation.NSDictionary)",
			"AppKit.NSFontCollection::MutableCopy(Foundation.NSZone)",
			"AppKit.NSFontCollection::ShowFontCollection(AppKit.NSFontCollection,System.String,AppKit.NSFontCollectionVisibility,Foundation.NSError&)",
			"AppKit.NSFontDescriptor::.ctor(Foundation.NSCoder)",
			"AppKit.NSFontDescriptor::.ctor(Foundation.NSDictionary)",
			"AppKit.NSFontDescriptor::Copy(Foundation.NSZone)",
			"AppKit.NSFontDescriptor::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSFontDescriptor::FontDescriptorByAddingAttributes(Foundation.NSDictionary)",
			"AppKit.NSFontDescriptor::FontDescriptorWithMatrix(Foundation.NSAffineTransform)",
			"AppKit.NSFontDescriptor::FromAttributes(Foundation.NSDictionary)",
			"AppKit.NSFontDescriptor::FromNameMatrix(System.String,Foundation.NSAffineTransform)",
			"AppKit.NSFontDescriptor::GetPreferredFont(System.String,Foundation.NSDictionary)",
			"AppKit.NSFontDescriptor::MatchingFontDescriptors(Foundation.NSSet)",
			"AppKit.NSFontDescriptor::MatchingFontDescriptorWithMandatoryKeys(Foundation.NSSet)",
			"AppKit.NSFontManager::AddFontTrait(Foundation.NSObject)",
			"AppKit.NSFontManager::AvailableFontNamesMatchingFontDescriptor(AppKit.NSFontDescriptor)",
			"AppKit.NSFontManager::ConvertAttributes(Foundation.NSDictionary)",
			"AppKit.NSFontManager::ConvertFont(AppKit.NSFont)",
			"AppKit.NSFontManager::ConvertFont(AppKit.NSFont,AppKit.NSFontTraitMask)",
			"AppKit.NSFontManager::ConvertFont(AppKit.NSFont,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSFontManager::ConvertFont(AppKit.NSFont,System.String)",
			"AppKit.NSFontManager::ConvertFontToFamily(AppKit.NSFont,System.String)",
			"AppKit.NSFontManager::ConvertFontToNotHaveTrait(AppKit.NSFont,AppKit.NSFontTraitMask)",
			"AppKit.NSFontManager::ConvertWeight(System.Boolean,AppKit.NSFont)",
			"AppKit.NSFontManager::ModifyFont(Foundation.NSObject)",
			"AppKit.NSFontManager::ModifyFontViaPanel(Foundation.NSObject)",
			"AppKit.NSFontManager::OrderFrontFontPanel(Foundation.NSObject)",
			"AppKit.NSFontManager::OrderFrontStylesPanel(Foundation.NSObject)",
			"AppKit.NSFontManager::RemoveFontDescriptor(AppKit.NSFontDescriptor,System.String)",
			"AppKit.NSFontManager::RemoveFontTrait(Foundation.NSObject)",
			"AppKit.NSFontManager::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSFontManager::SetFontMenu(AppKit.NSMenu)",
			"AppKit.NSFontManager::SetSelectedAttributes(Foundation.NSDictionary,System.Boolean)",
			"AppKit.NSFontManager::SetSelectedFont(AppKit.NSFont,System.Boolean)",
			"AppKit.NSFontManager::TraitsOfFont(AppKit.NSFont)",
			"AppKit.NSFontManager::ValidateMenuItem(AppKit.NSMenuItem)",
			"AppKit.NSFontManager::WeightOfFont(AppKit.NSFont)",
			"AppKit.NSFontPanel::.ctor(Foundation.NSCoder)",
			"AppKit.NSFontPanel::PanelConvertFont(AppKit.NSFont)",
			"AppKit.NSFontPanel::set_AccessoryView(AppKit.NSView)",
			"AppKit.NSFontPanel::SetPanelFont(AppKit.NSFont,System.Boolean)",
			"AppKit.NSForm::.ctor(CoreGraphics.CGRect,AppKit.NSMatrixMode,AppKit.NSCell,System.IntPtr,System.IntPtr)",
			"AppKit.NSForm::.ctor(Foundation.NSCoder)",
			"AppKit.NSForm::SetTextFont(AppKit.NSFont)",
			"AppKit.NSForm::SetTitleFont(AppKit.NSFont)",
			"AppKit.NSFormCell::.ctor(AppKit.NSImage)",
			"AppKit.NSFormCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSFormCell::set_AttributedTitle(Foundation.NSAttributedString)",
			"AppKit.NSFormCell::set_PlaceholderAttributedString(Foundation.NSAttributedString)",
			"AppKit.NSFormCell::set_TitleFont(AppKit.NSFont)",
			"AppKit.NSGestureRecognizer::.ctor(Foundation.NSCoder)",
			"AppKit.NSGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSGestureRecognizer::CanBePrevented(AppKit.NSGestureRecognizer)",
			"AppKit.NSGestureRecognizer::CanPrevent(AppKit.NSGestureRecognizer)",
			"AppKit.NSGestureRecognizer::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSGestureRecognizer::FlagsChanged(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::KeyDown(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::KeyUp(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::LocationInView(AppKit.NSView)",
			"AppKit.NSGestureRecognizer::Magnify(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::MouseDown(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::MouseDragged(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::MouseUp(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::OtherMouseDown(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::OtherMouseDragged(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::OtherMouseUp(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::PressureChange(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::RightMouseDown(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::RightMouseDragged(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::RightMouseUp(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::Rotate(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSGestureRecognizer::set_PressureConfiguration(AppKit.NSPressureConfiguration)",
			"AppKit.NSGestureRecognizer::ShouldBeRequiredToFailByGestureRecognizer(AppKit.NSGestureRecognizer)",
			"AppKit.NSGestureRecognizer::ShouldRequireFailureOfGestureRecognizer(AppKit.NSGestureRecognizer)",
			"AppKit.NSGestureRecognizer::TabletPoint(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::TouchesBegan(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::TouchesCancelled(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::TouchesEnded(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer::TouchesMoved(AppKit.NSEvent)",
			"AppKit.NSGestureRecognizer_NSTouchBar::GetAllowedTouchTypes(AppKit.NSGestureRecognizer)",
			"AppKit.NSGestureRecognizer_NSTouchBar::SetAllowedTouchTypes(AppKit.NSGestureRecognizer,AppKit.NSTouchTypeMask)",
			"AppKit.NSGestureRecognizerDelegate_Extensions::ShouldAttemptToRecognize(AppKit.INSGestureRecognizerDelegate,AppKit.NSGestureRecognizer,AppKit.NSEvent)",
			"AppKit.NSGestureRecognizerDelegate_Extensions::ShouldBegin(AppKit.INSGestureRecognizerDelegate,AppKit.NSGestureRecognizer)",
			"AppKit.NSGestureRecognizerDelegate_Extensions::ShouldBeRequiredToFail(AppKit.INSGestureRecognizerDelegate,AppKit.NSGestureRecognizer,AppKit.NSGestureRecognizer)",
			"AppKit.NSGestureRecognizerDelegate_Extensions::ShouldReceiveTouch(AppKit.INSGestureRecognizerDelegate,AppKit.NSGestureRecognizer,AppKit.NSTouch)",
			"AppKit.NSGestureRecognizerDelegate_Extensions::ShouldRecognizeSimultaneously(AppKit.INSGestureRecognizerDelegate,AppKit.NSGestureRecognizer,AppKit.NSGestureRecognizer)",
			"AppKit.NSGestureRecognizerDelegate_Extensions::ShouldRequireFailure(AppKit.INSGestureRecognizerDelegate,AppKit.NSGestureRecognizer,AppKit.NSGestureRecognizer)",
			"AppKit.NSGlyphGenerator::GenerateGlyphs(Foundation.NSObject,System.UIntPtr,System.UIntPtr&,System.UIntPtr&)",
			"AppKit.NSGlyphInfo::.ctor(Foundation.NSCoder)",
			"AppKit.NSGlyphInfo::Copy(Foundation.NSZone)",
			"AppKit.NSGlyphInfo::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSGlyphInfo::Get(System.String,AppKit.NSFont,System.String)",
			"AppKit.NSGlyphInfo::Get(System.UInt32,AppKit.NSFont,System.String)",
			"AppKit.NSGlyphInfo::GetGlyphInfo(System.UInt16,AppKit.NSFont,System.String)",
			"AppKit.NSGradient::.ctor(AppKit.NSColor,AppKit.NSColor)",
			"AppKit.NSGradient::.ctor(Foundation.NSCoder)",
			"AppKit.NSGradient::Copy(Foundation.NSZone)",
			"AppKit.NSGradient::DrawInBezierPath(AppKit.NSBezierPath,CoreGraphics.CGPoint)",
			"AppKit.NSGradient::DrawInBezierPath(AppKit.NSBezierPath,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSGradient::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSGradient::Initialize(AppKit.NSColor[],System.Void*,AppKit.NSColorSpace)",
			"AppKit.NSGraphics::BestDepth(Foundation.NSString,System.IntPtr,System.IntPtr,System.Boolean,System.Boolean&)",
			"AppKit.NSGraphics::NumberOfColorComponents(Foundation.NSString)",
			"AppKit.NSGraphicsContext::FromAttributes(Foundation.NSDictionary)",
			"AppKit.NSGraphicsContext::FromBitmap(AppKit.NSBitmapImageRep)",
			"AppKit.NSGraphicsContext::FromCGContext(CoreGraphics.CGContext,System.Boolean)",
			"AppKit.NSGraphicsContext::FromGraphicsPort(CoreGraphics.CGContext,System.Boolean)",
			"AppKit.NSGraphicsContext::FromWindow(AppKit.NSWindow)",
			"AppKit.NSGraphicsContext::set_CurrentContext(AppKit.NSGraphicsContext)",
			"AppKit.NSGridCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSGridCell::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSGridCell::set_ContentView(AppKit.NSView)",
			"AppKit.NSGridColumn::.ctor(Foundation.NSCoder)",
			"AppKit.NSGridColumn::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSGridRow::.ctor(Foundation.NSCoder)",
			"AppKit.NSGridRow::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSGridView::.ctor(Foundation.NSCoder)",
			"AppKit.NSGridView::GetCell(AppKit.NSView)",
			"AppKit.NSGridView::GetIndex(AppKit.NSGridColumn)",
			"AppKit.NSGridView::GetIndex(AppKit.NSGridRow)",
			"AppKit.NSGroupTouchBarItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSGroupTouchBarItem::CreateGroupItem(System.String,AppKit.NSTouchBarItem[],AppKit.NSUserInterfaceCompressionOptions)",
			"AppKit.NSGroupTouchBarItem::set_GroupTouchBar(AppKit.NSTouchBar)",
			"AppKit.NSHelpManager::Context(Foundation.NSObject)",
			"AppKit.NSHelpManager::RegisterBooks(Foundation.NSBundle)",
			"AppKit.NSHelpManager::RemoveContext(Foundation.NSObject)",
			"AppKit.NSHelpManager::SetContext(Foundation.NSAttributedString,Foundation.NSObject)",
			"AppKit.NSHelpManager::ShowContext(Foundation.NSObject,CoreGraphics.CGPoint)",
			"AppKit.NSImage::.ctor(AppKit.NSPasteboard)",
			"AppKit.NSImage::.ctor(CoreGraphics.CGImage,CoreGraphics.CGSize)",
			"AppKit.NSImage::.ctor(Foundation.NSCoder)",
			"AppKit.NSImage::.ctor(Foundation.NSData)",
			"AppKit.NSImage::.ctor(Foundation.NSUrl)",
			"AppKit.NSImage::AddRepresentation(AppKit.NSImageRep)",
			"AppKit.NSImage::AsCGImage(CoreGraphics.CGRect&,AppKit.NSGraphicsContext,Foundation.NSDictionary)",
			"AppKit.NSImage::BestRepresentation(CoreGraphics.CGRect,AppKit.NSGraphicsContext,Foundation.NSDictionary)",
			"AppKit.NSImage::BestRepresentationForDevice(Foundation.NSDictionary)",
			"AppKit.NSImage::CanInitWithPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSImage::Copy(Foundation.NSZone)",
			"AppKit.NSImage::Draw(AppKit.NSImageRep,CoreGraphics.CGRect)",
			"AppKit.NSImage::Draw(CoreGraphics.CGRect,CoreGraphics.CGRect,AppKit.NSCompositingOperation,System.Runtime.InteropServices.NFloat,System.Boolean,Foundation.NSDictionary)",
			"AppKit.NSImage::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSImage::GetImage(AppKit.NSImageSymbolConfiguration)",
			"AppKit.NSImage::GetReadableTypesForPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSImage::GetReadingOptionsForType(System.String,AppKit.NSPasteboard)",
			"AppKit.NSImage::GetWritableTypesForPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSImage::GetWritingOptionsForType(System.String,AppKit.NSPasteboard)",
			"AppKit.NSImage::HitTestRect(CoreGraphics.CGRect,CoreGraphics.CGRect,AppKit.NSGraphicsContext,Foundation.NSDictionary,System.Boolean)",
			"AppKit.NSImage::InitWithData(Foundation.NSData)",
			"AppKit.NSImage::InitWithDataIgnoringOrientation(Foundation.NSData)",
			"AppKit.NSImage::RemoveRepresentation(AppKit.NSImageRep)",
			"AppKit.NSImage::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSImage::set_BackgroundColor(UIKit.UIColor)",
			"AppKit.NSImageCell::.ctor(AppKit.NSImage)",
			"AppKit.NSImageCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSImageDelegate_Extensions::DidLoadPartOfRepresentation(AppKit.INSImageDelegate,AppKit.NSImage,AppKit.NSImageRep,System.IntPtr)",
			"AppKit.NSImageDelegate_Extensions::DidLoadRepresentation(AppKit.INSImageDelegate,AppKit.NSImage,AppKit.NSImageRep,AppKit.NSImageLoadStatus)",
			"AppKit.NSImageDelegate_Extensions::DidLoadRepresentationHeader(AppKit.INSImageDelegate,AppKit.NSImage,AppKit.NSImageRep)",
			"AppKit.NSImageDelegate_Extensions::ImageDidNotDraw(AppKit.INSImageDelegate,Foundation.NSObject,CoreGraphics.CGRect)",
			"AppKit.NSImageDelegate_Extensions::WillLoadRepresentation(AppKit.INSImageDelegate,AppKit.NSImage,AppKit.NSImageRep)",
			"AppKit.NSImageRep::.ctor(Foundation.NSCoder)",
			"AppKit.NSImageRep::AsCGImage(CoreGraphics.CGRect&,AppKit.NSGraphicsContext,Foundation.NSDictionary)",
			"AppKit.NSImageRep::CanInitWithData(Foundation.NSData)",
			"AppKit.NSImageRep::CanInitWithPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSImageRep::Copy(Foundation.NSZone)",
			"AppKit.NSImageRep::DrawInRect(CoreGraphics.CGRect,CoreGraphics.CGRect,AppKit.NSCompositingOperation,System.Runtime.InteropServices.NFloat,System.Boolean,Foundation.NSDictionary)",
			"AppKit.NSImageRep::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSImageRep::ImageRepClassForData(Foundation.NSData)",
			"AppKit.NSImageRep::ImageRepFromPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSImageRep::ImageRepFromUrl(Foundation.NSUrl)",
			"AppKit.NSImageRep::ImageRepsFromPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSImageRep::ImageRepsFromUrl(Foundation.NSUrl)",
			"AppKit.NSImageSymbolConfiguration::.ctor(Foundation.NSCoder)",
			"AppKit.NSImageSymbolConfiguration::Copy(Foundation.NSZone)",
			"AppKit.NSImageSymbolConfiguration::Create(AppKit.NSColor)",
			"AppKit.NSImageSymbolConfiguration::Create(AppKit.NSImageSymbolConfiguration)",
			"AppKit.NSImageSymbolConfiguration::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSImageView::.ctor(Foundation.NSCoder)",
			"AppKit.NSImageView::FromImage(AppKit.NSImage)",
			"AppKit.NSImageView::set_ContentTintColor(AppKit.NSColor)",
			"AppKit.NSImageView::set_Image(AppKit.NSImage)",
			"AppKit.NSImageView::set_SymbolConfiguration(AppKit.NSImageSymbolConfiguration)",
			"AppKit.NSImageView::ValidateMenuItem(AppKit.NSMenuItem)",
			"AppKit.NSLayerDelegateContentsScaleUpdating_Extensions::ShouldInheritContentsScale(AppKit.INSLayerDelegateContentsScaleUpdating,CoreAnimation.CALayer,System.Runtime.InteropServices.NFloat,AppKit.NSWindow)",
			"AppKit.NSLayoutAnchor`1::.ctor(Foundation.NSCoder)",
			"AppKit.NSLayoutAnchor`1::ConstraintEqualTo(AppKit.NSLayoutAnchor`1<AnchorType>)",
			"AppKit.NSLayoutAnchor`1::ConstraintEqualTo(AppKit.NSLayoutAnchor`1<AnchorType>,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutAnchor`1::ConstraintGreaterThanOrEqualTo(AppKit.NSLayoutAnchor`1<AnchorType>)",
			"AppKit.NSLayoutAnchor`1::ConstraintGreaterThanOrEqualTo(AppKit.NSLayoutAnchor`1<AnchorType>,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutAnchor`1::ConstraintLessThanOrEqualTo(AppKit.NSLayoutAnchor`1<AnchorType>)",
			"AppKit.NSLayoutAnchor`1::ConstraintLessThanOrEqualTo(AppKit.NSLayoutAnchor`1<AnchorType>,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutAnchor`1::Copy(Foundation.NSZone)",
			"AppKit.NSLayoutAnchor`1::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSLayoutConstraint::AnimationFor(Foundation.NSString)",
			"AppKit.NSLayoutConstraint::Create(ObjCRuntime.INativeObject,AppKit.NSLayoutAttribute,AppKit.NSLayoutRelation,ObjCRuntime.INativeObject,AppKit.NSLayoutAttribute,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutConstraint::DefaultAnimationFor(Foundation.NSString)",
			"AppKit.NSLayoutConstraint::FromVisualFormat(System.String,AppKit.NSLayoutFormatOptions,Foundation.NSDictionary,Foundation.NSDictionary)",
			"AppKit.NSLayoutConstraint::set_Animations(Foundation.NSDictionary)",
			"AppKit.NSLayoutDimension::.ctor(Foundation.NSCoder)",
			"AppKit.NSLayoutDimension::ConstraintEqualTo(AppKit.NSLayoutDimension,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutDimension::ConstraintEqualTo(AppKit.NSLayoutDimension,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutDimension::ConstraintGreaterThanOrEqualTo(AppKit.NSLayoutDimension,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutDimension::ConstraintGreaterThanOrEqualTo(AppKit.NSLayoutDimension,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutDimension::ConstraintLessThanOrEqualTo(AppKit.NSLayoutDimension,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutDimension::ConstraintLessThanOrEqualTo(AppKit.NSLayoutDimension,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutGuide::.ctor(Foundation.NSCoder)",
			"AppKit.NSLayoutGuide::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSLayoutManager::.ctor(Foundation.NSCoder)",
			"AppKit.NSLayoutManager::AddTemporaryAttribute(Foundation.NSString,Foundation.NSObject,Foundation.NSRange)",
			"AppKit.NSLayoutManager::AddTemporaryAttribute(System.String,Foundation.NSObject,Foundation.NSRange)",
			"AppKit.NSLayoutManager::AddTemporaryAttributes(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSRange)",
			"AppKit.NSLayoutManager::AddTextContainer(AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSLayoutManager::EnsureLayoutForBoundingRect(CoreGraphics.CGRect,AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager::EnsureLayoutForTextContainer(AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager::EnumerateEnclosingRects(Foundation.NSRange,Foundation.NSRange,AppKit.NSTextContainer,AppKit.NSTextLayoutEnumerateEnclosingRects)",
			"AppKit.NSLayoutManager::FillBackground(System.IntPtr,System.UIntPtr,Foundation.NSRange,AppKit.NSColor)",
			"AppKit.NSLayoutManager::GetBoundingRect(Foundation.NSRange,AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager::GetBoundsRect(AppKit.NSTextBlock,Foundation.NSRange)",
			"AppKit.NSLayoutManager::GetBoundsRect(AppKit.NSTextBlock,System.UIntPtr,Foundation.NSRange&)",
			"AppKit.NSLayoutManager::GetBoundsRect(AppKit.NSTextBlock,System.UIntPtr,System.IntPtr)",
			"AppKit.NSLayoutManager::GetCharacterIndex(CoreGraphics.CGPoint,AppKit.NSTextContainer,System.IntPtr)",
			"AppKit.NSLayoutManager::GetCharacterIndex(CoreGraphics.CGPoint,AppKit.NSTextContainer,System.Runtime.InteropServices.NFloat&)",
			"AppKit.NSLayoutManager::GetDefaultBaselineOffset(AppKit.NSFont)",
			"AppKit.NSLayoutManager::GetDefaultLineHeight(AppKit.NSFont)",
			"AppKit.NSLayoutManager::GetFractionOfDistanceThroughGlyph(CoreGraphics.CGPoint,AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager::GetGlyphIndex(CoreGraphics.CGPoint,AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager::GetGlyphIndex(CoreGraphics.CGPoint,AppKit.NSTextContainer,System.Runtime.InteropServices.NFloat&)",
			"AppKit.NSLayoutManager::GetGlyphRange(AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager::GetGlyphRangeForBoundingRect(CoreGraphics.CGRect,AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager::GetGlyphRangeForBoundingRectWithoutAdditionalLayout(CoreGraphics.CGRect,AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager::GetLayoutRect(AppKit.NSTextBlock,Foundation.NSRange)",
			"AppKit.NSLayoutManager::GetLayoutRect(AppKit.NSTextBlock,System.UIntPtr,Foundation.NSRange&)",
			"AppKit.NSLayoutManager::GetLayoutRect(AppKit.NSTextBlock,System.UIntPtr,System.IntPtr)",
			"AppKit.NSLayoutManager::GetTemporaryAttribute(Foundation.NSString,System.UIntPtr,Foundation.NSRange&)",
			"AppKit.NSLayoutManager::GetTemporaryAttribute(Foundation.NSString,System.UIntPtr,Foundation.NSRange&,Foundation.NSRange)",
			"AppKit.NSLayoutManager::GetTemporaryAttribute(Foundation.NSString,System.UIntPtr,System.IntPtr)",
			"AppKit.NSLayoutManager::GetTemporaryAttribute(Foundation.NSString,System.UIntPtr,System.IntPtr,Foundation.NSRange)",
			"AppKit.NSLayoutManager::GetUsedRect(AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager::InsertTextContainer(AppKit.NSTextContainer,System.IntPtr)",
			"AppKit.NSLayoutManager::ProcessEditing(AppKit.NSTextStorage,AppKit.NSTextStorageEditActions,Foundation.NSRange,System.IntPtr,Foundation.NSRange)",
			"AppKit.NSLayoutManager::RemoveTemporaryAttribute(Foundation.NSString,Foundation.NSRange)",
			"AppKit.NSLayoutManager::set_GlyphGenerator(AppKit.NSGlyphGenerator)",
			"AppKit.NSLayoutManager::set_Typesetter(AppKit.NSTypesetter)",
			"AppKit.NSLayoutManager::SetBoundsRect(CoreGraphics.CGRect,AppKit.NSTextBlock,Foundation.NSRange)",
			"AppKit.NSLayoutManager::SetExtraLineFragment(CoreGraphics.CGRect,CoreGraphics.CGRect,AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager::SetGlyphs(System.IntPtr,System.IntPtr,System.IntPtr,AppKit.NSFont,Foundation.NSRange)",
			"AppKit.NSLayoutManager::SetLayoutRect(CoreGraphics.CGRect,AppKit.NSTextBlock,Foundation.NSRange)",
			"AppKit.NSLayoutManager::SetTemporaryAttributes(Foundation.NSDictionary,Foundation.NSRange)",
			"AppKit.NSLayoutManager::SetTextContainer(AppKit.NSTextContainer,Foundation.NSRange)",
			"AppKit.NSLayoutManager::ShowAttachmentCell(AppKit.NSCell,CoreGraphics.CGRect,System.UIntPtr)",
			"AppKit.NSLayoutManager::ShowGlyphs(System.IntPtr,System.IntPtr,System.IntPtr,AppKit.NSFont,CoreGraphics.CGAffineTransform,Foundation.NSDictionary,CoreGraphics.CGContext)",
			"AppKit.NSLayoutManager::ShowGlyphs(System.IntPtr,System.IntPtr,System.UIntPtr,AppKit.NSFont,CoreGraphics.CGAffineTransform,Foundation.NSDictionary,CoreGraphics.CGContext)",
			"AppKit.NSLayoutManager::TextContainerChangedGeometry(AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager::TextContainerChangedTextView(AppKit.NSTextContainer)",
			"AppKit.NSLayoutManager_NSTextViewSupport::GetFirstTextView(AppKit.NSLayoutManager)",
			"AppKit.NSLayoutManager_NSTextViewSupport::GetRulerAccessoryView(AppKit.NSLayoutManager,AppKit.NSTextView,AppKit.NSParagraphStyle,AppKit.NSRulerView,System.Boolean)",
			"AppKit.NSLayoutManager_NSTextViewSupport::GetRulerMarkers(AppKit.NSLayoutManager,AppKit.NSTextView,AppKit.NSParagraphStyle,AppKit.NSRulerView)",
			"AppKit.NSLayoutManager_NSTextViewSupport::GetTextViewForBeginningOfSelection(AppKit.NSLayoutManager)",
			"AppKit.NSLayoutManager_NSTextViewSupport::LayoutManagerOwnsFirstResponder(AppKit.NSLayoutManager,AppKit.NSWindow)",
			"AppKit.NSLayoutManagerDelegate_Extensions::DidChangeGeometry(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager,AppKit.NSTextContainer,CoreGraphics.CGSize)",
			"AppKit.NSLayoutManagerDelegate_Extensions::DidCompleteLayout(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager,AppKit.NSTextContainer,System.Boolean)",
			"AppKit.NSLayoutManagerDelegate_Extensions::DidInvalidatedLayout(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager)",
			"AppKit.NSLayoutManagerDelegate_Extensions::GetBoundingBox(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager,System.UIntPtr,AppKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint,System.UIntPtr)",
			"AppKit.NSLayoutManagerDelegate_Extensions::GetLineSpacingAfterGlyph(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager,System.UIntPtr,CoreGraphics.CGRect)",
			"AppKit.NSLayoutManagerDelegate_Extensions::GetParagraphSpacingAfterGlyph(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager,System.UIntPtr,CoreGraphics.CGRect)",
			"AppKit.NSLayoutManagerDelegate_Extensions::GetParagraphSpacingBeforeGlyph(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager,System.UIntPtr,CoreGraphics.CGRect)",
			"AppKit.NSLayoutManagerDelegate_Extensions::ShouldBreakLineByHyphenatingBeforeCharacter(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager,System.UIntPtr)",
			"AppKit.NSLayoutManagerDelegate_Extensions::ShouldBreakLineByWordBeforeCharacter(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager,System.UIntPtr)",
			"AppKit.NSLayoutManagerDelegate_Extensions::ShouldGenerateGlyphs(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager,System.IntPtr,System.IntPtr,System.IntPtr,AppKit.NSFont,Foundation.NSRange)",
			"AppKit.NSLayoutManagerDelegate_Extensions::ShouldSetLineFragmentRect(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager,CoreGraphics.CGRect&,CoreGraphics.CGRect&,System.Runtime.InteropServices.NFloat&,AppKit.NSTextContainer,Foundation.NSRange)",
			"AppKit.NSLayoutManagerDelegate_Extensions::ShouldUseAction(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager,AppKit.NSControlCharacterAction,System.UIntPtr)",
			"AppKit.NSLayoutManagerDelegate_Extensions::ShouldUseTemporaryAttributes(AppKit.INSLayoutManagerDelegate,AppKit.NSLayoutManager,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.Boolean,System.UIntPtr,Foundation.NSRange&)",
			"AppKit.NSLayoutXAxisAnchor::.ctor(Foundation.NSCoder)",
			"AppKit.NSLayoutXAxisAnchor::ConstraintEqualToSystemSpacingAfterAnchor(AppKit.NSLayoutXAxisAnchor,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutXAxisAnchor::ConstraintGreaterThanOrEqualToSystemSpacingAfterAnchor(AppKit.NSLayoutXAxisAnchor,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutXAxisAnchor::ConstraintLessThanOrEqualToSystemSpacingAfterAnchor(AppKit.NSLayoutXAxisAnchor,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutXAxisAnchor::CreateAnchorWithOffset(AppKit.NSLayoutXAxisAnchor)",
			"AppKit.NSLayoutYAxisAnchor::.ctor(Foundation.NSCoder)",
			"AppKit.NSLayoutYAxisAnchor::ConstraintEqualToSystemSpacingBelowAnchor(AppKit.NSLayoutYAxisAnchor,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutYAxisAnchor::ConstraintGreaterThanOrEqualToSystemSpacingBelowAnchor(AppKit.NSLayoutYAxisAnchor,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutYAxisAnchor::ConstraintLessThanOrEqualToSystemSpacingBelowAnchor(AppKit.NSLayoutYAxisAnchor,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSLayoutYAxisAnchor::CreateAnchorWithOffset(AppKit.NSLayoutYAxisAnchor)",
			"AppKit.NSLevelIndicator::.ctor(Foundation.NSCoder)",
			"AppKit.NSLevelIndicator::set_CriticalFillColor(AppKit.NSColor)",
			"AppKit.NSLevelIndicator::set_FillColor(AppKit.NSColor)",
			"AppKit.NSLevelIndicator::set_RatingImage(AppKit.NSImage)",
			"AppKit.NSLevelIndicator::set_RatingPlaceholderImage(AppKit.NSImage)",
			"AppKit.NSLevelIndicator::set_WarningFillColor(AppKit.NSColor)",
			"AppKit.NSLevelIndicatorCell::.ctor(AppKit.NSImage)",
			"AppKit.NSLevelIndicatorCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSLevelIndicatorCell::SetImage(AppKit.NSImage)",
			"AppKit.NSMagnificationGestureRecognizer::.ctor(Foundation.NSCoder)",
			"AppKit.NSMagnificationGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSMatrix::.ctor(CoreGraphics.CGRect,AppKit.NSMatrixMode,AppKit.NSCell,System.IntPtr,System.IntPtr)",
			"AppKit.NSMatrix::.ctor(Foundation.NSCoder)",
			"AppKit.NSMatrix::AcceptsFirstMouse(AppKit.NSEvent)",
			"AppKit.NSMatrix::Changed(Foundation.NSNotification)",
			"AppKit.NSMatrix::DidBeginEditing(Foundation.NSNotification)",
			"AppKit.NSMatrix::DidEndEditing(Foundation.NSNotification)",
			"AppKit.NSMatrix::GetRowColumn(System.IntPtr&,System.IntPtr&,AppKit.NSCell)",
			"AppKit.NSMatrix::GetStringForToolTip(AppKit.NSView,System.IntPtr,CoreGraphics.CGPoint,System.IntPtr)",
			"AppKit.NSMatrix::MouseDown(AppKit.NSEvent)",
			"AppKit.NSMatrix::PerformKeyEquivalent(AppKit.NSEvent)",
			"AppKit.NSMatrix::PutCell(AppKit.NSCell,System.IntPtr,System.IntPtr)",
			"AppKit.NSMatrix::SelectAll(Foundation.NSObject)",
			"AppKit.NSMatrix::SelectText(Foundation.NSObject)",
			"AppKit.NSMatrix::SendAction(ObjCRuntime.Selector,Foundation.NSObject,System.Boolean)",
			"AppKit.NSMatrix::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSMatrix::set_CellBackgroundColor(AppKit.NSColor)",
			"AppKit.NSMatrix::set_DoubleAction(ObjCRuntime.Selector)",
			"AppKit.NSMatrix::set_KeyCell(Foundation.NSObject)",
			"AppKit.NSMatrix::set_Prototype(AppKit.NSCell)",
			"AppKit.NSMatrix::SetToolTipForCell(System.String,AppKit.NSCell)",
			"AppKit.NSMatrix::ShouldBeginEditing(AppKit.NSText)",
			"AppKit.NSMatrix::ShouldEndEditing(AppKit.NSText)",
			"AppKit.NSMatrix::ToolTipForCell(AppKit.NSCell)",
			"AppKit.NSMatrix::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"AppKit.NSMenu::.ctor(Foundation.NSCoder)",
			"AppKit.NSMenu::AccessibilityAddChildElement(AppKit.NSAccessibilityElement)",
			"AppKit.NSMenu::AddItem(AppKit.NSMenuItem)",
			"AppKit.NSMenu::AddItem(System.String,ObjCRuntime.Selector,System.String)",
			"AppKit.NSMenu::Copy(Foundation.NSZone)",
			"AppKit.NSMenu::CreateElement(Foundation.NSString,CoreGraphics.CGRect,Foundation.NSString,Foundation.NSObject)",
			"AppKit.NSMenu::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSMenu::HelpRequested(AppKit.NSEvent)",
			"AppKit.NSMenu::IndexOf(AppKit.NSMenuItem)",
			"AppKit.NSMenu::IndexOfItem(AppKit.NSMenu)",
			"AppKit.NSMenu::IndexOfItem(Foundation.NSObject)",
			"AppKit.NSMenu::IndexOfItem(Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSMenu::InsertItem(AppKit.NSMenuItem,System.IntPtr)",
			"AppKit.NSMenu::InsertItem(System.String,ObjCRuntime.Selector,System.String,System.IntPtr)",
			"AppKit.NSMenu::ItemChanged(AppKit.NSMenuItem)",
			"AppKit.NSMenu::PerformKeyEquivalent(AppKit.NSEvent)",
			"AppKit.NSMenu::PopUpContextMenu(AppKit.NSMenu,AppKit.NSEvent,AppKit.NSView)",
			"AppKit.NSMenu::PopUpContextMenu(AppKit.NSMenu,AppKit.NSEvent,AppKit.NSView,AppKit.NSFont)",
			"AppKit.NSMenu::PopUpMenu(AppKit.NSMenuItem,CoreGraphics.CGPoint,AppKit.NSView)",
			"AppKit.NSMenu::RemoveItem(AppKit.NSMenuItem)",
			"AppKit.NSMenu::set_AccessibilityApplicationFocusedUIElement(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityCancelButton(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityClearButton(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityCloseButton(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityCriticalValue(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityDecrementButton(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityDefaultButton(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityDisclosedRows(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityFocusedWindow(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityFullScreenButton(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityGrowArea(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityHeader(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityHorizontalScrollBar(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityIncrementButton(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityMainWindow(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityMarkerGroupUIElement(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityMarkerValues(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityMaxValue(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityMinimizeButton(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityMinValue(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityOverflowButton(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityProxy(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilitySearchButton(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilitySearchMenu(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityShownMenu(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityToolbarButton(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityUrl(Foundation.NSUrl)",
			"AppKit.NSMenu::set_AccessibilityValue(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityVerticalScrollBar(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityWarningValue(Foundation.NSObject)",
			"AppKit.NSMenu::set_AccessibilityZoomButton(Foundation.NSObject)",
			"AppKit.NSMenu::set_Appearance(AppKit.NSAppearance)",
			"AppKit.NSMenu::set_Font(AppKit.NSFont)",
			"AppKit.NSMenu::SetSubmenu(AppKit.NSMenu,AppKit.NSMenuItem)",
			"AppKit.NSMenuDelegate_Extensions::ConfinementRectForMenu(AppKit.INSMenuDelegate,AppKit.NSMenu,AppKit.NSScreen)",
			"AppKit.NSMenuDelegate_Extensions::HasKeyEquivalentForEvent(AppKit.INSMenuDelegate,AppKit.NSMenu,AppKit.NSEvent,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSMenuDelegate_Extensions::MenuDidClose(AppKit.INSMenuDelegate,AppKit.NSMenu)",
			"AppKit.NSMenuDelegate_Extensions::MenuItemCount(AppKit.INSMenuDelegate,AppKit.NSMenu)",
			"AppKit.NSMenuDelegate_Extensions::MenuWillHighlightItem(AppKit.INSMenuDelegate,AppKit.NSMenu,AppKit.NSMenuItem)",
			"AppKit.NSMenuDelegate_Extensions::MenuWillOpen(AppKit.INSMenuDelegate,AppKit.NSMenu)",
			"AppKit.NSMenuDelegate_Extensions::NeedsUpdate(AppKit.INSMenuDelegate,AppKit.NSMenu)",
			"AppKit.NSMenuDelegate_Extensions::UpdateItem(AppKit.INSMenuDelegate,AppKit.NSMenu,AppKit.NSMenuItem,System.IntPtr,System.Boolean)",
			"AppKit.NSMenuItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSMenuItem::.ctor(System.String,ObjCRuntime.Selector,System.String)",
			"AppKit.NSMenuItem::AccessibilityAddChildElement(AppKit.NSAccessibilityElement)",
			"AppKit.NSMenuItem::Copy(Foundation.NSZone)",
			"AppKit.NSMenuItem::CreateElement(Foundation.NSString,CoreGraphics.CGRect,Foundation.NSString,Foundation.NSObject)",
			"AppKit.NSMenuItem::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSMenuItem::set_AccessibilityApplicationFocusedUIElement(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityCancelButton(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityClearButton(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityCloseButton(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityCriticalValue(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityDecrementButton(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityDefaultButton(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityDisclosedRows(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityFocusedWindow(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityFullScreenButton(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityGrowArea(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityHeader(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityHorizontalScrollBar(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityIncrementButton(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityMainWindow(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityMarkerGroupUIElement(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityMarkerValues(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityMaxValue(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityMinimizeButton(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityMinValue(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityOverflowButton(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityProxy(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilitySearchButton(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilitySearchMenu(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityShownMenu(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityToolbarButton(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityUrl(Foundation.NSUrl)",
			"AppKit.NSMenuItem::set_AccessibilityValue(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityVerticalScrollBar(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityWarningValue(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_AccessibilityZoomButton(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSMenuItem::set_AttributedTitle(Foundation.NSAttributedString)",
			"AppKit.NSMenuItem::set_Image(AppKit.NSImage)",
			"AppKit.NSMenuItem::set_Menu(AppKit.NSMenu)",
			"AppKit.NSMenuItem::set_MixedStateImage(AppKit.NSImage)",
			"AppKit.NSMenuItem::set_OffStateImage(AppKit.NSImage)",
			"AppKit.NSMenuItem::set_OnStateImage(AppKit.NSImage)",
			"AppKit.NSMenuItem::set_RepresentedObject(Foundation.NSObject)",
			"AppKit.NSMenuItem::set_Submenu(AppKit.NSMenu)",
			"AppKit.NSMenuItem::set_View(AppKit.NSView)",
			"AppKit.NSMenuItemCell::.ctor(AppKit.NSImage)",
			"AppKit.NSMenuItemCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSMenuItemCell::DrawBorderAndBackground(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSMenuItemCell::DrawImage(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSMenuItemCell::DrawKeyEquivalent(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSMenuItemCell::DrawSeparatorItem(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSMenuItemCell::DrawStateImage(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSMenuItemCell::DrawTitle(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSMenuItemCell::set_MenuItem(AppKit.NSMenuItem)",
			"AppKit.NSMenuItemValidationWrapper::ValidateMenuItem(AppKit.NSMenuItem)",
			"AppKit.NSMenuToolbarItem::set_ItemMenu(UIKit.UIMenu)",
			"AppKit.NSMenuToolbarItem::set_Menu(AppKit.NSMenu)",
			"AppKit.NSMenuValidationWrapper::ValidateMenuItem(AppKit.NSMenuItem)",
			"AppKit.NSMutableAttributedStringAppKitAddons::ApplyFontTraits(Foundation.NSMutableAttributedString,AppKit.NSFontTraitMask,Foundation.NSRange)",
			"AppKit.NSMutableAttributedStringAppKitAddons::FixAttachmentAttributeInRange(Foundation.NSMutableAttributedString,Foundation.NSRange)",
			"AppKit.NSMutableAttributedStringAppKitAddons::FixFontAttributeInRange(Foundation.NSMutableAttributedString,Foundation.NSRange)",
			"AppKit.NSMutableAttributedStringAppKitAddons::FixParagraphStyleAttributeInRange(Foundation.NSMutableAttributedString,Foundation.NSRange)",
			"AppKit.NSMutableAttributedStringAppKitAddons::ReadFromData(Foundation.NSMutableAttributedString,Foundation.NSData,Foundation.NSDictionary,Foundation.NSDictionary&)",
			"AppKit.NSMutableAttributedStringAppKitAddons::ReadFromData(Foundation.NSMutableAttributedString,Foundation.NSData,Foundation.NSDictionary,Foundation.NSDictionary&,Foundation.NSError&)",
			"AppKit.NSMutableAttributedStringAppKitAddons::ReadFromURL(Foundation.NSMutableAttributedString,Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSDictionary&)",
			"AppKit.NSMutableAttributedStringAppKitAddons::ReadFromURL(Foundation.NSMutableAttributedString,Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSDictionary&,Foundation.NSError&)",
			"AppKit.NSMutableAttributedStringAppKitAddons::SetAlignment(Foundation.NSMutableAttributedString,AppKit.NSTextAlignment,Foundation.NSRange)",
			"AppKit.NSMutableAttributedStringAppKitAddons::SetBaseWritingDirection(Foundation.NSMutableAttributedString,Foundation.NSWritingDirection,Foundation.NSRange)",
			"AppKit.NSMutableAttributedStringAppKitAddons::SubscriptRange(Foundation.NSMutableAttributedString,Foundation.NSRange)",
			"AppKit.NSMutableAttributedStringAppKitAddons::SuperscriptRange(Foundation.NSMutableAttributedString,Foundation.NSRange)",
			"AppKit.NSMutableAttributedStringAppKitAddons::UnscriptRange(Foundation.NSMutableAttributedString,Foundation.NSRange)",
			"AppKit.NSMutableAttributedStringAppKitAddons::UpdateAttachmentsFromPath(Foundation.NSMutableAttributedString,System.String)",
			"AppKit.NSMutableFontCollection::.ctor(Foundation.NSCoder)",
			"AppKit.NSMutableFontCollection::FromLocale(Foundation.NSLocale)",
			"AppKit.NSMutableParagraphStyle::.ctor(Foundation.NSCoder)",
			"AppKit.NSMutableParagraphStyle::AddTabStop(AppKit.NSTextTab)",
			"AppKit.NSMutableParagraphStyle::RemoveTabStop(AppKit.NSTextTab)",
			"AppKit.NSMutableParagraphStyle::SetParagraphStyle(AppKit.NSParagraphStyle)",
			"AppKit.NSNib::.ctor(Foundation.NSCoder)",
			"AppKit.NSNib::.ctor(Foundation.NSData,Foundation.NSBundle)",
			"AppKit.NSNib::.ctor(Foundation.NSUrl)",
			"AppKit.NSNib::.ctor(System.String,Foundation.NSBundle)",
			"AppKit.NSNib::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSNib::InstantiateNib(Foundation.NSDictionary)",
			"AppKit.NSNib::InstantiateNibWithOwner(Foundation.NSObject,Foundation.NSArray&)",
			"AppKit.NSObject_NSEditorRegistration::ObjectDidBeginEditing(Foundation.NSObject,AppKit.INSEditor)",
			"AppKit.NSObject_NSEditorRegistration::ObjectDidEndEditing(Foundation.NSObject,AppKit.INSEditor)",
			"AppKit.NSObject_NSFontPanelValidationAdditions::GetValidModes(Foundation.NSObject,AppKit.NSFontPanel)",
			"AppKit.NSObject_NSToolbarItemValidation::ValidateToolbarItem(Foundation.NSObject,AppKit.NSToolbarItem)",
			"AppKit.NSObjectController::.ctor(Foundation.NSCoder)",
			"AppKit.NSObjectController::.ctor(Foundation.NSObject)",
			"AppKit.NSObjectController::Add(Foundation.NSObject)",
			"AppKit.NSObjectController::AddObject(Foundation.NSObject)",
			"AppKit.NSObjectController::Fetch(Foundation.NSObject)",
			"AppKit.NSObjectController::Remove(Foundation.NSObject)",
			"AppKit.NSObjectController::RemoveObject(Foundation.NSObject)",
			"AppKit.NSObjectController::set_Content(Foundation.NSObject)",
			"AppKit.NSObjectController::set_FetchPredicate(Foundation.NSPredicate)",
			"AppKit.NSObjectController::ValidateUserInterfaceItem(Foundation.NSObject)",
			"AppKit.NSOpenGLContext::.ctor(AppKit.NSOpenGLPixelFormat,AppKit.NSOpenGLContext)",
			"AppKit.NSOpenGLContext::CopyAttributes(AppKit.NSOpenGLContext,System.UInt32)",
			"AppKit.NSOpenGLContext::CreateTexture(System.Int32,AppKit.NSView,System.Int32)",
			"AppKit.NSOpenGLContext::set_View(AppKit.NSView)",
			"AppKit.NSOpenGLContext::SetPixelBuffer(AppKit.NSOpenGLPixelBuffer,AppKit.NSGLTextureCubeMap,System.Int32,System.Int32)",
			"AppKit.NSOpenGLContext::SetTextureImage(AppKit.NSOpenGLPixelBuffer,AppKit.NSGLColorBuffer)",
			"AppKit.NSOpenGLLayer::.ctor(Foundation.NSCoder)",
			"AppKit.NSOpenGLLayer::CanDraw(AppKit.NSOpenGLContext,AppKit.NSOpenGLPixelFormat,System.Double,CoreVideo.CVTimeStamp&)",
			"AppKit.NSOpenGLLayer::Draw(AppKit.NSOpenGLContext,AppKit.NSOpenGLPixelFormat,System.Double,CoreVideo.CVTimeStamp&)",
			"AppKit.NSOpenGLLayer::GetOpenGLContext(AppKit.NSOpenGLPixelFormat)",
			"AppKit.NSOpenGLLayer::set_OpenGLContext(AppKit.NSOpenGLContext)",
			"AppKit.NSOpenGLLayer::set_OpenGLPixelFormat(AppKit.NSOpenGLPixelFormat)",
			"AppKit.NSOpenGLPixelFormat::.ctor(Foundation.NSCoder)",
			"AppKit.NSOpenGLPixelFormat::.ctor(Foundation.NSData)",
			"AppKit.NSOpenGLPixelFormat::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSOpenGLView::.ctor(CoreGraphics.CGRect,AppKit.NSOpenGLPixelFormat)",
			"AppKit.NSOpenGLView::.ctor(Foundation.NSCoder)",
			"AppKit.NSOpenGLView::set_OpenGLContext(AppKit.NSOpenGLContext)",
			"AppKit.NSOpenGLView::set_PixelFormat(AppKit.NSOpenGLPixelFormat)",
			"AppKit.NSOpenPanel::.ctor(Foundation.NSCoder)",
			"AppKit.NSOpenPanel::Begin(System.String,System.String,System.String[],Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSOpenPanel::BeginSheet(System.String,System.String,System.String[],AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSOpenSavePanelDelegate_Extensions::CompareFilenames(AppKit.INSOpenSavePanelDelegate,AppKit.NSSavePanel,System.String,System.String,System.Boolean)",
			"AppKit.NSOpenSavePanelDelegate_Extensions::DidChangeToDirectory(AppKit.INSOpenSavePanelDelegate,AppKit.NSSavePanel,Foundation.NSUrl)",
			"AppKit.NSOpenSavePanelDelegate_Extensions::DirectoryDidChange(AppKit.INSOpenSavePanelDelegate,AppKit.NSSavePanel,System.String)",
			"AppKit.NSOpenSavePanelDelegate_Extensions::IsValidFilename(AppKit.INSOpenSavePanelDelegate,AppKit.NSSavePanel,System.String)",
			"AppKit.NSOpenSavePanelDelegate_Extensions::SelectionDidChange(AppKit.INSOpenSavePanelDelegate,AppKit.NSSavePanel)",
			"AppKit.NSOpenSavePanelDelegate_Extensions::ShouldEnableUrl(AppKit.INSOpenSavePanelDelegate,AppKit.NSSavePanel,Foundation.NSUrl)",
			"AppKit.NSOpenSavePanelDelegate_Extensions::ShouldShowFilename(AppKit.INSOpenSavePanelDelegate,AppKit.NSSavePanel,System.String)",
			"AppKit.NSOpenSavePanelDelegate_Extensions::UserEnteredFilename(AppKit.INSOpenSavePanelDelegate,AppKit.NSSavePanel,System.String,System.Boolean)",
			"AppKit.NSOpenSavePanelDelegate_Extensions::ValidateUrl(AppKit.INSOpenSavePanelDelegate,AppKit.NSSavePanel,Foundation.NSUrl,Foundation.NSError&)",
			"AppKit.NSOpenSavePanelDelegate_Extensions::WillExpand(AppKit.INSOpenSavePanelDelegate,AppKit.NSSavePanel,System.Boolean)",
			"AppKit.NSOutlineView::.ctor(Foundation.NSCoder)",
			"AppKit.NSOutlineView::CollapseItem(Foundation.NSObject)",
			"AppKit.NSOutlineView::CollapseItem(Foundation.NSObject,System.Boolean)",
			"AppKit.NSOutlineView::ExpandItem(Foundation.NSObject)",
			"AppKit.NSOutlineView::ExpandItem(Foundation.NSObject,System.Boolean)",
			"AppKit.NSOutlineView::GetChild(System.IntPtr,Foundation.NSObject)",
			"AppKit.NSOutlineView::GetChildIndex(Foundation.NSObject)",
			"AppKit.NSOutlineView::GetParent(Foundation.NSObject)",
			"AppKit.NSOutlineView::InsertItems(Foundation.NSIndexSet,Foundation.NSObject,AppKit.NSTableViewAnimation)",
			"AppKit.NSOutlineView::InsertRows(Foundation.NSIndexSet,AppKit.NSTableViewAnimation)",
			"AppKit.NSOutlineView::IsExpandable(Foundation.NSObject)",
			"AppKit.NSOutlineView::IsItemExpanded(Foundation.NSObject)",
			"AppKit.NSOutlineView::LevelForItem(Foundation.NSObject)",
			"AppKit.NSOutlineView::MoveItem(System.IntPtr,Foundation.NSObject,System.IntPtr,Foundation.NSObject)",
			"AppKit.NSOutlineView::NumberOfChildren(Foundation.NSObject)",
			"AppKit.NSOutlineView::ReloadItem(Foundation.NSObject)",
			"AppKit.NSOutlineView::ReloadItem(Foundation.NSObject,System.Boolean)",
			"AppKit.NSOutlineView::RemoveItems(Foundation.NSIndexSet,Foundation.NSObject,AppKit.NSTableViewAnimation)",
			"AppKit.NSOutlineView::RemoveRows(Foundation.NSIndexSet,AppKit.NSTableViewAnimation)",
			"AppKit.NSOutlineView::RowForItem(Foundation.NSObject)",
			"AppKit.NSOutlineView::set_OutlineTableColumn(AppKit.NSTableColumn)",
			"AppKit.NSOutlineView::SetDropItem(Foundation.NSObject,System.IntPtr)",
			"AppKit.NSOutlineViewDataSource_Extensions::AcceptDrop(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,AppKit.INSDraggingInfo,Foundation.NSObject,System.IntPtr)",
			"AppKit.NSOutlineViewDataSource_Extensions::DraggingSessionEnded(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,AppKit.NSDragOperation)",
			"AppKit.NSOutlineViewDataSource_Extensions::DraggingSessionWillBegin(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,Foundation.NSArray)",
			"AppKit.NSOutlineViewDataSource_Extensions::FilesDropped(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,Foundation.NSUrl,Foundation.NSArray)",
			"AppKit.NSOutlineViewDataSource_Extensions::GetChild(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,System.IntPtr,Foundation.NSObject)",
			"AppKit.NSOutlineViewDataSource_Extensions::GetChildrenCount(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDataSource_Extensions::GetObjectValue(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,AppKit.NSTableColumn,Foundation.NSObject)",
			"AppKit.NSOutlineViewDataSource_Extensions::ItemExpandable(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDataSource_Extensions::ItemForPersistentObject(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDataSource_Extensions::OutlineViewwriteItemstoPasteboard(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,Foundation.NSArray,AppKit.NSPasteboard)",
			"AppKit.NSOutlineViewDataSource_Extensions::PasteboardWriterForItem(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDataSource_Extensions::PersistentObjectForItem(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDataSource_Extensions::SetObjectValue(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,Foundation.NSObject,AppKit.NSTableColumn,Foundation.NSObject)",
			"AppKit.NSOutlineViewDataSource_Extensions::SortDescriptorsChanged(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,Foundation.NSSortDescriptor[])",
			"AppKit.NSOutlineViewDataSource_Extensions::UpdateDraggingItemsForDrag(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,AppKit.INSDraggingInfo)",
			"AppKit.NSOutlineViewDataSource_Extensions::ValidateDrop(AppKit.INSOutlineViewDataSource,AppKit.NSOutlineView,AppKit.INSDraggingInfo,Foundation.NSObject,System.IntPtr)",
			"AppKit.NSOutlineViewDelegate_Extensions::ColumnDidMove(AppKit.INSOutlineViewDelegate,Foundation.NSNotification)",
			"AppKit.NSOutlineViewDelegate_Extensions::ColumnDidResize(AppKit.INSOutlineViewDelegate,Foundation.NSNotification)",
			"AppKit.NSOutlineViewDelegate_Extensions::DidAddRowView(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSTableRowView,System.IntPtr)",
			"AppKit.NSOutlineViewDelegate_Extensions::DidClickTableColumn(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSTableColumn)",
			"AppKit.NSOutlineViewDelegate_Extensions::DidDragTableColumn(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSTableColumn)",
			"AppKit.NSOutlineViewDelegate_Extensions::DidRemoveRowView(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSTableRowView,System.IntPtr)",
			"AppKit.NSOutlineViewDelegate_Extensions::GetCell(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSTableColumn,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::GetNextTypeSelectMatch(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,Foundation.NSObject,Foundation.NSObject,System.String)",
			"AppKit.NSOutlineViewDelegate_Extensions::GetRowHeight(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::GetSelectionIndexes(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,Foundation.NSIndexSet)",
			"AppKit.NSOutlineViewDelegate_Extensions::GetSelectString(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSTableColumn,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::GetSizeToFitColumnWidth(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,System.IntPtr)",
			"AppKit.NSOutlineViewDelegate_Extensions::GetTintConfiguration(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::GetView(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSTableColumn,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::IsGroupItem(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::ItemDidCollapse(AppKit.INSOutlineViewDelegate,Foundation.NSNotification)",
			"AppKit.NSOutlineViewDelegate_Extensions::ItemDidExpand(AppKit.INSOutlineViewDelegate,Foundation.NSNotification)",
			"AppKit.NSOutlineViewDelegate_Extensions::ItemWillCollapse(AppKit.INSOutlineViewDelegate,Foundation.NSNotification)",
			"AppKit.NSOutlineViewDelegate_Extensions::ItemWillExpand(AppKit.INSOutlineViewDelegate,Foundation.NSNotification)",
			"AppKit.NSOutlineViewDelegate_Extensions::MouseDown(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSTableColumn)",
			"AppKit.NSOutlineViewDelegate_Extensions::RowViewForItem(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::SelectionDidChange(AppKit.INSOutlineViewDelegate,Foundation.NSNotification)",
			"AppKit.NSOutlineViewDelegate_Extensions::SelectionIsChanging(AppKit.INSOutlineViewDelegate,Foundation.NSNotification)",
			"AppKit.NSOutlineViewDelegate_Extensions::SelectionShouldChange(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView)",
			"AppKit.NSOutlineViewDelegate_Extensions::ShouldCollapseItem(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::ShouldEditTableColumn(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSTableColumn,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::ShouldExpandItem(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::ShouldReorder(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,System.IntPtr,System.IntPtr)",
			"AppKit.NSOutlineViewDelegate_Extensions::ShouldSelectItem(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::ShouldSelectTableColumn(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSTableColumn)",
			"AppKit.NSOutlineViewDelegate_Extensions::ShouldShowCellExpansion(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSTableColumn,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::ShouldShowOutlineCell(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::ShouldTrackCell(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSCell,AppKit.NSTableColumn,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::ShouldTypeSelect(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSEvent,System.String)",
			"AppKit.NSOutlineViewDelegate_Extensions::ToolTipForCell(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,AppKit.NSCell,CoreGraphics.CGRect&,AppKit.NSTableColumn,Foundation.NSObject,CoreGraphics.CGPoint)",
			"AppKit.NSOutlineViewDelegate_Extensions::WillDisplayCell(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,Foundation.NSObject,AppKit.NSTableColumn,Foundation.NSObject)",
			"AppKit.NSOutlineViewDelegate_Extensions::WillDisplayOutlineCell(AppKit.INSOutlineViewDelegate,AppKit.NSOutlineView,Foundation.NSObject,AppKit.NSTableColumn,Foundation.NSObject)",
			"AppKit.NSPageController::.ctor(Foundation.NSCoder)",
			"AppKit.NSPageController::.ctor(System.String,Foundation.NSBundle)",
			"AppKit.NSPageController::AnimationFor(Foundation.NSString)",
			"AppKit.NSPageController::DefaultAnimationFor(Foundation.NSString)",
			"AppKit.NSPageController::NavigateBack(Foundation.NSObject)",
			"AppKit.NSPageController::NavigateForward(Foundation.NSObject)",
			"AppKit.NSPageController::NavigateForwardTo(Foundation.NSObject)",
			"AppKit.NSPageController::NavigateTo(Foundation.NSObject)",
			"AppKit.NSPageController::set_Animations(Foundation.NSDictionary)",
			"AppKit.NSPageControllerDelegate_Extensions::DidEndLiveTransition(AppKit.INSPageControllerDelegate,AppKit.NSPageController)",
			"AppKit.NSPageControllerDelegate_Extensions::DidTransition(AppKit.INSPageControllerDelegate,AppKit.NSPageController,Foundation.NSObject)",
			"AppKit.NSPageControllerDelegate_Extensions::GetFrame(AppKit.INSPageControllerDelegate,AppKit.NSPageController,Foundation.NSObject)",
			"AppKit.NSPageControllerDelegate_Extensions::GetIdentifier(AppKit.INSPageControllerDelegate,AppKit.NSPageController,Foundation.NSObject)",
			"AppKit.NSPageControllerDelegate_Extensions::GetViewController(AppKit.INSPageControllerDelegate,AppKit.NSPageController,System.String)",
			"AppKit.NSPageControllerDelegate_Extensions::PrepareViewController(AppKit.INSPageControllerDelegate,AppKit.NSPageController,AppKit.NSViewController,Foundation.NSObject)",
			"AppKit.NSPageControllerDelegate_Extensions::WillStartLiveTransition(AppKit.INSPageControllerDelegate,AppKit.NSPageController)",
			"AppKit.NSPageLayout::AddAccessoryController(AppKit.NSViewController)",
			"AppKit.NSPageLayout::BeginSheet(AppKit.NSPrintInfo,AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSPageLayout::RemoveAccessoryController(AppKit.NSViewController)",
			"AppKit.NSPageLayout::RunModalWithPrintInfo(AppKit.NSPrintInfo)",
			"AppKit.NSPanel::.ctor(Foundation.NSCoder)",
			"AppKit.NSPanGestureRecognizer::.ctor(Foundation.NSCoder)",
			"AppKit.NSPanGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSPanGestureRecognizer::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSPanGestureRecognizer::SetTranslation(CoreGraphics.CGPoint,AppKit.NSView)",
			"AppKit.NSPanGestureRecognizer::TranslationInView(AppKit.NSView)",
			"AppKit.NSPanGestureRecognizer::VelocityInView(AppKit.NSView)",
			"AppKit.NSParagraphStyle::.ctor(Foundation.NSCoder)",
			"AppKit.NSParagraphStyle::Copy(Foundation.NSZone)",
			"AppKit.NSParagraphStyle::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSParagraphStyle::MutableCopy(Foundation.NSZone)",
			"AppKit.NSPasteboard::AddTypes(System.String[],Foundation.NSObject)",
			"AppKit.NSPasteboard::CanReadObjectForClasses(ObjCRuntime.Class[],Foundation.NSDictionary)",
			"AppKit.NSPasteboard::DeclareTypes(System.String[],Foundation.NSObject)",
			"AppKit.NSPasteboard::IndexOf(AppKit.NSPasteboardItem)",
			"AppKit.NSPasteboard::ReadObjectsForClasses(ObjCRuntime.Class[],Foundation.NSDictionary)",
			"AppKit.NSPasteboard::SetDataForType(Foundation.NSData,System.String)",
			"AppKit.NSPasteboard::SetPropertyListForType(Foundation.NSObject,System.String)",
			"AppKit.NSPasteboardItem::GetReadableTypesForPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSPasteboardItem::GetReadingOptionsForType(System.String,AppKit.NSPasteboard)",
			"AppKit.NSPasteboardItem::GetWritableTypesForPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSPasteboardItem::GetWritingOptionsForType(System.String,AppKit.NSPasteboard)",
			"AppKit.NSPasteboardItem::SetDataForType(Foundation.NSData,System.String)",
			"AppKit.NSPasteboardItem::SetDataProviderForTypes(AppKit.INSPasteboardItemDataProvider,System.String[])",
			"AppKit.NSPasteboardItem::SetPropertyListForType(Foundation.NSObject,System.String)",
			"AppKit.NSPasteboardItemDataProvider_Extensions::FinishedWithDataProvider(AppKit.INSPasteboardItemDataProvider,AppKit.NSPasteboard)",
			"AppKit.NSPasteboardItemDataProviderWrapper::ProvideDataForType(AppKit.NSPasteboard,AppKit.NSPasteboardItem,System.String)",
			"AppKit.NSPasteboardTypeOwner_Extensions::PasteboardChangedOwner(AppKit.INSPasteboardTypeOwner,AppKit.NSPasteboard)",
			"AppKit.NSPasteboardTypeOwnerWrapper::ProvideData(AppKit.NSPasteboard,System.String)",
			"AppKit.NSPasteboardWriting_Extensions::GetWritingOptionsForType(AppKit.INSPasteboardWriting,System.String,AppKit.NSPasteboard)",
			"AppKit.NSPasteboardWritingWrapper::GetWritableTypesForPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSPathCell::.ctor(AppKit.NSImage)",
			"AppKit.NSPathCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSPathCell::GetPathComponent(CoreGraphics.CGPoint,CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSPathCell::GetRect(AppKit.NSPathComponentCell,CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSPathCell::MouseEntered(AppKit.NSEvent,CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSPathCell::MouseExited(AppKit.NSEvent,CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSPathCell::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSPathCell::set_DoubleAction(ObjCRuntime.Selector)",
			"AppKit.NSPathCell::set_PlaceholderAttributedString(Foundation.NSAttributedString)",
			"AppKit.NSPathCell::set_Url(Foundation.NSUrl)",
			"AppKit.NSPathCell::SetObjectValue(Foundation.NSObject)",
			"AppKit.NSPathCell::ValidateMenuItem(AppKit.NSMenuItem)",
			"AppKit.NSPathCellDelegate_Extensions::WillDisplayOpenPanel(AppKit.INSPathCellDelegate,AppKit.NSPathCell,AppKit.NSOpenPanel)",
			"AppKit.NSPathCellDelegate_Extensions::WillPopupMenu(AppKit.INSPathCellDelegate,AppKit.NSPathCell,AppKit.NSMenu)",
			"AppKit.NSPathComponentCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSPathComponentCell::set_Image(AppKit.NSImage)",
			"AppKit.NSPathComponentCell::set_Url(Foundation.NSUrl)",
			"AppKit.NSPathControl::.ctor(Foundation.NSCoder)",
			"AppKit.NSPathControl::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSPathControl::set_DoubleAction(ObjCRuntime.Selector)",
			"AppKit.NSPathControl::set_Menu(AppKit.NSMenu)",
			"AppKit.NSPathControl::set_PlaceholderAttributedString(Foundation.NSAttributedString)",
			"AppKit.NSPathControl::set_Url(Foundation.NSUrl)",
			"AppKit.NSPathControlDelegate_Extensions::AcceptDrop(AppKit.INSPathControlDelegate,AppKit.NSPathControl,AppKit.INSDraggingInfo)",
			"AppKit.NSPathControlDelegate_Extensions::ShouldDragItem(AppKit.INSPathControlDelegate,AppKit.NSPathControl,AppKit.NSPathControlItem,AppKit.NSPasteboard)",
			"AppKit.NSPathControlDelegate_Extensions::ShouldDragPathComponentCell(AppKit.INSPathControlDelegate,AppKit.NSPathControl,AppKit.NSPathComponentCell,AppKit.NSPasteboard)",
			"AppKit.NSPathControlDelegate_Extensions::ValidateDrop(AppKit.INSPathControlDelegate,AppKit.NSPathControl,AppKit.INSDraggingInfo)",
			"AppKit.NSPathControlDelegate_Extensions::WillDisplayOpenPanel(AppKit.INSPathControlDelegate,AppKit.NSPathControl,AppKit.NSOpenPanel)",
			"AppKit.NSPathControlDelegate_Extensions::WillPopUpMenu(AppKit.INSPathControlDelegate,AppKit.NSPathControl,AppKit.NSMenu)",
			"AppKit.NSPathControlItem::set_AttributedTitle(Foundation.NSAttributedString)",
			"AppKit.NSPathControlItem::set_Image(AppKit.NSImage)",
			"AppKit.NSPdfImageRep::.ctor(Foundation.NSCoder)",
			"AppKit.NSPdfImageRep::.ctor(Foundation.NSData)",
			"AppKit.NSPickerTouchBarItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSPickerTouchBarItem::Create(AppKit.NSTouchBarItemIdentifier,AppKit.NSImage[],AppKit.NSPickerTouchBarItemSelectionMode,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSPickerTouchBarItem::Create(AppKit.NSTouchBarItemIdentifier,System.String[],AppKit.NSPickerTouchBarItemSelectionMode,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSPickerTouchBarItem::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSPickerTouchBarItem::set_CollapsedRepresentationImage(AppKit.NSImage)",
			"AppKit.NSPickerTouchBarItem::set_SelectionColor(AppKit.NSColor)",
			"AppKit.NSPickerTouchBarItem::set_SelectionColor(UIKit.UIColor)",
			"AppKit.NSPickerTouchBarItem::SetImage(AppKit.NSImage,System.IntPtr)",
			"AppKit.NSPopover::.ctor(Foundation.NSCoder)",
			"AppKit.NSPopover::PerformClose(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityApplicationFocusedUIElement(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityCancelButton(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityClearButton(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityCloseButton(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityCriticalValue(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityDecrementButton(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityDefaultButton(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityDisclosedRows(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityFocusedWindow(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityFullScreenButton(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityGrowArea(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityHeader(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityHorizontalScrollBar(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityIncrementButton(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityMainWindow(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityMarkerGroupUIElement(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityMarkerValues(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityMaxValue(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityMinimizeButton(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityMinValue(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityOverflowButton(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityProxy(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilitySearchButton(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilitySearchMenu(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityShownMenu(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityToolbarButton(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityUrl(Foundation.NSUrl)",
			"AppKit.NSPopover::set_AccessibilityValue(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityVerticalScrollBar(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityWarningValue(Foundation.NSObject)",
			"AppKit.NSPopover::set_AccessibilityZoomButton(Foundation.NSObject)",
			"AppKit.NSPopover::set_Appearance(AppKit.NSAppearance)",
			"AppKit.NSPopover::set_ContentViewController(AppKit.NSViewController)",
			"AppKit.NSPopover::Show(CoreGraphics.CGRect,AppKit.NSView,AppKit.NSRectEdge)",
			"AppKit.NSPopoverDelegate_Extensions::DidClose(AppKit.INSPopoverDelegate,Foundation.NSNotification)",
			"AppKit.NSPopoverDelegate_Extensions::DidDetach(AppKit.INSPopoverDelegate,AppKit.NSPopover)",
			"AppKit.NSPopoverDelegate_Extensions::DidShow(AppKit.INSPopoverDelegate,Foundation.NSNotification)",
			"AppKit.NSPopoverDelegate_Extensions::GetDetachableWindowForPopover(AppKit.INSPopoverDelegate,AppKit.NSPopover)",
			"AppKit.NSPopoverDelegate_Extensions::ShouldClose(AppKit.INSPopoverDelegate,AppKit.NSPopover)",
			"AppKit.NSPopoverDelegate_Extensions::WillClose(AppKit.INSPopoverDelegate,Foundation.NSNotification)",
			"AppKit.NSPopoverDelegate_Extensions::WillShow(AppKit.INSPopoverDelegate,Foundation.NSNotification)",
			"AppKit.NSPopoverTouchBarItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSPopoverTouchBarItem::DismissPopover(Foundation.NSObject)",
			"AppKit.NSPopoverTouchBarItem::set_CollapsedRepresentation(AppKit.NSView)",
			"AppKit.NSPopoverTouchBarItem::set_CollapsedRepresentationImage(AppKit.NSImage)",
			"AppKit.NSPopoverTouchBarItem::set_PopoverTouchBar(AppKit.NSTouchBar)",
			"AppKit.NSPopoverTouchBarItem::set_PressAndHoldTouchBar(AppKit.NSTouchBar)",
			"AppKit.NSPopoverTouchBarItem::ShowPopover(Foundation.NSObject)",
			"AppKit.NSPopUpButton::.ctor(Foundation.NSCoder)",
			"AppKit.NSPopUpButton::IndexOfItem(AppKit.NSMenuItem)",
			"AppKit.NSPopUpButton::IndexOfItem(Foundation.NSObject)",
			"AppKit.NSPopUpButton::IndexOfItem(Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSPopUpButton::SelectItem(AppKit.NSMenuItem)",
			"AppKit.NSPopUpButton::set_Menu(AppKit.NSMenu)",
			"AppKit.NSPopUpButtonCell::.ctor(AppKit.NSImage)",
			"AppKit.NSPopUpButtonCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSPopUpButtonCell::AttachPopUp(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSPopUpButtonCell::IndexOf(AppKit.NSMenuItem)",
			"AppKit.NSPopUpButtonCell::IndexOfItemWithRepresentedObject(Foundation.NSObject)",
			"AppKit.NSPopUpButtonCell::IndexOfItemWithTargetandAction(Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSPopUpButtonCell::PerformClick(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSPopUpButtonCell::SelectItem(AppKit.NSMenuItem)",
			"AppKit.NSPopUpButtonCell::set_Menu(AppKit.NSMenu)",
			"AppKit.NSPopUpButtonCell::set_ObjectValue(Foundation.NSObject)",
			"AppKit.NSPopUpButtonCell::ValidateMenuItem(AppKit.NSMenuItem)",
			"AppKit.NSPredicateEditor::.ctor(Foundation.NSCoder)",
			"AppKit.NSPredicateEditorRowTemplate::.ctor(Foundation.NSCoder)",
			"AppKit.NSPredicateEditorRowTemplate::Copy(Foundation.NSZone)",
			"AppKit.NSPredicateEditorRowTemplate::DisplayableSubpredicatesOfPredicate(Foundation.NSPredicate)",
			"AppKit.NSPredicateEditorRowTemplate::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSPredicateEditorRowTemplate::GetTemplates(System.String[],CoreData.NSEntityDescription)",
			"AppKit.NSPredicateEditorRowTemplate::MatchForPredicate(Foundation.NSPredicate)",
			"AppKit.NSPredicateEditorRowTemplate::SetPredicate(Foundation.NSPredicate)",
			"AppKit.NSPressGestureRecognizer::.ctor(Foundation.NSCoder)",
			"AppKit.NSPressGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSPrinter::.ctor(Foundation.NSCoder)",
			"AppKit.NSPrinter::Copy(Foundation.NSZone)",
			"AppKit.NSPrinter::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSPrintInfo::.ctor(Foundation.NSCoder)",
			"AppKit.NSPrintInfo::.ctor(Foundation.NSDictionary)",
			"AppKit.NSPrintInfo::Copy(Foundation.NSZone)",
			"AppKit.NSPrintInfo::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSPrintInfo::set_Printer(AppKit.NSPrinter)",
			"AppKit.NSPrintInfo::set_SharedPrintInfo(AppKit.NSPrintInfo)",
			"AppKit.NSPrintOperation::EpsFromView(AppKit.NSView,CoreGraphics.CGRect,Foundation.NSMutableData)",
			"AppKit.NSPrintOperation::EpsFromView(AppKit.NSView,CoreGraphics.CGRect,Foundation.NSMutableData,AppKit.NSPrintInfo)",
			"AppKit.NSPrintOperation::EpsFromView(AppKit.NSView,CoreGraphics.CGRect,System.String,AppKit.NSPrintInfo)",
			"AppKit.NSPrintOperation::FromView(AppKit.NSView)",
			"AppKit.NSPrintOperation::FromView(AppKit.NSView,AppKit.NSPrintInfo)",
			"AppKit.NSPrintOperation::PdfFromView(AppKit.NSView,CoreGraphics.CGRect,Foundation.NSMutableData)",
			"AppKit.NSPrintOperation::PdfFromView(AppKit.NSView,CoreGraphics.CGRect,Foundation.NSMutableData,AppKit.NSPrintInfo)",
			"AppKit.NSPrintOperation::PdfFromView(AppKit.NSView,CoreGraphics.CGRect,System.String,AppKit.NSPrintInfo)",
			"AppKit.NSPrintOperation::RunOperationModal(AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSPrintOperation::set_CurrentOperation(AppKit.NSPrintOperation)",
			"AppKit.NSPrintOperation::set_PrintInfo(AppKit.NSPrintInfo)",
			"AppKit.NSPrintOperation::set_PrintPanel(AppKit.NSPrintPanel)",
			"AppKit.NSPrintPanel::AddAccessoryController(AppKit.NSViewController)",
			"AppKit.NSPrintPanel::BeginSheet(AppKit.NSPrintInfo,AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSPrintPanel::RemoveAccessoryController(AppKit.NSViewController)",
			"AppKit.NSPrintPanel::RunModalWithPrintInfo(AppKit.NSPrintInfo)",
			"AppKit.NSPrintPanelAccessorizing_Extensions::KeyPathsForValuesAffectingPreview(AppKit.INSPrintPanelAccessorizing)",
			"AppKit.NSProgressIndicator::.ctor(Foundation.NSCoder)",
			"AppKit.NSProgressIndicator::StartAnimation(Foundation.NSObject)",
			"AppKit.NSProgressIndicator::StopAnimation(Foundation.NSObject)",
			"AppKit.NSResponder::.ctor(Foundation.NSCoder)",
			"AppKit.NSResponder::BeginGestureWithEvent(AppKit.NSEvent)",
			"AppKit.NSResponder::ChangeMode(AppKit.NSEvent)",
			"AppKit.NSResponder::CursorUpdate(AppKit.NSEvent)",
			"AppKit.NSResponder::EncodeRestorableState(Foundation.NSCoder)",
			"AppKit.NSResponder::EncodeRestorableState(Foundation.NSCoder,Foundation.NSOperationQueue)",
			"AppKit.NSResponder::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSResponder::EndGestureWithEvent(AppKit.NSEvent)",
			"AppKit.NSResponder::FlagsChanged(AppKit.NSEvent)",
			"AppKit.NSResponder::GetNewWindowForTab(Foundation.NSObject)",
			"AppKit.NSResponder::HelpRequested(AppKit.NSEvent)",
			"AppKit.NSResponder::KeyDown(AppKit.NSEvent)",
			"AppKit.NSResponder::KeyUp(AppKit.NSEvent)",
			"AppKit.NSResponder::MagnifyWithEvent(AppKit.NSEvent)",
			"AppKit.NSResponder::MouseDown(AppKit.NSEvent)",
			"AppKit.NSResponder::MouseDragged(AppKit.NSEvent)",
			"AppKit.NSResponder::MouseEntered(AppKit.NSEvent)",
			"AppKit.NSResponder::MouseExited(AppKit.NSEvent)",
			"AppKit.NSResponder::MouseMoved(AppKit.NSEvent)",
			"AppKit.NSResponder::MouseUp(AppKit.NSEvent)",
			"AppKit.NSResponder::OtherMouseDown(AppKit.NSEvent)",
			"AppKit.NSResponder::OtherMouseDragged(AppKit.NSEvent)",
			"AppKit.NSResponder::OtherMouseUp(AppKit.NSEvent)",
			"AppKit.NSResponder::PerformKeyEquivalent(AppKit.NSEvent)",
			"AppKit.NSResponder::PresentError(Foundation.NSError)",
			"AppKit.NSResponder::PresentError(Foundation.NSError,AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSResponder::PressureChange(AppKit.NSEvent)",
			"AppKit.NSResponder::QuickLook(AppKit.NSEvent)",
			"AppKit.NSResponder::RestoreState(Foundation.NSCoder)",
			"AppKit.NSResponder::RestoreUserActivityState(Foundation.NSUserActivity)",
			"AppKit.NSResponder::RightMouseDown(AppKit.NSEvent)",
			"AppKit.NSResponder::RightMouseDragged(AppKit.NSEvent)",
			"AppKit.NSResponder::RightMouseUp(AppKit.NSEvent)",
			"AppKit.NSResponder::RotateWithEvent(AppKit.NSEvent)",
			"AppKit.NSResponder::ScrollWheel(AppKit.NSEvent)",
			"AppKit.NSResponder::set_Menu(AppKit.NSMenu)",
			"AppKit.NSResponder::set_NextResponder(AppKit.NSResponder)",
			"AppKit.NSResponder::set_UserActivity(Foundation.NSUserActivity)",
			"AppKit.NSResponder::ShouldBeTreatedAsInkEvent(AppKit.NSEvent)",
			"AppKit.NSResponder::ShowContextHelp(Foundation.NSObject)",
			"AppKit.NSResponder::SmartMagnify(AppKit.NSEvent)",
			"AppKit.NSResponder::SupplementalTargetForAction(ObjCRuntime.Selector,Foundation.NSObject)",
			"AppKit.NSResponder::SwipeWithEvent(AppKit.NSEvent)",
			"AppKit.NSResponder::TabletPoint(AppKit.NSEvent)",
			"AppKit.NSResponder::TabletProximity(AppKit.NSEvent)",
			"AppKit.NSResponder::TouchesBeganWithEvent(AppKit.NSEvent)",
			"AppKit.NSResponder::TouchesCancelledWithEvent(AppKit.NSEvent)",
			"AppKit.NSResponder::TouchesEndedWithEvent(AppKit.NSEvent)",
			"AppKit.NSResponder::TouchesMovedWithEvent(AppKit.NSEvent)",
			"AppKit.NSResponder::TryToPerformwith(ObjCRuntime.Selector,Foundation.NSObject)",
			"AppKit.NSResponder::UpdateUserActivityState(Foundation.NSUserActivity)",
			"AppKit.NSResponder::ValidateProposedFirstResponder(AppKit.NSResponder,AppKit.NSEvent)",
			"AppKit.NSResponder::WillPresentError(Foundation.NSError)",
			"AppKit.NSResponder_NSTouchBarProvider::GetTouchBar(AppKit.NSResponder)",
			"AppKit.NSResponder_NSTouchBarProvider::MakeTouchBar(AppKit.NSResponder)",
			"AppKit.NSResponder_NSTouchBarProvider::SetTouchBar(AppKit.NSResponder,AppKit.NSTouchBar)",
			"AppKit.NSRotationGestureRecognizer::.ctor(Foundation.NSCoder)",
			"AppKit.NSRotationGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSRuleEditor::.ctor(Foundation.NSCoder)",
			"AppKit.NSRuleEditor::AddRow(Foundation.NSObject)",
			"AppKit.NSRuleEditor::RemoveRowsAtIndexes(Foundation.NSIndexSet,System.Boolean)",
			"AppKit.NSRuleEditor::Row(Foundation.NSObject)",
			"AppKit.NSRuleEditor::SelectRows(Foundation.NSIndexSet,System.Boolean)",
			"AppKit.NSRuleEditor::set_FormattingDictionary(Foundation.NSDictionary)",
			"AppKit.NSRuleEditor::SetCriteria(Foundation.NSArray,Foundation.NSArray,System.IntPtr)",
			"AppKit.NSRuleEditorDelegate_Extensions::Changed(AppKit.INSRuleEditorDelegate,Foundation.NSNotification)",
			"AppKit.NSRuleEditorDelegate_Extensions::EditingBegan(AppKit.INSRuleEditorDelegate,Foundation.NSNotification)",
			"AppKit.NSRuleEditorDelegate_Extensions::EditingEnded(AppKit.INSRuleEditorDelegate,Foundation.NSNotification)",
			"AppKit.NSRuleEditorDelegate_Extensions::PredicateParts(AppKit.INSRuleEditorDelegate,AppKit.NSRuleEditor,Foundation.NSObject,Foundation.NSObject,System.IntPtr)",
			"AppKit.NSRuleEditorDelegate_Extensions::RowsDidChange(AppKit.INSRuleEditorDelegate,Foundation.NSNotification)",
			"AppKit.NSRuleEditorDelegateWrapper::ChildForCriterion(AppKit.NSRuleEditor,System.IntPtr,Foundation.NSObject,AppKit.NSRuleEditorRowType)",
			"AppKit.NSRuleEditorDelegateWrapper::DisplayValue(AppKit.NSRuleEditor,Foundation.NSObject,System.IntPtr)",
			"AppKit.NSRuleEditorDelegateWrapper::NumberOfChildren(AppKit.NSRuleEditor,Foundation.NSObject,AppKit.NSRuleEditorRowType)",
			"AppKit.NSRulerMarker::.ctor(AppKit.NSRulerView,System.Runtime.InteropServices.NFloat,AppKit.NSImage,CoreGraphics.CGPoint)",
			"AppKit.NSRulerMarker::.ctor(Foundation.NSCoder)",
			"AppKit.NSRulerMarker::Copy(Foundation.NSZone)",
			"AppKit.NSRulerMarker::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSRulerMarker::set_Image(AppKit.NSImage)",
			"AppKit.NSRulerMarker::set_RepresentedObject(Foundation.NSObject)",
			"AppKit.NSRulerMarker::TrackMouse(AppKit.NSEvent,System.Boolean)",
			"AppKit.NSRulerMarkerClientViewDelegation::RulerViewLocation(AppKit.NSView,AppKit.NSRulerView,CoreGraphics.CGPoint)",
			"AppKit.NSRulerMarkerClientViewDelegation::RulerViewPoint(AppKit.NSView,AppKit.NSRulerView,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSRulerView::.ctor(AppKit.NSScrollView,AppKit.NSRulerOrientation)",
			"AppKit.NSRulerView::.ctor(Foundation.NSCoder)",
			"AppKit.NSRulerView::AddMarker(AppKit.NSRulerMarker)",
			"AppKit.NSRulerView::RemoveMarker(AppKit.NSRulerMarker)",
			"AppKit.NSRulerView::set_AccessoryView(AppKit.NSView)",
			"AppKit.NSRulerView::set_MeasurementUnits(AppKit.NSRulerViewUnits)",
			"AppKit.NSRulerView::TrackMarker(AppKit.NSRulerMarker,AppKit.NSEvent)",
			"AppKit.NSSavePanel::.ctor(Foundation.NSCoder)",
			"AppKit.NSSavePanel::Begin(System.String,System.String,AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSSavePanel::BeginSheet(AppKit.NSWindow,AppKit.NSSavePanelComplete)",
			"AppKit.NSSavePanel::Cancel(Foundation.NSObject)",
			"AppKit.NSSavePanel::Ok(Foundation.NSObject)",
			"AppKit.NSSavePanel::set_AccessoryView(AppKit.NSView)",
			"AppKit.NSSavePanel::set_DirectoryUrl(Foundation.NSUrl)",
			"AppKit.NSScroller::.ctor(Foundation.NSCoder)",
			"AppKit.NSScroller::TrackKnob(AppKit.NSEvent)",
			"AppKit.NSScroller::TrackScrollButtons(AppKit.NSEvent)",
			"AppKit.NSScrollView::.ctor(Foundation.NSCoder)",
			"AppKit.NSScrollView::AddFloatingSubview(AppKit.NSView,AppKit.NSEventGestureAxis)",
			"AppKit.NSScrollView::GetContentSizeForFrame(CoreGraphics.CGSize,ObjCRuntime.Class,ObjCRuntime.Class,AppKit.NSBorderType,AppKit.NSControlSize,AppKit.NSScrollerStyle)",
			"AppKit.NSScrollView::GetFrameSizeForContent(CoreGraphics.CGSize,ObjCRuntime.Class,ObjCRuntime.Class,AppKit.NSBorderType,AppKit.NSControlSize,AppKit.NSScrollerStyle)",
			"AppKit.NSScrollView::ReflectScrolledClipView(AppKit.NSClipView)",
			"AppKit.NSScrollView::ScrollWheel(AppKit.NSEvent)",
			"AppKit.NSScrollView::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSScrollView::set_ContentView(AppKit.NSClipView)",
			"AppKit.NSScrollView::set_DocumentCursor(AppKit.NSCursor)",
			"AppKit.NSScrollView::set_DocumentView(AppKit.NSView)",
			"AppKit.NSScrollView::set_FindBarView(AppKit.NSView)",
			"AppKit.NSScrollView::set_HorizontalRulerView(AppKit.NSRulerView)",
			"AppKit.NSScrollView::set_HorizontalScroller(AppKit.NSScroller)",
			"AppKit.NSScrollView::set_VerticalRulerView(AppKit.NSRulerView)",
			"AppKit.NSScrollView::set_VerticalScroller(AppKit.NSScroller)",
			"AppKit.NSScrubber::.ctor(Foundation.NSCoder)",
			"AppKit.NSScrubber::InsertItems(Foundation.NSIndexSet)",
			"AppKit.NSScrubber::MakeItem(System.String,Foundation.NSObject)",
			"AppKit.NSScrubber::RegisterClass(ObjCRuntime.Class,System.String)",
			"AppKit.NSScrubber::RegisterNib(AppKit.NSNib,System.String)",
			"AppKit.NSScrubber::ReloadItems(Foundation.NSIndexSet)",
			"AppKit.NSScrubber::RemoveItems(Foundation.NSIndexSet)",
			"AppKit.NSScrubber::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSScrubber::set_BackgroundView(AppKit.NSView)",
			"AppKit.NSScrubber::set_ScrubberLayout(AppKit.NSScrubberLayout)",
			"AppKit.NSScrubber::set_SelectionBackgroundStyle(AppKit.NSScrubberSelectionStyle)",
			"AppKit.NSScrubber::set_SelectionOverlayStyle(AppKit.NSScrubberSelectionStyle)",
			"AppKit.NSScrubberArrangedView::.ctor(Foundation.NSCoder)",
			"AppKit.NSScrubberArrangedView::ApplyLayoutAttributes(AppKit.NSScrubberLayoutAttributes)",
			"AppKit.NSScrubberDataSourceWrapper::GetNumberOfItems(AppKit.NSScrubber)",
			"AppKit.NSScrubberDataSourceWrapper::GetViewForItem(AppKit.NSScrubber,System.IntPtr)",
			"AppKit.NSScrubberDelegate_Extensions::DidBeginInteracting(AppKit.INSScrubberDelegate,AppKit.NSScrubber)",
			"AppKit.NSScrubberDelegate_Extensions::DidCancelInteracting(AppKit.INSScrubberDelegate,AppKit.NSScrubber)",
			"AppKit.NSScrubberDelegate_Extensions::DidChangeVisible(AppKit.INSScrubberDelegate,AppKit.NSScrubber,Foundation.NSRange)",
			"AppKit.NSScrubberDelegate_Extensions::DidFinishInteracting(AppKit.INSScrubberDelegate,AppKit.NSScrubber)",
			"AppKit.NSScrubberDelegate_Extensions::DidHighlightItem(AppKit.INSScrubberDelegate,AppKit.NSScrubber,System.IntPtr)",
			"AppKit.NSScrubberDelegate_Extensions::DidSelectItem(AppKit.INSScrubberDelegate,AppKit.NSScrubber,System.IntPtr)",
			"AppKit.NSScrubberFlowLayout::.ctor(Foundation.NSCoder)",
			"AppKit.NSScrubberFlowLayout::InvalidateLayoutForItems(Foundation.NSIndexSet)",
			"AppKit.NSScrubberFlowLayoutDelegate_Extensions::Layout(AppKit.INSScrubberFlowLayoutDelegate,AppKit.NSScrubber,AppKit.NSScrubberFlowLayout,System.IntPtr)",
			"AppKit.NSScrubberImageItemView::.ctor(Foundation.NSCoder)",
			"AppKit.NSScrubberImageItemView::set_Image(AppKit.NSImage)",
			"AppKit.NSScrubberItemView::.ctor(Foundation.NSCoder)",
			"AppKit.NSScrubberLayout::.ctor(Foundation.NSCoder)",
			"AppKit.NSScrubberLayout::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSScrubberLayoutAttributes::Copy(Foundation.NSZone)",
			"AppKit.NSScrubberProportionalLayout::.ctor(Foundation.NSCoder)",
			"AppKit.NSScrubberSelectionStyle::.ctor(Foundation.NSCoder)",
			"AppKit.NSScrubberSelectionStyle::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSScrubberSelectionView::.ctor(Foundation.NSCoder)",
			"AppKit.NSScrubberTextItemView::.ctor(Foundation.NSCoder)",
			"AppKit.NSSearchField::.ctor(Foundation.NSCoder)",
			"AppKit.NSSearchField::set_Cell(AppKit.NSSearchFieldCell)",
			"AppKit.NSSearchField::set_SearchMenuTemplate(AppKit.NSMenu)",
			"AppKit.NSSearchFieldCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSSearchFieldCell::set_CancelButtonCell(AppKit.NSButtonCell)",
			"AppKit.NSSearchFieldCell::set_SearchButtonCell(AppKit.NSButtonCell)",
			"AppKit.NSSearchFieldCell::set_SearchMenuTemplate(AppKit.NSMenu)",
			"AppKit.NSSearchFieldDelegate_Extensions::SearchingEnded(AppKit.INSSearchFieldDelegate,AppKit.NSSearchField)",
			"AppKit.NSSearchFieldDelegate_Extensions::SearchingStarted(AppKit.INSSearchFieldDelegate,AppKit.NSSearchField)",
			"AppKit.NSSearchToolbarItem::set_SearchField(AppKit.NSSearchField)",
			"AppKit.NSSecureTextField::.ctor(Foundation.NSCoder)",
			"AppKit.NSSecureTextFieldCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSSegmentedCell::.ctor(AppKit.NSImage)",
			"AppKit.NSSegmentedCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSSegmentedCell::DrawSegment(System.IntPtr,CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSSegmentedCell::SetImage(AppKit.NSImage,System.IntPtr)",
			"AppKit.NSSegmentedCell::SetMenu(AppKit.NSMenu,System.IntPtr)",
			"AppKit.NSSegmentedControl::.ctor(Foundation.NSCoder)",
			"AppKit.NSSegmentedControl::_FromImages(AppKit.NSImage[],AppKit.NSSegmentSwitchTracking,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSSegmentedControl::_FromLabels(System.String[],AppKit.NSSegmentSwitchTracking,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSSegmentedControl::set_SelectedSegmentBezelColor(AppKit.NSColor)",
			"AppKit.NSSegmentedControl::SetImage(AppKit.NSImage,System.IntPtr)",
			"AppKit.NSSegmentedControl::SetMenu(AppKit.NSMenu,System.IntPtr)",
			"AppKit.NSSeguePerforming_Extensions::PerformSegue(AppKit.INSSeguePerforming,System.String,Foundation.NSObject)",
			"AppKit.NSSeguePerforming_Extensions::PrepareForSegue(AppKit.INSSeguePerforming,AppKit.NSStoryboardSegue,Foundation.NSObject)",
			"AppKit.NSSeguePerforming_Extensions::ShouldPerformSegue(AppKit.INSSeguePerforming,System.String,Foundation.NSObject)",
			"AppKit.NSServicesMenuRequestor_Extensions::ReadSelectionFromPasteboard(AppKit.INSServicesMenuRequestor,AppKit.NSPasteboard)",
			"AppKit.NSServicesMenuRequestor_Extensions::WriteSelectionToPasteboard(AppKit.INSServicesMenuRequestor,AppKit.NSPasteboard,System.String[])",
			"AppKit.NSShadow::.ctor(Foundation.NSCoder)",
			"AppKit.NSShadow::Copy(Foundation.NSZone)",
			"AppKit.NSShadow::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSShadow::set_ShadowColor(AppKit.NSColor)",
			"AppKit.NSSharingService::.ctor(System.String,AppKit.NSImage,AppKit.NSImage,AppKit.NSSharingServiceHandler)",
			"AppKit.NSSharingService::GetSharingService(Foundation.NSString)",
			"AppKit.NSSharingServiceDelegate_Extensions::CreateAnchoringView(AppKit.INSSharingServiceDelegate,AppKit.NSSharingService,CoreGraphics.CGRect&,AppKit.NSRectEdge&)",
			"AppKit.NSSharingServiceDelegate_Extensions::DidFailToShareItems(AppKit.INSSharingServiceDelegate,AppKit.NSSharingService,Foundation.NSObject[],Foundation.NSError)",
			"AppKit.NSSharingServiceDelegate_Extensions::DidShareItems(AppKit.INSSharingServiceDelegate,AppKit.NSSharingService,Foundation.NSObject[])",
			"AppKit.NSSharingServiceDelegate_Extensions::SourceFrameOnScreenForShareItem(AppKit.INSSharingServiceDelegate,AppKit.NSSharingService,AppKit.INSPasteboardWriting)",
			"AppKit.NSSharingServiceDelegate_Extensions::SourceWindowForShareItems(AppKit.INSSharingServiceDelegate,AppKit.NSSharingService,Foundation.NSObject[],AppKit.NSSharingContentScope)",
			"AppKit.NSSharingServiceDelegate_Extensions::TransitionImageForShareItem(AppKit.INSSharingServiceDelegate,AppKit.NSSharingService,AppKit.INSPasteboardWriting,CoreGraphics.CGRect)",
			"AppKit.NSSharingServiceDelegate_Extensions::WillShareItems(AppKit.INSSharingServiceDelegate,AppKit.NSSharingService,Foundation.NSObject[])",
			"AppKit.NSSharingServicePicker::ShowRelativeToRect(CoreGraphics.CGRect,AppKit.NSView,AppKit.NSRectEdge)",
			"AppKit.NSSharingServicePickerDelegate_Extensions::DelegateForSharingService(AppKit.INSSharingServicePickerDelegate,AppKit.NSSharingServicePicker,AppKit.NSSharingService)",
			"AppKit.NSSharingServicePickerDelegate_Extensions::DidChooseSharingService(AppKit.INSSharingServicePickerDelegate,AppKit.NSSharingServicePicker,AppKit.NSSharingService)",
			"AppKit.NSSharingServicePickerDelegate_Extensions::SharingServicesForItems(AppKit.INSSharingServicePickerDelegate,AppKit.NSSharingServicePicker,Foundation.NSObject[],AppKit.NSSharingService[])",
			"AppKit.NSSharingServicePickerToolbarItemDelegateWrapper::GetItems(AppKit.NSSharingServicePickerToolbarItem)",
			"AppKit.NSSharingServicePickerTouchBarItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSSharingServicePickerTouchBarItem::set_ButtonImage(AppKit.NSImage)",
			"AppKit.NSSharingServicePickerTouchBarItemDelegateWrapper::ItemsForSharingServicePickerTouchBarItem(AppKit.NSSharingServicePickerTouchBarItem)",
			"AppKit.NSSlider::.ctor(Foundation.NSCoder)",
			"AppKit.NSSlider::_FromTarget(Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSSlider::_FromValue(System.Double,System.Double,System.Double,Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSSlider::AcceptsFirstMouse(AppKit.NSEvent)",
			"AppKit.NSSlider::set_Image(AppKit.NSImage)",
			"AppKit.NSSlider::set_TitleCell(Foundation.NSObject)",
			"AppKit.NSSlider::set_TitleColor(AppKit.NSColor)",
			"AppKit.NSSlider::set_TitleFont(AppKit.NSFont)",
			"AppKit.NSSlider::set_TrackFillColor(AppKit.NSColor)",
			"AppKit.NSSliderAccessory::.ctor(Foundation.NSCoder)",
			"AppKit.NSSliderAccessory::CreateAccessory(AppKit.NSImage)",
			"AppKit.NSSliderAccessory::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSSliderAccessory::set_AccessibilityApplicationFocusedUIElement(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityCancelButton(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityClearButton(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityCloseButton(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityCriticalValue(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityDecrementButton(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityDefaultButton(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityDisclosedRows(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityFocusedWindow(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityFullScreenButton(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityGrowArea(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityHeader(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityHorizontalScrollBar(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityIncrementButton(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityMainWindow(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityMarkerGroupUIElement(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityMarkerValues(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityMaxValue(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityMinimizeButton(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityMinValue(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityOverflowButton(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityProxy(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilitySearchButton(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilitySearchMenu(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityShownMenu(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityToolbarButton(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityUrl(Foundation.NSUrl)",
			"AppKit.NSSliderAccessory::set_AccessibilityValue(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityVerticalScrollBar(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityWarningValue(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_AccessibilityZoomButton(Foundation.NSObject)",
			"AppKit.NSSliderAccessory::set_Behavior(AppKit.NSSliderAccessoryBehavior)",
			"AppKit.NSSliderAccessoryBehavior::.ctor(Foundation.NSCoder)",
			"AppKit.NSSliderAccessoryBehavior::Copy(Foundation.NSZone)",
			"AppKit.NSSliderAccessoryBehavior::CreateBehavior(Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSSliderAccessoryBehavior::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSSliderAccessoryBehavior::HandleAction(AppKit.NSSliderAccessory)",
			"AppKit.NSSliderCell::.ctor(AppKit.NSImage)",
			"AppKit.NSSliderCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSSliderCell::set_TitleCell(Foundation.NSObject)",
			"AppKit.NSSliderCell::set_TitleColor(AppKit.NSColor)",
			"AppKit.NSSliderCell::set_TitleFont(AppKit.NSFont)",
			"AppKit.NSSliderTouchBarItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSSliderTouchBarItem::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSSliderTouchBarItem::set_MaximumValueAccessory(AppKit.NSSliderAccessory)",
			"AppKit.NSSliderTouchBarItem::set_MinimumValueAccessory(AppKit.NSSliderAccessory)",
			"AppKit.NSSliderTouchBarItem::set_Slider(AppKit.NSSlider)",
			"AppKit.NSSound::.ctor(AppKit.NSPasteboard)",
			"AppKit.NSSound::.ctor(Foundation.NSCoder)",
			"AppKit.NSSound::.ctor(Foundation.NSData)",
			"AppKit.NSSound::.ctor(Foundation.NSUrl,System.Boolean)",
			"AppKit.NSSound::CanCreateFromPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSSound::Copy(Foundation.NSZone)",
			"AppKit.NSSound::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSSound::GetReadableTypesForPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSSound::GetReadingOptionsForType(System.String,AppKit.NSPasteboard)",
			"AppKit.NSSound::GetWritableTypesForPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSSound::GetWritingOptionsForType(System.String,AppKit.NSPasteboard)",
			"AppKit.NSSound::set_ChannelMapping(Foundation.NSObject)",
			"AppKit.NSSound::WriteToPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSSoundDelegate_Extensions::DidFinishPlaying(AppKit.INSSoundDelegate,AppKit.NSSound,System.Boolean)",
			"AppKit.NSSpeechRecognizerDelegate_Extensions::DidRecognizeCommand(AppKit.INSSpeechRecognizerDelegate,AppKit.NSSpeechRecognizer,System.String)",
			"AppKit.NSSpeechSynthesizer::AddSpeechDictionary(Foundation.NSDictionary)",
			"AppKit.NSSpeechSynthesizer::SetObjectforProperty(Foundation.NSObject,System.String,Foundation.NSError&)",
			"AppKit.NSSpeechSynthesizer::StartSpeakingStringtoURL(System.String,Foundation.NSUrl)",
			"AppKit.NSSpeechSynthesizerDelegate_Extensions::DidEncounterError(AppKit.INSSpeechSynthesizerDelegate,AppKit.NSSpeechSynthesizer,System.UIntPtr,System.String,System.String)",
			"AppKit.NSSpeechSynthesizerDelegate_Extensions::DidEncounterSyncMessage(AppKit.INSSpeechSynthesizerDelegate,AppKit.NSSpeechSynthesizer,System.String)",
			"AppKit.NSSpeechSynthesizerDelegate_Extensions::DidFinishSpeaking(AppKit.INSSpeechSynthesizerDelegate,AppKit.NSSpeechSynthesizer,System.Boolean)",
			"AppKit.NSSpeechSynthesizerDelegate_Extensions::WillSpeakPhoneme(AppKit.INSSpeechSynthesizerDelegate,AppKit.NSSpeechSynthesizer,System.Int16)",
			"AppKit.NSSpeechSynthesizerDelegate_Extensions::WillSpeakWord(AppKit.INSSpeechSynthesizerDelegate,AppKit.NSSpeechSynthesizer,Foundation.NSRange,System.String)",
			"AppKit.NSSpellChecker::CheckString(System.String,Foundation.NSRange,Foundation.NSTextCheckingTypes,Foundation.NSDictionary,System.IntPtr,Foundation.NSOrthography&,System.IntPtr&)",
			"AppKit.NSSpellChecker::DismissCorrectionIndicator(AppKit.NSView)",
			"AppKit.NSSpellChecker::GetLanguage(Foundation.NSRange,System.String,Foundation.NSOrthography)",
			"AppKit.NSSpellChecker::MenuForResults(Foundation.NSTextCheckingResult,System.String,Foundation.NSDictionary,CoreGraphics.CGPoint,AppKit.NSView)",
			"AppKit.NSSpellChecker::RequestCandidates(Foundation.NSRange,System.String,System.UInt64,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.IntPtr,System.Action`2<System.IntPtr,Foundation.NSTextCheckingResult[]>)",
			"AppKit.NSSpellChecker::RequestChecking(System.String,Foundation.NSRange,Foundation.NSTextCheckingTypes,Foundation.NSDictionary,System.IntPtr,System.Action`4<System.IntPtr,Foundation.NSTextCheckingResult[],Foundation.NSOrthography,System.IntPtr>)",
			"AppKit.NSSpellChecker::set_AccessoryView(AppKit.NSView)",
			"AppKit.NSSpellChecker::set_SubstitutionsPanelAccessoryViewController(AppKit.NSViewController)",
			"AppKit.NSSpellChecker::ShowCorrectionIndicatorOfType(AppKit.NSCorrectionIndicatorType,System.String,System.String[],CoreGraphics.CGRect,AppKit.NSRulerView,AppKit.NSSpellCheckerShowCorrectionIndicatorOfTypeHandler)",
			"AppKit.NSSpellChecker::UpdateSpellingPanelWithGrammarl(System.String,Foundation.NSDictionary)",
			"AppKit.NSSplitView::.ctor(Foundation.NSCoder)",
			"AppKit.NSSplitView::AddArrangedSubview(AppKit.NSView)",
			"AppKit.NSSplitView::InsertArrangedSubview(AppKit.NSView,System.IntPtr)",
			"AppKit.NSSplitView::IsSubviewCollapsed(AppKit.NSView)",
			"AppKit.NSSplitView::RemoveArrangedSubview(AppKit.NSView)",
			"AppKit.NSSplitViewController::.ctor(Foundation.NSCoder)",
			"AppKit.NSSplitViewController::.ctor(System.String,Foundation.NSBundle)",
			"AppKit.NSSplitViewController::AddSplitViewItem(AppKit.NSSplitViewItem)",
			"AppKit.NSSplitViewController::CanCollapse(AppKit.NSSplitView,AppKit.NSView)",
			"AppKit.NSSplitViewController::ConstrainSplitPosition(AppKit.NSSplitView,System.Runtime.InteropServices.NFloat,System.IntPtr)",
			"AppKit.NSSplitViewController::DidResizeSubviews(Foundation.NSNotification)",
			"AppKit.NSSplitViewController::GetAdditionalEffectiveRect(AppKit.NSSplitView,System.IntPtr)",
			"AppKit.NSSplitViewController::GetEffectiveRect(AppKit.NSSplitView,CoreGraphics.CGRect,CoreGraphics.CGRect,System.IntPtr)",
			"AppKit.NSSplitViewController::GetSplitViewItem(AppKit.NSViewController)",
			"AppKit.NSSplitViewController::InsertSplitViewItem(AppKit.NSSplitViewItem,System.IntPtr)",
			"AppKit.NSSplitViewController::RemoveSplitViewItem(AppKit.NSSplitViewItem)",
			"AppKit.NSSplitViewController::Resize(AppKit.NSSplitView,CoreGraphics.CGSize)",
			"AppKit.NSSplitViewController::set_SplitView(AppKit.NSSplitView)",
			"AppKit.NSSplitViewController::SetMaxCoordinateOfSubview(AppKit.NSSplitView,System.Runtime.InteropServices.NFloat,System.IntPtr)",
			"AppKit.NSSplitViewController::SetMinCoordinateOfSubview(AppKit.NSSplitView,System.Runtime.InteropServices.NFloat,System.IntPtr)",
			"AppKit.NSSplitViewController::ShouldAdjustSize(AppKit.NSSplitView,AppKit.NSView)",
			"AppKit.NSSplitViewController::ShouldCollapseForDoubleClick(AppKit.NSSplitView,AppKit.NSView,System.IntPtr)",
			"AppKit.NSSplitViewController::ShouldHideDivider(AppKit.NSSplitView,System.IntPtr)",
			"AppKit.NSSplitViewController::SplitViewWillResizeSubviews(Foundation.NSNotification)",
			"AppKit.NSSplitViewController::ToggleSidebar(Foundation.NSObject)",
			"AppKit.NSSplitViewController::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"AppKit.NSSplitViewDelegate_Extensions::CanCollapse(AppKit.INSSplitViewDelegate,AppKit.NSSplitView,AppKit.NSView)",
			"AppKit.NSSplitViewDelegate_Extensions::ConstrainSplitPosition(AppKit.INSSplitViewDelegate,AppKit.NSSplitView,System.Runtime.InteropServices.NFloat,System.IntPtr)",
			"AppKit.NSSplitViewDelegate_Extensions::DidResizeSubviews(AppKit.INSSplitViewDelegate,Foundation.NSNotification)",
			"AppKit.NSSplitViewDelegate_Extensions::GetAdditionalEffectiveRect(AppKit.INSSplitViewDelegate,AppKit.NSSplitView,System.IntPtr)",
			"AppKit.NSSplitViewDelegate_Extensions::GetEffectiveRect(AppKit.INSSplitViewDelegate,AppKit.NSSplitView,CoreGraphics.CGRect,CoreGraphics.CGRect,System.IntPtr)",
			"AppKit.NSSplitViewDelegate_Extensions::Resize(AppKit.INSSplitViewDelegate,AppKit.NSSplitView,CoreGraphics.CGSize)",
			"AppKit.NSSplitViewDelegate_Extensions::SetMaxCoordinateOfSubview(AppKit.INSSplitViewDelegate,AppKit.NSSplitView,System.Runtime.InteropServices.NFloat,System.IntPtr)",
			"AppKit.NSSplitViewDelegate_Extensions::SetMinCoordinateOfSubview(AppKit.INSSplitViewDelegate,AppKit.NSSplitView,System.Runtime.InteropServices.NFloat,System.IntPtr)",
			"AppKit.NSSplitViewDelegate_Extensions::ShouldAdjustSize(AppKit.INSSplitViewDelegate,AppKit.NSSplitView,AppKit.NSView)",
			"AppKit.NSSplitViewDelegate_Extensions::ShouldCollapseForDoubleClick(AppKit.INSSplitViewDelegate,AppKit.NSSplitView,AppKit.NSView,System.IntPtr)",
			"AppKit.NSSplitViewDelegate_Extensions::ShouldHideDivider(AppKit.INSSplitViewDelegate,AppKit.NSSplitView,System.IntPtr)",
			"AppKit.NSSplitViewDelegate_Extensions::SplitViewWillResizeSubviews(AppKit.INSSplitViewDelegate,Foundation.NSNotification)",
			"AppKit.NSSplitViewItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSSplitViewItem::AnimationFor(Foundation.NSString)",
			"AppKit.NSSplitViewItem::CreateContentList(AppKit.NSViewController)",
			"AppKit.NSSplitViewItem::CreateSidebar(AppKit.NSViewController)",
			"AppKit.NSSplitViewItem::DefaultAnimationFor(Foundation.NSString)",
			"AppKit.NSSplitViewItem::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSSplitViewItem::FromViewController(AppKit.NSViewController)",
			"AppKit.NSSplitViewItem::set_Animations(Foundation.NSDictionary)",
			"AppKit.NSSplitViewItem::set_ViewController(AppKit.NSViewController)",
			"AppKit.NSSpringLoadingDestination_Extensions::DraggingEnded(AppKit.INSSpringLoadingDestination,AppKit.INSDraggingInfo)",
			"AppKit.NSSpringLoadingDestination_Extensions::Entered(AppKit.INSSpringLoadingDestination,AppKit.INSDraggingInfo)",
			"AppKit.NSSpringLoadingDestination_Extensions::Exited(AppKit.INSSpringLoadingDestination,AppKit.INSDraggingInfo)",
			"AppKit.NSSpringLoadingDestination_Extensions::Updated(AppKit.INSSpringLoadingDestination,AppKit.INSDraggingInfo)",
			"AppKit.NSSpringLoadingDestinationWrapper::Activated(System.Boolean,AppKit.INSDraggingInfo)",
			"AppKit.NSSpringLoadingDestinationWrapper::HighlightChanged(AppKit.INSDraggingInfo)",
			"AppKit.NSStackView::.ctor(Foundation.NSCoder)",
			"AppKit.NSStackView::AddArrangedSubview(AppKit.NSView)",
			"AppKit.NSStackView::AddView(AppKit.NSView,AppKit.NSStackViewGravity)",
			"AppKit.NSStackView::CustomSpacingAfterView(AppKit.NSView)",
			"AppKit.NSStackView::InsertArrangedSubview(AppKit.NSView,System.IntPtr)",
			"AppKit.NSStackView::InsertView(AppKit.NSView,System.UIntPtr,AppKit.NSStackViewGravity)",
			"AppKit.NSStackView::RemoveArrangedSubview(AppKit.NSView)",
			"AppKit.NSStackView::RemoveView(AppKit.NSView)",
			"AppKit.NSStackView::SetCustomSpacing(System.Runtime.InteropServices.NFloat,AppKit.NSView)",
			"AppKit.NSStackView::SetVisibilityPriority(System.Single,AppKit.NSView)",
			"AppKit.NSStackView::VisibilityPriority(AppKit.NSView)",
			"AppKit.NSStackViewDelegate_Extensions::DidReattachViews(AppKit.INSStackViewDelegate,AppKit.NSStackView,AppKit.NSView[])",
			"AppKit.NSStackViewDelegate_Extensions::WillDetachViews(AppKit.INSStackViewDelegate,AppKit.NSStackView,AppKit.NSView[])",
			"AppKit.NSStandardKeyBindingMethods::QuickLookPreviewItems(AppKit.NSResponder,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::CancelOperation(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::CapitalizeWord(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::CenterSelectionInVisibleArea(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::ChangeCaseOfLetter(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::Complete(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::DeleteBackward(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::DeleteBackwardByDecomposingPreviousCharacter(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::DeleteForward(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::DeleteToBeginningOfLine(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::DeleteToBeginningOfParagraph(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::DeleteToEndOfLine(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::DeleteToEndOfParagraph(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::DeleteToMark(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::DeleteWordBackward(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::DeleteWordForward(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::DoCommandBySelector(AppKit.INSStandardKeyBindingResponding,ObjCRuntime.Selector)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::Indent(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::InsertBacktab(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::InsertContainerBreak(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::InsertDoubleQuoteIgnoringSubstitution(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::InsertLineBreak(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::InsertNewline(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::InsertNewlineIgnoringFieldEditor(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::InsertParagraphSeparator(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::InsertSingleQuoteIgnoringSubstitution(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::InsertTab(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::InsertTabIgnoringFieldEditor(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::InsertText(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::LowercaseWord(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MakeBaseWritingDirectionLeftToRight(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MakeBaseWritingDirectionNatural(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MakeBaseWritingDirectionRightToLeft(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MakeTextWritingDirectionLeftToRight(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MakeTextWritingDirectionNatural(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MakeTextWritingDirectionRightToLeft(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveBackward(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveBackwardAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveDown(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveDownAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveForward(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveForwardAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveLeft(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveLeftAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveParagraphBackwardAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveParagraphForwardAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveRight(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveRightAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToBeginningOfDocument(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToBeginningOfDocumentAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToBeginningOfLine(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToBeginningOfLineAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToBeginningOfParagraph(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToBeginningOfParagraphAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToEndOfDocument(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToEndOfDocumentAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToEndOfLine(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToEndOfLineAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToEndOfParagraph(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToEndOfParagraphAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToLeftEndOfLine(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToLeftEndOfLineAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToRightEndOfLine(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveToRightEndOfLineAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveUp(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveUpAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveWordBackward(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveWordBackwardAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveWordForward(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveWordForwardAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveWordLeft(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveWordLeftAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveWordRight(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::MoveWordRightAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::PageDown(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::PageDownAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::PageUp(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::PageUpAndModifySelection(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::QuickLookPreviewItems(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::ScrollLineDown(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::ScrollLineUp(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::ScrollPageDown(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::ScrollPageUp(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::ScrollToBeginningOfDocument(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::ScrollToEndOfDocument(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::SelectAll(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::SelectLine(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::SelectParagraph(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::SelectToMark(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::SelectWord(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::SetMark(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::SwapWithMark(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::Transpose(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::TransposeWords(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::UppercaseWord(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStandardKeyBindingResponding_Extensions::Yank(AppKit.INSStandardKeyBindingResponding,Foundation.NSObject)",
			"AppKit.NSStatusBar::RemoveStatusItem(AppKit.NSStatusItem)",
			"AppKit.NSStatusBarButton::.ctor(Foundation.NSCoder)",
			"AppKit.NSStatusItem::PopUpStatusItemMenu(AppKit.NSMenu)",
			"AppKit.NSStatusItem::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSStatusItem::set_AlternateImage(AppKit.NSImage)",
			"AppKit.NSStatusItem::set_AttributedTitle(Foundation.NSAttributedString)",
			"AppKit.NSStatusItem::set_DoubleAction(ObjCRuntime.Selector)",
			"AppKit.NSStatusItem::set_Image(AppKit.NSImage)",
			"AppKit.NSStatusItem::set_Menu(AppKit.NSMenu)",
			"AppKit.NSStatusItem::set_View(AppKit.NSView)",
			"AppKit.NSStepper::.ctor(Foundation.NSCoder)",
			"AppKit.NSStepperCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSStepperTouchBarItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSStepperTouchBarItem::Create(AppKit.NSTouchBarItemIdentifier,Foundation.NSFormatter)",
			"AppKit.NSStepperTouchBarItem::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSStoryboard::FromName(System.String,Foundation.NSBundle)",
			"AppKit.NSStoryboardSegue::.ctor(System.String,Foundation.NSObject,Foundation.NSObject)",
			"AppKit.NSStoryboardSegue::FromIdentifier(System.String,Foundation.NSObject,Foundation.NSObject,System.Action)",
			"AppKit.NSStringAttributes::Get(Foundation.NSString)",
			"AppKit.NSStringDrawing_NSAttributedString::DrawAtPoint(Foundation.NSAttributedString,CoreGraphics.CGPoint)",
			"AppKit.NSStringDrawing_NSAttributedString::DrawInRect(Foundation.NSAttributedString,CoreGraphics.CGRect)",
			"AppKit.NSStringDrawing_NSAttributedString::GetSize(Foundation.NSAttributedString)",
			"AppKit.NSStringDrawing_NSString::DrawAtPoint(Foundation.NSString,CoreGraphics.CGPoint,Foundation.NSDictionary)",
			"AppKit.NSStringDrawing_NSString::DrawInRect(Foundation.NSString,CoreGraphics.CGRect,Foundation.NSDictionary)",
			"AppKit.NSStringDrawing_NSString::StringSize(Foundation.NSString,Foundation.NSDictionary)",
			"AppKit.NSSwitch::.ctor(Foundation.NSCoder)",
			"AppKit.NSTableCellView::.ctor(Foundation.NSCoder)",
			"AppKit.NSTableCellView::set_ObjectValue(Foundation.NSObject)",
			"AppKit.NSTableColumn::.ctor(Foundation.NSCoder)",
			"AppKit.NSTableColumn::.ctor(Foundation.NSString)",
			"AppKit.NSTableColumn::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTableColumn::set_DataCell(AppKit.NSCell)",
			"AppKit.NSTableColumn::set_HeaderCell(AppKit.NSCell)",
			"AppKit.NSTableColumn::set_SortDescriptorPrototype(Foundation.NSSortDescriptor)",
			"AppKit.NSTableColumn::set_TableView(AppKit.NSTableView)",
			"AppKit.NSTableHeaderCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSTableHeaderCell::DrawSortIndicator(CoreGraphics.CGRect,AppKit.NSView,System.Boolean,System.IntPtr)",
			"AppKit.NSTableHeaderView::.ctor(Foundation.NSCoder)",
			"AppKit.NSTableHeaderView::GetStringForToolTip(AppKit.NSView,System.IntPtr,CoreGraphics.CGPoint,System.IntPtr)",
			"AppKit.NSTableHeaderView::set_TableView(AppKit.NSTableView)",
			"AppKit.NSTableRowView::.ctor(Foundation.NSCoder)",
			"AppKit.NSTableRowView::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSTableView::.ctor(Foundation.NSCoder)",
			"AppKit.NSTableView::AddColumn(AppKit.NSTableColumn)",
			"AppKit.NSTableView::CanDragRows(Foundation.NSIndexSet,CoreGraphics.CGPoint)",
			"AppKit.NSTableView::ColumnForView(AppKit.NSView)",
			"AppKit.NSTableView::DeselectAll(Foundation.NSObject)",
			"AppKit.NSTableView::DraggedImageBeganAt(AppKit.NSImage,CoreGraphics.CGPoint)",
			"AppKit.NSTableView::DraggedImageEndedAtDeposited(AppKit.NSImage,CoreGraphics.CGPoint,System.Boolean)",
			"AppKit.NSTableView::DraggedImageEndedAtOperation(AppKit.NSImage,CoreGraphics.CGPoint,AppKit.NSDragOperation)",
			"AppKit.NSTableView::DraggedImageMovedTo(AppKit.NSImage,CoreGraphics.CGPoint)",
			"AppKit.NSTableView::DragImageForRows(Foundation.NSIndexSet,AppKit.NSTableColumn[],AppKit.NSEvent,CoreGraphics.CGPoint&)",
			"AppKit.NSTableView::EditColumn(System.IntPtr,System.IntPtr,AppKit.NSEvent,System.Boolean)",
			"AppKit.NSTableView::FindColumn(Foundation.NSString)",
			"AppKit.NSTableView::FindTableColumn(Foundation.NSString)",
			"AppKit.NSTableView::GetIndicatorImage(AppKit.NSTableColumn)",
			"AppKit.NSTableView::HideRows(Foundation.NSIndexSet,AppKit.NSTableViewAnimation)",
			"AppKit.NSTableView::InsertRows(Foundation.NSIndexSet,AppKit.NSTableViewAnimation)",
			"AppKit.NSTableView::MakeView(System.String,Foundation.NSObject)",
			"AppKit.NSTableView::NamesOfPromisedFilesDroppedAtDestination(Foundation.NSUrl)",
			"AppKit.NSTableView::NoteHeightOfRowsWithIndexesChanged(Foundation.NSIndexSet)",
			"AppKit.NSTableView::RegisterNib(AppKit.NSNib,System.String)",
			"AppKit.NSTableView::ReloadData(Foundation.NSIndexSet,Foundation.NSIndexSet)",
			"AppKit.NSTableView::RemoveColumn(AppKit.NSTableColumn)",
			"AppKit.NSTableView::RemoveRows(Foundation.NSIndexSet,AppKit.NSTableViewAnimation)",
			"AppKit.NSTableView::RowForView(AppKit.NSView)",
			"AppKit.NSTableView::RowViewAdded(AppKit.NSTableRowView,System.IntPtr)",
			"AppKit.NSTableView::RowViewRemoved(AppKit.NSTableRowView,System.IntPtr)",
			"AppKit.NSTableView::SelectAll(Foundation.NSObject)",
			"AppKit.NSTableView::SelectColumns(Foundation.NSIndexSet,System.Boolean)",
			"AppKit.NSTableView::SelectRows(Foundation.NSIndexSet,System.Boolean)",
			"AppKit.NSTableView::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSTableView::set_CornerView(AppKit.NSView)",
			"AppKit.NSTableView::set_DoubleAction(ObjCRuntime.Selector)",
			"AppKit.NSTableView::set_GridColor(AppKit.NSColor)",
			"AppKit.NSTableView::set_HeaderView(AppKit.NSTableHeaderView)",
			"AppKit.NSTableView::set_HighlightedTableColumn(AppKit.NSTableColumn)",
			"AppKit.NSTableView::SetIndicatorImage(AppKit.NSImage,AppKit.NSTableColumn)",
			"AppKit.NSTableView::ShouldFocusCell(AppKit.NSCell,System.IntPtr,System.IntPtr)",
			"AppKit.NSTableView::TextDidBeginEditing(Foundation.NSNotification)",
			"AppKit.NSTableView::TextDidChange(Foundation.NSNotification)",
			"AppKit.NSTableView::TextDidEndEditing(Foundation.NSNotification)",
			"AppKit.NSTableView::TextShouldBeginEditing(AppKit.NSText)",
			"AppKit.NSTableView::TextShouldEndEditing(AppKit.NSText)",
			"AppKit.NSTableView::UnhideRows(Foundation.NSIndexSet,AppKit.NSTableViewAnimation)",
			"AppKit.NSTableView::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"AppKit.NSTableViewDataSource_Extensions::AcceptDrop(AppKit.INSTableViewDataSource,AppKit.NSTableView,AppKit.INSDraggingInfo,System.IntPtr,AppKit.NSTableViewDropOperation)",
			"AppKit.NSTableViewDataSource_Extensions::DraggingSessionEnded(AppKit.INSTableViewDataSource,AppKit.NSTableView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,AppKit.NSDragOperation)",
			"AppKit.NSTableViewDataSource_Extensions::DraggingSessionWillBegin(AppKit.INSTableViewDataSource,AppKit.NSTableView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,Foundation.NSIndexSet)",
			"AppKit.NSTableViewDataSource_Extensions::FilesDropped(AppKit.INSTableViewDataSource,AppKit.NSTableView,Foundation.NSUrl,Foundation.NSIndexSet)",
			"AppKit.NSTableViewDataSource_Extensions::GetObjectValue(AppKit.INSTableViewDataSource,AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr)",
			"AppKit.NSTableViewDataSource_Extensions::GetPasteboardWriterForRow(AppKit.INSTableViewDataSource,AppKit.NSTableView,System.IntPtr)",
			"AppKit.NSTableViewDataSource_Extensions::GetRowCount(AppKit.INSTableViewDataSource,AppKit.NSTableView)",
			"AppKit.NSTableViewDataSource_Extensions::SetObjectValue(AppKit.INSTableViewDataSource,AppKit.NSTableView,Foundation.NSObject,AppKit.NSTableColumn,System.IntPtr)",
			"AppKit.NSTableViewDataSource_Extensions::SortDescriptorsChanged(AppKit.INSTableViewDataSource,AppKit.NSTableView,Foundation.NSSortDescriptor[])",
			"AppKit.NSTableViewDataSource_Extensions::UpdateDraggingItems(AppKit.INSTableViewDataSource,AppKit.NSTableView,AppKit.INSDraggingInfo)",
			"AppKit.NSTableViewDataSource_Extensions::ValidateDrop(AppKit.INSTableViewDataSource,AppKit.NSTableView,AppKit.INSDraggingInfo,System.IntPtr,AppKit.NSTableViewDropOperation)",
			"AppKit.NSTableViewDataSource_Extensions::WriteRows(AppKit.INSTableViewDataSource,AppKit.NSTableView,Foundation.NSIndexSet,AppKit.NSPasteboard)",
			"AppKit.NSTableViewDelegate_Extensions::ColumnDidMove(AppKit.INSTableViewDelegate,Foundation.NSNotification)",
			"AppKit.NSTableViewDelegate_Extensions::ColumnDidResize(AppKit.INSTableViewDelegate,Foundation.NSNotification)",
			"AppKit.NSTableViewDelegate_Extensions::CoreGetRowView(AppKit.INSTableViewDelegate,AppKit.NSTableView,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::DidAddRowView(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSTableRowView,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::DidClickTableColumn(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSTableColumn)",
			"AppKit.NSTableViewDelegate_Extensions::DidDragTableColumn(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSTableColumn)",
			"AppKit.NSTableViewDelegate_Extensions::DidRemoveRowView(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSTableRowView,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::GetDataCell(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::GetNextTypeSelectMatch(AppKit.INSTableViewDelegate,AppKit.NSTableView,System.IntPtr,System.IntPtr,System.String)",
			"AppKit.NSTableViewDelegate_Extensions::GetRowHeight(AppKit.INSTableViewDelegate,AppKit.NSTableView,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::GetSelectionIndexes(AppKit.INSTableViewDelegate,AppKit.NSTableView,Foundation.NSIndexSet)",
			"AppKit.NSTableViewDelegate_Extensions::GetSelectString(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::GetSizeToFitColumnWidth(AppKit.INSTableViewDelegate,AppKit.NSTableView,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::GetToolTip(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSCell,CoreGraphics.CGRect&,AppKit.NSTableColumn,System.IntPtr,CoreGraphics.CGPoint)",
			"AppKit.NSTableViewDelegate_Extensions::GetViewForItem(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::IsGroupRow(AppKit.INSTableViewDelegate,AppKit.NSTableView,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::MouseDownInHeaderOfTableColumn(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSTableColumn)",
			"AppKit.NSTableViewDelegate_Extensions::RowActions(AppKit.INSTableViewDelegate,AppKit.NSTableView,System.IntPtr,AppKit.NSTableRowActionEdge)",
			"AppKit.NSTableViewDelegate_Extensions::SelectionDidChange(AppKit.INSTableViewDelegate,Foundation.NSNotification)",
			"AppKit.NSTableViewDelegate_Extensions::SelectionIsChanging(AppKit.INSTableViewDelegate,Foundation.NSNotification)",
			"AppKit.NSTableViewDelegate_Extensions::SelectionShouldChange(AppKit.INSTableViewDelegate,AppKit.NSTableView)",
			"AppKit.NSTableViewDelegate_Extensions::ShouldEditTableColumn(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::ShouldReorder(AppKit.INSTableViewDelegate,AppKit.NSTableView,System.IntPtr,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::ShouldSelectRow(AppKit.INSTableViewDelegate,AppKit.NSTableView,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::ShouldSelectTableColumn(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSTableColumn)",
			"AppKit.NSTableViewDelegate_Extensions::ShouldShowCellExpansion(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::ShouldTrackCell(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSCell,AppKit.NSTableColumn,System.IntPtr)",
			"AppKit.NSTableViewDelegate_Extensions::ShouldTypeSelect(AppKit.INSTableViewDelegate,AppKit.NSTableView,AppKit.NSEvent,System.String)",
			"AppKit.NSTableViewDelegate_Extensions::WillDisplayCell(AppKit.INSTableViewDelegate,AppKit.NSTableView,Foundation.NSObject,AppKit.NSTableColumn,System.IntPtr)",
			"AppKit.NSTableViewDiffableDataSource`2::.ctor(AppKit.NSTableView,AppKit.NSTableViewDiffableDataSourceCellProvider)",
			"AppKit.NSTableViewDiffableDataSource`2::AcceptDrop(AppKit.NSTableView,AppKit.INSDraggingInfo,System.IntPtr,AppKit.NSTableViewDropOperation)",
			"AppKit.NSTableViewDiffableDataSource`2::ApplySnapshot(AppKit.NSDiffableDataSourceSnapshot`2<SectionIdentifierType,ItemIdentifierType>,System.Boolean)",
			"AppKit.NSTableViewDiffableDataSource`2::ApplySnapshot(AppKit.NSDiffableDataSourceSnapshot`2<SectionIdentifierType,ItemIdentifierType>,System.Boolean,System.Action)",
			"AppKit.NSTableViewDiffableDataSource`2::DraggingSessionEnded(AppKit.NSTableView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,AppKit.NSDragOperation)",
			"AppKit.NSTableViewDiffableDataSource`2::DraggingSessionWillBegin(AppKit.NSTableView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,Foundation.NSIndexSet)",
			"AppKit.NSTableViewDiffableDataSource`2::FilesDropped(AppKit.NSTableView,Foundation.NSUrl,Foundation.NSIndexSet)",
			"AppKit.NSTableViewDiffableDataSource`2::GetObjectValue(AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr)",
			"AppKit.NSTableViewDiffableDataSource`2::GetPasteboardWriterForRow(AppKit.NSTableView,System.IntPtr)",
			"AppKit.NSTableViewDiffableDataSource`2::GetRowCount(AppKit.NSTableView)",
			"AppKit.NSTableViewDiffableDataSource`2::GetRowForItemIdentifier(ItemIdentifierType)",
			"AppKit.NSTableViewDiffableDataSource`2::GetRowForSectionIdentifier(SectionIdentifierType)",
			"AppKit.NSTableViewDiffableDataSource`2::SetObjectValue(AppKit.NSTableView,Foundation.NSObject,AppKit.NSTableColumn,System.IntPtr)",
			"AppKit.NSTableViewDiffableDataSource`2::SortDescriptorsChanged(AppKit.NSTableView,Foundation.NSSortDescriptor[])",
			"AppKit.NSTableViewDiffableDataSource`2::UpdateDraggingItems(AppKit.NSTableView,AppKit.INSDraggingInfo)",
			"AppKit.NSTableViewDiffableDataSource`2::ValidateDrop(AppKit.NSTableView,AppKit.INSDraggingInfo,System.IntPtr,AppKit.NSTableViewDropOperation)",
			"AppKit.NSTableViewDiffableDataSource`2::WriteRows(AppKit.NSTableView,Foundation.NSIndexSet,AppKit.NSPasteboard)",
			"AppKit.NSTableViewRowAction::Copy(Foundation.NSZone)",
			"AppKit.NSTableViewRowAction::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSTableViewRowAction::set_Image(AppKit.NSImage)",
			"AppKit.NSTabView::.ctor(Foundation.NSCoder)",
			"AppKit.NSTabView::Add(AppKit.NSTabViewItem)",
			"AppKit.NSTabView::IndexOf(AppKit.NSTabViewItem)",
			"AppKit.NSTabView::IndexOf(Foundation.NSObject)",
			"AppKit.NSTabView::Insert(AppKit.NSTabViewItem,System.IntPtr)",
			"AppKit.NSTabView::Remove(AppKit.NSTabViewItem)",
			"AppKit.NSTabView::Select(AppKit.NSTabViewItem)",
			"AppKit.NSTabView::Select(Foundation.NSObject)",
			"AppKit.NSTabView::SelectFirst(Foundation.NSObject)",
			"AppKit.NSTabView::SelectLast(Foundation.NSObject)",
			"AppKit.NSTabView::SelectNext(Foundation.NSObject)",
			"AppKit.NSTabView::SelectPrevious(Foundation.NSObject)",
			"AppKit.NSTabView::set_Font(AppKit.NSFont)",
			"AppKit.NSTabView::TakeSelectedTabViewItemFrom(Foundation.NSObject)",
			"AppKit.NSTabViewController::.ctor(Foundation.NSCoder)",
			"AppKit.NSTabViewController::.ctor(System.String,Foundation.NSBundle)",
			"AppKit.NSTabViewController::AddTabViewItem(AppKit.NSTabViewItem)",
			"AppKit.NSTabViewController::AllowedItemIdentifiers(AppKit.NSToolbar)",
			"AppKit.NSTabViewController::DefaultItemIdentifiers(AppKit.NSToolbar)",
			"AppKit.NSTabViewController::DidRemoveItem(Foundation.NSNotification)",
			"AppKit.NSTabViewController::DidSelect(AppKit.NSTabView,AppKit.NSTabViewItem)",
			"AppKit.NSTabViewController::GetTabViewItem(AppKit.NSViewController)",
			"AppKit.NSTabViewController::InsertTabViewItem(AppKit.NSTabViewItem,System.IntPtr)",
			"AppKit.NSTabViewController::NumberOfItemsChanged(AppKit.NSTabView)",
			"AppKit.NSTabViewController::RemoveTabViewItem(AppKit.NSTabViewItem)",
			"AppKit.NSTabViewController::SelectableItemIdentifiers(AppKit.NSToolbar)",
			"AppKit.NSTabViewController::set_TabView(AppKit.NSTabView)",
			"AppKit.NSTabViewController::ShouldSelectTabViewItem(AppKit.NSTabView,AppKit.NSTabViewItem)",
			"AppKit.NSTabViewController::WillAddItem(Foundation.NSNotification)",
			"AppKit.NSTabViewController::WillInsertItem(AppKit.NSToolbar,System.String,System.Boolean)",
			"AppKit.NSTabViewController::WillSelect(AppKit.NSTabView,AppKit.NSTabViewItem)",
			"AppKit.NSTabViewDelegate_Extensions::DidSelect(AppKit.INSTabViewDelegate,AppKit.NSTabView,AppKit.NSTabViewItem)",
			"AppKit.NSTabViewDelegate_Extensions::NumberOfItemsChanged(AppKit.INSTabViewDelegate,AppKit.NSTabView)",
			"AppKit.NSTabViewDelegate_Extensions::ShouldSelectTabViewItem(AppKit.INSTabViewDelegate,AppKit.NSTabView,AppKit.NSTabViewItem)",
			"AppKit.NSTabViewDelegate_Extensions::WillSelect(AppKit.INSTabViewDelegate,AppKit.NSTabView,AppKit.NSTabViewItem)",
			"AppKit.NSTabViewItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSTabViewItem::.ctor(Foundation.NSObject)",
			"AppKit.NSTabViewItem::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTabViewItem::GetTabViewItem(AppKit.NSViewController)",
			"AppKit.NSTabViewItem::set_Color(AppKit.NSColor)",
			"AppKit.NSTabViewItem::set_Identifier(Foundation.NSObject)",
			"AppKit.NSTabViewItem::set_Image(AppKit.NSImage)",
			"AppKit.NSTabViewItem::set_InitialFirstResponder(Foundation.NSObject)",
			"AppKit.NSTabViewItem::set_View(AppKit.NSView)",
			"AppKit.NSTabViewItem::set_ViewController(AppKit.NSViewController)",
			"AppKit.NSText::.ctor(Foundation.NSCoder)",
			"AppKit.NSText::AlignCenter(Foundation.NSObject)",
			"AppKit.NSText::AlignLeft(Foundation.NSObject)",
			"AppKit.NSText::AlignRight(Foundation.NSObject)",
			"AppKit.NSText::ChangeFont(Foundation.NSObject)",
			"AppKit.NSText::CheckSpelling(Foundation.NSObject)",
			"AppKit.NSText::Copy(Foundation.NSObject)",
			"AppKit.NSText::CopyFont(Foundation.NSObject)",
			"AppKit.NSText::CopyRuler(Foundation.NSObject)",
			"AppKit.NSText::Cut(Foundation.NSObject)",
			"AppKit.NSText::Delete(Foundation.NSObject)",
			"AppKit.NSText::Paste(Foundation.NSObject)",
			"AppKit.NSText::PasteFont(Foundation.NSObject)",
			"AppKit.NSText::PasteRuler(Foundation.NSObject)",
			"AppKit.NSText::ReplaceWithRtf(Foundation.NSRange,Foundation.NSData)",
			"AppKit.NSText::ReplaceWithRtfd(Foundation.NSRange,Foundation.NSData)",
			"AppKit.NSText::SelectAll(Foundation.NSObject)",
			"AppKit.NSText::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSText::set_Font(AppKit.NSFont)",
			"AppKit.NSText::set_TextColor(AppKit.NSColor)",
			"AppKit.NSText::SetFont(AppKit.NSFont,Foundation.NSRange)",
			"AppKit.NSText::SetTextColor(AppKit.NSColor,Foundation.NSRange)",
			"AppKit.NSText::ShowGuessPanel(Foundation.NSObject)",
			"AppKit.NSText::Subscript(Foundation.NSObject)",
			"AppKit.NSText::Superscript(Foundation.NSObject)",
			"AppKit.NSText::ToggleRuler(Foundation.NSObject)",
			"AppKit.NSText::Underline(Foundation.NSObject)",
			"AppKit.NSText::Unscript(Foundation.NSObject)",
			"AppKit.NSTextAlternatives::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextAlternatives::.ctor(System.String,Foundation.NSArray)",
			"AppKit.NSTextAlternatives::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextAttachment::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextAttachment::.ctor(Foundation.NSData,System.String)",
			"AppKit.NSTextAttachment::.ctor(Foundation.NSFileWrapper)",
			"AppKit.NSTextAttachment::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextAttachment::GetAttachmentBounds(AppKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint,System.UIntPtr)",
			"AppKit.NSTextAttachment::GetAttachmentBounds(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,AppKit.INSTextLocation,AppKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint)",
			"AppKit.NSTextAttachment::GetImageForBounds(CoreGraphics.CGRect,AppKit.NSTextContainer,System.UIntPtr)",
			"AppKit.NSTextAttachment::GetImageForBounds(CoreGraphics.CGRect,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,AppKit.INSTextLocation,AppKit.NSTextContainer)",
			"AppKit.NSTextAttachment::GetViewProvider(AppKit.NSView,AppKit.INSTextLocation,AppKit.NSTextContainer)",
			"AppKit.NSTextAttachment::set_AttachmentCell(AppKit.NSTextAttachmentCell)",
			"AppKit.NSTextAttachment::set_Contents(Foundation.NSData)",
			"AppKit.NSTextAttachment::set_FileWrapper(Foundation.NSFileWrapper)",
			"AppKit.NSTextAttachment::set_Image(AppKit.NSImage)",
			"AppKit.NSTextAttachmentCell::.ctor(AppKit.NSImage)",
			"AppKit.NSTextAttachmentCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextAttachmentCell::CellFrameForTextContainer(AppKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint,System.UIntPtr)",
			"AppKit.NSTextAttachmentCell::DrawWithFrame(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSTextAttachmentCell::DrawWithFrame(CoreGraphics.CGRect,AppKit.NSView,System.UIntPtr)",
			"AppKit.NSTextAttachmentCell::DrawWithFrame(CoreGraphics.CGRect,AppKit.NSView,System.UIntPtr,AppKit.NSLayoutManager)",
			"AppKit.NSTextAttachmentCell::Highlight(System.Boolean,CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSTextAttachmentCell::set_Attachment(AppKit.NSTextAttachment)",
			"AppKit.NSTextAttachmentCell::TrackMouse(AppKit.NSEvent,CoreGraphics.CGRect,AppKit.NSView,System.Boolean)",
			"AppKit.NSTextAttachmentCell::TrackMouse(AppKit.NSEvent,CoreGraphics.CGRect,AppKit.NSView,System.UIntPtr,System.Boolean)",
			"AppKit.NSTextAttachmentCell::WantsToTrackMouse(AppKit.NSEvent,CoreGraphics.CGRect,AppKit.NSView,System.UIntPtr)",
			"AppKit.NSTextAttachmentCellProtocolWrapper::CellFrameForTextContainer(AppKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint,System.UIntPtr)",
			"AppKit.NSTextAttachmentCellProtocolWrapper::DrawWithFrame(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSTextAttachmentCellProtocolWrapper::DrawWithFrame(CoreGraphics.CGRect,AppKit.NSView,System.UIntPtr)",
			"AppKit.NSTextAttachmentCellProtocolWrapper::DrawWithFrame(CoreGraphics.CGRect,AppKit.NSView,System.UIntPtr,AppKit.NSLayoutManager)",
			"AppKit.NSTextAttachmentCellProtocolWrapper::Highlight(System.Boolean,CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSTextAttachmentCellProtocolWrapper::set_Attachment(AppKit.NSTextAttachment)",
			"AppKit.NSTextAttachmentCellProtocolWrapper::TrackMouse(AppKit.NSEvent,CoreGraphics.CGRect,AppKit.NSView,System.Boolean)",
			"AppKit.NSTextAttachmentCellProtocolWrapper::TrackMouse(AppKit.NSEvent,CoreGraphics.CGRect,AppKit.NSView,System.UIntPtr,System.Boolean)",
			"AppKit.NSTextAttachmentCellProtocolWrapper::WantsToTrackMouse(AppKit.NSEvent,CoreGraphics.CGRect,AppKit.NSView,System.UIntPtr)",
			"AppKit.NSTextAttachmentContainerWrapper::GetAttachmentBounds(AppKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint,System.UIntPtr)",
			"AppKit.NSTextAttachmentContainerWrapper::GetImageForBounds(CoreGraphics.CGRect,AppKit.NSTextContainer,System.UIntPtr)",
			"AppKit.NSTextAttachmentLayoutWrapper::GetAttachmentBounds(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,AppKit.INSTextLocation,AppKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint)",
			"AppKit.NSTextAttachmentLayoutWrapper::GetImageForBounds(CoreGraphics.CGRect,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,AppKit.INSTextLocation,AppKit.NSTextContainer)",
			"AppKit.NSTextAttachmentLayoutWrapper::GetViewProvider(AppKit.NSView,AppKit.INSTextLocation,AppKit.NSTextContainer)",
			"AppKit.NSTextAttachmentViewProvider::.ctor(AppKit.NSTextAttachment,AppKit.NSView,AppKit.NSTextLayoutManager,AppKit.INSTextLocation)",
			"AppKit.NSTextAttachmentViewProvider::GetAttachmentBounds(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,AppKit.INSTextLocation,AppKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint)",
			"AppKit.NSTextAttachmentViewProvider::set_View(AppKit.NSView)",
			"AppKit.NSTextBlock::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextBlock::Copy(Foundation.NSZone)",
			"AppKit.NSTextBlock::DrawBackground(CoreGraphics.CGRect,AppKit.NSView,Foundation.NSRange,AppKit.NSLayoutManager)",
			"AppKit.NSTextBlock::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextBlock::GetBoundsRect(CoreGraphics.CGRect,CoreGraphics.CGRect,AppKit.NSTextContainer,Foundation.NSRange)",
			"AppKit.NSTextBlock::GetRectForLayout(CoreGraphics.CGPoint,CoreGraphics.CGRect,AppKit.NSTextContainer,Foundation.NSRange)",
			"AppKit.NSTextBlock::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSTextBlock::SetBorderColor(AppKit.NSColor)",
			"AppKit.NSTextBlock::SetBorderColor(AppKit.NSColor,AppKit.NSRectEdge)",
			"AppKit.NSTextCheckingClientWrapper::AddAnnotations(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSString>,Foundation.NSRange)",
			"AppKit.NSTextCheckingClientWrapper::InsertText(Foundation.NSObject,Foundation.NSRange)",
			"AppKit.NSTextCheckingClientWrapper::ReplaceCharacters(Foundation.NSRange,Foundation.NSAttributedString)",
			"AppKit.NSTextCheckingClientWrapper::SetAnnotations(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSString>,Foundation.NSRange)",
			"AppKit.NSTextCheckingClientWrapper::SetMarkedText(Foundation.NSObject,Foundation.NSRange,Foundation.NSRange)",
			"AppKit.NSTextCheckingController::.ctor(AppKit.INSTextCheckingClient)",
			"AppKit.NSTextCheckingController::ChangeSpelling(Foundation.NSObject)",
			"AppKit.NSTextCheckingController::CheckSpelling(Foundation.NSObject)",
			"AppKit.NSTextCheckingController::CheckText(Foundation.NSRange,Foundation.NSTextCheckingTypes,Foundation.NSDictionary)",
			"AppKit.NSTextCheckingController::CheckTextInDocument(Foundation.NSObject)",
			"AppKit.NSTextCheckingController::CheckTextInSelection(Foundation.NSObject)",
			"AppKit.NSTextCheckingController::IgnoreSpelling(Foundation.NSObject)",
			"AppKit.NSTextCheckingController::OrderFrontSubstitutionsPanel(Foundation.NSObject)",
			"AppKit.NSTextCheckingController::ShowGuessPanel(Foundation.NSObject)",
			"AppKit.NSTextContainer::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextContainer::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextContainer::ReplaceLayoutManager(AppKit.NSLayoutManager)",
			"AppKit.NSTextContentManager::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextContentManager::Add(AppKit.NSTextLayoutManager)",
			"AppKit.NSTextContentManager::AdjustedRange(AppKit.NSTextRange,System.Boolean)",
			"AppKit.NSTextContentManager::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextContentManager::EnumerateTextElements(AppKit.INSTextLocation,AppKit.NSTextContentManagerEnumerationOptions,System.Func`2<AppKit.NSTextElement,System.Boolean>)",
			"AppKit.NSTextContentManager::GetLocation(AppKit.INSTextLocation,System.IntPtr)",
			"AppKit.NSTextContentManager::GetOffset(AppKit.INSTextLocation,AppKit.INSTextLocation)",
			"AppKit.NSTextContentManager::GetTextElements(AppKit.NSTextRange)",
			"AppKit.NSTextContentManager::RecordEditAction(AppKit.NSTextRange,AppKit.NSTextRange)",
			"AppKit.NSTextContentManager::Remove(AppKit.NSTextLayoutManager)",
			"AppKit.NSTextContentManager::ReplaceContents(AppKit.NSTextRange,AppKit.NSTextElement[])",
			"AppKit.NSTextContentManager::set_PrimaryTextLayoutManager(AppKit.NSTextLayoutManager)",
			"AppKit.NSTextContentManagerDelegate_Extensions::GetTextContentManager(AppKit.INSTextContentManagerDelegate,AppKit.NSTextContentManager,AppKit.INSTextLocation)",
			"AppKit.NSTextContentManagerDelegate_Extensions::ShouldEnumerateTextElement(AppKit.INSTextContentManagerDelegate,AppKit.NSTextContentManager,AppKit.NSTextElement,AppKit.NSTextContentManagerEnumerationOptions)",
			"AppKit.NSTextContentStorage::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextContentStorage::GetAdjustedRange(AppKit.NSTextRange,System.Boolean)",
			"AppKit.NSTextContentStorage::GetAttributedString(AppKit.NSTextElement)",
			"AppKit.NSTextContentStorage::GetLocation(AppKit.INSTextLocation,System.IntPtr)",
			"AppKit.NSTextContentStorage::GetOffset(AppKit.INSTextLocation,AppKit.INSTextLocation)",
			"AppKit.NSTextContentStorage::GetTextElement(Foundation.NSAttributedString)",
			"AppKit.NSTextContentStorage::PerformEditingTransaction(AppKit.NSTextStorage,System.Action)",
			"AppKit.NSTextContentStorage::ProcessEditing(AppKit.NSTextStorage,AppKit.NSTextStorageEditActions,Foundation.NSRange,System.IntPtr,Foundation.NSRange)",
			"AppKit.NSTextContentStorage::set_AttributedString(Foundation.NSAttributedString)",
			"AppKit.NSTextContentStorage::set_TextStorage(AppKit.NSTextStorage)",
			"AppKit.NSTextContentStorageDelegate_Extensions::GetTextParagraph(AppKit.INSTextContentStorageDelegate,AppKit.NSTextContentStorage,Foundation.NSRange)",
			"AppKit.NSTextContentWrapper::SetContentType(Foundation.NSString)",
			"AppKit.NSTextDelegate_Extensions::TextDidBeginEditing(AppKit.INSTextDelegate,Foundation.NSNotification)",
			"AppKit.NSTextDelegate_Extensions::TextDidChange(AppKit.INSTextDelegate,Foundation.NSNotification)",
			"AppKit.NSTextDelegate_Extensions::TextDidEndEditing(AppKit.INSTextDelegate,Foundation.NSNotification)",
			"AppKit.NSTextDelegate_Extensions::TextShouldBeginEditing(AppKit.INSTextDelegate,AppKit.NSText)",
			"AppKit.NSTextDelegate_Extensions::TextShouldEndEditing(AppKit.INSTextDelegate,AppKit.NSText)",
			"AppKit.NSTextElement::.ctor(AppKit.NSTextContentManager)",
			"AppKit.NSTextElement::set_ElementRange(AppKit.NSTextRange)",
			"AppKit.NSTextElementProvider_Extensions::AdjustedRange(AppKit.INSTextElementProvider,AppKit.NSTextRange,System.Boolean)",
			"AppKit.NSTextElementProvider_Extensions::GetLocation(AppKit.INSTextElementProvider,AppKit.INSTextLocation,System.IntPtr)",
			"AppKit.NSTextElementProvider_Extensions::GetOffset(AppKit.INSTextElementProvider,AppKit.INSTextLocation,AppKit.INSTextLocation)",
			"AppKit.NSTextElementProviderWrapper::EnumerateTextElements(AppKit.INSTextLocation,AppKit.NSTextContentManagerEnumerationOptions,System.Func`2<AppKit.NSTextElement,System.Boolean>)",
			"AppKit.NSTextElementProviderWrapper::ReplaceContents(AppKit.NSTextRange,AppKit.NSTextElement[])",
			"AppKit.NSTextField::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextField::CreateLabel(Foundation.NSAttributedString)",
			"AppKit.NSTextField::DidBeginEditing(Foundation.NSNotification)",
			"AppKit.NSTextField::DidChange(Foundation.NSNotification)",
			"AppKit.NSTextField::DidEndEditing(Foundation.NSNotification)",
			"AppKit.NSTextField::SelectText(Foundation.NSObject)",
			"AppKit.NSTextField::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSTextField::set_PlaceholderAttributedString(Foundation.NSAttributedString)",
			"AppKit.NSTextField::set_TextColor(AppKit.NSColor)",
			"AppKit.NSTextField::SetContentType(Foundation.NSString)",
			"AppKit.NSTextField::ShouldBeginEditing(AppKit.NSText)",
			"AppKit.NSTextField::ShouldEndEditing(AppKit.NSText)",
			"AppKit.NSTextField::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"AppKit.NSTextField_NSTouchBar::GetAllowsCharacterPickerTouchBarItem(AppKit.NSTextField)",
			"AppKit.NSTextField_NSTouchBar::GetAutomaticTextCompletionEnabled(AppKit.NSTextField)",
			"AppKit.NSTextField_NSTouchBar::SetAllowsCharacterPickerTouchBarItem(AppKit.NSTextField,System.Boolean)",
			"AppKit.NSTextField_NSTouchBar::SetAutomaticTextCompletionEnabled(AppKit.NSTextField,System.Boolean)",
			"AppKit.NSTextFieldCell::.ctor(AppKit.NSImage)",
			"AppKit.NSTextFieldCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextFieldCell::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSTextFieldCell::set_PlaceholderAttributedString(Foundation.NSAttributedString)",
			"AppKit.NSTextFieldCell::set_TextColor(AppKit.NSColor)",
			"AppKit.NSTextFieldCell::SetUpFieldEditorAttributes(AppKit.NSText)",
			"AppKit.NSTextFieldDelegate_Extensions::Changed(AppKit.INSTextFieldDelegate,Foundation.NSNotification)",
			"AppKit.NSTextFieldDelegate_Extensions::DidFailToFormatString(AppKit.INSTextFieldDelegate,AppKit.NSControl,System.String,System.String)",
			"AppKit.NSTextFieldDelegate_Extensions::DidFailToValidatePartialString(AppKit.INSTextFieldDelegate,AppKit.NSControl,System.String,System.String)",
			"AppKit.NSTextFieldDelegate_Extensions::DoCommandBySelector(AppKit.INSTextFieldDelegate,AppKit.NSControl,AppKit.NSTextView,ObjCRuntime.Selector)",
			"AppKit.NSTextFieldDelegate_Extensions::EditingBegan(AppKit.INSTextFieldDelegate,Foundation.NSNotification)",
			"AppKit.NSTextFieldDelegate_Extensions::EditingEnded(AppKit.INSTextFieldDelegate,Foundation.NSNotification)",
			"AppKit.NSTextFieldDelegate_Extensions::GetCandidates(AppKit.INSTextFieldDelegate,AppKit.NSTextField,AppKit.NSTextView,Foundation.NSRange)",
			"AppKit.NSTextFieldDelegate_Extensions::GetCompletions(AppKit.INSTextFieldDelegate,AppKit.NSControl,AppKit.NSTextView,System.String[],Foundation.NSRange,System.IntPtr&)",
			"AppKit.NSTextFieldDelegate_Extensions::GetTextCheckingResults(AppKit.INSTextFieldDelegate,AppKit.NSTextField,AppKit.NSTextView,Foundation.NSTextCheckingResult[],Foundation.NSRange)",
			"AppKit.NSTextFieldDelegate_Extensions::IsValidObject(AppKit.INSTextFieldDelegate,AppKit.NSControl,Foundation.NSObject)",
			"AppKit.NSTextFieldDelegate_Extensions::ShouldSelectCandidate(AppKit.INSTextFieldDelegate,AppKit.NSTextField,AppKit.NSTextView,System.UIntPtr)",
			"AppKit.NSTextFieldDelegate_Extensions::TextShouldBeginEditing(AppKit.INSTextFieldDelegate,AppKit.NSControl,AppKit.NSText)",
			"AppKit.NSTextFieldDelegate_Extensions::TextShouldEndEditing(AppKit.INSTextFieldDelegate,AppKit.NSControl,AppKit.NSText)",
			"AppKit.NSTextFinder::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextFinder::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextFinderBarContainer_Extensions::GetContentView(AppKit.INSTextFinderBarContainer)",
			"AppKit.NSTextFinderBarContainerWrapper::set_FindBarView(AppKit.NSView)",
			"AppKit.NSTextFinderClient_Extensions::DidReplaceCharacters(AppKit.INSTextFinderClient)",
			"AppKit.NSTextFinderClient_Extensions::DrawCharacters(AppKit.INSTextFinderClient,Foundation.NSRange,AppKit.NSView)",
			"AppKit.NSTextFinderClient_Extensions::GetAllowsMultipleSelection(AppKit.INSTextFinderClient)",
			"AppKit.NSTextFinderClient_Extensions::GetContentView(AppKit.INSTextFinderClient,System.UIntPtr,Foundation.NSRange&)",
			"AppKit.NSTextFinderClient_Extensions::GetEditable(AppKit.INSTextFinderClient)",
			"AppKit.NSTextFinderClient_Extensions::GetFirstSelectedRange(AppKit.INSTextFinderClient)",
			"AppKit.NSTextFinderClient_Extensions::GetRects(AppKit.INSTextFinderClient,Foundation.NSRange)",
			"AppKit.NSTextFinderClient_Extensions::GetSelectable(AppKit.INSTextFinderClient)",
			"AppKit.NSTextFinderClient_Extensions::GetSelectedRanges(AppKit.INSTextFinderClient)",
			"AppKit.NSTextFinderClient_Extensions::GetString(AppKit.INSTextFinderClient)",
			"AppKit.NSTextFinderClient_Extensions::GetString(AppKit.INSTextFinderClient,System.UIntPtr,Foundation.NSRange&,System.Boolean)",
			"AppKit.NSTextFinderClient_Extensions::GetStringLength(AppKit.INSTextFinderClient)",
			"AppKit.NSTextFinderClient_Extensions::GetVisibleCharacterRanges(AppKit.INSTextFinderClient)",
			"AppKit.NSTextFinderClient_Extensions::ReplaceCharacters(AppKit.INSTextFinderClient,Foundation.NSRange,System.String)",
			"AppKit.NSTextFinderClient_Extensions::ScrollRangeToVisible(AppKit.INSTextFinderClient,Foundation.NSRange)",
			"AppKit.NSTextFinderClient_Extensions::SetSelectedRanges(AppKit.INSTextFinderClient,Foundation.NSArray)",
			"AppKit.NSTextFinderClient_Extensions::ShouldReplaceCharacters(AppKit.INSTextFinderClient,Foundation.NSArray,Foundation.NSArray)",
			"AppKit.NSTextFinderSupport::PerformTextFinderAction(AppKit.NSResponder,Foundation.NSObject)",
			"AppKit.NSTextInputClient_Extensions::DrawsVertically(AppKit.INSTextInputClient,System.UIntPtr)",
			"AppKit.NSTextInputClient_Extensions::GetAttributedString(AppKit.INSTextInputClient)",
			"AppKit.NSTextInputClient_Extensions::GetBaselineDelta(AppKit.INSTextInputClient,System.UIntPtr)",
			"AppKit.NSTextInputClient_Extensions::GetFractionOfDistanceThroughGlyph(AppKit.INSTextInputClient,CoreGraphics.CGPoint)",
			"AppKit.NSTextInputClient_Extensions::GetWindowLevel(AppKit.INSTextInputClient)",
			"AppKit.NSTextInputClientWrapper::InsertText(Foundation.NSObject,Foundation.NSRange)",
			"AppKit.NSTextInputClientWrapper::SetMarkedText(Foundation.NSObject,Foundation.NSRange,Foundation.NSRange)",
			"AppKit.NSTextInputContext::.ctor(AppKit.INSTextInputClient)",
			"AppKit.NSTextInputContext::HandleEvent(AppKit.NSEvent)",
			"AppKit.NSTextInputTraits_Extensions::GetAutocorrectionType(AppKit.INSTextInputTraits)",
			"AppKit.NSTextInputTraits_Extensions::GetDataDetectionType(AppKit.INSTextInputTraits)",
			"AppKit.NSTextInputTraits_Extensions::GetGrammarCheckingType(AppKit.INSTextInputTraits)",
			"AppKit.NSTextInputTraits_Extensions::GetLinkDetectionType(AppKit.INSTextInputTraits)",
			"AppKit.NSTextInputTraits_Extensions::GetSmartDashesType(AppKit.INSTextInputTraits)",
			"AppKit.NSTextInputTraits_Extensions::GetSmartInsertDeleteType(AppKit.INSTextInputTraits)",
			"AppKit.NSTextInputTraits_Extensions::GetSmartQuotesType(AppKit.INSTextInputTraits)",
			"AppKit.NSTextInputTraits_Extensions::GetSpellCheckingType(AppKit.INSTextInputTraits)",
			"AppKit.NSTextInputTraits_Extensions::GetTextCompletionType(AppKit.INSTextInputTraits)",
			"AppKit.NSTextInputTraits_Extensions::GetTextReplacementType(AppKit.INSTextInputTraits)",
			"AppKit.NSTextInputTraits_Extensions::SetAutocorrectionType(AppKit.INSTextInputTraits,AppKit.NSTextInputTraitType)",
			"AppKit.NSTextInputTraits_Extensions::SetDataDetectionType(AppKit.INSTextInputTraits,AppKit.NSTextInputTraitType)",
			"AppKit.NSTextInputTraits_Extensions::SetGrammarCheckingType(AppKit.INSTextInputTraits,AppKit.NSTextInputTraitType)",
			"AppKit.NSTextInputTraits_Extensions::SetLinkDetectionType(AppKit.INSTextInputTraits,AppKit.NSTextInputTraitType)",
			"AppKit.NSTextInputTraits_Extensions::SetSmartDashesType(AppKit.INSTextInputTraits,AppKit.NSTextInputTraitType)",
			"AppKit.NSTextInputTraits_Extensions::SetSmartInsertDeleteType(AppKit.INSTextInputTraits,AppKit.NSTextInputTraitType)",
			"AppKit.NSTextInputTraits_Extensions::SetSmartQuotesType(AppKit.INSTextInputTraits,AppKit.NSTextInputTraitType)",
			"AppKit.NSTextInputTraits_Extensions::SetSpellCheckingType(AppKit.INSTextInputTraits,AppKit.NSTextInputTraitType)",
			"AppKit.NSTextInputTraits_Extensions::SetTextCompletionType(AppKit.INSTextInputTraits,AppKit.NSTextInputTraitType)",
			"AppKit.NSTextInputTraits_Extensions::SetTextReplacementType(AppKit.INSTextInputTraits,AppKit.NSTextInputTraitType)",
			"AppKit.NSTextInputWrapper::InsertText(Foundation.NSObject)",
			"AppKit.NSTextInputWrapper::SetMarkedText(Foundation.NSObject,Foundation.NSRange)",
			"AppKit.NSTextLayoutFragment::.ctor(AppKit.NSTextElement,AppKit.NSTextRange)",
			"AppKit.NSTextLayoutFragment::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextLayoutFragment::Draw(CoreGraphics.CGPoint,CoreGraphics.CGContext)",
			"AppKit.NSTextLayoutFragment::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextLayoutFragment::GetFrameForTextAttachment(AppKit.INSTextLocation)",
			"AppKit.NSTextLayoutFragment::set_LayoutQueue(Foundation.NSOperationQueue)",
			"AppKit.NSTextLayoutManager::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextLayoutManager::AddRenderingAttribute(System.String,Foundation.NSObject,AppKit.NSTextRange)",
			"AppKit.NSTextLayoutManager::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextLayoutManager::EnsureLayout(AppKit.NSTextRange)",
			"AppKit.NSTextLayoutManager::EnumerateCaretOffsets(AppKit.INSTextLocation,AppKit.NSTextSelectionDataSourceEnumerateCaretOffsetsDelegate)",
			"AppKit.NSTextLayoutManager::EnumerateContainerBoundaries(AppKit.INSTextLocation,System.Boolean,AppKit.NSTextSelectionDataSourceEnumerateContainerBoundariesDelegate)",
			"AppKit.NSTextLayoutManager::EnumerateRenderingAttributes(AppKit.INSTextLocation,System.Boolean,AppKit.NSTextLayoutManagerEnumerateRenderingAttributesDelegate)",
			"AppKit.NSTextLayoutManager::EnumerateSubstrings(AppKit.INSTextLocation,Foundation.NSStringEnumerationOptions,AppKit.NSTextSelectionDataSourceEnumerateSubstringsDelegate)",
			"AppKit.NSTextLayoutManager::EnumerateTextLayoutFragments(AppKit.INSTextLocation,AppKit.NSTextLayoutFragmentEnumerationOptions,System.Func`2<AppKit.NSTextLayoutFragment,System.Boolean>)",
			"AppKit.NSTextLayoutManager::EnumerateTextSegments(AppKit.NSTextRange,AppKit.NSTextLayoutManagerSegmentType,AppKit.NSTextLayoutManagerSegmentOptions,AppKit.NSTextLayoutManagerEnumerateTextSegmentsDelegate)",
			"AppKit.NSTextLayoutManager::GetBaseWritingDirection(AppKit.INSTextLocation)",
			"AppKit.NSTextLayoutManager::GetLineFragmentRange(CoreGraphics.CGPoint,AppKit.INSTextLocation)",
			"AppKit.NSTextLayoutManager::GetLocation(AppKit.INSTextLocation,System.IntPtr)",
			"AppKit.NSTextLayoutManager::GetOffsetFromLocation(AppKit.INSTextLocation,AppKit.INSTextLocation)",
			"AppKit.NSTextLayoutManager::GetRenderingAttributes(Foundation.NSObject,AppKit.INSTextLocation)",
			"AppKit.NSTextLayoutManager::GetTextLayoutFragment(AppKit.INSTextLocation)",
			"AppKit.NSTextLayoutManager::GetTextLayoutOrientation(AppKit.INSTextLocation)",
			"AppKit.NSTextLayoutManager::GetTextRange(AppKit.NSTextSelectionGranularity,AppKit.INSTextLocation)",
			"AppKit.NSTextLayoutManager::InvalidateLayout(AppKit.NSTextRange)",
			"AppKit.NSTextLayoutManager::InvalidateRenderingAttributes(AppKit.NSTextRange)",
			"AppKit.NSTextLayoutManager::RemoveRenderingAttribute(System.String,AppKit.NSTextRange)",
			"AppKit.NSTextLayoutManager::Replace(AppKit.NSTextContentManager)",
			"AppKit.NSTextLayoutManager::ReplaceContents(AppKit.NSTextRange,AppKit.NSTextElement[])",
			"AppKit.NSTextLayoutManager::ReplaceContents(AppKit.NSTextRange,Foundation.NSAttributedString)",
			"AppKit.NSTextLayoutManager::set_LayoutQueue(Foundation.NSOperationQueue)",
			"AppKit.NSTextLayoutManager::set_TextContainer(AppKit.NSTextContainer)",
			"AppKit.NSTextLayoutManager::set_TextSelectionNavigation(AppKit.NSTextSelectionNavigation)",
			"AppKit.NSTextLayoutManager::SetRenderingAttributes(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,AppKit.NSTextRange)",
			"AppKit.NSTextLayoutManagerDelegate_Extensions::GetRenderingAttributes(AppKit.INSTextLayoutManagerDelegate,AppKit.NSTextLayoutManager,Foundation.NSObject,AppKit.INSTextLocation,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AppKit.NSTextLayoutManagerDelegate_Extensions::GetTextLayoutFragment(AppKit.INSTextLayoutManagerDelegate,AppKit.NSTextLayoutManager,AppKit.INSTextLocation,AppKit.NSTextElement)",
			"AppKit.NSTextLayoutManagerDelegate_Extensions::ShouldBreakLineBeforeLocation(AppKit.INSTextLayoutManagerDelegate,AppKit.NSTextLayoutManager,AppKit.INSTextLocation,System.Boolean)",
			"AppKit.NSTextLineFragment::.ctor(Foundation.NSAttributedString,Foundation.NSRange)",
			"AppKit.NSTextLineFragment::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextLineFragment::.ctor(System.String,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSRange)",
			"AppKit.NSTextLineFragment::Draw(CoreGraphics.CGPoint,CoreGraphics.CGContext)",
			"AppKit.NSTextLineFragment::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextList::.ctor(AppKit.NSTextListMarkerFormats,AppKit.NSTextListOptions)",
			"AppKit.NSTextList::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextList::Copy(Foundation.NSZone)",
			"AppKit.NSTextList::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextLocationWrapper::Compare(AppKit.INSTextLocation)",
			"AppKit.NSTextParagraph::.ctor(AppKit.NSTextContentManager)",
			"AppKit.NSTextParagraph::.ctor(Foundation.NSAttributedString)",
			"AppKit.NSTextRange::.ctor(AppKit.INSTextLocation)",
			"AppKit.NSTextRange::.ctor(AppKit.INSTextLocation,AppKit.INSTextLocation)",
			"AppKit.NSTextRange::Contains(AppKit.INSTextLocation)",
			"AppKit.NSTextRange::Contains(AppKit.NSTextRange)",
			"AppKit.NSTextRange::GetTextRangeByFormingUnion(AppKit.NSTextRange)",
			"AppKit.NSTextRange::GetTextRangeByIntersecting(AppKit.NSTextRange)",
			"AppKit.NSTextRange::Intersects(AppKit.NSTextRange)",
			"AppKit.NSTextRange::IsEqual(AppKit.NSTextRange)",
			"AppKit.NSTextSelection::.ctor(AppKit.INSTextLocation,AppKit.NSTextSelectionAffinity)",
			"AppKit.NSTextSelection::.ctor(AppKit.NSTextRange,AppKit.NSTextSelectionAffinity,AppKit.NSTextSelectionGranularity)",
			"AppKit.NSTextSelection::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextSelection::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextSelection::set_SecondarySelectionLocation(AppKit.INSTextLocation)",
			"AppKit.NSTextSelection::set_TypingAttributes(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AppKit.NSTextSelectionDataSource_Extensions::EnumerateContainerBoundaries(AppKit.INSTextSelectionDataSource,AppKit.INSTextLocation,System.Boolean,AppKit.NSTextSelectionDataSourceEnumerateContainerBoundariesDelegate)",
			"AppKit.NSTextSelectionDataSource_Extensions::GetTextLayoutOrientation(AppKit.INSTextSelectionDataSource,AppKit.INSTextLocation)",
			"AppKit.NSTextSelectionDataSourceWrapper::EnumerateCaretOffsets(AppKit.INSTextLocation,AppKit.NSTextSelectionDataSourceEnumerateCaretOffsetsDelegate)",
			"AppKit.NSTextSelectionDataSourceWrapper::EnumerateSubstrings(AppKit.INSTextLocation,Foundation.NSStringEnumerationOptions,AppKit.NSTextSelectionDataSourceEnumerateSubstringsDelegate)",
			"AppKit.NSTextSelectionDataSourceWrapper::GetBaseWritingDirection(AppKit.INSTextLocation)",
			"AppKit.NSTextSelectionDataSourceWrapper::GetLineFragmentRange(CoreGraphics.CGPoint,AppKit.INSTextLocation)",
			"AppKit.NSTextSelectionDataSourceWrapper::GetLocation(AppKit.INSTextLocation,System.IntPtr)",
			"AppKit.NSTextSelectionDataSourceWrapper::GetOffsetFromLocation(AppKit.INSTextLocation,AppKit.INSTextLocation)",
			"AppKit.NSTextSelectionDataSourceWrapper::GetTextRange(AppKit.NSTextSelectionGranularity,AppKit.INSTextLocation)",
			"AppKit.NSTextSelectionNavigation::.ctor(AppKit.INSTextSelectionDataSource)",
			"AppKit.NSTextSelectionNavigation::GetDeletionRanges(AppKit.NSTextSelection,AppKit.NSTextSelectionNavigationDirection,AppKit.NSTextSelectionNavigationDestination,System.Boolean)",
			"AppKit.NSTextSelectionNavigation::GetDestinationSelection(AppKit.NSTextSelection,AppKit.NSTextSelectionNavigationDirection,AppKit.NSTextSelectionNavigationDestination,System.Boolean,System.Boolean)",
			"AppKit.NSTextSelectionNavigation::GetResolvedInsertionLocation(AppKit.NSTextSelection,AppKit.NSTextSelectionNavigationWritingDirection)",
			"AppKit.NSTextSelectionNavigation::GetTextSelection(AppKit.NSTextSelectionGranularity,AppKit.NSTextSelection)",
			"AppKit.NSTextSelectionNavigation::GetTextSelection(AppKit.NSTextSelectionGranularity,CoreGraphics.CGPoint,AppKit.INSTextLocation)",
			"AppKit.NSTextSelectionNavigation::GetTextSelectionsInteracting(CoreGraphics.CGPoint,AppKit.INSTextLocation,AppKit.NSTextSelection[],AppKit.NSTextSelectionNavigationModifier,System.Boolean,CoreGraphics.CGRect)",
			"AppKit.NSTextStorage::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextStorage::AddLayoutManager(AppKit.NSLayoutManager)",
			"AppKit.NSTextStorage::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextStorage::RemoveLayoutManager(AppKit.NSLayoutManager)",
			"AppKit.NSTextStorageDelegate_Extensions::DidProcessEditing(AppKit.INSTextStorageDelegate,AppKit.NSTextStorage,AppKit.NSTextStorageEditActions,Foundation.NSRange,System.IntPtr)",
			"AppKit.NSTextStorageDelegate_Extensions::TextStorageDidProcessEditing(AppKit.INSTextStorageDelegate,Foundation.NSNotification)",
			"AppKit.NSTextStorageDelegate_Extensions::TextStorageWillProcessEditing(AppKit.INSTextStorageDelegate,Foundation.NSNotification)",
			"AppKit.NSTextStorageDelegate_Extensions::WillProcessEditing(AppKit.INSTextStorageDelegate,AppKit.NSTextStorage,AppKit.NSTextStorageEditActions,Foundation.NSRange,System.IntPtr)",
			"AppKit.NSTextStorageObservingWrapper::PerformEditingTransaction(AppKit.NSTextStorage,System.Action)",
			"AppKit.NSTextStorageObservingWrapper::ProcessEditing(AppKit.NSTextStorage,AppKit.NSTextStorageEditActions,Foundation.NSRange,System.IntPtr,Foundation.NSRange)",
			"AppKit.NSTextStorageObservingWrapper::set_TextStorage(AppKit.NSTextStorage)",
			"AppKit.NSTextTab::.ctor(AppKit.NSTextAlignment,System.Runtime.InteropServices.NFloat,Foundation.NSDictionary)",
			"AppKit.NSTextTab::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextTab::Copy(Foundation.NSZone)",
			"AppKit.NSTextTab::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTextTab::GetColumnTerminators(Foundation.NSLocale)",
			"AppKit.NSTextTable::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextTable::DrawBackground(AppKit.NSTextTableBlock,CoreGraphics.CGRect,AppKit.NSView,Foundation.NSRange,AppKit.NSLayoutManager)",
			"AppKit.NSTextTable::GetBoundsRect(AppKit.NSTextTableBlock,CoreGraphics.CGRect,CoreGraphics.CGRect,AppKit.NSTextContainer,Foundation.NSRange)",
			"AppKit.NSTextTable::GetRectForBlock(AppKit.NSTextTableBlock,CoreGraphics.CGPoint,CoreGraphics.CGRect,AppKit.NSTextContainer,Foundation.NSRange)",
			"AppKit.NSTextTableBlock::.ctor(AppKit.NSTextTable,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)",
			"AppKit.NSTextTableBlock::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextView::.ctor(CoreGraphics.CGRect,AppKit.NSTextContainer)",
			"AppKit.NSTextView::.ctor(Foundation.NSCoder)",
			"AppKit.NSTextView::AlignJustified(Foundation.NSObject)",
			"AppKit.NSTextView::BeginSelectingCandidate(AppKit.NSCandidateListTouchBarItem,System.IntPtr)",
			"AppKit.NSTextView::ChangeAttributes(Foundation.NSObject)",
			"AppKit.NSTextView::ChangeColor(AppKit.NSColorPanel)",
			"AppKit.NSTextView::ChangedCandidateListVisibility(AppKit.NSCandidateListTouchBarItem,System.Boolean)",
			"AppKit.NSTextView::ChangeDocumentBackgroundColor(Foundation.NSObject)",
			"AppKit.NSTextView::ChangeLayoutOrientation(Foundation.NSObject)",
			"AppKit.NSTextView::ChangeSelectionFromCandidate(AppKit.NSCandidateListTouchBarItem,System.IntPtr,System.IntPtr)",
			"AppKit.NSTextView::CheckText(Foundation.NSRange,Foundation.NSTextCheckingTypes,Foundation.NSDictionary)",
			"AppKit.NSTextView::CheckTextInDocument(Foundation.NSObject)",
			"AppKit.NSTextView::CheckTextInSelection(Foundation.NSObject)",
			"AppKit.NSTextView::ClickedOnLink(Foundation.NSObject,System.UIntPtr)",
			"AppKit.NSTextView::Complete(Foundation.NSObject)",
			"AppKit.NSTextView::DraggedImageBeganAt(AppKit.NSImage,CoreGraphics.CGPoint)",
			"AppKit.NSTextView::DraggedImageEndedAtDeposited(AppKit.NSImage,CoreGraphics.CGPoint,System.Boolean)",
			"AppKit.NSTextView::DraggedImageEndedAtOperation(AppKit.NSImage,CoreGraphics.CGPoint,AppKit.NSDragOperation)",
			"AppKit.NSTextView::DraggedImageMovedTo(AppKit.NSImage,CoreGraphics.CGPoint)",
			"AppKit.NSTextView::DragOperationForDraggingInfo(AppKit.INSDraggingInfo,System.String)",
			"AppKit.NSTextView::DrawInsertionPoint(CoreGraphics.CGRect,AppKit.NSColor,System.Boolean)",
			"AppKit.NSTextView::EndSelectingCandidate(AppKit.NSCandidateListTouchBarItem,System.IntPtr)",
			"AppKit.NSTextView::HandleTextChecking(Foundation.NSTextCheckingResult[],Foundation.NSRange,Foundation.NSTextCheckingTypes,Foundation.NSDictionary,Foundation.NSOrthography,System.IntPtr)",
			"AppKit.NSTextView::InsertText(Foundation.NSObject)",
			"AppKit.NSTextView::InsertText(Foundation.NSObject,Foundation.NSRange)",
			"AppKit.NSTextView::LoosenKerning(Foundation.NSObject)",
			"AppKit.NSTextView::LowerBaseline(Foundation.NSObject)",
			"AppKit.NSTextView::MakeItem(AppKit.NSTouchBar,System.String)",
			"AppKit.NSTextView::NamesOfPromisedFilesDroppedAtDestination(Foundation.NSUrl)",
			"AppKit.NSTextView::OrderFrontLinkPanel(Foundation.NSObject)",
			"AppKit.NSTextView::OrderFrontListPanel(Foundation.NSObject)",
			"AppKit.NSTextView::OrderFrontSpacingPanel(Foundation.NSObject)",
			"AppKit.NSTextView::OrderFrontSubstitutionsPanel(Foundation.NSObject)",
			"AppKit.NSTextView::OrderFrontTablePanel(Foundation.NSObject)",
			"AppKit.NSTextView::Outline(Foundation.NSObject)",
			"AppKit.NSTextView::PasteAsPlainText(Foundation.NSObject)",
			"AppKit.NSTextView::PasteAsRichText(Foundation.NSObject)",
			"AppKit.NSTextView::PerformFindPanelAction(Foundation.NSObject)",
			"AppKit.NSTextView::PerformValidatedReplacement(Foundation.NSRange,Foundation.NSAttributedString)",
			"AppKit.NSTextView::QuickLookPreviewableItemsInRanges(Foundation.NSArray)",
			"AppKit.NSTextView::RaiseBaseline(Foundation.NSObject)",
			"AppKit.NSTextView::ReadSelectionFromPasteboard(AppKit.NSPasteboard)",
			"AppKit.NSTextView::ReadSelectionFromPasteboard(AppKit.NSPasteboard,System.String)",
			"AppKit.NSTextView::ReplaceTextContainer(AppKit.NSTextContainer)",
			"AppKit.NSTextView::RulerViewDidAddMarker(AppKit.NSRulerView,AppKit.NSRulerMarker)",
			"AppKit.NSTextView::RulerViewDidMoveMarker(AppKit.NSRulerView,AppKit.NSRulerMarker)",
			"AppKit.NSTextView::RulerViewDidRemoveMarker(AppKit.NSRulerView,AppKit.NSRulerMarker)",
			"AppKit.NSTextView::RulerViewHandleMouseDown(AppKit.NSRulerView,AppKit.NSEvent)",
			"AppKit.NSTextView::RulerViewShouldAddMarker(AppKit.NSRulerView,AppKit.NSRulerMarker)",
			"AppKit.NSTextView::RulerViewShouldMoveMarker(AppKit.NSRulerView,AppKit.NSRulerMarker)",
			"AppKit.NSTextView::RulerViewShouldRemoveMarker(AppKit.NSRulerView,AppKit.NSRulerMarker)",
			"AppKit.NSTextView::RulerViewWillAddMarker(AppKit.NSRulerView,AppKit.NSRulerMarker,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSTextView::RulerViewWillMoveMarker(AppKit.NSRulerView,AppKit.NSRulerMarker,System.Runtime.InteropServices.NFloat)",
			"AppKit.NSTextView::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSTextView::set_DefaultParagraphStyle(AppKit.NSParagraphStyle)",
			"AppKit.NSTextView::set_InsertionPointColor(AppKit.NSColor)",
			"AppKit.NSTextView::set_LinkTextAttributes(Foundation.NSDictionary)",
			"AppKit.NSTextView::set_MarkedTextAttributes(Foundation.NSDictionary)",
			"AppKit.NSTextView::set_SelectedRanges(Foundation.NSArray)",
			"AppKit.NSTextView::set_SelectedTextAttributes(Foundation.NSDictionary)",
			"AppKit.NSTextView::set_TextContainer(AppKit.NSTextContainer)",
			"AppKit.NSTextView::set_TypingAttributes(Foundation.NSDictionary)",
			"AppKit.NSTextView::SetContentType(Foundation.NSString)",
			"AppKit.NSTextView::SetMarkedText(Foundation.NSObject,Foundation.NSRange)",
			"AppKit.NSTextView::SetMarkedText(Foundation.NSObject,Foundation.NSRange,Foundation.NSRange)",
			"AppKit.NSTextView::SetSelectedRanges(Foundation.NSArray,AppKit.NSSelectionAffinity,System.Boolean)",
			"AppKit.NSTextView::ShouldChangeText(Foundation.NSArray,System.String[])",
			"AppKit.NSTextView::StartSpeaking(Foundation.NSObject)",
			"AppKit.NSTextView::StopSpeaking(Foundation.NSObject)",
			"AppKit.NSTextView::TightenKerning(Foundation.NSObject)",
			"AppKit.NSTextView::ToggleAutomaticDashSubstitution(Foundation.NSObject)",
			"AppKit.NSTextView::ToggleAutomaticDataDetection(Foundation.NSObject)",
			"AppKit.NSTextView::ToggleAutomaticLinkDetection(Foundation.NSObject)",
			"AppKit.NSTextView::ToggleAutomaticQuoteSubstitution(Foundation.NSObject)",
			"AppKit.NSTextView::ToggleAutomaticSpellingCorrection(Foundation.NSObject)",
			"AppKit.NSTextView::ToggleAutomaticTextCompletion(Foundation.NSObject)",
			"AppKit.NSTextView::ToggleAutomaticTextReplacement(Foundation.NSObject)",
			"AppKit.NSTextView::ToggleContinuousSpellChecking(Foundation.NSObject)",
			"AppKit.NSTextView::ToggleGrammarChecking(Foundation.NSObject)",
			"AppKit.NSTextView::ToggleQuickLookPreviewPanel(Foundation.NSObject)",
			"AppKit.NSTextView::ToggleSmartInsertDelete(Foundation.NSObject)",
			"AppKit.NSTextView::ToggleTraditionalCharacterShape(Foundation.NSObject)",
			"AppKit.NSTextView::TurnOffKerning(Foundation.NSObject)",
			"AppKit.NSTextView::TurnOffLigatures(Foundation.NSObject)",
			"AppKit.NSTextView::UseAllLigatures(Foundation.NSObject)",
			"AppKit.NSTextView::UseStandardKerning(Foundation.NSObject)",
			"AppKit.NSTextView::UseStandardLigatures(Foundation.NSObject)",
			"AppKit.NSTextView::ValidateMenuItem(AppKit.NSMenuItem)",
			"AppKit.NSTextView::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"AppKit.NSTextView::WriteSelectionToPasteboard(AppKit.NSPasteboard,System.String)",
			"AppKit.NSTextView::WriteSelectionToPasteboard(AppKit.NSPasteboard,System.String[])",
			"AppKit.NSTextView_SharingService::OrderFrontSharingServicePicker(AppKit.NSTextView,Foundation.NSObject)",
			"AppKit.NSTextViewDelegate_Extensions::CellClicked(AppKit.INSTextViewDelegate,AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,System.UIntPtr)",
			"AppKit.NSTextViewDelegate_Extensions::CellDoubleClicked(AppKit.INSTextViewDelegate,AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,System.UIntPtr)",
			"AppKit.NSTextViewDelegate_Extensions::DidChangeSelection(AppKit.INSTextViewDelegate,Foundation.NSNotification)",
			"AppKit.NSTextViewDelegate_Extensions::DidChangeTypingAttributes(AppKit.INSTextViewDelegate,Foundation.NSNotification)",
			"AppKit.NSTextViewDelegate_Extensions::DidCheckText(AppKit.INSTextViewDelegate,AppKit.NSTextView,Foundation.NSRange,Foundation.NSTextCheckingTypes,Foundation.NSDictionary,Foundation.NSTextCheckingResult[],Foundation.NSOrthography,System.IntPtr)",
			"AppKit.NSTextViewDelegate_Extensions::DoCommandBySelector(AppKit.INSTextViewDelegate,AppKit.NSTextView,ObjCRuntime.Selector)",
			"AppKit.NSTextViewDelegate_Extensions::DraggedCell(AppKit.INSTextViewDelegate,AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,AppKit.NSEvent,System.UIntPtr)",
			"AppKit.NSTextViewDelegate_Extensions::GetCandidates(AppKit.INSTextViewDelegate,AppKit.NSTextView,Foundation.NSRange)",
			"AppKit.NSTextViewDelegate_Extensions::GetCompletions(AppKit.INSTextViewDelegate,AppKit.NSTextView,System.String[],Foundation.NSRange,System.IntPtr&)",
			"AppKit.NSTextViewDelegate_Extensions::GetTextCheckingCandidates(AppKit.INSTextViewDelegate,AppKit.NSTextView,Foundation.NSTextCheckingResult[],Foundation.NSRange)",
			"AppKit.NSTextViewDelegate_Extensions::GetUndoManager(AppKit.INSTextViewDelegate,AppKit.NSTextView)",
			"AppKit.NSTextViewDelegate_Extensions::GetWritablePasteboardTypes(AppKit.INSTextViewDelegate,AppKit.NSTextView,AppKit.NSTextAttachmentCell,System.UIntPtr)",
			"AppKit.NSTextViewDelegate_Extensions::LinkClicked(AppKit.INSTextViewDelegate,AppKit.NSTextView,Foundation.NSObject,System.UIntPtr)",
			"AppKit.NSTextViewDelegate_Extensions::MenuForEvent(AppKit.INSTextViewDelegate,AppKit.NSTextView,AppKit.NSMenu,AppKit.NSEvent,System.UIntPtr)",
			"AppKit.NSTextViewDelegate_Extensions::ShouldChangeTextInRange(AppKit.INSTextViewDelegate,AppKit.NSTextView,Foundation.NSRange,System.String)",
			"AppKit.NSTextViewDelegate_Extensions::ShouldChangeTextInRanges(AppKit.INSTextViewDelegate,AppKit.NSTextView,Foundation.NSValue[],System.String[])",
			"AppKit.NSTextViewDelegate_Extensions::ShouldChangeTypingAttributes(AppKit.INSTextViewDelegate,AppKit.NSTextView,Foundation.NSDictionary,Foundation.NSDictionary)",
			"AppKit.NSTextViewDelegate_Extensions::ShouldSelectCandidates(AppKit.INSTextViewDelegate,AppKit.NSTextView,System.UIntPtr)",
			"AppKit.NSTextViewDelegate_Extensions::ShouldSetSpellingState(AppKit.INSTextViewDelegate,AppKit.NSTextView,System.IntPtr,Foundation.NSRange)",
			"AppKit.NSTextViewDelegate_Extensions::ShouldUpdateTouchBarItemIdentifiers(AppKit.INSTextViewDelegate,AppKit.NSTextView,System.String[])",
			"AppKit.NSTextViewDelegate_Extensions::WillChangeSelection(AppKit.INSTextViewDelegate,AppKit.NSTextView,Foundation.NSRange,Foundation.NSRange)",
			"AppKit.NSTextViewDelegate_Extensions::WillChangeSelectionFromRanges(AppKit.INSTextViewDelegate,AppKit.NSTextView,Foundation.NSValue[],Foundation.NSValue[])",
			"AppKit.NSTextViewDelegate_Extensions::WillCheckText(AppKit.INSTextViewDelegate,AppKit.NSTextView,Foundation.NSRange,Foundation.NSDictionary,Foundation.NSTextCheckingTypes)",
			"AppKit.NSTextViewDelegate_Extensions::WillDisplayToolTip(AppKit.INSTextViewDelegate,AppKit.NSTextView,System.String,System.UIntPtr)",
			"AppKit.NSTextViewDelegate_Extensions::WriteCell(AppKit.INSTextViewDelegate,AppKit.NSTextView,AppKit.NSTextAttachmentCell,System.UIntPtr,AppKit.NSPasteboard,System.String)",
			"AppKit.NSTextViewportLayoutController::.ctor(AppKit.NSTextLayoutManager)",
			"AppKit.NSTextViewportLayoutController::RelocateViewport(AppKit.INSTextLocation)",
			"AppKit.NSTextViewportLayoutControllerDelegate_Extensions::DidLayout(AppKit.INSTextViewportLayoutControllerDelegate,AppKit.NSTextViewportLayoutController)",
			"AppKit.NSTextViewportLayoutControllerDelegate_Extensions::WillLayout(AppKit.INSTextViewportLayoutControllerDelegate,AppKit.NSTextViewportLayoutController)",
			"AppKit.NSTextViewportLayoutControllerDelegateWrapper::ConfigureRenderingSurface(AppKit.NSTextViewportLayoutController,AppKit.NSTextLayoutFragment)",
			"AppKit.NSTextViewportLayoutControllerDelegateWrapper::GetViewportBounds(AppKit.NSTextViewportLayoutController)",
			"AppKit.NSTintConfiguration::.ctor(Foundation.NSCoder)",
			"AppKit.NSTintConfiguration::Copy(Foundation.NSZone)",
			"AppKit.NSTintConfiguration::CreateWithFixedColor(AppKit.NSColor)",
			"AppKit.NSTintConfiguration::CreateWithPreferredColor(AppKit.NSColor)",
			"AppKit.NSTintConfiguration::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTitlebarAccessoryViewController::.ctor(Foundation.NSCoder)",
			"AppKit.NSTitlebarAccessoryViewController::.ctor(System.String,Foundation.NSBundle)",
			"AppKit.NSTitlebarAccessoryViewController::AnimationDidEnd(AppKit.NSAnimation)",
			"AppKit.NSTitlebarAccessoryViewController::AnimationDidReachProgressMark(AppKit.NSAnimation,System.Single)",
			"AppKit.NSTitlebarAccessoryViewController::AnimationDidStop(AppKit.NSAnimation)",
			"AppKit.NSTitlebarAccessoryViewController::AnimationFor(Foundation.NSString)",
			"AppKit.NSTitlebarAccessoryViewController::AnimationShouldStart(AppKit.NSAnimation)",
			"AppKit.NSTitlebarAccessoryViewController::ComputeAnimationCurve(AppKit.NSAnimation,System.Single)",
			"AppKit.NSTitlebarAccessoryViewController::DefaultAnimationFor(Foundation.NSString)",
			"AppKit.NSTitlebarAccessoryViewController::set_Animations(Foundation.NSDictionary)",
			"AppKit.NSTokenField::.ctor(Foundation.NSCoder)",
			"AppKit.NSTokenField::set_CharacterSet(Foundation.NSCharacterSet)",
			"AppKit.NSTokenFieldCell::.ctor(Foundation.NSCoder)",
			"AppKit.NSTokenFieldCell::set_CharacterSet(Foundation.NSCharacterSet)",
			"AppKit.NSTokenFieldCellDelegate_Extensions::GetCompletionStrings(AppKit.INSTokenFieldCellDelegate,AppKit.NSTokenFieldCell,System.String,System.IntPtr,System.IntPtr&)",
			"AppKit.NSTokenFieldCellDelegate_Extensions::GetDisplayString(AppKit.INSTokenFieldCellDelegate,AppKit.NSTokenFieldCell,Foundation.NSObject)",
			"AppKit.NSTokenFieldCellDelegate_Extensions::GetEditingString(AppKit.INSTokenFieldCellDelegate,AppKit.NSTokenFieldCell,Foundation.NSObject)",
			"AppKit.NSTokenFieldCellDelegate_Extensions::GetMenu(AppKit.INSTokenFieldCellDelegate,AppKit.NSTokenFieldCell,Foundation.NSObject)",
			"AppKit.NSTokenFieldCellDelegate_Extensions::GetRepresentedObject(AppKit.INSTokenFieldCellDelegate,AppKit.NSTokenFieldCell,System.String)",
			"AppKit.NSTokenFieldCellDelegate_Extensions::GetStyle(AppKit.INSTokenFieldCellDelegate,AppKit.NSTokenFieldCell,Foundation.NSObject)",
			"AppKit.NSTokenFieldCellDelegate_Extensions::HasMenu(AppKit.INSTokenFieldCellDelegate,AppKit.NSTokenFieldCell,Foundation.NSObject)",
			"AppKit.NSTokenFieldCellDelegate_Extensions::Read(AppKit.INSTokenFieldCellDelegate,AppKit.NSTokenFieldCell,AppKit.NSPasteboard)",
			"AppKit.NSTokenFieldCellDelegate_Extensions::ShouldAddObjects(AppKit.INSTokenFieldCellDelegate,AppKit.NSTokenFieldCell,Foundation.NSObject[],System.UIntPtr)",
			"AppKit.NSTokenFieldCellDelegate_Extensions::WriteRepresentedObjects(AppKit.INSTokenFieldCellDelegate,AppKit.NSTokenFieldCell,Foundation.NSObject[],AppKit.NSPasteboard)",
			"AppKit.NSTokenFieldDelegate_Extensions::GetCompletionStrings(AppKit.INSTokenFieldDelegate,AppKit.NSTokenField,System.String,System.IntPtr,System.IntPtr)",
			"AppKit.NSTokenFieldDelegate_Extensions::GetDisplayString(AppKit.INSTokenFieldDelegate,AppKit.NSTokenField,Foundation.NSObject)",
			"AppKit.NSTokenFieldDelegate_Extensions::GetEditingString(AppKit.INSTokenFieldDelegate,AppKit.NSTokenField,Foundation.NSObject)",
			"AppKit.NSTokenFieldDelegate_Extensions::GetMenu(AppKit.INSTokenFieldDelegate,AppKit.NSTokenField,Foundation.NSObject)",
			"AppKit.NSTokenFieldDelegate_Extensions::GetRepresentedObject(AppKit.INSTokenFieldDelegate,AppKit.NSTokenField,System.String)",
			"AppKit.NSTokenFieldDelegate_Extensions::GetStyle(AppKit.INSTokenFieldDelegate,AppKit.NSTokenField,Foundation.NSObject)",
			"AppKit.NSTokenFieldDelegate_Extensions::HasMenu(AppKit.INSTokenFieldDelegate,AppKit.NSTokenField,Foundation.NSObject)",
			"AppKit.NSTokenFieldDelegate_Extensions::Read(AppKit.INSTokenFieldDelegate,AppKit.NSTokenField,AppKit.NSPasteboard)",
			"AppKit.NSTokenFieldDelegate_Extensions::ShouldAddObjects(AppKit.INSTokenFieldDelegate,AppKit.NSTokenField,Foundation.NSArray,System.UIntPtr)",
			"AppKit.NSTokenFieldDelegate_Extensions::WriteRepresented(AppKit.INSTokenFieldDelegate,AppKit.NSTokenField,Foundation.NSArray,AppKit.NSPasteboard)",
			"AppKit.NSToolbar::RunCustomizationPalette(Foundation.NSObject)",
			"AppKit.NSToolbar::SetConfigurationFromDictionary(Foundation.NSDictionary)",
			"AppKit.NSToolbarDelegate_Extensions::AllowedItemIdentifiers(AppKit.INSToolbarDelegate,AppKit.NSToolbar)",
			"AppKit.NSToolbarDelegate_Extensions::DefaultItemIdentifiers(AppKit.INSToolbarDelegate,AppKit.NSToolbar)",
			"AppKit.NSToolbarDelegate_Extensions::DidRemoveItem(AppKit.INSToolbarDelegate,Foundation.NSNotification)",
			"AppKit.NSToolbarDelegate_Extensions::SelectableItemIdentifiers(AppKit.INSToolbarDelegate,AppKit.NSToolbar)",
			"AppKit.NSToolbarDelegate_Extensions::WillAddItem(AppKit.INSToolbarDelegate,Foundation.NSNotification)",
			"AppKit.NSToolbarDelegate_Extensions::WillInsertItem(AppKit.INSToolbarDelegate,AppKit.NSToolbar,System.String,System.Boolean)",
			"AppKit.NSToolbarItem::Copy(Foundation.NSZone)",
			"AppKit.NSToolbarItem::set_Action(ObjCRuntime.Selector)",
			"AppKit.NSToolbarItem::set_Image(AppKit.NSImage)",
			"AppKit.NSToolbarItem::set_ItemMenuFormRepresentation(UIKit.UIMenuElement)",
			"AppKit.NSToolbarItem::set_MenuFormRepresentation(AppKit.NSMenuItem)",
			"AppKit.NSToolbarItem::set_UIImage(UIKit.UIImage)",
			"AppKit.NSToolbarItem::set_View(AppKit.NSView)",
			"AppKit.NSToolbarItem::ValidateMenuItem(AppKit.NSMenuItem)",
			"AppKit.NSToolbarItemGroup::Create(System.String,AppKit.NSImage[],AppKit.NSToolbarItemGroupSelectionMode,System.String[],Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSToolbarItemGroup::Create(System.String,System.String[],AppKit.NSToolbarItemGroupSelectionMode,System.String[],Foundation.NSObject,ObjCRuntime.Selector)",
			"AppKit.NSToolbarItemValidationWrapper::ValidateToolbarItem(AppKit.NSToolbarItem)",
			"AppKit.NSToolTipOwnerWrapper::GetStringForToolTip(AppKit.NSView,System.IntPtr,CoreGraphics.CGPoint,System.IntPtr)",
			"AppKit.NSTouch::Copy(Foundation.NSZone)",
			"AppKit.NSTouch_NSTouchBar::GetLocation(AppKit.NSTouch,AppKit.NSView)",
			"AppKit.NSTouch_NSTouchBar::GetPreviousLocation(AppKit.NSTouch,AppKit.NSView)",
			"AppKit.NSTouch_NSTouchBar::GetTouchType(AppKit.NSTouch)",
			"AppKit.NSTouchBar::.ctor(Foundation.NSCoder)",
			"AppKit.NSTouchBar::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTouchBar::set_TemplateItems(Foundation.NSSet`1<AppKit.NSTouchBarItem>)",
			"AppKit.NSTouchBarDelegate_Extensions::MakeItem(AppKit.INSTouchBarDelegate,AppKit.NSTouchBar,System.String)",
			"AppKit.NSTouchBarItem::.ctor(Foundation.NSCoder)",
			"AppKit.NSTouchBarItem::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTrackingArea::.ctor(CoreGraphics.CGRect,AppKit.NSTrackingAreaOptions,Foundation.NSObject,Foundation.NSDictionary)",
			"AppKit.NSTrackingArea::.ctor(Foundation.NSCoder)",
			"AppKit.NSTrackingArea::Copy(Foundation.NSZone)",
			"AppKit.NSTrackingArea::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSTrackingSeparatorToolbarItem::GetTrackingSeparatorToolbar(System.String,AppKit.NSSplitView,System.IntPtr)",
			"AppKit.NSTrackingSeparatorToolbarItem::set_SplitView(AppKit.NSSplitView)",
			"AppKit.NSTreeController::.ctor(Foundation.NSCoder)",
			"AppKit.NSTreeController::Add(Foundation.NSObject)",
			"AppKit.NSTreeController::AddChild(Foundation.NSObject)",
			"AppKit.NSTreeController::ChildrenKeyPathForNode(AppKit.NSTreeNode)",
			"AppKit.NSTreeController::CountKeyPathForNode(AppKit.NSTreeNode)",
			"AppKit.NSTreeController::Insert(Foundation.NSObject)",
			"AppKit.NSTreeController::InsertChild(Foundation.NSObject)",
			"AppKit.NSTreeController::InsertObject(Foundation.NSObject,Foundation.NSIndexPath)",
			"AppKit.NSTreeController::InsertObjects(Foundation.NSObject[],Foundation.NSArray)",
			"AppKit.NSTreeController::LeafKeyPathForNode(AppKit.NSTreeNode)",
			"AppKit.NSTreeController::MoveNode(AppKit.NSTreeNode,Foundation.NSIndexPath)",
			"AppKit.NSTreeController::MoveNodes(AppKit.NSTreeNode[],Foundation.NSIndexPath)",
			"AppKit.NSTreeController::Remove(Foundation.NSObject)",
			"AppKit.NSTreeController::RemoveObjectAtArrangedObjectIndexPath(Foundation.NSIndexPath)",
			"AppKit.NSTreeController::set_Content(Foundation.NSObject)",
			"AppKit.NSTreeController::SetSelectionIndexPath(Foundation.NSIndexPath)",
			"AppKit.NSTreeNode::.ctor(Foundation.NSObject)",
			"AppKit.NSTreeNode::DescendantNode(Foundation.NSIndexPath)",
			"AppKit.NSTreeNode::FromRepresentedObject(Foundation.NSObject)",
			"AppKit.NSTypesetter::GetBaselineOffset(AppKit.NSLayoutManager,System.UIntPtr)",
			"AppKit.NSTypesetter::GetBoundingBoxForControlGlyph(System.UIntPtr,AppKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint,System.UIntPtr)",
			"AppKit.NSTypesetter::GetInterGlyphSpacing(AppKit.NSLayoutManager,Foundation.NSRange,System.IntPtr,System.UIntPtr)",
			"AppKit.NSTypesetter::GetSubstituteFont(AppKit.NSFont)",
			"AppKit.NSTypesetter::LayoutCharacters(Foundation.NSRange,AppKit.NSLayoutManager,System.UIntPtr)",
			"AppKit.NSTypesetter::LayoutGlyphs(AppKit.NSLayoutManager,System.UIntPtr,System.UIntPtr,System.UIntPtr&)",
			"AppKit.NSTypesetter::set_AttributedString(Foundation.NSAttributedString)",
			"AppKit.NSUserActivityRestoringWrapper::RestoreUserActivityState(Foundation.NSUserActivity)",
			"AppKit.NSUserDefaultsController::.ctor(Foundation.NSCoder)",
			"AppKit.NSUserDefaultsController::.ctor(Foundation.NSUserDefaults,Foundation.NSDictionary)",
			"AppKit.NSUserDefaultsController::Revert(Foundation.NSObject)",
			"AppKit.NSUserDefaultsController::RevertToInitialValues(Foundation.NSObject)",
			"AppKit.NSUserDefaultsController::Save(Foundation.NSObject)",
			"AppKit.NSUserDefaultsController::set_InitialValues(Foundation.NSDictionary)",
			"AppKit.NSUserInterfaceCompressionOptions::.ctor(Foundation.NSCoder)",
			"AppKit.NSUserInterfaceCompressionOptions::.ctor(Foundation.NSSet`1<AppKit.NSUserInterfaceCompressionOptions>)",
			"AppKit.NSUserInterfaceCompressionOptions::Contains(AppKit.NSUserInterfaceCompressionOptions)",
			"AppKit.NSUserInterfaceCompressionOptions::Copy(Foundation.NSZone)",
			"AppKit.NSUserInterfaceCompressionOptions::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSUserInterfaceCompressionOptions::GetOptionsByAdding(AppKit.NSUserInterfaceCompressionOptions)",
			"AppKit.NSUserInterfaceCompressionOptions::GetOptionsByRemoving(AppKit.NSUserInterfaceCompressionOptions)",
			"AppKit.NSUserInterfaceCompressionOptions::Intersects(AppKit.NSUserInterfaceCompressionOptions)",
			"AppKit.NSUserInterfaceValidationsWrapper::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"AppKit.NSView::.ctor(Foundation.NSCoder)",
			"AppKit.NSView::AcceptsFirstMouse(AppKit.NSEvent)",
			"AppKit.NSView::AccessibilityPerformAction(Foundation.NSString)",
			"AppKit.NSView::AddConstraint(AppKit.NSLayoutConstraint)",
			"AppKit.NSView::AddCursorRect(CoreGraphics.CGRect,AppKit.NSCursor)",
			"AppKit.NSView::AddGestureRecognizer(AppKit.NSGestureRecognizer)",
			"AppKit.NSView::AddLayoutGuide(AppKit.NSLayoutGuide)",
			"AppKit.NSView::AddSubview(AppKit.NSView)",
			"AppKit.NSView::AddSubview(AppKit.NSView,AppKit.NSWindowOrderingMode,AppKit.NSView)",
			"AppKit.NSView::AddToolTip(CoreGraphics.CGRect,AppKit.INSToolTipOwner,System.IntPtr)",
			"AppKit.NSView::AddToolTip(CoreGraphics.CGRect,Foundation.NSObject,System.IntPtr)",
			"AppKit.NSView::AddTrackingArea(AppKit.NSTrackingArea)",
			"AppKit.NSView::AddTrackingRect(CoreGraphics.CGRect,Foundation.NSObject,System.IntPtr,System.Boolean)",
			"AppKit.NSView::AncestorSharedWithView(AppKit.NSView)",
			"AppKit.NSView::AnimationFor(Foundation.NSString)",
			"AppKit.NSView::Autoscroll(AppKit.NSEvent)",
			"AppKit.NSView::BeginDraggingSession(AppKit.NSDraggingItem[],AppKit.NSEvent,AppKit.INSDraggingSource)",
			"AppKit.NSView::CacheDisplay(CoreGraphics.CGRect,AppKit.NSBitmapImageRep)",
			"AppKit.NSView::ConcludeDragOperation(AppKit.INSDraggingInfo)",
			"AppKit.NSView::ConvertPointFromView(CoreGraphics.CGPoint,AppKit.NSView)",
			"AppKit.NSView::ConvertPointToView(CoreGraphics.CGPoint,AppKit.NSView)",
			"AppKit.NSView::ConvertRectFromView(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSView::ConvertRectToView(CoreGraphics.CGRect,AppKit.NSView)",
			"AppKit.NSView::ConvertSizeFromView(CoreGraphics.CGSize,AppKit.NSView)",
			"AppKit.NSView::ConvertSizeToView(CoreGraphics.CGSize,AppKit.NSView)",
			"AppKit.NSView::DefaultAnimationFor(Foundation.NSString)",
			"AppKit.NSView::DidAddSubview(AppKit.NSView)",
			"AppKit.NSView::DidCloseMenu(AppKit.NSMenu,AppKit.NSEvent)",
			"AppKit.NSView::DisplayRectIgnoringOpacity(CoreGraphics.CGRect,AppKit.NSGraphicsContext)",
			"AppKit.NSView::DragFile(System.String,CoreGraphics.CGRect,System.Boolean,AppKit.NSEvent)",
			"AppKit.NSView::DraggingEnded(AppKit.INSDraggingInfo)",
			"AppKit.NSView::DraggingEntered(AppKit.INSDraggingInfo)",
			"AppKit.NSView::DraggingExited(AppKit.INSDraggingInfo)",
			"AppKit.NSView::DraggingUpdated(AppKit.INSDraggingInfo)",
			"AppKit.NSView::DragImage(AppKit.NSImage,CoreGraphics.CGPoint,CoreGraphics.CGSize,AppKit.NSEvent,AppKit.NSPasteboard,Foundation.NSObject,System.Boolean)",
			"AppKit.NSView::DragPromisedFilesOfTypes(System.String[],CoreGraphics.CGRect,Foundation.NSObject,System.Boolean,AppKit.NSEvent)",
			"AppKit.NSView::EnterFullscreenModeWithOptions(AppKit.NSScreen,Foundation.NSDictionary)",
			"AppKit.NSView::ExitFullscreenModeWithOptions(Foundation.NSDictionary)",
			"AppKit.NSView::GetAccessibilityActionDescription(Foundation.NSString)",
			"AppKit.NSView::GetAccessibilityArrayAttributeCount(Foundation.NSString)",
			"AppKit.NSView::GetAccessibilityArrayAttributeValues(Foundation.NSString,System.UIntPtr,System.UIntPtr)",
			"AppKit.NSView::GetAccessibilityIndexOfChild(Foundation.NSObject)",
			"AppKit.NSView::GetAccessibilityValue(Foundation.NSString)",
			"AppKit.NSView::GetAccessibilityValue(Foundation.NSString,Foundation.NSObject)",
			"AppKit.NSView::IsAccessibilityAttributeSettable(Foundation.NSString)",
			"AppKit.NSView::IsDescendantOf(AppKit.NSView)",
			"AppKit.NSView::LockFocusIfCanDrawInContext(AppKit.NSGraphicsContext)",
			"AppKit.NSView::MenuForEvent(AppKit.NSEvent)",
			"AppKit.NSView::PerformDragOperation(AppKit.INSDraggingInfo)",
			"AppKit.NSView::PerformKeyEquivalent(AppKit.NSEvent)",
			"AppKit.NSView::PrepareForDragOperation(AppKit.INSDraggingInfo)",
			"AppKit.NSView::Print(Foundation.NSObject)",
			"AppKit.NSView::RemoveConstraint(AppKit.NSLayoutConstraint)",
			"AppKit.NSView::RemoveCursorRect(CoreGraphics.CGRect,AppKit.NSCursor)",
			"AppKit.NSView::RemoveGestureRecognizer(AppKit.NSGestureRecognizer)",
			"AppKit.NSView::RemoveLayoutGuide(AppKit.NSLayoutGuide)",
			"AppKit.NSView::RemoveTrackingArea(AppKit.NSTrackingArea)",
			"AppKit.NSView::ReplaceSubviewWith(AppKit.NSView,AppKit.NSView)",
			"AppKit.NSView::set_AccessibilityApplicationFocusedUIElement(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityCancelButton(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityClearButton(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityCloseButton(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityCriticalValue(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityDecrementButton(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityDefaultButton(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityDisclosedRows(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityFocusedWindow(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityFullScreenButton(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityGrowArea(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityHeader(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityHorizontalScrollBar(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityIncrementButton(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityMainWindow(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityMarkerGroupUIElement(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityMarkerValues(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityMaxValue(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityMinimizeButton(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityMinValue(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityOverflowButton(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityProxy(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilitySearchButton(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilitySearchMenu(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityShownMenu(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityToolbarButton(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityUrl(Foundation.NSUrl)",
			"AppKit.NSView::set_AccessibilityValue(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityVerticalScrollBar(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityWarningValue(Foundation.NSObject)",
			"AppKit.NSView::set_AccessibilityZoomButton(Foundation.NSObject)",
			"AppKit.NSView::set_Animations(Foundation.NSDictionary)",
			"AppKit.NSView::set_Appearance(AppKit.NSAppearance)",
			"AppKit.NSView::set_CompositingFilter(CoreImage.CIFilter)",
			"AppKit.NSView::set_Layer(CoreAnimation.CALayer)",
			"AppKit.NSView::set_NextKeyView(AppKit.NSView)",
			"AppKit.NSView::set_PressureConfiguration(AppKit.NSPressureConfiguration)",
			"AppKit.NSView::set_Shadow(AppKit.NSShadow)",
			"AppKit.NSView::SetAccessibilityValue(Foundation.NSString,Foundation.NSObject)",
			"AppKit.NSView::ShouldDelayWindowOrderingForEvent(AppKit.NSEvent)",
			"AppKit.NSView::ViewWillMoveToSuperview(AppKit.NSView)",
			"AppKit.NSView::ViewWillMoveToWindow(AppKit.NSWindow)",
			"AppKit.NSView::WillOpenMenu(AppKit.NSMenu,AppKit.NSEvent)",
			"AppKit.NSView::WillRemoveSubview(AppKit.NSView)",
			"AppKit.NSView::WriteEpsInsideRect(CoreGraphics.CGRect,AppKit.NSPasteboard)",
			"AppKit.NSView::WritePdfInsideRect(CoreGraphics.CGRect,AppKit.NSPasteboard)",
			"AppKit.NSView_NSCandidateListTouchBarItem::GetCandidateListTouchBarItem(AppKit.NSView)",
			"AppKit.NSView_NSTouchBar::GetAllowedTouchTypes(AppKit.NSView)",
			"AppKit.NSView_NSTouchBar::SetAllowedTouchTypes(AppKit.NSView,AppKit.NSTouchTypeMask)",
			"AppKit.NSViewAnimation::.ctor(Foundation.NSCoder)",
			"AppKit.NSViewAnimation::set_Animations(Foundation.NSDictionary)",
			"AppKit.NSViewController::.ctor(Foundation.NSCoder)",
			"AppKit.NSViewController::.ctor(System.String,Foundation.NSBundle)",
			"AppKit.NSViewController::AddChildViewController(AppKit.NSViewController)",
			"AppKit.NSViewController::BeginGestureWithEvent(AppKit.NSEvent)",
			"AppKit.NSViewController::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"AppKit.NSViewController::ChangeMode(AppKit.NSEvent)",
			"AppKit.NSViewController::CommitEditing(Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSViewController::CursorUpdate(AppKit.NSEvent)",
			"AppKit.NSViewController::DismissController(Foundation.NSObject)",
			"AppKit.NSViewController::DismissViewController(AppKit.NSViewController)",
			"AppKit.NSViewController::EncodeRestorableState(Foundation.NSCoder)",
			"AppKit.NSViewController::EncodeRestorableState(Foundation.NSCoder,Foundation.NSOperationQueue)",
			"AppKit.NSViewController::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSViewController::EndGestureWithEvent(AppKit.NSEvent)",
			"AppKit.NSViewController::FlagsChanged(AppKit.NSEvent)",
			"AppKit.NSViewController::GetNewWindowForTab(Foundation.NSObject)",
			"AppKit.NSViewController::HelpRequested(AppKit.NSEvent)",
			"AppKit.NSViewController::InsertChildViewController(AppKit.NSViewController,System.IntPtr)",
			"AppKit.NSViewController::KeyDown(AppKit.NSEvent)",
			"AppKit.NSViewController::KeyUp(AppKit.NSEvent)",
			"AppKit.NSViewController::MagnifyWithEvent(AppKit.NSEvent)",
			"AppKit.NSViewController::MouseDown(AppKit.NSEvent)",
			"AppKit.NSViewController::MouseDragged(AppKit.NSEvent)",
			"AppKit.NSViewController::MouseEntered(AppKit.NSEvent)",
			"AppKit.NSViewController::MouseExited(AppKit.NSEvent)",
			"AppKit.NSViewController::MouseMoved(AppKit.NSEvent)",
			"AppKit.NSViewController::MouseUp(AppKit.NSEvent)",
			"AppKit.NSViewController::OtherMouseDown(AppKit.NSEvent)",
			"AppKit.NSViewController::OtherMouseDragged(AppKit.NSEvent)",
			"AppKit.NSViewController::OtherMouseUp(AppKit.NSEvent)",
			"AppKit.NSViewController::PerformKeyEquivalent(AppKit.NSEvent)",
			"AppKit.NSViewController::PerformSegue(System.String,Foundation.NSObject)",
			"AppKit.NSViewController::PreferredContentSizeDidChange(AppKit.NSViewController)",
			"AppKit.NSViewController::PrepareForSegue(AppKit.NSStoryboardSegue,Foundation.NSObject)",
			"AppKit.NSViewController::PresentError(Foundation.NSError)",
			"AppKit.NSViewController::PresentError(Foundation.NSError,AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"AppKit.NSViewController::PresentViewController(AppKit.NSViewController,AppKit.INSViewControllerPresentationAnimator)",
			"AppKit.NSViewController::PresentViewController(AppKit.NSViewController,CoreGraphics.CGRect,AppKit.NSView,System.UIntPtr,AppKit.NSPopoverBehavior)",
			"AppKit.NSViewController::PresentViewControllerAsModalWindow(AppKit.NSViewController)",
			"AppKit.NSViewController::PresentViewControllerAsSheet(AppKit.NSViewController)",
			"AppKit.NSViewController::PresentViewControllerInWidget(AppKit.NSViewController)",
			"AppKit.NSViewController::PressureChange(AppKit.NSEvent)",
			"AppKit.NSViewController::QuickLook(AppKit.NSEvent)",
			"AppKit.NSViewController::RestoreState(Foundation.NSCoder)",
			"AppKit.NSViewController::RestoreUserActivityState(Foundation.NSUserActivity)",
			"AppKit.NSViewController::RightMouseDown(AppKit.NSEvent)",
			"AppKit.NSViewController::RightMouseDragged(AppKit.NSEvent)",
			"AppKit.NSViewController::RightMouseUp(AppKit.NSEvent)",
			"AppKit.NSViewController::RotateWithEvent(AppKit.NSEvent)",
			"AppKit.NSViewController::ScrollWheel(AppKit.NSEvent)",
			"AppKit.NSViewController::set_Menu(AppKit.NSMenu)",
			"AppKit.NSViewController::set_NextResponder(AppKit.NSResponder)",
			"AppKit.NSViewController::set_RepresentedObject(Foundation.NSObject)",
			"AppKit.NSViewController::set_SourceItemView(AppKit.NSView)",
			"AppKit.NSViewController::set_UserActivity(Foundation.NSUserActivity)",
			"AppKit.NSViewController::set_View(AppKit.NSView)",
			"AppKit.NSViewController::ShouldBeTreatedAsInkEvent(AppKit.NSEvent)",
			"AppKit.NSViewController::ShouldPerformSegue(System.String,Foundation.NSObject)",
			"AppKit.NSViewController::ShowContextHelp(Foundation.NSObject)",
			"AppKit.NSViewController::SmartMagnify(AppKit.NSEvent)",
			"AppKit.NSViewController::SupplementalTargetForAction(ObjCRuntime.Selector,Foundation.NSObject)",
			"AppKit.NSViewController::SwipeWithEvent(AppKit.NSEvent)",
			"AppKit.NSViewController::TabletPoint(AppKit.NSEvent)",
			"AppKit.NSViewController::TabletProximity(AppKit.NSEvent)",
			"AppKit.NSViewController::TouchesBeganWithEvent(AppKit.NSEvent)",
			"AppKit.NSViewController::TouchesCancelledWithEvent(AppKit.NSEvent)",
			"AppKit.NSViewController::TouchesEndedWithEvent(AppKit.NSEvent)",
			"AppKit.NSViewController::TouchesMovedWithEvent(AppKit.NSEvent)",
			"AppKit.NSViewController::TransitionFromViewController(AppKit.NSViewController,AppKit.NSViewController,AppKit.NSViewControllerTransitionOptions,System.Action)",
			"AppKit.NSViewController::TryToPerformwith(ObjCRuntime.Selector,Foundation.NSObject)",
			"AppKit.NSViewController::UpdateUserActivityState(Foundation.NSUserActivity)",
			"AppKit.NSViewController::ValidateProposedFirstResponder(AppKit.NSResponder,AppKit.NSEvent)",
			"AppKit.NSViewController::WillPresentError(Foundation.NSError)",
			"AppKit.NSViewControllerPresentationAnimatorWrapper::AnimateDismissal(AppKit.NSViewController,AppKit.NSViewController)",
			"AppKit.NSViewControllerPresentationAnimatorWrapper::AnimatePresentation(AppKit.NSViewController,AppKit.NSViewController)",
			"AppKit.NSViewToolTipOwnerWrapper::GetStringForToolTip(AppKit.NSView,System.IntPtr,CoreGraphics.CGPoint,System.IntPtr)",
			"AppKit.NSVisualEffectView::.ctor(Foundation.NSCoder)",
			"AppKit.NSVisualEffectView::set_MaskImage(AppKit.NSImage)",
			"AppKit.NSVisualEffectView::ViewWillMove(AppKit.NSWindow)",
			"AppKit.NSWindow::.ctor(CoreGraphics.CGRect,AppKit.NSWindowStyle,AppKit.NSBackingStore,System.Boolean,AppKit.NSScreen)",
			"AppKit.NSWindow::.ctor(Foundation.NSCoder)",
			"AppKit.NSWindow::AddChildWindow(AppKit.NSWindow,AppKit.NSWindowOrderingMode)",
			"AppKit.NSWindow::AddTabbedWindow(AppKit.NSWindow,AppKit.NSWindowOrderingMode)",
			"AppKit.NSWindow::AddTitlebarAccessoryViewController(AppKit.NSTitlebarAccessoryViewController)",
			"AppKit.NSWindow::AnimationFor(Foundation.NSString)",
			"AppKit.NSWindow::BeginCriticalSheet(AppKit.NSWindow,System.Action`1<System.IntPtr>)",
			"AppKit.NSWindow::BeginSheet(AppKit.NSWindow,System.Action`1<System.IntPtr>)",
			"AppKit.NSWindow::ConstrainFrameRect(CoreGraphics.CGRect,AppKit.NSScreen)",
			"AppKit.NSWindow::DefaultAnimationFor(Foundation.NSString)",
			"AppKit.NSWindow::Deminiaturize(Foundation.NSObject)",
			"AppKit.NSWindow::DiscardEventsMatchingMask(System.UIntPtr,AppKit.NSEvent)",
			"AppKit.NSWindow::EndEditingFor(Foundation.NSObject)",
			"AppKit.NSWindow::EndSheet(AppKit.NSWindow)",
			"AppKit.NSWindow::EndSheet(AppKit.NSWindow,AppKit.NSModalResponse)",
			"AppKit.NSWindow::FieldEditor(System.Boolean,Foundation.NSObject)",
			"AppKit.NSWindow::GetWindowWithContentViewController(AppKit.NSViewController)",
			"AppKit.NSWindow::InsertTitlebarAccessoryViewController(AppKit.NSTitlebarAccessoryViewController,System.IntPtr)",
			"AppKit.NSWindow::InvalidateCursorRectsForView(AppKit.NSView)",
			"AppKit.NSWindow::MakeFirstResponder(AppKit.NSResponder)",
			"AppKit.NSWindow::MakeKeyAndOrderFront(Foundation.NSObject)",
			"AppKit.NSWindow::MenuChanged(AppKit.NSMenu)",
			"AppKit.NSWindow::MergeAllWindows(Foundation.NSObject)",
			"AppKit.NSWindow::Miniaturize(Foundation.NSObject)",
			"AppKit.NSWindow::MoveTabToNewWindow(Foundation.NSObject)",
			"AppKit.NSWindow::NextEventMatchingMask(System.UIntPtr,Foundation.NSDate,System.String,System.Boolean)",
			"AppKit.NSWindow::OrderBack(Foundation.NSObject)",
			"AppKit.NSWindow::OrderFront(Foundation.NSObject)",
			"AppKit.NSWindow::OrderOut(Foundation.NSObject)",
			"AppKit.NSWindow::PerformClose(Foundation.NSObject)",
			"AppKit.NSWindow::PerformMiniaturize(Foundation.NSObject)",
			"AppKit.NSWindow::PerformWindowDrag(AppKit.NSEvent)",
			"AppKit.NSWindow::PerformZoom(Foundation.NSObject)",
			"AppKit.NSWindow::PostEvent(AppKit.NSEvent,System.Boolean)",
			"AppKit.NSWindow::Print(Foundation.NSObject)",
			"AppKit.NSWindow::RemoveChildWindow(AppKit.NSWindow)",
			"AppKit.NSWindow::RunToolbarCustomizationPalette(Foundation.NSObject)",
			"AppKit.NSWindow::SelectKeyViewFollowingView(AppKit.NSView)",
			"AppKit.NSWindow::SelectKeyViewPrecedingView(AppKit.NSView)",
			"AppKit.NSWindow::SelectNextKeyView(Foundation.NSObject)",
			"AppKit.NSWindow::SelectNextTab(Foundation.NSObject)",
			"AppKit.NSWindow::SelectPreviousKeyView(Foundation.NSObject)",
			"AppKit.NSWindow::SelectPreviousTab(Foundation.NSObject)",
			"AppKit.NSWindow::SendEvent(AppKit.NSEvent)",
			"AppKit.NSWindow::set_AccessibilityApplicationFocusedUIElement(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityCancelButton(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityClearButton(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityCloseButton(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityCriticalValue(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityDecrementButton(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityDefaultButton(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityDisclosedRows(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityFocusedWindow(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityFullScreenButton(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityGrowArea(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityHeader(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityHorizontalScrollBar(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityIncrementButton(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityMainWindow(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityMarkerGroupUIElement(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityMarkerValues(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityMaxValue(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityMinimizeButton(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityMinValue(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityOverflowButton(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityProxy(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilitySearchButton(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilitySearchMenu(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityShownMenu(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityToolbarButton(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityUrl(Foundation.NSUrl)",
			"AppKit.NSWindow::set_AccessibilityValue(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityVerticalScrollBar(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityWarningValue(Foundation.NSObject)",
			"AppKit.NSWindow::set_AccessibilityZoomButton(Foundation.NSObject)",
			"AppKit.NSWindow::set_Animations(Foundation.NSDictionary)",
			"AppKit.NSWindow::set_Appearance(AppKit.NSAppearance)",
			"AppKit.NSWindow::set_BackgroundColor(AppKit.NSColor)",
			"AppKit.NSWindow::set_ColorSpace(AppKit.NSColorSpace)",
			"AppKit.NSWindow::set_ContentView(AppKit.NSView)",
			"AppKit.NSWindow::set_ContentViewController(AppKit.NSViewController)",
			"AppKit.NSWindow::set_DefaultButtonCell(AppKit.NSButtonCell)",
			"AppKit.NSWindow::set_InitialFirstResponder(AppKit.NSView)",
			"AppKit.NSWindow::set_MiniWindowImage(AppKit.NSImage)",
			"AppKit.NSWindow::set_ParentWindow(AppKit.NSWindow)",
			"AppKit.NSWindow::set_RepresentedUrl(Foundation.NSUrl)",
			"AppKit.NSWindow::set_Toolbar(AppKit.NSToolbar)",
			"AppKit.NSWindow::set_WindowController(AppKit.NSWindowController)",
			"AppKit.NSWindow::ToggleFullScreen(Foundation.NSObject)",
			"AppKit.NSWindow::ToggleTabBar(Foundation.NSObject)",
			"AppKit.NSWindow::ToggleTabOverview(Foundation.NSObject)",
			"AppKit.NSWindow::ToggleToolbarShown(Foundation.NSObject)",
			"AppKit.NSWindow::TryToPerform(ObjCRuntime.Selector,Foundation.NSObject)",
			"AppKit.NSWindow::ValidateMenuItem(AppKit.NSMenuItem)",
			"AppKit.NSWindow::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"AppKit.NSWindow::Zoom(Foundation.NSObject)",
			"AppKit.NSWindowController::.ctor(AppKit.NSWindow)",
			"AppKit.NSWindowController::.ctor(Foundation.NSCoder)",
			"AppKit.NSWindowController::.ctor(System.String,Foundation.NSObject)",
			"AppKit.NSWindowController::DismissController(Foundation.NSObject)",
			"AppKit.NSWindowController::EncodeTo(Foundation.NSCoder)",
			"AppKit.NSWindowController::PerformSegue(System.String,Foundation.NSObject)",
			"AppKit.NSWindowController::PrepareForSegue(AppKit.NSStoryboardSegue,Foundation.NSObject)",
			"AppKit.NSWindowController::set_ContentViewController(AppKit.NSViewController)",
			"AppKit.NSWindowController::set_Document(AppKit.NSDocument)",
			"AppKit.NSWindowController::set_Window(AppKit.NSWindow)",
			"AppKit.NSWindowController::ShouldPerformSegue(System.String,Foundation.NSObject)",
			"AppKit.NSWindowController::ShowWindow(Foundation.NSObject)",
			"AppKit.NSWindowDelegate_Extensions::CustomWindowsToEnterFullScreen(AppKit.INSWindowDelegate,AppKit.NSWindow)",
			"AppKit.NSWindowDelegate_Extensions::CustomWindowsToExitFullScreen(AppKit.INSWindowDelegate,AppKit.NSWindow)",
			"AppKit.NSWindowDelegate_Extensions::DidBecomeKey(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidBecomeMain(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidChangeBackingProperties(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidChangeScreen(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidChangeScreenProfile(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidDecodeRestorableState(AppKit.INSWindowDelegate,AppKit.NSWindow,Foundation.NSCoder)",
			"AppKit.NSWindowDelegate_Extensions::DidDeminiaturize(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidEndLiveResize(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidEndSheet(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidEnterFullScreen(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidEnterVersionBrowser(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidExitFullScreen(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidExitVersionBrowser(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidExpose(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidFailToEnterFullScreen(AppKit.INSWindowDelegate,AppKit.NSWindow)",
			"AppKit.NSWindowDelegate_Extensions::DidFailToExitFullScreen(AppKit.INSWindowDelegate,AppKit.NSWindow)",
			"AppKit.NSWindowDelegate_Extensions::DidMiniaturize(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidMove(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidResignKey(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidResignMain(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidResize(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::DidUpdate(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::ShouldDragDocumentWithEvent(AppKit.INSWindowDelegate,AppKit.NSWindow,AppKit.NSEvent,CoreGraphics.CGPoint,AppKit.NSPasteboard)",
			"AppKit.NSWindowDelegate_Extensions::ShouldPopUpDocumentPathMenu(AppKit.INSWindowDelegate,AppKit.NSWindow,AppKit.NSMenu)",
			"AppKit.NSWindowDelegate_Extensions::ShouldZoom(AppKit.INSWindowDelegate,AppKit.NSWindow,CoreGraphics.CGRect)",
			"AppKit.NSWindowDelegate_Extensions::StartCustomAnimationToEnterFullScreen(AppKit.INSWindowDelegate,AppKit.NSWindow,System.Double)",
			"AppKit.NSWindowDelegate_Extensions::StartCustomAnimationToExitFullScreen(AppKit.INSWindowDelegate,AppKit.NSWindow,System.Double)",
			"AppKit.NSWindowDelegate_Extensions::WillBeginSheet(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::WillClose(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::WillEncodeRestorableState(AppKit.INSWindowDelegate,AppKit.NSWindow,Foundation.NSCoder)",
			"AppKit.NSWindowDelegate_Extensions::WillEnterFullScreen(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::WillEnterVersionBrowser(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::WillExitFullScreen(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::WillExitVersionBrowser(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::WillMiniaturize(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::WillMove(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::WillPositionSheet(AppKit.INSWindowDelegate,AppKit.NSWindow,AppKit.NSWindow,CoreGraphics.CGRect)",
			"AppKit.NSWindowDelegate_Extensions::WillResize(AppKit.INSWindowDelegate,AppKit.NSWindow,CoreGraphics.CGSize)",
			"AppKit.NSWindowDelegate_Extensions::WillResizeForVersionBrowser(AppKit.INSWindowDelegate,AppKit.NSWindow,CoreGraphics.CGSize,CoreGraphics.CGSize)",
			"AppKit.NSWindowDelegate_Extensions::WillReturnFieldEditor(AppKit.INSWindowDelegate,AppKit.NSWindow,Foundation.NSObject)",
			"AppKit.NSWindowDelegate_Extensions::WillReturnUndoManager(AppKit.INSWindowDelegate,AppKit.NSWindow)",
			"AppKit.NSWindowDelegate_Extensions::WillStartLiveResize(AppKit.INSWindowDelegate,Foundation.NSNotification)",
			"AppKit.NSWindowDelegate_Extensions::WillUseFullScreenContentSize(AppKit.INSWindowDelegate,AppKit.NSWindow,CoreGraphics.CGSize)",
			"AppKit.NSWindowDelegate_Extensions::WillUseFullScreenPresentationOptions(AppKit.INSWindowDelegate,AppKit.NSWindow,AppKit.NSApplicationPresentationOptions)",
			"AppKit.NSWindowDelegate_Extensions::WillUseStandardFrame(AppKit.INSWindowDelegate,AppKit.NSWindow,CoreGraphics.CGRect)",
			"AppKit.NSWindowDelegate_Extensions::WindowShouldClose(AppKit.INSWindowDelegate,Foundation.NSObject)",
			"AppKit.NSWindowTab::set_AccessoryView(AppKit.NSView)",
			"AppKit.NSWindowTab::set_AttributedTitle(Foundation.NSAttributedString)",
			"AppKit.NSWindowTabGroup::Add(AppKit.NSWindow)",
			"AppKit.NSWindowTabGroup::Insert(AppKit.NSWindow,System.IntPtr)",
			"AppKit.NSWindowTabGroup::Remove(AppKit.NSWindow)",
			"AppKit.NSWorkspace::_OpenUrls(Foundation.NSUrl[],System.String,AppKit.NSWorkspaceLaunchOptions,Foundation.NSAppleEventDescriptor,System.String[])",
			"AppKit.NSWorkspace::DesktopImageOptions(AppKit.NSScreen)",
			"AppKit.NSWorkspace::DesktopImageUrl(AppKit.NSScreen)",
			"AppKit.NSWorkspace::DuplicateUrls(Foundation.NSArray,AppKit.NSWorkspaceUrlHandler)",
			"AppKit.NSWorkspace::GetIcon(UniformTypeIdentifiers.UTType)",
			"AppKit.NSWorkspace::GetUrlForApplicationToOpenContentType(UniformTypeIdentifiers.UTType)",
			"AppKit.NSWorkspace::GetUrlsForApplications(Foundation.NSUrl)",
			"AppKit.NSWorkspace::GetUrlsForApplicationsToOpenContentType(UniformTypeIdentifiers.UTType)",
			"AppKit.NSWorkspace::LaunchApp(System.String,AppKit.NSWorkspaceLaunchOptions,Foundation.NSAppleEventDescriptor,System.IntPtr)",
			"AppKit.NSWorkspace::LaunchApplication(Foundation.NSUrl,AppKit.NSWorkspaceLaunchOptions,Foundation.NSDictionary,Foundation.NSError&)",
			"AppKit.NSWorkspace::OpenApplication(Foundation.NSUrl,AppKit.NSWorkspaceOpenConfiguration,System.Action`2<AppKit.NSRunningApplication,Foundation.NSError>)",
			"AppKit.NSWorkspace::OpenFile(System.String,AppKit.NSImage,CoreGraphics.CGPoint,AppKit.NSView)",
			"AppKit.NSWorkspace::OpenUrl(Foundation.NSUrl)",
			"AppKit.NSWorkspace::OpenUrl(Foundation.NSUrl,AppKit.NSWorkspaceLaunchOptions,Foundation.NSDictionary,Foundation.NSError&)",
			"AppKit.NSWorkspace::OpenUrl(Foundation.NSUrl,AppKit.NSWorkspaceOpenConfiguration,System.Action`2<AppKit.NSRunningApplication,Foundation.NSError>)",
			"AppKit.NSWorkspace::OpenUrls(Foundation.NSUrl[],Foundation.NSUrl,AppKit.NSWorkspaceLaunchOptions,Foundation.NSDictionary,Foundation.NSError&)",
			"AppKit.NSWorkspace::OpenUrls(Foundation.NSUrl[],Foundation.NSUrl,AppKit.NSWorkspaceOpenConfiguration,System.Action`2<AppKit.NSRunningApplication,Foundation.NSError>)",
			"AppKit.NSWorkspace::PerformFileOperation(Foundation.NSString,System.String,System.String,System.String[],System.IntPtr&)",
			"AppKit.NSWorkspace::RecycleUrls(Foundation.NSArray,AppKit.NSWorkspaceUrlHandler)",
			"AppKit.NSWorkspace::SetDefaultApplicationToOpenContentType(Foundation.NSUrl,Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"AppKit.NSWorkspace::SetDefaultApplicationToOpenContentType(Foundation.NSUrl,UniformTypeIdentifiers.UTType,System.Action`1<Foundation.NSError>)",
			"AppKit.NSWorkspace::SetDefaultApplicationToOpenFile(Foundation.NSUrl,Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"AppKit.NSWorkspace::SetDefaultApplicationToOpenUrls(Foundation.NSUrl,System.String,System.Action`1<Foundation.NSError>)",
			"AppKit.NSWorkspace::SetDesktopImageUrl(Foundation.NSUrl,AppKit.NSScreen,Foundation.NSDictionary,Foundation.NSError)",
			"AppKit.NSWorkspace::SetIconforFile(AppKit.NSImage,System.String,AppKit.NSWorkspaceIconCreationOptions)",
			"AppKit.NSWorkspace::UnmountAndEjectDevice(Foundation.NSUrl,Foundation.NSError&)",
			"AppKit.NSWorkspace::UrlForApplication(Foundation.NSUrl)",
			"AppKit.NSWorkspaceOpenConfiguration::Copy(Foundation.NSZone)",
			"AppKit.NSWorkspaceOpenConfiguration::set_AppleEvent(Foundation.NSAppleEventDescriptor)",
			"AppKit.NSWorkspaceOpenConfiguration::set_Environment(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSString>)",
			"ARKit.ARAnchor::.ctor(ARKit.ARAnchor)",
			"ARKit.ARAnchor::.ctor(Foundation.NSCoder)",
			"ARKit.ARAnchor::Copy(Foundation.NSZone)",
			"ARKit.ARAnchor::EncodeTo(Foundation.NSCoder)",
			"ARKit.ARAnchorCopyingWrapper::Copy(Foundation.NSZone)",
			"ARKit.ARAppClipCodeAnchor::.ctor(ARKit.ARAnchor)",
			"ARKit.ARAppClipCodeAnchor::.ctor(Foundation.NSCoder)",
			"ARKit.ARBodyAnchor::.ctor(ARKit.ARAnchor)",
			"ARKit.ARBodyAnchor::.ctor(Foundation.NSCoder)",
			"ARKit.ARBodyTrackingConfiguration::set_DetectionImages(Foundation.NSSet`1<ARKit.ARReferenceImage>)",
			"ARKit.ARBodyTrackingConfiguration::set_InitialWorldMap(ARKit.ARWorldMap)",
			"ARKit.ARCamera::Copy(Foundation.NSZone)",
			"ARKit.ARCoachingOverlayView::.ctor(Foundation.NSCoder)",
			"ARKit.ARCoachingOverlayView::set_Session(ARKit.ARSession)",
			"ARKit.ARCoachingOverlayViewDelegate_Extensions::DidDeactivate(ARKit.IARCoachingOverlayViewDelegate,ARKit.ARCoachingOverlayView)",
			"ARKit.ARCoachingOverlayViewDelegate_Extensions::DidRequestSessionReset(ARKit.IARCoachingOverlayViewDelegate,ARKit.ARCoachingOverlayView)",
			"ARKit.ARCoachingOverlayViewDelegate_Extensions::WillActivate(ARKit.IARCoachingOverlayViewDelegate,ARKit.ARCoachingOverlayView)",
			"ARKit.ARCollaborationData::.ctor(Foundation.NSCoder)",
			"ARKit.ARCollaborationData::EncodeTo(Foundation.NSCoder)",
			"ARKit.ARConfiguration::Copy(Foundation.NSZone)",
			"ARKit.ARConfiguration::set_VideoFormat(ARKit.ARVideoFormat)",
			"ARKit.AREnvironmentProbeAnchor::.ctor(ARKit.ARAnchor)",
			"ARKit.AREnvironmentProbeAnchor::.ctor(Foundation.NSCoder)",
			"ARKit.ARFaceAnchor::.ctor(ARKit.ARAnchor)",
			"ARKit.ARFaceAnchor::.ctor(Foundation.NSCoder)",
			"ARKit.ARFaceGeometry::.ctor(Foundation.NSCoder)",
			"ARKit.ARFaceGeometry::.ctor(Foundation.NSDictionary)",
			"ARKit.ARFaceGeometry::Copy(Foundation.NSZone)",
			"ARKit.ARFaceGeometry::EncodeTo(Foundation.NSCoder)",
			"ARKit.ARFrame::Copy(Foundation.NSZone)",
			"ARKit.ARGeoAnchor::.ctor(ARKit.ARAnchor)",
			"ARKit.ARGeoAnchor::.ctor(Foundation.NSCoder)",
			"ARKit.ARGeometryElement::.ctor(Foundation.NSCoder)",
			"ARKit.ARGeometryElement::EncodeTo(Foundation.NSCoder)",
			"ARKit.ARGeometrySource::.ctor(Foundation.NSCoder)",
			"ARKit.ARGeometrySource::EncodeTo(Foundation.NSCoder)",
			"ARKit.ARGeoTrackingConfiguration::set_DetectionImages(Foundation.NSSet`1<ARKit.ARReferenceImage>)",
			"ARKit.ARGeoTrackingConfiguration::set_DetectionObjects(Foundation.NSSet`1<ARKit.ARReferenceObject>)",
			"ARKit.ARGeoTrackingStatus::.ctor(Foundation.NSCoder)",
			"ARKit.ARGeoTrackingStatus::Copy(Foundation.NSZone)",
			"ARKit.ARGeoTrackingStatus::EncodeTo(Foundation.NSCoder)",
			"ARKit.ARImageAnchor::.ctor(ARKit.ARAnchor)",
			"ARKit.ARImageAnchor::.ctor(Foundation.NSCoder)",
			"ARKit.ARImageTrackingConfiguration::set_TrackingImages(Foundation.NSSet`1<ARKit.ARReferenceImage>)",
			"ARKit.ARMatteGenerator::.ctor(Metal.IMTLDevice,ARKit.ARMatteResolution)",
			"ARKit.ARMatteGenerator::GenerateDilatedDepth(ARKit.ARFrame,Metal.IMTLCommandBuffer)",
			"ARKit.ARMatteGenerator::GenerateMatte(ARKit.ARFrame,Metal.IMTLCommandBuffer)",
			"ARKit.ARMeshAnchor::.ctor(ARKit.ARAnchor)",
			"ARKit.ARMeshAnchor::.ctor(Foundation.NSCoder)",
			"ARKit.ARMeshGeometry::.ctor(Foundation.NSCoder)",
			"ARKit.ARMeshGeometry::EncodeTo(Foundation.NSCoder)",
			"ARKit.ARObjectAnchor::.ctor(ARKit.ARAnchor)",
			"ARKit.ARObjectAnchor::.ctor(Foundation.NSCoder)",
			"ARKit.ARParticipantAnchor::.ctor(ARKit.ARAnchor)",
			"ARKit.ARParticipantAnchor::.ctor(Foundation.NSCoder)",
			"ARKit.ARPlaneAnchor::.ctor(ARKit.ARAnchor)",
			"ARKit.ARPlaneAnchor::.ctor(Foundation.NSCoder)",
			"ARKit.ARPlaneGeometry::.ctor(Foundation.NSCoder)",
			"ARKit.ARPlaneGeometry::EncodeTo(Foundation.NSCoder)",
			"ARKit.ARPointCloud::.ctor(Foundation.NSCoder)",
			"ARKit.ARPointCloud::EncodeTo(Foundation.NSCoder)",
			"ARKit.ARPositionalTrackingConfiguration::set_InitialWorldMap(ARKit.ARWorldMap)",
			"ARKit.ARQuickLookPreviewItem::.ctor(Foundation.NSUrl)",
			"ARKit.ARQuickLookPreviewItem::set_CanonicalWebPageUrl(Foundation.NSUrl)",
			"ARKit.ARReferenceImage::.ctor(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,System.Runtime.InteropServices.NFloat)",
			"ARKit.ARReferenceImage::.ctor(CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,System.Runtime.InteropServices.NFloat)",
			"ARKit.ARReferenceImage::Copy(Foundation.NSZone)",
			"ARKit.ARReferenceImage::GetReferenceImagesInGroup(System.String,Foundation.NSBundle)",
			"ARKit.ARReferenceObject::.ctor(Foundation.NSCoder)",
			"ARKit.ARReferenceObject::.ctor(Foundation.NSUrl,Foundation.NSError&)",
			"ARKit.ARReferenceObject::EncodeTo(Foundation.NSCoder)",
			"ARKit.ARReferenceObject::Export(Foundation.NSUrl,UIKit.UIImage,Foundation.NSError&)",
			"ARKit.ARReferenceObject::GetReferenceObjects(System.String,Foundation.NSBundle)",
			"ARKit.ARReferenceObject::Merge(ARKit.ARReferenceObject,Foundation.NSError&)",
			"ARKit.ARSCNFaceGeometry::.ctor(Foundation.NSCoder)",
			"ARKit.ARSCNFaceGeometry::Create(Metal.IMTLDevice)",
			"ARKit.ARSCNFaceGeometry::Create(Metal.IMTLDevice,System.Boolean)",
			"ARKit.ARSCNFaceGeometry::Update(ARKit.ARFaceGeometry)",
			"ARKit.ARSCNPlaneGeometry::.ctor(Foundation.NSCoder)",
			"ARKit.ARSCNPlaneGeometry::Create(Metal.IMTLDevice)",
			"ARKit.ARSCNPlaneGeometry::Update(ARKit.ARPlaneGeometry)",
			"ARKit.ARSCNView::.ctor(Foundation.NSCoder)",
			"ARKit.ARSCNView::GetAnchor(SceneKit.SCNNode)",
			"ARKit.ARSCNView::GetNode(ARKit.ARAnchor)",
			"ARKit.ARSCNView::set_Scene(SceneKit.SCNScene)",
			"ARKit.ARSCNView::set_Session(ARKit.ARSession)",
			"ARKit.ARSCNViewDelegate_Extensions::DidAddNode(ARKit.IARSCNViewDelegate,SceneKit.ISCNSceneRenderer,SceneKit.SCNNode,ARKit.ARAnchor)",
			"ARKit.ARSCNViewDelegate_Extensions::DidRemoveNode(ARKit.IARSCNViewDelegate,SceneKit.ISCNSceneRenderer,SceneKit.SCNNode,ARKit.ARAnchor)",
			"ARKit.ARSCNViewDelegate_Extensions::DidUpdateNode(ARKit.IARSCNViewDelegate,SceneKit.ISCNSceneRenderer,SceneKit.SCNNode,ARKit.ARAnchor)",
			"ARKit.ARSCNViewDelegate_Extensions::GetNode(ARKit.IARSCNViewDelegate,SceneKit.ISCNSceneRenderer,ARKit.ARAnchor)",
			"ARKit.ARSCNViewDelegate_Extensions::WillUpdateNode(ARKit.IARSCNViewDelegate,SceneKit.ISCNSceneRenderer,SceneKit.SCNNode,ARKit.ARAnchor)",
			"ARKit.ARSession::AddAnchor(ARKit.ARAnchor)",
			"ARKit.ARSession::Raycast(ARKit.ARRaycastQuery)",
			"ARKit.ARSession::RemoveAnchor(ARKit.ARAnchor)",
			"ARKit.ARSession::Run(ARKit.ARConfiguration)",
			"ARKit.ARSession::Run(ARKit.ARConfiguration,ARKit.ARSessionRunOptions)",
			"ARKit.ARSession::set_DelegateQueue(CoreFoundation.DispatchQueue)",
			"ARKit.ARSession::TrackedRaycast(ARKit.ARRaycastQuery,System.Action`1<ARKit.ARRaycastResult[]>)",
			"ARKit.ARSession::Update(ARKit.ARCollaborationData)",
			"ARKit.ARSessionDelegate_Extensions::DidAddAnchors(ARKit.IARSessionDelegate,ARKit.ARSession,ARKit.ARAnchor[])",
			"ARKit.ARSessionDelegate_Extensions::DidRemoveAnchors(ARKit.IARSessionDelegate,ARKit.ARSession,ARKit.ARAnchor[])",
			"ARKit.ARSessionDelegate_Extensions::DidUpdateAnchors(ARKit.IARSessionDelegate,ARKit.ARSession,ARKit.ARAnchor[])",
			"ARKit.ARSessionDelegate_Extensions::DidUpdateFrame(ARKit.IARSessionDelegate,ARKit.ARSession,ARKit.ARFrame)",
			"ARKit.ARSessionObserver_Extensions::CameraDidChangeTrackingState(ARKit.IARSessionObserver,ARKit.ARSession,ARKit.ARCamera)",
			"ARKit.ARSessionObserver_Extensions::DidChangeGeoTrackingStatus(ARKit.IARSessionObserver,ARKit.ARSession,ARKit.ARGeoTrackingStatus)",
			"ARKit.ARSessionObserver_Extensions::DidFail(ARKit.IARSessionObserver,ARKit.ARSession,Foundation.NSError)",
			"ARKit.ARSessionObserver_Extensions::DidOutputAudioSampleBuffer(ARKit.IARSessionObserver,ARKit.ARSession,CoreMedia.CMSampleBuffer)",
			"ARKit.ARSessionObserver_Extensions::DidOutputCollaborationData(ARKit.IARSessionObserver,ARKit.ARSession,ARKit.ARCollaborationData)",
			"ARKit.ARSessionObserver_Extensions::InterruptionEnded(ARKit.IARSessionObserver,ARKit.ARSession)",
			"ARKit.ARSessionObserver_Extensions::ShouldAttemptRelocalization(ARKit.IARSessionObserver,ARKit.ARSession)",
			"ARKit.ARSessionObserver_Extensions::WasInterrupted(ARKit.IARSessionObserver,ARKit.ARSession)",
			"ARKit.ARSkeleton::CreateJointName(Foundation.NSString)",
			"ARKit.ARSkeleton2D::GetLandmarkPoint(Foundation.NSString)",
			"ARKit.ARSkeleton3D::GetLocalTransform(Foundation.NSString)",
			"ARKit.ARSkeleton3D::GetModelTransform(Foundation.NSString)",
			"ARKit.ARSkeletonDefinition::GetJointIndex(Foundation.NSString)",
			"ARKit.ARSKView::.ctor(Foundation.NSCoder)",
			"ARKit.ARSKView::GetAnchor(SpriteKit.SKNode)",
			"ARKit.ARSKView::GetNode(ARKit.ARAnchor)",
			"ARKit.ARSKView::set_Session(ARKit.ARSession)",
			"ARKit.ARSKViewDelegate_Extensions::DidAddNode(ARKit.IARSKViewDelegate,ARKit.ARSKView,SpriteKit.SKNode,ARKit.ARAnchor)",
			"ARKit.ARSKViewDelegate_Extensions::DidRemoveNode(ARKit.IARSKViewDelegate,ARKit.ARSKView,SpriteKit.SKNode,ARKit.ARAnchor)",
			"ARKit.ARSKViewDelegate_Extensions::DidUpdateNode(ARKit.IARSKViewDelegate,ARKit.ARSKView,SpriteKit.SKNode,ARKit.ARAnchor)",
			"ARKit.ARSKViewDelegate_Extensions::GetNode(ARKit.IARSKViewDelegate,ARKit.ARSKView,ARKit.ARAnchor)",
			"ARKit.ARSKViewDelegate_Extensions::WillUpdateNode(ARKit.IARSKViewDelegate,ARKit.ARSKView,SpriteKit.SKNode,ARKit.ARAnchor)",
			"ARKit.ARVideoFormat::Copy(Foundation.NSZone)",
			"ARKit.ARWorldMap::.ctor(Foundation.NSCoder)",
			"ARKit.ARWorldMap::Copy(Foundation.NSZone)",
			"ARKit.ARWorldMap::EncodeTo(Foundation.NSCoder)",
			"ARKit.ARWorldTrackingConfiguration::set_DetectionImages(Foundation.NSSet`1<ARKit.ARReferenceImage>)",
			"ARKit.ARWorldTrackingConfiguration::set_DetectionObjects(Foundation.NSSet`1<ARKit.ARReferenceObject>)",
			"ARKit.ARWorldTrackingConfiguration::set_InitialWorldMap(ARKit.ARWorldMap)",
			"AssetsLibrary.ALAsset::get_AssetType()",
			"AssetsLibrary.ALAsset::get_Representations()",
			"AssetsLibrary.ALAsset::SetImageData(Foundation.NSData,Foundation.NSDictionary,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"AssetsLibrary.ALAsset::SetVideoAtPath(Foundation.NSUrl,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"AssetsLibrary.ALAsset::ValueForProperty(Foundation.NSString)",
			"AssetsLibrary.ALAsset::WriteModifiedImageToSavedToPhotosAlbum(Foundation.NSData,Foundation.NSDictionary,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"AssetsLibrary.ALAsset::WriteModifiedVideoToSavedPhotosAlbum(Foundation.NSUrl,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"AssetsLibrary.ALAssetRepresentation::GetImage(Foundation.NSDictionary)",
			"AssetsLibrary.ALAssetsGroup::AddAsset(AssetsLibrary.ALAsset)",
			"AssetsLibrary.ALAssetsGroup::Enumerate(Foundation.NSIndexSet,Foundation.NSEnumerationOptions,AssetsLibrary.ALAssetsEnumerator)",
			"AssetsLibrary.ALAssetsGroup::SetAssetsFilter(AssetsLibrary.ALAssetsFilter)",
			"AssetsLibrary.ALAssetsGroup::ValueForProperty(Foundation.NSString)",
			"AssetsLibrary.ALAssetsLibrary::AssetForUrl(Foundation.NSUrl,System.Action`1<AssetsLibrary.ALAsset>,System.Action`1<Foundation.NSError>)",
			"AssetsLibrary.ALAssetsLibrary::GroupForUrl(Foundation.NSUrl,System.Action`1<AssetsLibrary.ALAssetsGroup>,System.Action`1<Foundation.NSError>)",
			"AssetsLibrary.ALAssetsLibrary::VideoAtPathIsIsCompatibleWithSavedPhotosAlbum(Foundation.NSUrl)",
			"AssetsLibrary.ALAssetsLibrary::WriteImageToSavedPhotosAlbum(CoreGraphics.CGImage,AssetsLibrary.ALAssetOrientation,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"AssetsLibrary.ALAssetsLibrary::WriteImageToSavedPhotosAlbum(CoreGraphics.CGImage,Foundation.NSDictionary,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"AssetsLibrary.ALAssetsLibrary::WriteImageToSavedPhotosAlbum(Foundation.NSData,Foundation.NSDictionary,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"AssetsLibrary.ALAssetsLibrary::WriteVideoToSavedPhotosAlbum(Foundation.NSUrl,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"AudioToolbox.AudioFile::Create(CoreFoundation.CFUrl,AudioToolbox.AudioFileType,AudioToolbox.AudioStreamBasicDescription,AudioToolbox.AudioFileFlags)",
			"AudioToolbox.AudioFile::Create(Foundation.NSUrl,AudioToolbox.AudioFileType,AudioToolbox.AudioStreamBasicDescription,AudioToolbox.AudioFileFlags)",
			"AudioToolbox.AudioFile::Open(CoreFoundation.CFUrl,AudioToolbox.AudioFilePermission,AudioToolbox.AudioFileError&,AudioToolbox.AudioFileType)",
			"AudioToolbox.AudioFile::Open(Foundation.NSUrl,AudioToolbox.AudioFilePermission,AudioToolbox.AudioFileError&,AudioToolbox.AudioFileType)",
			"AudioToolbox.AudioQueueChannelAssignment::.ctor(CoreFoundation.CFString,System.UInt32)",
			"AudioToolbox.InputAudioQueue::.ctor(AudioToolbox.AudioStreamBasicDescription,CoreFoundation.CFRunLoop,System.String)",
			"AudioToolbox.MusicPlayer::set_MusicSequence(AudioToolbox.MusicSequence)",
			"AudioToolbox.MusicSequence::CreateFile(Foundation.NSUrl,AudioToolbox.MusicSequenceFileTypeID,AudioToolbox.MusicSequenceFileFlags,System.UInt16)",
			"AudioToolbox.MusicSequence::GetTrackIndex(AudioToolbox.MusicTrack,System.Int32&)",
			"AudioToolbox.MusicSequence::LoadData(Foundation.NSData,AudioToolbox.MusicSequenceFileTypeID,AudioToolbox.MusicSequenceLoadFlags)",
			"AudioToolbox.MusicSequence::LoadFile(Foundation.NSUrl,AudioToolbox.MusicSequenceFileTypeID,AudioToolbox.MusicSequenceLoadFlags)",
			"AudioToolbox.MusicSequence::set_AUGraph(AudioUnit.AUGraph)",
			"AudioToolbox.MusicTrack::CopyInsert(System.Double,System.Double,AudioToolbox.MusicTrack,System.Double)",
			"AudioToolbox.MusicTrack::Dispose(System.Boolean)",
			"AudioToolbox.MusicTrack::Merge(System.Double,System.Double,AudioToolbox.MusicTrack,System.Double)",
			"AudioToolbox.OutputAudioQueue::.ctor(AudioToolbox.AudioStreamBasicDescription,CoreFoundation.CFRunLoop,CoreFoundation.CFString)",
			"AudioToolbox.SoundBank::GetInstrumentInfo(Foundation.NSUrl)",
			"AudioToolbox.SoundBank::GetName(Foundation.NSUrl)",
			"AudioToolbox.SystemSound::AddSystemSoundCompletion(System.Action,CoreFoundation.CFRunLoop)",
			"AudioToolbox.SystemSound::FromFile(Foundation.NSUrl)",
			"AudioUnit.AUAudioUnit::DeleteUserPreset(AudioUnit.AUAudioUnitPreset,Foundation.NSError&)",
			"AudioUnit.AUAudioUnit::Disable(CoreMidi.MidiCIProfile,System.Byte,System.Byte,Foundation.NSError&)",
			"AudioUnit.AUAudioUnit::Enable(CoreMidi.MidiCIProfile,System.Byte,System.Byte,Foundation.NSError&)",
			"AudioUnit.AUAudioUnit::GetPresetState(AudioUnit.AUAudioUnitPreset,Foundation.NSError&)",
			"AudioUnit.AUAudioUnit::SaveUserPreset(AudioUnit.AUAudioUnitPreset,Foundation.NSError&)",
			"AudioUnit.AUAudioUnit::set_CurrentPreset(AudioUnit.AUAudioUnitPreset)",
			"AudioUnit.AUAudioUnit::set_FullState(Foundation.NSDictionary)",
			"AudioUnit.AUAudioUnit::set_FullStateForDocument(Foundation.NSDictionary)",
			"AudioUnit.AUAudioUnit::set_ParameterTree(AudioUnit.AUParameterTree)",
			"AudioUnit.AUAudioUnit::ShouldChangeToFormat(AVFoundation.AVAudioFormat,AudioUnit.AUAudioUnitBus)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::CanPerformOutput(AudioUnit.AUAudioUnit)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::GetCanPerformInput(AudioUnit.AUAudioUnit)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::GetDeviceId(AudioUnit.AUAudioUnit)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::GetDeviceInputLatency(AudioUnit.AUAudioUnit)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::GetDeviceOutputLatency(AudioUnit.AUAudioUnit)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::GetInputHandler(AudioUnit.AUAudioUnit)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::GetOutputProvider(AudioUnit.AUAudioUnit)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::IsInputEnabled(AudioUnit.AUAudioUnit)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::IsOutputEnabled(AudioUnit.AUAudioUnit)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::IsRunning(AudioUnit.AUAudioUnit)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::SetDeviceId(AudioUnit.AUAudioUnit,System.UInt32,Foundation.NSError&)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::SetInputEnabled(AudioUnit.AUAudioUnit,System.Boolean)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::SetInputHandler(AudioUnit.AUAudioUnit,AudioUnit.AUInputHandler)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::SetOutputEnabled(AudioUnit.AUAudioUnit,System.Boolean)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::SetOutputProvider(AudioUnit.AUAudioUnit,AudioUnit.AURenderPullInputBlock)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::StartHardware(AudioUnit.AUAudioUnit,Foundation.NSError&)",
			"AudioUnit.AUAudioUnit_AUAudioInputOutputUnit::StopHardware(AudioUnit.AUAudioUnit)",
			"AudioUnit.AUAudioUnitBus::.ctor(AVFoundation.AVAudioFormat,Foundation.NSError&)",
			"AudioUnit.AUAudioUnitBus::SetFormat(AVFoundation.AVAudioFormat,Foundation.NSError&)",
			"AudioUnit.AUAudioUnitBusArray::.ctor(AudioUnit.AUAudioUnit,AudioUnit.AUAudioUnitBusType)",
			"AudioUnit.AUAudioUnitBusArray::.ctor(AudioUnit.AUAudioUnit,AudioUnit.AUAudioUnitBusType,AudioUnit.AUAudioUnitBus[])",
			"AudioUnit.AUAudioUnitBusArray::AddObserver(Foundation.NSObject,System.String,Foundation.NSKeyValueObservingOptions,System.IntPtr)",
			"AudioUnit.AUAudioUnitBusArray::RemoveObserver(Foundation.NSObject,System.String,System.IntPtr)",
			"AudioUnit.AUAudioUnitFactoryWrapper::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"AudioUnit.AUAudioUnitPreset::.ctor(Foundation.NSCoder)",
			"AudioUnit.AUAudioUnitPreset::EncodeTo(Foundation.NSCoder)",
			"AudioUnit.AudioComponent::FindNextComponent(AudioUnit.AudioComponent,AudioUnit.AudioComponentDescription&)",
			"AudioUnit.AudioUnit::MakeConnection(AudioUnit.AudioUnit,System.UInt32,System.UInt32)",
			"AudioUnit.AudioUnit::SetClassInfo(AudioUnit.ClassInfoDictionary,AudioUnit.AudioUnitScopeType,System.UInt32)",
			"AudioUnit.AudioUnit::SetScheduledFiles(AudioToolbox.AudioFile)",
			"AudioUnit.AudioUnit::SetScheduledFiles(AudioToolbox.AudioFile[])",
			"AudioUnit.AUParameter::.ctor(Foundation.NSCoder)",
			"AudioUnit.AUParameter::EncodeTo(Foundation.NSCoder)",
			"AudioUnit.AUParameterGroup::.ctor(Foundation.NSCoder)",
			"AudioUnit.AUParameterGroup::EncodeTo(Foundation.NSCoder)",
			"AudioUnit.AUParameterTree::.ctor(Foundation.NSCoder)",
			"AudioUnit.AUParameterTree::CreateGroup(AudioUnit.AUParameterGroup,System.String,System.String,System.UInt64)",
			"AudioUnit.AUParameterTree::EncodeTo(Foundation.NSCoder)",
			"AudioUnit.AUScheduledAudioFileRegion::GetAudioFileRegion()",
			"AudioUnit.ExtAudioFile::CreateWithUrl(CoreFoundation.CFUrl,AudioToolbox.AudioFileType,AudioToolbox.AudioStreamBasicDescription,AudioToolbox.AudioFileFlags)",
			"AudioUnit.ExtAudioFile::CreateWithUrl(CoreFoundation.CFUrl,AudioToolbox.AudioFileType,AudioToolbox.AudioStreamBasicDescription,AudioToolbox.AudioFileFlags,AudioUnit.ExtAudioFileError&)",
			"AudioUnit.ExtAudioFile::CreateWithUrl(Foundation.NSUrl,AudioToolbox.AudioFileType,AudioToolbox.AudioStreamBasicDescription,AudioToolbox.AudioFileFlags,AudioUnit.ExtAudioFileError&)",
			"AudioUnit.ExtAudioFile::OpenUrl(CoreFoundation.CFUrl)",
			"AudioUnit.ExtAudioFile::OpenUrl(CoreFoundation.CFUrl,AudioUnit.ExtAudioFileError&)",
			"AudioUnit.ExtAudioFile::OpenUrl(Foundation.NSUrl,AudioUnit.ExtAudioFileError&)",
			"AudioUnit.SamplerInstrumentData::ToStruct()",
			"AuthenticationServices.ASAccountAuthenticationModificationController::PerformRequest(AuthenticationServices.ASAccountAuthenticationModificationRequest)",
			"AuthenticationServices.ASAccountAuthenticationModificationControllerDelegate_Extensions::DidFailRequest(AuthenticationServices.IASAccountAuthenticationModificationControllerDelegate,AuthenticationServices.ASAccountAuthenticationModificationController,AuthenticationServices.ASAccountAuthenticationModificationRequest,Foundation.NSError)",
			"AuthenticationServices.ASAccountAuthenticationModificationControllerDelegate_Extensions::DidSuccessfullyCompleteRequest(AuthenticationServices.IASAccountAuthenticationModificationControllerDelegate,AuthenticationServices.ASAccountAuthenticationModificationController,AuthenticationServices.ASAccountAuthenticationModificationRequest,Foundation.NSDictionary)",
			"AuthenticationServices.ASAccountAuthenticationModificationControllerPresentationContextProvidingWrapper::GetPresentationAnchor(AuthenticationServices.ASAccountAuthenticationModificationController)",
			"AuthenticationServices.ASAccountAuthenticationModificationExtensionContext::CancelRequest(Foundation.NSError)",
			"AuthenticationServices.ASAccountAuthenticationModificationExtensionContext::CompleteChangePasswordRequest(AuthenticationServices.ASPasswordCredential,Foundation.NSDictionary)",
			"AuthenticationServices.ASAccountAuthenticationModificationExtensionContext::CompleteUpgradeToSignInWithApple(Foundation.NSDictionary)",
			"AuthenticationServices.ASAccountAuthenticationModificationReplacePasswordWithSignInWithAppleRequest::.ctor(System.String,AuthenticationServices.ASCredentialServiceIdentifier,Foundation.NSDictionary)",
			"AuthenticationServices.ASAccountAuthenticationModificationUpgradePasswordToStrongPasswordRequest::.ctor(System.String,AuthenticationServices.ASCredentialServiceIdentifier,Foundation.NSDictionary)",
			"AuthenticationServices.ASAccountAuthenticationModificationViewController::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAccountAuthenticationModificationViewController::ChangePasswordWithoutUserInteraction(AuthenticationServices.ASCredentialServiceIdentifier,AuthenticationServices.ASPasswordCredential,System.String,Foundation.NSDictionary)",
			"AuthenticationServices.ASAccountAuthenticationModificationViewController::ConvertAccountToSignInWithAppleWithoutUserInteraction(AuthenticationServices.ASCredentialServiceIdentifier,AuthenticationServices.ASPasswordCredential,Foundation.NSDictionary)",
			"AuthenticationServices.ASAccountAuthenticationModificationViewController::PrepareInterfaceToChangePassword(AuthenticationServices.ASCredentialServiceIdentifier,AuthenticationServices.ASPasswordCredential,System.String,Foundation.NSDictionary)",
			"AuthenticationServices.ASAccountAuthenticationModificationViewController::PrepareInterfaceToConvertAccountToSignInWithApple(AuthenticationServices.ASCredentialServiceIdentifier,AuthenticationServices.ASPasswordCredential,Foundation.NSDictionary)",
			"AuthenticationServices.ASAuthorizationAppleIdButton::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationAppleIdCredential::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationAppleIdCredential::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationAppleIdCredential::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationAppleIdRequest::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationControllerDelegate_Extensions::DidComplete(AuthenticationServices.IASAuthorizationControllerDelegate,AuthenticationServices.ASAuthorizationController,AuthenticationServices.ASAuthorization)",
			"AuthenticationServices.ASAuthorizationControllerDelegate_Extensions::DidComplete(AuthenticationServices.IASAuthorizationControllerDelegate,AuthenticationServices.ASAuthorizationController,Foundation.NSError)",
			"AuthenticationServices.ASAuthorizationControllerDelegate_Extensions::DidComplete(AuthenticationServices.IASAuthorizationControllerDelegate,AuthenticationServices.ASAuthorizationController,Foundation.NSString)",
			"AuthenticationServices.ASAuthorizationControllerPresentationContextProvidingWrapper::GetPresentationAnchor(AuthenticationServices.ASAuthorizationController)",
			"AuthenticationServices.ASAuthorizationCredentialWrapper::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationCredentialWrapper::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationOpenIdRequest::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationOpenIdRequest::set_RequestedOperation(AuthenticationServices.ASAuthorizationOperation)",
			"AuthenticationServices.ASAuthorizationPasswordRequest::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertion::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertion::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertion::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertionRequest::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertionRequest::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertionRequest::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertionRequest::set_Challenge(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertionRequest::set_UserVerificationPreference(Foundation.NSString)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialDescriptor::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialDescriptor::.ctor(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialDescriptor::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialDescriptor::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialDescriptor::set_CredentialId(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialProvider::CreateCredentialAssertionRequest(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialProvider::CreateCredentialRegistrationRequest(Foundation.NSData,System.String,Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistration::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistration::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistration::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest::set_AttestationPreference(Foundation.NSString)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest::set_Challenge(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest::set_UserId(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest::set_UserVerificationPreference(Foundation.NSString)",
			"AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationRequest::Complete(AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationResult)",
			"AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationRequest::Complete(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSString>)",
			"AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationRequest::Complete(Foundation.NSError)",
			"AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationRequest::Complete(Foundation.NSHttpUrlResponse,Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationRequestHandler_Extensions::CancelAuthorization(AuthenticationServices.IASAuthorizationProviderExtensionAuthorizationRequestHandler,AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationRequest)",
			"AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationRequestHandlerWrapper::BeginAuthorization(AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationRequest)",
			"AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationResult::.ctor(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSString>)",
			"AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationResult::.ctor(Foundation.NSHttpUrlResponse,Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationResult::set_HttpResponse(Foundation.NSHttpUrlResponse)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialAssertionRequestWrapper::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialAssertionRequestWrapper::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialAssertionRequestWrapper::set_Challenge(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialAssertionRequestWrapper::set_UserVerificationPreference(Foundation.NSString)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialAssertionWrapper::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialAssertionWrapper::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialDescriptorWrapper::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialDescriptorWrapper::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialDescriptorWrapper::set_CredentialId(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialParameters::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialParameters::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialParameters::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialRegistrationRequestWrapper::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialRegistrationRequestWrapper::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialRegistrationRequestWrapper::set_AttestationPreference(Foundation.NSString)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialRegistrationRequestWrapper::set_Challenge(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialRegistrationRequestWrapper::set_UserId(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialRegistrationRequestWrapper::set_UserVerificationPreference(Foundation.NSString)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialRegistrationWrapper::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationPublicKeyCredentialRegistrationWrapper::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationRequest::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationRequest::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationRequest::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertion::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertion::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertion::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest::set_Challenge(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest::set_UserVerificationPreference(Foundation.NSString)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor::.ctor(Foundation.NSData,AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialDescriptorTransport[])",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor::set_CredentialId(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialProvider::Create(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialProvider::Create(Foundation.NSData,System.String,System.String,Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistration::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistration::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistration::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest::set_AttestationPreference(Foundation.NSString)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest::set_Challenge(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest::set_ResidentKeyPreference(AuthenticationServices.ASAuthorizationPublicKeyCredentialResidentKeyPreference)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest::set_UserId(Foundation.NSData)",
			"AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest::set_UserVerificationPreference(Foundation.NSString)",
			"AuthenticationServices.ASAuthorizationSingleSignOnCredential::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSingleSignOnCredential::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASAuthorizationSingleSignOnCredential::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASAuthorizationSingleSignOnProvider::CreateProvider(Foundation.NSUrl)",
			"AuthenticationServices.ASAuthorizationSingleSignOnRequest::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASCredentialProviderExtensionContext::CancelRequest(Foundation.NSError)",
			"AuthenticationServices.ASCredentialProviderExtensionContext::CompleteRequest(AuthenticationServices.ASPasswordCredential,AuthenticationServices.ASCredentialProviderExtensionRequestCompletionHandler)",
			"AuthenticationServices.ASCredentialProviderViewController::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASCredentialProviderViewController::PrepareInterfaceToProvideCredential(AuthenticationServices.ASPasswordCredentialIdentity)",
			"AuthenticationServices.ASCredentialProviderViewController::ProvideCredentialWithoutUserInteraction(AuthenticationServices.ASPasswordCredentialIdentity)",
			"AuthenticationServices.ASCredentialServiceIdentifier::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASCredentialServiceIdentifier::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASCredentialServiceIdentifier::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASPasswordCredential::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASPasswordCredential::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASPasswordCredential::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASPasswordCredentialIdentity::.ctor(AuthenticationServices.ASCredentialServiceIdentifier,System.String,System.String)",
			"AuthenticationServices.ASPasswordCredentialIdentity::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASPasswordCredentialIdentity::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASPasswordCredentialIdentity::Create(AuthenticationServices.ASCredentialServiceIdentifier,System.String,System.String)",
			"AuthenticationServices.ASPasswordCredentialIdentity::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASPublicKeyCredentialWrapper::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASPublicKeyCredentialWrapper::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASWebAuthenticationPresentationContextProvidingWrapper::GetPresentationAnchor(AuthenticationServices.ASWebAuthenticationSession)",
			"AuthenticationServices.ASWebAuthenticationSession::.ctor(Foundation.NSUrl,System.String,AuthenticationServices.ASWebAuthenticationSessionCompletionHandler)",
			"AuthenticationServices.ASWebAuthenticationSessionRequest::.ctor(Foundation.NSCoder)",
			"AuthenticationServices.ASWebAuthenticationSessionRequest::Cancel(Foundation.NSError)",
			"AuthenticationServices.ASWebAuthenticationSessionRequest::Complete(Foundation.NSUrl)",
			"AuthenticationServices.ASWebAuthenticationSessionRequest::Copy(Foundation.NSZone)",
			"AuthenticationServices.ASWebAuthenticationSessionRequest::EncodeTo(Foundation.NSCoder)",
			"AuthenticationServices.ASWebAuthenticationSessionRequestDelegate_Extensions::DidCancel(AuthenticationServices.IASWebAuthenticationSessionRequestDelegate,AuthenticationServices.ASWebAuthenticationSessionRequest,Foundation.NSError)",
			"AuthenticationServices.ASWebAuthenticationSessionRequestDelegate_Extensions::DidComplete(AuthenticationServices.IASWebAuthenticationSessionRequestDelegate,AuthenticationServices.ASWebAuthenticationSessionRequest,Foundation.NSUrl)",
			"AuthenticationServices.ASWebAuthenticationSessionWebBrowserSessionHandlingWrapper::BeginHandlingWebAuthenticationSessionRequest(AuthenticationServices.ASWebAuthenticationSessionRequest)",
			"AuthenticationServices.ASWebAuthenticationSessionWebBrowserSessionHandlingWrapper::CancelWebAuthenticationSessionRequest(AuthenticationServices.ASWebAuthenticationSessionRequest)",
			"AutomaticAssessmentConfiguration.AEAssessmentApplication::Copy(Foundation.NSZone)",
			"AutomaticAssessmentConfiguration.AEAssessmentConfiguration::Copy(Foundation.NSZone)",
			"AutomaticAssessmentConfiguration.AEAssessmentConfiguration::Remove(AutomaticAssessmentConfiguration.AEAssessmentApplication)",
			"AutomaticAssessmentConfiguration.AEAssessmentConfiguration::SetConfiguration(AutomaticAssessmentConfiguration.AEAssessmentParticipantConfiguration,AutomaticAssessmentConfiguration.AEAssessmentApplication)",
			"AutomaticAssessmentConfiguration.AEAssessmentParticipantConfiguration::Copy(Foundation.NSZone)",
			"AutomaticAssessmentConfiguration.AEAssessmentSession::.ctor(AutomaticAssessmentConfiguration.AEAssessmentConfiguration)",
			"AutomaticAssessmentConfiguration.AEAssessmentSession::Update(AutomaticAssessmentConfiguration.AEAssessmentConfiguration)",
			"AutomaticAssessmentConfiguration.AEAssessmentSessionDelegate_Extensions::DidBegin(AutomaticAssessmentConfiguration.IAEAssessmentSessionDelegate,AutomaticAssessmentConfiguration.AEAssessmentSession)",
			"AutomaticAssessmentConfiguration.AEAssessmentSessionDelegate_Extensions::DidEnd(AutomaticAssessmentConfiguration.IAEAssessmentSessionDelegate,AutomaticAssessmentConfiguration.AEAssessmentSession)",
			"AutomaticAssessmentConfiguration.AEAssessmentSessionDelegate_Extensions::DidUpdate(AutomaticAssessmentConfiguration.IAEAssessmentSessionDelegate,AutomaticAssessmentConfiguration.AEAssessmentSession)",
			"AutomaticAssessmentConfiguration.AEAssessmentSessionDelegate_Extensions::FailedToBegin(AutomaticAssessmentConfiguration.IAEAssessmentSessionDelegate,AutomaticAssessmentConfiguration.AEAssessmentSession,Foundation.NSError)",
			"AutomaticAssessmentConfiguration.AEAssessmentSessionDelegate_Extensions::FailedToUpdate(AutomaticAssessmentConfiguration.IAEAssessmentSessionDelegate,AutomaticAssessmentConfiguration.AEAssessmentSession,AutomaticAssessmentConfiguration.AEAssessmentConfiguration,Foundation.NSError)",
			"AutomaticAssessmentConfiguration.AEAssessmentSessionDelegate_Extensions::WasInterrupted(AutomaticAssessmentConfiguration.IAEAssessmentSessionDelegate,AutomaticAssessmentConfiguration.AEAssessmentSession,Foundation.NSError)",
			"AVFoundation.AVAsset::Copy(Foundation.NSZone)",
			"AVFoundation.AVAsset::FromUrl(Foundation.NSUrl)",
			"AVFoundation.AVAsset::GetChapterMetadataGroups(Foundation.NSLocale,AVFoundation.AVMetadataItem[])",
			"AVFoundation.AVAsset::GetMetadataForFormat(Foundation.NSString)",
			"AVFoundation.AVAsset::LoadChapterMetadataGroups(Foundation.NSLocale,System.String[],System.Action`2<Foundation.NSArray`1<AVFoundation.AVTimedMetadataGroup>,Foundation.NSError>)",
			"AVFoundation.AVAssetCache::GetMediaSelectionOptions(AVFoundation.AVMediaSelectionGroup)",
			"AVFoundation.AVAssetDownloadConfiguration::Create(AVFoundation.AVUrlAsset,System.String)",
			"AVFoundation.AVAssetDownloadConfiguration::set_ArtworkData(Foundation.NSData)",
			"AVFoundation.AVAssetDownloadContentConfiguration::Copy(Foundation.NSZone)",
			"AVFoundation.AVAssetDownloadDelegate_Extensions::DidCompleteForMediaSelection(AVFoundation.IAVAssetDownloadDelegate,Foundation.NSUrlSession,AVFoundation.AVAggregateAssetDownloadTask,AVFoundation.AVMediaSelection)",
			"AVFoundation.AVAssetDownloadDelegate_Extensions::DidFinishDownloadingToUrl(AVFoundation.IAVAssetDownloadDelegate,Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,Foundation.NSUrl)",
			"AVFoundation.AVAssetDownloadDelegate_Extensions::DidLoadTimeRange(AVFoundation.IAVAssetDownloadDelegate,Foundation.NSUrlSession,AVFoundation.AVAggregateAssetDownloadTask,CoreMedia.CMTimeRange,Foundation.NSValue[],CoreMedia.CMTimeRange,AVFoundation.AVMediaSelection)",
			"AVFoundation.AVAssetDownloadDelegate_Extensions::DidLoadTimeRange(AVFoundation.IAVAssetDownloadDelegate,Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,CoreMedia.CMTimeRange,Foundation.NSValue[],CoreMedia.CMTimeRange)",
			"AVFoundation.AVAssetDownloadDelegate_Extensions::DidResolveMediaSelection(AVFoundation.IAVAssetDownloadDelegate,Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,AVFoundation.AVMediaSelection)",
			"AVFoundation.AVAssetDownloadDelegate_Extensions::WillDownloadToUrl(AVFoundation.IAVAssetDownloadDelegate,Foundation.NSUrlSession,AVFoundation.AVAggregateAssetDownloadTask,Foundation.NSUrl)",
			"AVFoundation.AVAssetDownloadDelegate_Extensions::WillDownloadVariants(AVFoundation.IAVAssetDownloadDelegate,Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,AVFoundation.AVAssetVariant[])",
			"AVFoundation.AVAssetDownloadStorageManagementPolicy::Copy(Foundation.NSZone)",
			"AVFoundation.AVAssetDownloadStorageManagementPolicy::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVAssetDownloadStorageManager::GetStorageManagementPolicy(Foundation.NSUrl)",
			"AVFoundation.AVAssetDownloadStorageManager::SetStorageManagementPolicy(AVFoundation.AVAssetDownloadStorageManagementPolicy,Foundation.NSUrl)",
			"AVFoundation.AVAssetDownloadUrlSession::CreateSession(Foundation.NSUrlSessionConfiguration,AVFoundation.IAVAssetDownloadDelegate,Foundation.NSOperationQueue)",
			"AVFoundation.AVAssetDownloadUrlSession::GetAssetDownloadTask(AVFoundation.AVAssetDownloadConfiguration)",
			"AVFoundation.AVAssetDownloadUrlSession::GetAssetDownloadTask(AVFoundation.AVUrlAsset,AVFoundation.AVMediaSelection[],System.String,Foundation.NSData,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVAssetDownloadUrlSession::GetAssetDownloadTask(AVFoundation.AVUrlAsset,Foundation.NSUrl,Foundation.NSDictionary)",
			"AVFoundation.AVAssetDownloadUrlSession::GetAssetDownloadTask(AVFoundation.AVUrlAsset,System.String,Foundation.NSData,Foundation.NSDictionary)",
			"AVFoundation.AVAssetExportSession::.ctor(AVFoundation.AVAsset,System.String)",
			"AVFoundation.AVAssetExportSession::DetermineCompatibilityOfExportPreset(System.String,AVFoundation.AVAsset,System.String,System.Action`1<System.Boolean>)",
			"AVFoundation.AVAssetExportSession::ExportPresetsCompatibleWithAsset(AVFoundation.AVAsset)",
			"AVFoundation.AVAssetExportSession::FromAsset(AVFoundation.AVAsset,System.String)",
			"AVFoundation.AVAssetExportSession::set_AudioMix(AVFoundation.AVAudioMix)",
			"AVFoundation.AVAssetExportSession::set_AudioTimePitchAlgorithm(Foundation.NSString)",
			"AVFoundation.AVAssetExportSession::set_DirectoryForTemporaryFiles(Foundation.NSUrl)",
			"AVFoundation.AVAssetExportSession::set_MetadataItemFilter(AVFoundation.AVMetadataItemFilter)",
			"AVFoundation.AVAssetExportSession::set_OutputUrl(Foundation.NSUrl)",
			"AVFoundation.AVAssetExportSession::set_VideoComposition(AVFoundation.AVVideoComposition)",
			"AVFoundation.AVAssetImageGenerator::.ctor(AVFoundation.AVAsset)",
			"AVFoundation.AVAssetImageGenerator::FromAsset(AVFoundation.AVAsset)",
			"AVFoundation.AVAssetImageGenerator::set_ApertureMode(Foundation.NSString)",
			"AVFoundation.AVAssetImageGenerator::set_VideoComposition(AVFoundation.AVVideoComposition)",
			"AVFoundation.AVAssetReader::.ctor(AVFoundation.AVAsset,Foundation.NSError&)",
			"AVFoundation.AVAssetReader::AddOutput(AVFoundation.AVAssetReaderOutput)",
			"AVFoundation.AVAssetReader::CanAddOutput(AVFoundation.AVAssetReaderOutput)",
			"AVFoundation.AVAssetReader::FromAsset(AVFoundation.AVAsset,Foundation.NSError&)",
			"AVFoundation.AVAssetReaderAudioMixOutput::.ctor(AVFoundation.AVAssetTrack[],Foundation.NSDictionary)",
			"AVFoundation.AVAssetReaderAudioMixOutput::FromTracks(AVFoundation.AVAssetTrack[],Foundation.NSDictionary)",
			"AVFoundation.AVAssetReaderAudioMixOutput::set_AudioMix(AVFoundation.AVAudioMix)",
			"AVFoundation.AVAssetReaderAudioMixOutput::set_AudioTimePitchAlgorithm(Foundation.NSString)",
			"AVFoundation.AVAssetReaderCaptionValidationHandling_Extensions::DidVendCaption(AVFoundation.IAVAssetReaderCaptionValidationHandling,AVFoundation.AVAssetReaderOutputCaptionAdaptor,AVFoundation.AVCaption,System.String[])",
			"AVFoundation.AVAssetReaderOutputCaptionAdaptor::.ctor(AVFoundation.AVAssetReaderTrackOutput)",
			"AVFoundation.AVAssetReaderOutputCaptionAdaptor::Create(AVFoundation.AVAssetReaderTrackOutput)",
			"AVFoundation.AVAssetReaderOutputCaptionAdaptor::GetCaptionsNotPresentInPreviousGroups(AVFoundation.AVCaptionGroup)",
			"AVFoundation.AVAssetReaderOutputMetadataAdaptor::.ctor(AVFoundation.AVAssetReaderTrackOutput)",
			"AVFoundation.AVAssetReaderOutputMetadataAdaptor::Create(AVFoundation.AVAssetReaderTrackOutput)",
			"AVFoundation.AVAssetReaderSampleReferenceOutput::.ctor(AVFoundation.AVAssetTrack)",
			"AVFoundation.AVAssetReaderSampleReferenceOutput::Create(AVFoundation.AVAssetTrack)",
			"AVFoundation.AVAssetReaderTrackOutput::.ctor(AVFoundation.AVAssetTrack,Foundation.NSDictionary)",
			"AVFoundation.AVAssetReaderTrackOutput::FromTrack(AVFoundation.AVAssetTrack,Foundation.NSDictionary)",
			"AVFoundation.AVAssetReaderTrackOutput::set_AudioTimePitchAlgorithm(Foundation.NSString)",
			"AVFoundation.AVAssetReaderVideoCompositionOutput::.ctor(AVFoundation.AVAssetTrack[],Foundation.NSDictionary)",
			"AVFoundation.AVAssetReaderVideoCompositionOutput::set_VideoComposition(AVFoundation.AVVideoComposition)",
			"AVFoundation.AVAssetReaderVideoCompositionOutput::WeakFromTracks(AVFoundation.AVAssetTrack[],Foundation.NSDictionary)",
			"AVFoundation.AVAssetResourceLoader::SetDelegate(AVFoundation.IAVAssetResourceLoaderDelegate,CoreFoundation.DispatchQueue)",
			"AVFoundation.AVAssetResourceLoaderDelegate_Extensions::DidCancelAuthenticationChallenge(AVFoundation.IAVAssetResourceLoaderDelegate,AVFoundation.AVAssetResourceLoader,Foundation.NSUrlAuthenticationChallenge)",
			"AVFoundation.AVAssetResourceLoaderDelegate_Extensions::DidCancelLoadingRequest(AVFoundation.IAVAssetResourceLoaderDelegate,AVFoundation.AVAssetResourceLoader,AVFoundation.AVAssetResourceLoadingRequest)",
			"AVFoundation.AVAssetResourceLoaderDelegate_Extensions::ShouldWaitForLoadingOfRequestedResource(AVFoundation.IAVAssetResourceLoaderDelegate,AVFoundation.AVAssetResourceLoader,AVFoundation.AVAssetResourceLoadingRequest)",
			"AVFoundation.AVAssetResourceLoaderDelegate_Extensions::ShouldWaitForRenewalOfRequestedResource(AVFoundation.IAVAssetResourceLoaderDelegate,AVFoundation.AVAssetResourceLoader,AVFoundation.AVAssetResourceRenewalRequest)",
			"AVFoundation.AVAssetResourceLoaderDelegate_Extensions::ShouldWaitForResponseToAuthenticationChallenge(AVFoundation.IAVAssetResourceLoaderDelegate,AVFoundation.AVAssetResourceLoader,Foundation.NSUrlAuthenticationChallenge)",
			"AVFoundation.AVAssetResourceLoadingContentInformationRequest::set_RenewalDate(Foundation.NSDate)",
			"AVFoundation.AVAssetResourceLoadingDataRequest::Respond(Foundation.NSData)",
			"AVFoundation.AVAssetResourceLoadingRequest::FinishLoading(Foundation.NSUrlResponse,Foundation.NSData,Foundation.NSUrlRequest)",
			"AVFoundation.AVAssetResourceLoadingRequest::FinishLoadingWithError(Foundation.NSError)",
			"AVFoundation.AVAssetResourceLoadingRequest::GetPersistentContentKey(Foundation.NSData,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&)",
			"AVFoundation.AVAssetResourceLoadingRequest::GetStreamingContentKey(Foundation.NSData,Foundation.NSData,Foundation.NSDictionary,Foundation.NSError&)",
			"AVFoundation.AVAssetResourceLoadingRequest::set_Redirect(Foundation.NSUrlRequest)",
			"AVFoundation.AVAssetResourceLoadingRequest::set_Response(Foundation.NSUrlResponse)",
			"AVFoundation.AVAssetTrack/<>c::<get_FormatDescriptions>b__122_0(Foundation.NSObject)",
			"AVFoundation.AVAssetTrack/<>c::<get_FormatDescriptions>b__37_0(Foundation.NSObject)",
			"AVFoundation.AVAssetTrack/<>c::<get_FormatDescriptions>b__39_0(Foundation.NSObject)",
			"AVFoundation.AVAssetTrack::Copy(Foundation.NSZone)",
			"AVFoundation.AVAssetTrack::GetAssociatedTracks(Foundation.NSString)",
			"AVFoundation.AVAssetTrackGroup::Copy(Foundation.NSZone)",
			"AVFoundation.AVAssetVariantAudioAttributes::GetRenditionSpecificAttributes(AVFoundation.AVMediaSelectionOption)",
			"AVFoundation.AVAssetVariantQualifier::Copy(Foundation.NSZone)",
			"AVFoundation.AVAssetVariantQualifier::Create(AVFoundation.AVAssetVariant)",
			"AVFoundation.AVAssetVariantQualifier::Create(Foundation.NSPredicate)",
			"AVFoundation.AVAssetVariantQualifier::GetPredicate(System.IntPtr,AVFoundation.AVMediaSelectionOption,Foundation.NSPredicateOperatorType)",
			"AVFoundation.AVAssetWriter::.ctor(Foundation.NSUrl,System.String,Foundation.NSError&)",
			"AVFoundation.AVAssetWriter::.ctor(UniformTypeIdentifiers.UTType)",
			"AVFoundation.AVAssetWriter::AddInput(AVFoundation.AVAssetWriterInput)",
			"AVFoundation.AVAssetWriter::AddInputGroup(AVFoundation.AVAssetWriterInputGroup)",
			"AVFoundation.AVAssetWriter::CanAddInput(AVFoundation.AVAssetWriterInput)",
			"AVFoundation.AVAssetWriter::CanAddInputGroup(AVFoundation.AVAssetWriterInputGroup)",
			"AVFoundation.AVAssetWriter::CanApplyOutputSettings(Foundation.NSDictionary,System.String)",
			"AVFoundation.AVAssetWriter::FromUrl(Foundation.NSUrl,System.String,Foundation.NSError&)",
			"AVFoundation.AVAssetWriter::set_DirectoryForTemporaryFiles(Foundation.NSUrl)",
			"AVFoundation.AVAssetWriter::set_OutputFileTypeProfile(AVFoundation.AVFileTypeProfile)",
			"AVFoundation.AVAssetWriterDelegate_Extensions::DidOutputSegmentData(AVFoundation.IAVAssetWriterDelegate,AVFoundation.AVAssetWriter,Foundation.NSData,AVFoundation.AVAssetSegmentType)",
			"AVFoundation.AVAssetWriterDelegate_Extensions::DidOutputSegmentData(AVFoundation.IAVAssetWriterDelegate,AVFoundation.AVAssetWriter,Foundation.NSData,AVFoundation.AVAssetSegmentType,AVFoundation.AVAssetSegmentReport)",
			"AVFoundation.AVAssetWriterInput::.ctor(System.String,Foundation.NSDictionary)",
			"AVFoundation.AVAssetWriterInput::.ctor(System.String,Foundation.NSDictionary,CoreMedia.CMFormatDescription)",
			"AVFoundation.AVAssetWriterInput::AddTrackAssociationWithTrackOfInput(AVFoundation.AVAssetWriterInput,Foundation.NSString)",
			"AVFoundation.AVAssetWriterInput::AppendSampleBuffer(CoreMedia.CMSampleBuffer)",
			"AVFoundation.AVAssetWriterInput::CanAddTrackAssociationWithTrackOfInput(AVFoundation.AVAssetWriterInput,Foundation.NSString)",
			"AVFoundation.AVAssetWriterInput::Create(System.String,Foundation.NSDictionary,CoreMedia.CMFormatDescription)",
			"AVFoundation.AVAssetWriterInput::FromType(System.String,Foundation.NSDictionary)",
			"AVFoundation.AVAssetWriterInput::RequestMediaData(CoreFoundation.DispatchQueue,System.Action)",
			"AVFoundation.AVAssetWriterInput::set_SampleReferenceBaseUrl(Foundation.NSUrl)",
			"AVFoundation.AVAssetWriterInput::SetPassHandler(CoreFoundation.DispatchQueue,System.Action)",
			"AVFoundation.AVAssetWriterInputCaptionAdaptor::.ctor(AVFoundation.AVAssetWriterInput)",
			"AVFoundation.AVAssetWriterInputCaptionAdaptor::AppendCaption(AVFoundation.AVCaption)",
			"AVFoundation.AVAssetWriterInputCaptionAdaptor::AppendCaptionGroup(AVFoundation.AVCaptionGroup)",
			"AVFoundation.AVAssetWriterInputCaptionAdaptor::Create(AVFoundation.AVAssetWriterInput)",
			"AVFoundation.AVAssetWriterInputGroup::.ctor(AVFoundation.AVAssetWriterInput[],AVFoundation.AVAssetWriterInput)",
			"AVFoundation.AVAssetWriterInputGroup::Create(AVFoundation.AVAssetWriterInput[],AVFoundation.AVAssetWriterInput)",
			"AVFoundation.AVAssetWriterInputMetadataAdaptor::.ctor(AVFoundation.AVAssetWriterInput)",
			"AVFoundation.AVAssetWriterInputMetadataAdaptor::AppendTimedMetadataGroup(AVFoundation.AVTimedMetadataGroup)",
			"AVFoundation.AVAssetWriterInputMetadataAdaptor::Create(AVFoundation.AVAssetWriterInput)",
			"AVFoundation.AVAssetWriterInputPixelBufferAdaptor::.ctor(AVFoundation.AVAssetWriterInput,Foundation.NSDictionary)",
			"AVFoundation.AVAssetWriterInputPixelBufferAdaptor::AppendPixelBufferWithPresentationTime(CoreVideo.CVPixelBuffer,CoreMedia.CMTime)",
			"AVFoundation.AVAssetWriterInputPixelBufferAdaptor::FromInput(AVFoundation.AVAssetWriterInput,Foundation.NSDictionary)",
			"AVFoundation.AVAsynchronousCIImageFilteringRequest::Copy(Foundation.NSZone)",
			"AVFoundation.AVAsynchronousCIImageFilteringRequest::Finish(CoreImage.CIImage,CoreImage.CIContext)",
			"AVFoundation.AVAsynchronousCIImageFilteringRequest::Finish(Foundation.NSError)",
			"AVFoundation.AVAsynchronousVideoCompositionRequest::Copy(Foundation.NSZone)",
			"AVFoundation.AVAsynchronousVideoCompositionRequest::FinishWithComposedVideoFrame(CoreVideo.CVPixelBuffer)",
			"AVFoundation.AVAsynchronousVideoCompositionRequest::FinishWithError(Foundation.NSError)",
			"AVFoundation.AVAudioBuffer::Copy(Foundation.NSZone)",
			"AVFoundation.AVAudioBuffer::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVAudioChannelLayout::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVAudioChannelLayout::EncodeTo(Foundation.NSCoder)",
			"AVFoundation.AVAudioChannelLayout::IsEqual(Foundation.NSObject)",
			"AVFoundation.AVAudioCompressedBuffer::.ctor(AVFoundation.AVAudioFormat,System.UInt32)",
			"AVFoundation.AVAudioCompressedBuffer::.ctor(AVFoundation.AVAudioFormat,System.UInt32,System.IntPtr)",
			"AVFoundation.AVAudioConnectionPoint::.ctor(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioConverter::.ctor(AVFoundation.AVAudioFormat,AVFoundation.AVAudioFormat)",
			"AVFoundation.AVAudioConverter::ConvertToBuffer(AVFoundation.AVAudioBuffer,Foundation.NSError&,AVFoundation.AVAudioConverterInputHandler)",
			"AVFoundation.AVAudioConverter::ConvertToBuffer(AVFoundation.AVAudioPcmBuffer,AVFoundation.AVAudioPcmBuffer,Foundation.NSError&)",
			"AVFoundation.AVAudioConverter::set_MagicCookie(Foundation.NSData)",
			"AVFoundation.AVAudioEngine::AttachNode(AVFoundation.AVAudioNode)",
			"AVFoundation.AVAudioEngine::Connect(AVFoundation.AVAudioNode,AVFoundation.AVAudioConnectionPoint[],System.UIntPtr,AVFoundation.AVAudioFormat)",
			"AVFoundation.AVAudioEngine::Connect(AVFoundation.AVAudioNode,AVFoundation.AVAudioNode,AVFoundation.AVAudioFormat)",
			"AVFoundation.AVAudioEngine::Connect(AVFoundation.AVAudioNode,AVFoundation.AVAudioNode,System.UIntPtr,System.UIntPtr,AVFoundation.AVAudioFormat)",
			"AVFoundation.AVAudioEngine::ConnectMidi(AVFoundation.AVAudioNode,AVFoundation.AVAudioNode,AVFoundation.AVAudioFormat,AudioUnit.AUMidiOutputEventBlock)",
			"AVFoundation.AVAudioEngine::ConnectMidi(AVFoundation.AVAudioNode,AVFoundation.AVAudioNode[],AVFoundation.AVAudioFormat,AudioUnit.AUMidiOutputEventBlock)",
			"AVFoundation.AVAudioEngine::DetachNode(AVFoundation.AVAudioNode)",
			"AVFoundation.AVAudioEngine::DisconnectMidi(AVFoundation.AVAudioNode,AVFoundation.AVAudioNode)",
			"AVFoundation.AVAudioEngine::DisconnectMidi(AVFoundation.AVAudioNode,AVFoundation.AVAudioNode[])",
			"AVFoundation.AVAudioEngine::DisconnectMidiInput(AVFoundation.AVAudioNode)",
			"AVFoundation.AVAudioEngine::DisconnectMidiOutput(AVFoundation.AVAudioNode)",
			"AVFoundation.AVAudioEngine::DisconnectNodeInput(AVFoundation.AVAudioNode)",
			"AVFoundation.AVAudioEngine::DisconnectNodeInput(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioEngine::DisconnectNodeOutput(AVFoundation.AVAudioNode)",
			"AVFoundation.AVAudioEngine::DisconnectNodeOutput(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioEngine::EnableManualRenderingMode(AVFoundation.AVAudioEngineManualRenderingMode,AVFoundation.AVAudioFormat,System.UInt32,Foundation.NSError&)",
			"AVFoundation.AVAudioEngine::InputConnectionPoint(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioEngine::OutputConnectionPoints(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioEngine::RenderOffline(System.UInt32,AVFoundation.AVAudioPcmBuffer,Foundation.NSError&)",
			"AVFoundation.AVAudioEngine::set_MusicSequence(AudioToolbox.MusicSequence)",
			"AVFoundation.AVAudioEnvironmentNode::DestinationForMixer(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioFile::.ctor(Foundation.NSUrl,AVFoundation.AVAudioCommonFormat,System.Boolean,Foundation.NSError&)",
			"AVFoundation.AVAudioFile::.ctor(Foundation.NSUrl,Foundation.NSDictionary,AVFoundation.AVAudioCommonFormat,System.Boolean,Foundation.NSError&)",
			"AVFoundation.AVAudioFile::.ctor(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"AVFoundation.AVAudioFile::.ctor(Foundation.NSUrl,Foundation.NSError&)",
			"AVFoundation.AVAudioFile::ReadIntoBuffer(AVFoundation.AVAudioPcmBuffer,Foundation.NSError&)",
			"AVFoundation.AVAudioFile::ReadIntoBuffer(AVFoundation.AVAudioPcmBuffer,System.UInt32,Foundation.NSError&)",
			"AVFoundation.AVAudioFile::WriteFromBuffer(AVFoundation.AVAudioPcmBuffer,Foundation.NSError&)",
			"AVFoundation.AVAudioFormat::.ctor(AudioToolbox.AudioStreamBasicDescription&,AVFoundation.AVAudioChannelLayout)",
			"AVFoundation.AVAudioFormat::.ctor(AVFoundation.AVAudioCommonFormat,System.Double,System.Boolean,AVFoundation.AVAudioChannelLayout)",
			"AVFoundation.AVAudioFormat::.ctor(CoreMedia.CMAudioFormatDescription)",
			"AVFoundation.AVAudioFormat::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVAudioFormat::.ctor(Foundation.NSDictionary)",
			"AVFoundation.AVAudioFormat::.ctor(System.Double,AVFoundation.AVAudioChannelLayout)",
			"AVFoundation.AVAudioFormat::EncodeTo(Foundation.NSCoder)",
			"AVFoundation.AVAudioFormat::IsEqual(Foundation.NSObject)",
			"AVFoundation.AVAudioFormat::set_MagicCookie(Foundation.NSData)",
			"AVFoundation.AVAudioInputNode::DestinationForMixer(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioInputNode::SetManualRenderingInputPcmFormat(AVFoundation.AVAudioFormat,AVFoundation.AVAudioIONodeInputBlock)",
			"AVFoundation.AVAudioMix::Copy(Foundation.NSZone)",
			"AVFoundation.AVAudioMix::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVAudioMixerNode::DestinationForMixer(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioMixingDestination::DestinationForMixer(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioMixingWrapper::DestinationForMixer(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioMixInputParameters::Copy(Foundation.NSZone)",
			"AVFoundation.AVAudioMixInputParameters::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVAudioNode::InstallTapOnBus(System.UIntPtr,System.UInt32,AVFoundation.AVAudioFormat,AVFoundation.AVAudioNodeTapBlock)",
			"AVFoundation.AVAudioPcmBuffer::.ctor(AVFoundation.AVAudioFormat,AudioToolbox.AudioBuffers,System.Action`1<AudioToolbox.AudioBuffers>)",
			"AVFoundation.AVAudioPcmBuffer::.ctor(AVFoundation.AVAudioFormat,System.UInt32)",
			"AVFoundation.AVAudioPlayer::.ctor(Foundation.NSData,System.IntPtr)",
			"AVFoundation.AVAudioPlayer::.ctor(Foundation.NSData,System.String,Foundation.NSError&)",
			"AVFoundation.AVAudioPlayer::.ctor(Foundation.NSUrl,System.IntPtr)",
			"AVFoundation.AVAudioPlayer::.ctor(Foundation.NSUrl,System.String,Foundation.NSError&)",
			"AVFoundation.AVAudioPlayerDelegate_Extensions::BeginInterruption(AVFoundation.IAVAudioPlayerDelegate,AVFoundation.AVAudioPlayer)",
			"AVFoundation.AVAudioPlayerDelegate_Extensions::DecoderError(AVFoundation.IAVAudioPlayerDelegate,AVFoundation.AVAudioPlayer,Foundation.NSError)",
			"AVFoundation.AVAudioPlayerDelegate_Extensions::EndInterruption(AVFoundation.IAVAudioPlayerDelegate,AVFoundation.AVAudioPlayer)",
			"AVFoundation.AVAudioPlayerDelegate_Extensions::EndInterruption(AVFoundation.IAVAudioPlayerDelegate,AVFoundation.AVAudioPlayer,AVFoundation.AVAudioSessionInterruptionOptions)",
			"AVFoundation.AVAudioPlayerDelegate_Extensions::FinishedPlaying(AVFoundation.IAVAudioPlayerDelegate,AVFoundation.AVAudioPlayer,System.Boolean)",
			"AVFoundation.AVAudioPlayerNode::DestinationForMixer(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioPlayerNode::GetNodeTimeFromPlayerTime(AVFoundation.AVAudioTime)",
			"AVFoundation.AVAudioPlayerNode::GetPlayerTimeFromNodeTime(AVFoundation.AVAudioTime)",
			"AVFoundation.AVAudioPlayerNode::PlayAtTime(AVFoundation.AVAudioTime)",
			"AVFoundation.AVAudioPlayerNode::ScheduleBuffer(AVFoundation.AVAudioPcmBuffer,AVFoundation.AVAudioPlayerNodeCompletionCallbackType,System.Action`1<AVFoundation.AVAudioPlayerNodeCompletionCallbackType>)",
			"AVFoundation.AVAudioPlayerNode::ScheduleBuffer(AVFoundation.AVAudioPcmBuffer,AVFoundation.AVAudioTime,AVFoundation.AVAudioPlayerNodeBufferOptions,AVFoundation.AVAudioPlayerNodeCompletionCallbackType,System.Action`1<AVFoundation.AVAudioPlayerNodeCompletionCallbackType>)",
			"AVFoundation.AVAudioPlayerNode::ScheduleBuffer(AVFoundation.AVAudioPcmBuffer,AVFoundation.AVAudioTime,AVFoundation.AVAudioPlayerNodeBufferOptions,System.Action)",
			"AVFoundation.AVAudioPlayerNode::ScheduleBuffer(AVFoundation.AVAudioPcmBuffer,System.Action)",
			"AVFoundation.AVAudioPlayerNode::ScheduleFile(AVFoundation.AVAudioFile,AVFoundation.AVAudioTime,AVFoundation.AVAudioPlayerNodeCompletionCallbackType,System.Action`1<AVFoundation.AVAudioPlayerNodeCompletionCallbackType>)",
			"AVFoundation.AVAudioPlayerNode::ScheduleFile(AVFoundation.AVAudioFile,AVFoundation.AVAudioTime,System.Action)",
			"AVFoundation.AVAudioPlayerNode::ScheduleSegment(AVFoundation.AVAudioFile,System.Int64,System.UInt32,AVFoundation.AVAudioTime,AVFoundation.AVAudioPlayerNodeCompletionCallbackType,System.Action`1<AVFoundation.AVAudioPlayerNodeCompletionCallbackType>)",
			"AVFoundation.AVAudioPlayerNode::ScheduleSegment(AVFoundation.AVAudioFile,System.Int64,System.UInt32,AVFoundation.AVAudioTime,System.Action)",
			"AVFoundation.AVAudioRecorder::InitWithUrl(Foundation.NSUrl,AVFoundation.AVAudioFormat,Foundation.NSError&)",
			"AVFoundation.AVAudioRecorder::InitWithUrl(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"AVFoundation.AVAudioRecorderDelegate_Extensions::BeginInterruption(AVFoundation.IAVAudioRecorderDelegate,AVFoundation.AVAudioRecorder)",
			"AVFoundation.AVAudioRecorderDelegate_Extensions::EncoderError(AVFoundation.IAVAudioRecorderDelegate,AVFoundation.AVAudioRecorder,Foundation.NSError)",
			"AVFoundation.AVAudioRecorderDelegate_Extensions::EndInterruption(AVFoundation.IAVAudioRecorderDelegate,AVFoundation.AVAudioRecorder)",
			"AVFoundation.AVAudioRecorderDelegate_Extensions::EndInterruption(AVFoundation.IAVAudioRecorderDelegate,AVFoundation.AVAudioRecorder,AVFoundation.AVAudioSessionInterruptionOptions)",
			"AVFoundation.AVAudioRecorderDelegate_Extensions::FinishedRecording(AVFoundation.IAVAudioRecorderDelegate,AVFoundation.AVAudioRecorder,System.Boolean)",
			"AVFoundation.AVAudioSequencer::.ctor(AVFoundation.AVAudioEngine)",
			"AVFoundation.AVAudioSequencer::Load(Foundation.NSData,AVFoundation.AVMusicSequenceLoadOptions,Foundation.NSError&)",
			"AVFoundation.AVAudioSequencer::Load(Foundation.NSUrl,AVFoundation.AVMusicSequenceLoadOptions,Foundation.NSError&)",
			"AVFoundation.AVAudioSequencer::Write(Foundation.NSUrl,System.IntPtr,System.Boolean,Foundation.NSError&)",
			"AVFoundation.AVAudioSession::SetCategory(Foundation.NSString,Foundation.NSError&)",
			"AVFoundation.AVAudioSession::SetInputDataSource(AVFoundation.AVAudioSessionDataSourceDescription,Foundation.NSError&)",
			"AVFoundation.AVAudioSession::SetMode(Foundation.NSString,Foundation.NSError&)",
			"AVFoundation.AVAudioSession::SetOutputDataSource(AVFoundation.AVAudioSessionDataSourceDescription,Foundation.NSError&)",
			"AVFoundation.AVAudioSession::SetPreferredInput(AVFoundation.AVAudioSessionPortDescription,Foundation.NSError&)",
			"AVFoundation.AVAudioSessionDataSourceDescription::SetPreferredPolarPattern_(Foundation.NSString,Foundation.NSError&)",
			"AVFoundation.AVAudioSessionDelegate_Extensions::BeginInterruption(AVFoundation.IAVAudioSessionDelegate)",
			"AVFoundation.AVAudioSessionDelegate_Extensions::EndInterruption(AVFoundation.IAVAudioSessionDelegate)",
			"AVFoundation.AVAudioSessionDelegate_Extensions::EndInterruption(AVFoundation.IAVAudioSessionDelegate,AVFoundation.AVAudioSessionInterruptionOptions)",
			"AVFoundation.AVAudioSessionDelegate_Extensions::InputIsAvailableChanged(AVFoundation.IAVAudioSessionDelegate,System.Boolean)",
			"AVFoundation.AVAudioSessionPortDescription::SetPreferredDataSource(AVFoundation.AVAudioSessionDataSourceDescription,Foundation.NSError&)",
			"AVFoundation.AVAudioSourceNode::.ctor(AVFoundation.AVAudioFormat,AVFoundation.AVAudioSourceNodeRenderHandler)",
			"AVFoundation.AVAudioSourceNode::DestinationForMixer(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioTime::ExtrapolateTimeFromAnchor(AVFoundation.AVAudioTime)",
			"AVFoundation.AVAudioUnit::LoadAudioUnitPreset(Foundation.NSUrl,Foundation.NSError&)",
			"AVFoundation.AVAudioUnitComponentManager::GetComponents(Foundation.NSPredicate)",
			"AVFoundation.AVAudioUnitGenerator::DestinationForMixer(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioUnitMidiInstrument::DestinationForMixer(AVFoundation.AVAudioNode,System.UIntPtr)",
			"AVFoundation.AVAudioUnitMidiInstrument::SendMidiSysExEvent(Foundation.NSData)",
			"AVFoundation.AVAudioUnitSampler::LoadInstrument(Foundation.NSUrl,Foundation.NSError&)",
			"AVFoundation.AVAudioUnitSampler::LoadSoundBank(Foundation.NSUrl,System.Byte,System.Byte,System.Byte,Foundation.NSError&)",
			"AVFoundation.AVCaption::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVCaption::Copy(Foundation.NSZone)",
			"AVFoundation.AVCaption::EncodeTo(Foundation.NSCoder)",
			"AVFoundation.AVCaption::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVCaptionConversionValidator::.ctor(AVFoundation.AVCaption[],CoreMedia.CMTimeRange,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVCaptionConversionValidator::Create(AVFoundation.AVCaption[],CoreMedia.CMTimeRange,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVCaptionFormatConformer::.ctor(Foundation.NSDictionary)",
			"AVFoundation.AVCaptionFormatConformer::CreateFromSettings(Foundation.NSDictionary)",
			"AVFoundation.AVCaptionFormatConformer::GetConformedCaption(AVFoundation.AVCaption,Foundation.NSError&)",
			"AVFoundation.AVCaptionGrouper::AddCaption(AVFoundation.AVCaption)",
			"AVFoundation.AVCaptionRegion::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVCaptionRegion::Copy(Foundation.NSZone)",
			"AVFoundation.AVCaptionRegion::EncodeTo(Foundation.NSCoder)",
			"AVFoundation.AVCaptionRegion::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVCaptionRenderer::Render(CoreGraphics.CGContext,CoreMedia.CMTime)",
			"AVFoundation.AVCaptionRendererScene::Copy(Foundation.NSZone)",
			"AVFoundation.AVCaptionRuby::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVCaptionRuby::Copy(Foundation.NSZone)",
			"AVFoundation.AVCaptionRuby::EncodeTo(Foundation.NSCoder)",
			"AVFoundation.AVCaptureAudioDataOutput::set_WeakAudioSettings(Foundation.NSDictionary)",
			"AVFoundation.AVCaptureAudioDataOutput::SetSampleBufferDelegate(AVFoundation.IAVCaptureAudioDataOutputSampleBufferDelegate,CoreFoundation.DispatchQueue)",
			"AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate_Extensions::DidOutputSampleBuffer(AVFoundation.IAVCaptureAudioDataOutputSampleBufferDelegate,AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureAudioFileOutput::set_WeakAudioSettings(Foundation.NSDictionary)",
			"AVFoundation.AVCaptureAudioFileOutput::StartRecording(Foundation.NSUrl,System.String,AVFoundation.IAVCaptureFileOutputRecordingDelegate)",
			"AVFoundation.AVCaptureAudioPreviewOutput::set_OutputDeviceUniqueID(Foundation.NSString)",
			"AVFoundation.AVCaptureConnection::.ctor(AVFoundation.AVCaptureInputPort,AVFoundation.AVCaptureVideoPreviewLayer)",
			"AVFoundation.AVCaptureConnection::.ctor(AVFoundation.AVCaptureInputPort[],AVFoundation.AVCaptureOutput)",
			"AVFoundation.AVCaptureConnection::FromInputPort(AVFoundation.AVCaptureInputPort,AVFoundation.AVCaptureVideoPreviewLayer)",
			"AVFoundation.AVCaptureConnection::FromInputPorts(AVFoundation.AVCaptureInputPort[],AVFoundation.AVCaptureOutput)",
			"AVFoundation.AVCaptureDataOutputSynchronizer::SetDelegate(AVFoundation.IAVCaptureDataOutputSynchronizerDelegate,CoreFoundation.DispatchQueue)",
			"AVFoundation.AVCaptureDataOutputSynchronizerDelegateWrapper::DidOutputSynchronizedDataCollection(AVFoundation.AVCaptureDataOutputSynchronizer,AVFoundation.AVCaptureSynchronizedDataCollection)",
			"AVFoundation.AVCaptureDepthDataOutput::SetDelegate(AVFoundation.IAVCaptureDepthDataOutputDelegate,CoreFoundation.DispatchQueue)",
			"AVFoundation.AVCaptureDepthDataOutputDelegate_Extensions::DidDropDepthData(AVFoundation.IAVCaptureDepthDataOutputDelegate,AVFoundation.AVCaptureDepthDataOutput,AVFoundation.AVDepthData,CoreMedia.CMTime,AVFoundation.AVCaptureConnection,AVFoundation.AVCaptureOutputDataDroppedReason)",
			"AVFoundation.AVCaptureDepthDataOutputDelegate_Extensions::DidOutputDepthData(AVFoundation.IAVCaptureDepthDataOutputDelegate,AVFoundation.AVCaptureDepthDataOutput,AVFoundation.AVDepthData,CoreMedia.CMTime,AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureDevice::_DefaultDeviceWithDeviceType(Foundation.NSString,System.String,AVFoundation.AVCaptureDevicePosition)",
			"AVFoundation.AVCaptureDevice::GetAuthorizationStatus(Foundation.NSString)",
			"AVFoundation.AVCaptureDevice::GetDefaultDevice(AVFoundation.AVCaptureDeviceType,AVFoundation.AVMediaTypes,AVFoundation.AVCaptureDevicePosition)",
			"AVFoundation.AVCaptureDevice::GetDefaultDevice(Foundation.NSString)",
			"AVFoundation.AVCaptureDevice::GetExtrinsicMatrix(AVFoundation.AVCaptureDevice,AVFoundation.AVCaptureDevice)",
			"AVFoundation.AVCaptureDevice::RequestAccessForMediaType(Foundation.NSString,AVFoundation.AVRequestAccessStatus)",
			"AVFoundation.AVCaptureDevice::set_ActiveDepthDataFormat(AVFoundation.AVCaptureDeviceFormat)",
			"AVFoundation.AVCaptureDevice::set_ActiveFormat(AVFoundation.AVCaptureDeviceFormat)",
			"AVFoundation.AVCaptureDevice::set_ActiveInputSource(AVFoundation.AVCaptureDeviceInputSource)",
			"AVFoundation.AVCaptureDeviceDiscoverySession::Create(AVFoundation.AVCaptureDeviceType[],AVFoundation.AVMediaTypes,AVFoundation.AVCaptureDevicePosition)",
			"AVFoundation.AVCaptureDeviceInput::.ctor(AVFoundation.AVCaptureDevice,Foundation.NSError&)",
			"AVFoundation.AVCaptureDeviceInput::FromDevice(AVFoundation.AVCaptureDevice,Foundation.NSError&)",
			"AVFoundation.AVCaptureDeviceInput::GetPorts(AVFoundation.AVMediaTypes,AVFoundation.AVCaptureDeviceType,AVFoundation.AVCaptureDevicePosition)",
			"AVFoundation.AVCaptureFileOutput::StartRecordingToOutputFile(Foundation.NSUrl,AVFoundation.IAVCaptureFileOutputRecordingDelegate)",
			"AVFoundation.AVCaptureFileOutputDelegate_Extensions::DidOutputSampleBuffer(AVFoundation.IAVCaptureFileOutputDelegate,AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureFileOutputDelegateWrapper::ShouldProvideSampleAccurateRecordingStart(AVFoundation.AVCaptureOutput)",
			"AVFoundation.AVCaptureFileOutputRecordingDelegate_Extensions::DidPauseRecording(AVFoundation.IAVCaptureFileOutputRecordingDelegate,AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,AVFoundation.AVCaptureConnection[])",
			"AVFoundation.AVCaptureFileOutputRecordingDelegate_Extensions::DidResumeRecording(AVFoundation.IAVCaptureFileOutputRecordingDelegate,AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,AVFoundation.AVCaptureConnection[])",
			"AVFoundation.AVCaptureFileOutputRecordingDelegate_Extensions::DidStartRecording(AVFoundation.IAVCaptureFileOutputRecordingDelegate,AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,Foundation.NSObject[])",
			"AVFoundation.AVCaptureFileOutputRecordingDelegate_Extensions::WillFinishRecording(AVFoundation.IAVCaptureFileOutputRecordingDelegate,AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,AVFoundation.AVCaptureConnection[],Foundation.NSError)",
			"AVFoundation.AVCaptureFileOutputRecordingDelegateWrapper::FinishedRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,Foundation.NSObject[],Foundation.NSError)",
			"AVFoundation.AVCaptureMetadataInput::.ctor(System.IntPtr,CoreMedia.CMClock)",
			"AVFoundation.AVCaptureMetadataInput::AppendTimedMetadataGroup(AVFoundation.AVTimedMetadataGroup,Foundation.NSError&)",
			"AVFoundation.AVCaptureMetadataInput::MetadataInputWithFormatDescription(System.IntPtr,CoreMedia.CMClock)",
			"AVFoundation.AVCaptureMetadataOutput::SetDelegate(AVFoundation.IAVCaptureMetadataOutputObjectsDelegate,CoreFoundation.DispatchQueue)",
			"AVFoundation.AVCaptureMetadataOutputObjectsDelegate_Extensions::DidOutputMetadataObjects(AVFoundation.IAVCaptureMetadataOutputObjectsDelegate,AVFoundation.AVCaptureMetadataOutput,AVFoundation.AVMetadataObject[],AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureMovieFileOutput::GetOutputSettings(AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureMovieFileOutput::GetSupportedOutputSettingsKeys(AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureMovieFileOutput::RecordsVideoOrientationAndMirroringChangesAsMetadataTrack(AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureMovieFileOutput::SetOutputSettings(Foundation.NSDictionary,AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureMovieFileOutput::SetRecordsVideoOrientationAndMirroringChanges(System.Boolean,AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureOutput::ConnectionFromMediaType(Foundation.NSString)",
			"AVFoundation.AVCaptureOutput::GetTransformedMetadataObject(AVFoundation.AVMetadataObject,AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCapturePhoto::GetFileDataRepresentation(AVFoundation.IAVCapturePhotoFileDataRepresentationCustomizer)",
			"AVFoundation.AVCapturePhoto::GetFileDataRepresentation(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,CoreVideo.CVPixelBuffer,AVFoundation.AVDepthData)",
			"AVFoundation.AVCapturePhoto::GetSemanticSegmentationMatte(AVFoundation.AVSemanticSegmentationMatteType)",
			"AVFoundation.AVCapturePhotoBracketSettings::FromPhotoBracketSettings(System.UInt32,System.String,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.String,AVFoundation.AVCaptureBracketedStillImageSettings[])",
			"AVFoundation.AVCapturePhotoBracketSettings::FromRawPixelFormatType(System.UInt32,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,AVFoundation.AVCaptureBracketedStillImageSettings[])",
			"AVFoundation.AVCapturePhotoCaptureDelegate_Extensions::DidCapturePhoto(AVFoundation.IAVCapturePhotoCaptureDelegate,AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)",
			"AVFoundation.AVCapturePhotoCaptureDelegate_Extensions::DidFinishCapture(AVFoundation.IAVCapturePhotoCaptureDelegate,AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings,Foundation.NSError)",
			"AVFoundation.AVCapturePhotoCaptureDelegate_Extensions::DidFinishProcessingLivePhotoMovie(AVFoundation.IAVCapturePhotoCaptureDelegate,AVFoundation.AVCapturePhotoOutput,Foundation.NSUrl,CoreMedia.CMTime,CoreMedia.CMTime,AVFoundation.AVCaptureResolvedPhotoSettings,Foundation.NSError)",
			"AVFoundation.AVCapturePhotoCaptureDelegate_Extensions::DidFinishProcessingPhoto(AVFoundation.IAVCapturePhotoCaptureDelegate,AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCapturePhoto,Foundation.NSError)",
			"AVFoundation.AVCapturePhotoCaptureDelegate_Extensions::DidFinishProcessingPhoto(AVFoundation.IAVCapturePhotoCaptureDelegate,AVFoundation.AVCapturePhotoOutput,CoreMedia.CMSampleBuffer,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureResolvedPhotoSettings,AVFoundation.AVCaptureBracketedStillImageSettings,Foundation.NSError)",
			"AVFoundation.AVCapturePhotoCaptureDelegate_Extensions::DidFinishProcessingRawPhoto(AVFoundation.IAVCapturePhotoCaptureDelegate,AVFoundation.AVCapturePhotoOutput,CoreMedia.CMSampleBuffer,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureResolvedPhotoSettings,AVFoundation.AVCaptureBracketedStillImageSettings,Foundation.NSError)",
			"AVFoundation.AVCapturePhotoCaptureDelegate_Extensions::DidFinishRecordingLivePhotoMovie(AVFoundation.IAVCapturePhotoCaptureDelegate,AVFoundation.AVCapturePhotoOutput,Foundation.NSUrl,AVFoundation.AVCaptureResolvedPhotoSettings)",
			"AVFoundation.AVCapturePhotoCaptureDelegate_Extensions::WillBeginCapture(AVFoundation.IAVCapturePhotoCaptureDelegate,AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)",
			"AVFoundation.AVCapturePhotoCaptureDelegate_Extensions::WillCapturePhoto(AVFoundation.IAVCapturePhotoCaptureDelegate,AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)",
			"AVFoundation.AVCapturePhotoFileDataRepresentationCustomizer_Extensions::GetReplacementAppleProRawCompressionSettings(AVFoundation.IAVCapturePhotoFileDataRepresentationCustomizer,AVFoundation.AVCapturePhoto,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.IntPtr)",
			"AVFoundation.AVCapturePhotoFileDataRepresentationCustomizer_Extensions::GetReplacementDepthData(AVFoundation.IAVCapturePhotoFileDataRepresentationCustomizer,AVFoundation.AVCapturePhoto)",
			"AVFoundation.AVCapturePhotoFileDataRepresentationCustomizer_Extensions::GetReplacementEmbeddedThumbnail(AVFoundation.IAVCapturePhotoFileDataRepresentationCustomizer,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>&,AVFoundation.AVCapturePhoto)",
			"AVFoundation.AVCapturePhotoFileDataRepresentationCustomizer_Extensions::GetReplacementMetadata(AVFoundation.IAVCapturePhotoFileDataRepresentationCustomizer,AVFoundation.AVCapturePhoto)",
			"AVFoundation.AVCapturePhotoFileDataRepresentationCustomizer_Extensions::GetReplacementPortraitEffectsMatte(AVFoundation.IAVCapturePhotoFileDataRepresentationCustomizer,AVFoundation.AVCapturePhoto)",
			"AVFoundation.AVCapturePhotoFileDataRepresentationCustomizer_Extensions::GetReplacementSemanticSegmentationMatte(AVFoundation.IAVCapturePhotoFileDataRepresentationCustomizer,Foundation.NSString,AVFoundation.AVCapturePhoto)",
			"AVFoundation.AVCapturePhotoOutput::CapturePhoto(AVFoundation.AVCapturePhotoSettings,AVFoundation.IAVCapturePhotoCaptureDelegate)",
			"AVFoundation.AVCapturePhotoOutput::GetDngPhotoDataRepresentation(CoreMedia.CMSampleBuffer,CoreMedia.CMSampleBuffer)",
			"AVFoundation.AVCapturePhotoOutput::GetJpegPhotoDataRepresentation(CoreMedia.CMSampleBuffer,CoreMedia.CMSampleBuffer)",
			"AVFoundation.AVCapturePhotoOutput::set_PhotoSettingsForSceneMonitoring(AVFoundation.AVCapturePhotoSettings)",
			"AVFoundation.AVCapturePhotoSettings::Copy(Foundation.NSZone)",
			"AVFoundation.AVCapturePhotoSettings::FromFormat(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVCapturePhotoSettings::FromPhotoSettings(AVFoundation.AVCapturePhotoSettings)",
			"AVFoundation.AVCapturePhotoSettings::FromRawPixelFormatType(System.UInt32,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVCapturePhotoSettings::FromRawPixelFormatType(System.UInt32,System.String,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.String)",
			"AVFoundation.AVCapturePhotoSettings::set_LivePhotoMovieFileUrl(Foundation.NSUrl)",
			"AVFoundation.AVCapturePhotoSettings::set_Metadata(Foundation.NSDictionary)",
			"AVFoundation.AVCapturePhotoSettings::set_PreviewPhotoFormat(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVCapturePhotoSettings::set_WeakEmbeddedThumbnailPhotoFormat(Foundation.NSDictionary)",
			"AVFoundation.AVCapturePhotoSettings::set_WeakRawEmbeddedThumbnailPhotoFormat(Foundation.NSDictionary)",
			"AVFoundation.AVCaptureResolvedPhotoSettings::GetDimensions(AVFoundation.AVSemanticSegmentationMatteType)",
			"AVFoundation.AVCaptureSession::AddConnection(AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureSession::AddInput(AVFoundation.AVCaptureInput)",
			"AVFoundation.AVCaptureSession::AddInputWithNoConnections(AVFoundation.AVCaptureInput)",
			"AVFoundation.AVCaptureSession::AddOutput(AVFoundation.AVCaptureOutput)",
			"AVFoundation.AVCaptureSession::AddOutputWithNoConnections(AVFoundation.AVCaptureOutput)",
			"AVFoundation.AVCaptureSession::CanAddConnection(AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureSession::CanAddInput(AVFoundation.AVCaptureInput)",
			"AVFoundation.AVCaptureSession::CanAddOutput(AVFoundation.AVCaptureOutput)",
			"AVFoundation.AVCaptureSession::CanSetSessionPreset(Foundation.NSString)",
			"AVFoundation.AVCaptureSession::RemoveConnection(AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureSession::RemoveInput(AVFoundation.AVCaptureInput)",
			"AVFoundation.AVCaptureSession::RemoveOutput(AVFoundation.AVCaptureOutput)",
			"AVFoundation.AVCaptureSession::set_SessionPreset(Foundation.NSString)",
			"AVFoundation.AVCaptureStillImageOutput::CaptureStillImageAsynchronously(AVFoundation.AVCaptureConnection,AVFoundation.AVCaptureCompletionHandler)",
			"AVFoundation.AVCaptureStillImageOutput::CaptureStillImageBracket(AVFoundation.AVCaptureConnection,AVFoundation.AVCaptureBracketedStillImageSettings[],System.Action`3<CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureBracketedStillImageSettings,Foundation.NSError>)",
			"AVFoundation.AVCaptureStillImageOutput::JpegStillToNSData(CoreMedia.CMSampleBuffer)",
			"AVFoundation.AVCaptureStillImageOutput::PrepareToCaptureStillImageBracket(AVFoundation.AVCaptureConnection,AVFoundation.AVCaptureBracketedStillImageSettings[],System.Action`2<System.Boolean,Foundation.NSError>)",
			"AVFoundation.AVCaptureStillImageOutput::set_OutputSettings(Foundation.NSDictionary)",
			"AVFoundation.AVCaptureSynchronizedDataCollection::GetSynchronizedData(AVFoundation.AVCaptureOutput)",
			"AVFoundation.AVCaptureVideoDataOutput::set_WeakVideoSettings(Foundation.NSDictionary)",
			"AVFoundation.AVCaptureVideoDataOutput::SetSampleBufferDelegate(AVFoundation.IAVCaptureVideoDataOutputSampleBufferDelegate,CoreFoundation.DispatchQueue)",
			"AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate_Extensions::DidDropSampleBuffer(AVFoundation.IAVCaptureVideoDataOutputSampleBufferDelegate,AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate_Extensions::DidOutputSampleBuffer(AVFoundation.IAVCaptureVideoDataOutputSampleBufferDelegate,AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)",
			"AVFoundation.AVCaptureVideoPreviewLayer::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVCaptureVideoPreviewLayer::CreateWithNoConnection(AVFoundation.AVCaptureSession)",
			"AVFoundation.AVCaptureVideoPreviewLayer::FromSession(AVFoundation.AVCaptureSession)",
			"AVFoundation.AVCaptureVideoPreviewLayer::GetTransformedMetadataObject(AVFoundation.AVMetadataObject)",
			"AVFoundation.AVCaptureVideoPreviewLayer::InitWithConnection(AVFoundation.AVCaptureSession)",
			"AVFoundation.AVCaptureVideoPreviewLayer::InitWithNoConnection(AVFoundation.AVCaptureSession)",
			"AVFoundation.AVCaptureVideoPreviewLayer::set_Session(AVFoundation.AVCaptureSession)",
			"AVFoundation.AVCaptureVideoPreviewLayer::set_WeakVideoGravity(Foundation.NSString)",
			"AVFoundation.AVCaptureVideoPreviewLayer::SetSessionWithNoConnection(AVFoundation.AVCaptureSession)",
			"AVFoundation.AVComposition::Copy(Foundation.NSZone)",
			"AVFoundation.AVComposition::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVComposition_AVCompositionTrackInspection::GetTrack(AVFoundation.AVComposition,System.Int32)",
			"AVFoundation.AVComposition_AVCompositionTrackInspection::GetTracks(AVFoundation.AVComposition,System.String)",
			"AVFoundation.AVComposition_AVCompositionTrackInspection::GetTracksWithMediaCharacteristic(AVFoundation.AVComposition,System.String)",
			"AVFoundation.AVComposition_AVCompositionTrackInspection::LoadTrack(AVFoundation.AVComposition,System.Int32,System.Action`2<AVFoundation.AVMutableCompositionTrack,Foundation.NSError>)",
			"AVFoundation.AVComposition_AVCompositionTrackInspection::LoadTracksWithMediaCharacteristic(AVFoundation.AVComposition,System.String,System.Action`2<Foundation.NSArray`1<AVFoundation.AVMutableCompositionTrack>,Foundation.NSError>)",
			"AVFoundation.AVComposition_AVCompositionTrackInspection::LoadTracksWithMediaType(AVFoundation.AVComposition,System.String,System.Action`2<Foundation.NSArray`1<AVFoundation.AVMutableCompositionTrack>,Foundation.NSError>)",
			"AVFoundation.AVCompositionTrackFormatDescriptionReplacement::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVCompositionTrackFormatDescriptionReplacement::EncodeTo(Foundation.NSCoder)",
			"AVFoundation.AVCompositionTrackSegment::.ctor(Foundation.NSUrl,System.Int32,CoreMedia.CMTimeRange,CoreMedia.CMTimeRange)",
			"AVFoundation.AVCompositionTrackSegment::FromUrl(Foundation.NSUrl,System.Int32,CoreMedia.CMTimeRange,CoreMedia.CMTimeRange)",
			"AVFoundation.AVContentKeyRecipient_Extensions::DidProvideContentKey(AVFoundation.IAVContentKeyRecipient,AVFoundation.AVContentKeySession,AVFoundation.AVContentKey)",
			"AVFoundation.AVContentKeyRequest::MakeStreamingContentKeyRequestData(Foundation.NSData,Foundation.NSData,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"AVFoundation.AVContentKeyRequest::Process(AVFoundation.AVContentKeyResponse)",
			"AVFoundation.AVContentKeyRequest::Process(Foundation.NSError)",
			"AVFoundation.AVContentKeyRequest_AVContentKeyRequestRenewal::GetRenewsExpiringResponseData(AVFoundation.AVContentKeyRequest)",
			"AVFoundation.AVContentKeyResponse::_InitWithAuthorizationToken(Foundation.NSData)",
			"AVFoundation.AVContentKeyResponse::_InitWithFairPlayStreamingKeyResponseData(Foundation.NSData)",
			"AVFoundation.AVContentKeyResponse::Create(Foundation.NSData,Foundation.NSData)",
			"AVFoundation.AVContentKeySession::Create(Foundation.NSString,Foundation.NSUrl)",
			"AVFoundation.AVContentKeySession::GetPendingExpiredSessionReports(Foundation.NSData,Foundation.NSUrl)",
			"AVFoundation.AVContentKeySession::InvalidateAllPersistableContentKeys(Foundation.NSData,Foundation.NSDictionary,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"AVFoundation.AVContentKeySession::InvalidatePersistableContentKey(Foundation.NSData,Foundation.NSDictionary,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"AVFoundation.AVContentKeySession::MakeSecureToken(Foundation.NSData,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"AVFoundation.AVContentKeySession::ProcessContentKeyRequest(Foundation.NSObject,Foundation.NSData,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVContentKeySession::RemovePendingExpiredSessionReports(Foundation.NSDictionary[],Foundation.NSData,Foundation.NSUrl)",
			"AVFoundation.AVContentKeySession::RenewExpiringResponseData(AVFoundation.AVContentKeyRequest)",
			"AVFoundation.AVContentKeySession::SetDelegate(AVFoundation.IAVContentKeySessionDelegate,CoreFoundation.DispatchQueue)",
			"AVFoundation.AVContentKeySession_AVContentKeyRecipients::Add(AVFoundation.AVContentKeySession,AVFoundation.IAVContentKeyRecipient)",
			"AVFoundation.AVContentKeySession_AVContentKeyRecipients::GetContentKeyRecipients(AVFoundation.AVContentKeySession)",
			"AVFoundation.AVContentKeySession_AVContentKeyRecipients::Remove(AVFoundation.AVContentKeySession,AVFoundation.IAVContentKeyRecipient)",
			"AVFoundation.AVContentKeySessionDelegate_Extensions::DidChange(AVFoundation.IAVContentKeySessionDelegate,AVFoundation.AVContentKeySession)",
			"AVFoundation.AVContentKeySessionDelegate_Extensions::DidFail(AVFoundation.IAVContentKeySessionDelegate,AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest,Foundation.NSError)",
			"AVFoundation.AVContentKeySessionDelegate_Extensions::DidGenerateExpiredSessionReport(AVFoundation.IAVContentKeySessionDelegate,AVFoundation.AVContentKeySession)",
			"AVFoundation.AVContentKeySessionDelegate_Extensions::DidProvidePersistableContentKeyRequest(AVFoundation.IAVContentKeySessionDelegate,AVFoundation.AVContentKeySession,AVFoundation.AVPersistableContentKeyRequest)",
			"AVFoundation.AVContentKeySessionDelegate_Extensions::DidProvideRenewingContentKeyRequest(AVFoundation.IAVContentKeySessionDelegate,AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)",
			"AVFoundation.AVContentKeySessionDelegate_Extensions::DidSucceed(AVFoundation.IAVContentKeySessionDelegate,AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)",
			"AVFoundation.AVContentKeySessionDelegate_Extensions::DidUpdate(AVFoundation.IAVContentKeySessionDelegate,AVFoundation.AVContentKeySession,Foundation.NSData,Foundation.NSObject)",
			"AVFoundation.AVContentKeySessionDelegate_Extensions::ShouldRetryContentKeyRequest(AVFoundation.IAVContentKeySessionDelegate,AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest,System.String)",
			"AVFoundation.AVContentKeySessionDelegateWrapper::DidProvideContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)",
			"AVFoundation.AVContentKeySpecifier::.ctor(AVFoundation.AVContentKeySystem,Foundation.NSObject,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVContentKeySpecifier::GetContentKeySpecifier(AVFoundation.AVContentKeySystem,Foundation.NSObject,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVContentProposal::.ctor(CoreMedia.CMTime,System.String,UIKit.UIImage)",
			"AVFoundation.AVContentProposal::Copy(Foundation.NSZone)",
			"AVFoundation.AVDateRangeMetadataGroup::.ctor(AVFoundation.AVMetadataItem[],Foundation.NSDate,Foundation.NSDate)",
			"AVFoundation.AVDateRangeMetadataGroup::Copy(Foundation.NSZone)",
			"AVFoundation.AVDateRangeMetadataGroup::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVDelegatingPlaybackCoordinator::.ctor(AVFoundation.IAVPlaybackCoordinatorPlaybackControlDelegate)",
			"AVFoundation.AVDelegatingPlaybackCoordinator::TransitionToItem(System.String,CoreMedia.CMTimebase)",
			"AVFoundation.AVDepthData::Create(Foundation.NSDictionary,Foundation.NSError&)",
			"AVFoundation.AVDepthData::ReplaceDepthDataMap(CoreVideo.CVPixelBuffer,Foundation.NSError&)",
			"AVFoundation.AVDisplayCriteria::Copy(Foundation.NSZone)",
			"AVFoundation.AVFragmentedAsset::.ctor(Foundation.NSUrl,Foundation.NSDictionary)",
			"AVFoundation.AVFragmentedAsset::FromUrl(Foundation.NSUrl,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVFragmentedAsset_AVFragmentedAssetTrackInspection::GetTrack(AVFoundation.AVFragmentedAsset,System.Int32)",
			"AVFoundation.AVFragmentedAsset_AVFragmentedAssetTrackInspection::GetTracks(AVFoundation.AVFragmentedAsset,System.String)",
			"AVFoundation.AVFragmentedAsset_AVFragmentedAssetTrackInspection::GetTracksWithMediaCharacteristic(AVFoundation.AVFragmentedAsset,System.String)",
			"AVFoundation.AVFragmentedAsset_AVFragmentedAssetTrackInspection::LoadTrack(AVFoundation.AVFragmentedAsset,System.Int32,System.Action`2<AVFoundation.AVFragmentedAssetTrack,Foundation.NSError>)",
			"AVFoundation.AVFragmentedAsset_AVFragmentedAssetTrackInspection::LoadTracksWithMediaCharacteristic(AVFoundation.AVFragmentedAsset,System.String,System.Action`2<Foundation.NSArray`1<AVFoundation.AVFragmentedAssetTrack>,Foundation.NSError>)",
			"AVFoundation.AVFragmentedAsset_AVFragmentedAssetTrackInspection::LoadTracksWithMediaType(AVFoundation.AVFragmentedAsset,System.String,System.Action`2<Foundation.NSArray`1<AVFoundation.AVFragmentedAssetTrack>,Foundation.NSError>)",
			"AVFoundation.AVFragmentedAssetMinder::.ctor(AVFoundation.IAVFragmentMinding,System.Double)",
			"AVFoundation.AVFragmentedAssetMinder::AddFragmentedAsset(AVFoundation.AVAsset)",
			"AVFoundation.AVFragmentedAssetMinder::FromAsset(AVFoundation.AVAsset,System.Double)",
			"AVFoundation.AVFragmentedAssetMinder::RemoveFragmentedAsset(AVFoundation.AVAsset)",
			"AVFoundation.AVFragmentedMovie::.ctor(Foundation.NSData,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVFragmentedMovie::.ctor(Foundation.NSUrl,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVFragmentedMovie_AVFragmentedMovieTrackInspection::GetTrack(AVFoundation.AVFragmentedMovie,System.Int32)",
			"AVFoundation.AVFragmentedMovie_AVFragmentedMovieTrackInspection::GetTracks(AVFoundation.AVFragmentedMovie,System.String)",
			"AVFoundation.AVFragmentedMovie_AVFragmentedMovieTrackInspection::GetTracksWithMediaCharacteristic(AVFoundation.AVFragmentedMovie,System.String)",
			"AVFoundation.AVFragmentedMovie_AVFragmentedMovieTrackInspection::LoadTrack(AVFoundation.AVFragmentedMovie,System.Int32,System.Action`2<AVFoundation.AVMutableCompositionTrack,Foundation.NSError>)",
			"AVFoundation.AVFragmentedMovie_AVFragmentedMovieTrackInspection::LoadTracksWithMediaCharacteristic(AVFoundation.AVFragmentedMovie,System.String,System.Action`2<Foundation.NSArray`1<AVFoundation.AVMutableCompositionTrack>,Foundation.NSError>)",
			"AVFoundation.AVFragmentedMovie_AVFragmentedMovieTrackInspection::LoadTracksWithMediaType(AVFoundation.AVFragmentedMovie,System.String,System.Action`2<Foundation.NSArray`1<AVFoundation.AVMutableCompositionTrack>,Foundation.NSError>)",
			"AVFoundation.AVFragmentedMovieMinder::.ctor(AVFoundation.AVFragmentedMovie,System.Double)",
			"AVFoundation.AVFragmentedMovieMinder::Add(AVFoundation.AVFragmentedMovie)",
			"AVFoundation.AVFragmentedMovieMinder::FromMovie(AVFoundation.AVFragmentedMovie,System.Double)",
			"AVFoundation.AVFragmentedMovieMinder::Remove(AVFoundation.AVFragmentedMovie)",
			"AVFoundation.AVMediaDataStorage::.ctor(Foundation.NSUrl,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVMediaSelection::Copy(Foundation.NSZone)",
			"AVFoundation.AVMediaSelection::CriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup(AVFoundation.AVMediaSelectionGroup)",
			"AVFoundation.AVMediaSelection::GetSelectedMediaOption(AVFoundation.AVMediaSelectionGroup)",
			"AVFoundation.AVMediaSelection::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVMediaSelectionGroup::Copy(Foundation.NSZone)",
			"AVFoundation.AVMediaSelectionGroup::GetMediaSelectionOptionForPropertyList(Foundation.NSObject)",
			"AVFoundation.AVMediaSelectionGroup::MediaSelectionOptions(AVFoundation.AVMediaSelectionOption[],Foundation.NSLocale)",
			"AVFoundation.AVMediaSelectionOption::AssociatedMediaSelectionOptionInMediaSelectionGroup(AVFoundation.AVMediaSelectionGroup)",
			"AVFoundation.AVMediaSelectionOption::Copy(Foundation.NSZone)",
			"AVFoundation.AVMediaSelectionOption::GetDisplayName(Foundation.NSLocale)",
			"AVFoundation.AVMetadataBodyObject::Copy(Foundation.NSZone)",
			"AVFoundation.AVMetadataCatBodyObject::Copy(Foundation.NSZone)",
			"AVFoundation.AVMetadataDogBodyObject::Copy(Foundation.NSZone)",
			"AVFoundation.AVMetadataFaceObject::Copy(Foundation.NSZone)",
			"AVFoundation.AVMetadataHumanBodyObject::Copy(Foundation.NSZone)",
			"AVFoundation.AVMetadataItem::Copy(Foundation.NSZone)",
			"AVFoundation.AVMetadataItem::FilterWithIdentifier(AVFoundation.AVMetadataItem[],Foundation.NSString)",
			"AVFoundation.AVMetadataItem::FilterWithItemFilter(AVFoundation.AVMetadataItem[],AVFoundation.AVMetadataItemFilter)",
			"AVFoundation.AVMetadataItem::FilterWithKey(AVFoundation.AVMetadataItem[],Foundation.NSObject,System.String)",
			"AVFoundation.AVMetadataItem::FilterWithLocale(AVFoundation.AVMetadataItem[],Foundation.NSLocale)",
			"AVFoundation.AVMetadataItem::GetKeyForIdentifier(Foundation.NSString)",
			"AVFoundation.AVMetadataItem::GetKeySpaceForIdentifier(Foundation.NSString)",
			"AVFoundation.AVMetadataItem::GetMetadataIdentifier(Foundation.NSObject,Foundation.NSString)",
			"AVFoundation.AVMetadataItem::GetMetadataItem(AVFoundation.AVMetadataItem,System.Action`1<AVFoundation.AVMetadataItemValueRequest>)",
			"AVFoundation.AVMetadataItem::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVMetadataItemValueRequest::Respond(Foundation.NSError)",
			"AVFoundation.AVMetadataItemValueRequest::Respond(Foundation.NSObject)",
			"AVFoundation.AVMetadataSalientObject::Copy(Foundation.NSZone)",
			"AVFoundation.AVMidiPlayer::.ctor(Foundation.NSData,Foundation.NSUrl,Foundation.NSError&)",
			"AVFoundation.AVMidiPlayer::.ctor(Foundation.NSUrl,Foundation.NSUrl,Foundation.NSError&)",
			"AVFoundation.AVMovie::.ctor(Foundation.NSData,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVMovie::.ctor(Foundation.NSUrl,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVMovie::Copy(Foundation.NSZone)",
			"AVFoundation.AVMovie::FromData(Foundation.NSData,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVMovie::FromUrl(Foundation.NSUrl,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVMovie::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVMovie_AVMovieMovieHeaderSupport::GetMovieHeader(AVFoundation.AVMovie,System.String,Foundation.NSError&)",
			"AVFoundation.AVMovie_AVMovieMovieHeaderSupport::IsCompatibleWithFileType(AVFoundation.AVMovie,System.String)",
			"AVFoundation.AVMovie_AVMovieMovieHeaderSupport::WriteMovieHeader(AVFoundation.AVMovie,Foundation.NSUrl,System.String,AVFoundation.AVMovieWritingOptions,Foundation.NSError&)",
			"AVFoundation.AVMovie_AVMovieTrackInspection::GetTrack(AVFoundation.AVMovie,System.Int32)",
			"AVFoundation.AVMovie_AVMovieTrackInspection::GetTracks(AVFoundation.AVMovie,System.String)",
			"AVFoundation.AVMovie_AVMovieTrackInspection::GetTracksWithMediaCharacteristic(AVFoundation.AVMovie,System.String)",
			"AVFoundation.AVMovie_AVMovieTrackInspection::LoadTrack(AVFoundation.AVMovie,System.Int32,System.Action`2<AVFoundation.AVMutableCompositionTrack,Foundation.NSError>)",
			"AVFoundation.AVMovie_AVMovieTrackInspection::LoadTracksWithMediaCharacteristic(AVFoundation.AVMovie,System.String,System.Action`2<Foundation.NSArray`1<AVFoundation.AVMutableCompositionTrack>,Foundation.NSError>)",
			"AVFoundation.AVMovie_AVMovieTrackInspection::LoadTracksWithMediaType(AVFoundation.AVMovie,System.String,System.Action`2<Foundation.NSArray`1<AVFoundation.AVMutableCompositionTrack>,Foundation.NSError>)",
			"AVFoundation.AVMusicTrack::set_DestinationAudioUnit(AVFoundation.AVAudioUnit)",
			"AVFoundation.AVMutableAssetDownloadStorageManagementPolicy::set__Priority(Foundation.NSString)",
			"AVFoundation.AVMutableAssetDownloadStorageManagementPolicy::set_ExpirationDate(Foundation.NSDate)",
			"AVFoundation.AVMutableAudioMixInputParameters::FromTrack(AVFoundation.AVAssetTrack)",
			"AVFoundation.AVMutableAudioMixInputParameters::set_AudioTapProcessor(MediaToolbox.MTAudioProcessingTap)",
			"AVFoundation.AVMutableAudioMixInputParameters::set_AudioTimePitchAlgorithm(Foundation.NSString)",
			"AVFoundation.AVMutableCaption::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVMutableCaption::set_Region(AVFoundation.AVCaptionRegion)",
			"AVFoundation.AVMutableCaption::SetBackgroundColor(CoreGraphics.CGColor,Foundation.NSRange)",
			"AVFoundation.AVMutableCaption::SetRuby(AVFoundation.AVCaptionRuby,Foundation.NSRange)",
			"AVFoundation.AVMutableCaption::SetTextColor(CoreGraphics.CGColor,Foundation.NSRange)",
			"AVFoundation.AVMutableCaptionRegion::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVMutableComposition::CreateMutableTrack(AVFoundation.AVAssetTrack)",
			"AVFoundation.AVMutableComposition::FromOptions(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVMutableComposition::Insert(CoreMedia.CMTimeRange,AVFoundation.AVAsset,CoreMedia.CMTime,Foundation.NSError&)",
			"AVFoundation.AVMutableComposition::RemoveTrack(AVFoundation.AVCompositionTrack)",
			"AVFoundation.AVMutableComposition_AVMutableCompositionTrackInspection::GetTrack(AVFoundation.AVMutableComposition,System.Int32)",
			"AVFoundation.AVMutableComposition_AVMutableCompositionTrackInspection::GetTracks(AVFoundation.AVMutableComposition,System.String)",
			"AVFoundation.AVMutableComposition_AVMutableCompositionTrackInspection::GetTracksWithMediaCharacteristic(AVFoundation.AVMutableComposition,System.String)",
			"AVFoundation.AVMutableComposition_AVMutableCompositionTrackInspection::LoadTrack(AVFoundation.AVMutableComposition,System.Int32,System.Action`2<AVFoundation.AVMutableCompositionTrack,Foundation.NSError>)",
			"AVFoundation.AVMutableComposition_AVMutableCompositionTrackInspection::LoadTracksWithMediaCharacteristic(AVFoundation.AVMutableComposition,System.String,System.Action`2<Foundation.NSArray`1<AVFoundation.AVMutableCompositionTrack>,Foundation.NSError>)",
			"AVFoundation.AVMutableComposition_AVMutableCompositionTrackInspection::LoadTracksWithMediaType(AVFoundation.AVMutableComposition,System.String,System.Action`2<Foundation.NSArray`1<AVFoundation.AVMutableCompositionTrack>,Foundation.NSError>)",
			"AVFoundation.AVMutableCompositionTrack::AddTrackAssociation(AVFoundation.AVCompositionTrack,System.String)",
			"AVFoundation.AVMutableCompositionTrack::InsertTimeRange(CoreMedia.CMTimeRange,AVFoundation.AVAssetTrack,CoreMedia.CMTime,Foundation.NSError&)",
			"AVFoundation.AVMutableCompositionTrack::RemoveTrackAssociation(AVFoundation.AVCompositionTrack,System.String)",
			"AVFoundation.AVMutableCompositionTrack::ReplaceFormatDescription(CoreMedia.CMFormatDescription,CoreMedia.CMFormatDescription)",
			"AVFoundation.AVMutableDateRangeMetadataGroup::set_EndDate(Foundation.NSDate)",
			"AVFoundation.AVMutableDateRangeMetadataGroup::set_StartDate(Foundation.NSDate)",
			"AVFoundation.AVMutableMediaSelection::SelectMediaOption(AVFoundation.AVMediaSelectionOption,AVFoundation.AVMediaSelectionGroup)",
			"AVFoundation.AVMutableMetadataItem::set_DataType(Foundation.NSString)",
			"AVFoundation.AVMutableMetadataItem::set_ExtraAttributes(Foundation.NSDictionary)",
			"AVFoundation.AVMutableMetadataItem::set_Key(Foundation.NSObject)",
			"AVFoundation.AVMutableMetadataItem::set_Locale(Foundation.NSLocale)",
			"AVFoundation.AVMutableMetadataItem::set_MetadataIdentifier(Foundation.NSString)",
			"AVFoundation.AVMutableMetadataItem::set_StartDate(Foundation.NSDate)",
			"AVFoundation.AVMutableMetadataItem::set_Value(Foundation.NSObject)",
			"AVFoundation.AVMutableMovie::.ctor(AVFoundation.AVMovie,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&)",
			"AVFoundation.AVMutableMovie::.ctor(Foundation.NSData,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&)",
			"AVFoundation.AVMutableMovie::.ctor(Foundation.NSUrl,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&)",
			"AVFoundation.AVMutableMovie::FromData(Foundation.NSData,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&)",
			"AVFoundation.AVMutableMovie::FromMovie(AVFoundation.AVMovie,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&)",
			"AVFoundation.AVMutableMovie::FromUrl(Foundation.NSUrl,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&)",
			"AVFoundation.AVMutableMovie::set_DefaultMediaDataStorage(AVFoundation.AVMediaDataStorage)",
			"AVFoundation.AVMutableMovie_AVMutableMovieMovieLevelEditing::InsertEmptyTimeRange(AVFoundation.AVMutableMovie,CoreMedia.CMTimeRange)",
			"AVFoundation.AVMutableMovie_AVMutableMovieMovieLevelEditing::InsertTimeRange(AVFoundation.AVMutableMovie,CoreMedia.CMTimeRange,AVFoundation.AVAsset,CoreMedia.CMTime,System.Boolean,Foundation.NSError&)",
			"AVFoundation.AVMutableMovie_AVMutableMovieMovieLevelEditing::RemoveTimeRange(AVFoundation.AVMutableMovie,CoreMedia.CMTimeRange)",
			"AVFoundation.AVMutableMovie_AVMutableMovieMovieLevelEditing::ScaleTimeRange(AVFoundation.AVMutableMovie,CoreMedia.CMTimeRange,CoreMedia.CMTime)",
			"AVFoundation.AVMutableMovie_AVMutableMovieTrackInspection::GetTrack(AVFoundation.AVMutableMovie,System.Int32)",
			"AVFoundation.AVMutableMovie_AVMutableMovieTrackInspection::GetTracks(AVFoundation.AVMutableMovie,System.String)",
			"AVFoundation.AVMutableMovie_AVMutableMovieTrackInspection::GetTracksWithMediaCharacteristic(AVFoundation.AVMutableMovie,System.String)",
			"AVFoundation.AVMutableMovie_AVMutableMovieTrackLevelEditing::AddMutableTrack(AVFoundation.AVMutableMovie,System.String,AVFoundation.AVAssetTrack,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVMutableMovie_AVMutableMovieTrackLevelEditing::AddMutableTracks(AVFoundation.AVMutableMovie,AVFoundation.AVAssetTrack[],Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVFoundation.AVMutableMovie_AVMutableMovieTrackLevelEditing::GetMutableTrack(AVFoundation.AVMutableMovie,AVFoundation.AVAssetTrack)",
			"AVFoundation.AVMutableMovie_AVMutableMovieTrackLevelEditing::RemoveTrack(AVFoundation.AVMutableMovie,AVFoundation.AVMovieTrack)",
			"AVFoundation.AVMutableMovieTrack::AppendSampleBuffer(CoreMedia.CMSampleBuffer,CoreMedia.CMTime&,CoreMedia.CMTime&,Foundation.NSError&)",
			"AVFoundation.AVMutableMovieTrack::ReplaceFormatDescription(CoreMedia.CMFormatDescription,CoreMedia.CMFormatDescription)",
			"AVFoundation.AVMutableMovieTrack::set_MediaDataStorage(AVFoundation.AVMediaDataStorage)",
			"AVFoundation.AVMutableMovieTrack::set_SampleReferenceBaseURL(Foundation.NSUrl)",
			"AVFoundation.AVMutableMovieTrack_AVMutableMovieTrack_TrackLevelEditing::InsertEmptyTimeRange(AVFoundation.AVMutableMovieTrack,CoreMedia.CMTimeRange)",
			"AVFoundation.AVMutableMovieTrack_AVMutableMovieTrack_TrackLevelEditing::InsertTimeRange(AVFoundation.AVMutableMovieTrack,CoreMedia.CMTimeRange,AVFoundation.AVAssetTrack,CoreMedia.CMTime,System.Boolean,Foundation.NSError&)",
			"AVFoundation.AVMutableMovieTrack_AVMutableMovieTrack_TrackLevelEditing::RemoveTimeRange(AVFoundation.AVMutableMovieTrack,CoreMedia.CMTimeRange)",
			"AVFoundation.AVMutableMovieTrack_AVMutableMovieTrack_TrackLevelEditing::ScaleTimeRange(AVFoundation.AVMutableMovieTrack,CoreMedia.CMTimeRange,CoreMedia.CMTime)",
			"AVFoundation.AVMutableMovieTrack_AVMutableMovieTrackTrackAssociations::AddTrackAssociation(AVFoundation.AVMutableMovieTrack,AVFoundation.AVMovieTrack,System.String)",
			"AVFoundation.AVMutableMovieTrack_AVMutableMovieTrackTrackAssociations::RemoveTrackAssociation(AVFoundation.AVMutableMovieTrack,AVFoundation.AVMovieTrack,System.String)",
			"AVFoundation.AVMutableVideoComposition::Create(AVFoundation.AVAsset)",
			"AVFoundation.AVMutableVideoComposition::Create(AVFoundation.AVAsset,AVFoundation.AVVideoCompositionInstruction)",
			"AVFoundation.AVMutableVideoComposition::GetVideoComposition(AVFoundation.AVAsset,System.Action`1<AVFoundation.AVAsynchronousCIImageFilteringRequest>)",
			"AVFoundation.AVMutableVideoComposition::set_AnimationTool(AVFoundation.AVVideoCompositionCoreAnimationTool)",
			"AVFoundation.AVMutableVideoComposition::set_CustomVideoCompositorClass(ObjCRuntime.Class)",
			"AVFoundation.AVMutableVideoCompositionInstruction::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVMutableVideoCompositionInstruction::set_BackgroundColor(CoreGraphics.CGColor)",
			"AVFoundation.AVMutableVideoCompositionLayerInstruction::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVMutableVideoCompositionLayerInstruction::FromAssetTrack(AVFoundation.AVAssetTrack)",
			"AVFoundation.AVOutputSettingsAssistant::set_SourceAudioFormat(CoreMedia.CMAudioFormatDescription)",
			"AVFoundation.AVOutputSettingsAssistant::set_SourceVideoFormat(CoreMedia.CMVideoFormatDescription)",
			"AVFoundation.AVPersistableContentKeyRequest::GetPersistableContentKey(Foundation.NSData,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&)",
			"AVFoundation.AVPlaybackCoordinatorPlaybackControlDelegateWrapper::DidIssueBufferingCommand(AVFoundation.AVDelegatingPlaybackCoordinator,AVFoundation.AVDelegatingPlaybackCoordinatorBufferingCommand,System.Action)",
			"AVFoundation.AVPlaybackCoordinatorPlaybackControlDelegateWrapper::DidIssuePauseCommand(AVFoundation.AVDelegatingPlaybackCoordinator,AVFoundation.AVDelegatingPlaybackCoordinatorPauseCommand,System.Action)",
			"AVFoundation.AVPlaybackCoordinatorPlaybackControlDelegateWrapper::DidIssuePlayCommand(AVFoundation.AVDelegatingPlaybackCoordinator,AVFoundation.AVDelegatingPlaybackCoordinatorPlayCommand,System.Action)",
			"AVFoundation.AVPlaybackCoordinatorPlaybackControlDelegateWrapper::DidIssueSeekCommand(AVFoundation.AVDelegatingPlaybackCoordinator,AVFoundation.AVDelegatingPlaybackCoordinatorSeekCommand,System.Action)",
			"AVFoundation.AVPlayer::.ctor(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayer::.ctor(Foundation.NSUrl)",
			"AVFoundation.AVPlayer::AddBoundaryTimeObserver(Foundation.NSValue[],CoreFoundation.DispatchQueue,System.Action)",
			"AVFoundation.AVPlayer::AddPeriodicTimeObserver(CoreMedia.CMTime,CoreFoundation.DispatchQueue,System.Action`1<CoreMedia.CMTime>)",
			"AVFoundation.AVPlayer::FromPlayerItem(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayer::FromUrl(Foundation.NSUrl)",
			"AVFoundation.AVPlayer::MediaSelectionCriteriaForMediaCharacteristic(Foundation.NSString)",
			"AVFoundation.AVPlayer::RemoveTimeObserver(Foundation.NSObject)",
			"AVFoundation.AVPlayer::ReplaceCurrentItemWithPlayerItem(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayer::Seek(Foundation.NSDate)",
			"AVFoundation.AVPlayer::Seek(Foundation.NSDate,AVFoundation.AVCompletion)",
			"AVFoundation.AVPlayer::set_MasterClock(CoreMedia.CMClock)",
			"AVFoundation.AVPlayer::set_SourceClock(CoreMedia.CMClock)",
			"AVFoundation.AVPlayer::set_WeakExternalPlaybackVideoGravity(Foundation.NSString)",
			"AVFoundation.AVPlayer::SetMediaSelectionCriteria(AVFoundation.AVPlayerMediaSelectionCriteria,Foundation.NSString)",
			"AVFoundation.AVPlayerInterstitialEvent::GetPlayerInterstitialEvent(AVFoundation.AVPlayerItem,System.String,CoreMedia.CMTime,AVFoundation.AVPlayerItem[],AVFoundation.AVPlayerInterstitialEventRestrictions,CoreMedia.CMTime,CoreMedia.CMTime,Foundation.NSDictionary)",
			"AVFoundation.AVPlayerInterstitialEvent::GetPlayerInterstitialEvent(AVFoundation.AVPlayerItem,System.String,Foundation.NSDate,AVFoundation.AVPlayerItem[],AVFoundation.AVPlayerInterstitialEventRestrictions,CoreMedia.CMTime,CoreMedia.CMTime,Foundation.NSDictionary)",
			"AVFoundation.AVPlayerInterstitialEventController::.ctor(AVFoundation.AVPlayer)",
			"AVFoundation.AVPlayerInterstitialEventController::GetInterstitialEventController(AVFoundation.AVPlayer)",
			"AVFoundation.AVPlayerInterstitialEventMonitor::.ctor(AVFoundation.AVPlayer)",
			"AVFoundation.AVPlayerInterstitialEventMonitor::InterstitialEventMonitorWithPrimaryPlayer(AVFoundation.AVPlayer)",
			"AVFoundation.AVPlayerItem::.ctor(AVFoundation.AVAsset)",
			"AVFoundation.AVPlayerItem::.ctor(AVFoundation.AVAsset,Foundation.NSString[])",
			"AVFoundation.AVPlayerItem::.ctor(Foundation.NSUrl)",
			"AVFoundation.AVPlayerItem::AddMediaDataCollector(AVFoundation.AVPlayerItemMediaDataCollector)",
			"AVFoundation.AVPlayerItem::AddOutput(AVFoundation.AVPlayerItemOutput)",
			"AVFoundation.AVPlayerItem::Copy(Foundation.NSZone)",
			"AVFoundation.AVPlayerItem::FromAsset(AVFoundation.AVAsset)",
			"AVFoundation.AVPlayerItem::FromAsset(AVFoundation.AVAsset,Foundation.NSString[])",
			"AVFoundation.AVPlayerItem::FromUrl(Foundation.NSUrl)",
			"AVFoundation.AVPlayerItem::RemoveMediaDataCollector(AVFoundation.AVPlayerItemMediaDataCollector)",
			"AVFoundation.AVPlayerItem::RemoveOutput(AVFoundation.AVPlayerItemOutput)",
			"AVFoundation.AVPlayerItem::Seek(Foundation.NSDate)",
			"AVFoundation.AVPlayerItem::Seek(Foundation.NSDate,AVFoundation.AVCompletion)",
			"AVFoundation.AVPlayerItem::SelectedMediaOption(AVFoundation.AVMediaSelectionGroup)",
			"AVFoundation.AVPlayerItem::SelectMediaOption(AVFoundation.AVMediaSelectionOption,AVFoundation.AVMediaSelectionGroup)",
			"AVFoundation.AVPlayerItem::SelectMediaOptionAutomaticallyInMediaSelectionGroup(AVFoundation.AVMediaSelectionGroup)",
			"AVFoundation.AVPlayerItem::set__VideoApertureMode(Foundation.NSString)",
			"AVFoundation.AVPlayerItem::set_AudioMix(AVFoundation.AVAudioMix)",
			"AVFoundation.AVPlayerItem::set_AudioTimePitchAlgorithm(Foundation.NSString)",
			"AVFoundation.AVPlayerItem::set_VideoComposition(AVFoundation.AVVideoComposition)",
			"AVFoundation.AVPlayerItem_AVPlaybackRestrictions::CancelPlaybackRestrictionsAuthorizationRequest(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayerItem_AVPlaybackRestrictions::RequestPlaybackRestrictionsAuthorization(AVFoundation.AVPlayerItem,System.Action`2<System.Boolean,Foundation.NSError>)",
			"AVFoundation.AVPlayerItem_AVPlayerInterstitialSupport::GetAutomaticallyHandlesInterstitialEvents(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayerItem_AVPlayerInterstitialSupport::GetTemplatePlayerItem(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayerItem_AVPlayerInterstitialSupport::SetAutomaticallyHandlesInterstitialEvents(AVFoundation.AVPlayerItem,System.Boolean)",
			"AVFoundation.AVPlayerItem_AVPlayerItemProtectedContent::CancelContentAuthorizationRequest(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayerItem_AVPlayerItemProtectedContent::GetContentAuthorizationRequestStatus(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayerItem_AVPlayerItemProtectedContent::IsApplicationAuthorizedForPlayback(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayerItem_AVPlayerItemProtectedContent::IsAuthorizationRequiredForPlayback(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayerItem_AVPlayerItemProtectedContent::IsContentAuthorizedForPlayback(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayerItem_AVPlayerItemProtectedContent::RequestContentAuthorizationAsynchronously(AVFoundation.AVPlayerItem,System.Double,System.Action)",
			"AVFoundation.AVPlayerItemAccessLog::Copy(Foundation.NSZone)",
			"AVFoundation.AVPlayerItemAccessLogEvent::Copy(Foundation.NSZone)",
			"AVFoundation.AVPlayerItemErrorLog::Copy(Foundation.NSZone)",
			"AVFoundation.AVPlayerItemErrorLogEvent::Copy(Foundation.NSZone)",
			"AVFoundation.AVPlayerItemLegibleOutput::set_TextStylingResolution(Foundation.NSString)",
			"AVFoundation.AVPlayerItemLegibleOutput::SetDelegate(AVFoundation.IAVPlayerItemLegibleOutputPushDelegate,CoreFoundation.DispatchQueue)",
			"AVFoundation.AVPlayerItemLegibleOutputPushDelegate_Extensions::DidOutputAttributedStrings(AVFoundation.IAVPlayerItemLegibleOutputPushDelegate,AVFoundation.AVPlayerItemLegibleOutput,Foundation.NSAttributedString[],CoreMedia.CMSampleBuffer[],CoreMedia.CMTime)",
			"AVFoundation.AVPlayerItemMetadataCollector::SetDelegate(AVFoundation.IAVPlayerItemMetadataCollectorPushDelegate,CoreFoundation.DispatchQueue)",
			"AVFoundation.AVPlayerItemMetadataCollectorPushDelegateWrapper::DidCollectDateRange(AVFoundation.AVPlayerItemMetadataCollector,AVFoundation.AVDateRangeMetadataGroup[],Foundation.NSIndexSet,Foundation.NSIndexSet)",
			"AVFoundation.AVPlayerItemMetadataOutput::SetDelegate(AVFoundation.IAVPlayerItemMetadataOutputPushDelegate,CoreFoundation.DispatchQueue)",
			"AVFoundation.AVPlayerItemMetadataOutputPushDelegate_Extensions::DidOutputTimedMetadataGroups(AVFoundation.IAVPlayerItemMetadataOutputPushDelegate,AVFoundation.AVPlayerItemMetadataOutput,AVFoundation.AVTimedMetadataGroup[],AVFoundation.AVPlayerItemTrack)",
			"AVFoundation.AVPlayerItemOutputPullDelegate_Extensions::OutputMediaDataWillChange(AVFoundation.IAVPlayerItemOutputPullDelegate,AVFoundation.AVPlayerItemOutput)",
			"AVFoundation.AVPlayerItemOutputPullDelegate_Extensions::OutputSequenceWasFlushed(AVFoundation.IAVPlayerItemOutputPullDelegate,AVFoundation.AVPlayerItemOutput)",
			"AVFoundation.AVPlayerItemOutputPushDelegate_Extensions::OutputSequenceWasFlushed(AVFoundation.IAVPlayerItemOutputPushDelegate,AVFoundation.AVPlayerItemOutput)",
			"AVFoundation.AVPlayerItemVideoOutput::_FromOutputSettings(Foundation.NSDictionary)",
			"AVFoundation.AVPlayerItemVideoOutput::_FromPixelBufferAttributes(Foundation.NSDictionary)",
			"AVFoundation.AVPlayerItemVideoOutput::SetDelegate(AVFoundation.IAVPlayerItemOutputPullDelegate,CoreFoundation.DispatchQueue)",
			"AVFoundation.AVPlayerLayer::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVPlayerLayer::FromPlayer(AVFoundation.AVPlayer)",
			"AVFoundation.AVPlayerLayer::set_Player(AVFoundation.AVPlayer)",
			"AVFoundation.AVPlayerLayer::set_WeakPixelBufferAttributes(Foundation.NSDictionary)",
			"AVFoundation.AVPlayerLayer::set_WeakVideoGravity(Foundation.NSString)",
			"AVFoundation.AVPlayerLooper::.ctor(AVFoundation.AVQueuePlayer,AVFoundation.AVPlayerItem,CoreMedia.CMTimeRange)",
			"AVFoundation.AVPlayerLooper::FromPlayer(AVFoundation.AVQueuePlayer,AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayerLooper::FromPlayer(AVFoundation.AVQueuePlayer,AVFoundation.AVPlayerItem,CoreMedia.CMTimeRange)",
			"AVFoundation.AVPlayerPlaybackCoordinatorDelegate_Extensions::GetIdentifier(AVFoundation.IAVPlayerPlaybackCoordinatorDelegate,AVFoundation.AVPlayerPlaybackCoordinator,AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPlayerPlaybackCoordinatorDelegate_Extensions::GetInterstitialTimeRanges(AVFoundation.IAVPlayerPlaybackCoordinatorDelegate,AVFoundation.AVPlayerPlaybackCoordinator,AVFoundation.AVPlayerItem)",
			"AVFoundation.AVPortraitEffectsMatte::Create(CoreVideo.CVPixelBuffer,Foundation.NSError&)",
			"AVFoundation.AVPortraitEffectsMatte::Create(Foundation.NSDictionary,Foundation.NSError&)",
			"AVFoundation.AVQueuedSampleBufferRenderingWrapper::Enqueue(CoreMedia.CMSampleBuffer)",
			"AVFoundation.AVQueuedSampleBufferRenderingWrapper::RequestMediaData(CoreFoundation.DispatchQueue,System.Action)",
			"AVFoundation.AVQueuePlayer::CanInsert(AVFoundation.AVPlayerItem,AVFoundation.AVPlayerItem)",
			"AVFoundation.AVQueuePlayer::InsertItem(AVFoundation.AVPlayerItem,AVFoundation.AVPlayerItem)",
			"AVFoundation.AVQueuePlayer::RemoveItem(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVSampleBufferAudioRenderer::Enqueue(CoreMedia.CMSampleBuffer)",
			"AVFoundation.AVSampleBufferAudioRenderer::RequestMediaData(CoreFoundation.DispatchQueue,System.Action)",
			"AVFoundation.AVSampleBufferDisplayLayer::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVSampleBufferDisplayLayer::Enqueue(CoreMedia.CMSampleBuffer)",
			"AVFoundation.AVSampleBufferDisplayLayer::RequestMediaData(CoreFoundation.DispatchQueue,System.Action)",
			"AVFoundation.AVSampleBufferDisplayLayer::set_ControlTimebase(CoreMedia.CMTimebase)",
			"AVFoundation.AVSampleBufferDisplayLayer_ProtectedContent::GetOutputObscuredDueToInsufficientExternalProtection(AVFoundation.AVSampleBufferDisplayLayer)",
			"AVFoundation.AVSampleBufferGenerator::.ctor(AVFoundation.AVAsset,CoreMedia.CMTimebase)",
			"AVFoundation.AVSampleBufferGenerator::CreateSampleBuffer(AVFoundation.AVSampleBufferRequest)",
			"AVFoundation.AVSampleBufferGenerator::NotifyOfDataReady(CoreMedia.CMSampleBuffer,System.Action`2<System.Boolean,Foundation.NSError>)",
			"AVFoundation.AVSampleBufferRenderSynchronizer::Add(AVFoundation.IAVQueuedSampleBufferRendering)",
			"AVFoundation.AVSampleBufferRenderSynchronizer::AddBoundaryTimeObserver(Foundation.NSValue[],CoreFoundation.DispatchQueue,System.Action)",
			"AVFoundation.AVSampleBufferRenderSynchronizer::AddPeriodicTimeObserver(CoreMedia.CMTime,CoreFoundation.DispatchQueue,System.Action`1<CoreMedia.CMTime>)",
			"AVFoundation.AVSampleBufferRenderSynchronizer::Remove(AVFoundation.IAVQueuedSampleBufferRendering,CoreMedia.CMTime,System.Action`1<System.Boolean>)",
			"AVFoundation.AVSampleBufferRenderSynchronizer::RemoveTimeObserver(Foundation.NSObject)",
			"AVFoundation.AVSampleBufferRequest::.ctor(AVFoundation.AVSampleCursor)",
			"AVFoundation.AVSampleBufferRequest::set_LimitCursor(AVFoundation.AVSampleCursor)",
			"AVFoundation.AVSampleCursor::ComparePositionInDecodeOrder(AVFoundation.AVSampleCursor)",
			"AVFoundation.AVSampleCursor::Copy(Foundation.NSZone)",
			"AVFoundation.AVSampleCursor::SamplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThan(AVFoundation.AVSampleCursor)",
			"AVFoundation.AVSampleCursor::SamplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThan(AVFoundation.AVSampleCursor)",
			"AVFoundation.AVSemanticSegmentationMatte::Create(Foundation.NSString,Foundation.NSDictionary,Foundation.NSError&)",
			"AVFoundation.AVSemanticSegmentationMatte::ReplaceSemanticSegmentationMatte(CoreVideo.CVPixelBuffer,Foundation.NSError&)",
			"AVFoundation.AVSpeechSynthesisVoice::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVSpeechSynthesisVoice::EncodeTo(Foundation.NSCoder)",
			"AVFoundation.AVSpeechSynthesizer::SpeakUtterance(AVFoundation.AVSpeechUtterance)",
			"AVFoundation.AVSpeechSynthesizer::WriteUtterance(AVFoundation.AVSpeechUtterance,System.Action`1<AVFoundation.AVAudioBuffer>)",
			"AVFoundation.AVSpeechSynthesizerDelegate_Extensions::DidCancelSpeechUtterance(AVFoundation.IAVSpeechSynthesizerDelegate,AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)",
			"AVFoundation.AVSpeechSynthesizerDelegate_Extensions::DidContinueSpeechUtterance(AVFoundation.IAVSpeechSynthesizerDelegate,AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)",
			"AVFoundation.AVSpeechSynthesizerDelegate_Extensions::DidFinishSpeechUtterance(AVFoundation.IAVSpeechSynthesizerDelegate,AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)",
			"AVFoundation.AVSpeechSynthesizerDelegate_Extensions::DidPauseSpeechUtterance(AVFoundation.IAVSpeechSynthesizerDelegate,AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)",
			"AVFoundation.AVSpeechSynthesizerDelegate_Extensions::DidStartSpeechUtterance(AVFoundation.IAVSpeechSynthesizerDelegate,AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)",
			"AVFoundation.AVSpeechSynthesizerDelegate_Extensions::WillSpeakRangeOfSpeechString(AVFoundation.IAVSpeechSynthesizerDelegate,AVFoundation.AVSpeechSynthesizer,Foundation.NSRange,AVFoundation.AVSpeechUtterance)",
			"AVFoundation.AVSpeechUtterance::.ctor(Foundation.NSAttributedString)",
			"AVFoundation.AVSpeechUtterance::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVSpeechUtterance::Copy(Foundation.NSZone)",
			"AVFoundation.AVSpeechUtterance::EncodeTo(Foundation.NSCoder)",
			"AVFoundation.AVSpeechUtterance::FromString(Foundation.NSAttributedString)",
			"AVFoundation.AVSpeechUtterance::set_Voice(AVFoundation.AVSpeechSynthesisVoice)",
			"AVFoundation.AVSynchronizedLayer::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVSynchronizedLayer::FromPlayerItem(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVSynchronizedLayer::set_PlayerItem(AVFoundation.AVPlayerItem)",
			"AVFoundation.AVTextStyleRule::.ctor(Foundation.NSDictionary)",
			"AVFoundation.AVTextStyleRule::.ctor(Foundation.NSDictionary,System.String)",
			"AVFoundation.AVTextStyleRule::Copy(Foundation.NSZone)",
			"AVFoundation.AVTextStyleRule::FromPropertyList(Foundation.NSObject)",
			"AVFoundation.AVTextStyleRule::FromTextMarkupAttributes(Foundation.NSDictionary)",
			"AVFoundation.AVTextStyleRule::FromTextMarkupAttributes(Foundation.NSDictionary,System.String)",
			"AVFoundation.AVTimedMetadataGroup::.ctor(CoreMedia.CMSampleBuffer)",
			"AVFoundation.AVTimedMetadataGroup::Copy(Foundation.NSZone)",
			"AVFoundation.AVTimedMetadataGroup::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVUrlAsset::.ctor(Foundation.NSUrl,Foundation.NSDictionary)",
			"AVFoundation.AVUrlAsset::CompatibleTrack(AVFoundation.AVCompositionTrack)",
			"AVFoundation.AVUrlAsset::DidProvideContentKey(AVFoundation.AVContentKeySession,AVFoundation.AVContentKey)",
			"AVFoundation.AVUrlAsset::FindCompatibleTrack(AVFoundation.AVCompositionTrack,System.Action`2<AVFoundation.AVAssetTrack,Foundation.NSError>)",
			"AVFoundation.AVUrlAsset::FromUrl(Foundation.NSUrl,Foundation.NSDictionary)",
			"AVFoundation.AVVideoCompositing_Extensions::AnticipateRendering(AVFoundation.IAVVideoCompositing,AVFoundation.AVVideoCompositionRenderHint)",
			"AVFoundation.AVVideoCompositing_Extensions::CancelAllPendingVideoCompositionRequests(AVFoundation.IAVVideoCompositing)",
			"AVFoundation.AVVideoCompositing_Extensions::GetCanConformColorOfSourceFrames(AVFoundation.IAVVideoCompositing)",
			"AVFoundation.AVVideoCompositing_Extensions::GetSupportsHdrSourceFrames(AVFoundation.IAVVideoCompositing)",
			"AVFoundation.AVVideoCompositing_Extensions::GetSupportsWideColorSourceFrames(AVFoundation.IAVVideoCompositing)",
			"AVFoundation.AVVideoCompositing_Extensions::PrerollForRendering(AVFoundation.IAVVideoCompositing,AVFoundation.AVVideoCompositionRenderHint)",
			"AVFoundation.AVVideoCompositingWrapper::RenderContextChanged(AVFoundation.AVVideoCompositionRenderContext)",
			"AVFoundation.AVVideoCompositingWrapper::StartVideoCompositionRequest(AVFoundation.AVAsynchronousVideoCompositionRequest)",
			"AVFoundation.AVVideoComposition::Copy(Foundation.NSZone)",
			"AVFoundation.AVVideoComposition::CreateVideoComposition(AVFoundation.AVAsset,System.Action`1<AVFoundation.AVAsynchronousCIImageFilteringRequest>)",
			"AVFoundation.AVVideoComposition::FromAssetProperties(AVFoundation.AVAsset)",
			"AVFoundation.AVVideoComposition::IsValidForAsset(AVFoundation.AVAsset,CoreMedia.CMTimeRange,AVFoundation.IAVVideoCompositionValidationHandling)",
			"AVFoundation.AVVideoComposition::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVVideoCompositionCoreAnimationTool::FromComposedVideoFrames(CoreAnimation.CALayer[],CoreAnimation.CALayer)",
			"AVFoundation.AVVideoCompositionCoreAnimationTool::FromLayer(CoreAnimation.CALayer,CoreAnimation.CALayer)",
			"AVFoundation.AVVideoCompositionCoreAnimationTool::FromLayer(CoreAnimation.CALayer,System.Int32)",
			"AVFoundation.AVVideoCompositionInstruction::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVVideoCompositionInstruction::Copy(Foundation.NSZone)",
			"AVFoundation.AVVideoCompositionInstruction::EncodeTo(Foundation.NSCoder)",
			"AVFoundation.AVVideoCompositionInstruction::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVVideoCompositionLayerInstruction::.ctor(Foundation.NSCoder)",
			"AVFoundation.AVVideoCompositionLayerInstruction::Copy(Foundation.NSZone)",
			"AVFoundation.AVVideoCompositionLayerInstruction::EncodeTo(Foundation.NSCoder)",
			"AVFoundation.AVVideoCompositionLayerInstruction::MutableCopy(Foundation.NSZone)",
			"AVFoundation.AVVideoCompositionValidationHandling_Extensions::ShouldContinueValidatingAfterFindingEmptyTimeRange(AVFoundation.IAVVideoCompositionValidationHandling,AVFoundation.AVVideoComposition,CoreMedia.CMTimeRange)",
			"AVFoundation.AVVideoCompositionValidationHandling_Extensions::ShouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction(AVFoundation.IAVVideoCompositionValidationHandling,AVFoundation.AVVideoComposition,AVFoundation.AVVideoCompositionInstruction)",
			"AVFoundation.AVVideoCompositionValidationHandling_Extensions::ShouldContinueValidatingAfterFindingInvalidTrackIDInInstruction(AVFoundation.IAVVideoCompositionValidationHandling,AVFoundation.AVVideoComposition,AVFoundation.AVVideoCompositionInstruction,AVFoundation.AVVideoCompositionLayerInstruction,AVFoundation.AVAsset)",
			"AVFoundation.AVVideoCompositionValidationHandling_Extensions::ShouldContinueValidatingAfterFindingInvalidValueForKey(AVFoundation.IAVVideoCompositionValidationHandling,AVFoundation.AVVideoComposition,System.String)",
			"AVFoundation.InternalAVAudioPlayerDelegate::FinishedPlaying(AVFoundation.AVAudioPlayer,System.Boolean)",
			"AVKit.AVAudioSession_AVPlaybackRouteSelecting::PrepareRouteSelectionForPlayback(AVFoundation.AVAudioSession,System.Action`2<System.Boolean,AVKit.AVAudioSessionRouteSelection>)",
			"AVKit.AVCaptureView::.ctor(Foundation.NSCoder)",
			"AVKit.AVCaptureView::set_WeakVideoGravity(Foundation.NSString)",
			"AVKit.AVCaptureView::SetSession(AVFoundation.AVCaptureSession,System.Boolean,System.Boolean)",
			"AVKit.AVCaptureViewDelegateWrapper::StartRecording(AVKit.AVCaptureView,AVFoundation.AVCaptureFileOutput)",
			"AVKit.AVContentProposalViewController::.ctor(Foundation.NSCoder)",
			"AVKit.AVContentProposalViewController::.ctor(System.String,Foundation.NSBundle)",
			"AVKit.AVDisplayManager::set_PreferredDisplayCriteria(AVFoundation.AVDisplayCriteria)",
			"AVKit.AVInterstitialTimeRange::.ctor(Foundation.NSCoder)",
			"AVKit.AVInterstitialTimeRange::Copy(Foundation.NSZone)",
			"AVKit.AVInterstitialTimeRange::EncodeTo(Foundation.NSCoder)",
			"AVKit.AVPictureInPictureController::.ctor(AVFoundation.AVPlayerLayer)",
			"AVKit.AVPictureInPictureController::.ctor(AVKit.AVPictureInPictureControllerContentSource)",
			"AVKit.AVPictureInPictureController::CreateStartButton(UIKit.UITraitCollection)",
			"AVKit.AVPictureInPictureController::CreateStopButton(UIKit.UITraitCollection)",
			"AVKit.AVPictureInPictureController::set_ContentSource(AVKit.AVPictureInPictureControllerContentSource)",
			"AVKit.AVPictureInPictureControllerContentSource::.ctor(AVFoundation.AVPlayerLayer)",
			"AVKit.AVPictureInPictureControllerContentSource::.ctor(AVFoundation.AVSampleBufferDisplayLayer,AVKit.IAVPictureInPictureSampleBufferPlaybackDelegate)",
			"AVKit.AVPictureInPictureControllerContentSource::.ctor(UIKit.UIView,AVKit.AVPictureInPictureVideoCallViewController)",
			"AVKit.AVPictureInPictureControllerDelegate_Extensions::DidStartPictureInPicture(AVKit.IAVPictureInPictureControllerDelegate,AVKit.AVPictureInPictureController)",
			"AVKit.AVPictureInPictureControllerDelegate_Extensions::DidStopPictureInPicture(AVKit.IAVPictureInPictureControllerDelegate,AVKit.AVPictureInPictureController)",
			"AVKit.AVPictureInPictureControllerDelegate_Extensions::FailedToStartPictureInPicture(AVKit.IAVPictureInPictureControllerDelegate,AVKit.AVPictureInPictureController,Foundation.NSError)",
			"AVKit.AVPictureInPictureControllerDelegate_Extensions::RestoreUserInterfaceForPictureInPicture(AVKit.IAVPictureInPictureControllerDelegate,AVKit.AVPictureInPictureController,System.Action`1<System.Boolean>)",
			"AVKit.AVPictureInPictureControllerDelegate_Extensions::WillStartPictureInPicture(AVKit.IAVPictureInPictureControllerDelegate,AVKit.AVPictureInPictureController)",
			"AVKit.AVPictureInPictureControllerDelegate_Extensions::WillStopPictureInPicture(AVKit.IAVPictureInPictureControllerDelegate,AVKit.AVPictureInPictureController)",
			"AVKit.AVPictureInPictureSampleBufferPlaybackDelegate_Extensions::ShouldProhibitBackgroundAudioPlayback(AVKit.IAVPictureInPictureSampleBufferPlaybackDelegate,AVKit.AVPictureInPictureController)",
			"AVKit.AVPictureInPictureSampleBufferPlaybackDelegateWrapper::DidTransitionToRenderSize(AVKit.AVPictureInPictureController,CoreMedia.CMVideoDimensions)",
			"AVKit.AVPictureInPictureSampleBufferPlaybackDelegateWrapper::GetTimeRange(AVKit.AVPictureInPictureController)",
			"AVKit.AVPictureInPictureSampleBufferPlaybackDelegateWrapper::IsPlaybackPaused(AVKit.AVPictureInPictureController)",
			"AVKit.AVPictureInPictureSampleBufferPlaybackDelegateWrapper::SetPlaying(AVKit.AVPictureInPictureController,System.Boolean)",
			"AVKit.AVPictureInPictureSampleBufferPlaybackDelegateWrapper::SkipByInterval(AVKit.AVPictureInPictureController,CoreMedia.CMTime,System.Action)",
			"AVKit.AVPictureInPictureVideoCallViewController::.ctor(Foundation.NSCoder)",
			"AVKit.AVPictureInPictureVideoCallViewController::.ctor(System.String,Foundation.NSBundle)",
			"AVKit.AVPlayerView::.ctor(Foundation.NSCoder)",
			"AVKit.AVPlayerView::set_ActionPopUpButtonMenu(AppKit.NSMenu)",
			"AVKit.AVPlayerView::set_Player(AVFoundation.AVPlayer)",
			"AVKit.AVPlayerViewController::.ctor(Foundation.NSCoder)",
			"AVKit.AVPlayerViewController::.ctor(System.String,Foundation.NSBundle)",
			"AVKit.AVPlayerViewController::set_CustomOverlayViewController(UIKit.UIViewController)",
			"AVKit.AVPlayerViewController::set_PixelBufferAttributes(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"AVKit.AVPlayerViewController::set_Player(AVFoundation.AVPlayer)",
			"AVKit.AVPlayerViewController::set_WeakVideoGravity(Foundation.NSString)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::DidAcceptContentProposal(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,AVFoundation.AVContentProposal)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::DidEndDismissalTransition(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::DidPresentInterstitialTimeRange(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,AVKit.AVInterstitialTimeRange)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::DidRejectContentProposal(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,AVFoundation.AVContentProposal)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::DidSelectExternalSubtitleOptionLanguage(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,System.String)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::DidSelectMediaSelectionOption(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,AVFoundation.AVMediaSelectionOption,AVFoundation.AVMediaSelectionGroup)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::DidStartPictureInPicture(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::DidStopPictureInPicture(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::FailedToStartPictureInPicture(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,Foundation.NSError)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::GetNextChannelInterstitialViewController(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::GetPreviousChannelInterstitialViewController(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::GetTimeToSeekAfterUserNavigated(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,CoreMedia.CMTime,CoreMedia.CMTime)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::RestoreUserInterfaceForFullScreenExit(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,System.Action`1<System.Boolean>)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::RestoreUserInterfaceForPictureInPicture(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,System.Action`1<System.Boolean>)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::ShouldAutomaticallyDismissAtPictureInPictureStart(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::ShouldDismiss(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::ShouldPresentContentProposal(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,AVFoundation.AVContentProposal)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::SkipToNextChannel(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,System.Action`1<System.Boolean>)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::SkipToNextItem(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::SkipToPreviousChannel(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,System.Action`1<System.Boolean>)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::SkipToPreviousItem(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::WillBeginDismissalTransition(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::WillBeginFullScreenPresentation(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,UIKit.IUIViewControllerTransitionCoordinator)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::WillEndFullScreenPresentation(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,UIKit.IUIViewControllerTransitionCoordinator)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::WillPresentInterstitialTimeRange(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,AVKit.AVInterstitialTimeRange)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::WillResumePlaybackAfterUserNavigatedFromTime(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,CoreMedia.CMTime,CoreMedia.CMTime)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::WillStartPictureInPicture(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::WillStopPictureInPicture(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController)",
			"AVKit.AVPlayerViewControllerDelegate_Extensions::WillTransitionToVisibilityOfTransportBar(AVKit.IAVPlayerViewControllerDelegate,AVKit.AVPlayerViewController,System.Boolean,AVKit.IAVPlayerViewControllerAnimationCoordinator)",
			"AVKit.AVPlayerViewDelegate_Extensions::DidEnterFullScreen(AVKit.IAVPlayerViewDelegate,AVKit.AVPlayerView)",
			"AVKit.AVPlayerViewDelegate_Extensions::DidExitFullScreen(AVKit.IAVPlayerViewDelegate,AVKit.AVPlayerView)",
			"AVKit.AVPlayerViewDelegate_Extensions::RestoreUserInterfaceForFullScreenExit(AVKit.IAVPlayerViewDelegate,AVKit.AVPlayerView,System.Action`1<System.Boolean>)",
			"AVKit.AVPlayerViewDelegate_Extensions::WillEnterFullScreen(AVKit.IAVPlayerViewDelegate,AVKit.AVPlayerView)",
			"AVKit.AVPlayerViewDelegate_Extensions::WillExitFullScreen(AVKit.IAVPlayerViewDelegate,AVKit.AVPlayerView)",
			"AVKit.AVPlayerViewPictureInPictureDelegate_Extensions::DidStart(AVKit.IAVPlayerViewPictureInPictureDelegate,AVKit.AVPlayerView)",
			"AVKit.AVPlayerViewPictureInPictureDelegate_Extensions::DidStop(AVKit.IAVPlayerViewPictureInPictureDelegate,AVKit.AVPlayerView)",
			"AVKit.AVPlayerViewPictureInPictureDelegate_Extensions::FailedToStart(AVKit.IAVPlayerViewPictureInPictureDelegate,AVKit.AVPlayerView,Foundation.NSError)",
			"AVKit.AVPlayerViewPictureInPictureDelegate_Extensions::RestoreUserInterface(AVKit.IAVPlayerViewPictureInPictureDelegate,AVKit.AVPlayerView,System.Action`1<System.Boolean>)",
			"AVKit.AVPlayerViewPictureInPictureDelegate_Extensions::ShouldAutomaticallyDismiss(AVKit.IAVPlayerViewPictureInPictureDelegate,AVKit.AVPlayerView)",
			"AVKit.AVPlayerViewPictureInPictureDelegate_Extensions::WillStart(AVKit.IAVPlayerViewPictureInPictureDelegate,AVKit.AVPlayerView)",
			"AVKit.AVPlayerViewPictureInPictureDelegate_Extensions::WillStop(AVKit.IAVPlayerViewPictureInPictureDelegate,AVKit.AVPlayerView)",
			"AVKit.AVRoutePickerView::.ctor(Foundation.NSCoder)",
			"AVKit.AVRoutePickerView::SetRoutePickerButtonColor(AppKit.NSColor,AVKit.AVRoutePickerViewButtonState)",
			"AVKit.AVRoutePickerViewDelegate_Extensions::DidEndPresentingRoutes(AVKit.IAVRoutePickerViewDelegate,AVKit.AVRoutePickerView)",
			"AVKit.AVRoutePickerViewDelegate_Extensions::WillBeginPresentingRoutes(AVKit.IAVRoutePickerViewDelegate,AVKit.AVRoutePickerView)",
			"AVKit.UIWindow_AVAdditions::GetAVDisplayManager(UIKit.UIWindow)",
			"BackgroundTasks.BGTaskRequest::Copy(Foundation.NSZone)",
			"BackgroundTasks.BGTaskRequest::set_EarliestBeginDate(Foundation.NSDate)",
			"BackgroundTasks.BGTaskScheduler::Register(System.String,CoreFoundation.DispatchQueue,System.Action`1<BackgroundTasks.BGTask>)",
			"BackgroundTasks.BGTaskScheduler::Submit(BackgroundTasks.BGTaskRequest,Foundation.NSError&)",
			"BusinessChat.BCChatAction::OpenTranscript(System.String,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSString>)",
			"BusinessChat.BCChatButton::.ctor(Foundation.NSCoder)",
			"CallKit.CXAction::.ctor(Foundation.NSCoder)",
			"CallKit.CXAction::Copy(Foundation.NSZone)",
			"CallKit.CXAction::EncodeTo(Foundation.NSCoder)",
			"CallKit.CXAnswerCallAction::.ctor(Foundation.NSCoder)",
			"CallKit.CXAnswerCallAction::.ctor(Foundation.NSUuid)",
			"CallKit.CXAnswerCallAction::Fulfill(Foundation.NSDate)",
			"CallKit.CXCall::IsEqual(CallKit.CXCall)",
			"CallKit.CXCallAction::.ctor(Foundation.NSCoder)",
			"CallKit.CXCallAction::.ctor(Foundation.NSUuid)",
			"CallKit.CXCallController::.ctor(CoreFoundation.DispatchQueue)",
			"CallKit.CXCallController::RequestTransaction(CallKit.CXAction,System.Action`1<Foundation.NSError>)",
			"CallKit.CXCallController::RequestTransaction(CallKit.CXTransaction,System.Action`1<Foundation.NSError>)",
			"CallKit.CXCallDirectoryExtensionContextDelegateWrapper::RequestFailed(CallKit.CXCallDirectoryExtensionContext,Foundation.NSError)",
			"CallKit.CXCallDirectoryProvider::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"CallKit.CXCallObserver::SetDelegate(CallKit.ICXCallObserverDelegate,CoreFoundation.DispatchQueue)",
			"CallKit.CXCallObserverDelegateWrapper::CallChanged(CallKit.CXCallObserver,CallKit.CXCall)",
			"CallKit.CXCallUpdate::Copy(Foundation.NSZone)",
			"CallKit.CXCallUpdate::set_RemoteHandle(CallKit.CXHandle)",
			"CallKit.CXEndCallAction::.ctor(Foundation.NSCoder)",
			"CallKit.CXEndCallAction::.ctor(Foundation.NSUuid)",
			"CallKit.CXEndCallAction::Fulfill(Foundation.NSDate)",
			"CallKit.CXHandle::.ctor(Foundation.NSCoder)",
			"CallKit.CXHandle::Copy(Foundation.NSZone)",
			"CallKit.CXHandle::EncodeTo(Foundation.NSCoder)",
			"CallKit.CXHandle::IsEqual(CallKit.CXHandle)",
			"CallKit.CXPlayDtmfCallAction::.ctor(Foundation.NSCoder)",
			"CallKit.CXPlayDtmfCallAction::.ctor(Foundation.NSUuid,System.String,CallKit.CXPlayDtmfCallActionType)",
			"CallKit.CXProvider::.ctor(CallKit.CXProviderConfiguration)",
			"CallKit.CXProvider::GetPendingCallActions(ObjCRuntime.Class,Foundation.NSUuid)",
			"CallKit.CXProvider::ReportCall(Foundation.NSUuid,CallKit.CXCallUpdate)",
			"CallKit.CXProvider::ReportCall(Foundation.NSUuid,Foundation.NSDate,CallKit.CXCallEndedReason)",
			"CallKit.CXProvider::ReportConnectedOutgoingCall(Foundation.NSUuid,Foundation.NSDate)",
			"CallKit.CXProvider::ReportConnectingOutgoingCall(Foundation.NSUuid,Foundation.NSDate)",
			"CallKit.CXProvider::ReportNewIncomingCall(Foundation.NSUuid,CallKit.CXCallUpdate,System.Action`1<Foundation.NSError>)",
			"CallKit.CXProvider::ReportNewIncomingVoIPPushPayload(Foundation.NSDictionary,System.Action`1<Foundation.NSError>)",
			"CallKit.CXProvider::set_Configuration(CallKit.CXProviderConfiguration)",
			"CallKit.CXProvider::SetDelegate(CallKit.ICXProviderDelegate,CoreFoundation.DispatchQueue)",
			"CallKit.CXProviderConfiguration::Copy(Foundation.NSZone)",
			"CallKit.CXProviderConfiguration::set_IconTemplateImageData(Foundation.NSData)",
			"CallKit.CXProviderConfiguration::set_SupportedHandleTypes(Foundation.NSSet`1<Foundation.NSNumber>)",
			"CallKit.CXProviderDelegate_Extensions::DidActivateAudioSession(CallKit.ICXProviderDelegate,CallKit.CXProvider,AVFoundation.AVAudioSession)",
			"CallKit.CXProviderDelegate_Extensions::DidBegin(CallKit.ICXProviderDelegate,CallKit.CXProvider)",
			"CallKit.CXProviderDelegate_Extensions::DidDeactivateAudioSession(CallKit.ICXProviderDelegate,CallKit.CXProvider,AVFoundation.AVAudioSession)",
			"CallKit.CXProviderDelegate_Extensions::ExecuteTransaction(CallKit.ICXProviderDelegate,CallKit.CXProvider,CallKit.CXTransaction)",
			"CallKit.CXProviderDelegate_Extensions::PerformAnswerCallAction(CallKit.ICXProviderDelegate,CallKit.CXProvider,CallKit.CXAnswerCallAction)",
			"CallKit.CXProviderDelegate_Extensions::PerformEndCallAction(CallKit.ICXProviderDelegate,CallKit.CXProvider,CallKit.CXEndCallAction)",
			"CallKit.CXProviderDelegate_Extensions::PerformPlayDtmfCallAction(CallKit.ICXProviderDelegate,CallKit.CXProvider,CallKit.CXPlayDtmfCallAction)",
			"CallKit.CXProviderDelegate_Extensions::PerformSetGroupCallAction(CallKit.ICXProviderDelegate,CallKit.CXProvider,CallKit.CXSetGroupCallAction)",
			"CallKit.CXProviderDelegate_Extensions::PerformSetHeldCallAction(CallKit.ICXProviderDelegate,CallKit.CXProvider,CallKit.CXSetHeldCallAction)",
			"CallKit.CXProviderDelegate_Extensions::PerformSetMutedCallAction(CallKit.ICXProviderDelegate,CallKit.CXProvider,CallKit.CXSetMutedCallAction)",
			"CallKit.CXProviderDelegate_Extensions::PerformStartCallAction(CallKit.ICXProviderDelegate,CallKit.CXProvider,CallKit.CXStartCallAction)",
			"CallKit.CXProviderDelegate_Extensions::TimedOutPerformingAction(CallKit.ICXProviderDelegate,CallKit.CXProvider,CallKit.CXAction)",
			"CallKit.CXProviderDelegateWrapper::DidReset(CallKit.CXProvider)",
			"CallKit.CXSetGroupCallAction::.ctor(Foundation.NSCoder)",
			"CallKit.CXSetGroupCallAction::.ctor(Foundation.NSUuid,Foundation.NSUuid)",
			"CallKit.CXSetGroupCallAction::set_CallUuidToGroupWith(Foundation.NSUuid)",
			"CallKit.CXSetHeldCallAction::.ctor(Foundation.NSCoder)",
			"CallKit.CXSetHeldCallAction::.ctor(Foundation.NSUuid,System.Boolean)",
			"CallKit.CXSetMutedCallAction::.ctor(Foundation.NSCoder)",
			"CallKit.CXSetMutedCallAction::.ctor(Foundation.NSUuid,System.Boolean)",
			"CallKit.CXStartCallAction::.ctor(Foundation.NSCoder)",
			"CallKit.CXStartCallAction::.ctor(Foundation.NSUuid,CallKit.CXHandle)",
			"CallKit.CXStartCallAction::Fulfill(Foundation.NSDate)",
			"CallKit.CXStartCallAction::set_CallHandle(CallKit.CXHandle)",
			"CallKit.CXTransaction::.ctor(CallKit.CXAction)",
			"CallKit.CXTransaction::.ctor(Foundation.NSCoder)",
			"CallKit.CXTransaction::AddAction(CallKit.CXAction)",
			"CallKit.CXTransaction::Copy(Foundation.NSZone)",
			"CallKit.CXTransaction::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPActionSheetTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPAlertAction::.ctor(Foundation.NSCoder)",
			"CarPlay.CPAlertAction::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPAlertTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPApplicationDelegate_Extensions::DidSelectManeuver(CarPlay.ICPApplicationDelegate,UIKit.UIApplication,CarPlay.CPManeuver)",
			"CarPlay.CPApplicationDelegate_Extensions::DidSelectNavigationAlert(CarPlay.ICPApplicationDelegate,UIKit.UIApplication,CarPlay.CPNavigationAlert)",
			"CarPlay.CPApplicationDelegateWrapper::DidConnectCarInterfaceController(UIKit.UIApplication,CarPlay.CPInterfaceController,CarPlay.CPWindow)",
			"CarPlay.CPApplicationDelegateWrapper::DidDisconnectCarInterfaceController(UIKit.UIApplication,CarPlay.CPInterfaceController,CarPlay.CPWindow)",
			"CarPlay.CPAssistantCellConfiguration::.ctor(Foundation.NSCoder)",
			"CarPlay.CPAssistantCellConfiguration::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPBarButton::.ctor(Foundation.NSCoder)",
			"CarPlay.CPBarButton::.ctor(UIKit.UIImage,CarPlay.CPBarButtonHandler)",
			"CarPlay.CPBarButton::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPBarButton::set_Image(UIKit.UIImage)",
			"CarPlay.CPBarButtonProvidingWrapper::set_BackButton(CarPlay.CPBarButton)",
			"CarPlay.CPButton::.ctor(UIKit.UIImage,System.Action`1<CarPlay.CPButton>)",
			"CarPlay.CPContact::.ctor(Foundation.NSCoder)",
			"CarPlay.CPContact::.ctor(System.String,UIKit.UIImage)",
			"CarPlay.CPContact::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPContact::set_Image(UIKit.UIImage)",
			"CarPlay.CPContactCallButton::.ctor(UIKit.UIImage,System.Action`1<CarPlay.CPButton>)",
			"CarPlay.CPContactDirectionsButton::.ctor(UIKit.UIImage,System.Action`1<CarPlay.CPButton>)",
			"CarPlay.CPContactMessageButton::.ctor(UIKit.UIImage,System.Action`1<CarPlay.CPButton>)",
			"CarPlay.CPContactTemplate::.ctor(CarPlay.CPContact)",
			"CarPlay.CPContactTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPContactTemplate::set_BackButton(CarPlay.CPBarButton)",
			"CarPlay.CPContactTemplate::set_Contact(CarPlay.CPContact)",
			"CarPlay.CPDashboardButton::.ctor(Foundation.NSCoder)",
			"CarPlay.CPDashboardButton::.ctor(System.String[],System.String[],UIKit.UIImage,System.Action`1<CarPlay.CPDashboardButton>)",
			"CarPlay.CPDashboardButton::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPGridButton::.ctor(Foundation.NSCoder)",
			"CarPlay.CPGridButton::.ctor(System.String[],UIKit.UIImage,System.Action`1<CarPlay.CPGridButton>)",
			"CarPlay.CPGridButton::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPGridTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPGridTemplate::set_BackButton(CarPlay.CPBarButton)",
			"CarPlay.CPImageSet::.ctor(Foundation.NSCoder)",
			"CarPlay.CPImageSet::.ctor(UIKit.UIImage,UIKit.UIImage)",
			"CarPlay.CPImageSet::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPInformationItem::.ctor(Foundation.NSCoder)",
			"CarPlay.CPInformationItem::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPInformationRatingItem::.ctor(Foundation.NSCoder)",
			"CarPlay.CPInformationRatingItem::.ctor(Foundation.NSNumber,Foundation.NSNumber,System.String,System.String)",
			"CarPlay.CPInformationTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPInstrumentClusterControllerDelegate_Extensions::DidChangeCompassSetting(CarPlay.ICPInstrumentClusterControllerDelegate,CarPlay.CPInstrumentClusterController,CarPlay.CPInstrumentClusterSetting)",
			"CarPlay.CPInstrumentClusterControllerDelegate_Extensions::DidChangeSpeedLimitSetting(CarPlay.ICPInstrumentClusterControllerDelegate,CarPlay.CPInstrumentClusterController,CarPlay.CPInstrumentClusterSetting)",
			"CarPlay.CPInstrumentClusterControllerDelegate_Extensions::DidZoomIn(CarPlay.ICPInstrumentClusterControllerDelegate,CarPlay.CPInstrumentClusterController)",
			"CarPlay.CPInstrumentClusterControllerDelegate_Extensions::DidZoomOut(CarPlay.ICPInstrumentClusterControllerDelegate,CarPlay.CPInstrumentClusterController)",
			"CarPlay.CPInstrumentClusterControllerDelegateWrapper::DidConnectWindow(UIKit.UIWindow)",
			"CarPlay.CPInstrumentClusterControllerDelegateWrapper::DidDisconnectWindow(UIKit.UIWindow)",
			"CarPlay.CPInterfaceController::PopToTemplate(CarPlay.CPTemplate,System.Boolean)",
			"CarPlay.CPInterfaceController::PopToTemplate(CarPlay.CPTemplate,System.Boolean,System.Action`2<System.Boolean,Foundation.NSError>)",
			"CarPlay.CPInterfaceController::PresentTemplate(CarPlay.CPTemplate,System.Boolean)",
			"CarPlay.CPInterfaceController::PresentTemplate(CarPlay.CPTemplate,System.Boolean,System.Action`2<System.Boolean,Foundation.NSError>)",
			"CarPlay.CPInterfaceController::PushTemplate(CarPlay.CPTemplate,System.Boolean)",
			"CarPlay.CPInterfaceController::PushTemplate(CarPlay.CPTemplate,System.Boolean,System.Action`2<System.Boolean,Foundation.NSError>)",
			"CarPlay.CPInterfaceController::SetRootTemplate(CarPlay.CPTemplate,System.Boolean)",
			"CarPlay.CPInterfaceController::SetRootTemplate(CarPlay.CPTemplate,System.Boolean,System.Action`2<System.Boolean,Foundation.NSError>)",
			"CarPlay.CPInterfaceControllerDelegate_Extensions::TemplateDidAppear(CarPlay.ICPInterfaceControllerDelegate,CarPlay.CPTemplate,System.Boolean)",
			"CarPlay.CPInterfaceControllerDelegate_Extensions::TemplateDidDisappear(CarPlay.ICPInterfaceControllerDelegate,CarPlay.CPTemplate,System.Boolean)",
			"CarPlay.CPInterfaceControllerDelegate_Extensions::TemplateWillAppear(CarPlay.ICPInterfaceControllerDelegate,CarPlay.CPTemplate,System.Boolean)",
			"CarPlay.CPInterfaceControllerDelegate_Extensions::TemplateWillDisappear(CarPlay.ICPInterfaceControllerDelegate,CarPlay.CPTemplate,System.Boolean)",
			"CarPlay.CPListImageRowItem::set_UserInfo(Foundation.NSObject)",
			"CarPlay.CPListItem::.ctor(Foundation.NSCoder)",
			"CarPlay.CPListItem::.ctor(System.String,System.String,UIKit.UIImage)",
			"CarPlay.CPListItem::.ctor(System.String,System.String,UIKit.UIImage,System.Boolean)",
			"CarPlay.CPListItem::.ctor(System.String,System.String,UIKit.UIImage,UIKit.UIImage,CarPlay.CPListItemAccessoryType)",
			"CarPlay.CPListItem::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPListItem::set_UserInfo(Foundation.NSObject)",
			"CarPlay.CPListItem::SetAccessoryImage(UIKit.UIImage)",
			"CarPlay.CPListItem::SetImage(UIKit.UIImage)",
			"CarPlay.CPListSection::.ctor(CarPlay.ICPListTemplateItem[],System.String,System.String,UIKit.UIImage,CarPlay.CPButton,System.String)",
			"CarPlay.CPListSection::.ctor(Foundation.NSCoder)",
			"CarPlay.CPListSection::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPListSection::GetIndex(CarPlay.ICPListTemplateItem)",
			"CarPlay.CPListSection::set_HeaderImage(UIKit.UIImage)",
			"CarPlay.CPListTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPListTemplate::.ctor(System.String,CarPlay.CPListSection[],CarPlay.CPAssistantCellConfiguration)",
			"CarPlay.CPListTemplate::GetIndexPath(CarPlay.ICPListTemplateItem)",
			"CarPlay.CPListTemplate::set_AssistantCellConfiguration(CarPlay.CPAssistantCellConfiguration)",
			"CarPlay.CPListTemplate::set_BackButton(CarPlay.CPBarButton)",
			"CarPlay.CPListTemplateDelegateWrapper::DidSelectListItem(CarPlay.CPListTemplate,CarPlay.CPListItem,System.Action)",
			"CarPlay.CPListTemplateItemWrapper::set_UserInfo(Foundation.NSObject)",
			"CarPlay.CPManeuver::.ctor(Foundation.NSCoder)",
			"CarPlay.CPManeuver::Copy(Foundation.NSZone)",
			"CarPlay.CPManeuver::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPManeuver::set_CardBackgroundColor(UIKit.UIColor)",
			"CarPlay.CPManeuver::set_DashboardJunctionImage(UIKit.UIImage)",
			"CarPlay.CPManeuver::set_DashboardSymbolImage(UIKit.UIImage)",
			"CarPlay.CPManeuver::set_InitialTravelEstimates(CarPlay.CPTravelEstimates)",
			"CarPlay.CPManeuver::set_JunctionImage(UIKit.UIImage)",
			"CarPlay.CPManeuver::set_NotificationSymbolImage(UIKit.UIImage)",
			"CarPlay.CPManeuver::set_SymbolImage(UIKit.UIImage)",
			"CarPlay.CPManeuver::set_SymbolSet(CarPlay.CPImageSet)",
			"CarPlay.CPManeuver::set_UserInfo(Foundation.NSObject)",
			"CarPlay.CPMapButton::.ctor(Foundation.NSCoder)",
			"CarPlay.CPMapButton::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPMapButton::set_FocusedImage(UIKit.UIImage)",
			"CarPlay.CPMapButton::set_Image(UIKit.UIImage)",
			"CarPlay.CPMapTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPMapTemplate::PresentNavigationAlert(CarPlay.CPNavigationAlert,System.Boolean)",
			"CarPlay.CPMapTemplate::set_BackButton(CarPlay.CPBarButton)",
			"CarPlay.CPMapTemplate::set_GuidanceBackgroundColor(UIKit.UIColor)",
			"CarPlay.CPMapTemplate::ShowRouteChoicesPreview(CarPlay.CPTrip,CarPlay.CPTripPreviewTextConfiguration)",
			"CarPlay.CPMapTemplate::ShowTripPreviews(CarPlay.CPTrip[],CarPlay.CPTrip,CarPlay.CPTripPreviewTextConfiguration)",
			"CarPlay.CPMapTemplate::ShowTripPreviews(CarPlay.CPTrip[],CarPlay.CPTripPreviewTextConfiguration)",
			"CarPlay.CPMapTemplate::StartNavigationSession(CarPlay.CPTrip)",
			"CarPlay.CPMapTemplate::UpdateTravelEstimates(CarPlay.CPTravelEstimates,CarPlay.CPTrip)",
			"CarPlay.CPMapTemplate::UpdateTravelEstimates(CarPlay.CPTravelEstimates,CarPlay.CPTrip,CarPlay.CPTimeRemainingColor)",
			"CarPlay.CPMapTemplateDelegate_Extensions::DidBeginPanGesture(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate)",
			"CarPlay.CPMapTemplateDelegate_Extensions::DidCancelNavigation(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate)",
			"CarPlay.CPMapTemplateDelegate_Extensions::DidDismissNavigationAlert(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert,CarPlay.CPNavigationAlertDismissalContext)",
			"CarPlay.CPMapTemplateDelegate_Extensions::DidDismissPanningInterface(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate)",
			"CarPlay.CPMapTemplateDelegate_Extensions::DidEndPanGesture(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CoreGraphics.CGPoint)",
			"CarPlay.CPMapTemplateDelegate_Extensions::DidShowNavigationAlert(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert)",
			"CarPlay.CPMapTemplateDelegate_Extensions::DidShowPanningInterface(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate)",
			"CarPlay.CPMapTemplateDelegate_Extensions::DidUpdatePanGesture(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CoreGraphics.CGPoint,CoreGraphics.CGPoint)",
			"CarPlay.CPMapTemplateDelegate_Extensions::GetDisplayStyle(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPManeuver)",
			"CarPlay.CPMapTemplateDelegate_Extensions::Pan(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPPanDirection)",
			"CarPlay.CPMapTemplateDelegate_Extensions::PanBegan(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPPanDirection)",
			"CarPlay.CPMapTemplateDelegate_Extensions::PanEnded(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPPanDirection)",
			"CarPlay.CPMapTemplateDelegate_Extensions::SelectedPreview(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPTrip,CarPlay.CPRouteChoice)",
			"CarPlay.CPMapTemplateDelegate_Extensions::ShouldShowNotificationForManeuver(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPManeuver)",
			"CarPlay.CPMapTemplateDelegate_Extensions::ShouldShowNotificationForNavigationAlert(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert)",
			"CarPlay.CPMapTemplateDelegate_Extensions::ShouldUpdateNotificationForManeuver(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPManeuver,CarPlay.CPTravelEstimates)",
			"CarPlay.CPMapTemplateDelegate_Extensions::StartedTrip(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPTrip,CarPlay.CPRouteChoice)",
			"CarPlay.CPMapTemplateDelegate_Extensions::WillDismissNavigationAlert(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert,CarPlay.CPNavigationAlertDismissalContext)",
			"CarPlay.CPMapTemplateDelegate_Extensions::WillDismissPanningInterface(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate)",
			"CarPlay.CPMapTemplateDelegate_Extensions::WillShowNavigationAlert(CarPlay.ICPMapTemplateDelegate,CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert)",
			"CarPlay.CPMessageComposeBarButton::.ctor(Foundation.NSCoder)",
			"CarPlay.CPMessageComposeBarButton::.ctor(UIKit.UIImage)",
			"CarPlay.CPMessageListItem::InitWithConversationIdentifier(System.String,System.String,CarPlay.CPMessageListItemLeadingConfiguration,CarPlay.CPMessageListItemTrailingConfiguration,System.String,System.String)",
			"CarPlay.CPMessageListItem::InitWithFullName(System.String,System.String,CarPlay.CPMessageListItemLeadingConfiguration,CarPlay.CPMessageListItemTrailingConfiguration,System.String,System.String)",
			"CarPlay.CPMessageListItem::set_LeadingConfiguration(CarPlay.CPMessageListItemLeadingConfiguration)",
			"CarPlay.CPMessageListItem::set_TrailingConfiguration(CarPlay.CPMessageListItemTrailingConfiguration)",
			"CarPlay.CPMessageListItem::set_UserInfo(Foundation.NSObject)",
			"CarPlay.CPMessageListItemLeadingConfiguration::.ctor(CarPlay.CPMessageLeadingItem,UIKit.UIImage,System.Boolean)",
			"CarPlay.CPMessageListItemTrailingConfiguration::.ctor(CarPlay.CPMessageTrailingItem,UIKit.UIImage)",
			"CarPlay.CPNavigationAlert::.ctor(Foundation.NSCoder)",
			"CarPlay.CPNavigationAlert::.ctor(System.String[],System.String[],CarPlay.CPImageSet,CarPlay.CPAlertAction,CarPlay.CPAlertAction,System.Double)",
			"CarPlay.CPNavigationAlert::.ctor(System.String[],System.String[],UIKit.UIImage,CarPlay.CPAlertAction,CarPlay.CPAlertAction,System.Double)",
			"CarPlay.CPNavigationAlert::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPNavigationSession::PauseTrip(CarPlay.CPTripPauseReason,System.String,UIKit.UIColor)",
			"CarPlay.CPNavigationSession::UpdateTravelEstimates(CarPlay.CPTravelEstimates,CarPlay.CPManeuver)",
			"CarPlay.CPNowPlayingAddToLibraryButton::.ctor(Foundation.NSCoder)",
			"CarPlay.CPNowPlayingButton::.ctor(Foundation.NSCoder)",
			"CarPlay.CPNowPlayingButton::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPNowPlayingImageButton::.ctor(Foundation.NSCoder)",
			"CarPlay.CPNowPlayingImageButton::.ctor(UIKit.UIImage,System.Action`1<CarPlay.CPNowPlayingButton>)",
			"CarPlay.CPNowPlayingMoreButton::.ctor(Foundation.NSCoder)",
			"CarPlay.CPNowPlayingPlaybackRateButton::.ctor(Foundation.NSCoder)",
			"CarPlay.CPNowPlayingRepeatButton::.ctor(Foundation.NSCoder)",
			"CarPlay.CPNowPlayingShuffleButton::.ctor(Foundation.NSCoder)",
			"CarPlay.CPNowPlayingTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPNowPlayingTemplate::AddObserver(CarPlay.ICPNowPlayingTemplateObserver)",
			"CarPlay.CPNowPlayingTemplate::RemoveObserver(CarPlay.ICPNowPlayingTemplateObserver)",
			"CarPlay.CPNowPlayingTemplateObserver_Extensions::AlbumArtistButtonTapped(CarPlay.ICPNowPlayingTemplateObserver,CarPlay.CPNowPlayingTemplate)",
			"CarPlay.CPNowPlayingTemplateObserver_Extensions::UpNextButtonTapped(CarPlay.ICPNowPlayingTemplateObserver,CarPlay.CPNowPlayingTemplate)",
			"CarPlay.CPPointOfInterest::.ctor(Foundation.NSCoder)",
			"CarPlay.CPPointOfInterest::.ctor(MapKit.MKMapItem,System.String,System.String,System.String,System.String,System.String,System.String,UIKit.UIImage)",
			"CarPlay.CPPointOfInterest::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPPointOfInterest::set_Location(MapKit.MKMapItem)",
			"CarPlay.CPPointOfInterest::set_PinImage(UIKit.UIImage)",
			"CarPlay.CPPointOfInterest::set_PrimaryButton(CarPlay.CPTextButton)",
			"CarPlay.CPPointOfInterest::set_SecondaryButton(CarPlay.CPTextButton)",
			"CarPlay.CPPointOfInterest::set_UserInfo(Foundation.NSObject)",
			"CarPlay.CPPointOfInterestTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPPointOfInterestTemplateDelegate_Extensions::DidSelectPointOfInterest(CarPlay.ICPPointOfInterestTemplateDelegate,CarPlay.CPPointOfInterestTemplate,CarPlay.CPPointOfInterest)",
			"CarPlay.CPPointOfInterestTemplateDelegateWrapper::DidChangeMapRegion(CarPlay.CPPointOfInterestTemplate,MapKit.MKCoordinateRegion)",
			"CarPlay.CPRouteChoice::.ctor(Foundation.NSCoder)",
			"CarPlay.CPRouteChoice::Copy(Foundation.NSZone)",
			"CarPlay.CPRouteChoice::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPRouteChoice::set_UserInfo(Foundation.NSObject)",
			"CarPlay.CPSearchTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPSearchTemplateDelegate_Extensions::SearchButtonPressed(CarPlay.ICPSearchTemplateDelegate,CarPlay.CPSearchTemplate)",
			"CarPlay.CPSearchTemplateDelegateWrapper::SelectedResult(CarPlay.CPSearchTemplate,CarPlay.CPListItem,System.Action)",
			"CarPlay.CPSearchTemplateDelegateWrapper::UpdatedSearchText(CarPlay.CPSearchTemplate,System.String,CarPlay.CPSearchTemplateDelegateUpdateHandler)",
			"CarPlay.CPSelectableListItemWrapper::set_UserInfo(Foundation.NSObject)",
			"CarPlay.CPSessionConfiguration::.ctor(CarPlay.ICPSessionConfigurationDelegate)",
			"CarPlay.CPSessionConfigurationDelegate_Extensions::ContentStyleChanged(CarPlay.ICPSessionConfigurationDelegate,CarPlay.CPSessionConfiguration,CarPlay.CPContentStyle)",
			"CarPlay.CPSessionConfigurationDelegate_Extensions::LimitedUserInterfacesChanged(CarPlay.ICPSessionConfigurationDelegate,CarPlay.CPSessionConfiguration,CarPlay.CPLimitableUserInterface)",
			"CarPlay.CPTabBarTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPTabBarTemplateDelegateWrapper::DidSelectTemplate(CarPlay.CPTabBarTemplate,CarPlay.CPTemplate)",
			"CarPlay.CPTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPTemplate::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPTemplate::set_TabImage(UIKit.UIImage)",
			"CarPlay.CPTemplate::set_UserInfo(Foundation.NSObject)",
			"CarPlay.CPTemplateApplicationDashboardScene::.ctor(UIKit.UISceneSession,UIKit.UISceneConnectionOptions)",
			"CarPlay.CPTemplateApplicationDashboardScene::set_WeakDelegate(Foundation.NSObject)",
			"CarPlay.CPTemplateApplicationDashboardSceneDelegate_Extensions::DidConnectDashboardController(CarPlay.ICPTemplateApplicationDashboardSceneDelegate,CarPlay.CPTemplateApplicationDashboardScene,CarPlay.CPDashboardController,UIKit.UIWindow)",
			"CarPlay.CPTemplateApplicationDashboardSceneDelegate_Extensions::DidDisconnectDashboardController(CarPlay.ICPTemplateApplicationDashboardSceneDelegate,CarPlay.CPTemplateApplicationDashboardScene,CarPlay.CPDashboardController,UIKit.UIWindow)",
			"CarPlay.CPTemplateApplicationInstrumentClusterScene::.ctor(UIKit.UISceneSession,UIKit.UISceneConnectionOptions)",
			"CarPlay.CPTemplateApplicationInstrumentClusterScene::set_WeakDelegate(Foundation.NSObject)",
			"CarPlay.CPTemplateApplicationInstrumentClusterSceneDelegate_Extensions::ContentStyleDidChange(CarPlay.ICPTemplateApplicationInstrumentClusterSceneDelegate,UIKit.UIUserInterfaceStyle)",
			"CarPlay.CPTemplateApplicationInstrumentClusterSceneDelegate_Extensions::DidConnectInstrumentClusterController(CarPlay.ICPTemplateApplicationInstrumentClusterSceneDelegate,CarPlay.CPTemplateApplicationInstrumentClusterScene,CarPlay.CPInstrumentClusterController)",
			"CarPlay.CPTemplateApplicationInstrumentClusterSceneDelegate_Extensions::DidDisconnectInstrumentClusterController(CarPlay.ICPTemplateApplicationInstrumentClusterSceneDelegate,CarPlay.CPTemplateApplicationInstrumentClusterScene,CarPlay.CPInstrumentClusterController)",
			"CarPlay.CPTemplateApplicationScene::.ctor(UIKit.UISceneSession,UIKit.UISceneConnectionOptions)",
			"CarPlay.CPTemplateApplicationScene::set_WeakDelegate(Foundation.NSObject)",
			"CarPlay.CPTemplateApplicationSceneDelegate_Extensions::ContentStyleDidChange(CarPlay.ICPTemplateApplicationSceneDelegate,UIKit.UIUserInterfaceStyle)",
			"CarPlay.CPTemplateApplicationSceneDelegate_Extensions::DidConnect(CarPlay.ICPTemplateApplicationSceneDelegate,CarPlay.CPTemplateApplicationScene,CarPlay.CPInterfaceController)",
			"CarPlay.CPTemplateApplicationSceneDelegate_Extensions::DidConnect(CarPlay.ICPTemplateApplicationSceneDelegate,CarPlay.CPTemplateApplicationScene,CarPlay.CPInterfaceController,CarPlay.CPWindow)",
			"CarPlay.CPTemplateApplicationSceneDelegate_Extensions::DidDisconnect(CarPlay.ICPTemplateApplicationSceneDelegate,CarPlay.CPTemplateApplicationScene,CarPlay.CPInterfaceController)",
			"CarPlay.CPTemplateApplicationSceneDelegate_Extensions::DidDisconnect(CarPlay.ICPTemplateApplicationSceneDelegate,CarPlay.CPTemplateApplicationScene,CarPlay.CPInterfaceController,CarPlay.CPWindow)",
			"CarPlay.CPTemplateApplicationSceneDelegate_Extensions::DidSelect(CarPlay.ICPTemplateApplicationSceneDelegate,CarPlay.CPTemplateApplicationScene,CarPlay.CPManeuver)",
			"CarPlay.CPTemplateApplicationSceneDelegate_Extensions::DidSelect(CarPlay.ICPTemplateApplicationSceneDelegate,CarPlay.CPTemplateApplicationScene,CarPlay.CPNavigationAlert)",
			"CarPlay.CPTravelEstimates::.ctor(Foundation.NSCoder)",
			"CarPlay.CPTravelEstimates::.ctor(Foundation.NSMeasurement`1<Foundation.NSUnitLength>,System.Double)",
			"CarPlay.CPTravelEstimates::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPTrip::.ctor(Foundation.NSCoder)",
			"CarPlay.CPTrip::.ctor(MapKit.MKMapItem,MapKit.MKMapItem,CarPlay.CPRouteChoice[])",
			"CarPlay.CPTrip::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPTrip::set_UserInfo(Foundation.NSObject)",
			"CarPlay.CPTripPreviewTextConfiguration::.ctor(Foundation.NSCoder)",
			"CarPlay.CPTripPreviewTextConfiguration::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPVoiceControlState::.ctor(Foundation.NSCoder)",
			"CarPlay.CPVoiceControlState::.ctor(System.String,System.String[],UIKit.UIImage,System.Boolean)",
			"CarPlay.CPVoiceControlState::EncodeTo(Foundation.NSCoder)",
			"CarPlay.CPVoiceControlTemplate::.ctor(Foundation.NSCoder)",
			"CarPlay.CPWindow::.ctor(Foundation.NSCoder)",
			"CFNetwork.CFHTTPAuthentication::AppliesToRequest(CFNetwork.CFHTTPMessage)",
			"CFNetwork.CFHTTPAuthentication::CreateFromResponse(CFNetwork.CFHTTPMessage)",
			"CFNetwork.CFHTTPMessage::AddAuthentication(CFNetwork.CFHTTPMessage,Foundation.NSString,Foundation.NSString,CFNetwork.CFHTTPMessage/AuthenticationScheme,System.Boolean)",
			"CFNetwork.CFHTTPMessage::ApplyCredentialDictionary(CFNetwork.CFHTTPAuthentication,System.Net.NetworkCredential)",
			"CFNetwork.CFHTTPMessage::ApplyCredentials(CFNetwork.CFHTTPAuthentication,System.Net.NetworkCredential)",
			"CFNetwork.CFHTTPMessage::CreateRequest(CoreFoundation.CFUrl,Foundation.NSString,System.Version)",
			"ClassKit.CLSActivity::.ctor(Foundation.NSCoder)",
			"ClassKit.CLSActivity::AddAdditionalActivityItem(ClassKit.CLSActivityItem)",
			"ClassKit.CLSActivity::set_PrimaryActivityItem(ClassKit.CLSActivityItem)",
			"ClassKit.CLSActivityItem::.ctor(Foundation.NSCoder)",
			"ClassKit.CLSBinaryItem::.ctor(Foundation.NSCoder)",
			"ClassKit.CLSContext::.ctor(Foundation.NSCoder)",
			"ClassKit.CLSContext::AddChild(ClassKit.CLSContext)",
			"ClassKit.CLSContext::AddNavigationChild(ClassKit.CLSContext)",
			"ClassKit.CLSContext::AddProgressReportingCapabilities(Foundation.NSSet`1<ClassKit.CLSProgressReportingCapability>)",
			"ClassKit.CLSContext::RemoveNavigationChild(ClassKit.CLSContext)",
			"ClassKit.CLSContext::set_Thumbnail(CoreGraphics.CGImage)",
			"ClassKit.CLSContext::set_UniversalLinkUrl(Foundation.NSUrl)",
			"ClassKit.CLSContext::set_WeakTopic(Foundation.NSString)",
			"ClassKit.CLSContextProviderWrapper::UpdateDescendants(ClassKit.CLSContext,System.Action`1<Foundation.NSError>)",
			"ClassKit.CLSDataStore::FetchActivity(Foundation.NSUrl,System.Action`2<ClassKit.CLSActivity,Foundation.NSError>)",
			"ClassKit.CLSDataStore::FindContextsMatching(Foundation.NSPredicate,System.Action`2<ClassKit.CLSContext[],Foundation.NSError>)",
			"ClassKit.CLSDataStore::Remove(ClassKit.CLSContext)",
			"ClassKit.CLSDataStoreDelegateWrapper::CreateContext(System.String,ClassKit.CLSContext,System.String[])",
			"ClassKit.CLSObject::.ctor(Foundation.NSCoder)",
			"ClassKit.CLSObject::EncodeTo(Foundation.NSCoder)",
			"ClassKit.CLSProgressReportingCapability::.ctor(Foundation.NSCoder)",
			"ClassKit.CLSQuantityItem::.ctor(Foundation.NSCoder)",
			"ClassKit.CLSScoreItem::.ctor(Foundation.NSCoder)",
			"CloudKit.CKAsset::.ctor(Foundation.NSCoder)",
			"CloudKit.CKAsset::.ctor(Foundation.NSUrl)",
			"CloudKit.CKAsset::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKContainer::AcceptShareMetadata(CloudKit.CKShareMetadata,System.Action`2<CloudKit.CKShare,Foundation.NSError>)",
			"CloudKit.CKContainer::AddOperation(CloudKit.CKOperation)",
			"CloudKit.CKContainer::DiscoverUserIdentity(CloudKit.CKRecordID,System.Action`2<CloudKit.CKUserIdentity,Foundation.NSError>)",
			"CloudKit.CKContainer::FetchShareMetadata(Foundation.NSUrl,System.Action`2<CloudKit.CKShareMetadata,Foundation.NSError>)",
			"CloudKit.CKContainer::FetchShareParticipant(CloudKit.CKRecordID,System.Action`2<CloudKit.CKShareParticipant,Foundation.NSError>)",
			"CloudKit.CKDatabase::AddOperation(CloudKit.CKDatabaseOperation)",
			"CloudKit.CKDatabase::DeleteRecord(CloudKit.CKRecordID,System.Action`2<CloudKit.CKRecordID,Foundation.NSError>)",
			"CloudKit.CKDatabase::DeleteRecordZone(CloudKit.CKRecordZoneID,System.Action`2<CloudKit.CKRecordZoneID,Foundation.NSError>)",
			"CloudKit.CKDatabase::FetchRecord(CloudKit.CKRecordID,System.Action`2<CloudKit.CKRecord,Foundation.NSError>)",
			"CloudKit.CKDatabase::FetchRecordZone(CloudKit.CKRecordZoneID,System.Action`2<CloudKit.CKRecordZone,Foundation.NSError>)",
			"CloudKit.CKDatabase::PerformQuery(CloudKit.CKQuery,CloudKit.CKRecordZoneID,System.Action`2<CloudKit.CKRecord[],Foundation.NSError>)",
			"CloudKit.CKDatabase::SaveRecord(CloudKit.CKRecord,System.Action`2<CloudKit.CKRecord,Foundation.NSError>)",
			"CloudKit.CKDatabase::SaveRecordZone(CloudKit.CKRecordZone,System.Action`2<CloudKit.CKRecordZone,Foundation.NSError>)",
			"CloudKit.CKDatabase::SaveSubscription(CloudKit.CKSubscription,System.Action`2<CloudKit.CKSubscription,Foundation.NSError>)",
			"CloudKit.CKDatabaseNotification::.ctor(Foundation.NSCoder)",
			"CloudKit.CKDatabaseOperation::set_Database(CloudKit.CKDatabase)",
			"CloudKit.CKDatabaseSubscription::.ctor(Foundation.NSCoder)",
			"CloudKit.CKDatabaseSubscription::Copy(Foundation.NSZone)",
			"CloudKit.CKDatabaseSubscription::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKFetchDatabaseChangesOperation::.ctor(CloudKit.CKServerChangeToken)",
			"CloudKit.CKFetchDatabaseChangesOperation::set_PreviousServerChangeToken(CloudKit.CKServerChangeToken)",
			"CloudKit.CKFetchNotificationChangesOperation::.ctor(CloudKit.CKServerChangeToken)",
			"CloudKit.CKFetchNotificationChangesOperation::set_PreviousServerChangeToken(CloudKit.CKServerChangeToken)",
			"CloudKit.CKFetchRecordChangesOperation::.ctor(CloudKit.CKRecordZoneID,CloudKit.CKServerChangeToken)",
			"CloudKit.CKFetchRecordChangesOperation::set_PreviousServerChangeToken(CloudKit.CKServerChangeToken)",
			"CloudKit.CKFetchRecordChangesOperation::set_RecordZoneId(CloudKit.CKRecordZoneID)",
			"CloudKit.CKFetchRecordZoneChangesConfiguration::.ctor(Foundation.NSCoder)",
			"CloudKit.CKFetchRecordZoneChangesConfiguration::Copy(Foundation.NSZone)",
			"CloudKit.CKFetchRecordZoneChangesConfiguration::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKFetchRecordZoneChangesConfiguration::set_PreviousServerChangeToken(CloudKit.CKServerChangeToken)",
			"CloudKit.CKFetchRecordZoneChangesOperation::.ctor(CloudKit.CKRecordZoneID[],Foundation.NSDictionary`2<CloudKit.CKRecordZoneID,CloudKit.CKFetchRecordZoneChangesConfiguration>)",
			"CloudKit.CKFetchRecordZoneChangesOperation::.ctor(CloudKit.CKRecordZoneID[],Foundation.NSDictionary`2<CloudKit.CKRecordZoneID,CloudKit.CKFetchRecordZoneChangesOptions>)",
			"CloudKit.CKFetchRecordZoneChangesOperation::set_ConfigurationsByRecordZoneID(Foundation.NSDictionary`2<CloudKit.CKRecordZoneID,CloudKit.CKFetchRecordZoneChangesConfiguration>)",
			"CloudKit.CKFetchRecordZoneChangesOperation::set_OptionsByRecordZoneID(Foundation.NSDictionary`2<CloudKit.CKRecordZoneID,CloudKit.CKFetchRecordZoneChangesOptions>)",
			"CloudKit.CKFetchRecordZoneChangesOptions::.ctor(Foundation.NSCoder)",
			"CloudKit.CKFetchRecordZoneChangesOptions::Copy(Foundation.NSZone)",
			"CloudKit.CKFetchRecordZoneChangesOptions::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKFetchRecordZoneChangesOptions::set_PreviousServerChangeToken(CloudKit.CKServerChangeToken)",
			"CloudKit.CKLocationSortDescriptor::.ctor(Foundation.NSCoder)",
			"CloudKit.CKLocationSortDescriptor::.ctor(System.String,CoreLocation.CLLocation)",
			"CloudKit.CKLocationSortDescriptor::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKModifyRecordsOperation::set_ClientChangeTokenData(Foundation.NSData)",
			"CloudKit.CKNotification::.ctor(Foundation.NSCoder)",
			"CloudKit.CKNotification::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKNotification::FromRemoteNotificationDictionary(Foundation.NSDictionary)",
			"CloudKit.CKNotificationID::.ctor(Foundation.NSCoder)",
			"CloudKit.CKNotificationID::Copy(Foundation.NSZone)",
			"CloudKit.CKNotificationID::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKNotificationInfo::.ctor(Foundation.NSCoder)",
			"CloudKit.CKNotificationInfo::Copy(Foundation.NSZone)",
			"CloudKit.CKNotificationInfo::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKOperation::set_Configuration(CloudKit.CKOperationConfiguration)",
			"CloudKit.CKOperation::set_Container(CloudKit.CKContainer)",
			"CloudKit.CKOperation::set_Group(CloudKit.CKOperationGroup)",
			"CloudKit.CKOperationConfiguration::.ctor(Foundation.NSCoder)",
			"CloudKit.CKOperationConfiguration::Copy(Foundation.NSZone)",
			"CloudKit.CKOperationConfiguration::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKOperationConfiguration::set_Container(CloudKit.CKContainer)",
			"CloudKit.CKOperationGroup::.ctor(Foundation.NSCoder)",
			"CloudKit.CKOperationGroup::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKOperationGroup::set_DefaultConfiguration(CloudKit.CKOperationConfiguration)",
			"CloudKit.CKQuery::.ctor(Foundation.NSCoder)",
			"CloudKit.CKQuery::.ctor(System.String,Foundation.NSPredicate)",
			"CloudKit.CKQuery::Copy(Foundation.NSZone)",
			"CloudKit.CKQuery::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKQueryCursor::.ctor(Foundation.NSCoder)",
			"CloudKit.CKQueryCursor::Copy(Foundation.NSZone)",
			"CloudKit.CKQueryCursor::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKQueryNotification::.ctor(Foundation.NSCoder)",
			"CloudKit.CKQueryNotification::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKQueryOperation::.ctor(CloudKit.CKQuery)",
			"CloudKit.CKQueryOperation::.ctor(CloudKit.CKQueryCursor)",
			"CloudKit.CKQueryOperation::set_Cursor(CloudKit.CKQueryCursor)",
			"CloudKit.CKQueryOperation::set_Query(CloudKit.CKQuery)",
			"CloudKit.CKQueryOperation::set_ZoneId(CloudKit.CKRecordZoneID)",
			"CloudKit.CKQuerySubscription::.ctor(Foundation.NSCoder)",
			"CloudKit.CKQuerySubscription::.ctor(System.String,Foundation.NSPredicate,CloudKit.CKQuerySubscriptionOptions)",
			"CloudKit.CKQuerySubscription::.ctor(System.String,Foundation.NSPredicate,System.String,CloudKit.CKQuerySubscriptionOptions)",
			"CloudKit.CKQuerySubscription::Copy(Foundation.NSZone)",
			"CloudKit.CKQuerySubscription::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKQuerySubscription::set_ZoneID(CloudKit.CKRecordZoneID)",
			"CloudKit.CKRecord::.ctor(Foundation.NSCoder)",
			"CloudKit.CKRecord::.ctor(System.String,CloudKit.CKRecordID)",
			"CloudKit.CKRecord::.ctor(System.String,CloudKit.CKRecordZoneID)",
			"CloudKit.CKRecord::Copy(Foundation.NSZone)",
			"CloudKit.CKRecord::EncodeSystemFields(Foundation.NSCoder)",
			"CloudKit.CKRecord::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKRecord::set_Item(System.String,Foundation.NSObject)",
			"CloudKit.CKRecord::set_Parent(CloudKit.CKReference)",
			"CloudKit.CKRecord::SetParent(CloudKit.CKRecord)",
			"CloudKit.CKRecord::SetParent(CloudKit.CKRecordID)",
			"CloudKit.CKRecordID::.ctor(Foundation.NSCoder)",
			"CloudKit.CKRecordID::.ctor(System.String,CloudKit.CKRecordZoneID)",
			"CloudKit.CKRecordID::Copy(Foundation.NSZone)",
			"CloudKit.CKRecordID::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKRecordZone::.ctor(CloudKit.CKRecordZoneID)",
			"CloudKit.CKRecordZone::.ctor(Foundation.NSCoder)",
			"CloudKit.CKRecordZone::Copy(Foundation.NSZone)",
			"CloudKit.CKRecordZone::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKRecordZoneID::.ctor(Foundation.NSCoder)",
			"CloudKit.CKRecordZoneID::Copy(Foundation.NSZone)",
			"CloudKit.CKRecordZoneID::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKRecordZoneNotification::.ctor(Foundation.NSCoder)",
			"CloudKit.CKRecordZoneNotification::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKRecordZoneSubscription::.ctor(CloudKit.CKRecordZoneID)",
			"CloudKit.CKRecordZoneSubscription::.ctor(CloudKit.CKRecordZoneID,System.String)",
			"CloudKit.CKRecordZoneSubscription::.ctor(Foundation.NSCoder)",
			"CloudKit.CKRecordZoneSubscription::Copy(Foundation.NSZone)",
			"CloudKit.CKRecordZoneSubscription::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKReference::.ctor(CloudKit.CKRecord,CloudKit.CKReferenceAction)",
			"CloudKit.CKReference::.ctor(CloudKit.CKRecordID,CloudKit.CKReferenceAction)",
			"CloudKit.CKReference::.ctor(Foundation.NSCoder)",
			"CloudKit.CKReference::Copy(Foundation.NSZone)",
			"CloudKit.CKReference::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKServerChangeToken::.ctor(Foundation.NSCoder)",
			"CloudKit.CKServerChangeToken::Copy(Foundation.NSZone)",
			"CloudKit.CKServerChangeToken::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKShare::.ctor(CloudKit.CKRecord)",
			"CloudKit.CKShare::.ctor(CloudKit.CKRecord,CloudKit.CKRecordID)",
			"CloudKit.CKShare::.ctor(CloudKit.CKRecordZoneID)",
			"CloudKit.CKShare::.ctor(Foundation.NSCoder)",
			"CloudKit.CKShare::Add(CloudKit.CKShareParticipant)",
			"CloudKit.CKShare::Remove(CloudKit.CKShareParticipant)",
			"CloudKit.CKShareMetadata::.ctor(Foundation.NSCoder)",
			"CloudKit.CKShareMetadata::Copy(Foundation.NSZone)",
			"CloudKit.CKShareMetadata::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKShareParticipant::.ctor(Foundation.NSCoder)",
			"CloudKit.CKShareParticipant::Copy(Foundation.NSZone)",
			"CloudKit.CKShareParticipant::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKSubscription::.ctor(Foundation.NSCoder)",
			"CloudKit.CKSubscription::Copy(Foundation.NSZone)",
			"CloudKit.CKSubscription::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKSubscription::set_NotificationInfo(CloudKit.CKNotificationInfo)",
			"CloudKit.CKSubscription::set_ZoneID(CloudKit.CKRecordZoneID)",
			"CloudKit.CKUserIdentity::.ctor(Foundation.NSCoder)",
			"CloudKit.CKUserIdentity::Copy(Foundation.NSZone)",
			"CloudKit.CKUserIdentity::EncodeTo(Foundation.NSCoder)",
			"CloudKit.CKUserIdentityLookupInfo::.ctor(CloudKit.CKRecordID)",
			"CloudKit.CKUserIdentityLookupInfo::.ctor(Foundation.NSCoder)",
			"CloudKit.CKUserIdentityLookupInfo::Copy(Foundation.NSZone)",
			"CloudKit.CKUserIdentityLookupInfo::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryAddContactEvent::.ctor(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryAddGroupEvent::.ctor(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryAddMemberToGroupEvent::.ctor(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryAddSubgroupToGroupEvent::.ctor(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryDeleteContactEvent::.ctor(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryDeleteGroupEvent::.ctor(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryDropEverythingEvent::.ctor(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryEvent::.ctor(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryEvent::AcceptEventVisitor(Contacts.ICNChangeHistoryEventVisitor)",
			"Contacts.CNChangeHistoryEvent::Copy(Foundation.NSZone)",
			"Contacts.CNChangeHistoryEvent::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryEventVisitor_Extensions::AddGroup(Contacts.ICNChangeHistoryEventVisitor,Contacts.CNChangeHistoryAddGroupEvent)",
			"Contacts.CNChangeHistoryEventVisitor_Extensions::AddMemberToGroup(Contacts.ICNChangeHistoryEventVisitor,Contacts.CNChangeHistoryAddMemberToGroupEvent)",
			"Contacts.CNChangeHistoryEventVisitor_Extensions::AddSubgroupToGroup(Contacts.ICNChangeHistoryEventVisitor,Contacts.CNChangeHistoryAddSubgroupToGroupEvent)",
			"Contacts.CNChangeHistoryEventVisitor_Extensions::DeleteGroup(Contacts.ICNChangeHistoryEventVisitor,Contacts.CNChangeHistoryDeleteGroupEvent)",
			"Contacts.CNChangeHistoryEventVisitor_Extensions::RemoveMemberFromGroup(Contacts.ICNChangeHistoryEventVisitor,Contacts.CNChangeHistoryRemoveMemberFromGroupEvent)",
			"Contacts.CNChangeHistoryEventVisitor_Extensions::RemoveSubgroupFromGroup(Contacts.ICNChangeHistoryEventVisitor,Contacts.CNChangeHistoryRemoveSubgroupFromGroupEvent)",
			"Contacts.CNChangeHistoryEventVisitor_Extensions::UpdateGroup(Contacts.ICNChangeHistoryEventVisitor,Contacts.CNChangeHistoryUpdateGroupEvent)",
			"Contacts.CNChangeHistoryEventVisitorWrapper::AddContact(Contacts.CNChangeHistoryAddContactEvent)",
			"Contacts.CNChangeHistoryEventVisitorWrapper::DeleteContact(Contacts.CNChangeHistoryDeleteContactEvent)",
			"Contacts.CNChangeHistoryEventVisitorWrapper::DropEverything(Contacts.CNChangeHistoryDropEverythingEvent)",
			"Contacts.CNChangeHistoryEventVisitorWrapper::UpdateContact(Contacts.CNChangeHistoryUpdateContactEvent)",
			"Contacts.CNChangeHistoryFetchRequest::.ctor(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryFetchRequest::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryFetchRequest::set_StartingToken(Foundation.NSData)",
			"Contacts.CNChangeHistoryRemoveMemberFromGroupEvent::.ctor(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryRemoveSubgroupFromGroupEvent::.ctor(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryUpdateContactEvent::.ctor(Foundation.NSCoder)",
			"Contacts.CNChangeHistoryUpdateGroupEvent::.ctor(Foundation.NSCoder)",
			"Contacts.CNContact::.ctor(Foundation.NSCoder)",
			"Contacts.CNContact::AreKeysAvailable(Foundation.NSArray)",
			"Contacts.CNContact::Copy(Foundation.NSZone)",
			"Contacts.CNContact::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNContact::GetObject(Foundation.NSData,System.String,Foundation.NSError&)",
			"Contacts.CNContact::GetPredicateForContacts(Contacts.CNPhoneNumber)",
			"Contacts.CNContact::IsKeyAvailable(Foundation.NSString)",
			"Contacts.CNContact::LocalizeProperty(Foundation.NSString)",
			"Contacts.CNContact::MutableCopy(Foundation.NSZone)",
			"Contacts.CNContactFetchRequest::.ctor(Foundation.NSArray)",
			"Contacts.CNContactFetchRequest::.ctor(Foundation.NSCoder)",
			"Contacts.CNContactFetchRequest::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNContactFetchRequest::set_KeysToFetch(Foundation.NSArray)",
			"Contacts.CNContactFetchRequest::set_Predicate(Foundation.NSPredicate)",
			"Contacts.CNContactFormatter::.ctor(Foundation.NSCoder)",
			"Contacts.CNContactFormatter::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNContactFormatter::GetAttributedString(Contacts.CNContact,Foundation.NSDictionary)",
			"Contacts.CNContactFormatter::GetAttributedStringFrom(Contacts.CNContact,Contacts.CNContactFormatterStyle,Foundation.NSDictionary)",
			"Contacts.CNContactFormatter::GetDelimiterFor(Contacts.CNContact)",
			"Contacts.CNContactFormatter::GetNameOrderFor(Contacts.CNContact)",
			"Contacts.CNContactFormatter::GetString(Contacts.CNContact)",
			"Contacts.CNContactFormatter::GetStringFrom(Contacts.CNContact,Contacts.CNContactFormatterStyle)",
			"Contacts.CNContactProperty::.ctor(Foundation.NSCoder)",
			"Contacts.CNContactProperty::Copy(Foundation.NSZone)",
			"Contacts.CNContactProperty::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNContactRelation::.ctor(Foundation.NSCoder)",
			"Contacts.CNContactRelation::Copy(Foundation.NSZone)",
			"Contacts.CNContactRelation::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNContactStore::EnumerateContacts(Contacts.CNContactFetchRequest,Foundation.NSError&,Contacts.CNContactStoreListContactsHandler)",
			"Contacts.CNContactStore::ExecuteSaveRequest(Contacts.CNSaveRequest,Foundation.NSError&)",
			"Contacts.CNContactStore::GetContainers(Foundation.NSPredicate,Foundation.NSError&)",
			"Contacts.CNContactStore::GetEnumeratorForChangeHistory(Contacts.CNChangeHistoryFetchRequest,Foundation.NSError&)",
			"Contacts.CNContactStore::GetEnumeratorForContact(Contacts.CNContactFetchRequest,Foundation.NSError&)",
			"Contacts.CNContactStore::GetGroups(Foundation.NSPredicate,Foundation.NSError&)",
			"Contacts.CNContactStore::GetUnifiedContact(System.String,Foundation.NSArray,Foundation.NSError&)",
			"Contacts.CNContactStore::GetUnifiedContacts(Foundation.NSPredicate,Foundation.NSArray,Foundation.NSError&)",
			"Contacts.CNContactStore::GetUnifiedMeContact(Foundation.NSArray,Foundation.NSError&)",
			"Contacts.CNContactVCardSerialization::GetContactsFromData(Foundation.NSData,Foundation.NSError&)",
			"Contacts.CNContainer::.ctor(Foundation.NSCoder)",
			"Contacts.CNContainer::Copy(Foundation.NSZone)",
			"Contacts.CNContainer::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNGroup::.ctor(Foundation.NSCoder)",
			"Contacts.CNGroup::Copy(Foundation.NSZone)",
			"Contacts.CNGroup::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNGroup::MutableCopy(Foundation.NSZone)",
			"Contacts.CNInstantMessageAddress::.ctor(Foundation.NSCoder)",
			"Contacts.CNInstantMessageAddress::Copy(Foundation.NSZone)",
			"Contacts.CNInstantMessageAddress::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNInstantMessageAddress::LocalizeProperty(Foundation.NSString)",
			"Contacts.CNInstantMessageAddress::LocalizeService(Foundation.NSString)",
			"Contacts.CNKeyDescriptorWrapper::Copy(Foundation.NSZone)",
			"Contacts.CNKeyDescriptorWrapper::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNKeyDescriptorWrapper::IsEqual(Foundation.NSObject)",
			"Contacts.CNKeyDescriptorWrapper::IsKindOfClass(ObjCRuntime.Class)",
			"Contacts.CNKeyDescriptorWrapper::IsMemberOfClass(ObjCRuntime.Class)",
			"Contacts.CNKeyDescriptorWrapper::PerformSelector(ObjCRuntime.Selector,Foundation.NSObject)",
			"Contacts.CNKeyDescriptorWrapper::PerformSelector(ObjCRuntime.Selector,Foundation.NSObject,Foundation.NSObject)",
			"Contacts.CNKeyDescriptorWrapper::RespondsToSelector(ObjCRuntime.Selector)",
			"Contacts.CNLabeledValue`1::.ctor(Foundation.NSCoder)",
			"Contacts.CNLabeledValue`1::.ctor(System.String,ValueType)",
			"Contacts.CNLabeledValue`1::Copy(Foundation.NSZone)",
			"Contacts.CNLabeledValue`1::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNLabeledValue`1::FromLabel(System.String,ValueType)",
			"Contacts.CNLabeledValue`1::GetLabeledValue(System.String,ValueType)",
			"Contacts.CNLabeledValue`1::GetLabeledValue(ValueType)",
			"Contacts.CNLabeledValue`1::LocalizeLabel(Foundation.NSString)",
			"Contacts.CNMutableContact::.ctor(Foundation.NSCoder)",
			"Contacts.CNMutableContact::set_Birthday(Foundation.NSDateComponents)",
			"Contacts.CNMutableContact::set_ImageData(Foundation.NSData)",
			"Contacts.CNMutableContact::set_NonGregorianBirthday(Foundation.NSDateComponents)",
			"Contacts.CNMutableGroup::.ctor(Foundation.NSCoder)",
			"Contacts.CNMutablePostalAddress::.ctor(Foundation.NSCoder)",
			"Contacts.CNPhoneNumber::.ctor(Foundation.NSCoder)",
			"Contacts.CNPhoneNumber::Copy(Foundation.NSZone)",
			"Contacts.CNPhoneNumber::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNPostalAddress::.ctor(Foundation.NSCoder)",
			"Contacts.CNPostalAddress::Copy(Foundation.NSZone)",
			"Contacts.CNPostalAddress::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNPostalAddress::LocalizeProperty(Foundation.NSString)",
			"Contacts.CNPostalAddress::MutableCopy(Foundation.NSZone)",
			"Contacts.CNPostalAddressFormatter::.ctor(Foundation.NSCoder)",
			"Contacts.CNPostalAddressFormatter::GetAttributedStringFrom(Contacts.CNPostalAddress,Contacts.CNPostalAddressFormatterStyle,Foundation.NSDictionary)",
			"Contacts.CNPostalAddressFormatter::GetAttributedStringFromPostalAddress(Contacts.CNPostalAddress,Foundation.NSDictionary)",
			"Contacts.CNPostalAddressFormatter::GetStringFrom(Contacts.CNPostalAddress,Contacts.CNPostalAddressFormatterStyle)",
			"Contacts.CNPostalAddressFormatter::GetStringFromPostalAddress(Contacts.CNPostalAddress)",
			"Contacts.CNSaveRequest::AddContact(Contacts.CNMutableContact,System.String)",
			"Contacts.CNSaveRequest::AddGroup(Contacts.CNMutableGroup,System.String)",
			"Contacts.CNSaveRequest::AddMember(Contacts.CNContact,Contacts.CNGroup)",
			"Contacts.CNSaveRequest::AddSubgroup(Contacts.CNGroup,Contacts.CNGroup)",
			"Contacts.CNSaveRequest::DeleteContact(Contacts.CNMutableContact)",
			"Contacts.CNSaveRequest::DeleteGroup(Contacts.CNMutableGroup)",
			"Contacts.CNSaveRequest::RemoveMember(Contacts.CNContact,Contacts.CNGroup)",
			"Contacts.CNSaveRequest::RemoveSubgroup(Contacts.CNGroup,Contacts.CNGroup)",
			"Contacts.CNSaveRequest::UpdateContact(Contacts.CNMutableContact)",
			"Contacts.CNSaveRequest::UpdateGroup(Contacts.CNMutableGroup)",
			"Contacts.CNSocialProfile::.ctor(Foundation.NSCoder)",
			"Contacts.CNSocialProfile::Copy(Foundation.NSZone)",
			"Contacts.CNSocialProfile::EncodeTo(Foundation.NSCoder)",
			"Contacts.CNSocialProfile::LocalizeProperty(Foundation.NSString)",
			"Contacts.CNSocialProfile::LocalizeService(Foundation.NSString)",
			"ContactsUI.CNContactPicker::Show(CoreGraphics.CGRect,AppKit.NSView,AppKit.NSRectEdge)",
			"ContactsUI.CNContactPickerDelegate_Extensions::ContactPickerDidCancel(ContactsUI.ICNContactPickerDelegate,ContactsUI.CNContactPickerViewController)",
			"ContactsUI.CNContactPickerDelegate_Extensions::ContactPropertySelected(ContactsUI.ICNContactPickerDelegate,ContactsUI.CNContactPicker,Contacts.CNContactProperty)",
			"ContactsUI.CNContactPickerDelegate_Extensions::ContactSelected(ContactsUI.ICNContactPickerDelegate,ContactsUI.CNContactPicker,Contacts.CNContact)",
			"ContactsUI.CNContactPickerDelegate_Extensions::DidClose(ContactsUI.ICNContactPickerDelegate,ContactsUI.CNContactPicker)",
			"ContactsUI.CNContactPickerDelegate_Extensions::DidSelectContact(ContactsUI.ICNContactPickerDelegate,ContactsUI.CNContactPickerViewController,Contacts.CNContact)",
			"ContactsUI.CNContactPickerDelegate_Extensions::DidSelectContactProperties(ContactsUI.ICNContactPickerDelegate,ContactsUI.CNContactPickerViewController,Contacts.CNContactProperty[])",
			"ContactsUI.CNContactPickerDelegate_Extensions::DidSelectContactProperty(ContactsUI.ICNContactPickerDelegate,ContactsUI.CNContactPickerViewController,Contacts.CNContactProperty)",
			"ContactsUI.CNContactPickerDelegate_Extensions::DidSelectContacts(ContactsUI.ICNContactPickerDelegate,ContactsUI.CNContactPickerViewController,Contacts.CNContact[])",
			"ContactsUI.CNContactPickerDelegate_Extensions::WillClose(ContactsUI.ICNContactPickerDelegate,ContactsUI.CNContactPicker)",
			"ContactsUI.CNContactPickerViewController::.ctor(Foundation.NSCoder)",
			"ContactsUI.CNContactPickerViewController::.ctor(System.String,Foundation.NSBundle)",
			"ContactsUI.CNContactPickerViewController::set_PredicateForEnablingContact(Foundation.NSPredicate)",
			"ContactsUI.CNContactPickerViewController::set_PredicateForSelectionOfContact(Foundation.NSPredicate)",
			"ContactsUI.CNContactPickerViewController::set_PredicateForSelectionOfProperty(Foundation.NSPredicate)",
			"ContactsUI.CNContactViewController::.ctor(Foundation.NSCoder)",
			"ContactsUI.CNContactViewController::.ctor(System.String,Foundation.NSBundle)",
			"ContactsUI.CNContactViewController::FromContact(Contacts.CNContact)",
			"ContactsUI.CNContactViewController::FromNewContact(Contacts.CNContact)",
			"ContactsUI.CNContactViewController::FromUnknownContact(Contacts.CNContact)",
			"ContactsUI.CNContactViewController::HighlightProperty(Foundation.NSString,System.String)",
			"ContactsUI.CNContactViewController::set_Contact(Contacts.CNContact)",
			"ContactsUI.CNContactViewController::set_ContactStore(Contacts.CNContactStore)",
			"ContactsUI.CNContactViewController::set_ParentContainer(Contacts.CNContainer)",
			"ContactsUI.CNContactViewController::set_ParentGroup(Contacts.CNGroup)",
			"ContactsUI.CNContactViewControllerDelegate_Extensions::DidComplete(ContactsUI.ICNContactViewControllerDelegate,ContactsUI.CNContactViewController,Contacts.CNContact)",
			"ContactsUI.CNContactViewControllerDelegate_Extensions::ShouldPerformDefaultAction(ContactsUI.ICNContactViewControllerDelegate,ContactsUI.CNContactViewController,Contacts.CNContactProperty)",
			"CoreAnimation.CAActionWrapper::RunAction(System.String,Foundation.NSObject,Foundation.NSDictionary)",
			"CoreAnimation.CAAnimation::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAAnimation::Copy(Foundation.NSZone)",
			"CoreAnimation.CAAnimation::EncodeTo(Foundation.NSCoder)",
			"CoreAnimation.CAAnimation::FromSCNAnimation(SceneKit.SCNAnimation)",
			"CoreAnimation.CAAnimation::MutableCopy(Foundation.NSZone)",
			"CoreAnimation.CAAnimation::RunAction(System.String,Foundation.NSObject,Foundation.NSDictionary)",
			"CoreAnimation.CAAnimation::set_TimingFunction(CoreAnimation.CAMediaTimingFunction)",
			"CoreAnimation.CAAnimation::set_WeakDelegate(Foundation.NSObject)",
			"CoreAnimation.CAAnimationDelegate_Extensions::AnimationStarted(CoreAnimation.ICAAnimationDelegate,CoreAnimation.CAAnimation)",
			"CoreAnimation.CAAnimationDelegate_Extensions::AnimationStopped(CoreAnimation.ICAAnimationDelegate,CoreAnimation.CAAnimation,System.Boolean)",
			"CoreAnimation.CAAnimationGroup::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CABasicAnimation::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CABasicAnimation::set_By(Foundation.NSObject)",
			"CoreAnimation.CABasicAnimation::set_From(Foundation.NSObject)",
			"CoreAnimation.CABasicAnimation::set_To(Foundation.NSObject)",
			"CoreAnimation.CABasicAnimation::SetBy(ObjCRuntime.INativeObject)",
			"CoreAnimation.CABasicAnimation::SetFrom(ObjCRuntime.INativeObject)",
			"CoreAnimation.CABasicAnimation::SetTo(ObjCRuntime.INativeObject)",
			"CoreAnimation.CAConstraint::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAConstraint::EncodeTo(Foundation.NSCoder)",
			"CoreAnimation.CAConstraintLayoutManager::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAConstraintLayoutManager::EncodeTo(Foundation.NSCoder)",
			"CoreAnimation.CADisplayLink::AddToRunLoop(Foundation.NSRunLoop,Foundation.NSString)",
			"CoreAnimation.CADisplayLink::Create(Foundation.NSObject,ObjCRuntime.Selector)",
			"CoreAnimation.CADisplayLink::RemoveFromRunLoop(Foundation.NSRunLoop,Foundation.NSString)",
			"CoreAnimation.CAEAGLLayer::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAEAGLLayer::set_DrawableProperties(Foundation.NSDictionary)",
			"CoreAnimation.CAEdrMetadata::GetHdr10Metadata(Foundation.NSData,Foundation.NSData,System.Single)",
			"CoreAnimation.CAEmitterCell::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAEmitterCell::EncodeTo(Foundation.NSCoder)",
			"CoreAnimation.CAEmitterCell::set_Color(CoreGraphics.CGColor)",
			"CoreAnimation.CAEmitterCell::set_Contents(CoreGraphics.CGImage)",
			"CoreAnimation.CAEmitterCell::set_Style(Foundation.NSDictionary)",
			"CoreAnimation.CAEmitterCell::set_WeakContents(Foundation.NSObject)",
			"CoreAnimation.CAEmitterLayer::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAGradientLayer::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAGradientLayer::set_Colors(CoreGraphics.CGColor[])",
			"CoreAnimation.CAGradientLayer::set_WeakLayerType(Foundation.NSString)",
			"CoreAnimation.CAKeyFrameAnimation::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAKeyFrameAnimation::set__CalculationMode(Foundation.NSString)",
			"CoreAnimation.CAKeyFrameAnimation::set__Values(Foundation.NSArray)",
			"CoreAnimation.CAKeyFrameAnimation::set_Path(CoreGraphics.CGPath)",
			"CoreAnimation.CALayer::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CALayer::AddAnimation(CoreAnimation.CAAnimation,System.String)",
			"CoreAnimation.CALayer::AddConstraint(CoreAnimation.CAConstraint)",
			"CoreAnimation.CALayer::AddSublayer(CoreAnimation.CALayer)",
			"CoreAnimation.CALayer::ConvertPointFromLayer(CoreGraphics.CGPoint,CoreAnimation.CALayer)",
			"CoreAnimation.CALayer::ConvertPointToLayer(CoreGraphics.CGPoint,CoreAnimation.CALayer)",
			"CoreAnimation.CALayer::ConvertRectFromLayer(CoreGraphics.CGRect,CoreAnimation.CALayer)",
			"CoreAnimation.CALayer::ConvertRectToLayer(CoreGraphics.CGRect,CoreAnimation.CALayer)",
			"CoreAnimation.CALayer::ConvertTimeFromLayer(System.Double,CoreAnimation.CALayer)",
			"CoreAnimation.CALayer::ConvertTimeToLayer(System.Double,CoreAnimation.CALayer)",
			"CoreAnimation.CALayer::DrawInContext(CoreGraphics.CGContext)",
			"CoreAnimation.CALayer::EncodeTo(Foundation.NSCoder)",
			"CoreAnimation.CALayer::GetCornerCurveExpansionFactor(CoreAnimation.CACornerCurve)",
			"CoreAnimation.CALayer::InsertSublayer(CoreAnimation.CALayer,System.Int32)",
			"CoreAnimation.CALayer::InsertSublayerAbove(CoreAnimation.CALayer,CoreAnimation.CALayer)",
			"CoreAnimation.CALayer::InsertSublayerBelow(CoreAnimation.CALayer,CoreAnimation.CALayer)",
			"CoreAnimation.CALayer::RenderInContext(CoreGraphics.CGContext)",
			"CoreAnimation.CALayer::ReplaceSublayer(CoreAnimation.CALayer,CoreAnimation.CALayer)",
			"CoreAnimation.CALayer::set__ContentsFormat(Foundation.NSString)",
			"CoreAnimation.CALayer::set_Actions(Foundation.NSDictionary)",
			"CoreAnimation.CALayer::set_BackgroundColor(CoreGraphics.CGColor)",
			"CoreAnimation.CALayer::set_BorderColor(CoreGraphics.CGColor)",
			"CoreAnimation.CALayer::set_CompositingFilter(Foundation.NSObject)",
			"CoreAnimation.CALayer::set_Contents(CoreGraphics.CGImage)",
			"CoreAnimation.CALayer::set_CornerCurve(CoreAnimation.CACornerCurve)",
			"CoreAnimation.CALayer::set_LayoutManager(Foundation.NSObject)",
			"CoreAnimation.CALayer::set_Mask(CoreAnimation.CALayer)",
			"CoreAnimation.CALayer::set_ShadowColor(CoreGraphics.CGColor)",
			"CoreAnimation.CALayer::set_ShadowPath(CoreGraphics.CGPath)",
			"CoreAnimation.CALayer::set_Style(Foundation.NSDictionary)",
			"CoreAnimation.CALayer::SetContents(Foundation.NSObject)",
			"CoreAnimation.CALayerDelegate::SetCALayer(CoreAnimation.CALayer)",
			"CoreAnimation.CALayerDelegate_Extensions::ActionForLayer(CoreAnimation.ICALayerDelegate,CoreAnimation.CALayer,System.String)",
			"CoreAnimation.CALayerDelegate_Extensions::DisplayLayer(CoreAnimation.ICALayerDelegate,CoreAnimation.CALayer)",
			"CoreAnimation.CALayerDelegate_Extensions::DrawLayer(CoreAnimation.ICALayerDelegate,CoreAnimation.CALayer,CoreGraphics.CGContext)",
			"CoreAnimation.CALayerDelegate_Extensions::LayoutSublayersOfLayer(CoreAnimation.ICALayerDelegate,CoreAnimation.CALayer)",
			"CoreAnimation.CALayerDelegate_Extensions::WillDrawLayer(CoreAnimation.ICALayerDelegate,CoreAnimation.CALayer)",
			"CoreAnimation.CAMediaTimingFunction::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAMediaTimingFunction::EncodeTo(Foundation.NSCoder)",
			"CoreAnimation.CAMediaTimingFunction::FromName(Foundation.NSString)",
			"CoreAnimation.CAMetalLayer::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAMetalLayer::set_ColorSpace(CoreGraphics.CGColorSpace)",
			"CoreAnimation.CAMetalLayer::set_Device(Metal.IMTLDevice)",
			"CoreAnimation.CAMetalLayer::set_EdrMetadata(CoreAnimation.CAEdrMetadata)",
			"CoreAnimation.CAOpenGLLayer::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAOpenGLLayer::CanDrawInCGLContext(OpenGL.CGLContext,OpenGL.CGLPixelFormat,System.Double,CoreVideo.CVTimeStamp&)",
			"CoreAnimation.CAOpenGLLayer::CopyContext(OpenGL.CGLPixelFormat)",
			"CoreAnimation.CAOpenGLLayer::DrawInCGLContext(OpenGL.CGLContext,OpenGL.CGLPixelFormat,System.Double,CoreVideo.CVTimeStamp&)",
			"CoreAnimation.CAOpenGLLayer::Release(OpenGL.CGLContext)",
			"CoreAnimation.CAOpenGLLayer::Release(OpenGL.CGLPixelFormat)",
			"CoreAnimation.CAPropertyAnimation::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAPropertyAnimation::set_ValueFunction(CoreAnimation.CAValueFunction)",
			"CoreAnimation.CARenderer::Create(Metal.IMTLTexture,Foundation.NSDictionary)",
			"CoreAnimation.CARenderer::set_Layer(CoreAnimation.CALayer)",
			"CoreAnimation.CARenderer::SetDestination(Metal.IMTLTexture)",
			"CoreAnimation.CAReplicatorLayer::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAReplicatorLayer::set_InstanceColor(CoreGraphics.CGColor)",
			"CoreAnimation.CAScrollLayer::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAScrollLayer::set_WeakScrollMode(Foundation.NSString)",
			"CoreAnimation.CAShapeLayer::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAShapeLayer::set_FillColor(CoreGraphics.CGColor)",
			"CoreAnimation.CAShapeLayer::set_FillRule(Foundation.NSString)",
			"CoreAnimation.CAShapeLayer::set_LineCap(Foundation.NSString)",
			"CoreAnimation.CAShapeLayer::set_LineJoin(Foundation.NSString)",
			"CoreAnimation.CAShapeLayer::set_Path(CoreGraphics.CGPath)",
			"CoreAnimation.CAShapeLayer::set_StrokeColor(CoreGraphics.CGColor)",
			"CoreAnimation.CASpringAnimation::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CATextLayer::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CATextLayer::set_AttributedString(Foundation.NSAttributedString)",
			"CoreAnimation.CATextLayer::set_ForegroundColor(CoreGraphics.CGColor)",
			"CoreAnimation.CATextLayer::set_WeakAlignmentMode(Foundation.NSString)",
			"CoreAnimation.CATextLayer::set_WeakFont(System.Object)",
			"CoreAnimation.CATextLayer::set_WeakTruncationMode(Foundation.NSString)",
			"CoreAnimation.CATextLayer::SetFont(AppKit.NSFont)",
			"CoreAnimation.CATextLayer::SetFont(CoreGraphics.CGFont)",
			"CoreAnimation.CATextLayer::SetFont(CoreText.CTFont)",
			"CoreAnimation.CATiledLayer::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CATransaction::set_AnimationTimingFunction(CoreAnimation.CAMediaTimingFunction)",
			"CoreAnimation.CATransaction::SetValueForKey(Foundation.NSObject,Foundation.NSString)",
			"CoreAnimation.CATransaction::ValueForKey(Foundation.NSString)",
			"CoreAnimation.CATransformLayer::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CATransition::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CATransition::set_Filter(Foundation.NSObject)",
			"CoreAnimation.CAValueFunction::.ctor(Foundation.NSCoder)",
			"CoreAnimation.CAValueFunction::EncodeTo(Foundation.NSCoder)",
			"CoreAudioKit.AUAudioUnitViewConfiguration::.ctor(Foundation.NSCoder)",
			"CoreAudioKit.AUAudioUnitViewConfiguration::EncodeTo(Foundation.NSCoder)",
			"CoreAudioKit.AUAudioUnitViewControllerExtensions::GetSupportedViewConfigurations(AudioUnit.AUAudioUnit,CoreAudioKit.AUAudioUnitViewConfiguration[])",
			"CoreAudioKit.AUAudioUnitViewControllerExtensions::SelectViewConfiguration(AudioUnit.AUAudioUnit,CoreAudioKit.AUAudioUnitViewConfiguration)",
			"CoreAudioKit.AUCustomViewPersistentDataWrapper::set_CustomViewPersistentData(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"CoreAudioKit.AUGenericView::.ctor(AudioUnit.AudioUnit)",
			"CoreAudioKit.AUGenericView::.ctor(AudioUnit.AudioUnit,CoreAudioKit.AUGenericViewDisplayFlags)",
			"CoreAudioKit.AUGenericView::.ctor(Foundation.NSCoder)",
			"CoreAudioKit.AUPannerView::.ctor(Foundation.NSCoder)",
			"CoreAudioKit.AUPannerView::Create(AudioUnit.AudioUnit)",
			"CoreAudioKit.AUViewController::.ctor(Foundation.NSCoder)",
			"CoreAudioKit.AUViewController::.ctor(System.String,Foundation.NSBundle)",
			"CoreAudioKit.CABtleMidiWindowController::.ctor(AppKit.NSWindow)",
			"CoreAudioKit.CABtleMidiWindowController::.ctor(Foundation.NSCoder)",
			"CoreAudioKit.CABTMidiCentralViewController::.ctor(Foundation.NSCoder)",
			"CoreAudioKit.CABTMidiCentralViewController::.ctor(System.String,Foundation.NSBundle)",
			"CoreAudioKit.CABTMidiLocalPeripheralViewController::.ctor(Foundation.NSCoder)",
			"CoreAudioKit.CABTMidiLocalPeripheralViewController::.ctor(System.String,Foundation.NSBundle)",
			"CoreAudioKit.CAInterAppAudioSwitcherView::.ctor(Foundation.NSCoder)",
			"CoreAudioKit.CAInterAppAudioSwitcherView::SetOutputAudioUnit(AudioUnit.AudioUnit)",
			"CoreAudioKit.CAInterAppAudioTransportView::.ctor(Foundation.NSCoder)",
			"CoreAudioKit.CAInterAppAudioTransportView::set_CurrentTimeLabelFont(UIKit.UIFont)",
			"CoreAudioKit.CAInterAppAudioTransportView::set_LabelColor(UIKit.UIColor)",
			"CoreAudioKit.CAInterAppAudioTransportView::set_PauseButtonColor(UIKit.UIColor)",
			"CoreAudioKit.CAInterAppAudioTransportView::set_PlayButtonColor(UIKit.UIColor)",
			"CoreAudioKit.CAInterAppAudioTransportView::set_RecordButtonColor(UIKit.UIColor)",
			"CoreAudioKit.CAInterAppAudioTransportView::set_RewindButtonColor(UIKit.UIColor)",
			"CoreAudioKit.CAInterAppAudioTransportView::SetOutputAudioUnit(AudioUnit.AudioUnit)",
			"CoreAudioKit.CAInterDeviceAudioViewController::.ctor(Foundation.NSCoder)",
			"CoreAudioKit.CAInterDeviceAudioViewController::.ctor(System.String,Foundation.NSBundle)",
			"CoreAudioKit.CANetworkBrowserWindowController::.ctor(AppKit.NSWindow)",
			"CoreAudioKit.CANetworkBrowserWindowController::.ctor(Foundation.NSCoder)",
			"CoreBluetooth.CBATTRequest::set_Value(Foundation.NSData)",
			"CoreBluetooth.CBCentral::Copy(Foundation.NSZone)",
			"CoreBluetooth.CBCentralManager::.ctor(CoreBluetooth.ICBCentralManagerDelegate,CoreFoundation.DispatchQueue)",
			"CoreBluetooth.CBCentralManager::.ctor(CoreBluetooth.ICBCentralManagerDelegate,CoreFoundation.DispatchQueue,Foundation.NSDictionary)",
			"CoreBluetooth.CBCentralManager::CancelPeripheralConnection(CoreBluetooth.CBPeripheral)",
			"CoreBluetooth.CBCentralManager::ConnectPeripheral(CoreBluetooth.CBPeripheral,Foundation.NSDictionary)",
			"CoreBluetooth.CBCentralManager::RegisterForConnectionEvents(Foundation.NSDictionary)",
			"CoreBluetooth.CBCentralManager::ScanForPeripherals(Foundation.NSArray,Foundation.NSDictionary)",
			"CoreBluetooth.CBCentralManagerDelegate_Extensions::ConnectedPeripheral(CoreBluetooth.ICBCentralManagerDelegate,CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral)",
			"CoreBluetooth.CBCentralManagerDelegate_Extensions::ConnectionEventDidOccur(CoreBluetooth.ICBCentralManagerDelegate,CoreBluetooth.CBCentralManager,CoreBluetooth.CBConnectionEvent,CoreBluetooth.CBPeripheral)",
			"CoreBluetooth.CBCentralManagerDelegate_Extensions::DidUpdateAncsAuthorization(CoreBluetooth.ICBCentralManagerDelegate,CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral)",
			"CoreBluetooth.CBCentralManagerDelegate_Extensions::DisconnectedPeripheral(CoreBluetooth.ICBCentralManagerDelegate,CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)",
			"CoreBluetooth.CBCentralManagerDelegate_Extensions::DiscoveredPeripheral(CoreBluetooth.ICBCentralManagerDelegate,CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSDictionary,Foundation.NSNumber)",
			"CoreBluetooth.CBCentralManagerDelegate_Extensions::FailedToConnectPeripheral(CoreBluetooth.ICBCentralManagerDelegate,CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)",
			"CoreBluetooth.CBCentralManagerDelegate_Extensions::WillRestoreState(CoreBluetooth.ICBCentralManagerDelegate,CoreBluetooth.CBCentralManager,Foundation.NSDictionary)",
			"CoreBluetooth.CBCentralManagerDelegateWrapper::UpdatedState(CoreBluetooth.CBCentralManager)",
			"CoreBluetooth.CBMutableCharacteristic::.ctor(CoreBluetooth.CBUUID,CoreBluetooth.CBCharacteristicProperties,Foundation.NSData,CoreBluetooth.CBAttributePermissions)",
			"CoreBluetooth.CBMutableCharacteristic::set_Value(Foundation.NSData)",
			"CoreBluetooth.CBMutableDescriptor::.ctor(CoreBluetooth.CBUUID,Foundation.NSObject)",
			"CoreBluetooth.CBMutableService::.ctor(CoreBluetooth.CBUUID,System.Boolean)",
			"CoreBluetooth.CBPeer::Copy(Foundation.NSZone)",
			"CoreBluetooth.CBPeripheral::Copy(Foundation.NSZone)",
			"CoreBluetooth.CBPeripheral::DiscoverCharacteristics(Foundation.NSArray,CoreBluetooth.CBService)",
			"CoreBluetooth.CBPeripheral::DiscoverDescriptors(CoreBluetooth.CBCharacteristic)",
			"CoreBluetooth.CBPeripheral::DiscoverIncludedServices(Foundation.NSArray,CoreBluetooth.CBService)",
			"CoreBluetooth.CBPeripheral::DiscoverServices(Foundation.NSArray)",
			"CoreBluetooth.CBPeripheral::ReadValue(CoreBluetooth.CBCharacteristic)",
			"CoreBluetooth.CBPeripheral::ReadValue(CoreBluetooth.CBDescriptor)",
			"CoreBluetooth.CBPeripheral::SetNotifyValue(System.Boolean,CoreBluetooth.CBCharacteristic)",
			"CoreBluetooth.CBPeripheral::WriteValue(Foundation.NSData,CoreBluetooth.CBCharacteristic,CoreBluetooth.CBCharacteristicWriteType)",
			"CoreBluetooth.CBPeripheral::WriteValue(Foundation.NSData,CoreBluetooth.CBDescriptor)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::DidOpenL2CapChannel(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,CoreBluetooth.CBL2CapChannel,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::DiscoveredCharacteristics(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::DiscoveredDescriptor(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::DiscoveredIncludedService(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::DiscoveredService(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::IsReadyToSendWriteWithoutResponse(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::ModifiedServices(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,CoreBluetooth.CBService[])",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::RssiRead(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,Foundation.NSNumber,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::RssiUpdated(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::UpdatedCharacterteristicValue(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::UpdatedName(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::UpdatedNotificationState(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::UpdatedValue(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::WroteCharacteristicValue(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralDelegate_Extensions::WroteDescriptorValue(CoreBluetooth.ICBPeripheralDelegate,CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralManager::.ctor(CoreBluetooth.ICBPeripheralManagerDelegate,CoreFoundation.DispatchQueue)",
			"CoreBluetooth.CBPeripheralManager::.ctor(CoreBluetooth.ICBPeripheralManagerDelegate,CoreFoundation.DispatchQueue,Foundation.NSDictionary)",
			"CoreBluetooth.CBPeripheralManager::AddService(CoreBluetooth.CBMutableService)",
			"CoreBluetooth.CBPeripheralManager::RemoveService(CoreBluetooth.CBMutableService)",
			"CoreBluetooth.CBPeripheralManager::RespondToRequest(CoreBluetooth.CBATTRequest,CoreBluetooth.CBATTError)",
			"CoreBluetooth.CBPeripheralManager::SetDesiredConnectionLatency(CoreBluetooth.CBPeripheralManagerConnectionLatency,CoreBluetooth.CBCentral)",
			"CoreBluetooth.CBPeripheralManager::StartAdvertising(Foundation.NSDictionary)",
			"CoreBluetooth.CBPeripheralManager::UpdateValue(Foundation.NSData,CoreBluetooth.CBMutableCharacteristic,CoreBluetooth.CBCentral[])",
			"CoreBluetooth.CBPeripheralManagerDelegate_Extensions::AdvertisingStarted(CoreBluetooth.ICBPeripheralManagerDelegate,CoreBluetooth.CBPeripheralManager,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralManagerDelegate_Extensions::CharacteristicSubscribed(CoreBluetooth.ICBPeripheralManagerDelegate,CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)",
			"CoreBluetooth.CBPeripheralManagerDelegate_Extensions::CharacteristicUnsubscribed(CoreBluetooth.ICBPeripheralManagerDelegate,CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)",
			"CoreBluetooth.CBPeripheralManagerDelegate_Extensions::DidOpenL2CapChannel(CoreBluetooth.ICBPeripheralManagerDelegate,CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBL2CapChannel,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralManagerDelegate_Extensions::DidPublishL2CapChannel(CoreBluetooth.ICBPeripheralManagerDelegate,CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralManagerDelegate_Extensions::DidUnpublishL2CapChannel(CoreBluetooth.ICBPeripheralManagerDelegate,CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralManagerDelegate_Extensions::ReadRequestReceived(CoreBluetooth.ICBPeripheralManagerDelegate,CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest)",
			"CoreBluetooth.CBPeripheralManagerDelegate_Extensions::ReadyToUpdateSubscribers(CoreBluetooth.ICBPeripheralManagerDelegate,CoreBluetooth.CBPeripheralManager)",
			"CoreBluetooth.CBPeripheralManagerDelegate_Extensions::ServiceAdded(CoreBluetooth.ICBPeripheralManagerDelegate,CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBService,Foundation.NSError)",
			"CoreBluetooth.CBPeripheralManagerDelegate_Extensions::WillRestoreState(CoreBluetooth.ICBPeripheralManagerDelegate,CoreBluetooth.CBPeripheralManager,Foundation.NSDictionary)",
			"CoreBluetooth.CBPeripheralManagerDelegate_Extensions::WriteRequestsReceived(CoreBluetooth.ICBPeripheralManagerDelegate,CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest[])",
			"CoreBluetooth.CBPeripheralManagerDelegateWrapper::StateUpdated(CoreBluetooth.CBPeripheralManager)",
			"CoreBluetooth.CBUUID::Copy(Foundation.NSZone)",
			"CoreBluetooth.CBUUID::FromData(Foundation.NSData)",
			"CoreBluetooth.CBUUID::FromNSUuid(Foundation.NSUuid)",
			"CoreData.NSAsynchronousFetchRequest::.ctor(CoreData.NSFetchRequest,System.Action`1<CoreData.NSAsynchronousFetchResult>)",
			"CoreData.NSAtomicStore::.ctor(CoreData.NSPersistentStoreCoordinator,System.String,Foundation.NSUrl,Foundation.NSDictionary)",
			"CoreData.NSAtomicStore::AddCacheNodes(Foundation.NSSet)",
			"CoreData.NSAtomicStore::CacheNodeForObjectID(CoreData.NSManagedObjectID)",
			"CoreData.NSAtomicStore::NewCacheNodeForManagedObject(CoreData.NSManagedObject)",
			"CoreData.NSAtomicStore::NewReferenceObjectForManagedObject(CoreData.NSManagedObject)",
			"CoreData.NSAtomicStore::ObjectIDForEntity(CoreData.NSEntityDescription,Foundation.NSObject)",
			"CoreData.NSAtomicStore::ReferenceObjectForObjectID(CoreData.NSManagedObjectID)",
			"CoreData.NSAtomicStore::UpdateCacheNode(CoreData.NSAtomicStoreCacheNode,CoreData.NSManagedObject)",
			"CoreData.NSAtomicStore::WillRemoveCacheNodes(Foundation.NSSet)",
			"CoreData.NSAtomicStoreCacheNode::.ctor(CoreData.NSManagedObjectID)",
			"CoreData.NSAtomicStoreCacheNode::set_PropertyCache(Foundation.NSDictionary)",
			"CoreData.NSAtomicStoreCacheNode::SetValue(Foundation.NSObject,System.String)",
			"CoreData.NSAttributeDescription::.ctor(Foundation.NSCoder)",
			"CoreData.NSAttributeDescription::set_DefaultValue(Foundation.NSObject)",
			"CoreData.NSBatchDeleteRequest::.ctor(CoreData.NSFetchRequest)",
			"CoreData.NSBatchInsertRequest::.ctor(CoreData.NSEntityDescription,CoreData.NSBatchInsertRequestDictionaryHandler)",
			"CoreData.NSBatchInsertRequest::.ctor(CoreData.NSEntityDescription,CoreData.NSBatchInsertRequestManagedObjectHandler)",
			"CoreData.NSBatchInsertRequest::.ctor(CoreData.NSEntityDescription,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>[])",
			"CoreData.NSBatchUpdateRequest::.ctor(CoreData.NSEntityDescription)",
			"CoreData.NSBatchUpdateRequest::set_Predicate(Foundation.NSPredicate)",
			"CoreData.NSBatchUpdateRequest::set_PropertiesToUpdate(Foundation.NSDictionary)",
			"CoreData.NSConstraintConflict::.ctor(System.String[],CoreData.NSManagedObject,Foundation.NSDictionary,CoreData.NSManagedObject[],Foundation.NSObject[])",
			"CoreData.NSCoreDataCoreSpotlightDelegate::.ctor(CoreData.NSPersistentStoreDescription,CoreData.NSManagedObjectModel)",
			"CoreData.NSCoreDataCoreSpotlightDelegate::.ctor(CoreData.NSPersistentStoreDescription,CoreData.NSPersistentStoreCoordinator)",
			"CoreData.NSCoreDataCoreSpotlightDelegate::GetAttributeSet(CoreData.NSManagedObject)",
			"CoreData.NSCoreDataCoreSpotlightDelegate::ReindexAllSearchableItems(CoreSpotlight.CSSearchableIndex,System.Action)",
			"CoreData.NSCoreDataCoreSpotlightDelegate::ReindexSearchableItems(CoreSpotlight.CSSearchableIndex,System.String[],System.Action)",
			"CoreData.NSDerivedAttributeDescription::.ctor(Foundation.NSCoder)",
			"CoreData.NSDerivedAttributeDescription::EncodeTo(Foundation.NSCoder)",
			"CoreData.NSDerivedAttributeDescription::set_DerivationExpression(Foundation.NSExpression)",
			"CoreData.NSEntityDescription::.ctor(Foundation.NSCoder)",
			"CoreData.NSEntityDescription::Copy(Foundation.NSZone)",
			"CoreData.NSEntityDescription::EncodeTo(Foundation.NSCoder)",
			"CoreData.NSEntityDescription::EntityForName(System.String,CoreData.NSManagedObjectContext)",
			"CoreData.NSEntityDescription::InsertNewObject(System.String,CoreData.NSManagedObjectContext)",
			"CoreData.NSEntityDescription::IsKindOfEntity(CoreData.NSEntityDescription)",
			"CoreData.NSEntityDescription::RelationshipsWithDestinationEntity(CoreData.NSEntityDescription)",
			"CoreData.NSEntityDescription::set__UniquenessConstraints(Foundation.NSArray)",
			"CoreData.NSEntityDescription::set_CoreSpotlightDisplayNameExpression(Foundation.NSExpression)",
			"CoreData.NSEntityDescription::set_UserInfo(Foundation.NSDictionary)",
			"CoreData.NSEntityMapping::set_DestinationEntityVersionHash(Foundation.NSData)",
			"CoreData.NSEntityMapping::set_SourceEntityVersionHash(Foundation.NSData)",
			"CoreData.NSEntityMapping::set_SourceExpression(Foundation.NSExpression)",
			"CoreData.NSEntityMapping::set_UserInfo(Foundation.NSDictionary)",
			"CoreData.NSEntityMigrationPolicy::BeginEntityMapping(CoreData.NSEntityMapping,CoreData.NSMigrationManager,Foundation.NSError&)",
			"CoreData.NSEntityMigrationPolicy::CreateDestinationInstancesForSourceInstance(CoreData.NSManagedObject,CoreData.NSEntityMapping,CoreData.NSMigrationManager,Foundation.NSError&)",
			"CoreData.NSEntityMigrationPolicy::CreateRelationshipsForDestinationInstance(CoreData.NSManagedObject,CoreData.NSEntityMapping,CoreData.NSMigrationManager,Foundation.NSError&)",
			"CoreData.NSEntityMigrationPolicy::EndEntityMapping(CoreData.NSEntityMapping,CoreData.NSMigrationManager,Foundation.NSError&)",
			"CoreData.NSEntityMigrationPolicy::EndInstanceCreationForEntityMapping(CoreData.NSEntityMapping,CoreData.NSMigrationManager,Foundation.NSError&)",
			"CoreData.NSEntityMigrationPolicy::EndRelationshipCreationForEntityMapping(CoreData.NSEntityMapping,CoreData.NSMigrationManager,Foundation.NSError&)",
			"CoreData.NSEntityMigrationPolicy::PerformCustomValidationForEntityMapping(CoreData.NSEntityMapping,CoreData.NSMigrationManager,Foundation.NSError&)",
			"CoreData.NSExpressionDescription::.ctor(Foundation.NSCoder)",
			"CoreData.NSExpressionDescription::set_Expression(Foundation.NSExpression)",
			"CoreData.NSFetchedPropertyDescription::.ctor(Foundation.NSCoder)",
			"CoreData.NSFetchedPropertyDescription::set_FetchRequest(CoreData.NSFetchRequest)",
			"CoreData.NSFetchedResultsController::.ctor(CoreData.NSFetchRequest,CoreData.NSManagedObjectContext,System.String,System.String)",
			"CoreData.NSFetchedResultsController::FromObject(Foundation.NSObject)",
			"CoreData.NSFetchedResultsController::ObjectAt(Foundation.NSIndexPath)",
			"CoreData.NSFetchedResultsControllerDelegate_Extensions::DidChangeContent(CoreData.INSFetchedResultsControllerDelegate,CoreData.NSFetchedResultsController)",
			"CoreData.NSFetchedResultsControllerDelegate_Extensions::DidChangeObject(CoreData.INSFetchedResultsControllerDelegate,CoreData.NSFetchedResultsController,Foundation.NSObject,Foundation.NSIndexPath,CoreData.NSFetchedResultsChangeType,Foundation.NSIndexPath)",
			"CoreData.NSFetchedResultsControllerDelegate_Extensions::DidChangeSection(CoreData.INSFetchedResultsControllerDelegate,CoreData.NSFetchedResultsController,CoreData.INSFetchedResultsSectionInfo,System.UIntPtr,CoreData.NSFetchedResultsChangeType)",
			"CoreData.NSFetchedResultsControllerDelegate_Extensions::SectionFor(CoreData.INSFetchedResultsControllerDelegate,CoreData.NSFetchedResultsController,System.String)",
			"CoreData.NSFetchedResultsControllerDelegate_Extensions::WillChangeContent(CoreData.INSFetchedResultsControllerDelegate,CoreData.NSFetchedResultsController)",
			"CoreData.NSFetchIndexDescription::.ctor(Foundation.NSCoder)",
			"CoreData.NSFetchIndexDescription::Copy(Foundation.NSZone)",
			"CoreData.NSFetchIndexDescription::EncodeTo(Foundation.NSCoder)",
			"CoreData.NSFetchIndexDescription::set_PartialIndexPredicate(Foundation.NSPredicate)",
			"CoreData.NSFetchIndexElementDescription::.ctor(CoreData.NSPropertyDescription,CoreData.NSFetchIndexElementType)",
			"CoreData.NSFetchIndexElementDescription::.ctor(Foundation.NSCoder)",
			"CoreData.NSFetchIndexElementDescription::Copy(Foundation.NSZone)",
			"CoreData.NSFetchIndexElementDescription::EncodeTo(Foundation.NSCoder)",
			"CoreData.NSFetchRequest::.ctor(Foundation.NSCoder)",
			"CoreData.NSFetchRequest::EncodeTo(Foundation.NSCoder)",
			"CoreData.NSFetchRequest::set_Entity(CoreData.NSEntityDescription)",
			"CoreData.NSFetchRequest::set_HavingPredicate(Foundation.NSPredicate)",
			"CoreData.NSFetchRequest::set_Predicate(Foundation.NSPredicate)",
			"CoreData.NSFetchRequestExpression::.ctor(Foundation.NSCoder)",
			"CoreData.NSFetchRequestExpression::FromFetch(Foundation.NSExpression,Foundation.NSExpression,System.Boolean)",
			"CoreData.NSIncrementalStore::.ctor(CoreData.NSPersistentStoreCoordinator,System.String,Foundation.NSUrl,Foundation.NSDictionary)",
			"CoreData.NSIncrementalStore::ExecuteRequest(CoreData.NSPersistentStoreRequest,CoreData.NSManagedObjectContext,Foundation.NSError&)",
			"CoreData.NSIncrementalStore::GetIdentifierForNewStore(Foundation.NSUrl)",
			"CoreData.NSIncrementalStore::NewObjectIdFor(CoreData.NSEntityDescription,Foundation.NSObject)",
			"CoreData.NSIncrementalStore::NewValue(CoreData.NSRelationshipDescription,CoreData.NSManagedObjectID,CoreData.NSManagedObjectContext,Foundation.NSError&)",
			"CoreData.NSIncrementalStore::NewValues(CoreData.NSManagedObjectID,CoreData.NSManagedObjectContext,Foundation.NSError&)",
			"CoreData.NSIncrementalStore::ReferenceObjectForObject(CoreData.NSManagedObjectID)",
			"CoreData.NSIncrementalStoreNode::.ctor(CoreData.NSManagedObjectID,Foundation.NSDictionary,System.UInt64)",
			"CoreData.NSIncrementalStoreNode::Update(Foundation.NSDictionary,System.UInt64)",
			"CoreData.NSIncrementalStoreNode::ValueForPropertyDescription(CoreData.NSPropertyDescription)",
			"CoreData.NSManagedObject::.ctor(CoreData.NSEntityDescription,CoreData.NSManagedObjectContext)",
			"CoreData.NSManagedObject::.ctor(CoreData.NSManagedObjectContext)",
			"CoreData.NSManagedObject::DidChangeValueForKey(System.String,Foundation.NSKeyValueSetMutationKind,Foundation.NSSet)",
			"CoreData.NSManagedObject::SetPrimitiveValue(Foundation.NSObject,System.String)",
			"CoreData.NSManagedObject::SetValue(Foundation.NSObject,System.String)",
			"CoreData.NSManagedObject::WillChangeValueForKey(System.String,Foundation.NSKeyValueSetMutationKind,Foundation.NSSet)",
			"CoreData.NSManagedObjectContext::.ctor(Foundation.NSCoder)",
			"CoreData.NSManagedObjectContext::AssignObject(Foundation.NSObject,CoreData.NSPersistentStore)",
			"CoreData.NSManagedObjectContext::CommitEditing(Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"CoreData.NSManagedObjectContext::CountForFetchRequest(CoreData.NSFetchRequest,Foundation.NSError&)",
			"CoreData.NSManagedObjectContext::DeleteObject(CoreData.NSManagedObject)",
			"CoreData.NSManagedObjectContext::DetectConflictsForObject(CoreData.NSManagedObject)",
			"CoreData.NSManagedObjectContext::EncodeTo(Foundation.NSCoder)",
			"CoreData.NSManagedObjectContext::ExecuteFetchRequest(CoreData.NSFetchRequest,Foundation.NSError&)",
			"CoreData.NSManagedObjectContext::ExecuteRequest(CoreData.NSPersistentStoreRequest,Foundation.NSError&)",
			"CoreData.NSManagedObjectContext::GetExistingObject(CoreData.NSManagedObjectID,Foundation.NSError&)",
			"CoreData.NSManagedObjectContext::InsertObject(CoreData.NSManagedObject)",
			"CoreData.NSManagedObjectContext::MergeChangesFromContextDidSaveNotification(Foundation.NSNotification)",
			"CoreData.NSManagedObjectContext::MergeChangesFromRemoteContextSave(Foundation.NSDictionary,CoreData.NSManagedObjectContext[])",
			"CoreData.NSManagedObjectContext::ObjectDidBeginEditing(AppKit.INSEditor)",
			"CoreData.NSManagedObjectContext::ObjectDidEndEditing(AppKit.INSEditor)",
			"CoreData.NSManagedObjectContext::ObjectRegisteredForID(CoreData.NSManagedObjectID)",
			"CoreData.NSManagedObjectContext::ObjectWithID(CoreData.NSManagedObjectID)",
			"CoreData.NSManagedObjectContext::ObserveValue(System.String,Foundation.NSObject,Foundation.NSDictionary,System.IntPtr)",
			"CoreData.NSManagedObjectContext::RefreshObject(CoreData.NSManagedObject,System.Boolean)",
			"CoreData.NSManagedObjectContext::set_ParentContext(CoreData.NSManagedObjectContext)",
			"CoreData.NSManagedObjectContext::set_PersistentStoreCoordinator(CoreData.NSPersistentStoreCoordinator)",
			"CoreData.NSManagedObjectContext::set_UndoManager(Foundation.NSUndoManager)",
			"CoreData.NSManagedObjectContext::SetQueryGenerationFromToken(CoreData.NSQueryGenerationToken,Foundation.NSError&)",
			"CoreData.NSManagedObjectContext::ShouldHandleInaccessibleFault(CoreData.NSManagedObject,CoreData.NSManagedObjectID,CoreData.NSPropertyDescription)",
			"CoreData.NSManagedObjectID::Copy(Foundation.NSZone)",
			"CoreData.NSManagedObjectModel::.ctor(Foundation.NSCoder)",
			"CoreData.NSManagedObjectModel::.ctor(Foundation.NSUrl)",
			"CoreData.NSManagedObjectModel::Copy(Foundation.NSZone)",
			"CoreData.NSManagedObjectModel::EncodeTo(Foundation.NSCoder)",
			"CoreData.NSManagedObjectModel::GetFetchRequestFromTemplate(System.String,Foundation.NSDictionary)",
			"CoreData.NSManagedObjectModel::GetMergedModel(Foundation.NSBundle[],Foundation.NSDictionary)",
			"CoreData.NSManagedObjectModel::GetModelByMerging(CoreData.NSManagedObjectModel[],Foundation.NSDictionary)",
			"CoreData.NSManagedObjectModel::IsConfigurationCompatibleWithStoreMetadata(System.String,Foundation.NSDictionary)",
			"CoreData.NSManagedObjectModel::set_LocalizationDictionary(Foundation.NSDictionary)",
			"CoreData.NSManagedObjectModel::set_VersionIdentifiers(Foundation.NSSet)",
			"CoreData.NSManagedObjectModel::SetFetchRequestTemplate(CoreData.NSFetchRequest,System.String)",
			"CoreData.NSMappingModel::.ctor(Foundation.NSUrl)",
			"CoreData.NSMappingModel::GetInferredMappingModel(CoreData.NSManagedObjectModel,CoreData.NSManagedObjectModel,Foundation.NSError&)",
			"CoreData.NSMappingModel::GetMappingModel(Foundation.NSBundle[],CoreData.NSManagedObjectModel,CoreData.NSManagedObjectModel)",
			"CoreData.NSMergeConflict::.ctor(CoreData.NSManagedObject,System.UIntPtr,System.UIntPtr,Foundation.NSDictionary,Foundation.NSDictionary)",
			"CoreData.NSMigrationManager::.ctor(CoreData.NSManagedObjectModel,CoreData.NSManagedObjectModel)",
			"CoreData.NSMigrationManager::AssociateSourceInstance(CoreData.NSManagedObject,CoreData.NSManagedObject,CoreData.NSEntityMapping)",
			"CoreData.NSMigrationManager::CancelMigrationWithError(Foundation.NSError)",
			"CoreData.NSMigrationManager::DestinationEntityForEntityMapping(CoreData.NSEntityMapping)",
			"CoreData.NSMigrationManager::MigrateStoreFromUrl(Foundation.NSUrl,System.String,Foundation.NSDictionary,CoreData.NSMappingModel,Foundation.NSUrl,System.String,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreData.NSMigrationManager::set_UserInfo(Foundation.NSDictionary)",
			"CoreData.NSMigrationManager::SourceEntityForEntityMapping(CoreData.NSEntityMapping)",
			"CoreData.NSPersistentCloudKitContainer::.ctor(System.String,CoreData.NSManagedObjectModel)",
			"CoreData.NSPersistentCloudKitContainer::AcceptShareInvitations(CloudKit.CKShareMetadata[],CoreData.NSPersistentStore,CoreData.NSPersistentCloudKitContainerAcceptShareInvitationsHandler)",
			"CoreData.NSPersistentCloudKitContainer::CanDeleteRecord(CoreData.NSManagedObjectID)",
			"CoreData.NSPersistentCloudKitContainer::CanModifyManagedObjects(CoreData.NSPersistentStore)",
			"CoreData.NSPersistentCloudKitContainer::CanUpdateRecord(CoreData.NSManagedObjectID)",
			"CoreData.NSPersistentCloudKitContainer::FetchParticipantsMatchingLookupInfos(CloudKit.CKUserIdentityLookupInfo[],CoreData.NSPersistentStore,CoreData.NSPersistentCloudKitContainerFetchParticipantsMatchingLookupInfosHandler)",
			"CoreData.NSPersistentCloudKitContainer::FetchSharesInPersistentStore(CoreData.NSPersistentStore,Foundation.NSError&)",
			"CoreData.NSPersistentCloudKitContainer::GetRecord(CoreData.NSManagedObjectID)",
			"CoreData.NSPersistentCloudKitContainer::GetRecordId(CoreData.NSManagedObjectID)",
			"CoreData.NSPersistentCloudKitContainer::PersistUpdatedShare(CloudKit.CKShare,CoreData.NSPersistentStore,CoreData.NSPersistentCloudKitContainerPersistUpdatedShareHandler)",
			"CoreData.NSPersistentCloudKitContainer::PurgeObjectsAndRecordsInZone(CloudKit.CKRecordZoneID,CoreData.NSPersistentStore,CoreData.NSPersistentCloudKitContainerPurgeObjectsAndRecordsInZoneHandler)",
			"CoreData.NSPersistentCloudKitContainer::ShareManagedObjects(CoreData.NSManagedObject[],CloudKit.CKShare,CoreData.NSPersistentCloudKitContainerShareManagedObjectsHandler)",
			"CoreData.NSPersistentCloudKitContainerEvent::Copy(Foundation.NSZone)",
			"CoreData.NSPersistentCloudKitContainerEventRequest::FetchEvents(CoreData.NSFetchRequest)",
			"CoreData.NSPersistentCloudKitContainerEventRequest::FetchEventsAfter(CoreData.NSPersistentCloudKitContainerEvent)",
			"CoreData.NSPersistentCloudKitContainerEventRequest::FetchEventsAfter(Foundation.NSDate)",
			"CoreData.NSPersistentContainer::.ctor(System.String,CoreData.NSManagedObjectModel)",
			"CoreData.NSPersistentContainer::GetPersistentContainer(System.String,CoreData.NSManagedObjectModel)",
			"CoreData.NSPersistentHistoryChange::Copy(Foundation.NSZone)",
			"CoreData.NSPersistentHistoryChange::GetEntityDescription(CoreData.NSManagedObjectContext)",
			"CoreData.NSPersistentHistoryChangeRequest::DeleteHistoryBefore(CoreData.NSPersistentHistoryToken)",
			"CoreData.NSPersistentHistoryChangeRequest::DeleteHistoryBefore(CoreData.NSPersistentHistoryTransaction)",
			"CoreData.NSPersistentHistoryChangeRequest::DeleteHistoryBefore(Foundation.NSDate)",
			"CoreData.NSPersistentHistoryChangeRequest::FetchHistory(CoreData.NSFetchRequest)",
			"CoreData.NSPersistentHistoryChangeRequest::FetchHistoryAfter(CoreData.NSPersistentHistoryToken)",
			"CoreData.NSPersistentHistoryChangeRequest::FetchHistoryAfter(CoreData.NSPersistentHistoryTransaction)",
			"CoreData.NSPersistentHistoryChangeRequest::FetchHistoryAfter(Foundation.NSDate)",
			"CoreData.NSPersistentHistoryChangeRequest::set_FetchRequest(CoreData.NSFetchRequest)",
			"CoreData.NSPersistentHistoryToken::Copy(Foundation.NSZone)",
			"CoreData.NSPersistentHistoryTransaction::Copy(Foundation.NSZone)",
			"CoreData.NSPersistentHistoryTransaction::GetEntityDescription(CoreData.NSManagedObjectContext)",
			"CoreData.NSPersistentStore::.ctor(CoreData.NSPersistentStoreCoordinator,System.String,Foundation.NSUrl,Foundation.NSDictionary)",
			"CoreData.NSPersistentStore::DidAddToPersistentStoreCoordinator(CoreData.NSPersistentStoreCoordinator)",
			"CoreData.NSPersistentStore::MetadataForPersistentStoreWithUrl(Foundation.NSUrl,Foundation.NSError&)",
			"CoreData.NSPersistentStore::set_Metadata(Foundation.NSDictionary)",
			"CoreData.NSPersistentStore::set_Url(Foundation.NSUrl)",
			"CoreData.NSPersistentStore::SetMetadata(Foundation.NSDictionary,Foundation.NSUrl,Foundation.NSError&)",
			"CoreData.NSPersistentStore::WillRemoveFromPersistentStoreCoordinator(CoreData.NSPersistentStoreCoordinator)",
			"CoreData.NSPersistentStoreCoordinator::.ctor(CoreData.NSManagedObjectModel)",
			"CoreData.NSPersistentStoreCoordinator::AddPersistentStore(CoreData.NSPersistentStoreDescription,System.Action`2<CoreData.NSPersistentStoreDescription,Foundation.NSError>)",
			"CoreData.NSPersistentStoreCoordinator::AddPersistentStore(Foundation.NSString,System.String,Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreData.NSPersistentStoreCoordinator::DestroyPersistentStore(Foundation.NSUrl,System.String,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreData.NSPersistentStoreCoordinator::Execute(CoreData.NSPersistentStoreRequest,CoreData.NSManagedObjectContext,Foundation.NSError&)",
			"CoreData.NSPersistentStoreCoordinator::GetMetadata(CoreData.NSPersistentStore)",
			"CoreData.NSPersistentStoreCoordinator::GetMetadata(System.String,Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreData.NSPersistentStoreCoordinator::ManagedObjectIDForURIRepresentation(Foundation.NSUrl)",
			"CoreData.NSPersistentStoreCoordinator::MetadataForPersistentStoreOfType(Foundation.NSString,Foundation.NSUrl,Foundation.NSError&)",
			"CoreData.NSPersistentStoreCoordinator::MetadataForPersistentStoreWithUrl(Foundation.NSUrl,Foundation.NSError&)",
			"CoreData.NSPersistentStoreCoordinator::MigratePersistentStore(CoreData.NSPersistentStore,Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSString,Foundation.NSError&)",
			"CoreData.NSPersistentStoreCoordinator::PersistentStoreForUrl(Foundation.NSUrl)",
			"CoreData.NSPersistentStoreCoordinator::RegisterStoreClass(ObjCRuntime.Class,Foundation.NSString)",
			"CoreData.NSPersistentStoreCoordinator::RemovePersistentStore(CoreData.NSPersistentStore,Foundation.NSError&)",
			"CoreData.NSPersistentStoreCoordinator::RemoveUbiquitousContentAndPersistentStore(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreData.NSPersistentStoreCoordinator::ReplacePersistentStore(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSUrl,Foundation.NSDictionary,System.String,Foundation.NSError&)",
			"CoreData.NSPersistentStoreCoordinator::SetMetadata(Foundation.NSDictionary,CoreData.NSPersistentStore)",
			"CoreData.NSPersistentStoreCoordinator::SetMetadata(Foundation.NSDictionary,Foundation.NSString,Foundation.NSUrl,Foundation.NSError&)",
			"CoreData.NSPersistentStoreCoordinator::SetMetadata(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.String,Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreData.NSPersistentStoreCoordinator::SetUrl(Foundation.NSUrl,CoreData.NSPersistentStore)",
			"CoreData.NSPersistentStoreCoordinator::UrlForPersistentStore(CoreData.NSPersistentStore)",
			"CoreData.NSPersistentStoreDescription::.ctor(Foundation.NSUrl)",
			"CoreData.NSPersistentStoreDescription::Copy(Foundation.NSZone)",
			"CoreData.NSPersistentStoreDescription::GetPersistentStoreDescription(Foundation.NSUrl)",
			"CoreData.NSPersistentStoreDescription::set_CloudKitContainerOptions(CoreData.NSPersistentCloudKitContainerOptions)",
			"CoreData.NSPersistentStoreDescription::set_Url(Foundation.NSUrl)",
			"CoreData.NSPersistentStoreDescription::SetOption(Foundation.NSObject,System.String)",
			"CoreData.NSPersistentStoreDescription::SetValue(Foundation.NSObject,System.String)",
			"CoreData.NSPersistentStoreRequest::Copy(Foundation.NSZone)",
			"CoreData.NSPropertyDescription::.ctor(Foundation.NSCoder)",
			"CoreData.NSPropertyDescription::Copy(Foundation.NSZone)",
			"CoreData.NSPropertyDescription::EncodeTo(Foundation.NSCoder)",
			"CoreData.NSPropertyDescription::set_UserInfo(Foundation.NSDictionary)",
			"CoreData.NSPropertyMapping::set_UserInfo(Foundation.NSDictionary)",
			"CoreData.NSPropertyMapping::set_ValueExpression(Foundation.NSExpression)",
			"CoreData.NSQueryGenerationToken::.ctor(Foundation.NSCoder)",
			"CoreData.NSQueryGenerationToken::Copy(Foundation.NSZone)",
			"CoreData.NSQueryGenerationToken::EncodeTo(Foundation.NSCoder)",
			"CoreData.NSRelationshipDescription::.ctor(Foundation.NSCoder)",
			"CoreData.NSRelationshipDescription::set_DestinationEntity(CoreData.NSEntityDescription)",
			"CoreData.NSRelationshipDescription::set_InverseRelationship(CoreData.NSRelationshipDescription)",
			"CoreData.NSSaveChangesRequest::.ctor(Foundation.NSSet,Foundation.NSSet,Foundation.NSSet,Foundation.NSSet)",
			"CoreFoundation.CFArray::Create(ObjCRuntime.INativeObject[])",
			"CoreFoundation.CFBundle::Create(Foundation.NSUrl)",
			"CoreFoundation.CFBundle::GetBundlesFromDirectory(Foundation.NSUrl,System.String)",
			"CoreFoundation.CFBundle::GetInfoDictionary(Foundation.NSUrl)",
			"CoreFoundation.CFBundle::GetLocalizations(Foundation.NSUrl)",
			"CoreFoundation.CFBundle::GetResourceUrl(Foundation.NSUrl,System.String,System.String,System.String)",
			"CoreFoundation.CFBundle::GetResourceUrls(Foundation.NSUrl,System.String,System.String)",
			"CoreFoundation.CFBundle::IsExecutableLoadable(Foundation.NSUrl)",
			"CoreFoundation.CFDataBuffer::get_Handle()",
			"CoreFoundation.CFDictionary::FromObjectAndKey(ObjCRuntime.INativeObject,ObjCRuntime.INativeObject)",
			"CoreFoundation.CFDictionary::FromObjectsAndKeys(ObjCRuntime.INativeObject[],ObjCRuntime.INativeObject[])",
			"CoreFoundation.CFMessagePort::CopyDescriptionProxy(System.IntPtr)",
			"CoreFoundation.CFMessagePort::CreateLocalPort(CoreFoundation.CFAllocator,System.String,CoreFoundation.CFMessagePort/CFMessagePortCallBack,CoreFoundation.CFMessagePortContext)",
			"CoreFoundation.CFMessagePort::CreateRemotePort(CoreFoundation.CFAllocator,System.String)",
			"CoreFoundation.CFMessagePort::MessagePortCallback(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)",
			"CoreFoundation.CFMessagePort::RetainProxy(System.IntPtr)",
			"CoreFoundation.CFMessagePort::SendRequest(System.Int32,Foundation.NSData,System.Double,System.Double,Foundation.NSString,Foundation.NSData&)",
			"CoreFoundation.CFMessagePort::SetDispatchQueue(CoreFoundation.DispatchQueue)",
			"CoreFoundation.CFMutableString::.ctor(CoreFoundation.CFString,System.IntPtr)",
			"CoreFoundation.CFMutableString::Transform(CoreFoundation.CFRange&,CoreFoundation.CFString,System.Boolean)",
			"CoreFoundation.CFMutableString::Transform(CoreFoundation.CFRange&,CoreFoundation.CFStringTransform,System.Boolean)",
			"CoreFoundation.CFMutableString::Transform(CoreFoundation.CFRange&,Foundation.NSString,System.Boolean)",
			"CoreFoundation.CFMutableString::Transform(CoreFoundation.CFString,System.Boolean)",
			"CoreFoundation.CFMutableString::Transform(CoreFoundation.CFStringTransform,System.Boolean)",
			"CoreFoundation.CFMutableString::Transform(Foundation.NSString,System.Boolean)",
			"CoreFoundation.CFNetwork/<>c__DisplayClass18_0::<ExecuteProxyAutoConfigurationScript>b__0(CoreFoundation.CFNetwork/CFProxyAutoConfigurationResultCallbackInternal,CoreFoundation.CFStreamClientContext&)",
			"CoreFoundation.CFNetwork/<>c__DisplayClass19_0::<ExecuteProxyAutoConfigurationScriptAsync>b__0(CoreFoundation.CFNetwork/CFProxyAutoConfigurationResultCallbackInternal,CoreFoundation.CFStreamClientContext&)",
			"CoreFoundation.CFNetwork/<>c__DisplayClass21_0::<ExecuteProxyAutoConfigurationUrl>b__0(CoreFoundation.CFNetwork/CFProxyAutoConfigurationResultCallbackInternal,CoreFoundation.CFStreamClientContext&)",
			"CoreFoundation.CFNetwork/<>c__DisplayClass22_0::<ExecuteProxyAutoConfigurationUrlAsync>b__0(CoreFoundation.CFNetwork/CFProxyAutoConfigurationResultCallbackInternal,CoreFoundation.CFStreamClientContext&)",
			"CoreFoundation.CFNetwork::CopyProxiesForAutoConfigurationScript(Foundation.NSString,Foundation.NSUrl)",
			"CoreFoundation.CFNetwork::CopyProxiesForURL(Foundation.NSUrl,Foundation.NSDictionary)",
			"CoreFoundation.CFNotificationCenter::AddObserver(System.String,ObjCRuntime.INativeObject,System.Action`2<System.String,Foundation.NSDictionary>,CoreFoundation.CFNotificationSuspensionBehavior)",
			"CoreFoundation.CFNotificationCenter::PostNotification(System.String,ObjCRuntime.INativeObject,Foundation.NSDictionary,System.Boolean,System.Boolean)",
			"CoreFoundation.CFPreferences::AddSuitePreferencesToApp(Foundation.NSString,System.String)",
			"CoreFoundation.CFPreferences::AppSynchronize(Foundation.NSString)",
			"CoreFoundation.CFPreferences::AppValueIsForced(System.String,Foundation.NSString)",
			"CoreFoundation.CFPreferences::GetAppBooleanValue(System.String,Foundation.NSString)",
			"CoreFoundation.CFPreferences::GetAppIntegerValue(System.String,Foundation.NSString)",
			"CoreFoundation.CFPreferences::GetAppValue(System.String,Foundation.NSString)",
			"CoreFoundation.CFPreferences::RemoveSuitePreferencesFromApp(Foundation.NSString,System.String)",
			"CoreFoundation.CFPreferences::SetAppValue(System.String,System.Object,Foundation.NSString)",
			"CoreFoundation.CFPropertyList::FromData(Foundation.NSData,CoreFoundation.CFPropertyListMutabilityOptions)",
			"CoreFoundation.CFProxy::CFProxyTypeToEnum(Foundation.NSString)",
			"CoreFoundation.CFReadStream::DoGetProperty(Foundation.NSString)",
			"CoreFoundation.CFReadStream::DoSetProperty(Foundation.NSString,ObjCRuntime.INativeObject)",
			"CoreFoundation.CFReadStream::ScheduleWithRunLoop(CoreFoundation.CFRunLoop,Foundation.NSString)",
			"CoreFoundation.CFReadStream::UnscheduleFromRunLoop(CoreFoundation.CFRunLoop,Foundation.NSString)",
			"CoreFoundation.CFRunLoop::AddSource(CoreFoundation.CFRunLoopSource,Foundation.NSString)",
			"CoreFoundation.CFRunLoop::ContainsSource(CoreFoundation.CFRunLoopSource,Foundation.NSString)",
			"CoreFoundation.CFRunLoop::RemoveSource(CoreFoundation.CFRunLoopSource,Foundation.NSString)",
			"CoreFoundation.CFRunLoop::RunInMode(Foundation.NSString,System.Double,System.Boolean)",
			"CoreFoundation.CFSocketSignature::.ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,CoreFoundation.CFSocketAddress)",
			"CoreFoundation.CFStream::CreateForHTTPRequest(CFNetwork.CFHTTPMessage)",
			"CoreFoundation.CFStream::CreateForStreamedHTTPRequest(CFNetwork.CFHTTPMessage,CoreFoundation.CFReadStream)",
			"CoreFoundation.CFStream::CreateForStreamedHTTPRequest(CFNetwork.CFHTTPMessage,Foundation.NSInputStream)",
			"CoreFoundation.CFStream::set_ReadDispatchQueue(CoreFoundation.DispatchQueue)",
			"CoreFoundation.CFStream::set_WriteDispatchQueue(CoreFoundation.DispatchQueue)",
			"CoreFoundation.CFUrl::FromStringHandle(System.IntPtr,CoreFoundation.CFUrl)",
			"CoreFoundation.CFWriteStream::DoGetProperty(Foundation.NSString)",
			"CoreFoundation.CFWriteStream::DoSetProperty(Foundation.NSString,ObjCRuntime.INativeObject)",
			"CoreFoundation.CFWriteStream::ScheduleWithRunLoop(CoreFoundation.CFRunLoop,Foundation.NSString)",
			"CoreFoundation.CFWriteStream::UnscheduleFromRunLoop(CoreFoundation.CFRunLoop,Foundation.NSString)",
			"CoreFoundation.DispatchData::Concat(CoreFoundation.DispatchData,CoreFoundation.DispatchData)",
			"CoreFoundation.DispatchGroup::Notify(CoreFoundation.DispatchQueue,CoreFoundation.DispatchBlock)",
			"CoreFoundation.DispatchIO::Read(System.Int32,System.UIntPtr,CoreFoundation.DispatchQueue,CoreFoundation.DispatchIOHandler)",
			"CoreFoundation.DispatchIO::Write(System.Int32,CoreFoundation.DispatchData,CoreFoundation.DispatchQueue,CoreFoundation.DispatchIOHandler)",
			"CoreFoundation.DispatchObject::SetTargetQueue(CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchQueue::.ctor(System.String,CoreFoundation.DispatchQueue/Attributes,CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchSource/DataAdd::.ctor(CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchSource/DataOr::.ctor(CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchSource/MachReceive::.ctor(System.Int32,CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchSource/MachSend::.ctor(System.Int32,System.Boolean,CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchSource/MemoryPressure::.ctor(CoreFoundation.MemoryPressureFlags,CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchSource/ProcessMonitor::.ctor(System.Int32,CoreFoundation.ProcessMonitorFlags,CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchSource/ReadMonitor::.ctor(System.Int32,CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchSource/SignalMonitor::.ctor(System.Int32,CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchSource/Timer::.ctor(System.Boolean,CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchSource/VnodeMonitor::.ctor(System.Int32,CoreFoundation.VnodeMonitorKind,CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchSource/VnodeMonitor::.ctor(System.String,CoreFoundation.VnodeMonitorKind,CoreFoundation.DispatchQueue)",
			"CoreFoundation.DispatchSource/WriteMonitor::.ctor(System.Int32,CoreFoundation.DispatchQueue)",
			"CoreGraphics.CGBitmapContext::.ctor(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,CoreGraphics.CGColorSpace,CoreGraphics.CGBitmapFlags)",
			"CoreGraphics.CGBitmapContext::.ctor(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,CoreGraphics.CGColorSpace,CoreGraphics.CGImageAlphaInfo)",
			"CoreGraphics.CGBitmapContext::Create(System.Byte[],System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,CoreGraphics.CGColorSpace,CoreGraphics.CGBitmapFlags,System.Runtime.InteropServices.GCHandle&)",
			"CoreGraphics.CGBitmapContext::Create(System.Byte[],System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,CoreGraphics.CGColorSpace,CoreGraphics.CGImageAlphaInfo,System.Runtime.InteropServices.GCHandle&)",
			"CoreGraphics.CGColor::Create(CoreGraphics.CGColorSpace,CoreGraphics.CGPattern,System.Runtime.InteropServices.NFloat[])",
			"CoreGraphics.CGColor::Create(CoreGraphics.CGColorSpace,System.Runtime.InteropServices.NFloat[])",
			"CoreGraphics.CGColor::Create(CoreGraphics.CGConstantColor)",
			"CoreGraphics.CGColor::CreateByMatchingToColorSpace(CoreGraphics.CGColorSpace,CoreGraphics.CGColorRenderingIntent,CoreGraphics.CGColor,Foundation.NSDictionary)",
			"CoreGraphics.CGColor::Equals(System.Object)",
			"CoreGraphics.CGColorConversionInfo::Create(CoreGraphics.CGColorSpace,CoreGraphics.CGColorSpace)",
			"CoreGraphics.CGColorConversionInfo::Create(CoreGraphics.CGColorSpace,CoreGraphics.CGColorSpace,Foundation.NSDictionary)",
			"CoreGraphics.CGColorConversionInfo::Create(Foundation.NSDictionary,CoreGraphics.CGColorConversionInfoTriple[])",
			"CoreGraphics.CGColorSpace::CreateAcesCGLinear()",
			"CoreGraphics.CGColorSpace::CreateAdobeRgb1988()",
			"CoreGraphics.CGColorSpace::CreateGenericCmyk()",
			"CoreGraphics.CGColorSpace::CreateGenericGray()",
			"CoreGraphics.CGColorSpace::CreateGenericGrayGamma2_2()",
			"CoreGraphics.CGColorSpace::CreateGenericRgb()",
			"CoreGraphics.CGColorSpace::CreateGenericRgbLinear()",
			"CoreGraphics.CGColorSpace::CreateGenericXyz()",
			"CoreGraphics.CGColorSpace::CreateIccData(CoreGraphics.CGDataProvider)",
			"CoreGraphics.CGColorSpace::CreateIccData(Foundation.NSData)",
			"CoreGraphics.CGColorSpace::CreateIccProfile(Foundation.NSData)",
			"CoreGraphics.CGColorSpace::CreateIccProfile(System.Runtime.InteropServices.NFloat[],CoreGraphics.CGDataProvider,CoreGraphics.CGColorSpace)",
			"CoreGraphics.CGColorSpace::CreateIndexed(CoreGraphics.CGColorSpace,System.Int32,System.Byte[])",
			"CoreGraphics.CGColorSpace::CreateItuR_2020()",
			"CoreGraphics.CGColorSpace::CreateItuR_709()",
			"CoreGraphics.CGColorSpace::CreatePattern(CoreGraphics.CGColorSpace)",
			"CoreGraphics.CGColorSpace::CreateRommRgb()",
			"CoreGraphics.CGColorSpace::CreateSrgb()",
			"CoreGraphics.CGContext::AddPath(CoreGraphics.CGPath)",
			"CoreGraphics.CGContext::BeginTransparencyLayer(CoreGraphics.CGRect,Foundation.NSDictionary)",
			"CoreGraphics.CGContext::BeginTransparencyLayer(Foundation.NSDictionary)",
			"CoreGraphics.CGContext::ClipToMask(CoreGraphics.CGRect,CoreGraphics.CGImage)",
			"CoreGraphics.CGContext::DrawImage(CoreGraphics.CGRect,CoreGraphics.CGImage)",
			"CoreGraphics.CGContext::DrawLayer(CoreGraphics.CGLayer,CoreGraphics.CGPoint)",
			"CoreGraphics.CGContext::DrawLayer(CoreGraphics.CGLayer,CoreGraphics.CGRect)",
			"CoreGraphics.CGContext::DrawLinearGradient(CoreGraphics.CGGradient,CoreGraphics.CGPoint,CoreGraphics.CGPoint,CoreGraphics.CGGradientDrawingOptions)",
			"CoreGraphics.CGContext::DrawPDFPage(CoreGraphics.CGPDFPage)",
			"CoreGraphics.CGContext::DrawRadialGradient(CoreGraphics.CGGradient,CoreGraphics.CGPoint,System.Runtime.InteropServices.NFloat,CoreGraphics.CGPoint,System.Runtime.InteropServices.NFloat,CoreGraphics.CGGradientDrawingOptions)",
			"CoreGraphics.CGContext::DrawShading(CoreGraphics.CGShading)",
			"CoreGraphics.CGContext::DrawTiledImage(CoreGraphics.CGRect,CoreGraphics.CGImage)",
			"CoreGraphics.CGContext::SetFillColor(CoreGraphics.CGColor)",
			"CoreGraphics.CGContext::SetFillColorSpace(CoreGraphics.CGColorSpace)",
			"CoreGraphics.CGContext::SetFillPattern(CoreGraphics.CGPattern,System.Runtime.InteropServices.NFloat[])",
			"CoreGraphics.CGContext::SetFont(CoreGraphics.CGFont)",
			"CoreGraphics.CGContext::SetShadow(CoreGraphics.CGSize,System.Runtime.InteropServices.NFloat,CoreGraphics.CGColor)",
			"CoreGraphics.CGContext::SetStrokeColor(CoreGraphics.CGColor)",
			"CoreGraphics.CGContext::SetStrokeColorSpace(CoreGraphics.CGColorSpace)",
			"CoreGraphics.CGContext::SetStrokePattern(CoreGraphics.CGPattern,System.Runtime.InteropServices.NFloat[])",
			"CoreGraphics.CGContextPDF::AddDocumentMetadata(Foundation.NSData)",
			"CoreGraphics.CGContextPDF::BeginTag(CoreGraphics.CGPdfTagType,CoreGraphics.CGPdfTagProperties)",
			"CoreGraphics.CGContextPDF::BeginTag(CoreGraphics.CGPdfTagType,Foundation.NSDictionary)",
			"CoreGraphics.CGContextPDF::Create(CoreGraphics.CGDataConsumer,CoreGraphics.CGRect*,CoreGraphics.CGPDFInfo)",
			"CoreGraphics.CGContextPDF::Create(Foundation.NSUrl,CoreGraphics.CGRect*,CoreGraphics.CGPDFInfo)",
			"CoreGraphics.CGContextPDF::SetUrl(Foundation.NSUrl,CoreGraphics.CGRect)",
			"CoreGraphics.CGDataConsumer::Create(Foundation.NSMutableData)",
			"CoreGraphics.CGDataConsumer::Create(Foundation.NSUrl)",
			"CoreGraphics.CGDataProvider::Create(Foundation.NSData)",
			"CoreGraphics.CGDataProvider::Create(Foundation.NSUrl)",
			"CoreGraphics.CGEvent::.ctor(CoreGraphics.CGEventSource)",
			"CoreGraphics.CGEvent::.ctor(CoreGraphics.CGEventSource,CoreGraphics.CGEventType,CoreGraphics.CGPoint,CoreGraphics.CGMouseButton)",
			"CoreGraphics.CGEvent::.ctor(CoreGraphics.CGEventSource,System.UInt16,System.Boolean)",
			"CoreGraphics.CGEvent::Create(CoreGraphics.CGEventSource,CoreGraphics.CGScrollEventUnit,System.Int32[])",
			"CoreGraphics.CGEvent::Create(Foundation.NSData)",
			"CoreGraphics.CGEvent::IsTapEnabled(CoreFoundation.CFMachPort)",
			"CoreGraphics.CGEvent::Post(CoreGraphics.CGEvent,CoreGraphics.CGEventTapLocation)",
			"CoreGraphics.CGEvent::PostToPSN(CoreGraphics.CGEvent,System.IntPtr)",
			"CoreGraphics.CGEvent::SetEventSource(CoreGraphics.CGEventSource)",
			"CoreGraphics.CGEvent::TapDisable(CoreFoundation.CFMachPort)",
			"CoreGraphics.CGEvent::TapEnable(CoreFoundation.CFMachPort)",
			"CoreGraphics.CGEvent::TapPostEven(System.IntPtr,CoreGraphics.CGEvent)",
			"CoreGraphics.CGFont::CreateFromProvider(CoreGraphics.CGDataProvider)",
			"CoreGraphics.CGGradient::Create(CoreGraphics.CGColorSpace,CoreGraphics.CGColor[])",
			"CoreGraphics.CGGradient::Create(CoreGraphics.CGColorSpace,CoreGraphics.CGColor[],System.Runtime.InteropServices.NFloat[])",
			"CoreGraphics.CGImage::Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,CoreGraphics.CGColorSpace,CoreGraphics.CGBitmapFlags,CoreGraphics.CGDataProvider,System.Runtime.InteropServices.NFloat[],System.Boolean,CoreGraphics.CGColorRenderingIntent)",
			"CoreGraphics.CGImage::Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,CoreGraphics.CGColorSpace,CoreGraphics.CGImageAlphaInfo,CoreGraphics.CGDataProvider,System.Runtime.InteropServices.NFloat[],System.Boolean,CoreGraphics.CGColorRenderingIntent)",
			"CoreGraphics.CGImage::CreateMask(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,CoreGraphics.CGDataProvider,System.Runtime.InteropServices.NFloat[],System.Boolean)",
			"CoreGraphics.CGImage::FromJPEG(CoreGraphics.CGDataProvider,System.Runtime.InteropServices.NFloat[],System.Boolean,CoreGraphics.CGColorRenderingIntent)",
			"CoreGraphics.CGImage::FromPNG(CoreGraphics.CGDataProvider,System.Runtime.InteropServices.NFloat[],System.Boolean,CoreGraphics.CGColorRenderingIntent)",
			"CoreGraphics.CGImage::WithColorSpace(CoreGraphics.CGColorSpace)",
			"CoreGraphics.CGImage::WithMask(CoreGraphics.CGImage)",
			"CoreGraphics.CGLayer::Create(CoreGraphics.CGContext,CoreGraphics.CGSize)",
			"CoreGraphics.CGPath::.ctor(CoreGraphics.CGPath)",
			"CoreGraphics.CGPath::.ctor(CoreGraphics.CGPath,CoreGraphics.CGAffineTransform)",
			"CoreGraphics.CGPath::AddPath(CoreGraphics.CGAffineTransform,CoreGraphics.CGPath)",
			"CoreGraphics.CGPath::AddPath(CoreGraphics.CGPath)",
			"CoreGraphics.CGPath::Equals(System.Object)",
			"CoreGraphics.CGPDFContentStream::.ctor(CoreGraphics.CGPDFPage)",
			"CoreGraphics.CGPDFContentStream::Create(CoreGraphics.CGPDFStream,Foundation.NSDictionary,CoreGraphics.CGPDFContentStream)",
			"CoreGraphics.CGPDFDocument::.ctor(CoreGraphics.CGDataProvider)",
			"CoreGraphics.CGPDFDocument::SetOutline(CoreGraphics.CGPDFOutlineOptions)",
			"CoreGraphics.CGPDFScanner::.ctor(CoreGraphics.CGPDFContentStream,CoreGraphics.CGPDFOperatorTable,System.Object)",
			"CoreGraphics.CGPoint::TryParse(Foundation.NSDictionary,CoreGraphics.CGPoint&)",
			"CoreGraphics.CGRect::TryParse(Foundation.NSDictionary,CoreGraphics.CGRect&)",
			"CoreGraphics.CGSize::TryParse(Foundation.NSDictionary,CoreGraphics.CGSize&)",
			"CoreHaptics.CHHapticAdvancedPatternPlayerWrapper::Schedule(CoreHaptics.CHHapticParameterCurve,System.Double,Foundation.NSError&)",
			"CoreHaptics.CHHapticDeviceCapabilityWrapper::GetAttributes(Foundation.NSString,Foundation.NSError&)",
			"CoreHaptics.CHHapticDeviceCapabilityWrapper::GetAttributes(Foundation.NSString,System.String,Foundation.NSError&)",
			"CoreHaptics.CHHapticDynamicParameter::.ctor(CoreHaptics.CHHapticDynamicParameterId,System.Single,System.Double)",
			"CoreHaptics.CHHapticEngine::.ctor(AVFoundation.AVAudioSession,Foundation.NSError&)",
			"CoreHaptics.CHHapticEngine::CreateAdvancedPlayer(CoreHaptics.CHHapticPattern,Foundation.NSError&)",
			"CoreHaptics.CHHapticEngine::CreatePlayer(CoreHaptics.CHHapticPattern,Foundation.NSError&)",
			"CoreHaptics.CHHapticEngine::PlayPattern(Foundation.NSData,Foundation.NSError&)",
			"CoreHaptics.CHHapticEngine::PlayPattern(Foundation.NSUrl,Foundation.NSError&)",
			"CoreHaptics.CHHapticEngine::RegisterAudioResource(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreHaptics.CHHapticEvent::.ctor(CoreHaptics.CHHapticEventType,CoreHaptics.CHHapticEventParameter[],System.Double)",
			"CoreHaptics.CHHapticEvent::.ctor(CoreHaptics.CHHapticEventType,CoreHaptics.CHHapticEventParameter[],System.Double,System.Double)",
			"CoreHaptics.CHHapticEventParameter::.ctor(CoreHaptics.CHHapticEventParameterId,System.Single)",
			"CoreHaptics.CHHapticParameterCurve::.ctor(CoreHaptics.CHHapticDynamicParameterId,CoreHaptics.CHHapticParameterCurveControlPoint[],System.Double)",
			"CoreHaptics.CHHapticPattern::.ctor(Foundation.NSDictionary,Foundation.NSError&)",
			"CoreHaptics.CHHapticPatternPlayerWrapper::Schedule(CoreHaptics.CHHapticParameterCurve,System.Double,Foundation.NSError&)",
			"CoreImage.CIAccordionFoldTransition::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAccordionFoldTransitionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIAccordionFoldTransitionProtocolWrapper::set_TargetImage(CoreImage.CIImage)",
			"CoreImage.CIAdditionCompositing::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAffineClamp::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAffineClampProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIAffineFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAffineTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAffineTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIAffineTransform::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAreaAverage::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAreaHistogram::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAreaHistogramProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIAreaMaximum::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAreaMaximumAlpha::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAreaMaximumAlphaProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIAreaMaximumProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIAreaMinimum::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAreaMinimumAlpha::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAreaMinimumAlphaProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIAreaMinimumProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIAreaMinMax::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAreaMinMaxProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIAreaMinMaxRed::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAreaMinMaxRedProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIAreaReductionFilterProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIAttributedTextImageGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAttributedTextImageGeneratorProtocolWrapper::set_Text(Foundation.NSAttributedString)",
			"CoreImage.CIAutoAdjustmentFilterOptions::ToDictionary()",
			"CoreImage.CIAztecCodeDescriptor::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAztecCodeDescriptor::.ctor(Foundation.NSData,System.Boolean,System.IntPtr,System.IntPtr)",
			"CoreImage.CIAztecCodeDescriptor::CreateDescriptor(Foundation.NSData,System.Boolean,System.IntPtr,System.IntPtr)",
			"CoreImage.CIAztecCodeGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIAztecCodeGeneratorProtocolWrapper::set_Message(Foundation.NSData)",
			"CoreImage.CIBarcodeDescriptor::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBarcodeDescriptor::Copy(Foundation.NSZone)",
			"CoreImage.CIBarcodeDescriptor::EncodeTo(Foundation.NSCoder)",
			"CoreImage.CIBarcodeGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBarcodeGenerator::set_BarcodeDescriptor(CoreImage.CIBarcodeDescriptor)",
			"CoreImage.CIBarcodeGeneratorProtocolWrapper::set_BarcodeDescriptor(CoreImage.CIBarcodeDescriptor)",
			"CoreImage.CIBarsSwipeTransition::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBarsSwipeTransitionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIBarsSwipeTransitionProtocolWrapper::set_TargetImage(CoreImage.CIImage)",
			"CoreImage.CIBicubicScaleTransform::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBicubicScaleTransformProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIBlendFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBlendKernel::Apply(CoreImage.CIImage,CoreImage.CIImage)",
			"CoreImage.CIBlendKernel::Apply(CoreImage.CIImage,CoreImage.CIImage,CoreGraphics.CGColorSpace)",
			"CoreImage.CIBlendWithAlphaMask::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBlendWithBlueMask::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBlendWithMask::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBlendWithMaskProtocolWrapper::set_BackgroundImage(CoreImage.CIImage)",
			"CoreImage.CIBlendWithMaskProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIBlendWithMaskProtocolWrapper::set_MaskImage(CoreImage.CIImage)",
			"CoreImage.CIBlendWithRedMask::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBloom::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBloomProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIBokehBlur::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBokehBlurProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIBoxBlur::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBoxBlurProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIBumpDistortion::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBumpDistortionLinear::.ctor(Foundation.NSCoder)",
			"CoreImage.CIBumpDistortionLinearProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIBumpDistortionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CICameraCalibrationLensCorrection::.ctor(Foundation.NSCoder)",
			"CoreImage.CICameraCalibrationLensCorrection::set_AVCameraCalibrationData(AVFoundation.AVCameraCalibrationData)",
			"CoreImage.CICheckerboardGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CICheckerboardGeneratorProtocolWrapper::set_Color0(CoreImage.CIColor)",
			"CoreImage.CICheckerboardGeneratorProtocolWrapper::set_Color1(CoreImage.CIColor)",
			"CoreImage.CICircleSplashDistortion::.ctor(Foundation.NSCoder)",
			"CoreImage.CICircleSplashDistortionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CICircularScreen::.ctor(Foundation.NSCoder)",
			"CoreImage.CICircularScreenProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CICircularWrap::.ctor(Foundation.NSCoder)",
			"CoreImage.CICircularWrapProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIClamp::.ctor(Foundation.NSCoder)",
			"CoreImage.CICmykHalftone::.ctor(Foundation.NSCoder)",
			"CoreImage.CICmykHalftoneProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CICode128BarcodeGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CICode128BarcodeGeneratorProtocolWrapper::set_Message(Foundation.NSData)",
			"CoreImage.CICodeGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColor::.ctor(AppKit.NSColor)",
			"CoreImage.CIColor::.ctor(CoreGraphics.CGColor)",
			"CoreImage.CIColor::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColor::.ctor(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,CoreGraphics.CGColorSpace)",
			"CoreImage.CIColor::.ctor(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,CoreGraphics.CGColorSpace)",
			"CoreImage.CIColor::.ctor(UIKit.UIColor)",
			"CoreImage.CIColor::Copy(Foundation.NSZone)",
			"CoreImage.CIColor::EncodeTo(Foundation.NSCoder)",
			"CoreImage.CIColor::FromCGColor(CoreGraphics.CGColor)",
			"CoreImage.CIColor::FromRgb(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,CoreGraphics.CGColorSpace)",
			"CoreImage.CIColor::FromRgba(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,CoreGraphics.CGColorSpace)",
			"CoreImage.CIColorAbsoluteDifference::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorAbsoluteDifferenceProtocolWrapper::set_Image2(CoreImage.CIImage)",
			"CoreImage.CIColorAbsoluteDifferenceProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorBurnBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorClamp::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorClampProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorClampProtocolWrapper::set_MaxComponents(CoreImage.CIVector)",
			"CoreImage.CIColorClampProtocolWrapper::set_MinComponents(CoreImage.CIVector)",
			"CoreImage.CIColorControls::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorControlsProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorCrossPolynomial::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorCrossPolynomialProtocolWrapper::set_BlueCoefficients(CoreImage.CIVector)",
			"CoreImage.CIColorCrossPolynomialProtocolWrapper::set_GreenCoefficients(CoreImage.CIVector)",
			"CoreImage.CIColorCrossPolynomialProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorCrossPolynomialProtocolWrapper::set_RedCoefficients(CoreImage.CIVector)",
			"CoreImage.CIColorCube::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorCubeProtocolWrapper::set_CubeData(Foundation.NSData)",
			"CoreImage.CIColorCubeProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorCubesMixedWithMask::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorCubesMixedWithMask::set_ColorSpace(CoreGraphics.CGColorSpace)",
			"CoreImage.CIColorCubesMixedWithMaskProtocolWrapper::set_ColorSpace(CoreGraphics.CGColorSpace)",
			"CoreImage.CIColorCubesMixedWithMaskProtocolWrapper::set_Cube0Data(Foundation.NSData)",
			"CoreImage.CIColorCubesMixedWithMaskProtocolWrapper::set_Cube1Data(Foundation.NSData)",
			"CoreImage.CIColorCubesMixedWithMaskProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorCubesMixedWithMaskProtocolWrapper::set_MaskImage(CoreImage.CIImage)",
			"CoreImage.CIColorCubeWithColorSpace::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorCubeWithColorSpace::set_ColorSpace(CoreGraphics.CGColorSpace)",
			"CoreImage.CIColorCubeWithColorSpaceProtocolWrapper::set_ColorSpace(CoreGraphics.CGColorSpace)",
			"CoreImage.CIColorCubeWithColorSpaceProtocolWrapper::set_CubeData(Foundation.NSData)",
			"CoreImage.CIColorCubeWithColorSpaceProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorCurves::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorCurves::set_ColorSpace(CoreGraphics.CGColorSpace)",
			"CoreImage.CIColorCurvesProtocolWrapper::set_ColorSpace(CoreGraphics.CGColorSpace)",
			"CoreImage.CIColorCurvesProtocolWrapper::set_CurvesData(Foundation.NSData)",
			"CoreImage.CIColorCurvesProtocolWrapper::set_CurvesDomain(CoreImage.CIVector)",
			"CoreImage.CIColorCurvesProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorDodgeBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorInvert::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorInvertProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorMap::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorMapProtocolWrapper::set_GradientImage(CoreImage.CIImage)",
			"CoreImage.CIColorMapProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorMatrix::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorMatrixProtocolWrapper::set_AVector(CoreImage.CIVector)",
			"CoreImage.CIColorMatrixProtocolWrapper::set_BiasVector(CoreImage.CIVector)",
			"CoreImage.CIColorMatrixProtocolWrapper::set_BVector(CoreImage.CIVector)",
			"CoreImage.CIColorMatrixProtocolWrapper::set_GVector(CoreImage.CIVector)",
			"CoreImage.CIColorMatrixProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorMatrixProtocolWrapper::set_RVector(CoreImage.CIVector)",
			"CoreImage.CIColorMonochrome::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorMonochromeProtocolWrapper::set_Color(CoreImage.CIColor)",
			"CoreImage.CIColorMonochromeProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorPolynomial::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorPolynomialProtocolWrapper::set_AlphaCoefficients(CoreImage.CIVector)",
			"CoreImage.CIColorPolynomialProtocolWrapper::set_BlueCoefficients(CoreImage.CIVector)",
			"CoreImage.CIColorPolynomialProtocolWrapper::set_GreenCoefficients(CoreImage.CIVector)",
			"CoreImage.CIColorPolynomialProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorPolynomialProtocolWrapper::set_RedCoefficients(CoreImage.CIVector)",
			"CoreImage.CIColorPosterize::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorPosterizeProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorThreshold::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorThresholdOtsu::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColorThresholdOtsuProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColorThresholdProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIColumnAverage::.ctor(Foundation.NSCoder)",
			"CoreImage.CIColumnAverageProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIComicEffect::.ctor(Foundation.NSCoder)",
			"CoreImage.CIComicEffectProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CICompositeOperationProtocolWrapper::set_BackgroundImage(CoreImage.CIImage)",
			"CoreImage.CICompositeOperationProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CICompositingFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIConstantColorGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIContext::.ctor(Foundation.NSDictionary)",
			"CoreImage.CIContext::Create(Metal.IMTLCommandQueue)",
			"CoreImage.CIContext::Create(Metal.IMTLCommandQueue,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"CoreImage.CIContext::CreateCGImage(CoreImage.CIImage,CoreGraphics.CGRect)",
			"CoreImage.CIContext::CreateCGImage(CoreImage.CIImage,CoreGraphics.CGRect,CoreImage.CIFormat,CoreGraphics.CGColorSpace,System.Boolean)",
			"CoreImage.CIContext::CreateCGImage(CoreImage.CIImage,CoreGraphics.CGRect,System.Int32,CoreGraphics.CGColorSpace)",
			"CoreImage.CIContext::CreateCGLayer(CoreGraphics.CGSize,Foundation.NSDictionary)",
			"CoreImage.CIContext::DrawImage(CoreImage.CIImage,CoreGraphics.CGPoint,CoreGraphics.CGRect)",
			"CoreImage.CIContext::DrawImage(CoreImage.CIImage,CoreGraphics.CGRect,CoreGraphics.CGRect)",
			"CoreImage.CIContext::FromContext(CoreGraphics.CGContext,Foundation.NSDictionary)",
			"CoreImage.CIContext::FromContext(OpenGLES.EAGLContext)",
			"CoreImage.CIContext::FromContext(OpenGLES.EAGLContext,Foundation.NSDictionary)",
			"CoreImage.CIContext::FromMetalDevice(Metal.IMTLDevice)",
			"CoreImage.CIContext::FromMetalDevice(Metal.IMTLDevice,Foundation.NSDictionary)",
			"CoreImage.CIContext::FromMetalDevice(Metal.IMTLDevice,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"CoreImage.CIContext::FromOptions(Foundation.NSDictionary)",
			"CoreImage.CIContext::Render(CoreImage.CIImage,CoreVideo.CVPixelBuffer)",
			"CoreImage.CIContext::Render(CoreImage.CIImage,CoreVideo.CVPixelBuffer,CoreGraphics.CGRect,CoreGraphics.CGColorSpace)",
			"CoreImage.CIContext::Render(CoreImage.CIImage,IOSurface.IOSurface,CoreGraphics.CGRect,CoreGraphics.CGColorSpace)",
			"CoreImage.CIContext::Render(CoreImage.CIImage,Metal.IMTLTexture,Metal.IMTLCommandBuffer,CoreGraphics.CGRect,CoreGraphics.CGColorSpace)",
			"CoreImage.CIContext::RenderToBitmap(CoreImage.CIImage,System.IntPtr,System.IntPtr,CoreGraphics.CGRect,System.Int32,CoreGraphics.CGColorSpace)",
			"CoreImage.CIContext_CIDepthBlurEffect::GetDepthBlurEffectFilter(CoreImage.CIContext,CoreImage.CIImage,CoreImage.CIImage,CoreImage.CIImage,CoreImage.CIImage,CoreImage.CIImage,CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"CoreImage.CIContext_CIDepthBlurEffect::GetDepthBlurEffectFilter(CoreImage.CIContext,CoreImage.CIImage,CoreImage.CIImage,CoreImage.CIImage,CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"CoreImage.CIContext_CIDepthBlurEffect::GetDepthBlurEffectFilter(CoreImage.CIContext,CoreImage.CIImage,CoreImage.CIImage,CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"CoreImage.CIContext_CIDepthBlurEffect::GetDepthBlurEffectFilter(CoreImage.CIContext,Foundation.NSData,Foundation.NSDictionary)",
			"CoreImage.CIContext_CIDepthBlurEffect::GetDepthBlurEffectFilter(CoreImage.CIContext,Foundation.NSUrl,Foundation.NSDictionary)",
			"CoreImage.CIContext_CIRenderDestination::PrepareRender(CoreImage.CIContext,CoreImage.CIImage,CoreGraphics.CGRect,CoreImage.CIRenderDestination,CoreGraphics.CGPoint,Foundation.NSError&)",
			"CoreImage.CIContext_CIRenderDestination::StartTaskToClear(CoreImage.CIContext,CoreImage.CIRenderDestination,Foundation.NSError&)",
			"CoreImage.CIContext_CIRenderDestination::StartTaskToRender(CoreImage.CIContext,CoreImage.CIImage,CoreGraphics.CGRect,CoreImage.CIRenderDestination,CoreGraphics.CGPoint,Foundation.NSError&)",
			"CoreImage.CIContext_CIRenderDestination::StartTaskToRender(CoreImage.CIContext,CoreImage.CIImage,CoreImage.CIRenderDestination,Foundation.NSError&)",
			"CoreImage.CIContext_ImageRepresentation::GetHeif10Representation(CoreImage.CIContext,CoreImage.CIImage,CoreGraphics.CGColorSpace,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreImage.CIContext_ImageRepresentation::GetHeifRepresentation(CoreImage.CIContext,CoreImage.CIImage,CoreImage.CIFormat,CoreGraphics.CGColorSpace,Foundation.NSDictionary)",
			"CoreImage.CIContext_ImageRepresentation::GetJpegRepresentation(CoreImage.CIContext,CoreImage.CIImage,CoreGraphics.CGColorSpace,Foundation.NSDictionary)",
			"CoreImage.CIContext_ImageRepresentation::GetPngRepresentation(CoreImage.CIContext,CoreImage.CIImage,CoreImage.CIFormat,CoreGraphics.CGColorSpace,Foundation.NSDictionary)",
			"CoreImage.CIContext_ImageRepresentation::GetTiffRepresentation(CoreImage.CIContext,CoreImage.CIImage,CoreImage.CIFormat,CoreGraphics.CGColorSpace,Foundation.NSDictionary)",
			"CoreImage.CIContext_ImageRepresentation::WriteHeif10Representation(CoreImage.CIContext,CoreImage.CIImage,Foundation.NSUrl,CoreGraphics.CGColorSpace,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreImage.CIContext_ImageRepresentation::WriteHeifRepresentation(CoreImage.CIContext,CoreImage.CIImage,Foundation.NSUrl,CoreImage.CIFormat,CoreGraphics.CGColorSpace,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreImage.CIContext_ImageRepresentation::WriteJpegRepresentation(CoreImage.CIContext,CoreImage.CIImage,Foundation.NSUrl,CoreGraphics.CGColorSpace,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreImage.CIContext_ImageRepresentation::WritePngRepresentation(CoreImage.CIContext,CoreImage.CIImage,Foundation.NSUrl,CoreImage.CIFormat,CoreGraphics.CGColorSpace,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreImage.CIContext_ImageRepresentation::WriteTiffRepresentation(CoreImage.CIContext,CoreImage.CIImage,Foundation.NSUrl,CoreImage.CIFormat,CoreGraphics.CGColorSpace,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreImage.CIConvolution3X3::.ctor(Foundation.NSCoder)",
			"CoreImage.CIConvolution5X5::.ctor(Foundation.NSCoder)",
			"CoreImage.CIConvolution7X7::.ctor(Foundation.NSCoder)",
			"CoreImage.CIConvolution9Horizontal::.ctor(Foundation.NSCoder)",
			"CoreImage.CIConvolution9Vertical::.ctor(Foundation.NSCoder)",
			"CoreImage.CIConvolutionCore::.ctor(Foundation.NSCoder)",
			"CoreImage.CIConvolutionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIConvolutionProtocolWrapper::set_Weights(CoreImage.CIVector)",
			"CoreImage.CIConvolutionRGB3X3::.ctor(Foundation.NSCoder)",
			"CoreImage.CIConvolutionRGB5X5::.ctor(Foundation.NSCoder)",
			"CoreImage.CIConvolutionRGB7X7::.ctor(Foundation.NSCoder)",
			"CoreImage.CIConvolutionRGB9Horizontal::.ctor(Foundation.NSCoder)",
			"CoreImage.CIConvolutionRGB9Vertical::.ctor(Foundation.NSCoder)",
			"CoreImage.CICopyMachineTransition::.ctor(Foundation.NSCoder)",
			"CoreImage.CICopyMachineTransitionProtocolWrapper::set_Color(CoreImage.CIColor)",
			"CoreImage.CICoreMLModelFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CICoreMLModelProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CICoreMLModelProtocolWrapper::set_Model(CoreML.MLModel)",
			"CoreImage.CICrop::.ctor(Foundation.NSCoder)",
			"CoreImage.CICrystallize::.ctor(Foundation.NSCoder)",
			"CoreImage.CICrystallizeProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIDarkenBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDataMatrixCodeDescriptor::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDataMatrixCodeDescriptor::.ctor(Foundation.NSData,System.IntPtr,System.IntPtr,CoreImage.CIDataMatrixCodeEccVersion)",
			"CoreImage.CIDataMatrixCodeDescriptor::CreateDescriptor(Foundation.NSData,System.IntPtr,System.IntPtr,CoreImage.CIDataMatrixCodeEccVersion)",
			"CoreImage.CIDepthBlurEffect::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDepthBlurEffect::set_AuxDataMetadata(ImageIO.CGImageMetadata)",
			"CoreImage.CIDepthBlurEffect::set_CalibrationData(AVFoundation.AVCameraCalibrationData)",
			"CoreImage.CIDepthDisparityConverter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDepthOfField::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDepthOfFieldProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIDepthToDisparity::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDepthToDisparityProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIDetector::FeaturesInImage(CoreImage.CIImage)",
			"CoreImage.CIDetector::FeaturesInImage(CoreImage.CIImage,Foundation.NSDictionary)",
			"CoreImage.CIDetector::FromType(Foundation.NSString,CoreImage.CIContext,Foundation.NSDictionary)",
			"CoreImage.CIDifferenceBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDiscBlur::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDiscBlurProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIDisintegrateWithMaskTransition::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDisintegrateWithMaskTransitionProtocolWrapper::set_MaskImage(CoreImage.CIImage)",
			"CoreImage.CIDisparityToDepth::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDisparityToDepthProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIDisplacementDistortion::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDisplacementDistortionProtocolWrapper::set_DisplacementImage(CoreImage.CIImage)",
			"CoreImage.CIDisplacementDistortionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIDissolveTransition::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDistortionFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDither::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDitherProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIDivideBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDocumentEnhancer::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDocumentEnhancerProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIDotScreen::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDotScreenProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIDroste::.ctor(Foundation.NSCoder)",
			"CoreImage.CIDrosteProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIEdgePreserveUpsampleFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIEdgePreserveUpsampleProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIEdgePreserveUpsampleProtocolWrapper::set_SmallImage(CoreImage.CIImage)",
			"CoreImage.CIEdges::.ctor(Foundation.NSCoder)",
			"CoreImage.CIEdgesProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIEdgeWork::.ctor(Foundation.NSCoder)",
			"CoreImage.CIEdgeWorkProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIEightfoldReflectedTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CIEightfoldReflectedTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIExclusionBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIExposureAdjust::.ctor(Foundation.NSCoder)",
			"CoreImage.CIExposureAdjustProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIFaceBalance::.ctor(Foundation.NSCoder)",
			"CoreImage.CIFalseColor::.ctor(Foundation.NSCoder)",
			"CoreImage.CIFalseColorProtocolWrapper::set_Color0(CoreImage.CIColor)",
			"CoreImage.CIFalseColorProtocolWrapper::set_Color1(CoreImage.CIColor)",
			"CoreImage.CIFalseColorProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIFilter::Apply(CoreImage.CIKernel,Foundation.NSArray,Foundation.NSDictionary)",
			"CoreImage.CIFilter::Copy(Foundation.NSZone)",
			"CoreImage.CIFilter::CreateRawFilter(CoreVideo.CVPixelBuffer,Foundation.NSDictionary,Foundation.NSDictionary)",
			"CoreImage.CIFilter::CreateRawFilter(Foundation.NSData,Foundation.NSDictionary)",
			"CoreImage.CIFilter::CreateRawFilter(Foundation.NSUrl,Foundation.NSDictionary)",
			"CoreImage.CIFilter::EncodeTo(Foundation.NSCoder)",
			"CoreImage.CIFilter::FromSerializedXMP(Foundation.NSData,CoreGraphics.CGRect,Foundation.NSError&)",
			"CoreImage.CIFilter::get_Item(Foundation.NSString)",
			"CoreImage.CIFilter::GetFilter(System.String,Foundation.NSDictionary)",
			"CoreImage.CIFilter::GetFilterUIView(Foundation.NSDictionary,Foundation.NSArray)",
			"CoreImage.CIFilter::RegisterFilterName(System.String,CoreImage.ICIFilterConstructor,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"CoreImage.CIFilter::set_Item(Foundation.NSString,Foundation.NSObject)",
			"CoreImage.CIFilter::SetValue(System.String,Foundation.NSObject)",
			"CoreImage.CIFilter::SetValueForKey(Foundation.NSObject,System.IntPtr)",
			"CoreImage.CIFilterGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIFilterGenerator::.ctor(Foundation.NSUrl)",
			"CoreImage.CIFilterGenerator::ConnectObject(Foundation.NSObject,System.String,Foundation.NSObject,System.String)",
			"CoreImage.CIFilterGenerator::Copy(Foundation.NSZone)",
			"CoreImage.CIFilterGenerator::DisconnectObject(Foundation.NSObject,System.String,Foundation.NSObject,System.String)",
			"CoreImage.CIFilterGenerator::EncodeTo(Foundation.NSCoder)",
			"CoreImage.CIFilterGenerator::ExportKey(System.String,Foundation.NSObject,System.String)",
			"CoreImage.CIFilterGenerator::FromUrl(Foundation.NSUrl)",
			"CoreImage.CIFilterGenerator::Save(Foundation.NSUrl,System.Boolean)",
			"CoreImage.CIFilterGenerator::set_ClassAttributes(Foundation.NSDictionary)",
			"CoreImage.CIFilterGenerator::SetAttributesforExportedKey(Foundation.NSDictionary,Foundation.NSString)",
			"CoreImage.CIFilterShape::Copy(Foundation.NSZone)",
			"CoreImage.CIFilterShape::Intersect(CoreImage.CIFilterShape)",
			"CoreImage.CIFilterShape::Union(CoreImage.CIFilterShape)",
			"CoreImage.CIFlashTransition::.ctor(Foundation.NSCoder)",
			"CoreImage.CIFlashTransitionProtocolWrapper::set_Color(CoreImage.CIColor)",
			"CoreImage.CIFlashTransitionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIFlashTransitionProtocolWrapper::set_TargetImage(CoreImage.CIImage)",
			"CoreImage.CIFourCoordinateGeometryFilterProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIFourfoldReflectedTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CIFourfoldReflectedTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIFourfoldRotatedTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CIFourfoldRotatedTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIFourfoldTranslatedTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CIFourfoldTranslatedTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIGaborGradients::.ctor(Foundation.NSCoder)",
			"CoreImage.CIGaborGradientsProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIGammaAdjust::.ctor(Foundation.NSCoder)",
			"CoreImage.CIGammaAdjustProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIGaussianBlur::.ctor(Foundation.NSCoder)",
			"CoreImage.CIGaussianBlurProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIGaussianGradient::.ctor(Foundation.NSCoder)",
			"CoreImage.CIGaussianGradientProtocolWrapper::set_Color0(CoreImage.CIColor)",
			"CoreImage.CIGaussianGradientProtocolWrapper::set_Color1(CoreImage.CIColor)",
			"CoreImage.CIGlassDistortion::.ctor(Foundation.NSCoder)",
			"CoreImage.CIGlassDistortionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIGlassDistortionProtocolWrapper::set_Texture(CoreImage.CIImage)",
			"CoreImage.CIGlassLozenge::.ctor(Foundation.NSCoder)",
			"CoreImage.CIGlassLozengeProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIGlideReflectedTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CIGlideReflectedTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIGloom::.ctor(Foundation.NSCoder)",
			"CoreImage.CIGloomProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIGuidedFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIHardLightBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIHatchedScreen::.ctor(Foundation.NSCoder)",
			"CoreImage.CIHatchedScreenProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIHeightFieldFromMask::.ctor(Foundation.NSCoder)",
			"CoreImage.CIHeightFieldFromMaskProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIHexagonalPixellate::.ctor(Foundation.NSCoder)",
			"CoreImage.CIHexagonalPixellateProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIHighlightShadowAdjust::.ctor(Foundation.NSCoder)",
			"CoreImage.CIHighlightShadowAdjustProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIHistogramDisplayFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIHistogramDisplayProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIHoleDistortion::.ctor(Foundation.NSCoder)",
			"CoreImage.CIHoleDistortionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIHueAdjust::.ctor(Foundation.NSCoder)",
			"CoreImage.CIHueAdjustProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIHueBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIHueSaturationValueGradient::.ctor(Foundation.NSCoder)",
			"CoreImage.CIHueSaturationValueGradient::set_ColorSpace(CoreGraphics.CGColorSpace)",
			"CoreImage.CIHueSaturationValueGradientProtocolWrapper::set_ColorSpace(CoreGraphics.CGColorSpace)",
			"CoreImage.CIImage::.ctor(AppKit.NSImageRep)",
			"CoreImage.CIImage::.ctor(AVFoundation.AVDepthData)",
			"CoreImage.CIImage::.ctor(AVFoundation.AVDepthData,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(AVFoundation.AVPortraitEffectsMatte)",
			"CoreImage.CIImage::.ctor(AVFoundation.AVPortraitEffectsMatte,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(AVFoundation.AVSemanticSegmentationMatte)",
			"CoreImage.CIImage::.ctor(AVFoundation.AVSemanticSegmentationMatte,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(CoreGraphics.CGImage)",
			"CoreImage.CIImage::.ctor(CoreGraphics.CGImage,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(CoreGraphics.CGLayer)",
			"CoreImage.CIImage::.ctor(CoreGraphics.CGLayer,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(CoreImage.CIColor)",
			"CoreImage.CIImage::.ctor(CoreImage.ICIImageProvider,System.UIntPtr,System.UIntPtr,System.Int32,CoreGraphics.CGColorSpace,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(CoreVideo.CVImageBuffer)",
			"CoreImage.CIImage::.ctor(CoreVideo.CVImageBuffer,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(CoreVideo.CVImageBuffer,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"CoreImage.CIImage::.ctor(CoreVideo.CVPixelBuffer)",
			"CoreImage.CIImage::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(Foundation.NSCoder)",
			"CoreImage.CIImage::.ctor(Foundation.NSData)",
			"CoreImage.CIImage::.ctor(Foundation.NSData,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(Foundation.NSData,System.IntPtr,CoreGraphics.CGSize,System.Int32,CoreGraphics.CGColorSpace)",
			"CoreImage.CIImage::.ctor(Foundation.NSUrl)",
			"CoreImage.CIImage::.ctor(Foundation.NSUrl,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(ImageIO.CGImageSource,System.UIntPtr,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(IOSurface.IOSurface)",
			"CoreImage.CIImage::.ctor(IOSurface.IOSurface,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(Metal.IMTLTexture,Foundation.NSDictionary)",
			"CoreImage.CIImage::.ctor(System.Int32,CoreGraphics.CGSize,System.Boolean,CoreGraphics.CGColorSpace)",
			"CoreImage.CIImage::.ctor(UIKit.UIImage)",
			"CoreImage.CIImage::.ctor(UIKit.UIImage,Foundation.NSDictionary)",
			"CoreImage.CIImage::_GetAutoAdjustmentFilters(Foundation.NSDictionary)",
			"CoreImage.CIImage::Copy(Foundation.NSZone)",
			"CoreImage.CIImage::CreateByColorMatchingColorSpaceToWorkingSpace(CoreGraphics.CGColorSpace)",
			"CoreImage.CIImage::CreateByColorMatchingWorkingSpaceToColorSpace(CoreGraphics.CGColorSpace)",
			"CoreImage.CIImage::CreateByCompositingOverImage(CoreImage.CIImage)",
			"CoreImage.CIImage::CreateByFiltering(System.String,Foundation.NSDictionary)",
			"CoreImage.CIImage::CreateBySettingProperties(Foundation.NSDictionary)",
			"CoreImage.CIImage::EncodeTo(Foundation.NSCoder)",
			"CoreImage.CIImage::FromCGImage(CoreGraphics.CGImage)",
			"CoreImage.CIImage::FromCGImage(CoreGraphics.CGImage,CoreGraphics.CGColorSpace)",
			"CoreImage.CIImage::FromCGImage(CoreGraphics.CGImage,Foundation.NSDictionary)",
			"CoreImage.CIImage::FromCGImageSource(ImageIO.CGImageSource,System.UIntPtr,Foundation.NSDictionary)",
			"CoreImage.CIImage::FromData(Foundation.NSData)",
			"CoreImage.CIImage::FromData(Foundation.NSData,Foundation.NSDictionary)",
			"CoreImage.CIImage::FromData(Foundation.NSData,System.IntPtr,CoreGraphics.CGSize,System.Int32,CoreGraphics.CGColorSpace)",
			"CoreImage.CIImage::FromDepthData(AVFoundation.AVDepthData)",
			"CoreImage.CIImage::FromDepthData(AVFoundation.AVDepthData,Foundation.NSDictionary)",
			"CoreImage.CIImage::FromImageBuffer(CoreVideo.CVImageBuffer)",
			"CoreImage.CIImage::FromImageBuffer(CoreVideo.CVImageBuffer,Foundation.NSDictionary)",
			"CoreImage.CIImage::FromImageBuffer(CoreVideo.CVImageBuffer,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"CoreImage.CIImage::FromImageBuffer(CoreVideo.CVPixelBuffer)",
			"CoreImage.CIImage::FromImageBuffer(CoreVideo.CVPixelBuffer,Foundation.NSDictionary)",
			"CoreImage.CIImage::FromLayer(CoreGraphics.CGLayer)",
			"CoreImage.CIImage::FromLayer(CoreGraphics.CGLayer,Foundation.NSDictionary)",
			"CoreImage.CIImage::FromMetalTexture(Metal.IMTLTexture,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"CoreImage.CIImage::FromPortraitEffectsMatte(AVFoundation.AVPortraitEffectsMatte)",
			"CoreImage.CIImage::FromPortraitEffectsMatte(AVFoundation.AVPortraitEffectsMatte,Foundation.NSDictionary)",
			"CoreImage.CIImage::FromProvider(CoreImage.ICIImageProvider,System.UIntPtr,System.UIntPtr,System.Int32,CoreGraphics.CGColorSpace,Foundation.NSDictionary)",
			"CoreImage.CIImage::FromSemanticSegmentationMatte(AVFoundation.AVSemanticSegmentationMatte)",
			"CoreImage.CIImage::FromSemanticSegmentationMatte(AVFoundation.AVSemanticSegmentationMatte,Foundation.NSDictionary)",
			"CoreImage.CIImage::FromSurface(IOSurface.IOSurface)",
			"CoreImage.CIImage::FromSurface(IOSurface.IOSurface,Foundation.NSDictionary)",
			"CoreImage.CIImage::FromUrl(Foundation.NSUrl)",
			"CoreImage.CIImage::FromUrl(Foundation.NSUrl,Foundation.NSDictionary)",
			"CoreImage.CIImage::GetRegionOfInterest(CoreImage.CIImage,CoreGraphics.CGRect)",
			"CoreImage.CIImage::ImageWithColor(CoreImage.CIColor)",
			"CoreImage.CIImage::ImageWithTexture(System.UInt32,CoreGraphics.CGSize,System.Boolean,CoreGraphics.CGColorSpace)",
			"CoreImage.CIImageAccumulator::.ctor(CoreGraphics.CGRect,CoreImage.CIFormat,CoreGraphics.CGColorSpace)",
			"CoreImage.CIImageAccumulator::FromRectangle(CoreGraphics.CGRect,CoreImage.CIFormat,CoreGraphics.CGColorSpace)",
			"CoreImage.CIImageAccumulator::set_Image(CoreImage.CIImage)",
			"CoreImage.CIImageAccumulator::SetImageDirty(CoreImage.CIImage,CoreGraphics.CGRect)",
			"CoreImage.CIImageGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIImageProcessorKernel::Apply(CoreGraphics.CGRect,CoreImage.CIImage[],Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&)",
			"CoreImage.CIImageProcessorKernel::GetRegionOfInterest(System.Int32,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,CoreGraphics.CGRect)",
			"CoreImage.CIImageProcessorKernel::Process(CoreImage.ICIImageProcessorInput[],Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,CoreImage.ICIImageProcessorOutput,Foundation.NSError&)",
			"CoreImage.CIImageProviderWrapper::ProvideImageData(System.IntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,Foundation.NSObject)",
			"CoreImage.CIKaleidoscope::.ctor(Foundation.NSCoder)",
			"CoreImage.CIKaleidoscopeProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIKernel::FromFunction(System.String,Foundation.NSData,CoreImage.CIFormat,Foundation.NSError&)",
			"CoreImage.CIKernel::FromFunction(System.String,Foundation.NSData,Foundation.NSError&)",
			"CoreImage.CIKernel::GetKernelNamesFromMetalLibrary(Foundation.NSData)",
			"CoreImage.CIKeystoneCorrection::.ctor(Foundation.NSCoder)",
			"CoreImage.CIKeystoneCorrectionCombined::.ctor(Foundation.NSCoder)",
			"CoreImage.CIKeystoneCorrectionCombinedProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIKeystoneCorrectionHorizontal::.ctor(Foundation.NSCoder)",
			"CoreImage.CIKeystoneCorrectionHorizontalProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIKeystoneCorrectionVertical::.ctor(Foundation.NSCoder)",
			"CoreImage.CIKeystoneCorrectionVerticalProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIKMeans::.ctor(Foundation.NSCoder)",
			"CoreImage.CIKMeansProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIKMeansProtocolWrapper::set_Means(CoreImage.CIImage)",
			"CoreImage.CILabDeltaE::.ctor(Foundation.NSCoder)",
			"CoreImage.CILabDeltaEProtocolWrapper::set_Image2(CoreImage.CIImage)",
			"CoreImage.CILabDeltaEProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CILanczosScaleTransform::.ctor(Foundation.NSCoder)",
			"CoreImage.CILanczosScaleTransformProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CILenticularHaloGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CILenticularHaloGeneratorProtocolWrapper::set_Color(CoreImage.CIColor)",
			"CoreImage.CILightenBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CILightTunnel::.ctor(Foundation.NSCoder)",
			"CoreImage.CILightTunnelProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CILinearBlur::.ctor(Foundation.NSCoder)",
			"CoreImage.CILinearBurnBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CILinearDodgeBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CILinearGradient::.ctor(Foundation.NSCoder)",
			"CoreImage.CILinearGradientProtocolWrapper::set_Color0(CoreImage.CIColor)",
			"CoreImage.CILinearGradientProtocolWrapper::set_Color1(CoreImage.CIColor)",
			"CoreImage.CILinearLightBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CILinearToSRGBToneCurve::.ctor(Foundation.NSCoder)",
			"CoreImage.CILinearToSrgbToneCurveProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CILineOverlay::.ctor(Foundation.NSCoder)",
			"CoreImage.CILineOverlayProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CILineScreen::.ctor(Foundation.NSCoder)",
			"CoreImage.CILineScreenProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CILuminosityBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMaskedVariableBlur::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMaskedVariableBlurProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIMaskedVariableBlurProtocolWrapper::set_Mask(CoreImage.CIImage)",
			"CoreImage.CIMaskToAlpha::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMaskToAlphaProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIMaximumComponent::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMaximumComponentProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIMaximumCompositing::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMedianFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMedianProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIMeshGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMeshGeneratorProtocolWrapper::set_Color(CoreImage.CIColor)",
			"CoreImage.CIMinimumComponent::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMinimumComponentProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIMinimumCompositing::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMix::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMixProtocolWrapper::set_BackgroundImage(CoreImage.CIImage)",
			"CoreImage.CIMixProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIModTransition::.ctor(Foundation.NSCoder)",
			"CoreImage.CIModTransitionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIModTransitionProtocolWrapper::set_TargetImage(CoreImage.CIImage)",
			"CoreImage.CIMorphology::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMorphologyGradient::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMorphologyGradientProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIMorphologyMaximum::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMorphologyMaximumProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIMorphologyMinimum::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMorphologyMinimumProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIMorphologyRectangle::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMorphologyRectangleMaximum::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMorphologyRectangleMaximumProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIMorphologyRectangleMinimum::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMorphologyRectangleMinimumProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIMotionBlur::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMotionBlurProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIMultiplyBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIMultiplyCompositing::.ctor(Foundation.NSCoder)",
			"CoreImage.CINinePartStretched::.ctor(Foundation.NSCoder)",
			"CoreImage.CINinePartStretchedProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CINinePartTiled::.ctor(Foundation.NSCoder)",
			"CoreImage.CINinePartTiledProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CINoiseReduction::.ctor(Foundation.NSCoder)",
			"CoreImage.CINoiseReductionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIOpTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CIOpTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIOverlayBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPageCurlTransition::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPageCurlTransitionProtocolWrapper::set_BacksideImage(CoreImage.CIImage)",
			"CoreImage.CIPageCurlTransitionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPageCurlTransitionProtocolWrapper::set_ShadingImage(CoreImage.CIImage)",
			"CoreImage.CIPageCurlTransitionProtocolWrapper::set_TargetImage(CoreImage.CIImage)",
			"CoreImage.CIPageCurlWithShadowTransition::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPageCurlWithShadowTransitionProtocolWrapper::set_BacksideImage(CoreImage.CIImage)",
			"CoreImage.CIPageCurlWithShadowTransitionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPageCurlWithShadowTransitionProtocolWrapper::set_TargetImage(CoreImage.CIImage)",
			"CoreImage.CIPaletteCentroid::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPaletteCentroidProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPaletteCentroidProtocolWrapper::set_PaletteImage(CoreImage.CIImage)",
			"CoreImage.CIPalettize::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPalettizeProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPalettizeProtocolWrapper::set_PaletteImage(CoreImage.CIImage)",
			"CoreImage.CIParallelogramTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CIParallelogramTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPdf417BarcodeGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPdf417BarcodeGeneratorProtocolWrapper::set_Message(Foundation.NSData)",
			"CoreImage.CIPdf417CodeDescriptor::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPdf417CodeDescriptor::.ctor(Foundation.NSData,System.Boolean,System.IntPtr,System.IntPtr)",
			"CoreImage.CIPdf417CodeDescriptor::CreateDescriptor(Foundation.NSData,System.Boolean,System.IntPtr,System.IntPtr)",
			"CoreImage.CIPersonSegmentation::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPersonSegmentationProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPerspectiveCorrection::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPerspectiveCorrectionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPerspectiveRotate::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPerspectiveRotateProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPerspectiveTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPerspectiveTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPerspectiveTransform::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPerspectiveTransformProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPerspectiveTransformWithExtent::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPerspectiveTransformWithExtentProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPhotoEffect::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPhotoEffectChrome::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPhotoEffectFade::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPhotoEffectInstant::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPhotoEffectMono::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPhotoEffectNoir::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPhotoEffectProcess::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPhotoEffectProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPhotoEffectTonal::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPhotoEffectTransfer::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPinchDistortion::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPinchDistortionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPinLightBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPixellate::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPixellateProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIPlugIn::LoadNonExecutablePlugIn(Foundation.NSUrl)",
			"CoreImage.CIPlugIn::LoadPlugIn(Foundation.NSUrl,System.Boolean)",
			"CoreImage.CIPointillize::.ctor(Foundation.NSCoder)",
			"CoreImage.CIPointillizeProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIQRCodeDescriptor::.ctor(Foundation.NSCoder)",
			"CoreImage.CIQRCodeDescriptor::.ctor(Foundation.NSData,System.IntPtr,System.Byte,CoreImage.CIQRCodeErrorCorrectionLevel)",
			"CoreImage.CIQRCodeDescriptor::CreateDescriptor(Foundation.NSData,System.IntPtr,System.Byte,CoreImage.CIQRCodeErrorCorrectionLevel)",
			"CoreImage.CIQRCodeFeature::.ctor(Foundation.NSCoder)",
			"CoreImage.CIQRCodeFeature::Copy(Foundation.NSZone)",
			"CoreImage.CIQRCodeFeature::EncodeTo(Foundation.NSCoder)",
			"CoreImage.CIQRCodeGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIQRCodeGeneratorProtocolWrapper::set_Message(Foundation.NSData)",
			"CoreImage.CIRadialGradient::.ctor(Foundation.NSCoder)",
			"CoreImage.CIRadialGradientProtocolWrapper::set_Color0(CoreImage.CIColor)",
			"CoreImage.CIRadialGradientProtocolWrapper::set_Color1(CoreImage.CIColor)",
			"CoreImage.CIRandomGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIRawFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIRawFilter::Create(CoreVideo.CVPixelBuffer,Foundation.NSDictionary)",
			"CoreImage.CIRawFilter::Create(Foundation.NSData,System.String)",
			"CoreImage.CIRawFilter::Create(Foundation.NSUrl)",
			"CoreImage.CIRawFilter::set_LinearSpaceFilter(CoreImage.CIFilter)",
			"CoreImage.CIReductionFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIRenderDestination::.ctor(CoreVideo.CVPixelBuffer)",
			"CoreImage.CIRenderDestination::.ctor(IOSurface.IOSurface)",
			"CoreImage.CIRenderDestination::.ctor(Metal.IMTLTexture,Metal.IMTLCommandBuffer)",
			"CoreImage.CIRenderDestination::.ctor(System.UIntPtr,System.UIntPtr,Metal.MTLPixelFormat,Metal.IMTLCommandBuffer,System.Func`1<Metal.IMTLTexture>)",
			"CoreImage.CIRenderDestination::set_BlendKernel(CoreImage.CIBlendKernel)",
			"CoreImage.CIRenderDestination::set_ColorSpace(CoreGraphics.CGColorSpace)",
			"CoreImage.CIRippleTransition::.ctor(Foundation.NSCoder)",
			"CoreImage.CIRippleTransitionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIRippleTransitionProtocolWrapper::set_ShadingImage(CoreImage.CIImage)",
			"CoreImage.CIRippleTransitionProtocolWrapper::set_TargetImage(CoreImage.CIImage)",
			"CoreImage.CIRoundedRectangleGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIRoundedRectangleGeneratorProtocolWrapper::set_Color(CoreImage.CIColor)",
			"CoreImage.CIRowAverage::.ctor(Foundation.NSCoder)",
			"CoreImage.CIRowAverageProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CISaliencyMapFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CISaliencyMapProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CISampleNearest::.ctor(Foundation.NSCoder)",
			"CoreImage.CISampler::.ctor(CoreImage.CIImage)",
			"CoreImage.CISampler::.ctor(CoreImage.CIImage,Foundation.NSDictionary)",
			"CoreImage.CISampler::Copy(Foundation.NSZone)",
			"CoreImage.CISampler::FromImage(CoreImage.CIImage)",
			"CoreImage.CISampler::FromImage(CoreImage.CIImage,Foundation.NSDictionary)",
			"CoreImage.CISamplerOptions::ToDictionary()",
			"CoreImage.CISaturationBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIScreenBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIScreenFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CISepiaTone::.ctor(Foundation.NSCoder)",
			"CoreImage.CISepiaToneProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIShadedMaterial::.ctor(Foundation.NSCoder)",
			"CoreImage.CIShadedMaterialProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIShadedMaterialProtocolWrapper::set_ShadingImage(CoreImage.CIImage)",
			"CoreImage.CISharpenLuminance::.ctor(Foundation.NSCoder)",
			"CoreImage.CISharpenLuminanceProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CISixfoldReflectedTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CISixfoldReflectedTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CISixfoldRotatedTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CISixfoldRotatedTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CISmoothLinearGradient::.ctor(Foundation.NSCoder)",
			"CoreImage.CISmoothLinearGradientProtocolWrapper::set_Color0(CoreImage.CIColor)",
			"CoreImage.CISmoothLinearGradientProtocolWrapper::set_Color1(CoreImage.CIColor)",
			"CoreImage.CISoftLightBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CISourceAtopCompositing::.ctor(Foundation.NSCoder)",
			"CoreImage.CISourceInCompositing::.ctor(Foundation.NSCoder)",
			"CoreImage.CISourceOutCompositing::.ctor(Foundation.NSCoder)",
			"CoreImage.CISourceOverCompositing::.ctor(Foundation.NSCoder)",
			"CoreImage.CISpotColor::.ctor(Foundation.NSCoder)",
			"CoreImage.CISpotColorProtocolWrapper::set_CenterColor1(CoreImage.CIColor)",
			"CoreImage.CISpotColorProtocolWrapper::set_CenterColor2(CoreImage.CIColor)",
			"CoreImage.CISpotColorProtocolWrapper::set_CenterColor3(CoreImage.CIColor)",
			"CoreImage.CISpotColorProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CISpotColorProtocolWrapper::set_ReplacementColor1(CoreImage.CIColor)",
			"CoreImage.CISpotColorProtocolWrapper::set_ReplacementColor2(CoreImage.CIColor)",
			"CoreImage.CISpotColorProtocolWrapper::set_ReplacementColor3(CoreImage.CIColor)",
			"CoreImage.CISpotLight::.ctor(Foundation.NSCoder)",
			"CoreImage.CISpotLightProtocolWrapper::set_Color(CoreImage.CIColor)",
			"CoreImage.CISpotLightProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CISpotLightProtocolWrapper::set_LightPointsAt(CoreImage.CIVector)",
			"CoreImage.CISpotLightProtocolWrapper::set_LightPosition(CoreImage.CIVector)",
			"CoreImage.CISRGBToneCurveToLinear::.ctor(Foundation.NSCoder)",
			"CoreImage.CISrgbToneCurveToLinearProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIStarShineGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIStarShineGeneratorProtocolWrapper::set_Color(CoreImage.CIColor)",
			"CoreImage.CIStraightenFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIStraightenProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIStretchCrop::.ctor(Foundation.NSCoder)",
			"CoreImage.CIStretchCropProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIStripesGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIStripesGeneratorProtocolWrapper::set_Color0(CoreImage.CIColor)",
			"CoreImage.CIStripesGeneratorProtocolWrapper::set_Color1(CoreImage.CIColor)",
			"CoreImage.CISubtractBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CISunbeamsGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CISunbeamsGeneratorProtocolWrapper::set_Color(CoreImage.CIColor)",
			"CoreImage.CISwipeTransition::.ctor(Foundation.NSCoder)",
			"CoreImage.CISwipeTransitionProtocolWrapper::set_Color(CoreImage.CIColor)",
			"CoreImage.CISwipeTransitionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CISwipeTransitionProtocolWrapper::set_TargetImage(CoreImage.CIImage)",
			"CoreImage.CITemperatureAndTint::.ctor(Foundation.NSCoder)",
			"CoreImage.CITemperatureAndTintProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CITemperatureAndTintProtocolWrapper::set_Neutral(CoreImage.CIVector)",
			"CoreImage.CITemperatureAndTintProtocolWrapper::set_TargetNeutral(CoreImage.CIVector)",
			"CoreImage.CITextImageGenerator::.ctor(Foundation.NSCoder)",
			"CoreImage.CIThermal::.ctor(Foundation.NSCoder)",
			"CoreImage.CIThermalProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CITileFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CIToneCurve::.ctor(Foundation.NSCoder)",
			"CoreImage.CIToneCurveProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CITorusLensDistortion::.ctor(Foundation.NSCoder)",
			"CoreImage.CITorusLensDistortionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CITransitionFilter::.ctor(Foundation.NSCoder)",
			"CoreImage.CITransitionFilterProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CITransitionFilterProtocolWrapper::set_TargetImage(CoreImage.CIImage)",
			"CoreImage.CITriangleKaleidoscope::.ctor(Foundation.NSCoder)",
			"CoreImage.CITriangleKaleidoscopeProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CITriangleTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CITriangleTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CITwelvefoldReflectedTile::.ctor(Foundation.NSCoder)",
			"CoreImage.CITwelvefoldReflectedTileProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CITwirlDistortion::.ctor(Foundation.NSCoder)",
			"CoreImage.CITwirlDistortionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIUnsharpMask::.ctor(Foundation.NSCoder)",
			"CoreImage.CIUnsharpMaskProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIVector::.ctor(Foundation.NSCoder)",
			"CoreImage.CIVector::Copy(Foundation.NSZone)",
			"CoreImage.CIVector::EncodeTo(Foundation.NSCoder)",
			"CoreImage.CIVibrance::.ctor(Foundation.NSCoder)",
			"CoreImage.CIVibranceProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIVignette::.ctor(Foundation.NSCoder)",
			"CoreImage.CIVignetteEffect::.ctor(Foundation.NSCoder)",
			"CoreImage.CIVignetteEffectProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIVignetteProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIVividLightBlendMode::.ctor(Foundation.NSCoder)",
			"CoreImage.CIVortexDistortion::.ctor(Foundation.NSCoder)",
			"CoreImage.CIVortexDistortionProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIWarpKernel::ApplyWithExtent(CoreGraphics.CGRect,CoreImage.CIKernelRoiCallback,CoreImage.CIImage,Foundation.NSObject[])",
			"CoreImage.CIWhitePointAdjust::.ctor(Foundation.NSCoder)",
			"CoreImage.CIWhitePointAdjustProtocolWrapper::set_Color(CoreImage.CIColor)",
			"CoreImage.CIWhitePointAdjustProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIXRay::.ctor(Foundation.NSCoder)",
			"CoreImage.CIXRayProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreImage.CIZoomBlur::.ctor(Foundation.NSCoder)",
			"CoreImage.CIZoomBlurProtocolWrapper::set_InputImage(CoreImage.CIImage)",
			"CoreLocation.CLBeacon::.ctor(Foundation.NSCoder)",
			"CoreLocation.CLBeacon::Copy(Foundation.NSZone)",
			"CoreLocation.CLBeacon::EncodeTo(Foundation.NSCoder)",
			"CoreLocation.CLBeaconIdentityConstraint::.ctor(Foundation.NSCoder)",
			"CoreLocation.CLBeaconIdentityConstraint::.ctor(Foundation.NSUuid)",
			"CoreLocation.CLBeaconIdentityConstraint::.ctor(Foundation.NSUuid,System.UInt16)",
			"CoreLocation.CLBeaconIdentityConstraint::.ctor(Foundation.NSUuid,System.UInt16,System.UInt16)",
			"CoreLocation.CLBeaconIdentityConstraint::Copy(Foundation.NSZone)",
			"CoreLocation.CLBeaconIdentityConstraint::EncodeTo(Foundation.NSCoder)",
			"CoreLocation.CLBeaconRegion::.ctor(CoreLocation.CLBeaconIdentityConstraint,System.String)",
			"CoreLocation.CLBeaconRegion::.ctor(Foundation.NSCoder)",
			"CoreLocation.CLBeaconRegion::.ctor(Foundation.NSUuid,System.String)",
			"CoreLocation.CLBeaconRegion::.ctor(Foundation.NSUuid,System.UInt16,System.String)",
			"CoreLocation.CLBeaconRegion::.ctor(Foundation.NSUuid,System.UInt16,System.UInt16,System.String)",
			"CoreLocation.CLBeaconRegion::_Constructor(Foundation.NSUuid,System.String)",
			"CoreLocation.CLBeaconRegion::_Constructor(Foundation.NSUuid,System.UInt16,System.String)",
			"CoreLocation.CLBeaconRegion::_Constructor(Foundation.NSUuid,System.UInt16,System.UInt16,System.String)",
			"CoreLocation.CLBeaconRegion::GetPeripheralData(Foundation.NSNumber)",
			"CoreLocation.CLCircularRegion::.ctor(Foundation.NSCoder)",
			"CoreLocation.CLFloor::.ctor(Foundation.NSCoder)",
			"CoreLocation.CLFloor::Copy(Foundation.NSZone)",
			"CoreLocation.CLFloor::EncodeTo(Foundation.NSCoder)",
			"CoreLocation.CLGeocoder::GeocodeAddress(Foundation.NSDictionary,CoreLocation.CLGeocodeCompletionHandler)",
			"CoreLocation.CLGeocoder::GeocodeAddress(System.String,CoreLocation.CLRegion,CoreLocation.CLGeocodeCompletionHandler)",
			"CoreLocation.CLGeocoder::GeocodeAddress(System.String,CoreLocation.CLRegion,Foundation.NSLocale,CoreLocation.CLGeocodeCompletionHandler)",
			"CoreLocation.CLGeocoder::GeocodePostalAddress(Contacts.CNPostalAddress,CoreLocation.CLGeocodeCompletionHandler)",
			"CoreLocation.CLGeocoder::GeocodePostalAddress(Contacts.CNPostalAddress,Foundation.NSLocale,CoreLocation.CLGeocodeCompletionHandler)",
			"CoreLocation.CLGeocoder::ReverseGeocodeLocation(CoreLocation.CLLocation,CoreLocation.CLGeocodeCompletionHandler)",
			"CoreLocation.CLGeocoder::ReverseGeocodeLocation(CoreLocation.CLLocation,Foundation.NSLocale,CoreLocation.CLGeocodeCompletionHandler)",
			"CoreLocation.CLHeading::.ctor(Foundation.NSCoder)",
			"CoreLocation.CLHeading::Copy(Foundation.NSZone)",
			"CoreLocation.CLHeading::EncodeTo(Foundation.NSCoder)",
			"CoreLocation.CLLocation::.ctor(CoreLocation.CLLocationCoordinate2D,System.Double,System.Double,System.Double,Foundation.NSDate)",
			"CoreLocation.CLLocation::.ctor(CoreLocation.CLLocationCoordinate2D,System.Double,System.Double,System.Double,System.Double,System.Double,Foundation.NSDate)",
			"CoreLocation.CLLocation::.ctor(CoreLocation.CLLocationCoordinate2D,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Foundation.NSDate)",
			"CoreLocation.CLLocation::.ctor(CoreLocation.CLLocationCoordinate2D,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Foundation.NSDate,CoreLocation.CLLocationSourceInformation)",
			"CoreLocation.CLLocation::.ctor(Foundation.NSCoder)",
			"CoreLocation.CLLocation::Copy(Foundation.NSZone)",
			"CoreLocation.CLLocation::DistanceFrom(CoreLocation.CLLocation)",
			"CoreLocation.CLLocation::EncodeTo(Foundation.NSCoder)",
			"CoreLocation.CLLocationManager::RequestState(CoreLocation.CLRegion)",
			"CoreLocation.CLLocationManager::StartMonitoring(CoreLocation.CLRegion)",
			"CoreLocation.CLLocationManager::StartMonitoring(CoreLocation.CLRegion,System.Double)",
			"CoreLocation.CLLocationManager::StartRangingBeacons(CoreLocation.CLBeaconIdentityConstraint)",
			"CoreLocation.CLLocationManager::StartRangingBeacons(CoreLocation.CLBeaconRegion)",
			"CoreLocation.CLLocationManager::StopMonitoring(CoreLocation.CLRegion)",
			"CoreLocation.CLLocationManager::StopRangingBeacons(CoreLocation.CLBeaconIdentityConstraint)",
			"CoreLocation.CLLocationManager::StopRangingBeacons(CoreLocation.CLBeaconRegion)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::AuthorizationChanged(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLAuthorizationStatus)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::DeferredUpdatesFinished(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,Foundation.NSError)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::DidChangeAuthorization(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::DidDetermineState(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLRegionState,CoreLocation.CLRegion)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::DidFailRangingBeacons(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLBeaconIdentityConstraint,Foundation.NSError)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::DidRangeBeacons(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLBeacon[],CoreLocation.CLBeaconRegion)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::DidRangeBeaconsSatisfyingConstraint(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLBeacon[],CoreLocation.CLBeaconIdentityConstraint)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::DidStartMonitoringForRegion(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLRegion)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::DidVisit(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLVisit)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::Failed(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,Foundation.NSError)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::LocationsUpdated(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLLocation[])",
			"CoreLocation.CLLocationManagerDelegate_Extensions::LocationUpdatesPaused(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::LocationUpdatesResumed(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::MonitoringFailed(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLRegion,Foundation.NSError)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::RangingBeaconsDidFailForRegion(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLBeaconRegion,Foundation.NSError)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::RegionEntered(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLRegion)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::RegionLeft(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLRegion)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::ShouldDisplayHeadingCalibration(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::UpdatedHeading(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLHeading)",
			"CoreLocation.CLLocationManagerDelegate_Extensions::UpdatedLocation(CoreLocation.ICLLocationManagerDelegate,CoreLocation.CLLocationManager,CoreLocation.CLLocation,CoreLocation.CLLocation)",
			"CoreLocation.CLLocationPushServiceExtension_Extensions::ServiceExtensionWillTerminate(CoreLocation.ICLLocationPushServiceExtension)",
			"CoreLocation.CLLocationPushServiceExtensionWrapper::DidReceiveLocationPushPayload(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.Action)",
			"CoreLocation.CLLocationSourceInformation::.ctor(Foundation.NSCoder)",
			"CoreLocation.CLLocationSourceInformation::Copy(Foundation.NSZone)",
			"CoreLocation.CLLocationSourceInformation::EncodeTo(Foundation.NSCoder)",
			"CoreLocation.CLPlacemark::.ctor(CoreLocation.CLPlacemark)",
			"CoreLocation.CLPlacemark::.ctor(Foundation.NSCoder)",
			"CoreLocation.CLPlacemark::Copy(Foundation.NSZone)",
			"CoreLocation.CLPlacemark::EncodeTo(Foundation.NSCoder)",
			"CoreLocation.CLRegion::.ctor(Foundation.NSCoder)",
			"CoreLocation.CLRegion::Copy(Foundation.NSZone)",
			"CoreLocation.CLRegion::EncodeTo(Foundation.NSCoder)",
			"CoreLocation.CLVisit::.ctor(Foundation.NSCoder)",
			"CoreLocation.CLVisit::Copy(Foundation.NSZone)",
			"CoreLocation.CLVisit::EncodeTo(Foundation.NSCoder)",
			"CoreLocationUI.CLLocationButton::.ctor(Foundation.NSCoder)",
			"CoreLocationUI.CLLocationButton::EncodeTo(Foundation.NSCoder)",
			"CoreMedia.CMAttachmentBearer::GetAttachment(CoreMedia.ICMAttachmentBearer,System.String,CoreMedia.CMAttachmentMode&)",
			"CoreMedia.CMAttachmentBearer::GetAttachments(CoreMedia.ICMAttachmentBearer,CoreMedia.CMAttachmentMode)",
			"CoreMedia.CMAttachmentBearer::PropagateAttachments(CoreMedia.ICMAttachmentBearer,CoreMedia.ICMAttachmentBearer)",
			"CoreMedia.CMAttachmentBearer::RemoveAllAttachments(CoreMedia.ICMAttachmentBearer)",
			"CoreMedia.CMAttachmentBearer::RemoveAttachment(CoreMedia.ICMAttachmentBearer,System.String)",
			"CoreMedia.CMAttachmentBearer::SetAttachment(CoreMedia.ICMAttachmentBearer,System.String,ObjCRuntime.INativeObject,CoreMedia.CMAttachmentMode)",
			"CoreMedia.CMAttachmentBearer::SetAttachments(CoreMedia.ICMAttachmentBearer,Foundation.NSDictionary,CoreMedia.CMAttachmentMode)",
			"CoreMedia.CMBlockBuffer::AppendBuffer(CoreMedia.CMBlockBuffer,System.UIntPtr,System.UIntPtr,CoreMedia.CMBlockBufferFlags)",
			"CoreMedia.CMBlockBuffer::AppendMemoryBlock(System.IntPtr,System.UIntPtr,CoreMedia.CMCustomBlockAllocator,System.UIntPtr,System.UIntPtr,CoreMedia.CMBlockBufferFlags)",
			"CoreMedia.CMBlockBuffer::CreateContiguous(CoreMedia.CMBlockBuffer,CoreMedia.CMCustomBlockAllocator,System.UIntPtr,System.UIntPtr,CoreMedia.CMBlockBufferFlags,CoreMedia.CMBlockBufferError&)",
			"CoreMedia.CMBlockBuffer::FromBuffer(CoreMedia.CMBlockBuffer,System.UIntPtr,System.UIntPtr,CoreMedia.CMBlockBufferFlags,CoreMedia.CMBlockBufferError&)",
			"CoreMedia.CMBlockBuffer::FromMemoryBlock(System.IntPtr,System.UIntPtr,CoreMedia.CMCustomBlockAllocator,System.UIntPtr,System.UIntPtr,CoreMedia.CMBlockBufferFlags,CoreMedia.CMBlockBufferError&)",
			"CoreMedia.CMBufferQueue::FromCallbacks(System.Int32,CoreMedia.CMBufferGetTime,CoreMedia.CMBufferGetTime,CoreMedia.CMBufferGetTime,CoreMedia.CMBufferGetBool,CoreMedia.CMBufferCompare,Foundation.NSString,CoreMedia.CMBufferGetSize)",
			"CoreMedia.CMClock::MightDrift(CoreMedia.CMClock)",
			"CoreMedia.CMClockOrTimebase::ConvertTime(CoreMedia.CMTime,CoreMedia.CMClockOrTimebase,CoreMedia.CMClockOrTimebase)",
			"CoreMedia.CMClockOrTimebase::GetRelativeRate(CoreMedia.CMClockOrTimebase,CoreMedia.CMClockOrTimebase)",
			"CoreMedia.CMClockOrTimebase::GetRelativeRateAndAnchorTime(CoreMedia.CMClockOrTimebase,CoreMedia.CMClockOrTimebase,System.Double&,CoreMedia.CMTime&,CoreMedia.CMTime&)",
			"CoreMedia.CMClockOrTimebase::MightDrift(CoreMedia.CMClockOrTimebase,CoreMedia.CMClockOrTimebase)",
			"CoreMedia.CMClockOrTimebase::set_SourceClock(CoreMedia.CMClock)",
			"CoreMedia.CMClockOrTimebase::set_SourceTimebase(CoreMedia.CMTimebase)",
			"CoreMedia.CMSampleBuffer::CreateForImageBuffer(CoreVideo.CVImageBuffer,System.Boolean,CoreMedia.CMVideoFormatDescription,CoreMedia.CMSampleTimingInfo,CoreMedia.CMSampleBufferError&)",
			"CoreMedia.CMSampleBuffer::CreateReady(CoreMedia.CMBlockBuffer,CoreMedia.CMFormatDescription,System.Int32,CoreMedia.CMSampleTimingInfo[],System.UIntPtr[],CoreMedia.CMSampleBufferError&)",
			"CoreMedia.CMSampleBuffer::CreateReadyWithImageBuffer(CoreVideo.CVImageBuffer,CoreMedia.CMFormatDescription,CoreMedia.CMSampleTimingInfo&,CoreMedia.CMSampleBufferError&)",
			"CoreMedia.CMSampleBuffer::CreateReadyWithPacketDescriptions(CoreMedia.CMBlockBuffer,CoreMedia.CMFormatDescription,System.Int32,CoreMedia.CMTime,AudioToolbox.AudioStreamPacketDescription[],CoreMedia.CMSampleBufferError&)",
			"CoreMedia.CMSampleBuffer::CreateWithNewTiming(CoreMedia.CMSampleBuffer,CoreMedia.CMSampleTimingInfo[],System.IntPtr&)",
			"CoreMedia.CMSampleBuffer::CreateWithPacketDescriptions(CoreMedia.CMBlockBuffer,CoreMedia.CMFormatDescription,System.Int32,CoreMedia.CMTime,AudioToolbox.AudioStreamPacketDescription[],CoreMedia.CMSampleBufferError&)",
			"CoreMedia.CMSampleBuffer::SetDataBuffer(CoreMedia.CMBlockBuffer)",
			"CoreMedia.CMSampleBuffer::TrackDataReadiness(CoreMedia.CMSampleBuffer)",
			"CoreMedia.CMTime::FromDictionary(Foundation.NSDictionary)",
			"CoreMedia.CMTimebase::AddTimer(Foundation.NSTimer,Foundation.NSRunLoop)",
			"CoreMedia.CMTimebase::Create(CoreFoundation.CFAllocator,CoreMedia.CMClock)",
			"CoreMedia.CMTimebase::Create(CoreFoundation.CFAllocator,CoreMedia.CMTimebase)",
			"CoreMedia.CMTimebase::Create(CoreMedia.CMClock)",
			"CoreMedia.CMTimebase::Create(CoreMedia.CMTimebase)",
			"CoreMedia.CMTimebase::RemoveTimer(Foundation.NSTimer)",
			"CoreMedia.CMTimebase::SetMasterClock(CoreMedia.CMClock)",
			"CoreMedia.CMTimebase::SetMasterTimebase(CoreMedia.CMTimebase)",
			"CoreMedia.CMTimebase::SetTimerNextFireTime(Foundation.NSTimer,CoreMedia.CMTime)",
			"CoreMedia.CMTimebase::SetTimerToFireImmediately(Foundation.NSTimer)",
			"CoreMedia.CMTimeMapping::CreateFromDictionary(Foundation.NSDictionary)",
			"CoreMedia.CMVideoFormatDescription::CreateForImageBuffer(CoreVideo.CVImageBuffer,CoreMedia.CMFormatDescriptionError&)",
			"CoreMedia.CMVideoFormatDescription::FromHevcParameterSets(System.Collections.Generic.List`1<System.Byte[]>,System.Int32,Foundation.NSDictionary,CoreMedia.CMFormatDescriptionError&)",
			"CoreMedia.CMVideoFormatDescription::VideoMatchesImageBuffer(CoreVideo.CVImageBuffer)",
			"CoreMidi.MidiCIDeviceInfo::.ctor(CoreMidi.MidiEndpoint,Foundation.NSData,Foundation.NSData,Foundation.NSData,Foundation.NSData)",
			"CoreMidi.MidiCIDeviceInfo::.ctor(Foundation.NSCoder)",
			"CoreMidi.MidiCIDeviceInfo::.ctor(System.Int32,Foundation.NSData,Foundation.NSData,Foundation.NSData,Foundation.NSData)",
			"CoreMidi.MidiCIDeviceInfo::EncodeTo(Foundation.NSCoder)",
			"CoreMidi.MidiCIDiscoveredNode::.ctor(Foundation.NSCoder)",
			"CoreMidi.MidiCIDiscoveredNode::EncodeTo(Foundation.NSCoder)",
			"CoreMidi.MidiCIProfile::.ctor(Foundation.NSCoder)",
			"CoreMidi.MidiCIProfile::.ctor(Foundation.NSData)",
			"CoreMidi.MidiCIProfile::.ctor(Foundation.NSData,System.String)",
			"CoreMidi.MidiCIProfile::EncodeTo(Foundation.NSCoder)",
			"CoreMidi.MidiCIProfileResponderDelegate_Extensions::HandleData(CoreMidi.IMidiCIProfileResponderDelegate,CoreMidi.MidiCIProfile,System.Byte,Foundation.NSData)",
			"CoreMidi.MidiCIProfileResponderDelegate_Extensions::WillSetProfile(CoreMidi.IMidiCIProfileResponderDelegate,CoreMidi.MidiCIProfile,System.Byte,System.Boolean)",
			"CoreMidi.MidiCIProfileResponderDelegateWrapper::ConnectInitiator(Foundation.NSNumber,CoreMidi.MidiCIDeviceInfo)",
			"CoreMidi.MidiCIProfileResponderDelegateWrapper::InitiatorDisconnected(Foundation.NSNumber)",
			"CoreMidi.MidiCIProfileState::.ctor(Foundation.NSCoder)",
			"CoreMidi.MidiCIProfileState::EncodeTo(Foundation.NSCoder)",
			"CoreMidi.MidiCIResponder::.ctor(CoreMidi.MidiCIDeviceInfo,CoreMidi.IMidiCIProfileResponderDelegate,CoreMidi.MidiCIProfileState[],System.Boolean)",
			"CoreMidi.MidiCIResponder::NotifyProfile(CoreMidi.MidiCIProfile,System.Byte,System.Boolean)",
			"CoreMidi.MidiCIResponder::SendProfile(CoreMidi.MidiCIProfile,System.Byte,Foundation.NSData)",
			"CoreMidi.MidiCISession::.ctor(CoreMidi.MidiCIDiscoveredNode,System.Action,CoreMidi.MidiCISessionDisconnectHandler)",
			"CoreMidi.MidiCISession::DisableProfile(CoreMidi.MidiCIProfile,System.Byte,Foundation.NSError&)",
			"CoreMidi.MidiCISession::EnableProfile(CoreMidi.MidiCIProfile,System.Byte,Foundation.NSError&)",
			"CoreMidi.MidiCISession::SendProfile(CoreMidi.MidiCIProfile,System.Byte,Foundation.NSData)",
			"CoreMidi.MidiDevice::Add(System.String,System.Boolean,System.UIntPtr,System.UIntPtr,CoreMidi.MidiEntity)",
			"CoreMidi.MidiDeviceList::Add(CoreMidi.MidiDevice)",
			"CoreMidi.MidiNetworkConnection::FromHost(CoreMidi.MidiNetworkHost)",
			"CoreMidi.MidiNetworkHost::Create(System.String,Foundation.NSNetService)",
			"CoreMidi.MidiNetworkHost::HasSameAddressAs(CoreMidi.MidiNetworkHost)",
			"CoreMidi.MidiNetworkSession::AddConnection(CoreMidi.MidiNetworkConnection)",
			"CoreMidi.MidiNetworkSession::AddContact(CoreMidi.MidiNetworkHost)",
			"CoreMidi.MidiNetworkSession::RemoveConnection(CoreMidi.MidiNetworkConnection)",
			"CoreMidi.MidiNetworkSession::RemoveContact(CoreMidi.MidiNetworkHost)",
			"CoreMidi.MidiObject::SetData(System.IntPtr,Foundation.NSData)",
			"CoreMidi.MidiObject::SetDictionary(System.IntPtr,Foundation.NSDictionary)",
			"CoreML.MLArrayBatchProvider::.ctor(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSArray>,Foundation.NSError&)",
			"CoreML.MLCustomLayer_Extensions::Encode(CoreML.IMLCustomLayer,Metal.IMTLCommandBuffer,Metal.IMTLTexture[],Metal.IMTLTexture[],Foundation.NSError&)",
			"CoreML.MLCustomModel_Extensions::GetPredictions(CoreML.IMLCustomModel,CoreML.IMLBatchProvider,CoreML.MLPredictionOptions,Foundation.NSError&)",
			"CoreML.MLCustomModelWrapper::GetPrediction(CoreML.IMLFeatureProvider,CoreML.MLPredictionOptions,Foundation.NSError&)",
			"CoreML.MLDictionaryConstraint::.ctor(Foundation.NSCoder)",
			"CoreML.MLDictionaryConstraint::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLDictionaryFeatureProvider::.ctor(Foundation.NSCoder)",
			"CoreML.MLDictionaryFeatureProvider::.ctor(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&)",
			"CoreML.MLDictionaryFeatureProvider::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLFeatureDescription::.ctor(Foundation.NSCoder)",
			"CoreML.MLFeatureDescription::Copy(Foundation.NSZone)",
			"CoreML.MLFeatureDescription::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLFeatureDescription::IsAllowed(CoreML.MLFeatureValue)",
			"CoreML.MLFeatureValue::.ctor(Foundation.NSCoder)",
			"CoreML.MLFeatureValue::Copy(Foundation.NSZone)",
			"CoreML.MLFeatureValue::Create(CoreGraphics.CGImage,CoreML.MLImageConstraint,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreML.MLFeatureValue::Create(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,CoreML.MLImageConstraint,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreML.MLFeatureValue::Create(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,System.IntPtr,System.IntPtr,CoreVideo.CVPixelFormatType,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreML.MLFeatureValue::Create(CoreGraphics.CGImage,System.IntPtr,System.IntPtr,CoreVideo.CVPixelFormatType,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreML.MLFeatureValue::Create(CoreML.MLMultiArray)",
			"CoreML.MLFeatureValue::Create(CoreML.MLSequence)",
			"CoreML.MLFeatureValue::Create(CoreVideo.CVPixelBuffer)",
			"CoreML.MLFeatureValue::Create(Foundation.NSDictionary`2<Foundation.NSObject,Foundation.NSNumber>,Foundation.NSError&)",
			"CoreML.MLFeatureValue::Create(Foundation.NSUrl,CoreML.MLImageConstraint,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreML.MLFeatureValue::Create(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,CoreML.MLImageConstraint,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreML.MLFeatureValue::Create(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,System.IntPtr,System.IntPtr,CoreVideo.CVPixelFormatType,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreML.MLFeatureValue::Create(Foundation.NSUrl,System.IntPtr,System.IntPtr,CoreVideo.CVPixelFormatType,Foundation.NSDictionary,Foundation.NSError&)",
			"CoreML.MLFeatureValue::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLFeatureValue::IsEqual(CoreML.MLFeatureValue)",
			"CoreML.MLImageConstraint::.ctor(Foundation.NSCoder)",
			"CoreML.MLImageConstraint::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLImageSize::.ctor(Foundation.NSCoder)",
			"CoreML.MLImageSize::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLImageSizeConstraint::.ctor(Foundation.NSCoder)",
			"CoreML.MLImageSizeConstraint::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLKey::.ctor(Foundation.NSCoder)",
			"CoreML.MLKey::Copy(Foundation.NSZone)",
			"CoreML.MLKey::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLMetricKey::.ctor(Foundation.NSCoder)",
			"CoreML.MLModel::CompileModel(Foundation.NSUrl,Foundation.NSError&)",
			"CoreML.MLModel::Create(Foundation.NSUrl,CoreML.MLModelConfiguration,Foundation.NSError&)",
			"CoreML.MLModel::Create(Foundation.NSUrl,Foundation.NSError&)",
			"CoreML.MLModel::GetParameterValue(CoreML.MLParameterKey,Foundation.NSError&)",
			"CoreML.MLModel::GetPrediction(CoreML.IMLFeatureProvider,CoreML.MLPredictionOptions,Foundation.NSError&)",
			"CoreML.MLModel::GetPrediction(CoreML.IMLFeatureProvider,Foundation.NSError&)",
			"CoreML.MLModel::GetPredictions(CoreML.IMLBatchProvider,CoreML.MLPredictionOptions,Foundation.NSError&)",
			"CoreML.MLModel::GetPredictions(CoreML.IMLBatchProvider,Foundation.NSError&)",
			"CoreML.MLModel::LoadContents(Foundation.NSUrl,CoreML.MLModelConfiguration,System.Action`2<CoreML.MLModel,Foundation.NSError>)",
			"CoreML.MLModelCollectionEntry::IsEqual(CoreML.MLModelCollectionEntry)",
			"CoreML.MLModelConfiguration::.ctor(Foundation.NSCoder)",
			"CoreML.MLModelConfiguration::Copy(Foundation.NSZone)",
			"CoreML.MLModelConfiguration::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLModelDescription::.ctor(Foundation.NSCoder)",
			"CoreML.MLModelDescription::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLMultiArray::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSNumber[])",
			"CoreML.MLMultiArray::.ctor(Foundation.NSCoder)",
			"CoreML.MLMultiArray::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLMultiArray::SetObject(Foundation.NSNumber,Foundation.NSNumber[])",
			"CoreML.MLMultiArray::SetObject(Foundation.NSNumber,System.IntPtr)",
			"CoreML.MLMultiArray::SetObjectInternal(Foundation.NSNumber,System.IntPtr)",
			"CoreML.MLMultiArrayConstraint::.ctor(Foundation.NSCoder)",
			"CoreML.MLMultiArrayConstraint::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLMultiArrayShapeConstraint::.ctor(Foundation.NSCoder)",
			"CoreML.MLMultiArrayShapeConstraint::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLNumericConstraint::.ctor(Foundation.NSCoder)",
			"CoreML.MLNumericConstraint::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLParameterDescription::.ctor(Foundation.NSCoder)",
			"CoreML.MLParameterDescription::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLParameterKey::.ctor(Foundation.NSCoder)",
			"CoreML.MLPredictionOptions::set_OutputBackings(Foundation.NSDictionary)",
			"CoreML.MLSequence::.ctor(Foundation.NSCoder)",
			"CoreML.MLSequence::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLSequenceConstraint::.ctor(Foundation.NSCoder)",
			"CoreML.MLSequenceConstraint::Copy(Foundation.NSZone)",
			"CoreML.MLSequenceConstraint::EncodeTo(Foundation.NSCoder)",
			"CoreML.MLUpdateTask::Create(Foundation.NSUrl,CoreML.IMLBatchProvider,CoreML.MLModelConfiguration,CoreML.MLUpdateProgressHandlers,Foundation.NSError&)",
			"CoreML.MLUpdateTask::Create(Foundation.NSUrl,CoreML.IMLBatchProvider,CoreML.MLModelConfiguration,System.Action`1<CoreML.MLUpdateContext>,Foundation.NSError&)",
			"CoreML.MLUpdateTask::Create(Foundation.NSUrl,CoreML.IMLBatchProvider,CoreML.MLUpdateProgressHandlers,Foundation.NSError&)",
			"CoreML.MLUpdateTask::Create(Foundation.NSUrl,CoreML.IMLBatchProvider,System.Action`1<CoreML.MLUpdateContext>,Foundation.NSError&)",
			"CoreML.MLUpdateTask::Resume(Foundation.NSDictionary`2<CoreML.MLParameterKey,Foundation.NSObject>)",
			"CoreML.MLWritableWrapper::Write(Foundation.NSUrl,Foundation.NSError&)",
			"CoreMotion.CMAbsoluteAltitudeData::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMAccelerometerData::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMAccelerometerData::EncodeTo(Foundation.NSCoder)",
			"CoreMotion.CMAltimeter::StartAbsoluteAltitudeUpdates(Foundation.NSOperationQueue,System.Action`2<CoreMotion.CMAbsoluteAltitudeData,Foundation.NSError>)",
			"CoreMotion.CMAltimeter::StartRelativeAltitudeUpdates(Foundation.NSOperationQueue,System.Action`2<CoreMotion.CMAltitudeData,Foundation.NSError>)",
			"CoreMotion.CMAltitudeData::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMAmbientPressureData::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMAttitude::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMAttitude::Copy(Foundation.NSZone)",
			"CoreMotion.CMAttitude::EncodeTo(Foundation.NSCoder)",
			"CoreMotion.CMAttitude::MultiplyByInverseOfAttitude(CoreMotion.CMAttitude)",
			"CoreMotion.CMDeviceMotion::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMDeviceMotion::EncodeTo(Foundation.NSCoder)",
			"CoreMotion.CMDyskineticSymptomResult::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMDyskineticSymptomResult::Copy(Foundation.NSZone)",
			"CoreMotion.CMDyskineticSymptomResult::EncodeTo(Foundation.NSCoder)",
			"CoreMotion.CMGyroData::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMGyroData::EncodeTo(Foundation.NSCoder)",
			"CoreMotion.CMHeadphoneMotionManager::StartDeviceMotionUpdates(Foundation.NSOperationQueue,CoreMotion.CMHeadphoneDeviceMotionHandler)",
			"CoreMotion.CMHeadphoneMotionManagerDelegate_Extensions::DidConnect(CoreMotion.ICMHeadphoneMotionManagerDelegate,CoreMotion.CMHeadphoneMotionManager)",
			"CoreMotion.CMHeadphoneMotionManagerDelegate_Extensions::DidDisconnect(CoreMotion.ICMHeadphoneMotionManagerDelegate,CoreMotion.CMHeadphoneMotionManager)",
			"CoreMotion.CMLogItem::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMLogItem::Copy(Foundation.NSZone)",
			"CoreMotion.CMLogItem::EncodeTo(Foundation.NSCoder)",
			"CoreMotion.CMMagnetometerData::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMMagnetometerData::EncodeTo(Foundation.NSCoder)",
			"CoreMotion.CMMotionActivity::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMMotionActivity::Copy(Foundation.NSZone)",
			"CoreMotion.CMMotionActivity::EncodeTo(Foundation.NSCoder)",
			"CoreMotion.CMMotionActivityManager::QueryActivity(Foundation.NSDate,Foundation.NSDate,Foundation.NSOperationQueue,CoreMotion.CMMotionActivityQueryHandler)",
			"CoreMotion.CMMotionActivityManager::StartActivityUpdates(Foundation.NSOperationQueue,CoreMotion.CMMotionActivityHandler)",
			"CoreMotion.CMMotionManager::StartAccelerometerUpdates(Foundation.NSOperationQueue,CoreMotion.CMAccelerometerHandler)",
			"CoreMotion.CMMotionManager::StartDeviceMotionUpdates(CoreMotion.CMAttitudeReferenceFrame,Foundation.NSOperationQueue,CoreMotion.CMDeviceMotionHandler)",
			"CoreMotion.CMMotionManager::StartDeviceMotionUpdates(Foundation.NSOperationQueue,CoreMotion.CMDeviceMotionHandler)",
			"CoreMotion.CMMotionManager::StartGyroUpdates(Foundation.NSOperationQueue,CoreMotion.CMGyroHandler)",
			"CoreMotion.CMMotionManager::StartMagnetometerUpdates(Foundation.NSOperationQueue,CoreMotion.CMMagnetometerHandler)",
			"CoreMotion.CMPedometer::QueryPedometerData(Foundation.NSDate,Foundation.NSDate,System.Action`2<CoreMotion.CMPedometerData,Foundation.NSError>)",
			"CoreMotion.CMPedometer::StartPedometerUpdates(Foundation.NSDate,System.Action`2<CoreMotion.CMPedometerData,Foundation.NSError>)",
			"CoreMotion.CMPedometerData::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMPedometerData::Copy(Foundation.NSZone)",
			"CoreMotion.CMPedometerData::EncodeTo(Foundation.NSCoder)",
			"CoreMotion.CMPedometerEvent::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMPedometerEvent::Copy(Foundation.NSZone)",
			"CoreMotion.CMPedometerEvent::EncodeTo(Foundation.NSCoder)",
			"CoreMotion.CMRecordedAccelerometerData::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMRecordedPressureData::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMRecordedRotationRateData::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMRotationRateData::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMSensorRecorder::GetAccelerometerData(Foundation.NSDate,Foundation.NSDate)",
			"CoreMotion.CMStepCounter::QueryStepCount(Foundation.NSDate,Foundation.NSDate,Foundation.NSOperationQueue,CoreMotion.CMStepQueryHandler)",
			"CoreMotion.CMStepCounter::StartStepCountingUpdates(Foundation.NSOperationQueue,System.IntPtr,CoreMotion.CMStepUpdateHandler)",
			"CoreMotion.CMTremorResult::.ctor(Foundation.NSCoder)",
			"CoreMotion.CMTremorResult::Copy(Foundation.NSZone)",
			"CoreMotion.CMTremorResult::EncodeTo(Foundation.NSCoder)",
			"CoreNFC.NFCFeliCaTagWrapper::Copy(Foundation.NSZone)",
			"CoreNFC.NFCFeliCaTagWrapper::EncodeTo(Foundation.NSCoder)",
			"CoreNFC.NFCFeliCaTagWrapper::Polling(Foundation.NSData,CoreNFC.NFCFeliCaPollingRequestCode,CoreNFC.NFCFeliCaPollingTimeSlot,CoreNFC.NFCFeliCaPollingCompletionHandler)",
			"CoreNFC.NFCFeliCaTagWrapper::Send(Foundation.NSData,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"CoreNFC.NFCFeliCaTagWrapper::WriteNdef(CoreNFC.NFCNdefMessage,System.Action`1<Foundation.NSError>)",
			"CoreNFC.NFCIso15693CustomCommandConfiguration::.ctor(System.UIntPtr,System.UIntPtr,Foundation.NSData)",
			"CoreNFC.NFCIso15693CustomCommandConfiguration::.ctor(System.UIntPtr,System.UIntPtr,Foundation.NSData,System.UIntPtr,System.Double)",
			"CoreNFC.NFCIso15693CustomCommandConfiguration::set_RequestParameters(Foundation.NSData)",
			"CoreNFC.NFCIso15693ReaderSession::.ctor(CoreNFC.INFCReaderSessionDelegate,CoreFoundation.DispatchQueue)",
			"CoreNFC.NFCIso15693TagWrapper::Authenticate(CoreNFC.NFCIso15693RequestFlag,System.IntPtr,Foundation.NSData,CoreNFC.NFCIso15693TagResponseCallback)",
			"CoreNFC.NFCIso15693TagWrapper::Challenge(CoreNFC.NFCIso15693RequestFlag,System.IntPtr,Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"CoreNFC.NFCIso15693TagWrapper::Copy(Foundation.NSZone)",
			"CoreNFC.NFCIso15693TagWrapper::CustomCommand(CoreNFC.NFCIso15693RequestFlag,System.IntPtr,Foundation.NSData,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"CoreNFC.NFCIso15693TagWrapper::EncodeTo(Foundation.NSCoder)",
			"CoreNFC.NFCIso15693TagWrapper::ExtendedWriteSingleBlock(CoreNFC.NFCIso15693RequestFlag,System.IntPtr,Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"CoreNFC.NFCIso15693TagWrapper::KeyUpdate(CoreNFC.NFCIso15693RequestFlag,System.IntPtr,Foundation.NSData,CoreNFC.NFCIso15693TagResponseCallback)",
			"CoreNFC.NFCIso15693TagWrapper::ReadMultipleBlocks(CoreNFC.NFCIso15693ReadMultipleBlocksConfiguration,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"CoreNFC.NFCIso15693TagWrapper::SendCustomCommand(CoreNFC.NFCIso15693CustomCommandConfiguration,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"CoreNFC.NFCIso15693TagWrapper::SendRequest(System.IntPtr,System.IntPtr,Foundation.NSData,CoreNFC.NFCIso15693TagResponseCallback)",
			"CoreNFC.NFCIso15693TagWrapper::WriteNdef(CoreNFC.NFCNdefMessage,System.Action`1<Foundation.NSError>)",
			"CoreNFC.NFCIso15693TagWrapper::WriteSingleBlock(CoreNFC.NFCIso15693RequestFlag,System.Byte,Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"CoreNFC.NFCIso7816Apdu::.ctor(Foundation.NSData)",
			"CoreNFC.NFCIso7816Apdu::.ctor(System.Byte,System.Byte,System.Byte,System.Byte,Foundation.NSData,System.IntPtr)",
			"CoreNFC.NFCIso7816Apdu::Copy(Foundation.NSZone)",
			"CoreNFC.NFCIso7816TagWrapper::Copy(Foundation.NSZone)",
			"CoreNFC.NFCIso7816TagWrapper::EncodeTo(Foundation.NSCoder)",
			"CoreNFC.NFCIso7816TagWrapper::SendCommand(CoreNFC.NFCIso7816Apdu,CoreNFC.NFCIso7816SendCompletionHandler)",
			"CoreNFC.NFCIso7816TagWrapper::WriteNdef(CoreNFC.NFCNdefMessage,System.Action`1<Foundation.NSError>)",
			"CoreNFC.NFCMiFareTagWrapper::Copy(Foundation.NSZone)",
			"CoreNFC.NFCMiFareTagWrapper::EncodeTo(Foundation.NSCoder)",
			"CoreNFC.NFCMiFareTagWrapper::SendMiFareCommand(Foundation.NSData,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"CoreNFC.NFCMiFareTagWrapper::SendMiFareIso7816Command(CoreNFC.NFCIso7816Apdu,CoreNFC.NFCIso7816SendCompletionHandler)",
			"CoreNFC.NFCMiFareTagWrapper::WriteNdef(CoreNFC.NFCNdefMessage,System.Action`1<Foundation.NSError>)",
			"CoreNFC.NFCNdefMessage::.ctor(Foundation.NSCoder)",
			"CoreNFC.NFCNdefMessage::Create(Foundation.NSData)",
			"CoreNFC.NFCNdefMessage::EncodeTo(Foundation.NSCoder)",
			"CoreNFC.NFCNdefPayload::.ctor(CoreNFC.NFCTypeNameFormat,Foundation.NSData,Foundation.NSData,Foundation.NSData)",
			"CoreNFC.NFCNdefPayload::.ctor(CoreNFC.NFCTypeNameFormat,Foundation.NSData,Foundation.NSData,Foundation.NSData,System.UIntPtr)",
			"CoreNFC.NFCNdefPayload::.ctor(Foundation.NSCoder)",
			"CoreNFC.NFCNdefPayload::CreateWellKnownTypePayload(Foundation.NSUrl)",
			"CoreNFC.NFCNdefPayload::CreateWellKnownTypePayload(System.String,Foundation.NSLocale)",
			"CoreNFC.NFCNdefPayload::EncodeTo(Foundation.NSCoder)",
			"CoreNFC.NFCNdefPayload::set_Identifier(Foundation.NSData)",
			"CoreNFC.NFCNdefPayload::set_Payload(Foundation.NSData)",
			"CoreNFC.NFCNdefPayload::set_Type(Foundation.NSData)",
			"CoreNFC.NFCNdefReaderSession::.ctor(CoreNFC.INFCNdefReaderSessionDelegate,CoreFoundation.DispatchQueue,System.Boolean)",
			"CoreNFC.NFCNdefReaderSession::ConnectToTag(CoreNFC.INFCNdefTag,System.Action`1<Foundation.NSError>)",
			"CoreNFC.NFCNdefReaderSessionDelegate_Extensions::DidBecomeActive(CoreNFC.INFCNdefReaderSessionDelegate,CoreNFC.NFCNdefReaderSession)",
			"CoreNFC.NFCNdefReaderSessionDelegate_Extensions::DidDetectTags(CoreNFC.INFCNdefReaderSessionDelegate,CoreNFC.NFCNdefReaderSession,CoreNFC.INFCNdefTag[])",
			"CoreNFC.NFCNdefReaderSessionDelegateWrapper::DidDetect(CoreNFC.NFCNdefReaderSession,CoreNFC.NFCNdefMessage[])",
			"CoreNFC.NFCNdefReaderSessionDelegateWrapper::DidInvalidate(CoreNFC.NFCNdefReaderSession,Foundation.NSError)",
			"CoreNFC.NFCNdefTagWrapper::Copy(Foundation.NSZone)",
			"CoreNFC.NFCNdefTagWrapper::EncodeTo(Foundation.NSCoder)",
			"CoreNFC.NFCNdefTagWrapper::WriteNdef(CoreNFC.NFCNdefMessage,System.Action`1<Foundation.NSError>)",
			"CoreNFC.NFCReaderSessionDelegate_Extensions::DidDetectTags(CoreNFC.INFCReaderSessionDelegate,CoreNFC.NFCReaderSession,CoreNFC.INFCTag[])",
			"CoreNFC.NFCReaderSessionDelegateWrapper::DidBecomeActive(CoreNFC.NFCReaderSession)",
			"CoreNFC.NFCReaderSessionDelegateWrapper::DidInvalidate(CoreNFC.NFCReaderSession,Foundation.NSError)",
			"CoreNFC.NFCTagCommandConfiguration::Copy(Foundation.NSZone)",
			"CoreNFC.NFCTagReaderSession::.ctor(CoreNFC.NFCPollingOption,CoreNFC.INFCTagReaderSessionDelegate,CoreFoundation.DispatchQueue)",
			"CoreNFC.NFCTagReaderSession::ConnectTo(CoreNFC.INFCTag,System.Action`1<Foundation.NSError>)",
			"CoreNFC.NFCTagReaderSessionDelegate_Extensions::DidBecomeActive(CoreNFC.INFCTagReaderSessionDelegate,CoreNFC.NFCTagReaderSession)",
			"CoreNFC.NFCTagReaderSessionDelegate_Extensions::DidDetectTags(CoreNFC.INFCTagReaderSessionDelegate,CoreNFC.NFCTagReaderSession,CoreNFC.INFCTag[])",
			"CoreNFC.NFCTagReaderSessionDelegateWrapper::DidInvalidate(CoreNFC.NFCTagReaderSession,Foundation.NSError)",
			"CoreNFC.NFCTagWrapper::Copy(Foundation.NSZone)",
			"CoreNFC.NFCTagWrapper::EncodeTo(Foundation.NSCoder)",
			"CoreNFC.NFCVasCommandConfiguration::.ctor(CoreNFC.NFCVasMode,System.String,Foundation.NSUrl)",
			"CoreNFC.NFCVasCommandConfiguration::Copy(Foundation.NSZone)",
			"CoreNFC.NFCVasCommandConfiguration::set_Url(Foundation.NSUrl)",
			"CoreNFC.NFCVasReaderSession::.ctor(CoreNFC.NFCVasCommandConfiguration[],CoreNFC.INFCVasReaderSessionDelegate,CoreFoundation.DispatchQueue)",
			"CoreNFC.NFCVasReaderSessionDelegate_Extensions::DidBecomeActive(CoreNFC.INFCVasReaderSessionDelegate,CoreNFC.NFCVasReaderSession)",
			"CoreNFC.NFCVasReaderSessionDelegateWrapper::DidInvalidate(CoreNFC.NFCVasReaderSession,Foundation.NSError)",
			"CoreNFC.NFCVasReaderSessionDelegateWrapper::DidReceiveVasResponses(CoreNFC.NFCVasReaderSession,CoreNFC.NFCVasResponse[])",
			"CoreNFC.NFCVasResponse::Copy(Foundation.NSZone)",
			"CoreNFC.NSUserActivity_CoreNFC::GetNdefMessagePayload(Foundation.NSUserActivity)",
			"CoreServices.FSEventStream::.ctor(CoreServices.FSEventStreamCreateOptions)",
			"CoreServices.FSEventStream::EventsCallback(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)",
			"CoreServices.FSEventStream::ScheduleWithRunLoop(CoreFoundation.CFRunLoop,Foundation.NSString)",
			"CoreServices.FSEventStream::SetDispatchQueue(CoreFoundation.DispatchQueue)",
			"CoreServices.FSEventStream::UnscheduleFromRunLoop(CoreFoundation.CFRunLoop,Foundation.NSString)",
			"CoreServices.LaunchServices::CanUrlAcceptUrl(Foundation.NSUrl,Foundation.NSUrl,CoreServices.LSRoles,CoreServices.LSAcceptanceFlags,CoreServices.LSResult&)",
			"CoreServices.LaunchServices::GetAllHandlersForUrlScheme(System.String)",
			"CoreServices.LaunchServices::GetAllRoleHandlersForContentType(System.String,CoreServices.LSRoles)",
			"CoreServices.LaunchServices::GetApplicationUrlsForBundleIdentifier(System.String)",
			"CoreServices.LaunchServices::GetApplicationUrlsForUrl(Foundation.NSUrl,CoreServices.LSRoles)",
			"CoreServices.LaunchServices::GetDefaultApplicationUrlForContentType(System.String,CoreServices.LSRoles)",
			"CoreServices.LaunchServices::GetDefaultApplicationUrlForUrl(Foundation.NSUrl,CoreServices.LSRoles)",
			"CoreServices.LaunchServices::GetDefaultHandlerForUrlScheme(System.String)",
			"CoreServices.LaunchServices::GetDefaultRoleHandlerForContentType(System.String,CoreServices.LSRoles)",
			"CoreServices.LaunchServices::Open(Foundation.NSUrl)",
			"CoreServices.LaunchServices::Open(Foundation.NSUrl,Foundation.NSUrl&)",
			"CoreServices.LaunchServices::Register(Foundation.NSUrl,System.Boolean)",
			"CoreServices.LaunchServices::SetDefaultHandlerForUrlScheme(System.String,System.String)",
			"CoreServices.LaunchServices::SetDefaultRoleHandlerForContentType(System.String,System.String,CoreServices.LSRoles)",
			"CoreSpotlight.CSCustomAttributeKey::.ctor(Foundation.NSCoder)",
			"CoreSpotlight.CSCustomAttributeKey::Copy(Foundation.NSZone)",
			"CoreSpotlight.CSCustomAttributeKey::EncodeTo(Foundation.NSCoder)",
			"CoreSpotlight.CSImportExtension::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"CoreSpotlight.CSImportExtension::Update(CoreSpotlight.CSSearchableItemAttributeSet,Foundation.NSUrl,Foundation.NSError&)",
			"CoreSpotlight.CSIndexExtensionRequestHandler::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"CoreSpotlight.CSIndexExtensionRequestHandler::DidFinishThrottle(CoreSpotlight.CSSearchableIndex)",
			"CoreSpotlight.CSIndexExtensionRequestHandler::DidThrottle(CoreSpotlight.CSSearchableIndex)",
			"CoreSpotlight.CSIndexExtensionRequestHandler::GetData(CoreSpotlight.CSSearchableIndex,System.String,System.String,Foundation.NSError&)",
			"CoreSpotlight.CSIndexExtensionRequestHandler::GetFileUrl(CoreSpotlight.CSSearchableIndex,System.String,System.String,System.Boolean,Foundation.NSError&)",
			"CoreSpotlight.CSIndexExtensionRequestHandler::ReindexAllSearchableItems(CoreSpotlight.CSSearchableIndex,System.Action)",
			"CoreSpotlight.CSIndexExtensionRequestHandler::ReindexSearchableItems(CoreSpotlight.CSSearchableIndex,System.String[],System.Action)",
			"CoreSpotlight.CSLocalizedString::.ctor(Foundation.NSCoder)",
			"CoreSpotlight.CSLocalizedString::.ctor(Foundation.NSDictionary)",
			"CoreSpotlight.CSLocalizedString::EncodeTo(Foundation.NSCoder)",
			"CoreSpotlight.CSPerson::.ctor(Foundation.NSCoder)",
			"CoreSpotlight.CSPerson::.ctor(System.String,System.String[],Foundation.NSString)",
			"CoreSpotlight.CSPerson::Copy(Foundation.NSZone)",
			"CoreSpotlight.CSPerson::EncodeTo(Foundation.NSCoder)",
			"CoreSpotlight.CSSearchableIndex::.ctor(System.String,Foundation.NSString)",
			"CoreSpotlight.CSSearchableIndex_CSOptionalBatchingExtension::BeginIndexBatch(CoreSpotlight.CSSearchableIndex)",
			"CoreSpotlight.CSSearchableIndex_CSOptionalBatchingExtension::EndIndexBatch(CoreSpotlight.CSSearchableIndex,Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"CoreSpotlight.CSSearchableIndex_CSOptionalBatchingExtension::FetchLastClientState(CoreSpotlight.CSSearchableIndex,CoreSpotlight.CSSearchableIndexFetchHandler)",
			"CoreSpotlight.CSSearchableIndexDelegate_Extensions::DidFinishThrottle(CoreSpotlight.ICSSearchableIndexDelegate,CoreSpotlight.CSSearchableIndex)",
			"CoreSpotlight.CSSearchableIndexDelegate_Extensions::DidThrottle(CoreSpotlight.ICSSearchableIndexDelegate,CoreSpotlight.CSSearchableIndex)",
			"CoreSpotlight.CSSearchableIndexDelegate_Extensions::GetData(CoreSpotlight.ICSSearchableIndexDelegate,CoreSpotlight.CSSearchableIndex,System.String,System.String,Foundation.NSError&)",
			"CoreSpotlight.CSSearchableIndexDelegate_Extensions::GetFileUrl(CoreSpotlight.ICSSearchableIndexDelegate,CoreSpotlight.CSSearchableIndex,System.String,System.String,System.Boolean,Foundation.NSError&)",
			"CoreSpotlight.CSSearchableIndexDelegateWrapper::ReindexAllSearchableItems(CoreSpotlight.CSSearchableIndex,System.Action)",
			"CoreSpotlight.CSSearchableIndexDelegateWrapper::ReindexSearchableItems(CoreSpotlight.CSSearchableIndex,System.String[],System.Action)",
			"CoreSpotlight.CSSearchableItem::.ctor(Foundation.NSCoder)",
			"CoreSpotlight.CSSearchableItem::.ctor(System.String,System.String,CoreSpotlight.CSSearchableItemAttributeSet)",
			"CoreSpotlight.CSSearchableItem::Copy(Foundation.NSZone)",
			"CoreSpotlight.CSSearchableItem::EncodeTo(Foundation.NSCoder)",
			"CoreSpotlight.CSSearchableItem::set_AttributeSet(CoreSpotlight.CSSearchableItemAttributeSet)",
			"CoreSpotlight.CSSearchableItem::set_ExpirationDate(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::.ctor(Foundation.NSCoder)",
			"CoreSpotlight.CSSearchableItemAttributeSet::.ctor(UniformTypeIdentifiers.UTType)",
			"CoreSpotlight.CSSearchableItemAttributeSet::Copy(Foundation.NSZone)",
			"CoreSpotlight.CSSearchableItemAttributeSet::EncodeTo(Foundation.NSCoder)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set__IsUserCreated(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set__IsUserCurated(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set__IsUserOwned(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_AddedDate(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_AllDay(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Altitude(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Aperture(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_AudioBitRate(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_AudioChannelCount(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_AudioSampleRate(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_AudioTrackNumber(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_BitsPerSample(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_CompletionDate(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_ContainerOrder(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_ContentCreationDate(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_ContentModificationDate(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_ContentRating(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_ContentUrl(Foundation.NSUrl)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_DarkThumbnailUrl(Foundation.NSUrl)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_DeliveryType(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_DownloadedDate(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_DueDate(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Duration(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_EmailHeaders(Foundation.NSDictionary)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_EndDate(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_ExposureMode(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_ExposureTime(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_FileSize(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_FlashOn(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_FNumber(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_FocalLength(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_FocalLength35mm(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_GeneralMidiSequence(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_GpsDateStamp(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_GpsDestBearing(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_GpsDestDistance(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_GpsDestLatitude(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_GpsDestLongitude(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_GpsDifferental(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_GpsDop(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_GpsTrack(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_HasAlphaChannel(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_HtmlContentData(Foundation.NSData)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_ImageDirection(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_IsoSpeed(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_LastUsedDate(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Latitude(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_LikelyJunk(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Local(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Longitude(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_MaxAperture(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_MetadataModificationDate(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Orientation(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_PageCount(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_PageHeight(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_PageWidth(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_PixelCount(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_PixelHeight(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_PixelWidth(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_PlayCount(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_RankingHint(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Rating(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_RatingDescription(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_RecordingDate(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_RedEyeOn(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_ResolutionHeightDPI(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_ResolutionWidthDpi(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_SharedItemContentType(UniformTypeIdentifiers.UTType)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Speed(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_StartDate(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Streamable(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_SupportsNavigation(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_SupportsPhoneCall(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Tempo(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_ThumbnailData(Foundation.NSData)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_ThumbnailUrl(Foundation.NSUrl)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Timestamp(Foundation.NSDate)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_TotalBitRate(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_Url(Foundation.NSUrl)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_VideoBitRate(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::set_WhiteBalance(Foundation.NSNumber)",
			"CoreSpotlight.CSSearchableItemAttributeSet::SetValue(Foundation.INSSecureCoding,CoreSpotlight.CSCustomAttributeKey)",
			"CoreSpotlight.CSSearchableItemAttributeSet::ValueForCustomKey(CoreSpotlight.CSCustomAttributeKey)",
			"CoreTelephony.CTCellularPlanProvisioning::AddPlan(CoreTelephony.CTCellularPlanProvisioningRequest,System.Action`1<CoreTelephony.CTCellularPlanProvisioningAddPlanResult>)",
			"CoreTelephony.CTCellularPlanProvisioningRequest::.ctor(Foundation.NSCoder)",
			"CoreTelephony.CTCellularPlanProvisioningRequest::EncodeTo(Foundation.NSCoder)",
			"CoreTelephony.CTSubscriberDelegateWrapper::SubscriberTokenRefreshed(CoreTelephony.CTSubscriber)",
			"CoreTelephony.CTTelephonyNetworkInfoDelegate_Extensions::DataServiceIdentifierDidChange(CoreTelephony.ICTTelephonyNetworkInfoDelegate,System.String)",
			"CoreText.Adapter::GetHandles(System.Collections.Generic.IEnumerable`1<T>)",
			"CoreText.Adapter::GetNativeArray(Foundation.NSDictionary,Foundation.NSObject,System.Converter`2<ObjCRuntime.NativeHandle,T>)",
			"CoreText.Adapter::GetStringArray(System.Collections.Generic.IDictionary`2<Foundation.NSObject,Foundation.NSObject>,Foundation.NSObject)",
			"CoreText.Adapter::SetNativeValue(Foundation.NSDictionary,Foundation.NSObject,ObjCRuntime.INativeObject)",
			"CoreText.CTBaselineClassID::FromHandle(System.IntPtr)",
			"CoreText.CTFont::Create(CoreGraphics.CGFont,System.Runtime.InteropServices.NFloat,CoreGraphics.CGAffineTransform)",
			"CoreText.CTFont::Create(CoreGraphics.CGFont,System.Runtime.InteropServices.NFloat,CoreGraphics.CGAffineTransform,CoreText.CTFontDescriptor)",
			"CoreText.CTFont::Create(CoreGraphics.CGFont,System.Runtime.InteropServices.NFloat,CoreText.CTFontDescriptor)",
			"CoreText.CTFont::Create(CoreText.CTFontDescriptor,System.Runtime.InteropServices.NFloat)",
			"CoreText.CTFont::Create(CoreText.CTFontDescriptor,System.Runtime.InteropServices.NFloat,CoreGraphics.CGAffineTransform&)",
			"CoreText.CTFont::Create(CoreText.CTFontDescriptor,System.Runtime.InteropServices.NFloat,CoreText.CTFontOptions)",
			"CoreText.CTFont::Create(CoreText.CTFontDescriptor,System.Runtime.InteropServices.NFloat,CoreText.CTFontOptions,CoreGraphics.CGAffineTransform&)",
			"CoreText.CTFont::DrawGlyphs(CoreGraphics.CGContext,System.UInt16[],CoreGraphics.CGPoint[])",
			"CoreText.CTFont::GetAttribute(Foundation.NSString)",
			"CoreText.CTFont::GetLocalizedName(CoreText.CTFontNameKey,System.String&)",
			"CoreText.CTFont::GetName(CoreText.CTFontNameKey)",
			"CoreText.CTFont::ToCGFont(CoreText.CTFontDescriptor)",
			"CoreText.CTFont::WithAttributes(System.Runtime.InteropServices.NFloat,CoreText.CTFontDescriptor)",
			"CoreText.CTFont::WithAttributes(System.Runtime.InteropServices.NFloat,CoreText.CTFontDescriptor,CoreGraphics.CGAffineTransform&)",
			"CoreText.CTFontCollection::.ctor(CoreText.CTFontCollectionOptions)",
			"CoreText.CTFontCollection::Create(CoreText.CTFontDescriptor[],CoreText.CTFontCollectionOptions)",
			"CoreText.CTFontCollection::GetMatchingFontDescriptors(CoreText.CTFontCollectionOptions)",
			"CoreText.CTFontCollection::WithFontDescriptors(CoreText.CTFontDescriptor[],CoreText.CTFontCollectionOptions)",
			"CoreText.CTFontCollectionOptionsExtensions::GetHandle(CoreText.CTFontCollectionOptions)",
			"CoreText.CTFontDescriptor::.ctor(CoreText.CTFontDescriptorAttributes)",
			"CoreText.CTFontDescriptor::GetAttribute(Foundation.NSString)",
			"CoreText.CTFontDescriptor::GetLocalizedAttribute(Foundation.NSString)",
			"CoreText.CTFontDescriptor::GetLocalizedAttribute(Foundation.NSString,Foundation.NSString&)",
			"CoreText.CTFontDescriptor::GetMatchingFontDescriptor(Foundation.NSSet)",
			"CoreText.CTFontDescriptor::GetMatchingFontDescriptors(Foundation.NSSet)",
			"CoreText.CTFontDescriptor::WithAttributes(CoreText.CTFontDescriptorAttributes)",
			"CoreText.CTFontDescriptor::WithAttributes(Foundation.NSDictionary)",
			"CoreText.CTFontFeatures::get_Exclusive()",
			"CoreText.CTFontFeatures::set_Exclusive(System.Boolean)",
			"CoreText.CTFontFeatureSelectors::get_Default()",
			"CoreText.CTFontFeatureSelectors::get_Setting()",
			"CoreText.CTFontFeatureSelectors::set_Default(System.Boolean)",
			"CoreText.CTFontFeatureSelectors::set_Setting(System.Boolean)",
			"CoreText.CTFontManager::CreateFontDescriptor(Foundation.NSData)",
			"CoreText.CTFontManager::CreateFontDescriptors(Foundation.NSData)",
			"CoreText.CTFontManager::GetFonts(Foundation.NSUrl)",
			"CoreText.CTFontManager::IsFontSupported(Foundation.NSUrl)",
			"CoreText.CTFontManager::RegisterFonts(System.String[],CoreFoundation.CFBundle,CoreText.CTFontManagerScope,System.Boolean,CoreText.CTFontManager/CTFontRegistrationHandler)",
			"CoreText.CTFontManager::RegisterFontsForUrl(Foundation.NSUrl,CoreText.CTFontManagerScope)",
			"CoreText.CTFontManager::RegisterGraphicsFont(CoreGraphics.CGFont,Foundation.NSError&)",
			"CoreText.CTFontManager::UnregisterFontsForUrl(Foundation.NSUrl,CoreText.CTFontManagerScope)",
			"CoreText.CTFontManager::UnregisterGraphicsFont(CoreGraphics.CGFont,Foundation.NSError&)",
			"CoreText.CTFrame::Draw(CoreGraphics.CGContext)",
			"CoreText.CTFrameAttributesExtensions::GetHandle(CoreText.CTFrameAttributes)",
			"CoreText.CTFramesetter::.ctor(Foundation.NSAttributedString)",
			"CoreText.CTFramesetter::Create(CoreText.CTTypesetter)",
			"CoreText.CTFramesetter::GetFrame(Foundation.NSRange,CoreGraphics.CGPath,CoreText.CTFrameAttributes)",
			"CoreText.CTFramesetter::SuggestFrameSize(Foundation.NSRange,CoreText.CTFrameAttributes,CoreGraphics.CGSize,Foundation.NSRange&)",
			"CoreText.CTGlyphInfo::Create(System.String,CoreText.CTFont,System.String)",
			"CoreText.CTGlyphInfo::Create(System.UInt16,CoreText.CTFont,System.String)",
			"CoreText.CTLine::.ctor(Foundation.NSAttributedString)",
			"CoreText.CTLine::Draw(CoreGraphics.CGContext)",
			"CoreText.CTLine::GetImageBounds(CoreGraphics.CGContext)",
			"CoreText.CTLine::GetTruncatedLine(System.Double,CoreText.CTLineTruncation,CoreText.CTLine)",
			"CoreText.CTParagraphStyleSettings::CreateValue(CoreText.CTParagraphStyleSpecifier,System.Collections.Generic.IEnumerable`1<CoreText.CTTextTab>)",
			"CoreText.CTParagraphStyleSpecifierIntPtrsValue::WriteValue(CoreText.CTParagraphStyleSettingValue[],System.Int32)",
			"CoreText.CTRun::Draw(CoreGraphics.CGContext,Foundation.NSRange)",
			"CoreText.CTRun::GetImageBounds(CoreGraphics.CGContext,Foundation.NSRange)",
			"CoreText.CTStringAttributes::get_BackgroundColor()",
			"CoreText.CTStringAttributes::get_BaselineClass()",
			"CoreText.CTStringAttributes::get_Font()",
			"CoreText.CTStringAttributes::get_ForegroundColor()",
			"CoreText.CTStringAttributes::get_ForegroundColorFromContext()",
			"CoreText.CTStringAttributes::get_GlyphInfo()",
			"CoreText.CTStringAttributes::get_ParagraphStyle()",
			"CoreText.CTStringAttributes::get_RunDelegate()",
			"CoreText.CTStringAttributes::get_StrokeColor()",
			"CoreText.CTStringAttributes::get_UnderlineColor()",
			"CoreText.CTStringAttributes::get_VerticalForms()",
			"CoreText.CTStringAttributes::set_ForegroundColorFromContext(System.Boolean)",
			"CoreText.CTStringAttributes::set_VerticalForms(System.Boolean)",
			"CoreText.CTStringAttributes::SetBaseline(CoreText.CTBaselineClass,System.Double,Foundation.NSString)",
			"CoreText.CTStringAttributes::SetWritingDirection(CoreText.CTWritingDirection[])",
			"CoreText.CTTextTab::.ctor(CoreText.CTTextAlignment,System.Double,CoreText.CTTextTabOptions)",
			"CoreText.CTTextTabOptionsExtensions::GetHandle(CoreText.CTTextTabOptions)",
			"CoreText.CTTypesetter::.ctor(Foundation.NSAttributedString)",
			"CoreText.CTTypesetter::.ctor(Foundation.NSAttributedString,CoreText.CTTypesetterOptions)",
			"CoreText.CTTypesetterOptions::get_AllowUnboundedLayout()",
			"CoreText.CTTypesetterOptions::get_DisableBidiProcessing()",
			"CoreText.CTTypesetterOptions::set_AllowUnboundedLayout(System.Boolean)",
			"CoreText.CTTypesetterOptions::set_DisableBidiProcessing(System.Boolean)",
			"CoreText.CTTypesetterOptionsExtensions::GetHandle(CoreText.CTTypesetterOptions)",
			"CoreVideo.CVBuffer::GetAttachment(Foundation.NSString,CoreVideo.CVAttachmentMode&)",
			"CoreVideo.CVBuffer::HasAttachment(Foundation.NSString)",
			"CoreVideo.CVBuffer::PropogateAttachments(CoreVideo.CVBuffer)",
			"CoreVideo.CVBuffer::RemoveAttachment(Foundation.NSString)",
			"CoreVideo.CVBuffer::SetAttachment(Foundation.NSString,ObjCRuntime.INativeObject,CoreVideo.CVAttachmentMode)",
			"CoreVideo.CVBuffer::SetAttachments(Foundation.NSDictionary,CoreVideo.CVAttachmentMode)",
			"CoreVideo.CVDisplayLink::SetCurrentDisplay(OpenGL.CGLContext,OpenGL.CGLPixelFormat)",
			"CoreVideo.CVImageBuffer::CreateFrom(Foundation.NSDictionary)",
			"CoreVideo.CVImageBuffer::GetCodePoint(CoreVideo.CVImageBufferColorPrimaries)",
			"CoreVideo.CVImageBuffer::GetCodePoint(CoreVideo.CVImageBufferTransferFunction)",
			"CoreVideo.CVImageBuffer::GetCodePoint(CoreVideo.CVImageBufferYCbCrMatrix)",
			"CoreVideo.CVMetalTextureCache::Create(Metal.IMTLDevice,CoreVideo.CVMetalTextureAttributes)",
			"CoreVideo.CVMetalTextureCache::FromDevice(Metal.IMTLDevice)",
			"CoreVideo.CVMetalTextureCache::FromDevice(Metal.IMTLDevice,CoreVideo.CVMetalTextureAttributes,CoreVideo.CVReturn&)",
			"CoreVideo.CVMetalTextureCache::TextureFromImage(CoreVideo.CVImageBuffer,Metal.MTLPixelFormat,System.IntPtr,System.IntPtr,System.IntPtr,CoreVideo.CVReturn&)",
			"CoreVideo.CVPixelBuffer::Create(IOSurface.IOSurface,CoreVideo.CVReturn&,CoreVideo.CVPixelBufferAttributes)",
			"CoreVideo.CVPixelBuffer::Create(System.IntPtr,System.IntPtr,CoreVideo.CVPixelFormatType,Foundation.NSDictionary)",
			"CoreVideo.CVPixelBuffer::Create(System.IntPtr,System.IntPtr,CoreVideo.CVPixelFormatType,System.Byte[],System.IntPtr,CoreVideo.CVPixelBufferAttributes,CoreVideo.CVReturn&)",
			"CoreVideo.CVPixelBuffer::Create(System.IntPtr,System.IntPtr,CoreVideo.CVPixelFormatType,System.Byte[][],System.IntPtr[],System.IntPtr[],System.IntPtr[],CoreVideo.CVPixelBufferAttributes,CoreVideo.CVReturn&)",
			"CoreVideo.CVPixelBufferPool::Create(Foundation.NSDictionary,Foundation.NSDictionary)",
			"CoreVideo.CVPixelBufferPool::CreatePixelBuffer(CoreVideo.CVPixelBufferPoolAllocationSettings,CoreVideo.CVReturn&)",
			"CoreVideo.CVPixelFormatDescription::Register(Foundation.NSDictionary,CoreVideo.CVPixelFormatType)",
			"CoreWlan.CWChannel::.ctor(Foundation.NSCoder)",
			"CoreWlan.CWChannel::Copy(Foundation.NSZone)",
			"CoreWlan.CWChannel::EncodeTo(Foundation.NSCoder)",
			"CoreWlan.CWChannel::IsEqualToChannel(CoreWlan.CWChannel)",
			"CoreWlan.CWConfiguration::.ctor(CoreWlan.CWConfiguration)",
			"CoreWlan.CWConfiguration::.ctor(Foundation.NSCoder)",
			"CoreWlan.CWConfiguration::Copy(Foundation.NSZone)",
			"CoreWlan.CWConfiguration::Create(CoreWlan.CWConfiguration)",
			"CoreWlan.CWConfiguration::EncodeTo(Foundation.NSCoder)",
			"CoreWlan.CWConfiguration::IsEqualToConfiguration(CoreWlan.CWConfiguration)",
			"CoreWlan.CWConfiguration::MutableCopy(Foundation.NSZone)",
			"CoreWlan.CWEventDelegate_Extensions::BssidDidChangeForWiFi(CoreWlan.ICWEventDelegate,System.String)",
			"CoreWlan.CWEventDelegate_Extensions::ClientConnectionInterrupted(CoreWlan.ICWEventDelegate)",
			"CoreWlan.CWEventDelegate_Extensions::ClientConnectionInvalidated(CoreWlan.ICWEventDelegate)",
			"CoreWlan.CWEventDelegate_Extensions::CountryCodeDidChangeForWiFi(CoreWlan.ICWEventDelegate,System.String)",
			"CoreWlan.CWEventDelegate_Extensions::LinkDidChangeForWiFi(CoreWlan.ICWEventDelegate,System.String)",
			"CoreWlan.CWEventDelegate_Extensions::LinkQualityDidChangeForWiFi(CoreWlan.ICWEventDelegate,System.String,System.Int32,System.Double)",
			"CoreWlan.CWEventDelegate_Extensions::ModeDidChangeForWiFi(CoreWlan.ICWEventDelegate,System.String)",
			"CoreWlan.CWEventDelegate_Extensions::PowerStateDidChangeForWiFi(CoreWlan.ICWEventDelegate,System.String)",
			"CoreWlan.CWEventDelegate_Extensions::ScanCacheUpdatedForWiFi(CoreWlan.ICWEventDelegate,System.String)",
			"CoreWlan.CWEventDelegate_Extensions::SsidDidChangeForWiFi(CoreWlan.ICWEventDelegate,System.String)",
			"CoreWlan.CWInterface::_ScanForNetworksWithSsid(Foundation.NSData,Foundation.NSError&)",
			"CoreWlan.CWInterface::_ScanForNetworksWithSsid(Foundation.NSData,System.Boolean,Foundation.NSError&)",
			"CoreWlan.CWInterface::AssociateToEnterpriseNetwork(CoreWlan.CWNetwork,Security.SecIdentity,System.String,System.String,Foundation.NSError&)",
			"CoreWlan.CWInterface::AssociateToNetwork(CoreWlan.CWNetwork,System.String,Foundation.NSError&)",
			"CoreWlan.CWInterface::CommitConfiguration(CoreWlan.CWConfiguration,Foundation.NSObject,Foundation.NSError&)",
			"CoreWlan.CWInterface::SetPairwiseMasterKey(Foundation.NSData,Foundation.NSError&)",
			"CoreWlan.CWInterface::SetWEPKey(Foundation.NSData,CoreWlan.CWCipherKeyFlags,System.IntPtr,Foundation.NSError&)",
			"CoreWlan.CWInterface::SetWlanChannel(CoreWlan.CWChannel,Foundation.NSError&)",
			"CoreWlan.CWInterface::StartIbssModeWithSsid(Foundation.NSData,CoreWlan.CWIbssModeSecurity,System.UIntPtr,System.String,Foundation.NSError&)",
			"CoreWlan.CWKeychain::TryDeleteWiFiEAPUsernameAndPassword(CoreWlan.CWKeychainDomain,Foundation.NSData,System.Int32&)",
			"CoreWlan.CWKeychain::TryDeleteWiFiPassword(CoreWlan.CWKeychainDomain,Foundation.NSData,System.Int32&)",
			"CoreWlan.CWKeychain::TryFindWiFiEAPIdentity(CoreWlan.CWKeychainDomain,Foundation.NSData,Security.SecIdentity&,System.Int32&)",
			"CoreWlan.CWKeychain::TryFindWiFiEAPUsernameAndPassword(CoreWlan.CWKeychainDomain,Foundation.NSData,Foundation.NSString&,Foundation.NSString&,System.Int32&)",
			"CoreWlan.CWKeychain::TryFindWiFiPassword(CoreWlan.CWKeychainDomain,Foundation.NSData,Foundation.NSString&,System.Int32&)",
			"CoreWlan.CWKeychain::TryGetEAPIdentityList(Foundation.NSArray,System.Int32&)",
			"CoreWlan.CWKeychain::TrySetWiFiEAPIdentity(CoreWlan.CWKeychainDomain,Foundation.NSData,Security.SecIdentity,System.Int32&)",
			"CoreWlan.CWKeychain::TrySetWiFiEAPUsernameAndPassword(CoreWlan.CWKeychainDomain,Foundation.NSData,Foundation.NSString,Foundation.NSString,System.Int32&)",
			"CoreWlan.CWKeychain::TrySetWiFiEAPUsernameAndPassword(CoreWlan.CWKeychainDomain,Foundation.NSData,System.String,System.String,System.Int32&)",
			"CoreWlan.CWKeychain::TrySetWiFiPassword(CoreWlan.CWKeychainDomain,Foundation.NSData,Foundation.NSString,System.Int32&)",
			"CoreWlan.CWKeychain::TrySetWiFiPassword(CoreWlan.CWKeychainDomain,Foundation.NSData,System.String,System.Int32&)",
			"CoreWlan.CWMutableConfiguration::.ctor(Foundation.NSCoder)",
			"CoreWlan.CWMutableConfiguration::set_NetworkProfiles(Foundation.NSOrderedSet`1<CoreWlan.CWNetworkProfile>)",
			"CoreWlan.CWMutableNetworkProfile::.ctor(Foundation.NSCoder)",
			"CoreWlan.CWMutableNetworkProfile::Copy(Foundation.NSZone)",
			"CoreWlan.CWMutableNetworkProfile::EncodeTo(Foundation.NSCoder)",
			"CoreWlan.CWMutableNetworkProfile::MutableCopy(Foundation.NSZone)",
			"CoreWlan.CWMutableNetworkProfile::set_SsidData(Foundation.NSData)",
			"CoreWlan.CWNetwork::.ctor(Foundation.NSCoder)",
			"CoreWlan.CWNetwork::Copy(Foundation.NSZone)",
			"CoreWlan.CWNetwork::EncodeTo(Foundation.NSCoder)",
			"CoreWlan.CWNetwork::IsEqualToNetwork(CoreWlan.CWNetwork)",
			"CoreWlan.CWNetworkProfile::.ctor(CoreWlan.CWNetworkProfile)",
			"CoreWlan.CWNetworkProfile::.ctor(Foundation.NSCoder)",
			"CoreWlan.CWNetworkProfile::Copy(Foundation.NSZone)",
			"CoreWlan.CWNetworkProfile::EncodeTo(Foundation.NSCoder)",
			"CoreWlan.CWNetworkProfile::IsEqualToNetworkProfile(CoreWlan.CWNetworkProfile)",
			"CoreWlan.CWNetworkProfile::MutableCopy(Foundation.NSZone)",
			"CoreWlan.CWNetworkProfile::NetworkProfileWithNetworkProfile(CoreWlan.CWNetworkProfile)",
			"Darwin.SystemLog/<Search>d__26::MoveNext()",
			"Darwin.SystemLog::Log(Darwin.Message)",
			"Darwin.SystemLog::Log(Darwin.Message,System.String,System.Object[])",
			"DeviceCheck.DCAppAttestService::AttestKey(System.String,Foundation.NSData,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"DeviceCheck.DCAppAttestService::GenerateAssertion(System.String,Foundation.NSData,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"EventKit.EKAlarm::Copy(Foundation.NSZone)",
			"EventKit.EKAlarm::FromDate(Foundation.NSDate)",
			"EventKit.EKAlarm::set_AbsoluteDate(Foundation.NSDate)",
			"EventKit.EKAlarm::set_StructuredLocation(EventKit.EKStructuredLocation)",
			"EventKit.EKAlarm::set_Url(Foundation.NSUrl)",
			"EventKit.EKCalendar::Create(EventKit.EKEntityType,EventKit.EKEventStore)",
			"EventKit.EKCalendar::FromEventStore(EventKit.EKEventStore)",
			"EventKit.EKCalendar::set_CGColor(CoreGraphics.CGColor)",
			"EventKit.EKCalendar::set_Color(AppKit.NSColor)",
			"EventKit.EKCalendar::set_Source(EventKit.EKSource)",
			"EventKit.EKCalendarItem::AddAlarm(EventKit.EKAlarm)",
			"EventKit.EKCalendarItem::AddRecurrenceRule(EventKit.EKRecurrenceRule)",
			"EventKit.EKCalendarItem::RemoveAlarm(EventKit.EKAlarm)",
			"EventKit.EKCalendarItem::RemoveRecurrenceRule(EventKit.EKRecurrenceRule)",
			"EventKit.EKCalendarItem::set_Calendar(EventKit.EKCalendar)",
			"EventKit.EKCalendarItem::set_TimeZone(Foundation.NSTimeZone)",
			"EventKit.EKCalendarItem::set_Url(Foundation.NSUrl)",
			"EventKit.EKEvent::CompareStartDateWithEvent(EventKit.EKEvent)",
			"EventKit.EKEvent::FromStore(EventKit.EKEventStore)",
			"EventKit.EKEvent::set_EndDate(Foundation.NSDate)",
			"EventKit.EKEvent::set_StartDate(Foundation.NSDate)",
			"EventKit.EKEvent::set_StructuredLocation(EventKit.EKStructuredLocation)",
			"EventKit.EKEventStore::EnumerateEvents(Foundation.NSPredicate,EventKit.EKEventSearchCallback)",
			"EventKit.EKEventStore::EventsMatching(Foundation.NSPredicate)",
			"EventKit.EKEventStore::FetchReminders(Foundation.NSPredicate,System.Action`1<EventKit.EKReminder[]>)",
			"EventKit.EKEventStore::PredicateForCompleteReminders(Foundation.NSDate,Foundation.NSDate,EventKit.EKCalendar[])",
			"EventKit.EKEventStore::PredicateForEvents(Foundation.NSDate,Foundation.NSDate,EventKit.EKCalendar[])",
			"EventKit.EKEventStore::PredicateForIncompleteReminders(Foundation.NSDate,Foundation.NSDate,EventKit.EKCalendar[])",
			"EventKit.EKEventStore::RemoveCalendar(EventKit.EKCalendar,System.Boolean,Foundation.NSError&)",
			"EventKit.EKEventStore::RemoveEvent(EventKit.EKEvent,EventKit.EKSpan,System.Boolean,Foundation.NSError&)",
			"EventKit.EKEventStore::RemoveEvents(EventKit.EKEvent,EventKit.EKSpan,Foundation.NSError&)",
			"EventKit.EKEventStore::RemoveReminder(EventKit.EKReminder,System.Boolean,Foundation.NSError&)",
			"EventKit.EKEventStore::SaveCalendar(EventKit.EKCalendar,System.Boolean,Foundation.NSError&)",
			"EventKit.EKEventStore::SaveEvent(EventKit.EKEvent,EventKit.EKSpan,Foundation.NSError&)",
			"EventKit.EKEventStore::SaveEvent(EventKit.EKEvent,EventKit.EKSpan,System.Boolean,Foundation.NSError&)",
			"EventKit.EKEventStore::SaveReminder(EventKit.EKReminder,System.Boolean,Foundation.NSError&)",
			"EventKit.EKParticipant::Copy(Foundation.NSZone)",
			"EventKit.EKParticipant::GetRecord(AddressBook.ABAddressBook)",
			"EventKit.EKRecurrenceDayOfWeek::.ctor(Foundation.NSCoder)",
			"EventKit.EKRecurrenceDayOfWeek::Copy(Foundation.NSZone)",
			"EventKit.EKRecurrenceDayOfWeek::EncodeTo(Foundation.NSCoder)",
			"EventKit.EKRecurrenceEnd::.ctor(Foundation.NSCoder)",
			"EventKit.EKRecurrenceEnd::Copy(Foundation.NSZone)",
			"EventKit.EKRecurrenceEnd::EncodeTo(Foundation.NSCoder)",
			"EventKit.EKRecurrenceEnd::FromEndDate(Foundation.NSDate)",
			"EventKit.EKRecurrenceRule::.ctor(EventKit.EKRecurrenceFrequency,System.IntPtr,EventKit.EKRecurrenceDayOfWeek[],Foundation.NSNumber[],Foundation.NSNumber[],Foundation.NSNumber[],Foundation.NSNumber[],Foundation.NSNumber[],EventKit.EKRecurrenceEnd)",
			"EventKit.EKRecurrenceRule::.ctor(EventKit.EKRecurrenceFrequency,System.IntPtr,EventKit.EKRecurrenceEnd)",
			"EventKit.EKRecurrenceRule::Copy(Foundation.NSZone)",
			"EventKit.EKRecurrenceRule::set_RecurrenceEnd(EventKit.EKRecurrenceEnd)",
			"EventKit.EKReminder::Create(EventKit.EKEventStore)",
			"EventKit.EKReminder::set_CompletionDate(Foundation.NSDate)",
			"EventKit.EKReminder::set_DueDateComponents(Foundation.NSDateComponents)",
			"EventKit.EKReminder::set_StartDateComponents(Foundation.NSDateComponents)",
			"EventKit.EKStructuredLocation::Copy(Foundation.NSZone)",
			"EventKit.EKStructuredLocation::FromMapItem(MapKit.MKMapItem)",
			"EventKit.EKStructuredLocation::set_GeoLocation(CoreLocation.CLLocation)",
			"EventKit.EKVirtualConferenceProvider::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"EventKit.EKVirtualConferenceUrlDescriptor::.ctor(System.String,Foundation.NSUrl)",
			"EventKitUI.EKCalendarChooser::.ctor(EventKitUI.EKCalendarChooserSelectionStyle,EventKitUI.EKCalendarChooserDisplayStyle,EventKit.EKEntityType,EventKit.EKEventStore)",
			"EventKitUI.EKCalendarChooser::.ctor(EventKitUI.EKCalendarChooserSelectionStyle,EventKitUI.EKCalendarChooserDisplayStyle,EventKit.EKEventStore)",
			"EventKitUI.EKCalendarChooser::.ctor(Foundation.NSCoder)",
			"EventKitUI.EKCalendarChooser::.ctor(System.String,Foundation.NSBundle)",
			"EventKitUI.EKCalendarChooser::set_SelectedCalendars(Foundation.NSSet)",
			"EventKitUI.EKCalendarChooserDelegate_Extensions::Cancelled(EventKitUI.IEKCalendarChooserDelegate,EventKitUI.EKCalendarChooser)",
			"EventKitUI.EKCalendarChooserDelegate_Extensions::Finished(EventKitUI.IEKCalendarChooserDelegate,EventKitUI.EKCalendarChooser)",
			"EventKitUI.EKCalendarChooserDelegate_Extensions::SelectionChanged(EventKitUI.IEKCalendarChooserDelegate,EventKitUI.EKCalendarChooser)",
			"EventKitUI.EKEventEditViewController::.ctor(Foundation.NSCoder)",
			"EventKitUI.EKEventEditViewController::.ctor(System.String,Foundation.NSBundle)",
			"EventKitUI.EKEventEditViewController::.ctor(UIKit.UIViewController)",
			"EventKitUI.EKEventEditViewController::set_Event(EventKit.EKEvent)",
			"EventKitUI.EKEventEditViewController::set_EventStore(EventKit.EKEventStore)",
			"EventKitUI.EKEventEditViewDelegate_Extensions::GetDefaultCalendarForNewEvents(EventKitUI.IEKEventEditViewDelegate,EventKitUI.EKEventEditViewController)",
			"EventKitUI.EKEventEditViewDelegateWrapper::Completed(EventKitUI.EKEventEditViewController,EventKitUI.EKEventEditViewAction)",
			"EventKitUI.EKEventViewController::.ctor(Foundation.NSCoder)",
			"EventKitUI.EKEventViewController::.ctor(System.String,Foundation.NSBundle)",
			"EventKitUI.EKEventViewController::set_Event(EventKit.EKEvent)",
			"EventKitUI.EKEventViewDelegateWrapper::Completed(EventKitUI.EKEventViewController,EventKitUI.EKEventViewAction)",
			"ExecutionPolicy.EPExecutionPolicy::AddPolicyException(Foundation.NSUrl,Foundation.NSError&)",
			"ExternalAccessory.EAAccessoryDelegate_Extensions::Disconnected(ExternalAccessory.IEAAccessoryDelegate,ExternalAccessory.EAAccessory)",
			"ExternalAccessory.EAAccessoryManager::ShowBluetoothAccessoryPicker(Foundation.NSPredicate,System.Action`1<Foundation.NSError>)",
			"ExternalAccessory.EASession::.ctor(ExternalAccessory.EAAccessory,System.String)",
			"ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser::.ctor(ExternalAccessory.IEAWiFiUnconfiguredAccessoryBrowserDelegate,CoreFoundation.DispatchQueue)",
			"ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser::ConfigureAccessory(ExternalAccessory.EAWiFiUnconfiguredAccessory,UIKit.UIViewController)",
			"ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser::StartSearchingForUnconfiguredAccessories(Foundation.NSPredicate)",
			"ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateWrapper::DidFindUnconfiguredAccessories(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser,Foundation.NSSet)",
			"ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateWrapper::DidFinishConfiguringAccessory(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser,ExternalAccessory.EAWiFiUnconfiguredAccessory,ExternalAccessory.EAWiFiUnconfiguredAccessoryConfigurationStatus)",
			"ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateWrapper::DidRemoveUnconfiguredAccessories(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser,Foundation.NSSet)",
			"ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateWrapper::DidUpdateState(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser,ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserState)",
			"FileProvider.NSFileProviderChangeObserver_Extensions::GetSuggestedBatchSize(FileProvider.INSFileProviderChangeObserver)",
			"FileProvider.NSFileProviderChangeObserverWrapper::FinishEnumerating(Foundation.NSError)",
			"FileProvider.NSFileProviderChangeObserverWrapper::FinishEnumeratingChanges(Foundation.NSData,System.Boolean)",
			"FileProvider.NSFileProviderDomainVersion::.ctor(Foundation.NSCoder)",
			"FileProvider.NSFileProviderDomainVersion::Compare(FileProvider.NSFileProviderDomainVersion)",
			"FileProvider.NSFileProviderDomainVersion::EncodeTo(Foundation.NSCoder)",
			"FileProvider.NSFileProviderEnumeratingWrapper::GetEnumerator(System.String,FileProvider.NSFileProviderRequest,Foundation.NSError&)",
			"FileProvider.NSFileProviderEnumerationObserver_Extensions::GetSuggestedPageSize(FileProvider.INSFileProviderEnumerationObserver)",
			"FileProvider.NSFileProviderEnumerationObserverWrapper::FinishEnumerating(Foundation.NSData)",
			"FileProvider.NSFileProviderEnumerationObserverWrapper::FinishEnumerating(Foundation.NSError)",
			"FileProvider.NSFileProviderEnumerator_Extensions::CurrentSyncAnchor(FileProvider.INSFileProviderEnumerator,System.Action`1<Foundation.NSData>)",
			"FileProvider.NSFileProviderEnumerator_Extensions::EnumerateChanges(FileProvider.INSFileProviderEnumerator,FileProvider.INSFileProviderChangeObserver,Foundation.NSData)",
			"FileProvider.NSFileProviderEnumeratorWrapper::EnumerateItems(FileProvider.INSFileProviderEnumerationObserver,Foundation.NSData)",
			"FileProvider.NSFileProviderExtension::GetItem(Foundation.NSString,Foundation.NSError&)",
			"FileProvider.NSFileProviderExtension::GetPersistentIdentifier(Foundation.NSUrl)",
			"FileProvider.NSFileProviderExtension::GetPlaceholderUrl(Foundation.NSUrl)",
			"FileProvider.NSFileProviderExtension::ImportDocument(Foundation.NSUrl,System.String,System.Action`2<FileProvider.INSFileProviderItem,Foundation.NSError>)",
			"FileProvider.NSFileProviderExtension::ItemChangedAtUrl(Foundation.NSUrl)",
			"FileProvider.NSFileProviderExtension::ProvidePlaceholderAtUrl(Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"FileProvider.NSFileProviderExtension::SetFavoriteRank(Foundation.NSNumber,System.String,System.Action`2<FileProvider.INSFileProviderItem,Foundation.NSError>)",
			"FileProvider.NSFileProviderExtension::SetLastUsedDate(Foundation.NSDate,System.String,System.Action`2<FileProvider.INSFileProviderItem,Foundation.NSError>)",
			"FileProvider.NSFileProviderExtension::SetTagData(Foundation.NSData,System.String,System.Action`2<FileProvider.INSFileProviderItem,Foundation.NSError>)",
			"FileProvider.NSFileProviderExtension::StartProvidingItemAtUrl(Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"FileProvider.NSFileProviderExtension::StopProvidingItemAtUrl(Foundation.NSUrl)",
			"FileProvider.NSFileProviderExtension::WritePlaceholder(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"FileProvider.NSFileProviderIncrementalContentFetchingWrapper::FetchContents(System.String,FileProvider.NSFileProviderItemVersion,Foundation.NSUrl,FileProvider.NSFileProviderItemVersion,FileProvider.NSFileProviderRequest,FileProvider.NSFileProviderFetchContentsCompletionHandler)",
			"FileProvider.NSFileProviderItem_Extensions::GetCapabilities(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetChildItemCount(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetContentModificationDate(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetContentType(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetCreationDate(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetDocumentSize(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetDownloadingError(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetExtendedAttributes(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetFavoriteRank(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetFileSystemFlags(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetItemVersion(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetLastUsedDate(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetMostRecentEditorNameComponents(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetOwnerNameComponents(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetSymlinkTargetPath(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetTagData(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetTypeAndCreator(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetTypeIdentifier(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetUploadingError(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetUserInfo(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::GetVersionIdentifier(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::IsDownloaded(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::IsDownloading(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::IsMostRecentVersionDownloaded(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::IsShared(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::IsSharedByCurrentUser(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::IsTrashed(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::IsUploaded(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItem_Extensions::IsUploading(FileProvider.INSFileProviderItem)",
			"FileProvider.NSFileProviderItemVersion::.ctor(Foundation.NSData,Foundation.NSData)",
			"FileProvider.NSFileProviderManager::AddDomain(FileProvider.NSFileProviderDomain,System.Action`1<Foundation.NSError>)",
			"FileProvider.NSFileProviderManager::EvictItem(Foundation.NSString,System.Action`1<Foundation.NSError>)",
			"FileProvider.NSFileProviderManager::FromDomain(FileProvider.NSFileProviderDomain)",
			"FileProvider.NSFileProviderManager::GetGlobalProgress(Foundation.NSString)",
			"FileProvider.NSFileProviderManager::GetIdentifierForUserVisibleFile(Foundation.NSUrl,FileProvider.NSFileProviderGetIdentifierHandler)",
			"FileProvider.NSFileProviderManager::GetPlaceholderUrl(Foundation.NSUrl)",
			"FileProvider.NSFileProviderManager::GetUserVisibleUrl(Foundation.NSString,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"FileProvider.NSFileProviderManager::Import(FileProvider.NSFileProviderDomain,Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"FileProvider.NSFileProviderManager::Register(Foundation.NSUrlSessionTask,System.String,System.Action`1<Foundation.NSError>)",
			"FileProvider.NSFileProviderManager::ReimportItemsBelowItem(Foundation.NSString,System.Action`1<Foundation.NSError>)",
			"FileProvider.NSFileProviderManager::RemoveDomain(FileProvider.NSFileProviderDomain,FileProvider.NSFileProviderDomainRemovalMode,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"FileProvider.NSFileProviderManager::RemoveDomain(FileProvider.NSFileProviderDomain,System.Action`1<Foundation.NSError>)",
			"FileProvider.NSFileProviderManager::SignalErrorResolved(Foundation.NSError,System.Action`1<Foundation.NSError>)",
			"FileProvider.NSFileProviderManager::WritePlaceholder(Foundation.NSUrl,FileProvider.INSFileProviderItem,Foundation.NSError&)",
			"FileProvider.NSFileProviderPartialContentFetchingWrapper::FetchPartialContents(System.String,FileProvider.NSFileProviderItemVersion,FileProvider.NSFileProviderRequest,Foundation.NSRange,System.UIntPtr,FileProvider.NSFileProviderFetchContentsOptions,FileProvider.NSFileProviderPartialContentFetchingCompletionHandler)",
			"FileProvider.NSFileProviderPendingSetEnumeratorWrapper::EnumerateItems(FileProvider.INSFileProviderEnumerationObserver,Foundation.NSData)",
			"FileProvider.NSFileProviderReplicatedExtension_Extensions::ImportDidFinish(FileProvider.INSFileProviderReplicatedExtension,System.Action)",
			"FileProvider.NSFileProviderReplicatedExtension_Extensions::MaterializedItemsDidChange(FileProvider.INSFileProviderReplicatedExtension,System.Action)",
			"FileProvider.NSFileProviderReplicatedExtension_Extensions::PendingItemsDidChange(FileProvider.INSFileProviderReplicatedExtension,System.Action)",
			"FileProvider.NSFileProviderReplicatedExtensionWrapper::CreateItem(FileProvider.INSFileProviderItem,FileProvider.NSFileProviderItemFields,Foundation.NSUrl,FileProvider.NSFileProviderCreateItemOptions,FileProvider.NSFileProviderRequest,FileProvider.NSFileProviderCreateOrModifyItemCompletionHandler)",
			"FileProvider.NSFileProviderReplicatedExtensionWrapper::DeleteItem(System.String,FileProvider.NSFileProviderItemVersion,FileProvider.NSFileProviderDeleteItemOptions,FileProvider.NSFileProviderRequest,System.Action`1<Foundation.NSError>)",
			"FileProvider.NSFileProviderReplicatedExtensionWrapper::FetchContents(System.String,FileProvider.NSFileProviderItemVersion,FileProvider.NSFileProviderRequest,FileProvider.NSFileProviderFetchContentsCompletionHandler)",
			"FileProvider.NSFileProviderReplicatedExtensionWrapper::GetEnumerator(System.String,FileProvider.NSFileProviderRequest,Foundation.NSError&)",
			"FileProvider.NSFileProviderReplicatedExtensionWrapper::GetItem(System.String,FileProvider.NSFileProviderRequest,System.Action`2<FileProvider.INSFileProviderItem,Foundation.NSError>)",
			"FileProvider.NSFileProviderReplicatedExtensionWrapper::ModifyItem(FileProvider.INSFileProviderItem,FileProvider.NSFileProviderItemVersion,FileProvider.NSFileProviderItemFields,Foundation.NSUrl,FileProvider.NSFileProviderModifyItemOptions,FileProvider.NSFileProviderRequest,FileProvider.NSFileProviderCreateOrModifyItemCompletionHandler)",
			"FileProviderUI.FPUIActionExtensionContext::CancelRequest(Foundation.NSError)",
			"FileProviderUI.FPUIActionExtensionViewController::.ctor(Foundation.NSCoder)",
			"FileProviderUI.FPUIActionExtensionViewController::.ctor(System.String,Foundation.NSBundle)",
			"FileProviderUI.FPUIActionExtensionViewController::Prepare(Foundation.NSError)",
			"FinderSync.FIFinderSync::BeginObservingDirectory(Foundation.NSUrl)",
			"FinderSync.FIFinderSync::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"FinderSync.FIFinderSync::EndObservingDirectory(Foundation.NSUrl)",
			"FinderSync.FIFinderSync::GetValues(System.String[],Foundation.NSUrl,FinderSync.GetValuesCompletionHandler)",
			"FinderSync.FIFinderSync::RequestBadgeIdentifier(Foundation.NSUrl)",
			"FinderSync.FIFinderSync::SupportedServiceNames(Foundation.NSUrl)",
			"FinderSync.FIFinderSyncController::.ctor(Foundation.NSCoder)",
			"FinderSync.FIFinderSyncController::Copy(Foundation.NSZone)",
			"FinderSync.FIFinderSyncController::EncodeTo(Foundation.NSCoder)",
			"FinderSync.FIFinderSyncController::GetLastUsedDate(Foundation.NSUrl)",
			"FinderSync.FIFinderSyncController::GetTagData(Foundation.NSUrl)",
			"FinderSync.FIFinderSyncController::set_DirectoryUrls(Foundation.NSSet)",
			"FinderSync.FIFinderSyncController::SetBadgeIdentifier(System.String,Foundation.NSUrl)",
			"FinderSync.FIFinderSyncController::SetBadgeImage(AppKit.NSImage,System.String,System.String)",
			"FinderSync.FIFinderSyncController::SetLastUsedDate(Foundation.NSDate,Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"FinderSync.FIFinderSyncController::SetTagData(Foundation.NSData,Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"FinderSync.FIFinderSyncProtocol_Extensions::BeginObservingDirectory(FinderSync.IFIFinderSyncProtocol,Foundation.NSUrl)",
			"FinderSync.FIFinderSyncProtocol_Extensions::EndObservingDirectory(FinderSync.IFIFinderSyncProtocol,Foundation.NSUrl)",
			"FinderSync.FIFinderSyncProtocol_Extensions::GetMenu(FinderSync.IFIFinderSyncProtocol,FinderSync.FIMenuKind)",
			"FinderSync.FIFinderSyncProtocol_Extensions::GetToolbarItemImage(FinderSync.IFIFinderSyncProtocol)",
			"FinderSync.FIFinderSyncProtocol_Extensions::GetToolbarItemName(FinderSync.IFIFinderSyncProtocol)",
			"FinderSync.FIFinderSyncProtocol_Extensions::GetToolbarItemToolTip(FinderSync.IFIFinderSyncProtocol)",
			"FinderSync.FIFinderSyncProtocol_Extensions::GetValues(FinderSync.IFIFinderSyncProtocol,System.String[],Foundation.NSUrl,FinderSync.GetValuesCompletionHandler)",
			"FinderSync.FIFinderSyncProtocol_Extensions::RequestBadgeIdentifier(FinderSync.IFIFinderSyncProtocol,Foundation.NSUrl)",
			"FinderSync.FIFinderSyncProtocol_Extensions::SupportedServiceNames(FinderSync.IFIFinderSyncProtocol,Foundation.NSUrl)",
			"Foundation.DictionaryContainer::GetArray(Foundation.NSString)",
			"Foundation.DictionaryContainer::GetArray(Foundation.NSString,System.Func`2<ObjCRuntime.NativeHandle,T>)",
			"Foundation.DictionaryContainer::GetBoolValue(Foundation.NSString)",
			"Foundation.DictionaryContainer::GetNativeValue(Foundation.NSString)",
			"Foundation.DictionaryContainer::GetStringArrayValue(Foundation.NSString)",
			"Foundation.DictionaryContainer::GetStringValue(Foundation.NSString)",
			"Foundation.DictionaryContainer::GetStringValue(System.String)",
			"Foundation.DictionaryContainer::SetArrayValue(Foundation.NSString,ObjCRuntime.INativeObject[])",
			"Foundation.DictionaryContainer::SetBooleanValue(Foundation.NSString,System.Nullable`1<System.Boolean>)",
			"Foundation.DictionaryContainer::SetNativeValue(Foundation.NSString,ObjCRuntime.INativeObject,System.Boolean)",
			"Foundation.DictionaryContainerHelper::GetHandle(Foundation.DictionaryContainer)",
			"Foundation.NSAffineTransform::.ctor(Foundation.NSAffineTransform)",
			"Foundation.NSAffineTransform::.ctor(Foundation.NSCoder)",
			"Foundation.NSAffineTransform::AppendTransform(Foundation.NSAffineTransform)",
			"Foundation.NSAffineTransform::Copy(Foundation.NSZone)",
			"Foundation.NSAffineTransform::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSAffineTransform::PrependTransform(Foundation.NSAffineTransform)",
			"Foundation.NSAffineTransform::TransformBezierPath(AppKit.NSBezierPath)",
			"Foundation.NSAppleEventDescriptor::.ctor(Foundation.NSCoder)",
			"Foundation.NSAppleEventDescriptor::Copy(Foundation.NSZone)",
			"Foundation.NSAppleEventDescriptor::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSAppleEventDescriptor::FromApplicationURL(Foundation.NSUrl)",
			"Foundation.NSAppleEventDescriptor::FromDate(Foundation.NSDate)",
			"Foundation.NSAppleEventDescriptor::FromFileURL(Foundation.NSUrl)",
			"Foundation.NSAppleEventDescriptor::InsertDescriptoratIndex(Foundation.NSAppleEventDescriptor,System.IntPtr)",
			"Foundation.NSAppleEventDescriptor::SetAttributeDescriptorforKeyword(Foundation.NSAppleEventDescriptor,System.UInt32)",
			"Foundation.NSAppleEventDescriptor::SetDescriptorforKeyword(Foundation.NSAppleEventDescriptor,System.UInt32)",
			"Foundation.NSAppleEventDescriptor::SetParamDescriptorforKeyword(Foundation.NSAppleEventDescriptor,System.UInt32)",
			"Foundation.NSAppleEventManager::SetEventHandler(Foundation.NSObject,ObjCRuntime.Selector,Foundation.AEEventClass,Foundation.AEEventID)",
			"Foundation.NSAppleScript::.ctor(Foundation.NSUrl,Foundation.NSDictionary&)",
			"Foundation.NSAppleScript::Copy(Foundation.NSZone)",
			"Foundation.NSAppleScript::ExecuteAppleEvent(Foundation.NSAppleEventDescriptor,Foundation.NSDictionary&)",
			"Foundation.NSArray::.ctor(Foundation.NSCoder)",
			"Foundation.NSArray::AddObserver(Foundation.NSObject,Foundation.NSIndexSet,System.String,Foundation.NSKeyValueObservingOptions,System.IntPtr)",
			"Foundation.NSArray::Contains(Foundation.NSObject)",
			"Foundation.NSArray::Copy(Foundation.NSZone)",
			"Foundation.NSArray::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSArray::Filter(Foundation.NSPredicate)",
			"Foundation.NSArray::FromNativeObjects(T[],System.IntPtr)",
			"Foundation.NSArray::FromNSObjects(System.Collections.Generic.IList`1<Foundation.NSObject>)",
			"Foundation.NSArray::FromStrings(System.Collections.Generic.IReadOnlyList`1<System.String>)",
			"Foundation.NSArray::FromUrl(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSArray::IndexOf(Foundation.NSObject)",
			"Foundation.NSArray::MutableCopy(Foundation.NSZone)",
			"Foundation.NSArray::RemoveObserver(Foundation.NSObject,Foundation.NSIndexSet,System.String)",
			"Foundation.NSArray::RemoveObserver(Foundation.NSObject,Foundation.NSIndexSet,System.String,System.IntPtr)",
			"Foundation.NSArray::SetValueForKey(Foundation.NSObject,Foundation.NSString)",
			"Foundation.NSArray::UnsafeGetItem(ObjCRuntime.NativeHandle,System.UIntPtr)",
			"Foundation.NSArray::ValueForKey(Foundation.NSString)",
			"Foundation.NSArray::Write(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSArray`1::FromNSObjects(System.Int32,TKey[])",
			"Foundation.NSAttributedString::.ctor(Foundation.NSAttributedString)",
			"Foundation.NSAttributedString::.ctor(Foundation.NSCoder)",
			"Foundation.NSAttributedString::.ctor(Foundation.NSData,Foundation.NSAttributedStringDataType,Foundation.NSDictionary&)",
			"Foundation.NSAttributedString::.ctor(Foundation.NSData,Foundation.NSDictionary&)",
			"Foundation.NSAttributedString::.ctor(Foundation.NSData,Foundation.NSDictionary,Foundation.NSDictionary&)",
			"Foundation.NSAttributedString::.ctor(Foundation.NSData,Foundation.NSDictionary,Foundation.NSDictionary&,Foundation.NSError&)",
			"Foundation.NSAttributedString::.ctor(Foundation.NSData,Foundation.NSUrl,Foundation.NSDictionary&)",
			"Foundation.NSAttributedString::.ctor(Foundation.NSFileWrapper,Foundation.NSDictionary&)",
			"Foundation.NSAttributedString::.ctor(Foundation.NSUrl,Foundation.NSDictionary&)",
			"Foundation.NSAttributedString::.ctor(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSDictionary&,Foundation.NSError&)",
			"Foundation.NSAttributedString::.ctor(System.String,Foundation.NSDictionary)",
			"Foundation.NSAttributedString::Copy(Foundation.NSZone)",
			"Foundation.NSAttributedString::DrawString(CoreGraphics.CGRect,Foundation.NSStringDrawingOptions,Foundation.NSStringDrawingContext)",
			"Foundation.NSAttributedString::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSAttributedString::EnumerateAttribute(Foundation.NSString,Foundation.NSRange,Foundation.NSAttributedStringEnumeration,Foundation.NSAttributedStringCallback)",
			"Foundation.NSAttributedString::FromAttachment(AppKit.NSTextAttachment)",
			"Foundation.NSAttributedString::FromAttachment(UIKit.NSTextAttachment)",
			"Foundation.NSAttributedString::GetBoundingRect(CoreGraphics.CGSize,Foundation.NSStringDrawingOptions,Foundation.NSStringDrawingContext)",
			"Foundation.NSAttributedString::GetData(Foundation.NSRange,Foundation.NSDictionary,Foundation.NSError&)",
			"Foundation.NSAttributedString::GetDataFromRange(Foundation.NSRange,Foundation.NSDictionary,Foundation.NSError&)",
			"Foundation.NSAttributedString::GetDocFormat(Foundation.NSRange,Foundation.NSDictionary)",
			"Foundation.NSAttributedString::GetFileWrapper(Foundation.NSRange,Foundation.NSDictionary,Foundation.NSError&)",
			"Foundation.NSAttributedString::GetFileWrapperFromRange(Foundation.NSRange,Foundation.NSDictionary,Foundation.NSError&)",
			"Foundation.NSAttributedString::GetItemNumber(AppKit.NSTextList,System.UIntPtr)",
			"Foundation.NSAttributedString::GetObject(Foundation.NSData,System.String,Foundation.NSError&)",
			"Foundation.NSAttributedString::GetRange(AppKit.NSTextBlock,System.UIntPtr)",
			"Foundation.NSAttributedString::GetRange(AppKit.NSTextList,System.UIntPtr)",
			"Foundation.NSAttributedString::GetRange(AppKit.NSTextTable,System.UIntPtr)",
			"Foundation.NSAttributedString::GetReadableTypesForPasteboard(AppKit.NSPasteboard)",
			"Foundation.NSAttributedString::GetReadingOptionsForType(System.String,AppKit.NSPasteboard)",
			"Foundation.NSAttributedString::GetRtf(Foundation.NSRange,Foundation.NSDictionary)",
			"Foundation.NSAttributedString::GetRtfd(Foundation.NSRange,Foundation.NSDictionary)",
			"Foundation.NSAttributedString::GetRtfdFileWrapper(Foundation.NSRange,Foundation.NSDictionary)",
			"Foundation.NSAttributedString::GetWritableTypesForPasteboard(AppKit.NSPasteboard)",
			"Foundation.NSAttributedString::GetWritingOptionsForType(System.String,AppKit.NSPasteboard)",
			"Foundation.NSAttributedString::InitWithFileURL(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSDictionary&,Foundation.NSError&)",
			"Foundation.NSAttributedString::InitWithHTML(Foundation.NSData,Foundation.NSDictionary&)",
			"Foundation.NSAttributedString::InitWithRtf(Foundation.NSData,Foundation.NSDictionary&)",
			"Foundation.NSAttributedString::InitWithRtfd(Foundation.NSData,Foundation.NSDictionary&)",
			"Foundation.NSAttributedString::InitWithURL(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSDictionary&,Foundation.NSError&)",
			"Foundation.NSAttributedString::IsEqual(Foundation.NSAttributedString)",
			"Foundation.NSAttributedString::LoadFromHtml(Foundation.NSData,Foundation.NSDictionary,Foundation.NSAttributedStringCompletionHandler)",
			"Foundation.NSAttributedString::LoadFromHtml(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSAttributedStringCompletionHandler)",
			"Foundation.NSAttributedString::LoadFromHtml(Foundation.NSUrlRequest,Foundation.NSDictionary,Foundation.NSAttributedStringCompletionHandler)",
			"Foundation.NSAttributedString::LoadFromHtml(System.String,Foundation.NSDictionary,Foundation.NSAttributedStringCompletionHandler)",
			"Foundation.NSAttributedString::MutableCopy(Foundation.NSZone)",
			"Foundation.NSBindingSelectionMarker::Copy(Foundation.NSZone)",
			"Foundation.NSBindingSelectionMarker::GetDefaultPlaceholder(Foundation.NSBindingSelectionMarker,ObjCRuntime.Class,System.String)",
			"Foundation.NSBindingSelectionMarker::SetDefaultPlaceholder(Foundation.NSObject,Foundation.NSBindingSelectionMarker,ObjCRuntime.Class,System.String)",
			"Foundation.NSBundle::.ctor(Foundation.NSUrl)",
			"Foundation.NSBundle::FromUrl(Foundation.NSUrl)",
			"Foundation.NSBundle::GetLocalizedString(Foundation.NSString,Foundation.NSString,Foundation.NSString)",
			"Foundation.NSBundle::GetPreservationPriority(Foundation.NSString)",
			"Foundation.NSBundle::GetUrlForResource(System.String,System.String,System.String,Foundation.NSUrl)",
			"Foundation.NSBundle::GetUrlsForResourcesWithExtension(System.String,System.String,Foundation.NSUrl)",
			"Foundation.NSBundle::LoadNib(System.String,Foundation.NSObject)",
			"Foundation.NSBundle::LoadNib(System.String,Foundation.NSObject,Foundation.NSDictionary)",
			"Foundation.NSBundle::LoadNibNamed(System.String,Foundation.NSObject,Foundation.NSArray&)",
			"Foundation.NSBundle::SetPreservationPriority(System.Double,Foundation.NSSet`1<Foundation.NSString>)",
			"Foundation.NSBundleResourceRequest::.ctor(Foundation.NSSet`1<Foundation.NSString>)",
			"Foundation.NSBundleResourceRequest::.ctor(Foundation.NSSet`1<Foundation.NSString>,Foundation.NSBundle)",
			"Foundation.NSByteCountFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSByteCountFormatter::GetString(Foundation.NSObject)",
			"Foundation.NSCache::ObjectForKey(Foundation.NSObject)",
			"Foundation.NSCache::RemoveObjectForKey(Foundation.NSObject)",
			"Foundation.NSCache::SetCost(Foundation.NSObject,Foundation.NSObject,System.UIntPtr)",
			"Foundation.NSCache::SetObjectforKey(Foundation.NSObject,Foundation.NSObject)",
			"Foundation.NSCacheDelegate_Extensions::WillEvictObject(Foundation.INSCacheDelegate,Foundation.NSCache,Foundation.NSObject)",
			"Foundation.NSCachedUrlResponse::.ctor(Foundation.NSCoder)",
			"Foundation.NSCachedUrlResponse::.ctor(Foundation.NSUrlResponse,Foundation.NSData)",
			"Foundation.NSCachedUrlResponse::.ctor(Foundation.NSUrlResponse,Foundation.NSData,Foundation.NSDictionary,Foundation.NSUrlCacheStoragePolicy)",
			"Foundation.NSCachedUrlResponse::Copy(Foundation.NSZone)",
			"Foundation.NSCachedUrlResponse::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSCalendar::.ctor(Foundation.NSCoder)",
			"Foundation.NSCalendar::.ctor(Foundation.NSString)",
			"Foundation.NSCalendar::CompareDate(Foundation.NSDate,Foundation.NSDate,Foundation.NSCalendarUnit)",
			"Foundation.NSCalendar::Components(Foundation.NSCalendarUnit,Foundation.NSDate)",
			"Foundation.NSCalendar::Components(Foundation.NSCalendarUnit,Foundation.NSDate,Foundation.NSDate,Foundation.NSCalendarOptions)",
			"Foundation.NSCalendar::ComponentsFromDateToDate(Foundation.NSCalendarUnit,Foundation.NSDateComponents,Foundation.NSDateComponents,Foundation.NSCalendarOptions)",
			"Foundation.NSCalendar::ComponentsInTimeZone(Foundation.NSTimeZone,Foundation.NSDate)",
			"Foundation.NSCalendar::Copy(Foundation.NSZone)",
			"Foundation.NSCalendar::DateByAddingComponents(Foundation.NSDateComponents,Foundation.NSDate,Foundation.NSCalendarOptions)",
			"Foundation.NSCalendar::DateByAddingUnit(Foundation.NSCalendarUnit,System.IntPtr,Foundation.NSDate,Foundation.NSCalendarOptions)",
			"Foundation.NSCalendar::DateBySettingsHour(System.IntPtr,System.IntPtr,System.IntPtr,Foundation.NSDate,Foundation.NSCalendarOptions)",
			"Foundation.NSCalendar::DateBySettingUnit(Foundation.NSCalendarUnit,System.IntPtr,Foundation.NSDate,Foundation.NSCalendarOptions)",
			"Foundation.NSCalendar::DateFromComponents(Foundation.NSDateComponents)",
			"Foundation.NSCalendar::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSCalendar::EnumerateDatesStartingAfterDate(Foundation.NSDate,Foundation.NSDateComponents,Foundation.NSCalendarOptions,Foundation.EnumerateDatesCallback)",
			"Foundation.NSCalendar::FindNextDateAfterDateMatching(Foundation.NSDate,Foundation.NSCalendarUnit,System.IntPtr,Foundation.NSCalendarOptions)",
			"Foundation.NSCalendar::FindNextDateAfterDateMatching(Foundation.NSDate,Foundation.NSDateComponents,Foundation.NSCalendarOptions)",
			"Foundation.NSCalendar::FindNextDateAfterDateMatching(Foundation.NSDate,System.IntPtr,System.IntPtr,System.IntPtr,Foundation.NSCalendarOptions)",
			"Foundation.NSCalendar::FindNextWeekend(Foundation.NSDate&,System.Double&,Foundation.NSCalendarOptions,Foundation.NSDate)",
			"Foundation.NSCalendar::GetComponentFromDate(Foundation.NSCalendarUnit,Foundation.NSDate)",
			"Foundation.NSCalendar::GetComponentsFromDate(System.IntPtr&,System.IntPtr&,System.IntPtr&,System.IntPtr&,Foundation.NSDate)",
			"Foundation.NSCalendar::GetComponentsFromDateForWeekOfYear(System.IntPtr&,System.IntPtr&,System.IntPtr&,System.IntPtr&,Foundation.NSDate)",
			"Foundation.NSCalendar::GetHourComponentsFromDate(System.IntPtr&,System.IntPtr&,System.IntPtr&,System.IntPtr&,Foundation.NSDate)",
			"Foundation.NSCalendar::IsDateInToday(Foundation.NSDate)",
			"Foundation.NSCalendar::IsDateInTomorrow(Foundation.NSDate)",
			"Foundation.NSCalendar::IsDateInWeekend(Foundation.NSDate)",
			"Foundation.NSCalendar::IsDateInYesterday(Foundation.NSDate)",
			"Foundation.NSCalendar::IsEqualToUnitGranularity(Foundation.NSDate,Foundation.NSDate,Foundation.NSCalendarUnit)",
			"Foundation.NSCalendar::IsInSameDay(Foundation.NSDate,Foundation.NSDate)",
			"Foundation.NSCalendar::Matches(Foundation.NSDate,Foundation.NSDateComponents)",
			"Foundation.NSCalendar::Ordinality(Foundation.NSCalendarUnit,Foundation.NSCalendarUnit,Foundation.NSDate)",
			"Foundation.NSCalendar::Range(Foundation.NSCalendarUnit,Foundation.NSCalendarUnit,Foundation.NSDate)",
			"Foundation.NSCalendar::Range(Foundation.NSCalendarUnit,Foundation.NSDate&,System.Double&,Foundation.NSDate)",
			"Foundation.NSCalendar::RangeOfWeekendContainingDate(Foundation.NSDate&,System.Double&,Foundation.NSDate)",
			"Foundation.NSCalendar::set_Locale(Foundation.NSLocale)",
			"Foundation.NSCalendar::set_TimeZone(Foundation.NSTimeZone)",
			"Foundation.NSCalendar::StartOfDayForDate(Foundation.NSDate)",
			"Foundation.NSCalendarDate::.ctor(Foundation.NSCoder)",
			"Foundation.NSCalendarDate::.ctor(System.IntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,Foundation.NSTimeZone)",
			"Foundation.NSCalendarDate::.ctor(System.String,System.String,Foundation.NSObject)",
			"Foundation.NSCalendarDate::GetDescription(Foundation.NSLocale)",
			"Foundation.NSCalendarDate::GetDescription(System.String,Foundation.NSObject)",
			"Foundation.NSCalendarDate::set_TimeZone(Foundation.NSTimeZone)",
			"Foundation.NSCharacterSet::.ctor(Foundation.NSCoder)",
			"Foundation.NSCharacterSet::Copy(Foundation.NSZone)",
			"Foundation.NSCharacterSet::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSCharacterSet::FromBitmap(Foundation.NSData)",
			"Foundation.NSCharacterSet::IsSupersetOf(Foundation.NSCharacterSet)",
			"Foundation.NSCharacterSet::MutableCopy(Foundation.NSZone)",
			"Foundation.NSCoder::DecodeArrayOfObjects(Foundation.NSSet`1<ObjCRuntime.Class>,System.String)",
			"Foundation.NSCoder::DecodeDictionary(Foundation.NSSet`1<ObjCRuntime.Class>,Foundation.NSSet`1<ObjCRuntime.Class>,System.String)",
			"Foundation.NSCoder::DecodeTopLevelObject(Foundation.NSSet`1<ObjCRuntime.Class>,System.String,Foundation.NSError&)",
			"Foundation.NSCoder::Encode(Foundation.NSObject)",
			"Foundation.NSCoder::Encode(Foundation.NSObject,System.String)",
			"Foundation.NSCoder::EncodeConditionalObject(Foundation.NSObject,System.String)",
			"Foundation.NSCoder::EncodeRoot(Foundation.NSObject)",
			"Foundation.NSCoder::Fail(Foundation.NSError)",
			"Foundation.NSCodingWrapper::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSComparisonPredicate::.ctor(Foundation.NSCoder)",
			"Foundation.NSComparisonPredicate::.ctor(Foundation.NSExpression,Foundation.NSExpression,Foundation.NSComparisonPredicateModifier,Foundation.NSPredicateOperatorType,Foundation.NSComparisonPredicateOptions)",
			"Foundation.NSComparisonPredicate::.ctor(Foundation.NSExpression,Foundation.NSExpression,ObjCRuntime.Selector)",
			"Foundation.NSComparisonPredicate::Create(Foundation.NSExpression,Foundation.NSExpression,Foundation.NSComparisonPredicateModifier,Foundation.NSPredicateOperatorType,Foundation.NSComparisonPredicateOptions)",
			"Foundation.NSComparisonPredicate::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSComparisonPredicate::FromSelector(Foundation.NSExpression,Foundation.NSExpression,ObjCRuntime.Selector)",
			"Foundation.NSCompoundPredicate::.ctor(Foundation.NSCoder)",
			"Foundation.NSCompoundPredicate::CreateNotPredicate(Foundation.NSPredicate)",
			"Foundation.NSCompoundPredicate::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSCondition::WaitUntilDate(Foundation.NSDate)",
			"Foundation.NSConditionLock::LockBeforeDate(Foundation.NSDate)",
			"Foundation.NSConditionLock::LockWhenCondition(System.IntPtr,Foundation.NSDate)",
			"Foundation.NSConnection::_GetRootProxy(System.String,System.String,Foundation.NSPortNameServer)",
			"Foundation.NSConnection::AddRequestMode(Foundation.NSString)",
			"Foundation.NSConnection::AddRunLoop(Foundation.NSRunLoop)",
			"Foundation.NSConnection::Create(Foundation.NSPort,Foundation.NSPort)",
			"Foundation.NSConnection::CreateService(System.String,Foundation.NSObject)",
			"Foundation.NSConnection::CreateService(System.String,Foundation.NSObject,Foundation.NSPortNameServer)",
			"Foundation.NSConnection::Dispatch(Foundation.NSArray)",
			"Foundation.NSConnection::LookupService(System.String,System.String,Foundation.NSPortNameServer)",
			"Foundation.NSConnection::RegisterName(System.String,Foundation.NSPortNameServer)",
			"Foundation.NSConnection::RemoveRequestMode(Foundation.NSString)",
			"Foundation.NSConnection::RemoveRunLoop(Foundation.NSRunLoop)",
			"Foundation.NSConnection::set_RootObject(Foundation.NSObject)",
			"Foundation.NSConnectionDelegate_Extensions::AllowNewConnection(Foundation.INSConnectionDelegate,Foundation.NSConnection,Foundation.NSConnection)",
			"Foundation.NSConnectionDelegate_Extensions::AuthenticateComponents(Foundation.INSConnectionDelegate,Foundation.NSArray,Foundation.NSData)",
			"Foundation.NSConnectionDelegate_Extensions::CreateConversation(Foundation.INSConnectionDelegate,Foundation.NSConnection)",
			"Foundation.NSConnectionDelegate_Extensions::GetAuthenticationData(Foundation.INSConnectionDelegate,Foundation.NSArray)",
			"Foundation.NSConnectionDelegate_Extensions::HandleRequest(Foundation.INSConnectionDelegate,Foundation.NSConnection,Foundation.NSDistantObjectRequest)",
			"Foundation.NSConnectionDelegate_Extensions::ShouldMakeNewConnection(Foundation.INSConnectionDelegate,Foundation.NSConnection,Foundation.NSConnection)",
			"Foundation.NSCopyingWrapper::Copy(Foundation.NSZone)",
			"Foundation.NSData::.ctor(Foundation.NSCoder)",
			"Foundation.NSData::.ctor(Foundation.NSData,Foundation.NSDataBase64DecodingOptions)",
			"Foundation.NSData::_Save(Foundation.NSUrl,System.IntPtr,System.IntPtr)",
			"Foundation.NSData::Copy(Foundation.NSZone)",
			"Foundation.NSData::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSData::Find(Foundation.NSData,Foundation.NSDataSearchOptions,Foundation.NSRange)",
			"Foundation.NSData::FromData(Foundation.NSData)",
			"Foundation.NSData::FromUrl(Foundation.NSUrl)",
			"Foundation.NSData::FromUrl(Foundation.NSUrl,Foundation.NSDataReadingOptions,Foundation.NSError&)",
			"Foundation.NSData::MutableCopy(Foundation.NSZone)",
			"Foundation.NSData::Save(Foundation.NSUrl,System.Boolean)",
			"Foundation.NSDataDetector::.ctor(Foundation.NSCoder)",
			"Foundation.NSDataDetector::Copy(Foundation.NSZone)",
			"Foundation.NSDataDetector::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSDate::.ctor(Foundation.NSCoder)",
			"Foundation.NSDate::Compare(Foundation.NSDate)",
			"Foundation.NSDate::Copy(Foundation.NSZone)",
			"Foundation.NSDate::DescriptionWithLocale(Foundation.NSLocale)",
			"Foundation.NSDate::EarlierDate(Foundation.NSDate)",
			"Foundation.NSDate::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSDate::GetSecondsSince(Foundation.NSDate)",
			"Foundation.NSDate::IsEqualToDate(Foundation.NSDate)",
			"Foundation.NSDate::LaterDate(Foundation.NSDate)",
			"Foundation.NSDateComponents::.ctor(Foundation.NSCoder)",
			"Foundation.NSDateComponents::Copy(Foundation.NSZone)",
			"Foundation.NSDateComponents::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSDateComponents::IsValidDateInCalendar(Foundation.NSCalendar)",
			"Foundation.NSDateComponents::set_Calendar(Foundation.NSCalendar)",
			"Foundation.NSDateComponents::set_TimeZone(Foundation.NSTimeZone)",
			"Foundation.NSDateComponentsFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSDateComponentsFormatter::LocalizedStringFromDateComponents(Foundation.NSDateComponents,Foundation.NSDateComponentsFormatterUnitsStyle)",
			"Foundation.NSDateComponentsFormatter::set_Calendar(Foundation.NSCalendar)",
			"Foundation.NSDateComponentsFormatter::set_ReferenceDate(Foundation.NSDate)",
			"Foundation.NSDateComponentsFormatter::StringForObjectValue(Foundation.NSObject)",
			"Foundation.NSDateComponentsFormatter::StringFromDate(Foundation.NSDate,Foundation.NSDate)",
			"Foundation.NSDateComponentsFormatter::StringFromDateComponents(Foundation.NSDateComponents)",
			"Foundation.NSDateFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSDateFormatter::GetDateFormatFromTemplate(System.String,System.UIntPtr,Foundation.NSLocale)",
			"Foundation.NSDateFormatter::set_Calendar(Foundation.NSCalendar)",
			"Foundation.NSDateFormatter::set_DefaultDate(Foundation.NSDate)",
			"Foundation.NSDateFormatter::set_GregorianStartDate(Foundation.NSDate)",
			"Foundation.NSDateFormatter::set_Locale(Foundation.NSLocale)",
			"Foundation.NSDateFormatter::set_TimeZone(Foundation.NSTimeZone)",
			"Foundation.NSDateFormatter::set_TwoDigitStartDate(Foundation.NSDate)",
			"Foundation.NSDateFormatter::ToLocalizedString(Foundation.NSDate,Foundation.NSDateFormatterStyle,Foundation.NSDateFormatterStyle)",
			"Foundation.NSDateFormatter::ToString(Foundation.NSDate)",
			"Foundation.NSDateInterval::.ctor(Foundation.NSCoder)",
			"Foundation.NSDateInterval::.ctor(Foundation.NSDate,Foundation.NSDate)",
			"Foundation.NSDateInterval::.ctor(Foundation.NSDate,System.Double)",
			"Foundation.NSDateInterval::Compare(Foundation.NSDateInterval)",
			"Foundation.NSDateInterval::ContainsDate(Foundation.NSDate)",
			"Foundation.NSDateInterval::Copy(Foundation.NSZone)",
			"Foundation.NSDateInterval::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSDateInterval::GetIntersection(Foundation.NSDateInterval)",
			"Foundation.NSDateInterval::Intersects(Foundation.NSDateInterval)",
			"Foundation.NSDateInterval::IsEqualTo(Foundation.NSDateInterval)",
			"Foundation.NSDateIntervalFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSDateIntervalFormatter::set_Calendar(Foundation.NSCalendar)",
			"Foundation.NSDateIntervalFormatter::set_Locale(Foundation.NSLocale)",
			"Foundation.NSDateIntervalFormatter::set_TimeZone(Foundation.NSTimeZone)",
			"Foundation.NSDateIntervalFormatter::StringFromDate(Foundation.NSDate,Foundation.NSDate)",
			"Foundation.NSDateIntervalFormatter::ToString(Foundation.NSDateInterval)",
			"Foundation.NSDecimal::ToString()",
			"Foundation.NSDecimalNumber::.ctor(Foundation.NSCoder)",
			"Foundation.NSDecimalNumber::.ctor(System.String,Foundation.NSObject)",
			"Foundation.NSDecimalNumber::Add(Foundation.NSDecimalNumber)",
			"Foundation.NSDecimalNumber::Add(Foundation.NSDecimalNumber,Foundation.NSObject)",
			"Foundation.NSDecimalNumber::Compare(Foundation.NSNumber)",
			"Foundation.NSDecimalNumber::DescriptionWithLocale(Foundation.NSLocale)",
			"Foundation.NSDecimalNumber::Divide(Foundation.NSDecimalNumber)",
			"Foundation.NSDecimalNumber::Divide(Foundation.NSDecimalNumber,Foundation.NSObject)",
			"Foundation.NSDecimalNumber::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSDecimalNumber::Multiply(Foundation.NSDecimalNumber)",
			"Foundation.NSDecimalNumber::Multiply(Foundation.NSDecimalNumber,Foundation.NSObject)",
			"Foundation.NSDecimalNumber::MultiplyPowerOf10(System.Int16,Foundation.NSObject)",
			"Foundation.NSDecimalNumber::RaiseTo(System.UIntPtr,Foundation.NSObject)",
			"Foundation.NSDecimalNumber::Rounding(Foundation.NSObject)",
			"Foundation.NSDecimalNumber::set_DefaultBehavior(Foundation.NSObject)",
			"Foundation.NSDecimalNumber::Subtract(Foundation.NSDecimalNumber)",
			"Foundation.NSDecimalNumber::Subtract(Foundation.NSDecimalNumber,Foundation.NSObject)",
			"Foundation.NSDictionary::.ctor(Foundation.NSArray,Foundation.NSArray)",
			"Foundation.NSDictionary::.ctor(Foundation.NSCoder)",
			"Foundation.NSDictionary::.ctor(Foundation.NSDictionary)",
			"Foundation.NSDictionary::.ctor(Foundation.NSDictionary,System.Boolean)",
			"Foundation.NSDictionary::.ctor(Foundation.NSUrl)",
			"Foundation.NSDictionary::.ctor(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSDictionary::Copy(Foundation.NSZone)",
			"Foundation.NSDictionary::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSDictionary::FromDictionary(Foundation.NSDictionary)",
			"Foundation.NSDictionary::FromObjectAndKey(Foundation.NSObject,Foundation.NSObject)",
			"Foundation.NSDictionary::FromObjectsAndKeysInternal(Foundation.NSArray,Foundation.NSArray)",
			"Foundation.NSDictionary::FromObjectsAndKeysInternal(Foundation.NSArray,Foundation.NSArray,System.IntPtr)",
			"Foundation.NSDictionary::FromUrl(Foundation.NSUrl)",
			"Foundation.NSDictionary::FromUrl(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSDictionary::IsEqualToDictionary(Foundation.NSDictionary)",
			"Foundation.NSDictionary::KeysForObject(Foundation.NSObject)",
			"Foundation.NSDictionary::MutableCopy(Foundation.NSZone)",
			"Foundation.NSDictionary::ObjectForKey(Foundation.NSObject)",
			"Foundation.NSDictionary::ObjectsForKeys(Foundation.NSArray,Foundation.NSObject)",
			"Foundation.NSDictionary::TryGetValue(ObjCRuntime.INativeObject,T&)",
			"Foundation.NSDictionary::WriteToUrl(Foundation.NSUrl,System.Boolean)",
			"Foundation.NSDictionary`2::ContainsKey(TKey)",
			"Foundation.NSDictionary`2::GenericFromObjectsAndKeysInternal(Foundation.NSArray,Foundation.NSArray)",
			"Foundation.NSDictionary`2::KeysForObject(TValue)",
			"Foundation.NSDictionary`2::ObjectForKey(TKey)",
			"Foundation.NSDictionary`2::ObjectsForKeys(TKey[],TValue)",
			"Foundation.NSDimension::.ctor(Foundation.NSCoder)",
			"Foundation.NSDimension::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSDimension::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSDistantObjectRequest::Reply(Foundation.NSException)",
			"Foundation.NSDistributedNotificationCenter::AddObserver(Foundation.NSObject,ObjCRuntime.Selector,System.String,Foundation.NSObject)",
			"Foundation.NSDistributedNotificationCenter::AddObserver(Foundation.NSObject,ObjCRuntime.Selector,System.String,System.String,Foundation.NSNotificationSuspensionBehavior)",
			"Foundation.NSDistributedNotificationCenter::PostNotificationName(System.String,System.String,Foundation.NSDictionary)",
			"Foundation.NSDistributedNotificationCenter::PostNotificationName(System.String,System.String,Foundation.NSDictionary,Foundation.NSNotificationFlags)",
			"Foundation.NSDistributedNotificationCenter::PostNotificationName(System.String,System.String,Foundation.NSDictionary,System.Boolean)",
			"Foundation.NSDistributedNotificationCenter::RemoveObserver(Foundation.NSObject,System.String,Foundation.NSObject)",
			"Foundation.NSEnergyFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSEnergyFormatter::set_NumberFormatter(Foundation.NSNumberFormatter)",
			"Foundation.NSError::.ctor(Foundation.NSCoder)",
			"Foundation.NSError::.ctor(Foundation.NSString,System.IntPtr,Foundation.NSDictionary)",
			"Foundation.NSError::Copy(Foundation.NSZone)",
			"Foundation.NSError::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSError::FromDomain(Foundation.NSString,System.IntPtr,Foundation.NSDictionary)",
			"Foundation.NSError::GetFileProviderError(FileProvider.INSFileProviderItem)",
			"Foundation.NSError::GetFileProviderErrorForRejectedDeletion(FileProvider.INSFileProviderItem)",
			"Foundation.NSException::.ctor(Foundation.NSCoder)",
			"Foundation.NSException::.ctor(System.String,System.String,Foundation.NSDictionary)",
			"Foundation.NSException::Copy(Foundation.NSZone)",
			"Foundation.NSException::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSExpression::.ctor(Foundation.NSCoder)",
			"Foundation.NSExpression::Copy(Foundation.NSZone)",
			"Foundation.NSExpression::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSExpression::EvaluateWith(Foundation.NSObject,Foundation.NSMutableDictionary)",
			"Foundation.NSExpression::FromConditional(Foundation.NSPredicate,Foundation.NSExpression,Foundation.NSExpression)",
			"Foundation.NSExpression::FromConstant(Foundation.NSObject)",
			"Foundation.NSExpression::FromFunction(Foundation.NSExpression,System.String,Foundation.NSExpression[])",
			"Foundation.NSExpression::FromIntersectSet(Foundation.NSExpression,Foundation.NSExpression)",
			"Foundation.NSExpression::FromMinusSet(Foundation.NSExpression,Foundation.NSExpression)",
			"Foundation.NSExpression::FromSubquery(Foundation.NSExpression,System.String,Foundation.NSObject)",
			"Foundation.NSExpression::FromUnionSet(Foundation.NSExpression,Foundation.NSExpression)",
			"Foundation.NSExtensionContext::CancelRequest(Foundation.NSError)",
			"Foundation.NSExtensionContext::OpenUrl(Foundation.NSUrl,System.Action`1<System.Boolean>)",
			"Foundation.NSExtensionItem::.ctor(Foundation.NSCoder)",
			"Foundation.NSExtensionItem::Copy(Foundation.NSZone)",
			"Foundation.NSExtensionItem::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSExtensionItem::set_AttributedContentText(Foundation.NSAttributedString)",
			"Foundation.NSExtensionItem::set_AttributedTitle(Foundation.NSAttributedString)",
			"Foundation.NSExtensionItem::set_UserInfo(Foundation.NSDictionary)",
			"Foundation.NSExtensionRequestHandlingWrapper::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"Foundation.NSFastEnumerator`1::Fetch()",
			"Foundation.NSFileAccessIntent::CreateReadingIntent(Foundation.NSUrl,Foundation.NSFileCoordinatorReadingOptions)",
			"Foundation.NSFileAccessIntent::CreateWritingIntent(Foundation.NSUrl,Foundation.NSFileCoordinatorWritingOptions)",
			"Foundation.NSFileCoordinator::.ctor(Foundation.INSFilePresenter)",
			"Foundation.NSFileCoordinator::AddFilePresenter(Foundation.INSFilePresenter)",
			"Foundation.NSFileCoordinator::CoordinateAccess(Foundation.NSFileAccessIntent[],Foundation.NSOperationQueue,System.Action`1<Foundation.NSError>)",
			"Foundation.NSFileCoordinator::CoordinateRead(Foundation.NSUrl,Foundation.NSFileCoordinatorReadingOptions,Foundation.NSError&,System.Action`1<Foundation.NSUrl>)",
			"Foundation.NSFileCoordinator::CoordinateReadWrite(Foundation.NSUrl,Foundation.NSFileCoordinatorReadingOptions,Foundation.NSUrl,Foundation.NSFileCoordinatorWritingOptions,Foundation.NSError&,Foundation.NSFileCoordinatorWorkerRW)",
			"Foundation.NSFileCoordinator::CoordinateWrite(Foundation.NSUrl,Foundation.NSFileCoordinatorWritingOptions,Foundation.NSError&,System.Action`1<Foundation.NSUrl>)",
			"Foundation.NSFileCoordinator::CoordinateWriteWrite(Foundation.NSUrl,Foundation.NSFileCoordinatorWritingOptions,Foundation.NSUrl,Foundation.NSFileCoordinatorWritingOptions,Foundation.NSError&,Foundation.NSFileCoordinatorWorkerRW)",
			"Foundation.NSFileCoordinator::ItemMoved(Foundation.NSUrl,Foundation.NSUrl)",
			"Foundation.NSFileCoordinator::ItemUbiquityAttributesChanged(Foundation.NSUrl,Foundation.NSSet`1<Foundation.NSString>)",
			"Foundation.NSFileCoordinator::RemoveFilePresenter(Foundation.INSFilePresenter)",
			"Foundation.NSFileCoordinator::WillMove(Foundation.NSUrl,Foundation.NSUrl)",
			"Foundation.NSFileHandle::.ctor(Foundation.NSCoder)",
			"Foundation.NSFileHandle::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSFileHandle::OpenReadUrl(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileHandle::OpenUpdateUrl(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileHandle::OpenWriteUrl(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileHandle::Write(Foundation.NSData,Foundation.NSError&)",
			"Foundation.NSFileHandle::WriteData(Foundation.NSData)",
			"Foundation.NSFileManager::Copy(Foundation.NSUrl,Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileManager::CreateDirectory(Foundation.NSUrl,System.Boolean,Foundation.NSDictionary,Foundation.NSError&)",
			"Foundation.NSFileManager::CreateDirectory(System.String,System.Boolean,Foundation.NSDictionary,Foundation.NSError&)",
			"Foundation.NSFileManager::CreateFile(System.String,Foundation.NSData,Foundation.NSDictionary)",
			"Foundation.NSFileManager::CreateSymbolicLink(Foundation.NSUrl,Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileManager::EvictUbiquitous(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileManager::FromAuthorization(AppKit.NSWorkspaceAuthorization)",
			"Foundation.NSFileManager::GetDirectoryContent(Foundation.NSUrl,Foundation.NSArray,Foundation.NSDirectoryEnumerationOptions,Foundation.NSError&)",
			"Foundation.NSFileManager::GetEnumerator(Foundation.NSUrl,Foundation.NSString[],Foundation.NSDirectoryEnumerationOptions,Foundation.NSEnumerateErrorHandler)",
			"Foundation.NSFileManager::GetFileProviderServices(Foundation.NSUrl,System.Action`2<Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSFileProviderService>,Foundation.NSError>)",
			"Foundation.NSFileManager::GetMountedVolumes(Foundation.NSArray,Foundation.NSVolumeEnumerationOptions)",
			"Foundation.NSFileManager::GetRelationship(Foundation.NSUrlRelationship&,Foundation.NSSearchPathDirectory,Foundation.NSSearchPathDomain,Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileManager::GetRelationship(Foundation.NSUrlRelationship&,Foundation.NSUrl,Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileManager::GetUrl(Foundation.NSSearchPathDirectory,Foundation.NSSearchPathDomain,Foundation.NSUrl,System.Boolean,Foundation.NSError&)",
			"Foundation.NSFileManager::GetUrlForPublishingUbiquitousItem(Foundation.NSUrl,Foundation.NSDate&,Foundation.NSError&)",
			"Foundation.NSFileManager::IsUbiquitous(Foundation.NSUrl)",
			"Foundation.NSFileManager::Link(Foundation.NSUrl,Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileManager::Move(Foundation.NSUrl,Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileManager::Remove(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileManager::Replace(Foundation.NSUrl,Foundation.NSUrl,System.String,Foundation.NSFileManagerItemReplacementOptions,Foundation.NSUrl&,Foundation.NSError&)",
			"Foundation.NSFileManager::SetAttributes(Foundation.NSDictionary,System.String,Foundation.NSError&)",
			"Foundation.NSFileManager::SetUbiquitous(System.Boolean,Foundation.NSUrl,Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileManager::StartDownloadingUbiquitous(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileManager::TrashItem(Foundation.NSUrl,Foundation.NSUrl&,Foundation.NSError&)",
			"Foundation.NSFileManager::UnmountVolume(Foundation.NSUrl,Foundation.NSFileManagerUnmountOptions,System.Action`1<Foundation.NSError>)",
			"Foundation.NSFileManager_NSUserInformation::GetHomeDirectory(Foundation.NSFileManager,System.String)",
			"Foundation.NSFileManager_NSUserInformation::GetHomeDirectoryForCurrentUser(Foundation.NSFileManager)",
			"Foundation.NSFileManager_NSUserInformation::GetTemporaryDirectory(Foundation.NSFileManager)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldCopyItemAtPath(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSString,Foundation.NSString)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldCopyItemAtUrl(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSUrl,Foundation.NSUrl)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldLinkItemAtPath(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,System.String,System.String)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldLinkItemAtUrl(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSUrl,Foundation.NSUrl)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldMoveItemAtPath(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,System.String,System.String)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldMoveItemAtUrl(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSUrl,Foundation.NSUrl)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldProceedAfterErrorCopyingItem(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSError,Foundation.NSUrl,Foundation.NSUrl)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldProceedAfterErrorCopyingItem(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSError,System.String,System.String)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldProceedAfterErrorLinkingItem(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSError,Foundation.NSUrl,Foundation.NSUrl)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldProceedAfterErrorLinkingItem(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSError,System.String,System.String)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldProceedAfterErrorMovingItem(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSError,Foundation.NSUrl,Foundation.NSUrl)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldProceedAfterErrorMovingItem(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSError,System.String,System.String)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldProceedAfterErrorRemovingItem(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSError,Foundation.NSUrl)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldProceedAfterErrorRemovingItem(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSError,System.String)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldRemoveItemAtPath(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,System.String)",
			"Foundation.NSFileManagerDelegate_Extensions::ShouldRemoveItemAtUrl(Foundation.INSFileManagerDelegate,Foundation.NSFileManager,Foundation.NSUrl)",
			"Foundation.NSFilePresenter_Extensions::AccommodatePresentedItemDeletion(Foundation.INSFilePresenter,System.Action`1<Foundation.NSError>)",
			"Foundation.NSFilePresenter_Extensions::AccommodatePresentedSubitemDeletion(Foundation.INSFilePresenter,Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"Foundation.NSFilePresenter_Extensions::GetPresentedItemObservedUbiquityAttributes(Foundation.INSFilePresenter)",
			"Foundation.NSFilePresenter_Extensions::GetPrimaryPresentedItemUrl(Foundation.INSFilePresenter)",
			"Foundation.NSFilePresenter_Extensions::PresentedItemChanged(Foundation.INSFilePresenter)",
			"Foundation.NSFilePresenter_Extensions::PresentedItemChangedUbiquityAttributes(Foundation.INSFilePresenter,Foundation.NSSet`1<Foundation.NSString>)",
			"Foundation.NSFilePresenter_Extensions::PresentedItemGainedVersion(Foundation.INSFilePresenter,Foundation.NSFileVersion)",
			"Foundation.NSFilePresenter_Extensions::PresentedItemLostVersion(Foundation.INSFilePresenter,Foundation.NSFileVersion)",
			"Foundation.NSFilePresenter_Extensions::PresentedItemMoved(Foundation.INSFilePresenter,Foundation.NSUrl)",
			"Foundation.NSFilePresenter_Extensions::PresentedItemResolveConflictVersion(Foundation.INSFilePresenter,Foundation.NSFileVersion)",
			"Foundation.NSFilePresenter_Extensions::PresentedSubitemAppeared(Foundation.INSFilePresenter,Foundation.NSUrl)",
			"Foundation.NSFilePresenter_Extensions::PresentedSubitemChanged(Foundation.INSFilePresenter,Foundation.NSUrl)",
			"Foundation.NSFilePresenter_Extensions::PresentedSubitemGainedVersion(Foundation.INSFilePresenter,Foundation.NSUrl,Foundation.NSFileVersion)",
			"Foundation.NSFilePresenter_Extensions::PresentedSubitemLostVersion(Foundation.INSFilePresenter,Foundation.NSUrl,Foundation.NSFileVersion)",
			"Foundation.NSFilePresenter_Extensions::PresentedSubitemMoved(Foundation.INSFilePresenter,Foundation.NSUrl,Foundation.NSUrl)",
			"Foundation.NSFilePresenter_Extensions::PresentedSubitemResolvedConflictVersion(Foundation.INSFilePresenter,Foundation.NSUrl,Foundation.NSFileVersion)",
			"Foundation.NSFilePresenter_Extensions::RelinquishPresentedItemToReader(Foundation.INSFilePresenter,Foundation.NSFilePresenterReacquirer)",
			"Foundation.NSFilePresenter_Extensions::RelinquishPresentedItemToWriter(Foundation.INSFilePresenter,Foundation.NSFilePresenterReacquirer)",
			"Foundation.NSFilePresenter_Extensions::SavePresentedItemChanges(Foundation.INSFilePresenter,System.Action`1<Foundation.NSError>)",
			"Foundation.NSFileVersion::AddVersion(Foundation.NSUrl,Foundation.NSUrl,Foundation.NSFileVersionAddingOptions,Foundation.NSError&)",
			"Foundation.NSFileVersion::GetCurrentVersion(Foundation.NSUrl)",
			"Foundation.NSFileVersion::GetNonlocalVersions(Foundation.NSUrl,Foundation.NSFileVersionNonlocalVersionsCompletionHandler)",
			"Foundation.NSFileVersion::GetOtherVersions(Foundation.NSUrl)",
			"Foundation.NSFileVersion::GetSpecificVersion(Foundation.NSUrl,Foundation.NSObject)",
			"Foundation.NSFileVersion::GetUnresolvedConflictVersions(Foundation.NSUrl)",
			"Foundation.NSFileVersion::RemoveOtherVersions(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFileVersion::ReplaceItem(Foundation.NSUrl,Foundation.NSFileVersionReplacingOptions,Foundation.NSError&)",
			"Foundation.NSFileVersion::TemporaryDirectoryForItem(Foundation.NSUrl)",
			"Foundation.NSFileWrapper::.ctor(Foundation.NSCoder)",
			"Foundation.NSFileWrapper::.ctor(Foundation.NSData)",
			"Foundation.NSFileWrapper::.ctor(Foundation.NSDictionary)",
			"Foundation.NSFileWrapper::.ctor(Foundation.NSUrl)",
			"Foundation.NSFileWrapper::.ctor(Foundation.NSUrl,Foundation.NSFileWrapperReadingOptions,Foundation.NSError&)",
			"Foundation.NSFileWrapper::AddFileWrapper(Foundation.NSFileWrapper)",
			"Foundation.NSFileWrapper::AddRegularFile(Foundation.NSData,System.String)",
			"Foundation.NSFileWrapper::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSFileWrapper::KeyForFileWrapper(Foundation.NSFileWrapper)",
			"Foundation.NSFileWrapper::MatchesContentsOfURL(Foundation.NSUrl)",
			"Foundation.NSFileWrapper::Read(Foundation.NSUrl,Foundation.NSFileWrapperReadingOptions,Foundation.NSError&)",
			"Foundation.NSFileWrapper::RemoveFileWrapper(Foundation.NSFileWrapper)",
			"Foundation.NSFileWrapper::set_FileAttributes(Foundation.NSDictionary)",
			"Foundation.NSFileWrapper::set_Icon(AppKit.NSImage)",
			"Foundation.NSFileWrapper::Write(Foundation.NSUrl,Foundation.NSFileWrapperWritingOptions,Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSFormatter::Copy(Foundation.NSZone)",
			"Foundation.NSFormatter::EditingStringFor(Foundation.NSObject)",
			"Foundation.NSFormatter::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSFormatter::GetAttributedString(Foundation.NSObject,Foundation.NSDictionary)",
			"Foundation.NSFormatter::GetAttributedString(Foundation.NSObject,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"Foundation.NSFormatter::StringFor(Foundation.NSObject)",
			"Foundation.NSHost::Equals(Foundation.NSHost)",
			"Foundation.NSHttpCookie::.ctor(Foundation.NSDictionary)",
			"Foundation.NSHttpCookie::CookieFromProperties(Foundation.NSDictionary)",
			"Foundation.NSHttpCookie::CookiesWithResponseHeaderFields(Foundation.NSDictionary,Foundation.NSUrl)",
			"Foundation.NSHttpCookieStorage::CookiesForUrl(Foundation.NSUrl)",
			"Foundation.NSHttpCookieStorage::DeleteCookie(Foundation.NSHttpCookie)",
			"Foundation.NSHttpCookieStorage::GetCookiesForTask(Foundation.NSUrlSessionTask,System.Action`1<Foundation.NSHttpCookie[]>)",
			"Foundation.NSHttpCookieStorage::RemoveCookiesSinceDate(Foundation.NSDate)",
			"Foundation.NSHttpCookieStorage::SetCookie(Foundation.NSHttpCookie)",
			"Foundation.NSHttpCookieStorage::SetCookies(Foundation.NSHttpCookie[],Foundation.NSUrl,Foundation.NSUrl)",
			"Foundation.NSHttpCookieStorage::StoreCookies(Foundation.NSHttpCookie[],Foundation.NSUrlSessionTask)",
			"Foundation.NSHttpUrlResponse::.ctor(Foundation.NSCoder)",
			"Foundation.NSHttpUrlResponse::.ctor(Foundation.NSUrl,System.IntPtr,System.String,Foundation.NSDictionary)",
			"Foundation.NSHttpUrlResponse::.ctor(Foundation.NSUrl,System.String,System.IntPtr,System.String)",
			"Foundation.NSIndexPath::.ctor(Foundation.NSCoder)",
			"Foundation.NSIndexPath::Compare(Foundation.NSIndexPath)",
			"Foundation.NSIndexPath::Copy(Foundation.NSZone)",
			"Foundation.NSIndexPath::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSIndexSet::.ctor(Foundation.NSCoder)",
			"Foundation.NSIndexSet::.ctor(Foundation.NSIndexSet)",
			"Foundation.NSIndexSet::Contains(Foundation.NSIndexSet)",
			"Foundation.NSIndexSet::Copy(Foundation.NSZone)",
			"Foundation.NSIndexSet::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSIndexSet::IsEqual(Foundation.NSIndexSet)",
			"Foundation.NSIndexSet::MutableCopy(Foundation.NSZone)",
			"Foundation.NSInputStream::.ctor(Foundation.NSData)",
			"Foundation.NSInputStream::.ctor(Foundation.NSUrl)",
			"Foundation.NSInputStream::FromData(Foundation.NSData)",
			"Foundation.NSInputStream::FromUrl(Foundation.NSUrl)",
			"Foundation.NSInputStream::GetProperty(Foundation.NSString)",
			"Foundation.NSInputStream::SetProperty(Foundation.NSObject,Foundation.NSString)",
			"Foundation.NSInvocation::Invoke(Foundation.NSObject)",
			"Foundation.NSIso8601DateFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSIso8601DateFormatter::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSIso8601DateFormatter::Format(Foundation.NSDate,Foundation.NSTimeZone,Foundation.NSIso8601DateFormatOptions)",
			"Foundation.NSIso8601DateFormatter::set_TimeZone(Foundation.NSTimeZone)",
			"Foundation.NSIso8601DateFormatter::ToString(Foundation.NSDate)",
			"Foundation.NSItemProvider/<>c__1`1::<LoadObjectAsync>b__1_0(System.Threading.Tasks.Task`1<Foundation.INSItemProviderReading>)",
			"Foundation.NSItemProvider/<>c__2`1::<LoadObjectAsync>b__2_0(System.Threading.Tasks.Task`1<Foundation.INSItemProviderReading>)",
			"Foundation.NSItemProvider/<>c__3`1::<LoadObjectAsync>b__3_0(System.Threading.Tasks.Task`1<Foundation.INSItemProviderReading>)",
			"Foundation.NSItemProvider/<>c__DisplayClass0_0`1::<LoadObject>b__0(Foundation.INSItemProviderReading,Foundation.NSError)",
			"Foundation.NSItemProvider/<>c__DisplayClass1_0`1::<LoadObject>b__0(Foundation.INSItemProviderReading,Foundation.NSError)",
			"Foundation.NSItemProvider::.ctor(Foundation.INSItemProviderWriting)",
			"Foundation.NSItemProvider::.ctor(Foundation.NSObject,System.String)",
			"Foundation.NSItemProvider::.ctor(Foundation.NSUrl)",
			"Foundation.NSItemProvider::Copy(Foundation.NSZone)",
			"Foundation.NSItemProvider::LoadItem(System.String,Foundation.NSDictionary,System.Action`2<Foundation.NSObject,Foundation.NSError>)",
			"Foundation.NSItemProvider::LoadPreviewImage(Foundation.NSDictionary,System.Action`2<Foundation.NSObject,Foundation.NSError>)",
			"Foundation.NSItemProvider::RegisterCloudKitShare(CloudKit.CKShare,CloudKit.CKContainer)",
			"Foundation.NSItemProvider::RegisterObject(Foundation.INSItemProviderWriting,Foundation.NSItemProviderRepresentationVisibility)",
			"Foundation.NSItemProvider::set_TeamData(Foundation.NSData)",
			"Foundation.NSItemProviderWriting_Extensions::GetItemProviderVisibilityForTypeIdentifier(Foundation.INSItemProviderWriting,System.String)",
			"Foundation.NSItemProviderWriting_Extensions::GetWritableTypeIdentifiersForItemProvider(Foundation.INSItemProviderWriting)",
			"Foundation.NSJsonSerialization::Deserialize(Foundation.NSData,Foundation.NSJsonReadingOptions,Foundation.NSError&)",
			"Foundation.NSJsonSerialization::Deserialize(Foundation.NSInputStream,Foundation.NSJsonReadingOptions,Foundation.NSError&)",
			"Foundation.NSJsonSerialization::IsValidJSONObject(Foundation.NSObject)",
			"Foundation.NSJsonSerialization::Serialize(Foundation.NSObject,Foundation.NSJsonWritingOptions,Foundation.NSError&)",
			"Foundation.NSJsonSerialization::Serialize(Foundation.NSObject,Foundation.NSOutputStream,Foundation.NSJsonWritingOptions,Foundation.NSError&)",
			"Foundation.NSKeyedArchiver::.ctor(Foundation.NSMutableData)",
			"Foundation.NSKeyedArchiver::ArchiveRootObjectToFile(Foundation.NSObject,System.String)",
			"Foundation.NSKeyedArchiver::GetArchivedData(Foundation.NSObject)",
			"Foundation.NSKeyedArchiver::GetArchivedData(Foundation.NSObject,System.Boolean,Foundation.NSError&)",
			"Foundation.NSKeyedArchiverDelegate_Extensions::EncodedObject(Foundation.INSKeyedArchiverDelegate,Foundation.NSKeyedArchiver,Foundation.NSObject)",
			"Foundation.NSKeyedArchiverDelegate_Extensions::Finished(Foundation.INSKeyedArchiverDelegate,Foundation.NSKeyedArchiver)",
			"Foundation.NSKeyedArchiverDelegate_Extensions::Finishing(Foundation.INSKeyedArchiverDelegate,Foundation.NSKeyedArchiver)",
			"Foundation.NSKeyedArchiverDelegate_Extensions::ReplacingObject(Foundation.INSKeyedArchiverDelegate,Foundation.NSKeyedArchiver,Foundation.NSObject,Foundation.NSObject)",
			"Foundation.NSKeyedArchiverDelegate_Extensions::WillEncode(Foundation.INSKeyedArchiverDelegate,Foundation.NSKeyedArchiver,Foundation.NSObject)",
			"Foundation.NSKeyedUnarchiver::.ctor(Foundation.NSData)",
			"Foundation.NSKeyedUnarchiver::.ctor(Foundation.NSData,Foundation.NSError&)",
			"Foundation.NSKeyedUnarchiver::GetUnarchivedArray(Foundation.NSSet`1<ObjCRuntime.Class>,Foundation.NSData,Foundation.NSError&)",
			"Foundation.NSKeyedUnarchiver::GetUnarchivedArray(ObjCRuntime.Class,Foundation.NSData,Foundation.NSError&)",
			"Foundation.NSKeyedUnarchiver::GetUnarchivedDictionary(Foundation.NSSet`1<ObjCRuntime.Class>,Foundation.NSSet`1<ObjCRuntime.Class>,Foundation.NSData,Foundation.NSError&)",
			"Foundation.NSKeyedUnarchiver::GetUnarchivedDictionary(ObjCRuntime.Class,ObjCRuntime.Class,Foundation.NSData,Foundation.NSError&)",
			"Foundation.NSKeyedUnarchiver::GetUnarchivedObject(Foundation.NSSet`1<ObjCRuntime.Class>,Foundation.NSData,Foundation.NSError&)",
			"Foundation.NSKeyedUnarchiver::GetUnarchivedObject(ObjCRuntime.Class,Foundation.NSData,Foundation.NSError&)",
			"Foundation.NSKeyedUnarchiver::UnarchiveObject(Foundation.NSData)",
			"Foundation.NSKeyedUnarchiver::UnarchiveTopLevelObject(Foundation.NSData,Foundation.NSError&)",
			"Foundation.NSKeyedUnarchiverDelegate_Extensions::CannotDecodeClass(Foundation.INSKeyedUnarchiverDelegate,Foundation.NSKeyedUnarchiver,System.String,System.String[])",
			"Foundation.NSKeyedUnarchiverDelegate_Extensions::DecodedObject(Foundation.INSKeyedUnarchiverDelegate,Foundation.NSKeyedUnarchiver,Foundation.NSObject)",
			"Foundation.NSKeyedUnarchiverDelegate_Extensions::Finished(Foundation.INSKeyedUnarchiverDelegate,Foundation.NSKeyedUnarchiver)",
			"Foundation.NSKeyedUnarchiverDelegate_Extensions::Finishing(Foundation.INSKeyedUnarchiverDelegate,Foundation.NSKeyedUnarchiver)",
			"Foundation.NSKeyedUnarchiverDelegate_Extensions::ReplacingObject(Foundation.INSKeyedUnarchiverDelegate,Foundation.NSKeyedUnarchiver,Foundation.NSObject,Foundation.NSObject)",
			"Foundation.NSKeyValueSorting_NSMutableOrderedSet::SortUsingDescriptors(Foundation.NSMutableOrderedSet,Foundation.NSSortDescriptor[])",
			"Foundation.NSKeyValueSorting_NSOrderedSet::GetSortedArray(Foundation.NSOrderedSet,Foundation.NSSortDescriptor[])",
			"Foundation.NSLengthFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSLengthFormatter::set_NumberFormatter(Foundation.NSNumberFormatter)",
			"Foundation.NSLinguisticAnalysis::EnumerateLinguisticTags(Foundation.NSString,Foundation.NSRange,Foundation.NSString,Foundation.NSLinguisticTaggerOptions,Foundation.NSOrthography,Foundation.NSEnumerateLinguisticTagsEnumerator)",
			"Foundation.NSLinguisticAnalysis::GetLinguisticTags(Foundation.NSString,Foundation.NSRange,Foundation.NSString,Foundation.NSLinguisticTaggerOptions,Foundation.NSOrthography,Foundation.NSValue[]&)",
			"Foundation.NSLinguisticTagger::EnumerateTags(System.String,Foundation.NSRange,Foundation.NSLinguisticTaggerUnit,System.String,Foundation.NSLinguisticTaggerOptions,Foundation.NSOrthography,Foundation.LinguisticTagEnumerator)",
			"Foundation.NSLinguisticTagger::EnumerateTagsInRange(Foundation.NSRange,Foundation.NSString,Foundation.NSLinguisticTaggerOptions,Foundation.NSLingusticEnumerator)",
			"Foundation.NSLinguisticTagger::GetPossibleTags(System.IntPtr,Foundation.NSString,Foundation.NSRange&,Foundation.NSRange&,Foundation.NSArray&)",
			"Foundation.NSLinguisticTagger::GetTag(System.IntPtr,Foundation.NSString,Foundation.NSRange&,Foundation.NSRange&)",
			"Foundation.NSLinguisticTagger::GetTag(System.String,System.UIntPtr,Foundation.NSLinguisticTaggerUnit,System.String,Foundation.NSOrthography,Foundation.NSRange&)",
			"Foundation.NSLinguisticTagger::GetTags(System.String,Foundation.NSRange,Foundation.NSLinguisticTaggerUnit,System.String,Foundation.NSLinguisticTaggerOptions,Foundation.NSOrthography,Foundation.NSValue[]&)",
			"Foundation.NSLinguisticTagger::GetTagsInRange(Foundation.NSRange,Foundation.NSString,Foundation.NSLinguisticTaggerOptions,Foundation.NSArray&)",
			"Foundation.NSLinguisticTagger::SetOrthographyrange(Foundation.NSOrthography,Foundation.NSRange)",
			"Foundation.NSListFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSListFormatter::GetString(Foundation.NSObject)",
			"Foundation.NSListFormatter::set_ItemFormatter(Foundation.NSFormatter)",
			"Foundation.NSListFormatter::set_Locale(Foundation.NSLocale)",
			"Foundation.NSLocale::.ctor(Foundation.NSCoder)",
			"Foundation.NSLocale::Copy(Foundation.NSZone)",
			"Foundation.NSLocale::DisplayNameForKey(Foundation.NSString,System.String)",
			"Foundation.NSLocale::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSLocale::LocaleIdentifierFromComponents(Foundation.NSDictionary)",
			"Foundation.NSLocale::ObjectForKey(Foundation.NSString)",
			"Foundation.NSLock::LockBeforeDate(Foundation.NSDate)",
			"Foundation.NSMachPort::.ctor(Foundation.NSCoder)",
			"Foundation.NSMachPort::RemoveFromRunLoop(Foundation.NSRunLoop,Foundation.NSString)",
			"Foundation.NSMachPort::ScheduleInRunLoop(Foundation.NSRunLoop,Foundation.NSString)",
			"Foundation.NSMachPortDelegate_Extensions::MachMessageReceived(Foundation.INSMachPortDelegate,System.IntPtr)",
			"Foundation.NSMassFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSMassFormatter::set_NumberFormatter(Foundation.NSNumberFormatter)",
			"Foundation.NSMeasurement`1::.ctor(Foundation.NSCoder)",
			"Foundation.NSMeasurement`1::.ctor(System.Double,Foundation.NSUnit)",
			"Foundation.NSMeasurement`1::CanBeConvertedTo(Foundation.NSUnit)",
			"Foundation.NSMeasurement`1::Copy(Foundation.NSZone)",
			"Foundation.NSMeasurement`1::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSMeasurement`1::GetMeasurementByAdding(Foundation.NSMeasurement`1<UnitType>)",
			"Foundation.NSMeasurement`1::GetMeasurementByConverting(Foundation.NSUnit)",
			"Foundation.NSMeasurement`1::GetMeasurementBySubtracting(Foundation.NSMeasurement`1<UnitType>)",
			"Foundation.NSMeasurementFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSMeasurementFormatter::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSMeasurementFormatter::set_Locale(Foundation.NSLocale)",
			"Foundation.NSMeasurementFormatter::set_NumberFormatter(Foundation.NSNumberFormatter)",
			"Foundation.NSMeasurementFormatter::ToString(Foundation.NSMeasurement`1<Foundation.NSUnit>)",
			"Foundation.NSMeasurementFormatter::ToString(Foundation.NSUnit)",
			"Foundation.NSMetadataItem::.ctor(Foundation.NSUrl)",
			"Foundation.NSMetadataItem::GetHandle(Foundation.NSString)",
			"Foundation.NSMetadataItem::ValuesForAttributes(Foundation.NSArray)",
			"Foundation.NSMetadataQuery::IndexOfResult(Foundation.NSObject)",
			"Foundation.NSMetadataQuery::set_GroupingAttributes(Foundation.NSArray)",
			"Foundation.NSMetadataQuery::set_OperationQueue(Foundation.NSOperationQueue)",
			"Foundation.NSMetadataQuery::set_Predicate(Foundation.NSPredicate)",
			"Foundation.NSMetadataQueryDelegate_Extensions::ReplacementObjectForResultObject(Foundation.INSMetadataQueryDelegate,Foundation.NSMetadataQuery,Foundation.NSMetadataItem)",
			"Foundation.NSMetadataQueryDelegate_Extensions::ReplacementValueForAttributevalue(Foundation.INSMetadataQueryDelegate,Foundation.NSMetadataQuery,System.String,Foundation.NSObject)",
			"Foundation.NSMutableArray::.ctor(Foundation.NSCoder)",
			"Foundation.NSMutableArray::_InsertObjects(System.IntPtr,Foundation.NSIndexSet)",
			"Foundation.NSMutableArray::Add(Foundation.NSObject)",
			"Foundation.NSMutableArray::FromUrl(Foundation.NSUrl)",
			"Foundation.NSMutableArray::Insert(Foundation.NSObject,System.IntPtr)",
			"Foundation.NSMutableArray::InsertObjects(Foundation.NSObject[],Foundation.NSIndexSet)",
			"Foundation.NSMutableArray::RemoveObjectsAtIndexes(Foundation.NSIndexSet)",
			"Foundation.NSMutableArray::ReplaceObject(System.IntPtr,Foundation.NSObject)",
			"Foundation.NSMutableArray`1::Add(TValue)",
			"Foundation.NSMutableArray`1::Contains(TValue)",
			"Foundation.NSMutableArray`1::IndexOf(TValue)",
			"Foundation.NSMutableArray`1::Insert(TValue,System.IntPtr)",
			"Foundation.NSMutableArray`1::ReplaceObject(System.IntPtr,TValue)",
			"Foundation.NSMutableArray`1::set_Item(System.UIntPtr,TValue)",
			"Foundation.NSMutableAttributedString::.ctor(Foundation.NSAttributedString)",
			"Foundation.NSMutableAttributedString::.ctor(Foundation.NSCoder)",
			"Foundation.NSMutableAttributedString::.ctor(System.String,Foundation.NSDictionary)",
			"Foundation.NSMutableAttributedString::AddAttribute(Foundation.NSString,Foundation.NSObject,Foundation.NSRange)",
			"Foundation.NSMutableAttributedString::AddAttributes(Foundation.NSDictionary,Foundation.NSRange)",
			"Foundation.NSMutableAttributedString::Append(Foundation.NSAttributedString)",
			"Foundation.NSMutableAttributedString::Insert(Foundation.NSAttributedString,System.IntPtr)",
			"Foundation.NSMutableAttributedString::ReadFromData(Foundation.NSData,Foundation.NSDictionary,Foundation.NSDictionary&,Foundation.NSError&)",
			"Foundation.NSMutableAttributedString::ReadFromFile(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSDictionary&,Foundation.NSError&)",
			"Foundation.NSMutableAttributedString::ReadFromUrl(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>&,Foundation.NSError&)",
			"Foundation.NSMutableAttributedString::ReadFromUrl(Foundation.NSUrl,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>&,Foundation.NSError&)",
			"Foundation.NSMutableAttributedString::Replace(Foundation.NSRange,Foundation.NSAttributedString)",
			"Foundation.NSMutableAttributedString::SetAttributes(Foundation.NSDictionary,Foundation.NSRange)",
			"Foundation.NSMutableAttributedString::SetString(Foundation.NSAttributedString)",
			"Foundation.NSMutableCharacterSet::.ctor(Foundation.NSCoder)",
			"Foundation.NSMutableCharacterSet::AddCharacters(Foundation.NSString)",
			"Foundation.NSMutableCharacterSet::FromBitmapRepresentation(Foundation.NSData)",
			"Foundation.NSMutableCharacterSet::IntersectWith(Foundation.NSCharacterSet)",
			"Foundation.NSMutableCharacterSet::RemoveCharacters(Foundation.NSString)",
			"Foundation.NSMutableCharacterSet::UnionWith(Foundation.NSCharacterSet)",
			"Foundation.NSMutableCopyingWrapper::Copy(Foundation.NSZone)",
			"Foundation.NSMutableCopyingWrapper::MutableCopy(Foundation.NSZone)",
			"Foundation.NSMutableData::.ctor(Foundation.NSCoder)",
			"Foundation.NSMutableData::AppendData(Foundation.NSData)",
			"Foundation.NSMutableData::SetData(Foundation.NSData)",
			"Foundation.NSMutableDictionary::.ctor(Foundation.NSArray,Foundation.NSArray)",
			"Foundation.NSMutableDictionary::.ctor(Foundation.NSCoder)",
			"Foundation.NSMutableDictionary::.ctor(Foundation.NSDictionary)",
			"Foundation.NSMutableDictionary::.ctor(Foundation.NSDictionary,System.Boolean)",
			"Foundation.NSMutableDictionary::.ctor(Foundation.NSUrl)",
			"Foundation.NSMutableDictionary::AddEntries(Foundation.NSDictionary)",
			"Foundation.NSMutableDictionary::FromDictionary(Foundation.NSDictionary)",
			"Foundation.NSMutableDictionary::FromObjectAndKey(Foundation.NSObject,Foundation.NSObject)",
			"Foundation.NSMutableDictionary::FromObjectsAndKeysInternal(Foundation.NSArray,Foundation.NSArray)",
			"Foundation.NSMutableDictionary::FromObjectsAndKeysInternalCount(Foundation.NSArray,Foundation.NSArray,System.IntPtr)",
			"Foundation.NSMutableDictionary::FromSharedKeySet(Foundation.NSObject)",
			"Foundation.NSMutableDictionary::FromUrl(Foundation.NSUrl)",
			"Foundation.NSMutableDictionary::LowlevelSetObject(Foundation.NSObject,System.IntPtr)",
			"Foundation.NSMutableDictionary::RemoveObjectForKey(Foundation.NSObject)",
			"Foundation.NSMutableDictionary::SetObject(Foundation.NSObject,Foundation.NSObject)",
			"Foundation.NSMutableDictionary::System.Collections.IDictionary.Contains(System.Object)",
			"Foundation.NSMutableDictionary::System.Collections.IDictionary.get_Item(System.Object)",
			"Foundation.NSMutableDictionary::System.Collections.IDictionary.Remove(System.Object)",
			"Foundation.NSMutableDictionary::System.Collections.IDictionary.set_Item(System.Object,System.Object)",
			"Foundation.NSMutableDictionary`2::Add(TKey,TValue)",
			"Foundation.NSMutableDictionary`2::GenericFromObjectsAndKeysInternal(Foundation.NSArray,Foundation.NSArray)",
			"Foundation.NSMutableDictionary`2::KeysForObject(TValue)",
			"Foundation.NSMutableDictionary`2::ObjectForKey(TKey)",
			"Foundation.NSMutableDictionary`2::ObjectsForKeys(TKey[],TValue)",
			"Foundation.NSMutableDictionary`2::Remove(TKey)",
			"Foundation.NSMutableIndexSet::.ctor(Foundation.NSCoder)",
			"Foundation.NSMutableIndexSet::.ctor(Foundation.NSIndexSet)",
			"Foundation.NSMutableIndexSet::Add(Foundation.NSIndexSet)",
			"Foundation.NSMutableIndexSet::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSMutableIndexSet::Remove(Foundation.NSIndexSet)",
			"Foundation.NSMutableOrderedSet::.ctor(Foundation.NSArray)",
			"Foundation.NSMutableOrderedSet::.ctor(Foundation.NSCoder)",
			"Foundation.NSMutableOrderedSet::.ctor(Foundation.NSObject)",
			"Foundation.NSMutableOrderedSet::.ctor(Foundation.NSOrderedSet)",
			"Foundation.NSMutableOrderedSet::.ctor(Foundation.NSSet)",
			"Foundation.NSMutableOrderedSet::_AddObjects(Foundation.NSArray)",
			"Foundation.NSMutableOrderedSet::_InsertObjects(Foundation.NSArray,Foundation.NSIndexSet)",
			"Foundation.NSMutableOrderedSet::_RemoveObjects(Foundation.NSArray)",
			"Foundation.NSMutableOrderedSet::_ReplaceObjects(Foundation.NSIndexSet,Foundation.NSArray)",
			"Foundation.NSMutableOrderedSet::Add(Foundation.NSObject)",
			"Foundation.NSMutableOrderedSet::Insert(Foundation.NSObject,System.IntPtr)",
			"Foundation.NSMutableOrderedSet::InsertObjects(Foundation.NSObject[],Foundation.NSIndexSet)",
			"Foundation.NSMutableOrderedSet::Intersect(Foundation.NSOrderedSet)",
			"Foundation.NSMutableOrderedSet::Intersect(Foundation.NSSet)",
			"Foundation.NSMutableOrderedSet::MinusSet(Foundation.NSOrderedSet)",
			"Foundation.NSMutableOrderedSet::MinusSet(Foundation.NSSet)",
			"Foundation.NSMutableOrderedSet::MoveObjects(Foundation.NSIndexSet,System.IntPtr)",
			"Foundation.NSMutableOrderedSet::RemoveObject(Foundation.NSObject)",
			"Foundation.NSMutableOrderedSet::RemoveObjects(Foundation.NSIndexSet)",
			"Foundation.NSMutableOrderedSet::Replace(System.IntPtr,Foundation.NSObject)",
			"Foundation.NSMutableOrderedSet::ReplaceObjects(Foundation.NSIndexSet,Foundation.NSObject[])",
			"Foundation.NSMutableOrderedSet::SetObject(Foundation.NSObject,System.IntPtr)",
			"Foundation.NSMutableOrderedSet::UnionSet(Foundation.NSOrderedSet)",
			"Foundation.NSMutableOrderedSet::UnionSet(Foundation.NSSet)",
			"Foundation.NSMutableOrderedSet`1::Add(TKey)",
			"Foundation.NSMutableOrderedSet`1::Insert(TKey,System.IntPtr)",
			"Foundation.NSMutableOrderedSet`1::RemoveObject(TKey)",
			"Foundation.NSMutableOrderedSet`1::Replace(System.IntPtr,TKey)",
			"Foundation.NSMutableOrderedSet`1::set_Item(System.IntPtr,TKey)",
			"Foundation.NSMutableSet::.ctor(Foundation.NSArray)",
			"Foundation.NSMutableSet::.ctor(Foundation.NSCoder)",
			"Foundation.NSMutableSet::.ctor(Foundation.NSSet)",
			"Foundation.NSMutableSet::Add(Foundation.NSObject)",
			"Foundation.NSMutableSet::MinusSet(Foundation.NSSet)",
			"Foundation.NSMutableSet::Remove(Foundation.NSObject)",
			"Foundation.NSMutableSet::UnionSet(Foundation.NSSet)",
			"Foundation.NSMutableSet`1::Add(TKey)",
			"Foundation.NSMutableSet`1::Contains(TKey)",
			"Foundation.NSMutableSet`1::LookupMember(TKey)",
			"Foundation.NSMutableSet`1::op_Addition(Foundation.NSMutableSet`1<TKey>,Foundation.NSMutableSet`1<TKey>)",
			"Foundation.NSMutableSet`1::Remove(TKey)",
			"Foundation.NSMutableString::.ctor(Foundation.NSCoder)",
			"Foundation.NSMutableString::Append(Foundation.NSString)",
			"Foundation.NSMutableString::ApplyTransform(Foundation.NSString,System.Boolean,Foundation.NSRange,Foundation.NSRange&)",
			"Foundation.NSMutableString::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSMutableString::Insert(Foundation.NSString,System.IntPtr)",
			"Foundation.NSMutableString::ReplaceCharactersInRange(Foundation.NSRange,Foundation.NSString)",
			"Foundation.NSMutableString::ReplaceOcurrences(Foundation.NSString,Foundation.NSString,Foundation.NSStringCompareOptions,Foundation.NSRange)",
			"Foundation.NSMutableString::SetString(Foundation.NSString)",
			"Foundation.NSMutableUrlRequest::.ctor(Foundation.NSCoder)",
			"Foundation.NSMutableUrlRequest::.ctor(Foundation.NSUrl)",
			"Foundation.NSMutableUrlRequest::.ctor(Foundation.NSUrl,Foundation.NSUrlRequestCachePolicy,System.Double)",
			"Foundation.NSMutableUrlRequest::set_Body(Foundation.NSData)",
			"Foundation.NSMutableUrlRequest::set_BodyStream(Foundation.NSInputStream)",
			"Foundation.NSMutableUrlRequest::set_Headers(Foundation.NSDictionary)",
			"Foundation.NSMutableUrlRequest::set_MainDocumentURL(Foundation.NSUrl)",
			"Foundation.NSMutableUrlRequest::set_Url(Foundation.NSUrl)",
			"Foundation.NSNetService::DataFromTxtRecord(Foundation.NSDictionary)",
			"Foundation.NSNetService::DictionaryFromTxtRecord(Foundation.NSData)",
			"Foundation.NSNetService::Schedule(Foundation.NSRunLoop,Foundation.NSString)",
			"Foundation.NSNetService::SetTxtRecordData(Foundation.NSData)",
			"Foundation.NSNetService::Unschedule(Foundation.NSRunLoop,Foundation.NSString)",
			"Foundation.NSNetServiceBrowser::Schedule(Foundation.NSRunLoop,Foundation.NSString)",
			"Foundation.NSNetServiceBrowser::Unschedule(Foundation.NSRunLoop,Foundation.NSString)",
			"Foundation.NSNetServiceBrowserDelegate_Extensions::DomainRemoved(Foundation.INSNetServiceBrowserDelegate,Foundation.NSNetServiceBrowser,System.String,System.Boolean)",
			"Foundation.NSNetServiceBrowserDelegate_Extensions::FoundDomain(Foundation.INSNetServiceBrowserDelegate,Foundation.NSNetServiceBrowser,System.String,System.Boolean)",
			"Foundation.NSNetServiceBrowserDelegate_Extensions::FoundService(Foundation.INSNetServiceBrowserDelegate,Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)",
			"Foundation.NSNetServiceBrowserDelegate_Extensions::NotSearched(Foundation.INSNetServiceBrowserDelegate,Foundation.NSNetServiceBrowser,Foundation.NSDictionary)",
			"Foundation.NSNetServiceBrowserDelegate_Extensions::SearchStarted(Foundation.INSNetServiceBrowserDelegate,Foundation.NSNetServiceBrowser)",
			"Foundation.NSNetServiceBrowserDelegate_Extensions::SearchStopped(Foundation.INSNetServiceBrowserDelegate,Foundation.NSNetServiceBrowser)",
			"Foundation.NSNetServiceBrowserDelegate_Extensions::ServiceRemoved(Foundation.INSNetServiceBrowserDelegate,Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)",
			"Foundation.NSNetServiceDelegate_Extensions::AddressResolved(Foundation.INSNetServiceDelegate,Foundation.NSNetService)",
			"Foundation.NSNetServiceDelegate_Extensions::DidAcceptConnection(Foundation.INSNetServiceDelegate,Foundation.NSNetService,Foundation.NSInputStream,Foundation.NSOutputStream)",
			"Foundation.NSNetServiceDelegate_Extensions::Published(Foundation.INSNetServiceDelegate,Foundation.NSNetService)",
			"Foundation.NSNetServiceDelegate_Extensions::PublishFailure(Foundation.INSNetServiceDelegate,Foundation.NSNetService,Foundation.NSDictionary)",
			"Foundation.NSNetServiceDelegate_Extensions::ResolveFailure(Foundation.INSNetServiceDelegate,Foundation.NSNetService,Foundation.NSDictionary)",
			"Foundation.NSNetServiceDelegate_Extensions::Stopped(Foundation.INSNetServiceDelegate,Foundation.NSNetService)",
			"Foundation.NSNetServiceDelegate_Extensions::UpdatedTxtRecordData(Foundation.INSNetServiceDelegate,Foundation.NSNetService,Foundation.NSData)",
			"Foundation.NSNetServiceDelegate_Extensions::WillPublish(Foundation.INSNetServiceDelegate,Foundation.NSNetService)",
			"Foundation.NSNetServiceDelegate_Extensions::WillResolve(Foundation.INSNetServiceDelegate,Foundation.NSNetService)",
			"Foundation.NSNotification::.ctor(Foundation.NSCoder)",
			"Foundation.NSNotification::Copy(Foundation.NSZone)",
			"Foundation.NSNotification::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSNotification::FromName(System.String,Foundation.NSObject)",
			"Foundation.NSNotification::FromName(System.String,Foundation.NSObject,Foundation.NSDictionary)",
			"Foundation.NSNotificationCenter::AddObserver(System.String,Foundation.NSObject,Foundation.NSOperationQueue,System.Action`1<Foundation.NSNotification>)",
			"Foundation.NSNotificationCenter::PostNotification(Foundation.NSNotification)",
			"Foundation.NSNotificationCenter::PostNotificationName(System.String,Foundation.NSObject)",
			"Foundation.NSNotificationCenter::PostNotificationName(System.String,Foundation.NSObject,Foundation.NSDictionary)",
			"Foundation.NSNotificationQueue::.ctor(Foundation.NSNotificationCenter)",
			"Foundation.NSNotificationQueue::DequeueNotificationsMatchingcoalesceMask(Foundation.NSNotification,Foundation.NSNotificationCoalescing)",
			"Foundation.NSNotificationQueue::EnqueueNotification(Foundation.NSNotification,Foundation.NSPostingStyle)",
			"Foundation.NSNotificationQueue::EnqueueNotification(Foundation.NSNotification,Foundation.NSPostingStyle,Foundation.NSNotificationCoalescing,Foundation.NSString[])",
			"Foundation.NSNull::.ctor(Foundation.NSCoder)",
			"Foundation.NSNull::Copy(Foundation.NSZone)",
			"Foundation.NSNull::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSNull::RunAction(System.String,Foundation.NSObject,Foundation.NSDictionary)",
			"Foundation.NSNumber::.ctor(Foundation.NSCoder)",
			"Foundation.NSNumber::Compare(Foundation.NSNumber)",
			"Foundation.NSNumber::DescriptionWithLocale(Foundation.NSLocale)",
			"Foundation.NSNumber::IsEqualToNumber(Foundation.NSNumber)",
			"Foundation.NSNumberFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSNumberFormatter::LocalizedStringFromNumbernumberStyle(Foundation.NSNumber,Foundation.NSNumberFormatterStyle)",
			"Foundation.NSNumberFormatter::set_Locale(Foundation.NSLocale)",
			"Foundation.NSNumberFormatter::set_Maximum(Foundation.NSNumber)",
			"Foundation.NSNumberFormatter::set_Minimum(Foundation.NSNumber)",
			"Foundation.NSNumberFormatter::set_Multiplier(Foundation.NSNumber)",
			"Foundation.NSNumberFormatter::set_RoundingIncrement(Foundation.NSNumber)",
			"Foundation.NSNumberFormatter::set_TextAttributesForNegativeInfinity(Foundation.NSDictionary)",
			"Foundation.NSNumberFormatter::set_TextAttributesForNegativeValues(Foundation.NSDictionary)",
			"Foundation.NSNumberFormatter::set_TextAttributesForNil(Foundation.NSDictionary)",
			"Foundation.NSNumberFormatter::set_TextAttributesForNotANumber(Foundation.NSDictionary)",
			"Foundation.NSNumberFormatter::set_TextAttributesForPositiveInfinity(Foundation.NSDictionary)",
			"Foundation.NSNumberFormatter::set_TextAttributesForPositiveValues(Foundation.NSDictionary)",
			"Foundation.NSNumberFormatter::set_TextAttributesForZero(Foundation.NSDictionary)",
			"Foundation.NSNumberFormatter::StringFromNumber(Foundation.NSNumber)",
			"Foundation.NSObject::AddObserver(Foundation.NSObject,Foundation.NSString,Foundation.NSKeyValueObservingOptions,System.IntPtr)",
			"Foundation.NSObject::BeginInvokeOnMainThread(System.Action)",
			"Foundation.NSObject::BeginInvokeOnMainThread(System.Threading.SendOrPostCallback,System.Object)",
			"Foundation.NSObject::Bind(Foundation.NSString,Foundation.NSObject,System.String,Foundation.NSDictionary)",
			"Foundation.NSObject::CancelPreviousPerformRequest(Foundation.NSObject)",
			"Foundation.NSObject::CancelPreviousPerformRequest(Foundation.NSObject,ObjCRuntime.Selector,Foundation.NSObject)",
			"Foundation.NSObject::CommitEditing(Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"Foundation.NSObject::DidChange(Foundation.NSKeyValueChange,Foundation.NSIndexSet,Foundation.NSString)",
			"Foundation.NSObject::DidChange(Foundation.NSString,Foundation.NSKeyValueSetMutationKind,Foundation.NSSet)",
			"Foundation.NSObject::FromObject(System.Object)",
			"Foundation.NSObject::GetBindingInfo(Foundation.NSString)",
			"Foundation.NSObject::GetBindingOptionDescriptions(Foundation.NSString)",
			"Foundation.NSObject::GetBindingValueClass(Foundation.NSString)",
			"Foundation.NSObject::GetDefaultPlaceholder(Foundation.NSObject,Foundation.NSString)",
			"Foundation.NSObject::GetKeyPathsForValuesAffecting(Foundation.NSString)",
			"Foundation.NSObject::InvokeOnMainThread(ObjCRuntime.Selector,Foundation.NSObject,System.Boolean)",
			"Foundation.NSObject::IsEqual(Foundation.NSObject)",
			"Foundation.NSObject::IsKindOfClass(ObjCRuntime.Class)",
			"Foundation.NSObject::IsMemberOfClass(ObjCRuntime.Class)",
			"Foundation.NSObject::ObjectDidEndEditing(Foundation.NSObject)",
			"Foundation.NSObject::ObserveValue(Foundation.NSString,Foundation.NSObject,Foundation.NSDictionary,System.IntPtr)",
			"Foundation.NSObject::PerformSelector(ObjCRuntime.Selector,Foundation.NSObject)",
			"Foundation.NSObject::PerformSelector(ObjCRuntime.Selector,Foundation.NSObject,Foundation.NSObject)",
			"Foundation.NSObject::PerformSelector(ObjCRuntime.Selector,Foundation.NSObject,System.Double)",
			"Foundation.NSObject::PerformSelector(ObjCRuntime.Selector,Foundation.NSObject,System.Double,Foundation.NSString[])",
			"Foundation.NSObject::PerformSelector(ObjCRuntime.Selector,Foundation.NSThread,Foundation.NSObject,System.Boolean)",
			"Foundation.NSObject::PerformSelector(ObjCRuntime.Selector,Foundation.NSThread,Foundation.NSObject,System.Boolean,Foundation.NSString[])",
			"Foundation.NSObject::RemoveObserver(Foundation.NSObject,Foundation.NSString)",
			"Foundation.NSObject::RemoveObserver(Foundation.NSObject,Foundation.NSString,System.IntPtr)",
			"Foundation.NSObject::RespondsToSelector(ObjCRuntime.Selector)",
			"Foundation.NSObject::SetDefaultPlaceholder(Foundation.NSObject,Foundation.NSObject,Foundation.NSString)",
			"Foundation.NSObject::SetNilValueForKey(Foundation.NSString)",
			"Foundation.NSObject::SetValueForKey(Foundation.NSObject,Foundation.NSString)",
			"Foundation.NSObject::SetValueForKeyPath(Foundation.NSObject,Foundation.NSString)",
			"Foundation.NSObject::SetValueForKeyPath(ObjCRuntime.NativeHandle,Foundation.NSString)",
			"Foundation.NSObject::SetValueForUndefinedKey(Foundation.NSObject,Foundation.NSString)",
			"Foundation.NSObject::SetValuesForKeysWithDictionary(Foundation.NSDictionary)",
			"Foundation.NSObject::Unbind(Foundation.NSString)",
			"Foundation.NSObject::ValueForKey(Foundation.NSString)",
			"Foundation.NSObject::ValueForKeyPath(Foundation.NSString)",
			"Foundation.NSObject::ValueForUndefinedKey(Foundation.NSString)",
			"Foundation.NSObject::WillChange(Foundation.NSKeyValueChange,Foundation.NSIndexSet,Foundation.NSString)",
			"Foundation.NSObject::WillChange(Foundation.NSString,Foundation.NSKeyValueSetMutationKind,Foundation.NSSet)",
			"Foundation.NSObjectProtocol_Extensions::GetDebugDescription(Foundation.INSObjectProtocol)",
			"Foundation.NSObjectProtocolWrapper::IsEqual(Foundation.NSObject)",
			"Foundation.NSObjectProtocolWrapper::IsKindOfClass(ObjCRuntime.Class)",
			"Foundation.NSObjectProtocolWrapper::IsMemberOfClass(ObjCRuntime.Class)",
			"Foundation.NSObjectProtocolWrapper::PerformSelector(ObjCRuntime.Selector,Foundation.NSObject)",
			"Foundation.NSObjectProtocolWrapper::PerformSelector(ObjCRuntime.Selector,Foundation.NSObject,Foundation.NSObject)",
			"Foundation.NSObjectProtocolWrapper::RespondsToSelector(ObjCRuntime.Selector)",
			"Foundation.NSOperation::AddDependency(Foundation.NSOperation)",
			"Foundation.NSOperation::RemoveDependency(Foundation.NSOperation)",
			"Foundation.NSOperationQueue::AddOperation(Foundation.NSOperation)",
			"Foundation.NSOperationQueue::set_UnderlyingQueue(CoreFoundation.DispatchQueue)",
			"Foundation.NSOrderedSet::.ctor(Foundation.NSArray)",
			"Foundation.NSOrderedSet::.ctor(Foundation.NSCoder)",
			"Foundation.NSOrderedSet::.ctor(Foundation.NSObject)",
			"Foundation.NSOrderedSet::.ctor(Foundation.NSOrderedSet)",
			"Foundation.NSOrderedSet::.ctor(Foundation.NSSet)",
			"Foundation.NSOrderedSet::Contains(Foundation.NSObject)",
			"Foundation.NSOrderedSet::Copy(Foundation.NSZone)",
			"Foundation.NSOrderedSet::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSOrderedSet::IndexOf(Foundation.NSObject)",
			"Foundation.NSOrderedSet::Intersects(Foundation.NSOrderedSet)",
			"Foundation.NSOrderedSet::Intersects(Foundation.NSSet)",
			"Foundation.NSOrderedSet::IsEqualToOrderedSet(Foundation.NSOrderedSet)",
			"Foundation.NSOrderedSet::IsSubset(Foundation.NSOrderedSet)",
			"Foundation.NSOrderedSet::IsSubset(Foundation.NSSet)",
			"Foundation.NSOrderedSet::MakeNSOrderedSet(T[])",
			"Foundation.NSOrderedSet::MutableCopy(Foundation.NSZone)",
			"Foundation.NSOrderedSet`1::Contains(TKey)",
			"Foundation.NSOrderedSet`1::IndexOf(TKey)",
			"Foundation.NSOrthography::.ctor(Foundation.NSCoder)",
			"Foundation.NSOrthography::.ctor(System.String,Foundation.NSDictionary)",
			"Foundation.NSOrthography::Copy(Foundation.NSZone)",
			"Foundation.NSOrthography::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSOutputStream::GetProperty(Foundation.NSString)",
			"Foundation.NSOutputStream::SetProperty(Foundation.NSObject,Foundation.NSString)",
			"Foundation.NSPersonNameComponents::.ctor(Foundation.NSCoder)",
			"Foundation.NSPersonNameComponents::Copy(Foundation.NSZone)",
			"Foundation.NSPersonNameComponents::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSPersonNameComponents::set_PhoneticRepresentation(Foundation.NSPersonNameComponents)",
			"Foundation.NSPersonNameComponentsFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSPersonNameComponentsFormatter::GetAnnotatedString(Foundation.NSPersonNameComponents)",
			"Foundation.NSPersonNameComponentsFormatter::GetLocalizedString(Foundation.NSPersonNameComponents,Foundation.NSPersonNameComponentsFormatterStyle,Foundation.NSPersonNameComponentsFormatterOptions)",
			"Foundation.NSPersonNameComponentsFormatter::GetString(Foundation.NSPersonNameComponents)",
			"Foundation.NSPort::.ctor(Foundation.NSCoder)",
			"Foundation.NSPort::Copy(Foundation.NSZone)",
			"Foundation.NSPort::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSPort::RemoveFromRunLoop(Foundation.NSRunLoop,Foundation.NSString)",
			"Foundation.NSPort::ScheduleInRunLoop(Foundation.NSRunLoop,Foundation.NSString)",
			"Foundation.NSPort::SendBeforeDate(Foundation.NSDate,Foundation.NSMutableArray,Foundation.NSPort,System.UIntPtr)",
			"Foundation.NSPort::SendBeforeDate(Foundation.NSDate,System.UIntPtr,Foundation.NSMutableArray,Foundation.NSPort,System.UIntPtr)",
			"Foundation.NSPortDelegate_Extensions::MessageReceived(Foundation.INSPortDelegate,Foundation.NSPortMessage)",
			"Foundation.NSPortMessage::.ctor(Foundation.NSPort,Foundation.NSPort,Foundation.NSArray)",
			"Foundation.NSPortMessage::SendBefore(Foundation.NSDate)",
			"Foundation.NSPortNameServer::RegisterPort(Foundation.NSPort,System.String)",
			"Foundation.NSPredicate::.ctor(Foundation.NSCoder)",
			"Foundation.NSPredicate::Copy(Foundation.NSZone)",
			"Foundation.NSPredicate::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSPredicate::EvaluateWithObject(Foundation.NSObject)",
			"Foundation.NSPredicate::EvaluateWithObject(Foundation.NSObject,Foundation.NSDictionary)",
			"Foundation.NSPredicate::PredicateWithSubstitutionVariables(Foundation.NSDictionary)",
			"Foundation.NSPredicateSupport_NSArray::FilterUsingPredicate(Foundation.NSArray,Foundation.NSArray)",
			"Foundation.NSPredicateSupport_NSMutableArray::FilterUsingPredicate(Foundation.NSMutableArray,Foundation.NSPredicate)",
			"Foundation.NSPredicateSupport_NSMutableOrderedSet::FilterUsingPredicate(Foundation.NSMutableOrderedSet,Foundation.NSPredicate)",
			"Foundation.NSPredicateSupport_NSMutableSet::FilterUsingPredicate(Foundation.NSMutableSet,Foundation.NSPredicate)",
			"Foundation.NSPredicateSupport_NSOrderedSet::FilterUsingPredicate(Foundation.NSOrderedSet,Foundation.NSPredicate)",
			"Foundation.NSPredicateSupport_NSSet::FilterUsingPredicate(Foundation.NSSet,Foundation.NSPredicate)",
			"Foundation.NSProcessInfo::EndActivity(Foundation.NSObject)",
			"Foundation.NSProcessInfo_NSUserInformation::GetFullUserName(Foundation.NSProcessInfo)",
			"Foundation.NSProcessInfo_NSUserInformation::GetUserName(Foundation.NSProcessInfo)",
			"Foundation.NSProgress::.ctor(Foundation.NSProgress,Foundation.NSDictionary)",
			"Foundation.NSProgress::AddChild(Foundation.NSProgress,System.Int64)",
			"Foundation.NSProgress::AddSubscriberForFile(Foundation.NSUrl,System.Action`1<Foundation.NSProgress>)",
			"Foundation.NSProgress::FromTotalUnitCount(System.Int64,Foundation.NSProgress,System.Int64)",
			"Foundation.NSProgress::RemoveSubscriber(Foundation.NSObject)",
			"Foundation.NSProgress::set__EstimatedTimeRemaining(Foundation.NSNumber)",
			"Foundation.NSProgress::set__FileCompletedCount(Foundation.NSNumber)",
			"Foundation.NSProgress::set__FileTotalCount(Foundation.NSNumber)",
			"Foundation.NSProgress::set__Throughput(Foundation.NSNumber)",
			"Foundation.NSProgress::set_FileUrl(Foundation.NSUrl)",
			"Foundation.NSProgress::set_Kind(Foundation.NSString)",
			"Foundation.NSProgress::SetUserInfo(Foundation.NSObject,Foundation.NSString)",
			"Foundation.NSPropertyListSerialization::DataWithPropertyList(Foundation.NSObject,Foundation.NSPropertyListFormat,Foundation.NSPropertyListWriteOptions,Foundation.NSError&)",
			"Foundation.NSPropertyListSerialization::IsValidForFormat(Foundation.NSObject,Foundation.NSPropertyListFormat)",
			"Foundation.NSPropertyListSerialization::PropertyListWithData(Foundation.NSData,Foundation.NSPropertyListReadOptions,Foundation.NSPropertyListFormat&,Foundation.NSError&)",
			"Foundation.NSPropertyListSerialization::PropertyListWithStream(Foundation.NSInputStream,Foundation.NSPropertyListReadOptions,Foundation.NSPropertyListFormat&,Foundation.NSError&)",
			"Foundation.NSPropertyListSerialization::WritePropertyList(Foundation.NSObject,Foundation.NSOutputStream,Foundation.NSPropertyListFormat,Foundation.NSPropertyListWriteOptions,Foundation.NSError&)",
			"Foundation.NSPurgeableData::.ctor(Foundation.NSCoder)",
			"Foundation.NSPurgeableData::Copy(Foundation.NSZone)",
			"Foundation.NSPurgeableData::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSPurgeableData::MutableCopy(Foundation.NSZone)",
			"Foundation.NSRecursiveLock::LockBeforeDate(Foundation.NSDate)",
			"Foundation.NSRegularExpression::.ctor(Foundation.NSCoder)",
			"Foundation.NSRegularExpression::.ctor(Foundation.NSString,Foundation.NSRegularExpressionOptions,Foundation.NSError&)",
			"Foundation.NSRegularExpression::Copy(Foundation.NSZone)",
			"Foundation.NSRegularExpression::Create(Foundation.NSString,Foundation.NSRegularExpressionOptions,Foundation.NSError&)",
			"Foundation.NSRegularExpression::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSRegularExpression::EnumerateMatches(Foundation.NSString,Foundation.NSMatchingOptions,Foundation.NSRange,Foundation.NSMatchEnumerator)",
			"Foundation.NSRegularExpression::GetEscapedPattern(Foundation.NSString)",
			"Foundation.NSRegularExpression::GetEscapedTemplate(Foundation.NSString)",
			"Foundation.NSRegularExpression::GetMatches(Foundation.NSString,Foundation.NSMatchingOptions,Foundation.NSRange)",
			"Foundation.NSRegularExpression::GetNumberOfMatches(Foundation.NSString,Foundation.NSMatchingOptions,Foundation.NSRange)",
			"Foundation.NSRegularExpression::GetReplacementString(Foundation.NSTextCheckingResult,Foundation.NSString,System.IntPtr,Foundation.NSString)",
			"Foundation.NSRegularExpression::ReplaceMatches(Foundation.NSMutableString,Foundation.NSMatchingOptions,Foundation.NSRange,Foundation.NSString)",
			"Foundation.NSRelativeDateTimeFormatter::.ctor(Foundation.NSCoder)",
			"Foundation.NSRelativeDateTimeFormatter::GetLocalizedString(Foundation.NSDate,Foundation.NSDate)",
			"Foundation.NSRelativeDateTimeFormatter::GetLocalizedString(Foundation.NSDateComponents)",
			"Foundation.NSRelativeDateTimeFormatter::GetString(Foundation.NSObject)",
			"Foundation.NSRelativeDateTimeFormatter::set_Calendar(Foundation.NSCalendar)",
			"Foundation.NSRelativeDateTimeFormatter::set_Locale(Foundation.NSLocale)",
			"Foundation.NSRunLoop::AcceptInputForMode(Foundation.NSString,Foundation.NSDate)",
			"Foundation.NSRunLoop::AddTimer(Foundation.NSTimer,Foundation.NSString)",
			"Foundation.NSRunLoop::LimitDateForMode(Foundation.NSString)",
			"Foundation.NSRunLoop::RunUntil(Foundation.NSDate)",
			"Foundation.NSRunLoop::RunUntil(Foundation.NSString,Foundation.NSDate)",
			"Foundation.NSScriptCommand::.ctor(Foundation.NSCoder)",
			"Foundation.NSScriptCommand::.ctor(Foundation.NSScriptCommandDescription)",
			"Foundation.NSScriptCommand::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSScriptCommandDescription::.ctor(Foundation.NSCoder)",
			"Foundation.NSScriptCommandDescription::.ctor(Foundation.NSString,Foundation.NSString,Foundation.NSDictionary)",
			"Foundation.NSScriptCommandDescription::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSScriptCommandDescription::FCCAppleEventCodeForArgument(Foundation.NSString)",
			"Foundation.NSScriptCommandDescription::GetNSTypeForArgument(Foundation.NSString)",
			"Foundation.NSScriptCommandDescription::NSIsOptionalArgument(Foundation.NSString)",
			"Foundation.NSSecureCodingWrapper::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSSet::.ctor(Foundation.NSArray)",
			"Foundation.NSSet::.ctor(Foundation.NSCoder)",
			"Foundation.NSSet::.ctor(Foundation.NSSet)",
			"Foundation.NSSet::Contains(Foundation.NSObject)",
			"Foundation.NSSet::Copy(Foundation.NSZone)",
			"Foundation.NSSet::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSSet::IntersectsSet(Foundation.NSSet)",
			"Foundation.NSSet::IsEqualToSet(Foundation.NSSet)",
			"Foundation.NSSet::IsSubsetOf(Foundation.NSSet)",
			"Foundation.NSSet::LookupMember(Foundation.NSObject)",
			"Foundation.NSSet::MutableCopy(Foundation.NSZone)",
			"Foundation.NSSet::SetByAddingObjectsFromSet(Foundation.NSSet)",
			"Foundation.NSSet`1::Contains(TKey)",
			"Foundation.NSSet`1::LookupMember(TKey)",
			"Foundation.NSSet`1::op_Addition(Foundation.NSSet`1<TKey>,Foundation.NSSet`1<TKey>)",
			"Foundation.NSSortDescriptor::.ctor(Foundation.NSCoder)",
			"Foundation.NSSortDescriptor::.ctor(System.String,System.Boolean,ObjCRuntime.Selector)",
			"Foundation.NSSortDescriptor::Compare(Foundation.NSObject,Foundation.NSObject)",
			"Foundation.NSSortDescriptor::Copy(Foundation.NSZone)",
			"Foundation.NSSortDescriptor::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSSortDescriptorSorting_NSMutableArray::SortUsingDescriptors(Foundation.NSMutableArray,Foundation.NSSortDescriptor[])",
			"Foundation.NSStream::Schedule(Foundation.NSRunLoop,Foundation.NSString)",
			"Foundation.NSStream::Unschedule(Foundation.NSRunLoop,Foundation.NSString)",
			"Foundation.NSStreamDelegate_Extensions::HandleEvent(Foundation.INSStreamDelegate,Foundation.NSStream,Foundation.NSStreamEvent)",
			"Foundation.NSString::.ctor(Foundation.NSCoder)",
			"Foundation.NSString::.ctor(Foundation.NSData,Foundation.NSStringEncoding)",
			"Foundation.NSString::AppendPathComponent(Foundation.NSString)",
			"Foundation.NSString::AppendPathExtension(Foundation.NSString)",
			"Foundation.NSString::BoundingRectWithSize(CoreGraphics.CGSize,Foundation.NSStringDrawingOptions,Foundation.NSDictionary)",
			"Foundation.NSString::Capitalize(Foundation.NSLocale)",
			"Foundation.NSString::CommonPrefix(Foundation.NSString,Foundation.NSStringCompareOptions)",
			"Foundation.NSString::Compare(Foundation.NSString)",
			"Foundation.NSString::Compare(Foundation.NSString,Foundation.NSStringCompareOptions)",
			"Foundation.NSString::Compare(Foundation.NSString,Foundation.NSStringCompareOptions,Foundation.NSRange)",
			"Foundation.NSString::Compare(Foundation.NSString,Foundation.NSStringCompareOptions,Foundation.NSRange,Foundation.NSLocale)",
			"Foundation.NSString::Contains(Foundation.NSString)",
			"Foundation.NSString::Copy(Foundation.NSZone)",
			"Foundation.NSString::DetectStringEncoding(Foundation.NSData,Foundation.NSDictionary,System.String&,System.Boolean&)",
			"Foundation.NSString::DrawString(CoreGraphics.CGPoint,Foundation.NSDictionary)",
			"Foundation.NSString::DrawString(CoreGraphics.CGRect,Foundation.NSDictionary)",
			"Foundation.NSString::DrawString(CoreGraphics.CGRect,Foundation.NSStringDrawingOptions,Foundation.NSDictionary)",
			"Foundation.NSString::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSString::Equals(Foundation.NSString,Foundation.NSString)",
			"Foundation.NSString::GetLocalizedUserNotificationString(Foundation.NSString,Foundation.NSObject[])",
			"Foundation.NSString::GetObject(Foundation.NSData,System.String,Foundation.NSError&)",
			"Foundation.NSString::GetReadableTypesForPasteboard(AppKit.NSPasteboard)",
			"Foundation.NSString::GetReadingOptionsForType(System.String,AppKit.NSPasteboard)",
			"Foundation.NSString::GetWritableTypesForPasteboard(AppKit.NSPasteboard)",
			"Foundation.NSString::GetWritingOptionsForType(System.String,AppKit.NSPasteboard)",
			"Foundation.NSString::HasPrefix(Foundation.NSString)",
			"Foundation.NSString::HasSuffix(Foundation.NSString)",
			"Foundation.NSString::LocalizedCaseInsensitiveContains(Foundation.NSString)",
			"Foundation.NSString::LocalizedFormat(Foundation.NSString,Foundation.NSObject[])",
			"Foundation.NSString::LocalizedStandardContainsString(Foundation.NSString)",
			"Foundation.NSString::LocalizedStandardRangeOfString(Foundation.NSString)",
			"Foundation.NSString::MutableCopy(Foundation.NSZone)",
			"Foundation.NSString::Replace(Foundation.NSRange,Foundation.NSString)",
			"Foundation.NSString::SeparateComponents(Foundation.NSCharacterSet)",
			"Foundation.NSString::SeparateComponents(Foundation.NSString)",
			"Foundation.NSString::StringSize(Foundation.NSDictionary)",
			"Foundation.NSString::ToLower(Foundation.NSLocale)",
			"Foundation.NSString::ToUpper(Foundation.NSLocale)",
			"Foundation.NSString::TransliterateString(Foundation.NSString,System.Boolean)",
			"Foundation.NSTask::set_Environment(Foundation.NSDictionary)",
			"Foundation.NSTask::set_StandardError(Foundation.NSObject)",
			"Foundation.NSTask::set_StandardInput(Foundation.NSObject)",
			"Foundation.NSTask::set_StandardOutput(Foundation.NSObject)",
			"Foundation.NSTextCheckingResult::.ctor(Foundation.NSCoder)",
			"Foundation.NSTextCheckingResult::AddressCheckingResult(Foundation.NSRange,Foundation.NSDictionary)",
			"Foundation.NSTextCheckingResult::Copy(Foundation.NSZone)",
			"Foundation.NSTextCheckingResult::DateCheckingResult(Foundation.NSRange,Foundation.NSDate)",
			"Foundation.NSTextCheckingResult::DateCheckingResult(Foundation.NSRange,Foundation.NSDate,Foundation.NSTimeZone,System.Double)",
			"Foundation.NSTextCheckingResult::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSTextCheckingResult::LinkCheckingResult(Foundation.NSRange,Foundation.NSUrl)",
			"Foundation.NSTextCheckingResult::OrthographyCheckingResult(Foundation.NSRange,Foundation.NSOrthography)",
			"Foundation.NSTextCheckingResult::QuoteCheckingResult(Foundation.NSRange,Foundation.NSString)",
			"Foundation.NSTextCheckingResult::TransitInformationCheckingResult(Foundation.NSRange,Foundation.NSDictionary)",
			"Foundation.NSThread::InitNSThread(Foundation.NSObject,ObjCRuntime.Selector,Foundation.NSObject)",
			"Foundation.NSThread::SleepUntil(Foundation.NSDate)",
			"Foundation.NSTimer::.ctor(Foundation.NSDate,System.Double,Foundation.NSObject,ObjCRuntime.Selector,Foundation.NSObject,System.Boolean)",
			"Foundation.NSTimer::.ctor(Foundation.NSDate,System.Double,System.Boolean,System.Action`1<Foundation.NSTimer>)",
			"Foundation.NSTimer::CreateScheduledTimer(System.Double,Foundation.NSObject,ObjCRuntime.Selector,Foundation.NSObject,System.Boolean)",
			"Foundation.NSTimer::CreateTimer(System.Double,Foundation.NSObject,ObjCRuntime.Selector,Foundation.NSObject,System.Boolean)",
			"Foundation.NSTimer::set_FireDate(Foundation.NSDate)",
			"Foundation.NSTimeZone::.ctor(Foundation.NSCoder)",
			"Foundation.NSTimeZone::.ctor(System.String,Foundation.NSData)",
			"Foundation.NSTimeZone::Abbreviation(Foundation.NSDate)",
			"Foundation.NSTimeZone::Copy(Foundation.NSZone)",
			"Foundation.NSTimeZone::DaylightSavingTimeOffset(Foundation.NSDate)",
			"Foundation.NSTimeZone::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSTimeZone::FromName(System.String,Foundation.NSData)",
			"Foundation.NSTimeZone::GetLocalizedName(Foundation.NSTimeZoneNameStyle,Foundation.NSLocale)",
			"Foundation.NSTimeZone::IsDaylightSavingsTime(Foundation.NSDate)",
			"Foundation.NSTimeZone::NextDaylightSavingTimeTransitionAfter(Foundation.NSDate)",
			"Foundation.NSTimeZone::SecondsFromGMT(Foundation.NSDate)",
			"Foundation.NSTimeZone::set_DefaultTimeZone(Foundation.NSTimeZone)",
			"Foundation.NSUbiquitousKeyValueStore::_SetData(Foundation.NSData,System.String)",
			"Foundation.NSUbiquitousKeyValueStore::_SetDictionary(Foundation.NSDictionary,System.String)",
			"Foundation.NSUbiquitousKeyValueStore::SetObjectForKey(Foundation.NSObject,System.String)",
			"Foundation.NSUndoManager::PrepareWithInvocationTarget(Foundation.NSObject)",
			"Foundation.NSUndoManager::RegisterUndo(Foundation.NSObject,System.Action`1<Foundation.NSObject>)",
			"Foundation.NSUndoManager::RegisterUndoWithTarget(Foundation.NSObject,ObjCRuntime.Selector,Foundation.NSObject)",
			"Foundation.NSUndoManager::RemoveAllActions(Foundation.NSObject)",
			"Foundation.NSUnit::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnit::Copy(Foundation.NSZone)",
			"Foundation.NSUnit::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitAcceleration::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitAcceleration::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitAcceleration::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitAngle::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitAngle::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitAngle::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitArea::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitArea::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitArea::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitConcentrationMass::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitConcentrationMass::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitConcentrationMass::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitConverterLinear::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitConverterLinear::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitDispersion::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitDispersion::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitDispersion::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitDuration::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitDuration::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitDuration::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitElectricCharge::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitElectricCharge::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitElectricCharge::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitElectricCurrent::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitElectricCurrent::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitElectricCurrent::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitElectricPotentialDifference::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitElectricPotentialDifference::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitElectricPotentialDifference::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitElectricResistance::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitElectricResistance::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitElectricResistance::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitEnergy::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitEnergy::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitEnergy::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitFrequency::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitFrequency::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitFrequency::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitFuelEfficiency::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitFuelEfficiency::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitFuelEfficiency::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitIlluminance::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitIlluminance::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitIlluminance::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitInformationStorage::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitInformationStorage::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitInformationStorage::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitLength::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitLength::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitLength::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitMass::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitMass::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitMass::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitPower::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitPower::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitPower::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitPressure::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitPressure::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitPressure::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitSpeed::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitSpeed::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitSpeed::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitTemperature::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitTemperature::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitTemperature::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUnitVolume::.ctor(Foundation.NSCoder)",
			"Foundation.NSUnitVolume::.ctor(System.String,Foundation.NSUnitConverter)",
			"Foundation.NSUnitVolume::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUrl::.ctor(Foundation.NSCoder)",
			"Foundation.NSUrl::.ctor(Foundation.NSData,Foundation.NSUrlBookmarkResolutionOptions,Foundation.NSUrl,System.Boolean&,Foundation.NSError&)",
			"Foundation.NSUrl::.ctor(System.IntPtr,System.Boolean,Foundation.NSUrl)",
			"Foundation.NSUrl::.ctor(System.String,Foundation.NSUrl)",
			"Foundation.NSUrl::.ctor(System.String,System.Boolean,Foundation.NSUrl)",
			"Foundation.NSUrl::_FromStringRelative(System.String,Foundation.NSUrl)",
			"Foundation.NSUrl::Copy(Foundation.NSZone)",
			"Foundation.NSUrl::CreateAbsoluteUrlWithDataRepresentation(Foundation.NSData,Foundation.NSUrl)",
			"Foundation.NSUrl::CreateBookmarkData(Foundation.NSUrlBookmarkCreationOptions,System.String[],Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSUrl::CreateFileUrl(System.String,Foundation.NSUrl)",
			"Foundation.NSUrl::CreateFileUrl(System.String,System.Boolean,Foundation.NSUrl)",
			"Foundation.NSUrl::CreateWithDataRepresentation(Foundation.NSData,Foundation.NSUrl)",
			"Foundation.NSUrl::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUrl::FromBookmarkData(Foundation.NSData,Foundation.NSUrlBookmarkResolutionOptions,Foundation.NSUrl,System.Boolean&,Foundation.NSError&)",
			"Foundation.NSUrl::FromPasteboard(AppKit.NSPasteboard)",
			"Foundation.NSUrl::FromUTF8Pointer(System.IntPtr,System.Boolean,Foundation.NSUrl)",
			"Foundation.NSUrl::GetBookmarkData(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSUrl::GetObject(Foundation.NSData,System.String,Foundation.NSError&)",
			"Foundation.NSUrl::GetReadableTypesForPasteboard(AppKit.NSPasteboard)",
			"Foundation.NSUrl::GetReadingOptionsForType(System.String,AppKit.NSPasteboard)",
			"Foundation.NSUrl::GetResourceValue(Foundation.NSObject&,Foundation.NSString,Foundation.NSError&)",
			"Foundation.NSUrl::GetWritableTypesForPasteboard(AppKit.NSPasteboard)",
			"Foundation.NSUrl::GetWritingOptionsForType(System.String,AppKit.NSPasteboard)",
			"Foundation.NSUrl::IsEqual(Foundation.NSUrl)",
			"Foundation.NSUrl::RemoveCachedResourceValueForKey(Foundation.NSString)",
			"Foundation.NSUrl::ResolveAlias(Foundation.NSUrl,Foundation.NSUrlBookmarkResolutionOptions,Foundation.NSError&)",
			"Foundation.NSUrl::SetResourceValue(Foundation.NSObject,Foundation.NSString,Foundation.NSError&)",
			"Foundation.NSUrl::SetTemporaryResourceValue(Foundation.NSObject,Foundation.NSString)",
			"Foundation.NSUrl::WriteBookmarkData(Foundation.NSData,Foundation.NSUrl,Foundation.NSUrlBookmarkCreationOptions,Foundation.NSError&)",
			"Foundation.NSUrl::WriteToPasteboard(AppKit.NSPasteboard)",
			"Foundation.NSUrl_PromisedItems::CheckPromisedItemIsReachable(Foundation.NSUrl,Foundation.NSError&)",
			"Foundation.NSUrl_PromisedItems::GetPromisedItemResourceValue(Foundation.NSUrl,Foundation.NSObject&,Foundation.NSString,Foundation.NSError&)",
			"Foundation.NSUrl_PromisedItems::GetPromisedItemResourceValues(Foundation.NSUrl,Foundation.NSString[],Foundation.NSError&)",
			"Foundation.NSUrlAuthenticationChallenge::.ctor(Foundation.NSCoder)",
			"Foundation.NSUrlAuthenticationChallenge::.ctor(Foundation.NSUrlAuthenticationChallenge,Foundation.NSUrlConnection)",
			"Foundation.NSUrlAuthenticationChallenge::.ctor(Foundation.NSUrlProtectionSpace,Foundation.NSUrlCredential,System.IntPtr,Foundation.NSUrlResponse,Foundation.NSError,Foundation.NSUrlConnection)",
			"Foundation.NSUrlAuthenticationChallenge::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUrlAuthenticationChallengeSender_Extensions::PerformDefaultHandling(Foundation.INSUrlAuthenticationChallengeSender,Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlAuthenticationChallengeSender_Extensions::RejectProtectionSpaceAndContinue(Foundation.INSUrlAuthenticationChallengeSender,Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlAuthenticationChallengeSenderWrapper::CancelAuthenticationChallenge(Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlAuthenticationChallengeSenderWrapper::ContinueWithoutCredential(Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlAuthenticationChallengeSenderWrapper::UseCredential(Foundation.NSUrlCredential,Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlCache::.ctor(System.UIntPtr,System.UIntPtr,Foundation.NSUrl)",
			"Foundation.NSUrlCache::CachedResponseForRequest(Foundation.NSUrlRequest)",
			"Foundation.NSUrlCache::GetCachedResponse(Foundation.NSUrlSessionDataTask,System.Action`1<Foundation.NSCachedUrlResponse>)",
			"Foundation.NSUrlCache::RemoveCachedResponse(Foundation.NSUrlRequest)",
			"Foundation.NSUrlCache::RemoveCachedResponse(Foundation.NSUrlSessionDataTask)",
			"Foundation.NSUrlCache::RemoveCachedResponsesSinceDate(Foundation.NSDate)",
			"Foundation.NSUrlCache::set_SharedCache(Foundation.NSUrlCache)",
			"Foundation.NSUrlCache::StoreCachedResponse(Foundation.NSCachedUrlResponse,Foundation.NSUrlRequest)",
			"Foundation.NSUrlCache::StoreCachedResponse(Foundation.NSCachedUrlResponse,Foundation.NSUrlSessionDataTask)",
			"Foundation.NSUrlComponents::.ctor(Foundation.NSUrl,System.Boolean)",
			"Foundation.NSUrlComponents::Copy(Foundation.NSZone)",
			"Foundation.NSUrlComponents::FromUrl(Foundation.NSUrl,System.Boolean)",
			"Foundation.NSUrlComponents::GetRelativeUrl(Foundation.NSUrl)",
			"Foundation.NSUrlComponents::set_Port(Foundation.NSNumber)",
			"Foundation.NSUrlConnection::.ctor(Foundation.NSUrlRequest,Foundation.INSUrlConnectionDelegate)",
			"Foundation.NSUrlConnection::.ctor(Foundation.NSUrlRequest,Foundation.INSUrlConnectionDelegate,System.Boolean)",
			"Foundation.NSUrlConnection::CancelAuthenticationChallenge(Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlConnection::CanHandleRequest(Foundation.NSUrlRequest)",
			"Foundation.NSUrlConnection::ContinueWithoutCredential(Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlConnection::FromRequest(Foundation.NSUrlRequest,Foundation.INSUrlConnectionDelegate)",
			"Foundation.NSUrlConnection::PerformDefaultHandling(Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlConnection::RejectProtectionSpaceAndContinue(Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlConnection::Schedule(Foundation.NSRunLoop,Foundation.NSString)",
			"Foundation.NSUrlConnection::SendAsynchronousRequest(Foundation.NSUrlRequest,Foundation.NSOperationQueue,Foundation.NSUrlConnectionDataResponse)",
			"Foundation.NSUrlConnection::SendSynchronousRequest(Foundation.NSUrlRequest,Foundation.NSUrlResponse&,Foundation.NSError&)",
			"Foundation.NSUrlConnection::SetDelegateQueue(Foundation.NSOperationQueue)",
			"Foundation.NSUrlConnection::Unschedule(Foundation.NSRunLoop,Foundation.NSString)",
			"Foundation.NSUrlConnection::UseCredential(Foundation.NSUrlCredential,Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlConnectionDataDelegate_Extensions::FinishedLoading(Foundation.INSUrlConnectionDataDelegate,Foundation.NSUrlConnection)",
			"Foundation.NSUrlConnectionDataDelegate_Extensions::NeedNewBodyStream(Foundation.INSUrlConnectionDataDelegate,Foundation.NSUrlConnection,Foundation.NSUrlRequest)",
			"Foundation.NSUrlConnectionDataDelegate_Extensions::ReceivedData(Foundation.INSUrlConnectionDataDelegate,Foundation.NSUrlConnection,Foundation.NSData)",
			"Foundation.NSUrlConnectionDataDelegate_Extensions::ReceivedResponse(Foundation.INSUrlConnectionDataDelegate,Foundation.NSUrlConnection,Foundation.NSUrlResponse)",
			"Foundation.NSUrlConnectionDataDelegate_Extensions::SentBodyData(Foundation.INSUrlConnectionDataDelegate,Foundation.NSUrlConnection,System.IntPtr,System.IntPtr,System.IntPtr)",
			"Foundation.NSUrlConnectionDataDelegate_Extensions::WillCacheResponse(Foundation.INSUrlConnectionDataDelegate,Foundation.NSUrlConnection,Foundation.NSCachedUrlResponse)",
			"Foundation.NSUrlConnectionDataDelegate_Extensions::WillSendRequest(Foundation.INSUrlConnectionDataDelegate,Foundation.NSUrlConnection,Foundation.NSUrlRequest,Foundation.NSUrlResponse)",
			"Foundation.NSUrlConnectionDelegate_Extensions::CanAuthenticateAgainstProtectionSpace(Foundation.INSUrlConnectionDelegate,Foundation.NSUrlConnection,Foundation.NSUrlProtectionSpace)",
			"Foundation.NSUrlConnectionDelegate_Extensions::CanceledAuthenticationChallenge(Foundation.INSUrlConnectionDelegate,Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlConnectionDelegate_Extensions::ConnectionShouldUseCredentialStorage(Foundation.INSUrlConnectionDelegate,Foundation.NSUrlConnection)",
			"Foundation.NSUrlConnectionDelegate_Extensions::FailedWithError(Foundation.INSUrlConnectionDelegate,Foundation.NSUrlConnection,Foundation.NSError)",
			"Foundation.NSUrlConnectionDelegate_Extensions::ReceivedAuthenticationChallenge(Foundation.INSUrlConnectionDelegate,Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlConnectionDelegate_Extensions::WillSendRequestForAuthenticationChallenge(Foundation.INSUrlConnectionDelegate,Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlConnectionDownloadDelegate_Extensions::ResumedDownloading(Foundation.INSUrlConnectionDownloadDelegate,Foundation.NSUrlConnection,System.Int64,System.Int64)",
			"Foundation.NSUrlConnectionDownloadDelegate_Extensions::WroteData(Foundation.INSUrlConnectionDownloadDelegate,Foundation.NSUrlConnection,System.Int64,System.Int64,System.Int64)",
			"Foundation.NSUrlConnectionDownloadDelegateWrapper::FinishedDownloading(Foundation.NSUrlConnection,Foundation.NSUrl)",
			"Foundation.NSUrlCredential::.ctor(Foundation.NSCoder)",
			"Foundation.NSUrlCredential::.ctor(Security.SecIdentity,Security.SecCertificate[],Foundation.NSUrlCredentialPersistence)",
			"Foundation.NSUrlCredential::.ctor(Security.SecTrust)",
			"Foundation.NSUrlCredential::Copy(Foundation.NSZone)",
			"Foundation.NSUrlCredential::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUrlCredential::FromIdentityCertificatesPersistance(Security.SecIdentity,Security.SecCertificate[],Foundation.NSUrlCredentialPersistence)",
			"Foundation.NSUrlCredential::FromTrust(Security.SecTrust)",
			"Foundation.NSUrlCredentialStorage::GetCredentials(Foundation.NSUrlProtectionSpace)",
			"Foundation.NSUrlCredentialStorage::GetCredentials(Foundation.NSUrlProtectionSpace,Foundation.NSUrlSessionTask,System.Action`1<Foundation.NSDictionary>)",
			"Foundation.NSUrlCredentialStorage::GetDefaultCredential(Foundation.NSUrlProtectionSpace)",
			"Foundation.NSUrlCredentialStorage::GetDefaultCredential(Foundation.NSUrlProtectionSpace,Foundation.NSUrlSessionTask,System.Action`1<Foundation.NSUrlCredential>)",
			"Foundation.NSUrlCredentialStorage::RemoveCredential(Foundation.NSUrlCredential,Foundation.NSUrlProtectionSpace)",
			"Foundation.NSUrlCredentialStorage::RemoveCredential(Foundation.NSUrlCredential,Foundation.NSUrlProtectionSpace,Foundation.NSDictionary)",
			"Foundation.NSUrlCredentialStorage::RemoveCredential(Foundation.NSUrlCredential,Foundation.NSUrlProtectionSpace,Foundation.NSDictionary,Foundation.NSUrlSessionTask)",
			"Foundation.NSUrlCredentialStorage::SetCredential(Foundation.NSUrlCredential,Foundation.NSUrlProtectionSpace)",
			"Foundation.NSUrlCredentialStorage::SetCredential(Foundation.NSUrlCredential,Foundation.NSUrlProtectionSpace,Foundation.NSUrlSessionTask)",
			"Foundation.NSUrlCredentialStorage::SetDefaultCredential(Foundation.NSUrlCredential,Foundation.NSUrlProtectionSpace)",
			"Foundation.NSUrlCredentialStorage::SetDefaultCredential(Foundation.NSUrlCredential,Foundation.NSUrlProtectionSpace,Foundation.NSUrlSessionTask)",
			"Foundation.NSUrlDownload::.ctor(Foundation.NSData,Foundation.NSObject,System.String)",
			"Foundation.NSUrlDownload::.ctor(Foundation.NSUrlRequest,Foundation.NSObject)",
			"Foundation.NSUrlDownloadDelegate_Extensions::CanceledAuthenticationChallenge(Foundation.INSUrlDownloadDelegate,Foundation.NSUrlDownload,Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlDownloadDelegate_Extensions::CreatedDestination(Foundation.INSUrlDownloadDelegate,Foundation.NSUrlDownload,System.String)",
			"Foundation.NSUrlDownloadDelegate_Extensions::DecideDestination(Foundation.INSUrlDownloadDelegate,Foundation.NSUrlDownload,System.String)",
			"Foundation.NSUrlDownloadDelegate_Extensions::DecodeSourceData(Foundation.INSUrlDownloadDelegate,Foundation.NSUrlDownload,System.String)",
			"Foundation.NSUrlDownloadDelegate_Extensions::DownloadBegan(Foundation.INSUrlDownloadDelegate,Foundation.NSUrlDownload)",
			"Foundation.NSUrlDownloadDelegate_Extensions::FailedWithError(Foundation.INSUrlDownloadDelegate,Foundation.NSUrlDownload,Foundation.NSError)",
			"Foundation.NSUrlDownloadDelegate_Extensions::Finished(Foundation.INSUrlDownloadDelegate,Foundation.NSUrlDownload)",
			"Foundation.NSUrlDownloadDelegate_Extensions::ReceivedAuthenticationChallenge(Foundation.INSUrlDownloadDelegate,Foundation.NSUrlDownload,Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlDownloadDelegate_Extensions::ReceivedData(Foundation.INSUrlDownloadDelegate,Foundation.NSUrlDownload,System.UIntPtr)",
			"Foundation.NSUrlDownloadDelegate_Extensions::ReceivedResponse(Foundation.INSUrlDownloadDelegate,Foundation.NSUrlDownload,Foundation.NSUrlResponse)",
			"Foundation.NSUrlDownloadDelegate_Extensions::Resume(Foundation.INSUrlDownloadDelegate,Foundation.NSUrlDownload,Foundation.NSUrlResponse,System.Int64)",
			"Foundation.NSUrlDownloadDelegate_Extensions::WillSendRequest(Foundation.INSUrlDownloadDelegate,Foundation.NSUrlDownload,Foundation.NSUrlRequest,Foundation.NSUrlResponse)",
			"Foundation.NSUrlProtectionSpace::.ctor(Foundation.NSCoder)",
			"Foundation.NSUrlProtectionSpace::Copy(Foundation.NSZone)",
			"Foundation.NSUrlProtectionSpace::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUrlProtocol::.ctor(Foundation.NSUrlRequest,Foundation.NSCachedUrlResponse,Foundation.INSUrlProtocolClient)",
			"Foundation.NSUrlProtocol::CanInitWithRequest(Foundation.NSUrlRequest)",
			"Foundation.NSUrlProtocol::GetCanonicalRequest(Foundation.NSUrlRequest)",
			"Foundation.NSUrlProtocol::GetProperty(System.String,Foundation.NSUrlRequest)",
			"Foundation.NSUrlProtocol::IsRequestCacheEquivalent(Foundation.NSUrlRequest,Foundation.NSUrlRequest)",
			"Foundation.NSUrlProtocol::RemoveProperty(System.String,Foundation.NSMutableUrlRequest)",
			"Foundation.NSUrlProtocol::SetProperty(Foundation.NSObject,System.String,Foundation.NSMutableUrlRequest)",
			"Foundation.NSUrlProtocolClientWrapper::CachedResponseIsValid(Foundation.NSUrlProtocol,Foundation.NSCachedUrlResponse)",
			"Foundation.NSUrlProtocolClientWrapper::CancelledAuthenticationChallenge(Foundation.NSUrlProtocol,Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlProtocolClientWrapper::DataLoaded(Foundation.NSUrlProtocol,Foundation.NSData)",
			"Foundation.NSUrlProtocolClientWrapper::FailedWithError(Foundation.NSUrlProtocol,Foundation.NSError)",
			"Foundation.NSUrlProtocolClientWrapper::FinishedLoading(Foundation.NSUrlProtocol)",
			"Foundation.NSUrlProtocolClientWrapper::ReceivedAuthenticationChallenge(Foundation.NSUrlProtocol,Foundation.NSUrlAuthenticationChallenge)",
			"Foundation.NSUrlProtocolClientWrapper::ReceivedResponse(Foundation.NSUrlProtocol,Foundation.NSUrlResponse,Foundation.NSUrlCacheStoragePolicy)",
			"Foundation.NSUrlProtocolClientWrapper::Redirected(Foundation.NSUrlProtocol,Foundation.NSUrlRequest,Foundation.NSUrlResponse)",
			"Foundation.NSUrlQueryItem::.ctor(Foundation.NSCoder)",
			"Foundation.NSUrlQueryItem::Copy(Foundation.NSZone)",
			"Foundation.NSUrlQueryItem::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUrlRequest::.ctor(Foundation.NSCoder)",
			"Foundation.NSUrlRequest::.ctor(Foundation.NSUrl)",
			"Foundation.NSUrlRequest::.ctor(Foundation.NSUrl,Foundation.NSUrlRequestCachePolicy,System.Double)",
			"Foundation.NSUrlRequest::Copy(Foundation.NSZone)",
			"Foundation.NSUrlRequest::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUrlRequest::FromUrl(Foundation.NSUrl)",
			"Foundation.NSUrlRequest::MutableCopy(Foundation.NSZone)",
			"Foundation.NSUrlResponse::.ctor(Foundation.NSCoder)",
			"Foundation.NSUrlResponse::.ctor(Foundation.NSUrl,System.String,System.IntPtr,System.String)",
			"Foundation.NSUrlResponse::Copy(Foundation.NSZone)",
			"Foundation.NSUrlResponse::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUrlSession::CreateBidirectionalStream(Foundation.NSNetService)",
			"Foundation.NSUrlSession::CreateDataTask(Foundation.NSUrl)",
			"Foundation.NSUrlSession::CreateDataTask(Foundation.NSUrl,Foundation.NSUrlSessionResponse)",
			"Foundation.NSUrlSession::CreateDataTask(Foundation.NSUrlRequest)",
			"Foundation.NSUrlSession::CreateDataTask(Foundation.NSUrlRequest,Foundation.NSUrlSessionResponse)",
			"Foundation.NSUrlSession::CreateDownloadTask(Foundation.NSData)",
			"Foundation.NSUrlSession::CreateDownloadTask(Foundation.NSUrl)",
			"Foundation.NSUrlSession::CreateDownloadTask(Foundation.NSUrl,Foundation.NSUrlDownloadSessionResponse)",
			"Foundation.NSUrlSession::CreateDownloadTask(Foundation.NSUrlRequest)",
			"Foundation.NSUrlSession::CreateDownloadTask(Foundation.NSUrlRequest,Foundation.NSUrlDownloadSessionResponse)",
			"Foundation.NSUrlSession::CreateDownloadTaskFromResumeData(Foundation.NSData,Foundation.NSUrlDownloadSessionResponse)",
			"Foundation.NSUrlSession::CreateUploadTask(Foundation.NSUrlRequest)",
			"Foundation.NSUrlSession::CreateUploadTask(Foundation.NSUrlRequest,Foundation.NSData)",
			"Foundation.NSUrlSession::CreateUploadTask(Foundation.NSUrlRequest,Foundation.NSData,Foundation.NSUrlSessionResponse)",
			"Foundation.NSUrlSession::CreateUploadTask(Foundation.NSUrlRequest,Foundation.NSUrl)",
			"Foundation.NSUrlSession::CreateUploadTask(Foundation.NSUrlRequest,Foundation.NSUrl,Foundation.NSUrlSessionResponse)",
			"Foundation.NSUrlSession::CreateWebSocketTask(Foundation.NSUrl)",
			"Foundation.NSUrlSession::CreateWebSocketTask(Foundation.NSUrl,System.String[])",
			"Foundation.NSUrlSession::CreateWebSocketTask(Foundation.NSUrlRequest)",
			"Foundation.NSUrlSession::FromConfiguration(Foundation.NSUrlSessionConfiguration)",
			"Foundation.NSUrlSession::FromWeakConfiguration(Foundation.NSUrlSessionConfiguration,Foundation.NSObject,Foundation.NSOperationQueue)",
			"Foundation.NSUrlSessionConfiguration::Copy(Foundation.NSZone)",
			"Foundation.NSUrlSessionConfiguration::set_ConnectionProxyDictionary(Foundation.NSDictionary)",
			"Foundation.NSUrlSessionConfiguration::set_HttpAdditionalHeaders(Foundation.NSDictionary)",
			"Foundation.NSUrlSessionConfiguration::set_HttpCookieStorage(Foundation.NSHttpCookieStorage)",
			"Foundation.NSUrlSessionConfiguration::set_URLCache(Foundation.NSUrlCache)",
			"Foundation.NSUrlSessionConfiguration::set_URLCredentialStorage(Foundation.NSUrlCredentialStorage)",
			"Foundation.NSUrlSessionConfiguration::set_WeakProtocolClasses(Foundation.NSArray)",
			"Foundation.NSUrlSessionDataDelegate_Extensions::DidBecomeDownloadTask(Foundation.INSUrlSessionDataDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionDownloadTask)",
			"Foundation.NSUrlSessionDataDelegate_Extensions::DidBecomeStreamTask(Foundation.INSUrlSessionDataDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionStreamTask)",
			"Foundation.NSUrlSessionDataDelegate_Extensions::DidReceiveData(Foundation.INSUrlSessionDataDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSData)",
			"Foundation.NSUrlSessionDataDelegate_Extensions::DidReceiveResponse(Foundation.INSUrlSessionDataDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlResponse,System.Action`1<Foundation.NSUrlSessionResponseDisposition>)",
			"Foundation.NSUrlSessionDataDelegate_Extensions::WillCacheResponse(Foundation.INSUrlSessionDataDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSCachedUrlResponse,System.Action`1<Foundation.NSCachedUrlResponse>)",
			"Foundation.NSUrlSessionDelegate_Extensions::DidBecomeInvalid(Foundation.INSUrlSessionDelegate,Foundation.NSUrlSession,Foundation.NSError)",
			"Foundation.NSUrlSessionDelegate_Extensions::DidFinishEventsForBackgroundSession(Foundation.INSUrlSessionDelegate,Foundation.NSUrlSession)",
			"Foundation.NSUrlSessionDelegate_Extensions::DidReceiveChallenge(Foundation.INSUrlSessionDelegate,Foundation.NSUrlSession,Foundation.NSUrlAuthenticationChallenge,System.Action`2<Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential>)",
			"Foundation.NSUrlSessionDownloadDelegate_Extensions::DidResume(Foundation.INSUrlSessionDownloadDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64)",
			"Foundation.NSUrlSessionDownloadDelegate_Extensions::DidWriteData(Foundation.INSUrlSessionDownloadDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64,System.Int64)",
			"Foundation.NSUrlSessionDownloadDelegateWrapper::DidFinishDownloading(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,Foundation.NSUrl)",
			"Foundation.NSUrlSessionStreamDelegate_Extensions::BetterRouteDiscovered(Foundation.INSUrlSessionStreamDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)",
			"Foundation.NSUrlSessionStreamDelegate_Extensions::CompletedTaskCaptureStreams(Foundation.INSUrlSessionStreamDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask,Foundation.NSInputStream,Foundation.NSOutputStream)",
			"Foundation.NSUrlSessionStreamDelegate_Extensions::ReadClosed(Foundation.INSUrlSessionStreamDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)",
			"Foundation.NSUrlSessionStreamDelegate_Extensions::WriteClosed(Foundation.INSUrlSessionStreamDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)",
			"Foundation.NSUrlSessionStreamTask::WriteData(Foundation.NSData,System.Double,System.Action`1<Foundation.NSError>)",
			"Foundation.NSUrlSessionTask::Copy(Foundation.NSZone)",
			"Foundation.NSUrlSessionTask::set_EarliestBeginDate(Foundation.NSDate)",
			"Foundation.NSUrlSessionTaskDelegate_Extensions::DidCompleteWithError(Foundation.INSUrlSessionTaskDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError)",
			"Foundation.NSUrlSessionTaskDelegate_Extensions::DidFinishCollectingMetrics(Foundation.INSUrlSessionTaskDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlSessionTaskMetrics)",
			"Foundation.NSUrlSessionTaskDelegate_Extensions::DidReceiveChallenge(Foundation.INSUrlSessionTaskDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action`2<Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential>)",
			"Foundation.NSUrlSessionTaskDelegate_Extensions::DidSendBodyData(Foundation.INSUrlSessionTaskDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Int64,System.Int64,System.Int64)",
			"Foundation.NSUrlSessionTaskDelegate_Extensions::NeedNewBodyStream(Foundation.INSUrlSessionTaskDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Action`1<Foundation.NSInputStream>)",
			"Foundation.NSUrlSessionTaskDelegate_Extensions::TaskIsWaitingForConnectivity(Foundation.INSUrlSessionTaskDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionTask)",
			"Foundation.NSUrlSessionTaskDelegate_Extensions::WillBeginDelayedRequest(Foundation.INSUrlSessionTaskDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlRequest,System.Action`2<Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest>)",
			"Foundation.NSUrlSessionTaskDelegate_Extensions::WillPerformHttpRedirection(Foundation.INSUrlSessionTaskDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action`1<Foundation.NSUrlRequest>)",
			"Foundation.NSUrlSessionWebSocketDelegate_Extensions::DidClose(Foundation.INSUrlSessionWebSocketDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,Foundation.NSUrlSessionWebSocketCloseCode,Foundation.NSData)",
			"Foundation.NSUrlSessionWebSocketDelegate_Extensions::DidOpen(Foundation.INSUrlSessionWebSocketDelegate,Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,System.String)",
			"Foundation.NSUrlSessionWebSocketMessage::.ctor(Foundation.NSData)",
			"Foundation.NSUrlSessionWebSocketTask::Cancel(Foundation.NSUrlSessionWebSocketCloseCode,Foundation.NSData)",
			"Foundation.NSUrlSessionWebSocketTask::SendMessage(Foundation.NSUrlSessionWebSocketMessage,System.Action`1<Foundation.NSError>)",
			"Foundation.NSUrlUtilities_NSString::CreateStringByAddingPercentEncoding(Foundation.NSString,Foundation.NSCharacterSet)",
			"Foundation.NSUrlUtilities_NSString::CreateStringByAddingPercentEscapes(Foundation.NSString,Foundation.NSStringEncoding)",
			"Foundation.NSUrlUtilities_NSString::CreateStringByRemovingPercentEncoding(Foundation.NSString)",
			"Foundation.NSUrlUtilities_NSString::CreateStringByReplacingPercentEscapes(Foundation.NSString,Foundation.NSStringEncoding)",
			"Foundation.NSUserActivity::AddUserInfoEntries(Foundation.NSDictionary)",
			"Foundation.NSUserActivity::GetObject(Foundation.NSData,System.String,Foundation.NSError&)",
			"Foundation.NSUserActivity::set_ContentAttributeSet(CoreSpotlight.CSSearchableItemAttributeSet)",
			"Foundation.NSUserActivity::set_ExpirationDate(Foundation.NSDate)",
			"Foundation.NSUserActivity::set_Keywords(Foundation.NSSet`1<Foundation.NSString>)",
			"Foundation.NSUserActivity::set_ReferrerUrl(Foundation.NSUrl)",
			"Foundation.NSUserActivity::set_RequiredUserInfoKeys(Foundation.NSSet`1<Foundation.NSString>)",
			"Foundation.NSUserActivity::set_UserInfo(Foundation.NSDictionary)",
			"Foundation.NSUserActivity::set_WebPageUrl(Foundation.NSUrl)",
			"Foundation.NSUserActivityDelegate_Extensions::UserActivityReceivedData(Foundation.INSUserActivityDelegate,Foundation.NSUserActivity,Foundation.NSInputStream,Foundation.NSOutputStream)",
			"Foundation.NSUserActivityDelegate_Extensions::UserActivityWasContinued(Foundation.INSUserActivityDelegate,Foundation.NSUserActivity)",
			"Foundation.NSUserActivityDelegate_Extensions::UserActivityWillSave(Foundation.INSUserActivityDelegate,Foundation.NSUserActivity)",
			"Foundation.NSUserDefaults::RegisterDefaults(Foundation.NSDictionary)",
			"Foundation.NSUserDefaults::SetObjectForKey(Foundation.NSObject,System.String)",
			"Foundation.NSUserDefaults::SetPersistentDomain(Foundation.NSDictionary,System.String)",
			"Foundation.NSUserDefaults::SetURL(Foundation.NSUrl,System.String)",
			"Foundation.NSUserDefaults::SetVolatileDomain(Foundation.NSDictionary,System.String)",
			"Foundation.NSUserNotification::.ctor(Foundation.NSCoder)",
			"Foundation.NSUserNotification::Copy(Foundation.NSZone)",
			"Foundation.NSUserNotification::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSUserNotification::set_ContentImage(AppKit.NSImage)",
			"Foundation.NSUserNotification::set_DeliveryDate(Foundation.NSDate)",
			"Foundation.NSUserNotification::set_DeliveryRepeatInterval(Foundation.NSDateComponents)",
			"Foundation.NSUserNotification::set_DeliveryTimeZone(Foundation.NSTimeZone)",
			"Foundation.NSUserNotification::set_UserInfo(Foundation.NSDictionary)",
			"Foundation.NSUserNotificationAction::Copy(Foundation.NSZone)",
			"Foundation.NSUserNotificationCenter::DeliverNotification(Foundation.NSUserNotification)",
			"Foundation.NSUserNotificationCenter::RemoveDeliveredNotification(Foundation.NSUserNotification)",
			"Foundation.NSUserNotificationCenter::RemoveScheduledNotification(Foundation.NSUserNotification)",
			"Foundation.NSUserNotificationCenter::ScheduleNotification(Foundation.NSUserNotification)",
			"Foundation.NSUserNotificationCenterDelegate_Extensions::DidActivateNotification(Foundation.INSUserNotificationCenterDelegate,Foundation.NSUserNotificationCenter,Foundation.NSUserNotification)",
			"Foundation.NSUserNotificationCenterDelegate_Extensions::DidDeliverNotification(Foundation.INSUserNotificationCenterDelegate,Foundation.NSUserNotificationCenter,Foundation.NSUserNotification)",
			"Foundation.NSUserNotificationCenterDelegate_Extensions::ShouldPresentNotification(Foundation.INSUserNotificationCenterDelegate,Foundation.NSUserNotificationCenter,Foundation.NSUserNotification)",
			"Foundation.NSUuid::.ctor(Foundation.NSCoder)",
			"Foundation.NSUuid::Copy(Foundation.NSZone)",
			"Foundation.NSUuid::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSValue::.ctor(Foundation.NSCoder)",
			"Foundation.NSValue::Copy(Foundation.NSZone)",
			"Foundation.NSValue::EncodeTo(Foundation.NSCoder)",
			"Foundation.NSValue::IsEqualTo(Foundation.NSValue)",
			"Foundation.NSValue::ValueFromNonretainedObject(Foundation.NSObject)",
			"Foundation.NSValueTransformer::ReverseTransformedValue(Foundation.NSObject)",
			"Foundation.NSValueTransformer::SetValueTransformer(Foundation.NSValueTransformer,System.String)",
			"Foundation.NSValueTransformer::TransformedValue(Foundation.NSObject)",
			"Foundation.NSXpcConnection::.ctor(Foundation.NSXpcListenerEndpoint)",
			"Foundation.NSXpcConnection::set_ExportedInterface(Foundation.NSXpcInterface)",
			"Foundation.NSXpcConnection::set_ExportedObject(Foundation.NSObject)",
			"Foundation.NSXpcConnection::set_RemoteInterface(Foundation.NSXpcInterface)",
			"Foundation.NSXpcInterface::SetAllowedClasses(Foundation.NSSet`1<ObjCRuntime.Class>,ObjCRuntime.Selector,System.UIntPtr,System.Boolean)",
			"Foundation.NSXpcListenerDelegate_Extensions::ShouldAcceptConnection(Foundation.INSXpcListenerDelegate,Foundation.NSXpcListener,Foundation.NSXpcConnection)",
			"Foundation.NSXpcListenerEndpoint::.ctor(Foundation.NSCoder)",
			"Foundation.NSXpcListenerEndpoint::EncodeTo(Foundation.NSCoder)",
			"GameController.GCColor::.ctor(Foundation.NSCoder)",
			"GameController.GCColor::Copy(Foundation.NSZone)",
			"GameController.GCColor::EncodeTo(Foundation.NSCoder)",
			"GameController.GCController::set_HandlerQueue(CoreFoundation.DispatchQueue)",
			"GameController.GCDeviceBattery::.ctor(Foundation.NSCoder)",
			"GameController.GCDeviceBattery::EncodeTo(Foundation.NSCoder)",
			"GameController.GCDeviceLight::.ctor(Foundation.NSCoder)",
			"GameController.GCDeviceLight::EncodeTo(Foundation.NSCoder)",
			"GameController.GCDeviceLight::set_Color(GameController.GCColor)",
			"GameController.GCDeviceWrapper::set_HandlerQueue(CoreFoundation.DispatchQueue)",
			"GameController.GCDualShockGamepad::.ctor(Foundation.NSCoder)",
			"GameController.GCDualShockGamepad::EncodeTo(Foundation.NSCoder)",
			"GameController.GCEventViewController::.ctor(Foundation.NSCoder)",
			"GameController.GCEventViewController::.ctor(System.String,Foundation.NSBundle)",
			"GameController.GCExtendedGamepad::SetState(GameController.GCExtendedGamepad)",
			"GameController.GCExtendedGamepadSnapshot::.ctor(Foundation.NSData)",
			"GameController.GCExtendedGamepadSnapshot::.ctor(GameController.GCController,Foundation.NSData)",
			"GameController.GCExtendedGamepadSnapshot::set_SnapshotData(Foundation.NSData)",
			"GameController.GCExtendedGamepadSnapshot::TryGetExtendedSnapShotData(Foundation.NSData,GameController.GCExtendedGamepadSnapshotData&)",
			"GameController.GCExtendedGamepadSnapshot::TryGetSnapShotData(Foundation.NSData,GameController.GCExtendedGamepadSnapShotDataV100&)",
			"GameController.GCGamepadSnapshot::.ctor(Foundation.NSData)",
			"GameController.GCGamepadSnapshot::.ctor(GameController.GCController,Foundation.NSData)",
			"GameController.GCGamepadSnapshot::set_SnapshotData(Foundation.NSData)",
			"GameController.GCGamepadSnapshot::TryGetSnapshotData(Foundation.NSData,GameController.GCGamepadSnapShotDataV100&)",
			"GameController.GCKeyboard::.ctor(Foundation.NSCoder)",
			"GameController.GCKeyboard::EncodeTo(Foundation.NSCoder)",
			"GameController.GCKeyboard::set_HandlerQueue(CoreFoundation.DispatchQueue)",
			"GameController.GCMicroGamepad::SetState(GameController.GCMicroGamepad)",
			"GameController.GCMicroGamepadSnapshot::.ctor(Foundation.NSData)",
			"GameController.GCMicroGamepadSnapshot::.ctor(GameController.GCController,Foundation.NSData)",
			"GameController.GCMicroGamepadSnapshot::set_SnapshotData(Foundation.NSData)",
			"GameController.GCMicroGamepadSnapshot::TryGetSnapshotData(Foundation.NSData,GameController.GCMicroGamepadSnapshotData&)",
			"GameController.GCMicroGamepadSnapshot::TryGetSnapshotData(Foundation.NSData,GameController.GCMicroGamepadSnapShotDataV100&)",
			"GameController.GCMotion::SetState(GameController.GCMotion)",
			"GameController.GCMouse::.ctor(Foundation.NSCoder)",
			"GameController.GCMouse::EncodeTo(Foundation.NSCoder)",
			"GameController.GCMouse::set_HandlerQueue(CoreFoundation.DispatchQueue)",
			"GameController.GCPhysicalInputProfile::SetState(GameController.GCPhysicalInputProfile)",
			"GameController.GCVirtualController::.ctor(GameController.GCVirtualControllerConfiguration)",
			"GameController.GCVirtualController::Create(GameController.GCVirtualControllerConfiguration)",
			"GameController.GCVirtualControllerConfiguration::set_Elements(Foundation.NSSet`1<Foundation.NSString>)",
			"GameController.GCVirtualControllerElementConfiguration::set_Path(UIKit.UIBezierPath)",
			"GameController.GCXboxGamepad::.ctor(Foundation.NSCoder)",
			"GameController.GCXboxGamepad::EncodeTo(Foundation.NSCoder)",
			"GameKit.GKAchievement::.ctor(Foundation.NSCoder)",
			"GameKit.GKAchievement::.ctor(System.String,GameKit.GKPlayer)",
			"GameKit.GKAchievement::EncodeTo(Foundation.NSCoder)",
			"GameKit.GKAchievementChallenge::.ctor(Foundation.NSCoder)",
			"GameKit.GKAchievementDescription::.ctor(Foundation.NSCoder)",
			"GameKit.GKAchievementDescription::EncodeTo(Foundation.NSCoder)",
			"GameKit.GKAchievementViewController::.ctor(Foundation.NSCoder)",
			"GameKit.GKAchievementViewControllerDelegateWrapper::DidFinish(GameKit.GKAchievementViewController)",
			"GameKit.GKChallenge::.ctor(Foundation.NSCoder)",
			"GameKit.GKChallenge::EncodeTo(Foundation.NSCoder)",
			"GameKit.GKChallengeEventHandlerDelegate_Extensions::LocalPlayerCompletedChallenge(GameKit.IGKChallengeEventHandlerDelegate,GameKit.GKChallenge)",
			"GameKit.GKChallengeEventHandlerDelegate_Extensions::LocalPlayerReceivedChallenge(GameKit.IGKChallengeEventHandlerDelegate,GameKit.GKChallenge)",
			"GameKit.GKChallengeEventHandlerDelegate_Extensions::LocalPlayerSelectedChallenge(GameKit.IGKChallengeEventHandlerDelegate,GameKit.GKChallenge)",
			"GameKit.GKChallengeEventHandlerDelegate_Extensions::RemotePlayerCompletedChallenge(GameKit.IGKChallengeEventHandlerDelegate,GameKit.GKChallenge)",
			"GameKit.GKChallengeEventHandlerDelegate_Extensions::ShouldShowBannerForLocallyCompletedChallenge(GameKit.IGKChallengeEventHandlerDelegate,GameKit.GKChallenge)",
			"GameKit.GKChallengeEventHandlerDelegate_Extensions::ShouldShowBannerForLocallyReceivedChallenge(GameKit.IGKChallengeEventHandlerDelegate,GameKit.GKChallenge)",
			"GameKit.GKChallengeEventHandlerDelegate_Extensions::ShouldShowBannerForRemotelyCompletedChallenge(GameKit.IGKChallengeEventHandlerDelegate,GameKit.GKChallenge)",
			"GameKit.GKChallengeListener_Extensions::DidCompleteChallenge(GameKit.IGKChallengeListener,GameKit.GKPlayer,GameKit.GKChallenge,GameKit.GKPlayer)",
			"GameKit.GKChallengeListener_Extensions::DidReceiveChallenge(GameKit.IGKChallengeListener,GameKit.GKPlayer,GameKit.GKChallenge)",
			"GameKit.GKChallengeListener_Extensions::IssuedChallengeWasCompleted(GameKit.IGKChallengeListener,GameKit.GKPlayer,GameKit.GKChallenge,GameKit.GKPlayer)",
			"GameKit.GKChallengeListener_Extensions::WantsToPlayChallenge(GameKit.IGKChallengeListener,GameKit.GKPlayer,GameKit.GKChallenge)",
			"GameKit.GKChallengesViewController::.ctor(Foundation.NSCoder)",
			"GameKit.GKChallengesViewController::.ctor(System.String,Foundation.NSBundle)",
			"GameKit.GKChallengesViewControllerDelegateWrapper::DidFinish(GameKit.GKChallengesViewController)",
			"GameKit.GKDialogController::.ctor(Foundation.NSCoder)",
			"GameKit.GKDialogController::Dismiss(Foundation.NSObject)",
			"GameKit.GKDialogController::PresentViewController(AppKit.NSViewController)",
			"GameKit.GKFriendRequestComposeViewController::.ctor(Foundation.NSCoder)",
			"GameKit.GKFriendRequestComposeViewController::.ctor(System.String,Foundation.NSBundle)",
			"GameKit.GKFriendRequestComposeViewControllerDelegateWrapper::DidFinish(GameKit.GKFriendRequestComposeViewController)",
			"GameKit.GKGameCenterControllerDelegateWrapper::Finished(GameKit.GKGameCenterViewController)",
			"GameKit.GKGameCenterViewController::.ctor(Foundation.NSCoder)",
			"GameKit.GKGameCenterViewController::.ctor(GameKit.GKLeaderboard,GameKit.GKLeaderboardPlayerScope)",
			"GameKit.GKGameCenterViewController::.ctor(System.String,Foundation.NSBundle)",
			"GameKit.GKGameSession::AddEventListener(GameKit.IGKGameSessionEventListener)",
			"GameKit.GKGameSession::RemoveEventListener(GameKit.IGKGameSessionEventListener)",
			"GameKit.GKGameSession::SaveData(Foundation.NSData,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"GameKit.GKGameSession::SendData(Foundation.NSData,GameKit.GKTransportType,System.Action`1<Foundation.NSError>)",
			"GameKit.GKGameSession::SendMessage(System.String,System.String[],Foundation.NSData,GameKit.GKCloudPlayer[],System.Boolean,System.Action`1<Foundation.NSError>)",
			"GameKit.GKGameSessionEventListener_Extensions::DidAddPlayer(GameKit.IGKGameSessionEventListener,GameKit.GKGameSession,GameKit.GKCloudPlayer)",
			"GameKit.GKGameSessionEventListener_Extensions::DidChangeConnectionState(GameKit.IGKGameSessionEventListener,GameKit.GKGameSession,GameKit.GKCloudPlayer,GameKit.GKConnectionState)",
			"GameKit.GKGameSessionEventListener_Extensions::DidReceiveData(GameKit.IGKGameSessionEventListener,GameKit.GKGameSession,Foundation.NSData,GameKit.GKCloudPlayer)",
			"GameKit.GKGameSessionEventListener_Extensions::DidReceiveMessage(GameKit.IGKGameSessionEventListener,GameKit.GKGameSession,System.String,Foundation.NSData,GameKit.GKCloudPlayer)",
			"GameKit.GKGameSessionEventListener_Extensions::DidRemovePlayer(GameKit.IGKGameSessionEventListener,GameKit.GKGameSession,GameKit.GKCloudPlayer)",
			"GameKit.GKGameSessionEventListener_Extensions::DidSaveData(GameKit.IGKGameSessionEventListener,GameKit.GKGameSession,GameKit.GKCloudPlayer,Foundation.NSData)",
			"GameKit.GKGameSessionSharingViewController::.ctor(Foundation.NSCoder)",
			"GameKit.GKGameSessionSharingViewController::.ctor(GameKit.GKGameSession)",
			"GameKit.GKGameSessionSharingViewController::.ctor(System.String,Foundation.NSBundle)",
			"GameKit.GKGameSessionSharingViewControllerDelegateWrapper::DidFinish(GameKit.GKGameSessionSharingViewController,Foundation.NSError)",
			"GameKit.GKInviteEventListener_Extensions::DidAcceptInvite(GameKit.IGKInviteEventListener,GameKit.GKPlayer,GameKit.GKInvite)",
			"GameKit.GKInviteEventListener_Extensions::DidRequestMatch(GameKit.IGKInviteEventListener,GameKit.GKPlayer,GameKit.GKPlayer[])",
			"GameKit.GKInviteEventListener_Extensions::DidRequestMatch(GameKit.IGKInviteEventListener,GameKit.GKPlayer,System.String[])",
			"GameKit.GKLeaderboard::SubmitScore(System.IntPtr,System.UIntPtr,GameKit.GKPlayer,System.Action`1<Foundation.NSError>)",
			"GameKit.GKLeaderboard::SubmitScore(System.IntPtr,System.UIntPtr,GameKit.GKPlayer,System.String[],System.Action`1<Foundation.NSError>)",
			"GameKit.GKLeaderboardScore::set_Player(GameKit.GKPlayer)",
			"GameKit.GKLeaderboardSet::.ctor(Foundation.NSCoder)",
			"GameKit.GKLeaderboardSet::EncodeTo(Foundation.NSCoder)",
			"GameKit.GKLeaderboardViewController::.ctor(Foundation.NSCoder)",
			"GameKit.GKLeaderboardViewControllerDelegateWrapper::DidFinish(GameKit.GKLeaderboardViewController)",
			"GameKit.GKLocalPlayer::.ctor(Foundation.NSCoder)",
			"GameKit.GKLocalPlayer::DidModifySavedGame(GameKit.GKPlayer,GameKit.GKSavedGame)",
			"GameKit.GKLocalPlayer::HasConflictingSavedGames(GameKit.GKPlayer,GameKit.GKSavedGame[])",
			"GameKit.GKLocalPlayer::PresentFriendRequestCreator(AppKit.NSWindow,Foundation.NSError&)",
			"GameKit.GKLocalPlayer::PresentFriendRequestCreator(UIKit.UIViewController,Foundation.NSError&)",
			"GameKit.GKLocalPlayer::RegisterListener(GameKit.IGKLocalPlayerListener)",
			"GameKit.GKLocalPlayer::ResolveConflictingSavedGames(GameKit.GKSavedGame[],Foundation.NSData,System.Action`2<GameKit.GKSavedGame[],Foundation.NSError>)",
			"GameKit.GKLocalPlayer::SaveGameData(Foundation.NSData,System.String,System.Action`2<GameKit.GKSavedGame,Foundation.NSError>)",
			"GameKit.GKLocalPlayer::UnregisterListener(GameKit.IGKLocalPlayerListener)",
			"GameKit.GKMatch::SendData(Foundation.NSData,GameKit.GKPlayer[],GameKit.GKMatchSendDataMode,Foundation.NSError&)",
			"GameKit.GKMatch::SendData(Foundation.NSData,System.String[],GameKit.GKMatchSendDataMode,Foundation.NSError&)",
			"GameKit.GKMatch::SendDataToAllPlayers(Foundation.NSData,GameKit.GKMatchSendDataMode,Foundation.NSError&)",
			"GameKit.GKMatchDelegate_Extensions::DataReceived(GameKit.IGKMatchDelegate,GameKit.GKMatch,Foundation.NSData,System.String)",
			"GameKit.GKMatchDelegate_Extensions::DataReceivedForRecipient(GameKit.IGKMatchDelegate,GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer,GameKit.GKPlayer)",
			"GameKit.GKMatchDelegate_Extensions::DataReceivedFromPlayer(GameKit.IGKMatchDelegate,GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer)",
			"GameKit.GKMatchDelegate_Extensions::Failed(GameKit.IGKMatchDelegate,GameKit.GKMatch,Foundation.NSError)",
			"GameKit.GKMatchDelegate_Extensions::ShouldReinviteDisconnectedPlayer(GameKit.IGKMatchDelegate,GameKit.GKMatch,GameKit.GKPlayer)",
			"GameKit.GKMatchDelegate_Extensions::ShouldReinvitePlayer(GameKit.IGKMatchDelegate,GameKit.GKMatch,System.String)",
			"GameKit.GKMatchDelegate_Extensions::StateChanged(GameKit.IGKMatchDelegate,GameKit.GKMatch,System.String,GameKit.GKPlayerConnectionState)",
			"GameKit.GKMatchDelegate_Extensions::StateChangedForPlayer(GameKit.IGKMatchDelegate,GameKit.GKMatch,GameKit.GKPlayer,GameKit.GKPlayerConnectionState)",
			"GameKit.GKMatchmaker::AddPlayers(GameKit.GKMatch,GameKit.GKMatchRequest,System.Action`1<Foundation.NSError>)",
			"GameKit.GKMatchmaker::CancelPendingInvite(GameKit.GKPlayer)",
			"GameKit.GKMatchmaker::FindMatch(GameKit.GKMatchRequest,GameKit.GKNotificationMatch)",
			"GameKit.GKMatchmaker::FindPlayers(GameKit.GKMatchRequest,GameKit.GKFriendsHandler)",
			"GameKit.GKMatchmaker::FindPlayersForHostedRequest(GameKit.GKMatchRequest,System.Action`2<GameKit.GKPlayer[],Foundation.NSError>)",
			"GameKit.GKMatchmaker::FinishMatchmaking(GameKit.GKMatch)",
			"GameKit.GKMatchmaker::Match(GameKit.GKInvite,System.Action`2<GameKit.GKMatch,Foundation.NSError>)",
			"GameKit.GKMatchmakerViewController::.ctor(Foundation.NSCoder)",
			"GameKit.GKMatchmakerViewController::.ctor(GameKit.GKInvite)",
			"GameKit.GKMatchmakerViewController::.ctor(GameKit.GKMatchRequest)",
			"GameKit.GKMatchmakerViewController::.ctor(System.String,Foundation.NSBundle)",
			"GameKit.GKMatchmakerViewController::AddPlayersToMatch(GameKit.GKMatch)",
			"GameKit.GKMatchmakerViewController::SetHostedPlayerConnected(GameKit.GKPlayer,System.Boolean)",
			"GameKit.GKMatchmakerViewControllerDelegate_Extensions::DidFindHostedPlayers(GameKit.IGKMatchmakerViewControllerDelegate,GameKit.GKMatchmakerViewController,GameKit.GKPlayer[])",
			"GameKit.GKMatchmakerViewControllerDelegate_Extensions::DidFindMatch(GameKit.IGKMatchmakerViewControllerDelegate,GameKit.GKMatchmakerViewController,GameKit.GKMatch)",
			"GameKit.GKMatchmakerViewControllerDelegate_Extensions::DidFindPlayers(GameKit.IGKMatchmakerViewControllerDelegate,GameKit.GKMatchmakerViewController,System.String[])",
			"GameKit.GKMatchmakerViewControllerDelegate_Extensions::HostedPlayerDidAccept(GameKit.IGKMatchmakerViewControllerDelegate,GameKit.GKMatchmakerViewController,GameKit.GKPlayer)",
			"GameKit.GKMatchmakerViewControllerDelegate_Extensions::ReceivedAcceptFromHostedPlayer(GameKit.IGKMatchmakerViewControllerDelegate,GameKit.GKMatchmakerViewController,System.String)",
			"GameKit.GKMatchmakerViewControllerDelegateWrapper::DidFailWithError(GameKit.GKMatchmakerViewController,Foundation.NSError)",
			"GameKit.GKMatchmakerViewControllerDelegateWrapper::WasCancelled(GameKit.GKMatchmakerViewController)",
			"GameKit.GKPeerPickerControllerDelegate_Extensions::ConnectionTypeSelected(GameKit.IGKPeerPickerControllerDelegate,GameKit.GKPeerPickerController,GameKit.GKPeerPickerConnectionType)",
			"GameKit.GKPeerPickerControllerDelegate_Extensions::ControllerCancelled(GameKit.IGKPeerPickerControllerDelegate,GameKit.GKPeerPickerController)",
			"GameKit.GKPeerPickerControllerDelegate_Extensions::GetSession(GameKit.IGKPeerPickerControllerDelegate,GameKit.GKPeerPickerController,GameKit.GKPeerPickerConnectionType)",
			"GameKit.GKPeerPickerControllerDelegate_Extensions::PeerConnected(GameKit.IGKPeerPickerControllerDelegate,GameKit.GKPeerPickerController,System.String,GameKit.GKSession)",
			"GameKit.GKPlayer::.ctor(Foundation.NSCoder)",
			"GameKit.GKPlayer::EncodeTo(Foundation.NSCoder)",
			"GameKit.GKSavedGame::Copy(Foundation.NSZone)",
			"GameKit.GKSavedGameListener_Extensions::DidModifySavedGame(GameKit.IGKSavedGameListener,GameKit.GKPlayer,GameKit.GKSavedGame)",
			"GameKit.GKSavedGameListener_Extensions::HasConflictingSavedGames(GameKit.IGKSavedGameListener,GameKit.GKPlayer,GameKit.GKSavedGame[])",
			"GameKit.GKScore::.ctor(Foundation.NSCoder)",
			"GameKit.GKScore::.ctor(System.String,GameKit.GKPlayer)",
			"GameKit.GKScore::EncodeTo(Foundation.NSCoder)",
			"GameKit.GKScoreChallenge::.ctor(Foundation.NSCoder)",
			"GameKit.GKSession::_SetDataReceiveHandler(Foundation.NSObject,System.IntPtr)",
			"GameKit.GKSession::SendData(Foundation.NSData,System.String[],GameKit.GKSendDataMode,Foundation.NSError&)",
			"GameKit.GKSession::SendDataToAllPeers(Foundation.NSData,GameKit.GKSendDataMode,Foundation.NSError&)",
			"GameKit.GKSessionDelegate_Extensions::FailedWithError(GameKit.IGKSessionDelegate,GameKit.GKSession,Foundation.NSError)",
			"GameKit.GKSessionDelegate_Extensions::PeerChangedState(GameKit.IGKSessionDelegate,GameKit.GKSession,System.String,GameKit.GKPeerConnectionState)",
			"GameKit.GKSessionDelegate_Extensions::PeerConnectionFailed(GameKit.IGKSessionDelegate,GameKit.GKSession,System.String,Foundation.NSError)",
			"GameKit.GKSessionDelegate_Extensions::PeerConnectionRequest(GameKit.IGKSessionDelegate,GameKit.GKSession,System.String)",
			"GameKit.GKTurnBasedEventHandlerDelegate_Extensions::HandleMatchEnded(GameKit.IGKTurnBasedEventHandlerDelegate,GameKit.GKTurnBasedMatch)",
			"GameKit.GKTurnBasedEventHandlerDelegate_Extensions::HandleTurnEventForMatch(GameKit.IGKTurnBasedEventHandlerDelegate,GameKit.GKTurnBasedMatch)",
			"GameKit.GKTurnBasedEventHandlerDelegateWrapper::HandleTurnEvent(GameKit.GKTurnBasedMatch,System.Boolean)",
			"GameKit.GKTurnBasedEventListener_Extensions::DidRequestMatchWithOtherPlayers(GameKit.IGKTurnBasedEventListener,GameKit.GKPlayer,GameKit.GKPlayer[])",
			"GameKit.GKTurnBasedEventListener_Extensions::DidRequestMatchWithPlayers(GameKit.IGKTurnBasedEventListener,GameKit.GKPlayer,System.String[])",
			"GameKit.GKTurnBasedEventListener_Extensions::MatchEnded(GameKit.IGKTurnBasedEventListener,GameKit.GKPlayer,GameKit.GKTurnBasedMatch)",
			"GameKit.GKTurnBasedEventListener_Extensions::ReceivedExchangeCancellation(GameKit.IGKTurnBasedEventListener,GameKit.GKPlayer,GameKit.GKTurnBasedExchange,GameKit.GKTurnBasedMatch)",
			"GameKit.GKTurnBasedEventListener_Extensions::ReceivedExchangeReplies(GameKit.IGKTurnBasedEventListener,GameKit.GKPlayer,GameKit.GKTurnBasedExchangeReply[],GameKit.GKTurnBasedExchange,GameKit.GKTurnBasedMatch)",
			"GameKit.GKTurnBasedEventListener_Extensions::ReceivedExchangeRequest(GameKit.IGKTurnBasedEventListener,GameKit.GKPlayer,GameKit.GKTurnBasedExchange,GameKit.GKTurnBasedMatch)",
			"GameKit.GKTurnBasedEventListener_Extensions::ReceivedTurnEvent(GameKit.IGKTurnBasedEventListener,GameKit.GKPlayer,GameKit.GKTurnBasedMatch,System.Boolean)",
			"GameKit.GKTurnBasedEventListener_Extensions::WantsToQuitMatch(GameKit.IGKTurnBasedEventListener,GameKit.GKPlayer,GameKit.GKTurnBasedMatch)",
			"GameKit.GKTurnBasedExchange::Reply(System.String,Foundation.NSObject[],Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"GameKit.GKTurnBasedMatch::EndMatchInTurn(Foundation.NSData,GameKit.GKLeaderboardScore[],Foundation.NSObject[],System.Action`1<Foundation.NSError>)",
			"GameKit.GKTurnBasedMatch::EndMatchInTurn(Foundation.NSData,GameKit.GKScore[],GameKit.GKAchievement[],System.Action`1<Foundation.NSError>)",
			"GameKit.GKTurnBasedMatch::EndMatchInTurn(Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"GameKit.GKTurnBasedMatch::EndTurn(GameKit.GKTurnBasedParticipant[],System.Double,Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"GameKit.GKTurnBasedMatch::EndTurnWithNextParticipant(GameKit.GKTurnBasedParticipant,Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"GameKit.GKTurnBasedMatch::FindMatch(GameKit.GKMatchRequest,GameKit.GKTurnBasedMatchRequest)",
			"GameKit.GKTurnBasedMatch::ParticipantQuitInTurn(GameKit.GKTurnBasedMatchOutcome,GameKit.GKTurnBasedParticipant,Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"GameKit.GKTurnBasedMatch::ParticipantQuitInTurn(GameKit.GKTurnBasedMatchOutcome,GameKit.GKTurnBasedParticipant[],System.Double,Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"GameKit.GKTurnBasedMatch::SaveCurrentTurn(Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"GameKit.GKTurnBasedMatch::SaveMergedMatchData(Foundation.NSData,GameKit.GKTurnBasedExchange[],System.Action`1<Foundation.NSError>)",
			"GameKit.GKTurnBasedMatch::SendExchange(GameKit.GKTurnBasedParticipant[],Foundation.NSData,System.String,Foundation.NSObject[],System.Double,System.Action`2<GameKit.GKTurnBasedExchange,Foundation.NSError>)",
			"GameKit.GKTurnBasedMatchmakerViewController::.ctor(Foundation.NSCoder)",
			"GameKit.GKTurnBasedMatchmakerViewController::.ctor(GameKit.GKMatchRequest)",
			"GameKit.GKTurnBasedMatchmakerViewController::.ctor(System.String,Foundation.NSBundle)",
			"GameKit.GKTurnBasedMatchmakerViewControllerDelegate_Extensions::FoundMatch(GameKit.IGKTurnBasedMatchmakerViewControllerDelegate,GameKit.GKTurnBasedMatchmakerViewController,GameKit.GKTurnBasedMatch)",
			"GameKit.GKTurnBasedMatchmakerViewControllerDelegate_Extensions::PlayerQuitForMatch(GameKit.IGKTurnBasedMatchmakerViewControllerDelegate,GameKit.GKTurnBasedMatchmakerViewController,GameKit.GKTurnBasedMatch)",
			"GameKit.GKTurnBasedMatchmakerViewControllerDelegateWrapper::FailedWithError(GameKit.GKTurnBasedMatchmakerViewController,Foundation.NSError)",
			"GameKit.GKTurnBasedMatchmakerViewControllerDelegateWrapper::WasCancelled(GameKit.GKTurnBasedMatchmakerViewController)",
			"GameKit.GKVoiceChat::SetMuteStatus(GameKit.GKPlayer,System.Boolean)",
			"GameKit.GKVoiceChatClient_Extensions::FailedToConnect(GameKit.IGKVoiceChatClient,GameKit.GKVoiceChatService,System.String,Foundation.NSError)",
			"GameKit.GKVoiceChatClient_Extensions::ReceivedInvitation(GameKit.IGKVoiceChatClient,GameKit.GKVoiceChatService,System.String,System.IntPtr)",
			"GameKit.GKVoiceChatClient_Extensions::SendRealTimeData(GameKit.IGKVoiceChatClient,GameKit.GKVoiceChatService,Foundation.NSData,System.String)",
			"GameKit.GKVoiceChatClient_Extensions::Started(GameKit.IGKVoiceChatClient,GameKit.GKVoiceChatService,System.String)",
			"GameKit.GKVoiceChatClient_Extensions::Stopped(GameKit.IGKVoiceChatClient,GameKit.GKVoiceChatService,System.String,Foundation.NSError)",
			"GameKit.GKVoiceChatClientWrapper::SendData(GameKit.GKVoiceChatService,Foundation.NSData,System.String)",
			"GameKit.GKVoiceChatService::ReceivedData(Foundation.NSData,System.String)",
			"GameKit.GKVoiceChatService::ReceivedRealTimeData(Foundation.NSData,System.String)",
			"GameplayKit.GKAgent::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKAgent::EncodeTo(Foundation.NSCoder)",
			"GameplayKit.GKAgent::set_Behavior(GameplayKit.GKBehavior)",
			"GameplayKit.GKAgent2D::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKAgent2D::EncodeTo(Foundation.NSCoder)",
			"GameplayKit.GKAgent3D::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKAgentDelegate_Extensions::AgentDidUpdate(GameplayKit.IGKAgentDelegate,GameplayKit.GKAgent)",
			"GameplayKit.GKAgentDelegate_Extensions::AgentWillUpdate(GameplayKit.IGKAgentDelegate,GameplayKit.GKAgent)",
			"GameplayKit.GKARC4RandomSource::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKARC4RandomSource::.ctor(Foundation.NSData)",
			"GameplayKit.GKARC4RandomSource::set_Seed(Foundation.NSData)",
			"GameplayKit.GKBehavior::Copy(Foundation.NSZone)",
			"GameplayKit.GKBehavior::FromGoal(GameplayKit.GKGoal,System.Single)",
			"GameplayKit.GKBehavior::FromGoals(Foundation.NSDictionary`2<GameplayKit.GKGoal,Foundation.NSNumber>)",
			"GameplayKit.GKBehavior::GetWeight(GameplayKit.GKGoal)",
			"GameplayKit.GKBehavior::ObjectForKeyedSubscript(GameplayKit.GKGoal)",
			"GameplayKit.GKBehavior::RemoveGoal(GameplayKit.GKGoal)",
			"GameplayKit.GKBehavior::SetObject(Foundation.NSNumber,GameplayKit.GKGoal)",
			"GameplayKit.GKBehavior::SetWeight(System.Single,GameplayKit.GKGoal)",
			"GameplayKit.GKComponent::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKComponent::Copy(Foundation.NSZone)",
			"GameplayKit.GKComponent::EncodeTo(Foundation.NSCoder)",
			"GameplayKit.GKComponentSystem`1::AddComponent(GameplayKit.GKEntity)",
			"GameplayKit.GKComponentSystem`1::AddComponent(TComponent)",
			"GameplayKit.GKComponentSystem`1::RemoveComponent(GameplayKit.GKEntity)",
			"GameplayKit.GKComponentSystem`1::RemoveComponent(TComponent)",
			"GameplayKit.GKCompositeBehavior::GetWeight(GameplayKit.GKBehavior)",
			"GameplayKit.GKCompositeBehavior::ObjectForKeyedSubscript(GameplayKit.GKBehavior)",
			"GameplayKit.GKCompositeBehavior::RemoveBehavior(GameplayKit.GKBehavior)",
			"GameplayKit.GKCompositeBehavior::SetObject(Foundation.NSNumber,GameplayKit.GKBehavior)",
			"GameplayKit.GKCompositeBehavior::SetWeight(System.Single,GameplayKit.GKBehavior)",
			"GameplayKit.GKDecisionNode::CreateBranch(Foundation.NSNumber,Foundation.NSObject)",
			"GameplayKit.GKDecisionNode::CreateBranch(Foundation.NSPredicate,Foundation.NSObject)",
			"GameplayKit.GKDecisionNode::CreateBranch(System.IntPtr,Foundation.NSObject)",
			"GameplayKit.GKDecisionTree::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKDecisionTree::.ctor(Foundation.NSObject)",
			"GameplayKit.GKDecisionTree::.ctor(Foundation.NSUrl,Foundation.NSError)",
			"GameplayKit.GKDecisionTree::EncodeTo(Foundation.NSCoder)",
			"GameplayKit.GKDecisionTree::Export(Foundation.NSUrl,Foundation.NSError)",
			"GameplayKit.GKDecisionTree::FindAction(Foundation.NSDictionary`2<Foundation.NSObject,Foundation.NSObject>)",
			"GameplayKit.GKDecisionTree::set_RandomSource(GameplayKit.GKRandomSource)",
			"GameplayKit.GKEntity::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKEntity::AddComponent(GameplayKit.GKComponent)",
			"GameplayKit.GKEntity::Copy(Foundation.NSZone)",
			"GameplayKit.GKEntity::EncodeTo(Foundation.NSCoder)",
			"GameplayKit.GKGameModel_Extensions::GetScore(GameplayKit.IGKGameModel,GameplayKit.IGKGameModelPlayer)",
			"GameplayKit.GKGameModel_Extensions::IsLoss(GameplayKit.IGKGameModel,GameplayKit.IGKGameModelPlayer)",
			"GameplayKit.GKGameModel_Extensions::IsWin(GameplayKit.IGKGameModel,GameplayKit.IGKGameModelPlayer)",
			"GameplayKit.GKGameModel_Extensions::UnapplyGameModelUpdate(GameplayKit.IGKGameModel,GameplayKit.IGKGameModelUpdate)",
			"GameplayKit.GKGameModelWrapper::ApplyGameModelUpdate(GameplayKit.IGKGameModelUpdate)",
			"GameplayKit.GKGameModelWrapper::Copy(Foundation.NSZone)",
			"GameplayKit.GKGameModelWrapper::GetGameModelUpdates(GameplayKit.IGKGameModelPlayer)",
			"GameplayKit.GKGameModelWrapper::SetGameModel(GameplayKit.IGKGameModel)",
			"GameplayKit.GKGaussianDistribution::.ctor(GameplayKit.IGKRandom,System.IntPtr,System.IntPtr)",
			"GameplayKit.GKGaussianDistribution::.ctor(GameplayKit.IGKRandom,System.Single,System.Single)",
			"GameplayKit.GKGoal::Copy(Foundation.NSZone)",
			"GameplayKit.GKGoal::GetGoalToFleeAgent(GameplayKit.GKAgent)",
			"GameplayKit.GKGoal::GetGoalToFollowPath(GameplayKit.GKPath,System.Double,System.Boolean)",
			"GameplayKit.GKGoal::GetGoalToInterceptAgent(GameplayKit.GKAgent,System.Double)",
			"GameplayKit.GKGoal::GetGoalToSeekAgent(GameplayKit.GKAgent)",
			"GameplayKit.GKGoal::GetGoalToStayOnPath(GameplayKit.GKPath,System.Double)",
			"GameplayKit.GKGraph::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKGraph::ConnectNodeToLowestCostNode(GameplayKit.GKGraphNode,System.Boolean)",
			"GameplayKit.GKGraph::Copy(Foundation.NSZone)",
			"GameplayKit.GKGraph::EncodeTo(Foundation.NSCoder)",
			"GameplayKit.GKGraph::FindPath(GameplayKit.GKGraphNode,GameplayKit.GKGraphNode)",
			"GameplayKit.GKGraphNode::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKGraphNode::EncodeTo(Foundation.NSCoder)",
			"GameplayKit.GKGraphNode::FindPathFrom(GameplayKit.GKGraphNode)",
			"GameplayKit.GKGraphNode::FindPathTo(GameplayKit.GKGraphNode)",
			"GameplayKit.GKGraphNode::GetCost(GameplayKit.GKGraphNode)",
			"GameplayKit.GKGraphNode::GetEstimatedCost(GameplayKit.GKGraphNode)",
			"GameplayKit.GKGraphNode2D::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKGraphNode3D::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKGridGraph::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKGridGraph::ConnectNodeToAdjacentNodes(GameplayKit.GKGridGraphNode)",
			"GameplayKit.GKGridGraphNode::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKHybridStrategist::set_GameModel(GameplayKit.IGKGameModel)",
			"GameplayKit.GKHybridStrategist::set_RandomSource(GameplayKit.IGKRandom)",
			"GameplayKit.GKLinearCongruentialRandomSource::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKMersenneTwisterRandomSource::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKMeshGraph`1::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKMeshGraph`1::ConnectNodeUsingObstacles(NodeType)",
			"GameplayKit.GKMinMaxStrategist::GetBestMove(GameplayKit.IGKGameModelPlayer)",
			"GameplayKit.GKMinMaxStrategist::GetRandomMove(GameplayKit.IGKGameModelPlayer,System.IntPtr)",
			"GameplayKit.GKMinMaxStrategist::set_GameModel(GameplayKit.IGKGameModel)",
			"GameplayKit.GKMinMaxStrategist::set_RandomSource(GameplayKit.IGKRandom)",
			"GameplayKit.GKMonteCarloStrategist::set_GameModel(GameplayKit.IGKGameModel)",
			"GameplayKit.GKMonteCarloStrategist::set_RandomSource(GameplayKit.IGKRandom)",
			"GameplayKit.GKNoise::.ctor(GameplayKit.GKNoiseSource)",
			"GameplayKit.GKNoise::.ctor(GameplayKit.GKNoiseSource,Foundation.NSDictionary`2<Foundation.NSNumber,AppKit.NSColor>)",
			"GameplayKit.GKNoise::.ctor(GameplayKit.GKNoiseSource,Foundation.NSDictionary`2<Foundation.NSNumber,UIKit.UIColor>)",
			"GameplayKit.GKNoise::Add(GameplayKit.GKNoise)",
			"GameplayKit.GKNoise::Displace(GameplayKit.GKNoise,GameplayKit.GKNoise,GameplayKit.GKNoise)",
			"GameplayKit.GKNoise::FromComponentNoises(GameplayKit.GKNoise[],GameplayKit.GKNoise)",
			"GameplayKit.GKNoise::FromComponentNoises(GameplayKit.GKNoise[],GameplayKit.GKNoise,Foundation.NSNumber[],Foundation.NSNumber[])",
			"GameplayKit.GKNoise::FromNoiseSource(GameplayKit.GKNoiseSource)",
			"GameplayKit.GKNoise::FromNoiseSource(GameplayKit.GKNoiseSource,Foundation.NSDictionary`2<Foundation.NSNumber,AppKit.NSColor>)",
			"GameplayKit.GKNoise::FromNoiseSource(GameplayKit.GKNoiseSource,Foundation.NSDictionary`2<Foundation.NSNumber,UIKit.UIColor>)",
			"GameplayKit.GKNoise::GetMaximum(GameplayKit.GKNoise)",
			"GameplayKit.GKNoise::GetMinimum(GameplayKit.GKNoise)",
			"GameplayKit.GKNoise::Multiply(GameplayKit.GKNoise)",
			"GameplayKit.GKNoise::RaiseToPower(GameplayKit.GKNoise)",
			"GameplayKit.GKNoise::RemapValuesToCurve(Foundation.NSDictionary`2<Foundation.NSNumber,Foundation.NSNumber>)",
			"GameplayKit.GKNoise::set_GradientColors(Foundation.NSDictionary`2<Foundation.NSNumber,AppKit.NSColor>)",
			"GameplayKit.GKNoise::set_GradientColors(Foundation.NSDictionary`2<Foundation.NSNumber,UIKit.UIColor>)",
			"GameplayKit.GKNoiseMap::.ctor(GameplayKit.GKNoise)",
			"GameplayKit.GKNoiseMap::.ctor(GameplayKit.GKNoise,CoreGraphics.NVector2d,CoreGraphics.NVector2d,CoreGraphics.NVector2i,System.Boolean)",
			"GameplayKit.GKNoiseMap::FromNoise(GameplayKit.GKNoise)",
			"GameplayKit.GKNoiseMap::FromNoise(GameplayKit.GKNoise,CoreGraphics.NVector2d,CoreGraphics.NVector2d,CoreGraphics.NVector2i,System.Boolean)",
			"GameplayKit.GKNSPredicateRule::.ctor(Foundation.NSPredicate)",
			"GameplayKit.GKNSPredicateRule::EvaluatePredicate(GameplayKit.GKRuleSystem)",
			"GameplayKit.GKObstacleGraph::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKObstacleGraph::_GetNodes(GameplayKit.GKPolygonObstacle)",
			"GameplayKit.GKObstacleGraph::ConnectNodeUsingObstacles(GameplayKit.GKGraphNode2D)",
			"GameplayKit.GKObstacleGraph::ConnectNodeUsingObstacles(GameplayKit.GKGraphNode2D,GameplayKit.GKPolygonObstacle[])",
			"GameplayKit.GKObstacleGraph::ConnectNodeUsingObstaclesIgnoringBufferRadius(GameplayKit.GKGraphNode2D,GameplayKit.GKPolygonObstacle[])",
			"GameplayKit.GKObstacleGraph::IsConnectionLocked(GameplayKit.GKGraphNode2D,GameplayKit.GKGraphNode2D)",
			"GameplayKit.GKObstacleGraph::LockConnection(GameplayKit.GKGraphNode2D,GameplayKit.GKGraphNode2D)",
			"GameplayKit.GKObstacleGraph::UnlockConnection(GameplayKit.GKGraphNode2D,GameplayKit.GKGraphNode2D)",
			"GameplayKit.GKOctree`1::AddElement(ElementType,GameplayKit.GKBox)",
			"GameplayKit.GKOctree`1::AddElement(ElementType,System.Numerics.Vector3)",
			"GameplayKit.GKOctree`1::RemoveElement(ElementType)",
			"GameplayKit.GKOctree`1::RemoveElement(ElementType,GameplayKit.GKOctreeNode)",
			"GameplayKit.GKPolygonObstacle::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKPolygonObstacle::EncodeTo(Foundation.NSCoder)",
			"GameplayKit.GKQuadTree::AddElement(Foundation.NSObject,GameplayKit.GKQuad)",
			"GameplayKit.GKQuadTree::AddElement(Foundation.NSObject,System.Numerics.Vector2)",
			"GameplayKit.GKQuadTree::RemoveElement(Foundation.NSObject)",
			"GameplayKit.GKQuadTree::RemoveElement(Foundation.NSObject,GameplayKit.GKQuadTreeNode)",
			"GameplayKit.GKRandomDistribution::.ctor(GameplayKit.IGKRandom,System.IntPtr,System.IntPtr)",
			"GameplayKit.GKRandomSource::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKRandomSource::Copy(Foundation.NSZone)",
			"GameplayKit.GKRandomSource::EncodeTo(Foundation.NSCoder)",
			"GameplayKit.GKRTree`1::AddElement(ElementType,System.Numerics.Vector2,System.Numerics.Vector2,GameplayKit.GKRTreeSplitStrategy)",
			"GameplayKit.GKRTree`1::RemoveElement(ElementType,System.Numerics.Vector2,System.Numerics.Vector2)",
			"GameplayKit.GKRule::EvaluatePredicate(GameplayKit.GKRuleSystem)",
			"GameplayKit.GKRule::FromPredicateAssertingFact(Foundation.NSPredicate,Foundation.NSObject,System.Single)",
			"GameplayKit.GKRule::FromPredicateRetractingFact(Foundation.NSPredicate,Foundation.NSObject,System.Single)",
			"GameplayKit.GKRule::PerformAction(GameplayKit.GKRuleSystem)",
			"GameplayKit.GKRuleSystem::AddRule(GameplayKit.GKRule)",
			"GameplayKit.GKRuleSystem::AssertFact(Foundation.NSObject)",
			"GameplayKit.GKRuleSystem::AssertFact(Foundation.NSObject,System.Single)",
			"GameplayKit.GKRuleSystem::GetGrade(Foundation.NSObject)",
			"GameplayKit.GKRuleSystem::RetractFact(Foundation.NSObject)",
			"GameplayKit.GKRuleSystem::RetractFact(Foundation.NSObject,System.Single)",
			"GameplayKit.GKScene::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKScene::AddEntity(GameplayKit.GKEntity)",
			"GameplayKit.GKScene::AddGraph(GameplayKit.GKGraph,System.String)",
			"GameplayKit.GKScene::Copy(Foundation.NSZone)",
			"GameplayKit.GKScene::EncodeTo(Foundation.NSCoder)",
			"GameplayKit.GKScene::FromFile(System.String,GameplayKit.IGKSceneRootNodeType)",
			"GameplayKit.GKScene::RemoveEntity(GameplayKit.GKEntity)",
			"GameplayKit.GKSCNNodeComponent::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKSCNNodeComponent::.ctor(SceneKit.SCNNode)",
			"GameplayKit.GKSCNNodeComponent::AgentDidUpdate(GameplayKit.GKAgent)",
			"GameplayKit.GKSCNNodeComponent::AgentWillUpdate(GameplayKit.GKAgent)",
			"GameplayKit.GKSCNNodeComponent::FromNode(SceneKit.SCNNode)",
			"GameplayKit.GKShuffledDistribution::.ctor(GameplayKit.IGKRandom,System.IntPtr,System.IntPtr)",
			"GameplayKit.GKSKNodeComponent::.ctor(Foundation.NSCoder)",
			"GameplayKit.GKSKNodeComponent::.ctor(SpriteKit.SKNode)",
			"GameplayKit.GKSKNodeComponent::AgentDidUpdate(GameplayKit.GKAgent)",
			"GameplayKit.GKSKNodeComponent::AgentWillUpdate(GameplayKit.GKAgent)",
			"GameplayKit.GKSKNodeComponent::FromNode(SpriteKit.SKNode)",
			"GameplayKit.GKSKNodeComponent::set_Node(SpriteKit.SKNode)",
			"GameplayKit.GKState::DidEnter(GameplayKit.GKState)",
			"GameplayKit.GKState::WillExit(GameplayKit.GKState)",
			"GameplayKit.GKStrategistWrapper::set_GameModel(GameplayKit.IGKGameModel)",
			"GameplayKit.GKStrategistWrapper::set_RandomSource(GameplayKit.IGKRandom)",
			"GameplayKit.NSArray_GameplayKit::GetShuffledArray(Foundation.NSArray)",
			"GameplayKit.NSArray_GameplayKit::GetShuffledArray(Foundation.NSArray,GameplayKit.GKRandomSource)",
			"GameplayKit.SCNNode_GameplayKit::GetEntity(SceneKit.SCNNode)",
			"GameplayKit.SCNNode_GameplayKit::SetEntity(SceneKit.SCNNode,GameplayKit.GKEntity)",
			"GameplayKit.SKNode_GameplayKit::GetEntity(SpriteKit.SKNode)",
			"GameplayKit.SKNode_GameplayKit::SetEntity(SpriteKit.SKNode,GameplayKit.GKEntity)",
			"GLKit.GLKEffectPropertyLight::set_Transform(GLKit.GLKEffectPropertyTransform)",
			"GLKit.GLKMesh::.ctor(ModelIO.MDLMesh,Foundation.NSError&)",
			"GLKit.GLKMesh::FromAsset(ModelIO.MDLAsset,Foundation.NSArray&,Foundation.NSError&)",
			"GLKit.GLKMeshBuffer::Copy(Foundation.NSZone)",
			"GLKit.GLKMeshBuffer::FillData(Foundation.NSData,System.UIntPtr)",
			"GLKit.GLKMeshBufferAllocator::CreateBuffer(Foundation.NSData,ModelIO.MDLMeshBufferType)",
			"GLKit.GLKMeshBufferAllocator::CreateBuffer(ModelIO.IMDLMeshBufferZone,Foundation.NSData,ModelIO.MDLMeshBufferType)",
			"GLKit.GLKMeshBufferAllocator::CreateBuffer(ModelIO.IMDLMeshBufferZone,System.UIntPtr,ModelIO.MDLMeshBufferType)",
			"GLKit.GLKTextureInfo::Copy(Foundation.NSZone)",
			"GLKit.GLKTextureLoader::.ctor(AppKit.NSOpenGLContext)",
			"GLKit.GLKTextureLoader::.ctor(OpenGLES.EAGLSharegroup)",
			"GLKit.GLKTextureLoader::BeginLoadCubeMap(Foundation.NSArray,Foundation.NSDictionary,CoreFoundation.DispatchQueue,GLKit.GLKTextureLoaderCallback)",
			"GLKit.GLKTextureLoader::BeginLoadCubeMap(Foundation.NSUrl,Foundation.NSDictionary,CoreFoundation.DispatchQueue,GLKit.GLKTextureLoaderCallback)",
			"GLKit.GLKTextureLoader::BeginLoadCubeMap(System.String,Foundation.NSDictionary,CoreFoundation.DispatchQueue,GLKit.GLKTextureLoaderCallback)",
			"GLKit.GLKTextureLoader::BeginTextureLoad(CoreGraphics.CGImage,Foundation.NSDictionary,CoreFoundation.DispatchQueue,GLKit.GLKTextureLoaderCallback)",
			"GLKit.GLKTextureLoader::BeginTextureLoad(Foundation.NSData,Foundation.NSDictionary,CoreFoundation.DispatchQueue,GLKit.GLKTextureLoaderCallback)",
			"GLKit.GLKTextureLoader::BeginTextureLoad(Foundation.NSUrl,Foundation.NSDictionary,CoreFoundation.DispatchQueue,GLKit.GLKTextureLoaderCallback)",
			"GLKit.GLKTextureLoader::BeginTextureLoad(System.String,Foundation.NSDictionary,CoreFoundation.DispatchQueue,GLKit.GLKTextureLoaderCallback)",
			"GLKit.GLKTextureLoader::BeginTextureLoad(System.String,System.Runtime.InteropServices.NFloat,Foundation.NSBundle,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSNumber>,CoreFoundation.DispatchQueue,GLKit.GLKTextureLoaderCallback)",
			"GLKit.GLKTextureLoader::CubeMapFromFile(System.String,Foundation.NSDictionary,Foundation.NSError&)",
			"GLKit.GLKTextureLoader::CubeMapFromFiles(Foundation.NSArray,Foundation.NSDictionary,Foundation.NSError&)",
			"GLKit.GLKTextureLoader::CubeMapFromUrl(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"GLKit.GLKTextureLoader::FromData(Foundation.NSData,Foundation.NSDictionary,Foundation.NSError&)",
			"GLKit.GLKTextureLoader::FromFile(System.String,Foundation.NSDictionary,Foundation.NSError&)",
			"GLKit.GLKTextureLoader::FromImage(CoreGraphics.CGImage,Foundation.NSDictionary,Foundation.NSError&)",
			"GLKit.GLKTextureLoader::FromName(System.String,System.Runtime.InteropServices.NFloat,Foundation.NSBundle,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSNumber>,Foundation.NSError&)",
			"GLKit.GLKTextureLoader::FromUrl(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"GLKit.GLKView::.ctor(CoreGraphics.CGRect,OpenGLES.EAGLContext)",
			"GLKit.GLKView::.ctor(Foundation.NSCoder)",
			"GLKit.GLKView::set_Context(OpenGLES.EAGLContext)",
			"GLKit.GLKViewController::.ctor(Foundation.NSCoder)",
			"GLKit.GLKViewController::.ctor(System.String,Foundation.NSBundle)",
			"GLKit.GLKViewController::DrawInRect(GLKit.GLKView,CoreGraphics.CGRect)",
			"GLKit.GLKViewControllerDelegate_Extensions::WillPause(GLKit.IGLKViewControllerDelegate,GLKit.GLKViewController,System.Boolean)",
			"GLKit.GLKViewControllerDelegateWrapper::Update(GLKit.GLKViewController)",
			"GLKit.GLKViewDelegateWrapper::DrawInRect(GLKit.GLKView,CoreGraphics.CGRect)",
			"HealthKit.HKActivityMoveModeObject::.ctor(Foundation.NSCoder)",
			"HealthKit.HKActivityMoveModeObject::Copy(Foundation.NSZone)",
			"HealthKit.HKActivityMoveModeObject::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKActivitySummary::.ctor(Foundation.NSCoder)",
			"HealthKit.HKActivitySummary::Copy(Foundation.NSZone)",
			"HealthKit.HKActivitySummary::DateComponentsForCalendar(Foundation.NSCalendar)",
			"HealthKit.HKActivitySummary::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKActivitySummary::set_ActiveEnergyBurned(HealthKit.HKQuantity)",
			"HealthKit.HKActivitySummary::set_ActiveEnergyBurnedGoal(HealthKit.HKQuantity)",
			"HealthKit.HKActivitySummary::set_AppleExerciseTime(HealthKit.HKQuantity)",
			"HealthKit.HKActivitySummary::set_AppleExerciseTimeGoal(HealthKit.HKQuantity)",
			"HealthKit.HKActivitySummary::set_AppleMoveTime(HealthKit.HKQuantity)",
			"HealthKit.HKActivitySummary::set_AppleMoveTimeGoal(HealthKit.HKQuantity)",
			"HealthKit.HKActivitySummary::set_AppleStandHours(HealthKit.HKQuantity)",
			"HealthKit.HKActivitySummary::set_AppleStandHoursGoal(HealthKit.HKQuantity)",
			"HealthKit.HKActivitySummaryQuery::.ctor(Foundation.NSPredicate,System.Action`3<HealthKit.HKActivitySummaryQuery,HealthKit.HKActivitySummary[],Foundation.NSError>)",
			"HealthKit.HKActivitySummaryType::.ctor(Foundation.NSCoder)",
			"HealthKit.HKAnchoredObjectQuery::.ctor(HealthKit.HKQueryDescriptor[],HealthKit.HKQueryAnchor,System.IntPtr,HealthKit.HKAnchoredObjectUpdateHandler)",
			"HealthKit.HKAnchoredObjectQuery::.ctor(HealthKit.HKSampleType,Foundation.NSPredicate,HealthKit.HKQueryAnchor,System.UIntPtr,HealthKit.HKAnchoredObjectUpdateHandler)",
			"HealthKit.HKAnchoredObjectQuery::.ctor(HealthKit.HKSampleType,Foundation.NSPredicate,System.UIntPtr,System.UIntPtr,HealthKit.HKAnchoredObjectResultHandler)",
			"HealthKit.HKAppleWalkingSteadiness::TryGetClassification(HealthKit.HKQuantity,System.Nullable`1<HealthKit.HKAppleWalkingSteadinessClassification>&,Foundation.NSError&)",
			"HealthKit.HKAudiogramSample::.ctor(Foundation.NSCoder)",
			"HealthKit.HKAudiogramSample::GetAudiogramSample(HealthKit.HKAudiogramSensitivityPoint[],Foundation.NSDate,Foundation.NSDate,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"HealthKit.HKAudiogramSampleType::.ctor(Foundation.NSCoder)",
			"HealthKit.HKAudiogramSensitivityPoint::GetSensitivityPoint(HealthKit.HKQuantity,HealthKit.HKQuantity,HealthKit.HKQuantity,Foundation.NSError&)",
			"HealthKit.HKBiologicalSexObject::.ctor(Foundation.NSCoder)",
			"HealthKit.HKBiologicalSexObject::Copy(Foundation.NSZone)",
			"HealthKit.HKBiologicalSexObject::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKBloodTypeObject::.ctor(Foundation.NSCoder)",
			"HealthKit.HKBloodTypeObject::Copy(Foundation.NSZone)",
			"HealthKit.HKBloodTypeObject::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKCategorySample::.ctor(Foundation.NSCoder)",
			"HealthKit.HKCategorySample::FromType(HealthKit.HKCategoryType,System.IntPtr,Foundation.NSDate,Foundation.NSDate)",
			"HealthKit.HKCategorySample::FromType(HealthKit.HKCategoryType,System.IntPtr,Foundation.NSDate,Foundation.NSDate,Foundation.NSDictionary)",
			"HealthKit.HKCategorySample::FromType(HealthKit.HKCategoryType,System.IntPtr,Foundation.NSDate,Foundation.NSDate,HealthKit.HKDevice,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"HealthKit.HKCategoryType::.ctor(Foundation.NSCoder)",
			"HealthKit.HKCdaDocumentSample::.ctor(Foundation.NSCoder)",
			"HealthKit.HKCdaDocumentSample::Create(Foundation.NSData,Foundation.NSDate,Foundation.NSDate,Foundation.NSDictionary,Foundation.NSError&)",
			"HealthKit.HKCharacteristicType::.ctor(Foundation.NSCoder)",
			"HealthKit.HKClinicalRecord::.ctor(Foundation.NSCoder)",
			"HealthKit.HKClinicalRecord::Copy(Foundation.NSZone)",
			"HealthKit.HKClinicalRecord::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKClinicalType::.ctor(Foundation.NSCoder)",
			"HealthKit.HKCorrelation::.ctor(Foundation.NSCoder)",
			"HealthKit.HKCorrelation::Create(HealthKit.HKCorrelationType,Foundation.NSDate,Foundation.NSDate,Foundation.NSSet)",
			"HealthKit.HKCorrelation::Create(HealthKit.HKCorrelationType,Foundation.NSDate,Foundation.NSDate,Foundation.NSSet,Foundation.NSDictionary)",
			"HealthKit.HKCorrelation::Create(HealthKit.HKCorrelationType,Foundation.NSDate,Foundation.NSDate,Foundation.NSSet`1<HealthKit.HKSample>,HealthKit.HKDevice,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"HealthKit.HKCorrelation::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKCorrelation::GetObjects(HealthKit.HKObjectType)",
			"HealthKit.HKCorrelationQuery::.ctor(HealthKit.HKCorrelationType,Foundation.NSPredicate,Foundation.NSDictionary,HealthKit.HKCorrelationQueryResultHandler)",
			"HealthKit.HKCorrelationType::.ctor(Foundation.NSCoder)",
			"HealthKit.HKCumulativeQuantitySample::.ctor(Foundation.NSCoder)",
			"HealthKit.HKCumulativeQuantitySeriesSample::.ctor(Foundation.NSCoder)",
			"HealthKit.HKDeletedObject::.ctor(Foundation.NSCoder)",
			"HealthKit.HKDeletedObject::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKDevice::.ctor(Foundation.NSCoder)",
			"HealthKit.HKDevice::Copy(Foundation.NSZone)",
			"HealthKit.HKDevice::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKDiscreteQuantitySample::.ctor(Foundation.NSCoder)",
			"HealthKit.HKDocumentQuery::.ctor(HealthKit.HKDocumentType,Foundation.NSPredicate,System.UIntPtr,Foundation.NSSortDescriptor[],System.Boolean,System.Action`4<HealthKit.HKDocumentQuery,HealthKit.HKDocumentSample[],System.Boolean,Foundation.NSError>)",
			"HealthKit.HKDocumentSample::.ctor(Foundation.NSCoder)",
			"HealthKit.HKDocumentType::.ctor(Foundation.NSCoder)",
			"HealthKit.HKElectrocardiogram::.ctor(Foundation.NSCoder)",
			"HealthKit.HKElectrocardiogramQuery::.ctor(HealthKit.HKElectrocardiogram,HealthKit.HKElectrocardiogramQueryDataHandler)",
			"HealthKit.HKElectrocardiogramType::.ctor(Foundation.NSCoder)",
			"HealthKit.HKFhirResource::.ctor(Foundation.NSCoder)",
			"HealthKit.HKFhirResource::Copy(Foundation.NSZone)",
			"HealthKit.HKFhirResource::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKFhirVersion::.ctor(Foundation.NSCoder)",
			"HealthKit.HKFhirVersion::Copy(Foundation.NSZone)",
			"HealthKit.HKFhirVersion::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKFitzpatrickSkinTypeObject::.ctor(Foundation.NSCoder)",
			"HealthKit.HKFitzpatrickSkinTypeObject::Copy(Foundation.NSZone)",
			"HealthKit.HKFitzpatrickSkinTypeObject::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKHealthStore::AddSamples(HealthKit.HKSample[],HealthKit.HKWorkout,HealthKit.HKStoreSampleAddedCallback)",
			"HealthKit.HKHealthStore::DeleteObject(HealthKit.HKObject,System.Action`2<System.Boolean,Foundation.NSError>)",
			"HealthKit.HKHealthStore::DeleteObjects(HealthKit.HKObjectType,Foundation.NSPredicate,System.Action`3<System.Boolean,System.UIntPtr,Foundation.NSError>)",
			"HealthKit.HKHealthStore::DisableBackgroundDelivery(HealthKit.HKObjectType,System.Action`2<System.Boolean,Foundation.NSError>)",
			"HealthKit.HKHealthStore::EnableBackgroundDelivery(HealthKit.HKObjectType,HealthKit.HKUpdateFrequency,System.Action`2<System.Boolean,Foundation.NSError>)",
			"HealthKit.HKHealthStore::ExecuteQuery(HealthKit.HKQuery)",
			"HealthKit.HKHealthStore::GetAuthorizationStatus(HealthKit.HKObjectType)",
			"HealthKit.HKHealthStore::GetPreferredUnits(Foundation.NSSet,System.Action`2<Foundation.NSDictionary,Foundation.NSError>)",
			"HealthKit.HKHealthStore::GetRequestStatusForAuthorizationToShare(Foundation.NSSet`1<HealthKit.HKSampleType>,Foundation.NSSet`1<HealthKit.HKObjectType>,HealthKit.HKHealthStoreGetRequestStatusForAuthorizationToShareHandler)",
			"HealthKit.HKHealthStore::RecalibrateEstimates(HealthKit.HKSampleType,Foundation.NSDate,System.Action`2<System.Boolean,Foundation.NSError>)",
			"HealthKit.HKHealthStore::RequestAuthorizationToShare(Foundation.NSSet,Foundation.NSSet,System.Action`2<System.Boolean,Foundation.NSError>)",
			"HealthKit.HKHealthStore::SaveObject(HealthKit.HKObject,System.Action`2<System.Boolean,Foundation.NSError>)",
			"HealthKit.HKHealthStore::SplitTotalEnergy(HealthKit.HKQuantity,Foundation.NSDate,Foundation.NSDate,System.Action`3<HealthKit.HKQuantity,HealthKit.HKQuantity,Foundation.NSError>)",
			"HealthKit.HKHealthStore::StartWatchApp(HealthKit.HKWorkoutConfiguration,System.Action`2<System.Boolean,Foundation.NSError>)",
			"HealthKit.HKHealthStore::StopQuery(HealthKit.HKQuery)",
			"HealthKit.HKHeartbeatSeriesBuilder::.ctor(Foundation.NSCoder)",
			"HealthKit.HKHeartbeatSeriesBuilder::.ctor(HealthKit.HKHealthStore,HealthKit.HKDevice,Foundation.NSDate)",
			"HealthKit.HKHeartbeatSeriesBuilder::AddMetadata(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,HealthKit.HKHeartbeatSeriesBuilderCompletionHandler)",
			"HealthKit.HKHeartbeatSeriesQuery::.ctor(HealthKit.HKHeartbeatSeriesSample,HealthKit.HKHeartbeatSeriesQueryDataHandler)",
			"HealthKit.HKHeartbeatSeriesSample::.ctor(Foundation.NSCoder)",
			"HealthKit.HKHeartbeatSeriesSample::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKObject::.ctor(Foundation.NSCoder)",
			"HealthKit.HKObject::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKObjectType::.ctor(Foundation.NSCoder)",
			"HealthKit.HKObjectType::_GetDocumentType(Foundation.NSString)",
			"HealthKit.HKObjectType::Copy(Foundation.NSZone)",
			"HealthKit.HKObjectType::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKObjectType::GetCategoryType(Foundation.NSString)",
			"HealthKit.HKObjectType::GetCharacteristicType(Foundation.NSString)",
			"HealthKit.HKObjectType::GetClinicalType(Foundation.NSString)",
			"HealthKit.HKObjectType::GetCorrelationType(Foundation.NSString)",
			"HealthKit.HKObjectType::GetQuantityType(Foundation.NSString)",
			"HealthKit.HKObserverQuery::.ctor(HealthKit.HKSampleType,Foundation.NSPredicate,HealthKit.HKObserverQueryUpdateHandler)",
			"HealthKit.HKQuantity::.ctor(Foundation.NSCoder)",
			"HealthKit.HKQuantity::Compare(HealthKit.HKQuantity)",
			"HealthKit.HKQuantity::Copy(Foundation.NSZone)",
			"HealthKit.HKQuantity::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKQuantity::FromQuantity(HealthKit.HKUnit,System.Double)",
			"HealthKit.HKQuantity::GetDoubleValue(HealthKit.HKUnit)",
			"HealthKit.HKQuantity::IsCompatible(HealthKit.HKUnit)",
			"HealthKit.HKQuantitySample::.ctor(Foundation.NSCoder)",
			"HealthKit.HKQuantitySample::FromType(HealthKit.HKQuantityType,HealthKit.HKQuantity,Foundation.NSDate,Foundation.NSDate)",
			"HealthKit.HKQuantitySample::FromType(HealthKit.HKQuantityType,HealthKit.HKQuantity,Foundation.NSDate,Foundation.NSDate,Foundation.NSDictionary)",
			"HealthKit.HKQuantitySample::FromType(HealthKit.HKQuantityType,HealthKit.HKQuantity,Foundation.NSDate,Foundation.NSDate,HealthKit.HKDevice,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"HealthKit.HKQuantitySeriesSampleBuilder::.ctor(HealthKit.HKHealthStore,HealthKit.HKQuantityType,Foundation.NSDate,HealthKit.HKDevice)",
			"HealthKit.HKQuantitySeriesSampleBuilder::FinishSeries(Foundation.NSDictionary,Foundation.NSDate,HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate)",
			"HealthKit.HKQuantitySeriesSampleBuilder::FinishSeries(Foundation.NSDictionary,HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate)",
			"HealthKit.HKQuantitySeriesSampleBuilder::Insert(HealthKit.HKQuantity,Foundation.NSDate,Foundation.NSError&)",
			"HealthKit.HKQuantitySeriesSampleBuilder::Insert(HealthKit.HKQuantity,Foundation.NSDateInterval,Foundation.NSError&)",
			"HealthKit.HKQuantitySeriesSampleQuery::.ctor(HealthKit.HKQuantitySample,HealthKit.HKQuantitySeriesSampleQueryQuantityDelegate)",
			"HealthKit.HKQuantitySeriesSampleQuery::.ctor(HealthKit.HKQuantityType,Foundation.NSPredicate,HealthKit.HKQuantitySeriesSampleQueryQuantityHandler)",
			"HealthKit.HKQuantityType::.ctor(Foundation.NSCoder)",
			"HealthKit.HKQuantityType::IsCompatible(HealthKit.HKUnit)",
			"HealthKit.HKQuery::GetPredicateForActivitySummariesBetween(Foundation.NSDateComponents,Foundation.NSDateComponents)",
			"HealthKit.HKQuery::GetPredicateForActivitySummary(Foundation.NSDateComponents)",
			"HealthKit.HKQuery::GetPredicateForClinicalRecords(Foundation.NSString)",
			"HealthKit.HKQuery::GetPredicateForClinicalRecords(HealthKit.HKSource,System.String,System.String)",
			"HealthKit.HKQuery::GetPredicateForMetadataKey(Foundation.NSString)",
			"HealthKit.HKQuery::GetPredicateForMetadataKey(Foundation.NSString,Foundation.NSObject[])",
			"HealthKit.HKQuery::GetPredicateForMetadataKey(Foundation.NSString,Foundation.NSPredicateOperatorType,Foundation.NSObject)",
			"HealthKit.HKQuery::GetPredicateForObject(Foundation.NSUuid)",
			"HealthKit.HKQuery::GetPredicateForObjects(Foundation.NSSet)",
			"HealthKit.HKQuery::GetPredicateForObjects(HealthKit.HKElectrocardiogram)",
			"HealthKit.HKQuery::GetPredicateForObjectsFromDevices(Foundation.NSSet`1<HealthKit.HKDevice>)",
			"HealthKit.HKQuery::GetPredicateForObjectsFromSource(HealthKit.HKSource)",
			"HealthKit.HKQuery::GetPredicateForObjectsFromSourceRevisions(Foundation.NSSet`1<HealthKit.HKSourceRevision>)",
			"HealthKit.HKQuery::GetPredicateForObjectsFromSources(Foundation.NSSet)",
			"HealthKit.HKQuery::GetPredicateForObjectsFromWorkout(HealthKit.HKWorkout)",
			"HealthKit.HKQuery::GetPredicateForObjectsWithDeviceProperty(System.String,Foundation.NSSet`1<Foundation.NSString>)",
			"HealthKit.HKQuery::GetPredicateForQuantitySamples(Foundation.NSPredicateOperatorType,HealthKit.HKQuantity)",
			"HealthKit.HKQuery::GetPredicateForSamples(Foundation.NSDate,Foundation.NSDate,HealthKit.HKQueryOptions)",
			"HealthKit.HKQuery::GetPredicateForTotalDistance(Foundation.NSPredicateOperatorType,HealthKit.HKQuantity)",
			"HealthKit.HKQuery::GetPredicateForTotalEnergyBurned(Foundation.NSPredicateOperatorType,HealthKit.HKQuantity)",
			"HealthKit.HKQuery::GetPredicateForTotalFlightsClimbed(Foundation.NSPredicateOperatorType,HealthKit.HKQuantity)",
			"HealthKit.HKQuery::GetPredicateForTotalSwimmingStrokeCount(Foundation.NSPredicateOperatorType,HealthKit.HKQuantity)",
			"HealthKit.HKQuery::GetPredicateForVerifiableClinicalRecords(Foundation.NSDateInterval)",
			"HealthKit.HKQueryAnchor::.ctor(Foundation.NSCoder)",
			"HealthKit.HKQueryAnchor::Copy(Foundation.NSZone)",
			"HealthKit.HKQueryAnchor::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKQueryDescriptor::.ctor(Foundation.NSCoder)",
			"HealthKit.HKQueryDescriptor::.ctor(HealthKit.HKSampleType,Foundation.NSPredicate)",
			"HealthKit.HKQueryDescriptor::Copy(Foundation.NSZone)",
			"HealthKit.HKQueryDescriptor::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKSample::.ctor(Foundation.NSCoder)",
			"HealthKit.HKSampleQuery::.ctor(HealthKit.HKSampleType,Foundation.NSPredicate,System.UIntPtr,Foundation.NSSortDescriptor[],HealthKit.HKSampleQueryResultsHandler)",
			"HealthKit.HKSampleType::.ctor(Foundation.NSCoder)",
			"HealthKit.HKSeriesBuilder::.ctor(Foundation.NSCoder)",
			"HealthKit.HKSeriesBuilder::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKSeriesSample::.ctor(Foundation.NSCoder)",
			"HealthKit.HKSeriesSample::Copy(Foundation.NSZone)",
			"HealthKit.HKSeriesType::.ctor(Foundation.NSCoder)",
			"HealthKit.HKSource::.ctor(Foundation.NSCoder)",
			"HealthKit.HKSource::Copy(Foundation.NSZone)",
			"HealthKit.HKSource::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKSourceQuery::.ctor(HealthKit.HKSampleType,Foundation.NSPredicate,HealthKit.HKSourceQueryCompletionHandler)",
			"HealthKit.HKSourceRevision::.ctor(Foundation.NSCoder)",
			"HealthKit.HKSourceRevision::.ctor(HealthKit.HKSource,System.String)",
			"HealthKit.HKSourceRevision::.ctor(HealthKit.HKSource,System.String,System.String,Foundation.NSOperatingSystemVersion)",
			"HealthKit.HKSourceRevision::Copy(Foundation.NSZone)",
			"HealthKit.HKSourceRevision::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKStatistics::.ctor(Foundation.NSCoder)",
			"HealthKit.HKStatistics::AverageQuantity(HealthKit.HKSource)",
			"HealthKit.HKStatistics::Copy(Foundation.NSZone)",
			"HealthKit.HKStatistics::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKStatistics::GetDuration(HealthKit.HKSource)",
			"HealthKit.HKStatistics::GetMostRecentQuantity(HealthKit.HKSource)",
			"HealthKit.HKStatistics::GetMostRecentQuantityDateInterval(HealthKit.HKSource)",
			"HealthKit.HKStatistics::MaximumQuantity(HealthKit.HKSource)",
			"HealthKit.HKStatistics::MinimumQuantity(HealthKit.HKSource)",
			"HealthKit.HKStatistics::SumQuantity(HealthKit.HKSource)",
			"HealthKit.HKStatisticsCollection::EnumerateStatistics(Foundation.NSDate,Foundation.NSDate,HealthKit.HKStatisticsCollectionEnumerator)",
			"HealthKit.HKStatisticsCollection::GetStatistics(Foundation.NSDate)",
			"HealthKit.HKStatisticsCollectionQuery::.ctor(HealthKit.HKQuantityType,Foundation.NSPredicate,HealthKit.HKStatisticsOptions,Foundation.NSDate,Foundation.NSDateComponents)",
			"HealthKit.HKStatisticsQuery::.ctor(HealthKit.HKQuantityType,Foundation.NSPredicate,HealthKit.HKStatisticsOptions,HealthKit.HKStatisticsQueryHandler)",
			"HealthKit.HKUnit::.ctor(Foundation.NSCoder)",
			"HealthKit.HKUnit::Copy(Foundation.NSZone)",
			"HealthKit.HKUnit::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKUnit::GetEnergyFormatterUnit(HealthKit.HKUnit)",
			"HealthKit.HKUnit::GetLengthFormatterUnit(HealthKit.HKUnit)",
			"HealthKit.HKUnit::GetMassFormatterUnit(HealthKit.HKUnit)",
			"HealthKit.HKUnit::UnitDividedBy(HealthKit.HKUnit)",
			"HealthKit.HKUnit::UnitMultipliedBy(HealthKit.HKUnit)",
			"HealthKit.HKVerifiableClinicalRecord::.ctor(Foundation.NSCoder)",
			"HealthKit.HKVerifiableClinicalRecordQuery::.ctor(System.String[],Foundation.NSPredicate,HealthKit.HKVerifiableClinicalRecordQueryResultHandler)",
			"HealthKit.HKVerifiableClinicalRecordQuery::.ctor(System.String[],HealthKit.HKVerifiableClinicalRecordSourceType[],Foundation.NSPredicate,System.Action`3<HealthKit.HKVerifiableClinicalRecordQuery,HealthKit.HKVerifiableClinicalRecord[],Foundation.NSError>)",
			"HealthKit.HKVerifiableClinicalRecordSubject::.ctor(Foundation.NSCoder)",
			"HealthKit.HKVerifiableClinicalRecordSubject::Copy(Foundation.NSZone)",
			"HealthKit.HKVerifiableClinicalRecordSubject::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKWheelchairUseObject::.ctor(Foundation.NSCoder)",
			"HealthKit.HKWheelchairUseObject::Copy(Foundation.NSZone)",
			"HealthKit.HKWheelchairUseObject::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKWorkout::.ctor(Foundation.NSCoder)",
			"HealthKit.HKWorkout::Create(HealthKit.HKWorkoutActivityType,Foundation.NSDate,Foundation.NSDate)",
			"HealthKit.HKWorkout::Create(HealthKit.HKWorkoutActivityType,Foundation.NSDate,Foundation.NSDate,HealthKit.HKWorkoutEvent[],HealthKit.HKQuantity,HealthKit.HKQuantity,Foundation.NSDictionary)",
			"HealthKit.HKWorkout::Create(HealthKit.HKWorkoutActivityType,Foundation.NSDate,Foundation.NSDate,HealthKit.HKWorkoutEvent[],HealthKit.HKQuantity,HealthKit.HKQuantity,HealthKit.HKDevice,Foundation.NSDictionary)",
			"HealthKit.HKWorkout::Create(HealthKit.HKWorkoutActivityType,Foundation.NSDate,Foundation.NSDate,HealthKit.HKWorkoutEvent[],HealthKit.HKQuantity,HealthKit.HKQuantity,HealthKit.HKQuantity,HealthKit.HKDevice,Foundation.NSDictionary)",
			"HealthKit.HKWorkout::Create(HealthKit.HKWorkoutActivityType,Foundation.NSDate,Foundation.NSDate,System.Double,HealthKit.HKQuantity,HealthKit.HKQuantity,Foundation.NSDictionary)",
			"HealthKit.HKWorkout::Create(HealthKit.HKWorkoutActivityType,Foundation.NSDate,Foundation.NSDate,System.Double,HealthKit.HKQuantity,HealthKit.HKQuantity,HealthKit.HKDevice,Foundation.NSDictionary)",
			"HealthKit.HKWorkout::CreateFlightsClimbedWorkout(HealthKit.HKWorkoutActivityType,Foundation.NSDate,Foundation.NSDate,HealthKit.HKWorkoutEvent[],HealthKit.HKQuantity,HealthKit.HKQuantity,HealthKit.HKQuantity,HealthKit.HKDevice,Foundation.NSDictionary)",
			"HealthKit.HKWorkoutBuilder::.ctor(HealthKit.HKHealthStore,HealthKit.HKWorkoutConfiguration,HealthKit.HKDevice)",
			"HealthKit.HKWorkoutBuilder::Add(Foundation.NSDictionary,HealthKit.HKWorkoutBuilderCompletionHandler)",
			"HealthKit.HKWorkoutBuilder::BeginCollection(Foundation.NSDate,HealthKit.HKWorkoutBuilderCompletionHandler)",
			"HealthKit.HKWorkoutBuilder::EndCollection(Foundation.NSDate,HealthKit.HKWorkoutBuilderCompletionHandler)",
			"HealthKit.HKWorkoutBuilder::GetElapsedTime(Foundation.NSDate)",
			"HealthKit.HKWorkoutBuilder::GetSeriesBuilder(HealthKit.HKSeriesType)",
			"HealthKit.HKWorkoutBuilder::GetStatistics(HealthKit.HKQuantityType)",
			"HealthKit.HKWorkoutConfiguration::.ctor(Foundation.NSCoder)",
			"HealthKit.HKWorkoutConfiguration::Copy(Foundation.NSZone)",
			"HealthKit.HKWorkoutConfiguration::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKWorkoutConfiguration::set_LapLength(HealthKit.HKQuantity)",
			"HealthKit.HKWorkoutEvent::.ctor(Foundation.NSCoder)",
			"HealthKit.HKWorkoutEvent::Copy(Foundation.NSZone)",
			"HealthKit.HKWorkoutEvent::Create(HealthKit.HKWorkoutEventType,Foundation.NSDate)",
			"HealthKit.HKWorkoutEvent::Create(HealthKit.HKWorkoutEventType,Foundation.NSDate,Foundation.NSDictionary)",
			"HealthKit.HKWorkoutEvent::Create(HealthKit.HKWorkoutEventType,Foundation.NSDateInterval,Foundation.NSDictionary)",
			"HealthKit.HKWorkoutEvent::EncodeTo(Foundation.NSCoder)",
			"HealthKit.HKWorkoutRoute::.ctor(Foundation.NSCoder)",
			"HealthKit.HKWorkoutRoute::Copy(Foundation.NSZone)",
			"HealthKit.HKWorkoutRouteBuilder::.ctor(Foundation.NSCoder)",
			"HealthKit.HKWorkoutRouteBuilder::.ctor(HealthKit.HKHealthStore,HealthKit.HKDevice)",
			"HealthKit.HKWorkoutRouteBuilder::AddMetadata(Foundation.NSDictionary,HealthKit.HKWorkoutRouteBuilderAddMetadataHandler)",
			"HealthKit.HKWorkoutRouteBuilder::FinishRoute(HealthKit.HKWorkout,Foundation.NSDictionary,System.Action`2<HealthKit.HKWorkoutRoute,Foundation.NSError>)",
			"HealthKit.HKWorkoutRouteQuery::.ctor(HealthKit.HKWorkoutRoute,HealthKit.HKWorkoutRouteBuilderDataHandler)",
			"HealthKit.HKWorkoutType::.ctor(Foundation.NSCoder)",
			"HealthKitUI.HKActivityRingView::.ctor(Foundation.NSCoder)",
			"HealthKitUI.HKActivityRingView::set_ActivitySummary(HealthKit.HKActivitySummary)",
			"HealthKitUI.HKActivityRingView::SetActivitySummary(HealthKit.HKActivitySummary,System.Boolean)",
			"HomeKit.HMAccessoryBrowserDelegate_Extensions::DidFindNewAccessory(HomeKit.IHMAccessoryBrowserDelegate,HomeKit.HMAccessoryBrowser,HomeKit.HMAccessory)",
			"HomeKit.HMAccessoryBrowserDelegate_Extensions::DidRemoveNewAccessory(HomeKit.IHMAccessoryBrowserDelegate,HomeKit.HMAccessoryBrowser,HomeKit.HMAccessory)",
			"HomeKit.HMAccessoryDelegate_Extensions::DidAddProfile(HomeKit.IHMAccessoryDelegate,HomeKit.HMAccessory,HomeKit.HMAccessoryProfile)",
			"HomeKit.HMAccessoryDelegate_Extensions::DidRemoveProfile(HomeKit.IHMAccessoryDelegate,HomeKit.HMAccessory,HomeKit.HMAccessoryProfile)",
			"HomeKit.HMAccessoryDelegate_Extensions::DidUpdateAssociatedServiceType(HomeKit.IHMAccessoryDelegate,HomeKit.HMAccessory,HomeKit.HMService)",
			"HomeKit.HMAccessoryDelegate_Extensions::DidUpdateFirmwareVersion(HomeKit.IHMAccessoryDelegate,HomeKit.HMAccessory,System.String)",
			"HomeKit.HMAccessoryDelegate_Extensions::DidUpdateName(HomeKit.IHMAccessoryDelegate,HomeKit.HMAccessory)",
			"HomeKit.HMAccessoryDelegate_Extensions::DidUpdateNameForService(HomeKit.IHMAccessoryDelegate,HomeKit.HMAccessory,HomeKit.HMService)",
			"HomeKit.HMAccessoryDelegate_Extensions::DidUpdateReachability(HomeKit.IHMAccessoryDelegate,HomeKit.HMAccessory)",
			"HomeKit.HMAccessoryDelegate_Extensions::DidUpdateServices(HomeKit.IHMAccessoryDelegate,HomeKit.HMAccessory)",
			"HomeKit.HMAccessoryDelegate_Extensions::DidUpdateValueForCharacteristic(HomeKit.IHMAccessoryDelegate,HomeKit.HMAccessory,HomeKit.HMService,HomeKit.HMCharacteristic)",
			"HomeKit.HMAccessoryOwnershipToken::.ctor(Foundation.NSData)",
			"HomeKit.HMAccessorySetupManager::AddAndSetUpAccessories(HomeKit.HMMatterTopology,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMAccessorySetupManager::PerformAccessorySetup(HomeKit.HMAccessorySetupRequest,System.Action`2<HomeKit.HMAccessorySetupResult,Foundation.NSError>)",
			"HomeKit.HMAccessorySetupManager::PerformMatterEcosystemAccessorySetup(HomeKit.HMAccessorySetupRequest,HomeKit.HMMatterTopology,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMAccessorySetupPayload::.ctor(Foundation.NSUrl)",
			"HomeKit.HMAccessorySetupPayload::.ctor(Foundation.NSUrl,HomeKit.HMAccessoryOwnershipToken)",
			"HomeKit.HMAccessorySetupRequest::Copy(Foundation.NSZone)",
			"HomeKit.HMAccessorySetupRequest::set_HomeUniqueIdentifier(Foundation.NSUuid)",
			"HomeKit.HMAccessorySetupRequest::set_Payload(HomeKit.HMAccessorySetupPayload)",
			"HomeKit.HMAccessorySetupRequest::set_SuggestedRoomUniqueIdentifier(Foundation.NSUuid)",
			"HomeKit.HMAccessorySetupResult::Copy(Foundation.NSZone)",
			"HomeKit.HMActionSet::AddAction(HomeKit.HMAction,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMActionSet::RemoveAction(HomeKit.HMAction,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMAddAccessoryRequest::GetPayload(Foundation.NSUrl,HomeKit.HMAccessoryOwnershipToken)",
			"HomeKit.HMAddAccessoryRequest::GetPayload(HomeKit.HMAccessoryOwnershipToken)",
			"HomeKit.HMCalendarEvent::.ctor(Foundation.NSDateComponents)",
			"HomeKit.HMCalendarEvent::Copy(Foundation.NSZone)",
			"HomeKit.HMCalendarEvent::MutableCopy(Foundation.NSZone)",
			"HomeKit.HMCameraSnapshotControlDelegate_Extensions::DidTakeSnapshot(HomeKit.IHMCameraSnapshotControlDelegate,HomeKit.HMCameraSnapshotControl,HomeKit.HMCameraSnapshot,Foundation.NSError)",
			"HomeKit.HMCameraSnapshotControlDelegate_Extensions::DidUpdateMostRecentSnapshot(HomeKit.IHMCameraSnapshotControlDelegate,HomeKit.HMCameraSnapshotControl)",
			"HomeKit.HMCameraStreamControlDelegate_Extensions::DidStartStream(HomeKit.IHMCameraStreamControlDelegate,HomeKit.HMCameraStreamControl)",
			"HomeKit.HMCameraStreamControlDelegate_Extensions::DidStopStream(HomeKit.IHMCameraStreamControlDelegate,HomeKit.HMCameraStreamControl,Foundation.NSError)",
			"HomeKit.HMCameraView::.ctor(Foundation.NSCoder)",
			"HomeKit.HMCameraView::set_CameraSource(HomeKit.HMCameraSource)",
			"HomeKit.HMCharacteristic::UpdateAuthorizationData(Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMCharacteristic::WriteValue(Foundation.NSObject,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMCharacteristicEvent::.ctor(HomeKit.HMCharacteristic,Foundation.INSCopying)",
			"HomeKit.HMCharacteristicEvent::Copy(Foundation.NSZone)",
			"HomeKit.HMCharacteristicEvent::MutableCopy(Foundation.NSZone)",
			"HomeKit.HMCharacteristicEvent::UpdateTriggerValue(Foundation.INSCopying,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMCharacteristicThresholdRangeEvent::.ctor(HomeKit.HMCharacteristic,HomeKit.HMNumberRange)",
			"HomeKit.HMCharacteristicThresholdRangeEvent::Copy(Foundation.NSZone)",
			"HomeKit.HMCharacteristicThresholdRangeEvent::MutableCopy(Foundation.NSZone)",
			"HomeKit.HMCharacteristicWriteAction::.ctor(HomeKit.HMCharacteristic,Foundation.INSCopying)",
			"HomeKit.HMCharacteristicWriteAction::UpdateTargetValue(Foundation.INSCopying,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMDurationEvent::Copy(Foundation.NSZone)",
			"HomeKit.HMDurationEvent::MutableCopy(Foundation.NSZone)",
			"HomeKit.HMEvent::IsSupported(HomeKit.HMHome)",
			"HomeKit.HMEventTrigger::.ctor(System.String,HomeKit.HMEvent[],Foundation.NSPredicate)",
			"HomeKit.HMEventTrigger::.ctor(System.String,HomeKit.HMEvent[],HomeKit.HMEvent[],Foundation.NSDateComponents[],Foundation.NSPredicate)",
			"HomeKit.HMEventTrigger::AddEvent(HomeKit.HMEvent,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMEventTrigger::CreatePredicateForEvaluatingTrigger(HomeKit.HMCharacteristic,Foundation.NSPredicateOperatorType,Foundation.NSObject)",
			"HomeKit.HMEventTrigger::CreatePredicateForEvaluatingTrigger(HomeKit.HMPresenceEvent)",
			"HomeKit.HMEventTrigger::CreatePredicateForEvaluatingTriggerOccurringAfterDate(Foundation.NSDateComponents)",
			"HomeKit.HMEventTrigger::CreatePredicateForEvaluatingTriggerOccurringAfterSignificantEvent(Foundation.NSString,Foundation.NSDateComponents)",
			"HomeKit.HMEventTrigger::CreatePredicateForEvaluatingTriggerOccurringAfterSignificantEvent(HomeKit.HMSignificantTimeEvent)",
			"HomeKit.HMEventTrigger::CreatePredicateForEvaluatingTriggerOccurringBeforeDate(Foundation.NSDateComponents)",
			"HomeKit.HMEventTrigger::CreatePredicateForEvaluatingTriggerOccurringBeforeSignificantEvent(Foundation.NSString,Foundation.NSDateComponents)",
			"HomeKit.HMEventTrigger::CreatePredicateForEvaluatingTriggerOccurringBeforeSignificantEvent(HomeKit.HMSignificantTimeEvent)",
			"HomeKit.HMEventTrigger::CreatePredicateForEvaluatingTriggerOccurringBetweenDates(Foundation.NSDateComponents,Foundation.NSDateComponents)",
			"HomeKit.HMEventTrigger::CreatePredicateForEvaluatingTriggerOccurringBetweenSignificantEvent(HomeKit.HMSignificantTimeEvent,HomeKit.HMSignificantTimeEvent)",
			"HomeKit.HMEventTrigger::CreatePredicateForEvaluatingTriggerOccurringOnDate(Foundation.NSDateComponents)",
			"HomeKit.HMEventTrigger::RemoveEvent(HomeKit.HMEvent,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMEventTrigger::UpdatePredicate(Foundation.NSPredicate,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHome::AddAccessory(HomeKit.HMAccessory,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHome::AddAndSetupAccessories(HomeKit.HMAccessorySetupPayload,System.Action`2<HomeKit.HMAccessory[],Foundation.NSError>)",
			"HomeKit.HMHome::AddTrigger(HomeKit.HMTrigger,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHome::AssignAccessory(HomeKit.HMAccessory,HomeKit.HMRoom,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHome::ExecuteActionSet(HomeKit.HMActionSet,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHome::GetHomeAccessControl(HomeKit.HMUser)",
			"HomeKit.HMHome::RemoveAccessory(HomeKit.HMAccessory,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHome::RemoveActionSet(HomeKit.HMActionSet,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHome::RemoveRoom(HomeKit.HMRoom,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHome::RemoveServiceGroup(HomeKit.HMServiceGroup,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHome::RemoveTrigger(HomeKit.HMTrigger,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHome::RemoveZone(HomeKit.HMZone,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHome::UnblockAccessory(HomeKit.HMAccessory,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHomeDelegate_Extensions::DidAddAccessory(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMAccessory)",
			"HomeKit.HMHomeDelegate_Extensions::DidAddActionSet(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMActionSet)",
			"HomeKit.HMHomeDelegate_Extensions::DidAddRoom(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMRoom)",
			"HomeKit.HMHomeDelegate_Extensions::DidAddRoomToZone(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMZone)",
			"HomeKit.HMHomeDelegate_Extensions::DidAddService(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMService,HomeKit.HMServiceGroup)",
			"HomeKit.HMHomeDelegate_Extensions::DidAddServiceGroup(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMServiceGroup)",
			"HomeKit.HMHomeDelegate_Extensions::DidAddTrigger(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMTrigger)",
			"HomeKit.HMHomeDelegate_Extensions::DidAddUser(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMUser)",
			"HomeKit.HMHomeDelegate_Extensions::DidAddZone(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMZone)",
			"HomeKit.HMHomeDelegate_Extensions::DidEncounterError(HomeKit.IHMHomeDelegate,HomeKit.HMHome,Foundation.NSError,HomeKit.HMAccessory)",
			"HomeKit.HMHomeDelegate_Extensions::DidRemoveAccessory(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMAccessory)",
			"HomeKit.HMHomeDelegate_Extensions::DidRemoveActionSet(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMActionSet)",
			"HomeKit.HMHomeDelegate_Extensions::DidRemoveRoom(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMRoom)",
			"HomeKit.HMHomeDelegate_Extensions::DidRemoveRoomFromZone(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMZone)",
			"HomeKit.HMHomeDelegate_Extensions::DidRemoveService(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMService,HomeKit.HMServiceGroup)",
			"HomeKit.HMHomeDelegate_Extensions::DidRemoveServiceGroup(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMServiceGroup)",
			"HomeKit.HMHomeDelegate_Extensions::DidRemoveTrigger(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMTrigger)",
			"HomeKit.HMHomeDelegate_Extensions::DidRemoveUser(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMUser)",
			"HomeKit.HMHomeDelegate_Extensions::DidRemoveZone(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMZone)",
			"HomeKit.HMHomeDelegate_Extensions::DidUnblockAccessory(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMAccessory)",
			"HomeKit.HMHomeDelegate_Extensions::DidUpdateAccessControlForCurrentUser(HomeKit.IHMHomeDelegate,HomeKit.HMHome)",
			"HomeKit.HMHomeDelegate_Extensions::DidUpdateActionsForActionSet(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMActionSet)",
			"HomeKit.HMHomeDelegate_Extensions::DidUpdateHomeHubState(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMHomeHubState)",
			"HomeKit.HMHomeDelegate_Extensions::DidUpdateNameForActionSet(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMActionSet)",
			"HomeKit.HMHomeDelegate_Extensions::DidUpdateNameForHome(HomeKit.IHMHomeDelegate,HomeKit.HMHome)",
			"HomeKit.HMHomeDelegate_Extensions::DidUpdateNameForRoom(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMRoom)",
			"HomeKit.HMHomeDelegate_Extensions::DidUpdateNameForServiceGroup(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMServiceGroup)",
			"HomeKit.HMHomeDelegate_Extensions::DidUpdateNameForTrigger(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMTrigger)",
			"HomeKit.HMHomeDelegate_Extensions::DidUpdateNameForZone(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMZone)",
			"HomeKit.HMHomeDelegate_Extensions::DidUpdateRoom(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMAccessory)",
			"HomeKit.HMHomeDelegate_Extensions::DidUpdateSupportedFeatures(HomeKit.IHMHomeDelegate,HomeKit.HMHome)",
			"HomeKit.HMHomeDelegate_Extensions::DidUpdateTrigger(HomeKit.IHMHomeDelegate,HomeKit.HMHome,HomeKit.HMTrigger)",
			"HomeKit.HMHomeManager::RemoveHome(HomeKit.HMHome,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHomeManager::UpdatePrimaryHome(HomeKit.HMHome,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMHomeManagerDelegate_Extensions::DidAddHome(HomeKit.IHMHomeManagerDelegate,HomeKit.HMHomeManager,HomeKit.HMHome)",
			"HomeKit.HMHomeManagerDelegate_Extensions::DidReceiveAddAccessoryRequest(HomeKit.IHMHomeManagerDelegate,HomeKit.HMHomeManager,HomeKit.HMAddAccessoryRequest)",
			"HomeKit.HMHomeManagerDelegate_Extensions::DidRemoveHome(HomeKit.IHMHomeManagerDelegate,HomeKit.HMHomeManager,HomeKit.HMHome)",
			"HomeKit.HMHomeManagerDelegate_Extensions::DidUpdateAuthorizationStatus(HomeKit.IHMHomeManagerDelegate,HomeKit.HMHomeManager,HomeKit.HMHomeManagerAuthorizationStatus)",
			"HomeKit.HMHomeManagerDelegate_Extensions::DidUpdateHomes(HomeKit.IHMHomeManagerDelegate,HomeKit.HMHomeManager)",
			"HomeKit.HMHomeManagerDelegate_Extensions::DidUpdatePrimaryHome(HomeKit.IHMHomeManagerDelegate,HomeKit.HMHomeManager)",
			"HomeKit.HMLocationEvent::.ctor(CoreLocation.CLRegion)",
			"HomeKit.HMLocationEvent::Copy(Foundation.NSZone)",
			"HomeKit.HMLocationEvent::MutableCopy(Foundation.NSZone)",
			"HomeKit.HMLocationEvent::UpdateRegion(CoreLocation.CLRegion,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMMatterHome::.ctor(Foundation.NSCoder)",
			"HomeKit.HMMatterHome::.ctor(Foundation.NSUuid,System.String)",
			"HomeKit.HMMatterHome::Copy(Foundation.NSZone)",
			"HomeKit.HMMatterHome::EncodeTo(Foundation.NSCoder)",
			"HomeKit.HMMatterRequestHandler::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"HomeKit.HMMatterRequestHandler::ConfigureAccessory(System.String,HomeKit.HMMatterRoom,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMMatterRequestHandler::FetchRooms(HomeKit.HMMatterHome,HomeKit.HMFetchRoomHandler)",
			"HomeKit.HMMatterRequestHandler::PairAccessory(HomeKit.HMMatterHome,System.String,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMMatterRoom::.ctor(Foundation.NSCoder)",
			"HomeKit.HMMatterRoom::.ctor(Foundation.NSUuid,System.String)",
			"HomeKit.HMMatterRoom::Copy(Foundation.NSZone)",
			"HomeKit.HMMatterRoom::EncodeTo(Foundation.NSCoder)",
			"HomeKit.HMMatterTopology::.ctor(Foundation.NSCoder)",
			"HomeKit.HMMatterTopology::Copy(Foundation.NSZone)",
			"HomeKit.HMMatterTopology::EncodeTo(Foundation.NSCoder)",
			"HomeKit.HMMutableCalendarEvent::.ctor(Foundation.NSDateComponents)",
			"HomeKit.HMMutableCalendarEvent::set_FireDateComponents(Foundation.NSDateComponents)",
			"HomeKit.HMMutableCharacteristicEvent::.ctor(HomeKit.HMCharacteristic,Foundation.INSCopying)",
			"HomeKit.HMMutableCharacteristicEvent::Copy(Foundation.NSZone)",
			"HomeKit.HMMutableCharacteristicEvent::MutableCopy(Foundation.NSZone)",
			"HomeKit.HMMutableCharacteristicEvent::set_Characteristic(HomeKit.HMCharacteristic)",
			"HomeKit.HMMutableCharacteristicEvent::set_TriggerValue(Foundation.INSCopying)",
			"HomeKit.HMMutableCharacteristicThresholdRangeEvent::.ctor(HomeKit.HMCharacteristic,HomeKit.HMNumberRange)",
			"HomeKit.HMMutableCharacteristicThresholdRangeEvent::set_Characteristic(HomeKit.HMCharacteristic)",
			"HomeKit.HMMutableCharacteristicThresholdRangeEvent::set_ThresholdRange(HomeKit.HMNumberRange)",
			"HomeKit.HMMutableLocationEvent::.ctor(CoreLocation.CLRegion)",
			"HomeKit.HMMutableLocationEvent::set_Region(CoreLocation.CLRegion)",
			"HomeKit.HMMutableSignificantTimeEvent::.ctor(Foundation.NSString,Foundation.NSDateComponents)",
			"HomeKit.HMMutableSignificantTimeEvent::set_Offset(Foundation.NSDateComponents)",
			"HomeKit.HMMutableSignificantTimeEvent::set_WeakSignificantEvent(Foundation.NSString)",
			"HomeKit.HMNetworkConfigurationProfileDelegate_Extensions::DidUpdateNetworkAccessMode(HomeKit.IHMNetworkConfigurationProfileDelegate,HomeKit.HMNetworkConfigurationProfile)",
			"HomeKit.HMNumberRange::FromMax(Foundation.NSNumber)",
			"HomeKit.HMNumberRange::FromMin(Foundation.NSNumber)",
			"HomeKit.HMNumberRange::FromRange(Foundation.NSNumber,Foundation.NSNumber)",
			"HomeKit.HMPresenceEvent::Copy(Foundation.NSZone)",
			"HomeKit.HMPresenceEvent::MutableCopy(Foundation.NSZone)",
			"HomeKit.HMServiceGroup::AddService(HomeKit.HMService,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMServiceGroup::RemoveService(HomeKit.HMService,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMSignificantTimeEvent::.ctor(Foundation.NSString,Foundation.NSDateComponents)",
			"HomeKit.HMSignificantTimeEvent::Copy(Foundation.NSZone)",
			"HomeKit.HMSignificantTimeEvent::MutableCopy(Foundation.NSZone)",
			"HomeKit.HMTimerTrigger::.ctor(System.String,Foundation.NSDate,Foundation.NSTimeZone,Foundation.NSDateComponents,Foundation.NSCalendar)",
			"HomeKit.HMTimerTrigger::UpdateFireDate(Foundation.NSDate,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMTimerTrigger::UpdateRecurrence(Foundation.NSDateComponents,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMTimerTrigger::UpdateTimeZone(Foundation.NSTimeZone,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMTrigger::AddActionSet(HomeKit.HMActionSet,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMTrigger::RemoveActionSet(HomeKit.HMActionSet,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMZone::AddRoom(HomeKit.HMRoom,System.Action`1<Foundation.NSError>)",
			"HomeKit.HMZone::RemoveRoom(HomeKit.HMRoom,System.Action`1<Foundation.NSError>)",
			"IdentityLookup.ILCallClassificationRequest::.ctor(Foundation.NSCoder)",
			"IdentityLookup.ILCallClassificationRequest::EncodeTo(Foundation.NSCoder)",
			"IdentityLookup.ILCallCommunication::.ctor(Foundation.NSCoder)",
			"IdentityLookup.ILCallCommunication::IsEqualTo(IdentityLookup.ILCallCommunication)",
			"IdentityLookup.ILClassificationRequest::.ctor(Foundation.NSCoder)",
			"IdentityLookup.ILClassificationRequest::EncodeTo(Foundation.NSCoder)",
			"IdentityLookup.ILClassificationResponse::.ctor(Foundation.NSCoder)",
			"IdentityLookup.ILClassificationResponse::EncodeTo(Foundation.NSCoder)",
			"IdentityLookup.ILClassificationResponse::set_UserInfo(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"IdentityLookup.ILCommunication::.ctor(Foundation.NSCoder)",
			"IdentityLookup.ILCommunication::EncodeTo(Foundation.NSCoder)",
			"IdentityLookup.ILCommunication::IsEqualTo(IdentityLookup.ILCommunication)",
			"IdentityLookup.ILMessageClassificationRequest::.ctor(Foundation.NSCoder)",
			"IdentityLookup.ILMessageClassificationRequest::EncodeTo(Foundation.NSCoder)",
			"IdentityLookup.ILMessageCommunication::.ctor(Foundation.NSCoder)",
			"IdentityLookup.ILMessageCommunication::IsEqualTo(IdentityLookup.ILMessageCommunication)",
			"IdentityLookup.ILMessageFilterQueryHandlingWrapper::HandleQueryRequest(IdentityLookup.ILMessageFilterQueryRequest,IdentityLookup.ILMessageFilterExtensionContext,System.Action`1<IdentityLookup.ILMessageFilterQueryResponse>)",
			"IdentityLookup.ILMessageFilterQueryRequest::.ctor(Foundation.NSCoder)",
			"IdentityLookup.ILMessageFilterQueryRequest::EncodeTo(Foundation.NSCoder)",
			"IdentityLookup.ILMessageFilterQueryResponse::.ctor(Foundation.NSCoder)",
			"IdentityLookup.ILMessageFilterQueryResponse::EncodeTo(Foundation.NSCoder)",
			"IdentityLookup.ILNetworkResponse::.ctor(Foundation.NSCoder)",
			"IdentityLookup.ILNetworkResponse::EncodeTo(Foundation.NSCoder)",
			"IdentityLookupUI.ILClassificationUIExtensionViewController::.ctor(Foundation.NSCoder)",
			"IdentityLookupUI.ILClassificationUIExtensionViewController::GetClassificationResponse(IdentityLookup.ILClassificationRequest)",
			"IdentityLookupUI.ILClassificationUIExtensionViewController::Prepare(IdentityLookup.ILClassificationRequest)",
			"ImageCaptureCore.ICCameraDevice::RequestDownloadFile(ImageCaptureCore.ICCameraFile,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,ImageCaptureCore.IICCameraDeviceDownloadDelegate,ObjCRuntime.Selector,System.IntPtr)",
			"ImageCaptureCore.ICCameraDevice::RequestReadDataFromFile(ImageCaptureCore.ICCameraFile,System.Int64,System.Int64,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"ImageCaptureCore.ICCameraDevice::RequestSendPtpCommand(Foundation.NSData,Foundation.NSData,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"ImageCaptureCore.ICCameraDevice::RequestUploadFile(Foundation.NSUrl,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"ImageCaptureCore.ICCameraDeviceDelegate_Extensions::DidAddItems(ImageCaptureCore.IICCameraDeviceDelegate,ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem[])",
			"ImageCaptureCore.ICCameraDeviceDelegate_Extensions::DidRemoveItems(ImageCaptureCore.IICCameraDeviceDelegate,ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem[])",
			"ImageCaptureCore.ICCameraDeviceDelegate_Extensions::ShouldGetMetadata(ImageCaptureCore.IICCameraDeviceDelegate,ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)",
			"ImageCaptureCore.ICCameraDeviceDelegate_Extensions::ShouldGetThumbnail(ImageCaptureCore.IICCameraDeviceDelegate,ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)",
			"ImageCaptureCore.ICCameraDeviceDelegateWrapper::DidAddItem(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)",
			"ImageCaptureCore.ICCameraDeviceDelegateWrapper::DidBecomeReadyWithCompleteContentCatalog(ImageCaptureCore.ICDevice)",
			"ImageCaptureCore.ICCameraDeviceDelegateWrapper::DidChangeCapability(ImageCaptureCore.ICCameraDevice)",
			"ImageCaptureCore.ICCameraDeviceDelegateWrapper::DidCompleteDeleteFiles(ImageCaptureCore.ICCameraDevice,Foundation.NSError)",
			"ImageCaptureCore.ICCameraDeviceDelegateWrapper::DidReceiveMetadata(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)",
			"ImageCaptureCore.ICCameraDeviceDelegateWrapper::DidReceivePtpEvent(ImageCaptureCore.ICCameraDevice,Foundation.NSData)",
			"ImageCaptureCore.ICCameraDeviceDelegateWrapper::DidReceiveThumbnail(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)",
			"ImageCaptureCore.ICCameraDeviceDelegateWrapper::DidRemoveDevice(ImageCaptureCore.ICDevice)",
			"ImageCaptureCore.ICCameraDeviceDelegateWrapper::DidRemoveItem(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)",
			"ImageCaptureCore.ICCameraDeviceDelegateWrapper::DidRenameItems(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem[])",
			"ImageCaptureCore.ICCameraDeviceDownloadDelegate_Extensions::DidDownloadFile(ImageCaptureCore.IICCameraDeviceDownloadDelegate,ImageCaptureCore.ICCameraFile,Foundation.NSError,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.IntPtr)",
			"ImageCaptureCore.ICCameraDeviceDownloadDelegate_Extensions::DidReceiveDownloadProgress(ImageCaptureCore.IICCameraDeviceDownloadDelegate,ImageCaptureCore.ICCameraFile,System.Int64,System.Int64)",
			"ImageCaptureCore.ICDevice::RequestSendMessage(System.UInt32,Foundation.NSData,System.UInt32,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"ImageCaptureCore.ICDeviceBrowserDelegate_Extensions::DeviceDidChangeName(ImageCaptureCore.IICDeviceBrowserDelegate,ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice)",
			"ImageCaptureCore.ICDeviceBrowserDelegate_Extensions::DeviceDidChangeSharingState(ImageCaptureCore.IICDeviceBrowserDelegate,ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice)",
			"ImageCaptureCore.ICDeviceBrowserDelegate_Extensions::DidEnumerateLocalDevices(ImageCaptureCore.IICDeviceBrowserDelegate,ImageCaptureCore.ICDeviceBrowser)",
			"ImageCaptureCore.ICDeviceBrowserDelegate_Extensions::RequestsSelectDevice(ImageCaptureCore.IICDeviceBrowserDelegate,ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice)",
			"ImageCaptureCore.ICDeviceBrowserDelegateWrapper::DidAddDevice(ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice,System.Boolean)",
			"ImageCaptureCore.ICDeviceBrowserDelegateWrapper::DidRemoveDevice(ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice,System.Boolean)",
			"ImageCaptureCore.ICDeviceDelegate_Extensions::DidBecomeReady(ImageCaptureCore.IICDeviceDelegate,ImageCaptureCore.ICDevice)",
			"ImageCaptureCore.ICDeviceDelegate_Extensions::DidChangeName(ImageCaptureCore.IICDeviceDelegate,ImageCaptureCore.ICDevice)",
			"ImageCaptureCore.ICDeviceDelegate_Extensions::DidChangeSharingState(ImageCaptureCore.IICDeviceDelegate,ImageCaptureCore.ICDevice)",
			"ImageCaptureCore.ICDeviceDelegate_Extensions::DidCloseSession(ImageCaptureCore.IICDeviceDelegate,ImageCaptureCore.ICDevice,Foundation.NSError)",
			"ImageCaptureCore.ICDeviceDelegate_Extensions::DidEncounterError(ImageCaptureCore.IICDeviceDelegate,ImageCaptureCore.ICDevice,Foundation.NSError)",
			"ImageCaptureCore.ICDeviceDelegate_Extensions::DidOpenSession(ImageCaptureCore.IICDeviceDelegate,ImageCaptureCore.ICDevice,Foundation.NSError)",
			"ImageCaptureCore.ICDeviceDelegate_Extensions::DidReceiveButtonPress(ImageCaptureCore.IICDeviceDelegate,ImageCaptureCore.ICDevice,Foundation.NSString)",
			"ImageCaptureCore.ICDeviceDelegate_Extensions::DidReceiveCustomNotification(ImageCaptureCore.IICDeviceDelegate,ImageCaptureCore.ICDevice,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSData)",
			"ImageCaptureCore.ICDeviceDelegate_Extensions::DidReceiveStatusInformation(ImageCaptureCore.IICDeviceDelegate,ImageCaptureCore.ICDevice,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"ImageCaptureCore.ICDeviceDelegateWrapper::DidRemoveDevice(ImageCaptureCore.ICDevice)",
			"ImageCaptureCore.ICScannerDevice::set_DownloadsDirectory(Foundation.NSUrl)",
			"ImageCaptureCore.ICScannerDeviceDelegate_Extensions::DidBecomeAvailable(ImageCaptureCore.IICScannerDeviceDelegate,ImageCaptureCore.ICScannerDevice)",
			"ImageCaptureCore.ICScannerDeviceDelegate_Extensions::DidCompleteOverviewScan(ImageCaptureCore.IICScannerDeviceDelegate,ImageCaptureCore.ICScannerDevice,Foundation.NSError)",
			"ImageCaptureCore.ICScannerDeviceDelegate_Extensions::DidCompleteScan(ImageCaptureCore.IICScannerDeviceDelegate,ImageCaptureCore.ICScannerDevice,Foundation.NSError)",
			"ImageCaptureCore.ICScannerDeviceDelegate_Extensions::DidScanToBandData(ImageCaptureCore.IICScannerDeviceDelegate,ImageCaptureCore.ICScannerDevice,ImageCaptureCore.ICScannerBandData)",
			"ImageCaptureCore.ICScannerDeviceDelegate_Extensions::DidScanToUrl(ImageCaptureCore.IICScannerDeviceDelegate,ImageCaptureCore.ICScannerDevice,Foundation.NSUrl)",
			"ImageCaptureCore.ICScannerDeviceDelegate_Extensions::DidScanToUrl(ImageCaptureCore.IICScannerDeviceDelegate,ImageCaptureCore.ICScannerDevice,Foundation.NSUrl,Foundation.NSData)",
			"ImageCaptureCore.ICScannerDeviceDelegate_Extensions::DidSelectFunctionalUnit(ImageCaptureCore.IICScannerDeviceDelegate,ImageCaptureCore.ICScannerDevice,ImageCaptureCore.ICScannerFunctionalUnit,Foundation.NSError)",
			"ImageCaptureCore.ICScannerDeviceDelegateWrapper::DidRemoveDevice(ImageCaptureCore.ICDevice)",
			"ImageIO.CGCopyImageSourceOptions::ToDictionary()",
			"ImageIO.CGImageAnimation/NIDCGImageSourceAnimationBlock::Invoke(System.IntPtr,CoreGraphics.CGImage,System.Boolean&)",
			"ImageIO.CGImageAnimation::AnimateImage(Foundation.NSData,ImageIO.CGImageAnimationOptions,ImageIO.CGImageAnimation/CGImageSourceAnimationHandler)",
			"ImageIO.CGImageAnimation::AnimateImage(Foundation.NSUrl,ImageIO.CGImageAnimationOptions,ImageIO.CGImageAnimation/CGImageSourceAnimationHandler)",
			"ImageIO.CGImageDestination::AddAuxiliaryDataInfo(ImageIO.CGImageAuxiliaryDataType,ImageIO.CGImageAuxiliaryDataInfo)",
			"ImageIO.CGImageDestination::AddImage(CoreGraphics.CGImage,Foundation.NSDictionary)",
			"ImageIO.CGImageDestination::AddImage(CoreGraphics.CGImage,ImageIO.CGImageDestinationOptions)",
			"ImageIO.CGImageDestination::AddImage(ImageIO.CGImageSource,System.Int32,Foundation.NSDictionary)",
			"ImageIO.CGImageDestination::AddImage(ImageIO.CGImageSource,System.Int32,ImageIO.CGImageDestinationOptions)",
			"ImageIO.CGImageDestination::AddImageAndMetadata(CoreGraphics.CGImage,ImageIO.CGImageMetadata,Foundation.NSDictionary)",
			"ImageIO.CGImageDestination::CopyImageSource(ImageIO.CGImageSource,Foundation.NSDictionary,Foundation.NSError&)",
			"ImageIO.CGImageDestination::Create(CoreGraphics.CGDataConsumer,System.String,System.Int32,ImageIO.CGImageDestinationOptions)",
			"ImageIO.CGImageDestination::Create(Foundation.NSMutableData,System.String,System.Int32,ImageIO.CGImageDestinationOptions)",
			"ImageIO.CGImageDestination::Create(Foundation.NSUrl,System.String,System.Int32)",
			"ImageIO.CGImageDestination::SetProperties(Foundation.NSDictionary)",
			"ImageIO.CGImageDestinationOptions::set_DestinationBackgroundColor(CoreGraphics.CGColor)",
			"ImageIO.CGImageMetadata::.ctor(Foundation.NSData)",
			"ImageIO.CGImageMetadata::CopyTagMatchingImageProperty(Foundation.NSString,Foundation.NSString)",
			"ImageIO.CGImageMetadata::EnumerateTags(Foundation.NSString,ImageIO.CGImageMetadataEnumerateOptions,ImageIO.CGImageMetadataTagBlock)",
			"ImageIO.CGImageMetadata::GetStringValue(ImageIO.CGImageMetadata,Foundation.NSString)",
			"ImageIO.CGImageMetadata::GetTag(ImageIO.CGImageMetadata,Foundation.NSString)",
			"ImageIO.CGImageMetadataTag::.ctor(Foundation.NSString,Foundation.NSString,Foundation.NSString,ImageIO.CGImageMetadataType,Foundation.NSObject)",
			"ImageIO.CGImageMetadataTag::.ctor(Foundation.NSString,Foundation.NSString,Foundation.NSString,ImageIO.CGImageMetadataType,System.IntPtr)",
			"ImageIO.CGImageSource::CopyAuxiliaryDataInfo(System.UIntPtr,ImageIO.CGImageAuxiliaryDataType)",
			"ImageIO.CGImageSource::CopyMetadata(System.IntPtr,Foundation.NSDictionary)",
			"ImageIO.CGImageSource::CopyProperties(Foundation.NSDictionary)",
			"ImageIO.CGImageSource::CopyProperties(Foundation.NSDictionary,System.Int32)",
			"ImageIO.CGImageSource::FromData(Foundation.NSData,ImageIO.CGImageOptions)",
			"ImageIO.CGImageSource::FromDataProvider(CoreGraphics.CGDataProvider,ImageIO.CGImageOptions)",
			"ImageIO.CGImageSource::FromUrl(Foundation.NSUrl,ImageIO.CGImageOptions)",
			"ImageIO.CGImageSource::UpdateData(Foundation.NSData,System.Boolean)",
			"ImageIO.CGImageSource::UpdateDataProvider(CoreGraphics.CGDataProvider,System.Boolean)",
			"ImageIO.CGMutableImageMetadata::.ctor(ImageIO.CGImageMetadata)",
			"ImageIO.CGMutableImageMetadata::RegisterNamespace(Foundation.NSString,Foundation.NSString,Foundation.NSError&)",
			"ImageIO.CGMutableImageMetadata::RemoveTag(ImageIO.CGImageMetadataTag,Foundation.NSString)",
			"ImageIO.CGMutableImageMetadata::SetTag(ImageIO.CGImageMetadataTag,Foundation.NSString,ImageIO.CGImageMetadataTag)",
			"ImageIO.CGMutableImageMetadata::SetValue(ImageIO.CGImageMetadataTag,Foundation.NSString,Foundation.NSObject)",
			"ImageIO.CGMutableImageMetadata::SetValue(ImageIO.CGImageMetadataTag,Foundation.NSString,System.IntPtr)",
			"ImageIO.CGMutableImageMetadata::SetValueMatchingImageProperty(Foundation.NSString,Foundation.NSString,Foundation.NSObject)",
			"ImageIO.CGMutableImageMetadata::SetValueMatchingImageProperty(Foundation.NSString,Foundation.NSString,System.IntPtr)",
			"ImageKit.IKCameraDeviceView::.ctor(Foundation.NSCoder)",
			"ImageKit.IKCameraDeviceView::DeleteSelectedItems(Foundation.NSObject)",
			"ImageKit.IKCameraDeviceView::DownloadAllItems(Foundation.NSObject)",
			"ImageKit.IKCameraDeviceView::DownloadSelectedItems(Foundation.NSObject)",
			"ImageKit.IKCameraDeviceView::RotateLeft(Foundation.NSObject)",
			"ImageKit.IKCameraDeviceView::RotateRight(Foundation.NSObject)",
			"ImageKit.IKCameraDeviceView::SelectItemsAt(Foundation.NSIndexSet,System.Boolean)",
			"ImageKit.IKCameraDeviceView::set_DownloadsDirectory(Foundation.NSUrl)",
			"ImageKit.IKCameraDeviceView::set_PostProcessApplication(Foundation.NSUrl)",
			"ImageKit.IKCameraDeviceView::SetCustomActionControl(AppKit.NSSegmentedControl)",
			"ImageKit.IKCameraDeviceView::SetCustomDelete(AppKit.NSSegmentedControl)",
			"ImageKit.IKCameraDeviceView::SetCustomIconSizeSlider(AppKit.NSSlider)",
			"ImageKit.IKCameraDeviceView::SetCustomModeControl(AppKit.NSSegmentedControl)",
			"ImageKit.IKCameraDeviceView::SetCustomRotateControl(AppKit.NSSegmentedControl)",
			"ImageKit.IKCameraDeviceViewDelegate_Extensions::DidDownloadFile(ImageKit.IIKCameraDeviceViewDelegate,ImageKit.IKCameraDeviceView,ImageCaptureCore.ICCameraFile,Foundation.NSUrl,Foundation.NSData,Foundation.NSError)",
			"ImageKit.IKCameraDeviceViewDelegate_Extensions::DidEncounterError(ImageKit.IIKCameraDeviceViewDelegate,ImageKit.IKCameraDeviceView,Foundation.NSError)",
			"ImageKit.IKCameraDeviceViewDelegate_Extensions::SelectionDidChange(ImageKit.IIKCameraDeviceViewDelegate,ImageKit.IKCameraDeviceView)",
			"ImageKit.IKDeviceBrowserView::.ctor(Foundation.NSCoder)",
			"ImageKit.IKDeviceBrowserViewDelegate_Extensions::DidEncounterError(ImageKit.IIKDeviceBrowserViewDelegate,ImageKit.IKDeviceBrowserView,Foundation.NSError)",
			"ImageKit.IKDeviceBrowserViewDelegateWrapper::SelectionDidChange(ImageKit.IKDeviceBrowserView,ImageCaptureCore.ICDevice)",
			"ImageKit.IKFilterBrowserPanel::.ctor(Foundation.NSCoder)",
			"ImageKit.IKFilterBrowserPanel::Begin(Foundation.NSDictionary,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"ImageKit.IKFilterBrowserPanel::BeginSheet(Foundation.NSDictionary,AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"ImageKit.IKFilterBrowserPanel::FilterBrowserView(Foundation.NSDictionary)",
			"ImageKit.IKFilterBrowserPanel::Finish(Foundation.NSObject)",
			"ImageKit.IKFilterBrowserPanel::RunModal(Foundation.NSDictionary)",
			"ImageKit.IKFilterBrowserView::.ctor(Foundation.NSCoder)",
			"ImageKit.IKFilterCustomUIProviderWrapper::ProvideFilterUIView(Foundation.NSDictionary,Foundation.NSArray)",
			"ImageKit.IKFilterUIView::.ctor(CoreGraphics.CGRect,CoreImage.CIFilter)",
			"ImageKit.IKFilterUIView::.ctor(Foundation.NSCoder)",
			"ImageKit.IKFilterUIView::Create(CoreGraphics.CGRect,CoreImage.CIFilter)",
			"ImageKit.IKImageBrowserDataSource_Extensions::GetGroup(ImageKit.IIKImageBrowserDataSource,ImageKit.IKImageBrowserView,System.IntPtr)",
			"ImageKit.IKImageBrowserDataSource_Extensions::GroupCount(ImageKit.IIKImageBrowserDataSource,ImageKit.IKImageBrowserView)",
			"ImageKit.IKImageBrowserDataSource_Extensions::MoveItems(ImageKit.IIKImageBrowserDataSource,ImageKit.IKImageBrowserView,Foundation.NSIndexSet,System.IntPtr)",
			"ImageKit.IKImageBrowserDataSource_Extensions::RemoveItems(ImageKit.IIKImageBrowserDataSource,ImageKit.IKImageBrowserView,Foundation.NSIndexSet)",
			"ImageKit.IKImageBrowserDataSource_Extensions::WriteItemsToPasteboard(ImageKit.IIKImageBrowserDataSource,ImageKit.IKImageBrowserView,Foundation.NSIndexSet,AppKit.NSPasteboard)",
			"ImageKit.IKImageBrowserDataSourceWrapper::GetItem(ImageKit.IKImageBrowserView,System.IntPtr)",
			"ImageKit.IKImageBrowserDataSourceWrapper::ItemCount(ImageKit.IKImageBrowserView)",
			"ImageKit.IKImageBrowserDelegate_Extensions::BackgroundWasRightClicked(ImageKit.IIKImageBrowserDelegate,ImageKit.IKImageBrowserView,AppKit.NSEvent)",
			"ImageKit.IKImageBrowserDelegate_Extensions::CellWasDoubleClicked(ImageKit.IIKImageBrowserDelegate,ImageKit.IKImageBrowserView,System.IntPtr)",
			"ImageKit.IKImageBrowserDelegate_Extensions::CellWasRightClicked(ImageKit.IIKImageBrowserDelegate,ImageKit.IKImageBrowserView,System.IntPtr,AppKit.NSEvent)",
			"ImageKit.IKImageBrowserDelegate_Extensions::SelectionDidChange(ImageKit.IIKImageBrowserDelegate,ImageKit.IKImageBrowserView)",
			"ImageKit.IKImageBrowserItem_Extensions::GetImageSubtitle(ImageKit.IIKImageBrowserItem)",
			"ImageKit.IKImageBrowserItem_Extensions::GetImageTitle(ImageKit.IIKImageBrowserItem)",
			"ImageKit.IKImageBrowserItem_Extensions::GetImageVersion(ImageKit.IIKImageBrowserItem)",
			"ImageKit.IKImageBrowserItem_Extensions::GetIsSelectable(ImageKit.IIKImageBrowserItem)",
			"ImageKit.IKImageBrowserView::.ctor(Foundation.NSCoder)",
			"ImageKit.IKImageBrowserView::DraggedImageBeganAt(AppKit.NSImage,CoreGraphics.CGPoint)",
			"ImageKit.IKImageBrowserView::DraggedImageEndedAtDeposited(AppKit.NSImage,CoreGraphics.CGPoint,System.Boolean)",
			"ImageKit.IKImageBrowserView::DraggedImageEndedAtOperation(AppKit.NSImage,CoreGraphics.CGPoint,AppKit.NSDragOperation)",
			"ImageKit.IKImageBrowserView::DraggedImageMovedTo(AppKit.NSImage,CoreGraphics.CGPoint)",
			"ImageKit.IKImageBrowserView::NamesOfPromisedFilesDroppedAtDestination(Foundation.NSUrl)",
			"ImageKit.IKImageBrowserView::NewCell(ImageKit.IIKImageBrowserItem)",
			"ImageKit.IKImageBrowserView::SelectItemsAt(Foundation.NSIndexSet,System.Boolean)",
			"ImageKit.IKImageBrowserView::set_BackgroundLayer(CoreAnimation.CALayer)",
			"ImageKit.IKImageBrowserView::set_ForegroundLayer(CoreAnimation.CALayer)",
			"ImageKit.IKImageEditPanel::.ctor(Foundation.NSCoder)",
			"ImageKit.IKImageEditPanelDataSource_Extensions::GetHasAdjustMode(ImageKit.IIKImageEditPanelDataSource)",
			"ImageKit.IKImageEditPanelDataSource_Extensions::GetHasDetailsMode(ImageKit.IIKImageEditPanelDataSource)",
			"ImageKit.IKImageEditPanelDataSource_Extensions::GetHasEffectsMode(ImageKit.IIKImageEditPanelDataSource)",
			"ImageKit.IKImageEditPanelDataSource_Extensions::GetImageProperties(ImageKit.IIKImageEditPanelDataSource)",
			"ImageKit.IKImageEditPanelDataSource_Extensions::GetThumbnail(ImageKit.IIKImageEditPanelDataSource,CoreGraphics.CGSize)",
			"ImageKit.IKImageEditPanelDataSourceWrapper::SetImageAndProperties(CoreGraphics.CGImage,Foundation.NSDictionary)",
			"ImageKit.IKImageView::.ctor(Foundation.NSCoder)",
			"ImageKit.IKImageView::Crop(Foundation.NSObject)",
			"ImageKit.IKImageView::FlipImageHorizontal(Foundation.NSObject)",
			"ImageKit.IKImageView::FlipImageVertical(Foundation.NSObject)",
			"ImageKit.IKImageView::RotateImageLeft(Foundation.NSObject)",
			"ImageKit.IKImageView::RotateImageRight(Foundation.NSObject)",
			"ImageKit.IKImageView::SetImage(CoreGraphics.CGImage,Foundation.NSDictionary)",
			"ImageKit.IKImageView::SetImageWithURL(Foundation.NSUrl)",
			"ImageKit.IKImageView::SetOverlay(CoreAnimation.CALayer,System.String)",
			"ImageKit.IKImageView::ZoomImageToActualSize(Foundation.NSObject)",
			"ImageKit.IKImageView::ZoomImageToFit(Foundation.NSObject)",
			"ImageKit.IKImageView::ZoomIn(Foundation.NSObject)",
			"ImageKit.IKImageView::ZoomOut(Foundation.NSObject)",
			"ImageKit.IKPictureTaker::.ctor(Foundation.NSCoder)",
			"ImageKit.IKPictureTaker::BeginPictureTaker(Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"ImageKit.IKPictureTaker::BeginPictureTakerSheet(AppKit.NSWindow,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"ImageKit.IKPictureTaker::PopUpRecentsMenu(AppKit.NSView,Foundation.NSObject,ObjCRuntime.Selector,System.IntPtr)",
			"ImageKit.IKPictureTaker::set_InputImage(AppKit.NSImage)",
			"ImageKit.IKSaveOptions::.ctor(Foundation.NSDictionary,System.String)",
			"ImageKit.IKSaveOptions::AddSaveOptionsToPanel(AppKit.NSSavePanel)",
			"ImageKit.IKSaveOptions::AddSaveOptionsToView(AppKit.NSView)",
			"ImageKit.IKSaveOptionsDelegate_Extensions::ShouldShowType(ImageKit.IIKSaveOptionsDelegate,ImageKit.IKSaveOptions,System.String)",
			"ImageKit.IKScannerDeviceView::.ctor(Foundation.NSCoder)",
			"ImageKit.IKScannerDeviceView::set_DownloadsDirectory(Foundation.NSUrl)",
			"ImageKit.IKScannerDeviceView::set_PostProcessApplication(Foundation.NSUrl)",
			"ImageKit.IKScannerDeviceViewDelegate_Extensions::DidEncounterError(ImageKit.IIKScannerDeviceViewDelegate,ImageKit.IKScannerDeviceView,Foundation.NSError)",
			"ImageKit.IKScannerDeviceViewDelegate_Extensions::DidScan(ImageKit.IIKScannerDeviceViewDelegate,ImageKit.IKScannerDeviceView,Foundation.NSUrl,Foundation.NSData,Foundation.NSError)",
			"ImageKit.IKScannerDeviceViewDelegate_Extensions::DidScanToBandData(ImageKit.IIKScannerDeviceViewDelegate,ImageKit.IKScannerDeviceView,ImageCaptureCore.ICScannerBandData,Foundation.NSDictionary,Foundation.NSError)",
			"ImageKit.IKScannerDeviceViewDelegate_Extensions::DidScanToUrl(ImageKit.IIKScannerDeviceViewDelegate,ImageKit.IKScannerDeviceView,Foundation.NSUrl,Foundation.NSError)",
			"ImageKit.IKSlideshow::ExportSlideshowItemtoApplication(Foundation.NSObject,System.String)",
			"ImageKit.IKSlideshow::RunSlideshow(ImageKit.IIKSlideshowDataSource,System.String,Foundation.NSDictionary)",
			"ImageKit.IKSlideshow::StopSlideshow(Foundation.NSObject)",
			"ImageKit.IKSlideshowDataSource_Extensions::CanExportItemToApplication(ImageKit.IIKSlideshowDataSource,System.IntPtr,System.String)",
			"ImageKit.IKSlideshowDataSource_Extensions::DidChange(ImageKit.IIKSlideshowDataSource,System.IntPtr)",
			"ImageKit.IKSlideshowDataSource_Extensions::DidStop(ImageKit.IIKSlideshowDataSource)",
			"ImageKit.IKSlideshowDataSource_Extensions::GetNameOfItemAt(ImageKit.IIKSlideshowDataSource,System.IntPtr)",
			"ImageKit.IKSlideshowDataSource_Extensions::WillStart(ImageKit.IIKSlideshowDataSource)",
			"Intents.CLPlacemark_INIntentsAdditions::_GetPlacemark(CoreLocation.CLPlacemark,CoreLocation.CLLocation,System.String,Contacts.CNPostalAddress)",
			"Intents.INAccountTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INActivateCarSignalIntent::.ctor(Foundation.NSCoder)",
			"Intents.INActivateCarSignalIntent::.ctor(Intents.INSpeakableString,Intents.INCarSignalOptions)",
			"Intents.INActivateCarSignalIntentHandling_Extensions::Confirm(Intents.IINActivateCarSignalIntentHandling,Intents.INActivateCarSignalIntent,System.Action`1<Intents.INActivateCarSignalIntentResponse>)",
			"Intents.INActivateCarSignalIntentHandling_Extensions::ResolveCarName(Intents.IINActivateCarSignalIntentHandling,Intents.INActivateCarSignalIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INActivateCarSignalIntentHandling_Extensions::ResolveSignals(Intents.IINActivateCarSignalIntentHandling,Intents.INActivateCarSignalIntent,System.Action`1<Intents.INCarSignalOptionsResolutionResult>)",
			"Intents.INActivateCarSignalIntentHandlingWrapper::HandleActivateCarSignal(Intents.INActivateCarSignalIntent,System.Action`1<Intents.INActivateCarSignalIntentResponse>)",
			"Intents.INActivateCarSignalIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INActivateCarSignalIntentResponse::.ctor(Intents.INActivateCarSignalIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INAddMediaIntent::.ctor(Foundation.NSCoder)",
			"Intents.INAddMediaIntent::.ctor(Intents.INMediaItem[],Intents.INMediaSearch,Intents.INMediaDestination)",
			"Intents.INAddMediaIntentHandling_Extensions::Confirm(Intents.IINAddMediaIntentHandling,Intents.INAddMediaIntent,System.Action`1<Intents.INAddMediaIntentResponse>)",
			"Intents.INAddMediaIntentHandling_Extensions::ResolveMediaDestination(Intents.IINAddMediaIntentHandling,Intents.INAddMediaIntent,System.Action`1<Intents.INAddMediaMediaDestinationResolutionResult>)",
			"Intents.INAddMediaIntentHandling_Extensions::ResolveMediaItems(Intents.IINAddMediaIntentHandling,Intents.INAddMediaIntent,System.Action`1<Intents.INAddMediaMediaItemResolutionResult[]>)",
			"Intents.INAddMediaIntentHandlingWrapper::HandleAddMedia(Intents.INAddMediaIntent,System.Action`1<Intents.INAddMediaIntentResponse>)",
			"Intents.INAddMediaIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INAddMediaIntentResponse::.ctor(Intents.INAddMediaIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INAddMediaMediaDestinationResolutionResult::.ctor(Intents.INMediaDestinationResolutionResult)",
			"Intents.INAddMediaMediaDestinationResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INAddMediaMediaDestinationResolutionResult::GetConfirmationRequired(Intents.INMediaDestination)",
			"Intents.INAddMediaMediaDestinationResolutionResult::GetSuccess(Intents.INMediaDestination)",
			"Intents.INAddMediaMediaItemResolutionResult::.ctor(Intents.INMediaItemResolutionResult)",
			"Intents.INAddMediaMediaItemResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INAddMediaMediaItemResolutionResult::GetConfirmationRequired(Intents.INMediaItem)",
			"Intents.INAddMediaMediaItemResolutionResult::GetSuccess(Intents.INMediaItem)",
			"Intents.INAddTasksIntent::.ctor(Foundation.NSCoder)",
			"Intents.INAddTasksIntent::.ctor(Intents.INTaskList,Intents.INSpeakableString[],Intents.INSpatialEventTrigger,Intents.INTemporalEventTrigger)",
			"Intents.INAddTasksIntent::.ctor(Intents.INTaskList,Intents.INSpeakableString[],Intents.INSpatialEventTrigger,Intents.INTemporalEventTrigger,Intents.INTaskPriority)",
			"Intents.INAddTasksIntentHandling_Extensions::Confirm(Intents.IINAddTasksIntentHandling,Intents.INAddTasksIntent,System.Action`1<Intents.INAddTasksIntentResponse>)",
			"Intents.INAddTasksIntentHandling_Extensions::ResolvePriority(Intents.IINAddTasksIntentHandling,Intents.INAddTasksIntent,System.Action`1<Intents.INTaskPriorityResolutionResult>)",
			"Intents.INAddTasksIntentHandling_Extensions::ResolveSpatialEventTrigger(Intents.IINAddTasksIntentHandling,Intents.INAddTasksIntent,System.Action`1<Intents.INSpatialEventTriggerResolutionResult>)",
			"Intents.INAddTasksIntentHandling_Extensions::ResolveTargetTaskList(Intents.IINAddTasksIntentHandling,Intents.INAddTasksIntent,System.Action`1<Intents.INAddTasksTargetTaskListResolutionResult>)",
			"Intents.INAddTasksIntentHandling_Extensions::ResolveTargetTaskList(Intents.IINAddTasksIntentHandling,Intents.INAddTasksIntent,System.Action`1<Intents.INTaskListResolutionResult>)",
			"Intents.INAddTasksIntentHandling_Extensions::ResolveTaskTitles(Intents.IINAddTasksIntentHandling,Intents.INAddTasksIntent,System.Action`1<Intents.INSpeakableStringResolutionResult[]>)",
			"Intents.INAddTasksIntentHandling_Extensions::ResolveTemporalEventTrigger(Intents.IINAddTasksIntentHandling,Intents.INAddTasksIntent,System.Action`1<Intents.INAddTasksTemporalEventTriggerResolutionResult>)",
			"Intents.INAddTasksIntentHandling_Extensions::ResolveTemporalEventTrigger(Intents.IINAddTasksIntentHandling,Intents.INAddTasksIntent,System.Action`1<Intents.INTemporalEventTriggerResolutionResult>)",
			"Intents.INAddTasksIntentHandlingWrapper::HandleAddTasks(Intents.INAddTasksIntent,System.Action`1<Intents.INAddTasksIntentResponse>)",
			"Intents.INAddTasksIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INAddTasksIntentResponse::.ctor(Intents.INAddTasksIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INAddTasksIntentResponse::set_ModifiedTaskList(Intents.INTaskList)",
			"Intents.INAddTasksTargetTaskListResolutionResult::.ctor(Intents.INTaskListResolutionResult)",
			"Intents.INAddTasksTargetTaskListResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INAddTasksTargetTaskListResolutionResult::GetConfirmationRequired(Intents.INTaskList)",
			"Intents.INAddTasksTargetTaskListResolutionResult::GetConfirmationRequired(Intents.INTaskList,Intents.INAddTasksTargetTaskListConfirmationReason)",
			"Intents.INAddTasksTargetTaskListResolutionResult::GetSuccess(Intents.INTaskList)",
			"Intents.INAddTasksTemporalEventTriggerResolutionResult::.ctor(Intents.INTemporalEventTriggerResolutionResult)",
			"Intents.INAddTasksTemporalEventTriggerResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INAddTasksTemporalEventTriggerResolutionResult::GetConfirmationRequired(Intents.INTemporalEventTrigger)",
			"Intents.INAddTasksTemporalEventTriggerResolutionResult::GetSuccess(Intents.INTemporalEventTrigger)",
			"Intents.INAirline::.ctor(Foundation.NSCoder)",
			"Intents.INAirline::Copy(Foundation.NSZone)",
			"Intents.INAirline::EncodeTo(Foundation.NSCoder)",
			"Intents.INAirport::.ctor(Foundation.NSCoder)",
			"Intents.INAirport::Copy(Foundation.NSZone)",
			"Intents.INAirport::EncodeTo(Foundation.NSCoder)",
			"Intents.INAirportGate::.ctor(Foundation.NSCoder)",
			"Intents.INAirportGate::.ctor(Intents.INAirport,System.String,System.String)",
			"Intents.INAirportGate::Copy(Foundation.NSZone)",
			"Intents.INAirportGate::EncodeTo(Foundation.NSCoder)",
			"Intents.INAppendToNoteIntent::.ctor(Foundation.NSCoder)",
			"Intents.INAppendToNoteIntent::.ctor(Intents.INNote,Intents.INNoteContent)",
			"Intents.INAppendToNoteIntentHandling_Extensions::Confirm(Intents.IINAppendToNoteIntentHandling,Intents.INAppendToNoteIntent,System.Action`1<Intents.INAppendToNoteIntentResponse>)",
			"Intents.INAppendToNoteIntentHandling_Extensions::ResolveContentForAppend(Intents.IINAppendToNoteIntentHandling,Intents.INAppendToNoteIntent,System.Action`1<Intents.INNoteContentResolutionResult>)",
			"Intents.INAppendToNoteIntentHandling_Extensions::ResolveTargetNoteForAppend(Intents.IINAppendToNoteIntentHandling,Intents.INAppendToNoteIntent,System.Action`1<Intents.INNoteResolutionResult>)",
			"Intents.INAppendToNoteIntentHandlingWrapper::HandleAppendToNote(Intents.INAppendToNoteIntent,System.Action`1<Intents.INAppendToNoteIntentResponse>)",
			"Intents.INAppendToNoteIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INAppendToNoteIntentResponse::.ctor(Intents.INAppendToNoteIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INAppendToNoteIntentResponse::set_Note(Intents.INNote)",
			"Intents.INBalanceAmount::.ctor(Foundation.NSCoder)",
			"Intents.INBalanceAmount::.ctor(Foundation.NSDecimalNumber,Intents.INBalanceType)",
			"Intents.INBalanceAmount::.ctor(Foundation.NSDecimalNumber,System.String)",
			"Intents.INBalanceAmount::Copy(Foundation.NSZone)",
			"Intents.INBalanceAmount::EncodeTo(Foundation.NSCoder)",
			"Intents.INBalanceTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INBillDetails::.ctor(Foundation.NSCoder)",
			"Intents.INBillDetails::.ctor(Intents.INBillType,Intents.INPaymentStatus,Intents.INBillPayee,Intents.INCurrencyAmount,Intents.INCurrencyAmount,Intents.INCurrencyAmount,Foundation.NSDateComponents,Foundation.NSDateComponents)",
			"Intents.INBillDetails::Copy(Foundation.NSZone)",
			"Intents.INBillDetails::EncodeTo(Foundation.NSCoder)",
			"Intents.INBillDetails::set_AmountDue(Intents.INCurrencyAmount)",
			"Intents.INBillDetails::set_BillPayee(Intents.INBillPayee)",
			"Intents.INBillDetails::set_DueDate(Foundation.NSDateComponents)",
			"Intents.INBillDetails::set_LateFee(Intents.INCurrencyAmount)",
			"Intents.INBillDetails::set_MinimumDue(Intents.INCurrencyAmount)",
			"Intents.INBillDetails::set_PaymentDate(Foundation.NSDateComponents)",
			"Intents.INBillPayee::.ctor(Foundation.NSCoder)",
			"Intents.INBillPayee::.ctor(Intents.INSpeakableString,System.String,Intents.INSpeakableString)",
			"Intents.INBillPayee::Copy(Foundation.NSZone)",
			"Intents.INBillPayee::EncodeTo(Foundation.NSCoder)",
			"Intents.INBillPayeeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INBillPayeeResolutionResult::GetConfirmationRequired(Intents.INBillPayee)",
			"Intents.INBillPayeeResolutionResult::GetSuccess(Intents.INBillPayee)",
			"Intents.INBillTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INBoatReservation::.ctor(Foundation.NSCoder)",
			"Intents.INBoatReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Foundation.NSUrl,Intents.INSeat,Intents.INBoatTrip)",
			"Intents.INBoatReservation::Copy(Foundation.NSZone)",
			"Intents.INBoatReservation::EncodeTo(Foundation.NSCoder)",
			"Intents.INBoatTrip::.ctor(Foundation.NSCoder)",
			"Intents.INBoatTrip::.ctor(System.String,System.String,System.String,Intents.INDateComponentsRange,CoreLocation.CLPlacemark,CoreLocation.CLPlacemark)",
			"Intents.INBoatTrip::Copy(Foundation.NSZone)",
			"Intents.INBoatTrip::EncodeTo(Foundation.NSCoder)",
			"Intents.INBookRestaurantReservationIntent::.ctor(Foundation.NSCoder)",
			"Intents.INBookRestaurantReservationIntent::.ctor(Intents.INRestaurant,Foundation.NSDateComponents,System.UIntPtr,System.String,Intents.INRestaurantGuest,Intents.INRestaurantOffer,System.String)",
			"Intents.INBookRestaurantReservationIntent::Copy(Foundation.NSZone)",
			"Intents.INBookRestaurantReservationIntent::set_BookingDateComponents(Foundation.NSDateComponents)",
			"Intents.INBookRestaurantReservationIntent::set_Guest(Intents.INRestaurantGuest)",
			"Intents.INBookRestaurantReservationIntent::set_Restaurant(Intents.INRestaurant)",
			"Intents.INBookRestaurantReservationIntent::set_SelectedOffer(Intents.INRestaurantOffer)",
			"Intents.INBookRestaurantReservationIntentHandling_Extensions::Confirm(Intents.IINBookRestaurantReservationIntentHandling,Intents.INBookRestaurantReservationIntent,System.Action`1<Intents.INBookRestaurantReservationIntentResponse>)",
			"Intents.INBookRestaurantReservationIntentHandling_Extensions::ResolveBookingDate(Intents.IINBookRestaurantReservationIntentHandling,Intents.INBookRestaurantReservationIntent,System.Action`1<Intents.INDateComponentsResolutionResult>)",
			"Intents.INBookRestaurantReservationIntentHandling_Extensions::ResolveGuest(Intents.IINBookRestaurantReservationIntentHandling,Intents.INBookRestaurantReservationIntent,System.Action`1<Intents.INRestaurantGuestResolutionResult>)",
			"Intents.INBookRestaurantReservationIntentHandling_Extensions::ResolveGuestProvidedSpecialRequest(Intents.IINBookRestaurantReservationIntentHandling,Intents.INBookRestaurantReservationIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INBookRestaurantReservationIntentHandling_Extensions::ResolvePartySize(Intents.IINBookRestaurantReservationIntentHandling,Intents.INBookRestaurantReservationIntent,System.Action`1<Intents.INIntegerResolutionResult>)",
			"Intents.INBookRestaurantReservationIntentHandling_Extensions::ResolveRestaurant(Intents.IINBookRestaurantReservationIntentHandling,Intents.INBookRestaurantReservationIntent,System.Action`1<Intents.INRestaurantResolutionResult>)",
			"Intents.INBookRestaurantReservationIntentHandlingWrapper::HandleBookRestaurantReservation(Intents.INBookRestaurantReservationIntent,System.Action`1<Intents.INBookRestaurantReservationIntentResponse>)",
			"Intents.INBookRestaurantReservationIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INBookRestaurantReservationIntentResponse::.ctor(Intents.INBookRestaurantReservationIntentCode,Foundation.NSUserActivity)",
			"Intents.INBookRestaurantReservationIntentResponse::set_UserBooking(Intents.INRestaurantReservationUserBooking)",
			"Intents.INBooleanResolutionResult::GetConfirmationRequired(Foundation.NSNumber)",
			"Intents.INBooleanResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INBusReservation::.ctor(Foundation.NSCoder)",
			"Intents.INBusReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Foundation.NSUrl,Intents.INSeat,Intents.INBusTrip)",
			"Intents.INBusReservation::Copy(Foundation.NSZone)",
			"Intents.INBusReservation::EncodeTo(Foundation.NSCoder)",
			"Intents.INBusTrip::.ctor(Foundation.NSCoder)",
			"Intents.INBusTrip::.ctor(System.String,System.String,System.String,Intents.INDateComponentsRange,CoreLocation.CLPlacemark,System.String,CoreLocation.CLPlacemark,System.String)",
			"Intents.INBusTrip::Copy(Foundation.NSZone)",
			"Intents.INBusTrip::EncodeTo(Foundation.NSCoder)",
			"Intents.INCallCapabilityResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INCallDestinationTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INCallGroup::.ctor(Foundation.NSCoder)",
			"Intents.INCallGroup::Copy(Foundation.NSZone)",
			"Intents.INCallGroup::EncodeTo(Foundation.NSCoder)",
			"Intents.INCallRecord::.ctor(Foundation.NSCoder)",
			"Intents.INCallRecord::.ctor(System.String,Foundation.NSDate,Intents.INCallRecordType,Intents.INCallCapability,System.Nullable`1<System.Double>,System.Nullable`1<System.Boolean>)",
			"Intents.INCallRecord::.ctor(System.String,Foundation.NSDate,Intents.INCallRecordType,Intents.INCallCapability,System.Nullable`1<System.Double>,System.Nullable`1<System.Boolean>,Intents.INPerson[],System.Nullable`1<System.Int32>,System.Nullable`1<System.Boolean>)",
			"Intents.INCallRecord::.ctor(System.String,Foundation.NSDate,Intents.INCallRecordType,Intents.INCallCapability,System.Nullable`1<System.Double>,System.Nullable`1<System.Boolean>,System.Nullable`1<System.Int32>)",
			"Intents.INCallRecord::.ctor(System.String,Foundation.NSDate,Intents.INPerson,Intents.INCallRecordType,Intents.INCallCapability,Foundation.NSNumber,Foundation.NSNumber)",
			"Intents.INCallRecord::.ctor(System.String,Foundation.NSDate,Intents.INPerson,Intents.INCallRecordType,Intents.INCallCapability,System.Nullable`1<System.Double>,System.Nullable`1<System.Boolean>,System.Nullable`1<System.Int32>)",
			"Intents.INCallRecord::Copy(Foundation.NSZone)",
			"Intents.INCallRecord::EncodeTo(Foundation.NSCoder)",
			"Intents.INCallRecordFilter::.ctor(Foundation.NSCoder)",
			"Intents.INCallRecordFilter::Copy(Foundation.NSZone)",
			"Intents.INCallRecordFilter::EncodeTo(Foundation.NSCoder)",
			"Intents.INCallRecordResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INCallRecordResolutionResult::GetConfirmationRequired(Intents.INCallRecord)",
			"Intents.INCallRecordResolutionResult::GetSuccess(Intents.INCallRecord)",
			"Intents.INCallRecordTypeOptionsResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INCallRecordTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INCallsDomainHandlingWrapper::HandleSearchCallHistory(Intents.INSearchCallHistoryIntent,System.Action`1<Intents.INSearchCallHistoryIntentResponse>)",
			"Intents.INCallsDomainHandlingWrapper::HandleStartAudioCall(Intents.INStartAudioCallIntent,System.Action`1<Intents.INStartAudioCallIntentResponse>)",
			"Intents.INCallsDomainHandlingWrapper::HandleStartVideoCall(Intents.INStartVideoCallIntent,System.Action`1<Intents.INStartVideoCallIntentResponse>)",
			"Intents.INCancelRideIntent::.ctor(Foundation.NSCoder)",
			"Intents.INCancelRideIntentHandling_Extensions::Confirm(Intents.IINCancelRideIntentHandling,Intents.INCancelRideIntent,System.Action`1<Intents.INCancelRideIntentResponse>)",
			"Intents.INCancelRideIntentHandlingWrapper::HandleCancelRide(Intents.INCancelRideIntent,System.Action`1<Intents.INCancelRideIntentResponse>)",
			"Intents.INCancelRideIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INCancelRideIntentResponse::.ctor(Intents.INCancelRideIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INCancelRideIntentResponse::set_CancellationFee(Intents.INCurrencyAmount)",
			"Intents.INCancelRideIntentResponse::set_CancellationFeeThreshold(Foundation.NSDateComponents)",
			"Intents.INCancelWorkoutIntent::.ctor(Foundation.NSCoder)",
			"Intents.INCancelWorkoutIntent::.ctor(Intents.INSpeakableString)",
			"Intents.INCancelWorkoutIntentHandling_Extensions::Confirm(Intents.IINCancelWorkoutIntentHandling,Intents.INCancelWorkoutIntent,System.Action`1<Intents.INCancelWorkoutIntentResponse>)",
			"Intents.INCancelWorkoutIntentHandling_Extensions::ResolveWorkoutName(Intents.IINCancelWorkoutIntentHandling,Intents.INCancelWorkoutIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INCancelWorkoutIntentHandlingWrapper::HandleCancelWorkout(Intents.INCancelWorkoutIntent,System.Action`1<Intents.INCancelWorkoutIntentResponse>)",
			"Intents.INCancelWorkoutIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INCancelWorkoutIntentResponse::.ctor(Intents.INCancelWorkoutIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INCar::.ctor(Foundation.NSCoder)",
			"Intents.INCar::.ctor(System.String,System.String,System.String,System.String,System.String,CoreGraphics.CGColor,Intents.INCarHeadUnit,Intents.INCarChargingConnectorType[])",
			"Intents.INCar::Copy(Foundation.NSZone)",
			"Intents.INCar::EncodeTo(Foundation.NSCoder)",
			"Intents.INCar::GetMaximumPower(Intents.INCarChargingConnectorType)",
			"Intents.INCar::SetMaximumPower(Foundation.NSMeasurement`1<Foundation.NSUnitPower>,Intents.INCarChargingConnectorType)",
			"Intents.INCarAirCirculationModeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INCarAudioSourceResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INCarCommandsDomainHandlingWrapper::HandleActivateCarSignal(Intents.INActivateCarSignalIntent,System.Action`1<Intents.INActivateCarSignalIntentResponse>)",
			"Intents.INCarCommandsDomainHandlingWrapper::HandleGetCarLockStatus(Intents.INGetCarLockStatusIntent,System.Action`1<Intents.INGetCarLockStatusIntentResponse>)",
			"Intents.INCarCommandsDomainHandlingWrapper::HandleGetCarPowerLevelStatus(Intents.INGetCarPowerLevelStatusIntent,System.Action`1<Intents.INGetCarPowerLevelStatusIntentResponse>)",
			"Intents.INCarCommandsDomainHandlingWrapper::HandleSetCarLockStatus(Intents.INSetCarLockStatusIntent,System.Action`1<Intents.INSetCarLockStatusIntentResponse>)",
			"Intents.INCarDefrosterResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INCarHeadUnit::.ctor(Foundation.NSCoder)",
			"Intents.INCarHeadUnit::Copy(Foundation.NSZone)",
			"Intents.INCarHeadUnit::EncodeTo(Foundation.NSCoder)",
			"Intents.INCarPlayDomainHandlingWrapper::HandleSaveProfileInCar(Intents.INSaveProfileInCarIntent,System.Action`1<Intents.INSaveProfileInCarIntentResponse>)",
			"Intents.INCarPlayDomainHandlingWrapper::HandleSetAudioSourceInCar(Intents.INSetAudioSourceInCarIntent,System.Action`1<Intents.INSetAudioSourceInCarIntentResponse>)",
			"Intents.INCarPlayDomainHandlingWrapper::HandleSetClimateSettingsInCar(Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INSetClimateSettingsInCarIntentResponse>)",
			"Intents.INCarPlayDomainHandlingWrapper::HandleSetDefrosterSettingsInCar(Intents.INSetDefrosterSettingsInCarIntent,System.Action`1<Intents.INSetDefrosterSettingsInCarIntentResponse>)",
			"Intents.INCarPlayDomainHandlingWrapper::HandleSetProfileInCar(Intents.INSetProfileInCarIntent,System.Action`1<Intents.INSetProfileInCarIntentResponse>)",
			"Intents.INCarPlayDomainHandlingWrapper::HandleSetSeatSettingsInCar(Intents.INSetSeatSettingsInCarIntent,System.Action`1<Intents.INSetSeatSettingsInCarIntentResponse>)",
			"Intents.INCarSeatResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INCarSignalOptionsResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INCreateNoteIntent::.ctor(Foundation.NSCoder)",
			"Intents.INCreateNoteIntent::.ctor(Intents.INSpeakableString,Intents.INNoteContent,Intents.INSpeakableString)",
			"Intents.INCreateNoteIntentHandling_Extensions::Confirm(Intents.IINCreateNoteIntentHandling,Intents.INCreateNoteIntent,System.Action`1<Intents.INCreateNoteIntentResponse>)",
			"Intents.INCreateNoteIntentHandling_Extensions::ResolveContent(Intents.IINCreateNoteIntentHandling,Intents.INCreateNoteIntent,System.Action`1<Intents.INNoteContentResolutionResult>)",
			"Intents.INCreateNoteIntentHandling_Extensions::ResolveGroupName(Intents.IINCreateNoteIntentHandling,Intents.INCreateNoteIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INCreateNoteIntentHandling_Extensions::ResolveTitle(Intents.IINCreateNoteIntentHandling,Intents.INCreateNoteIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INCreateNoteIntentHandlingWrapper::HandleCreateNote(Intents.INCreateNoteIntent,System.Action`1<Intents.INCreateNoteIntentResponse>)",
			"Intents.INCreateNoteIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INCreateNoteIntentResponse::.ctor(Intents.INCreateNoteIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INCreateNoteIntentResponse::set_CreatedNote(Intents.INNote)",
			"Intents.INCreateTaskListIntent::.ctor(Foundation.NSCoder)",
			"Intents.INCreateTaskListIntent::.ctor(Intents.INSpeakableString,Intents.INSpeakableString[],Intents.INSpeakableString)",
			"Intents.INCreateTaskListIntentHandling_Extensions::Confirm(Intents.IINCreateTaskListIntentHandling,Intents.INCreateTaskListIntent,System.Action`1<Intents.INCreateTaskListIntentResponse>)",
			"Intents.INCreateTaskListIntentHandling_Extensions::ResolveGroupName(Intents.IINCreateTaskListIntentHandling,Intents.INCreateTaskListIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INCreateTaskListIntentHandling_Extensions::ResolveTaskTitles(Intents.IINCreateTaskListIntentHandling,Intents.INCreateTaskListIntent,System.Action`1<Intents.INSpeakableStringResolutionResult[]>)",
			"Intents.INCreateTaskListIntentHandling_Extensions::ResolveTitle(Intents.IINCreateTaskListIntentHandling,Intents.INCreateTaskListIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INCreateTaskListIntentHandlingWrapper::HandleCreateTaskList(Intents.INCreateTaskListIntent,System.Action`1<Intents.INCreateTaskListIntentResponse>)",
			"Intents.INCreateTaskListIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INCreateTaskListIntentResponse::.ctor(Intents.INCreateTaskListIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INCreateTaskListIntentResponse::set_CreatedTaskList(Intents.INTaskList)",
			"Intents.INCurrencyAmount::.ctor(Foundation.NSCoder)",
			"Intents.INCurrencyAmount::.ctor(Foundation.NSDecimalNumber,System.String)",
			"Intents.INCurrencyAmount::Copy(Foundation.NSZone)",
			"Intents.INCurrencyAmount::EncodeTo(Foundation.NSCoder)",
			"Intents.INCurrencyAmountResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INCurrencyAmountResolutionResult::GetConfirmationRequired(Intents.INCurrencyAmount)",
			"Intents.INCurrencyAmountResolutionResult::GetSuccess(Intents.INCurrencyAmount)",
			"Intents.INDailyRoutineRelevanceProvider::.ctor(Foundation.NSCoder)",
			"Intents.INDateComponentsRange::.ctor(EventKit.EKRecurrenceRule)",
			"Intents.INDateComponentsRange::.ctor(Foundation.NSCoder)",
			"Intents.INDateComponentsRange::.ctor(Foundation.NSDateComponents,Foundation.NSDateComponents)",
			"Intents.INDateComponentsRange::.ctor(Foundation.NSDateComponents,Foundation.NSDateComponents,Intents.INRecurrenceRule)",
			"Intents.INDateComponentsRange::Copy(Foundation.NSZone)",
			"Intents.INDateComponentsRange::EncodeTo(Foundation.NSCoder)",
			"Intents.INDateComponentsRangeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INDateComponentsRangeResolutionResult::GetConfirmationRequired(Intents.INDateComponentsRange)",
			"Intents.INDateComponentsRangeResolutionResult::GetSuccess(Intents.INDateComponentsRange)",
			"Intents.INDateComponentsResolutionResult::GetConfirmationRequired(Foundation.NSDateComponents)",
			"Intents.INDateComponentsResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INDateComponentsResolutionResult::GetSuccess(Foundation.NSDateComponents)",
			"Intents.INDateRelevanceProvider::.ctor(Foundation.NSCoder)",
			"Intents.INDateRelevanceProvider::.ctor(Foundation.NSDate,Foundation.NSDate)",
			"Intents.INDateSearchTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INDefaultCardTemplate::.ctor(Foundation.NSCoder)",
			"Intents.INDefaultCardTemplate::Copy(Foundation.NSZone)",
			"Intents.INDefaultCardTemplate::EncodeTo(Foundation.NSCoder)",
			"Intents.INDefaultCardTemplate::set_Image(Intents.INImage)",
			"Intents.INDeleteTasksIntent::.ctor(Foundation.NSCoder)",
			"Intents.INDeleteTasksIntent::.ctor(Intents.INTaskList,Intents.INTask[],System.Nullable`1<System.Boolean>)",
			"Intents.INDeleteTasksIntentHandling_Extensions::Confirm(Intents.IINDeleteTasksIntentHandling,Intents.INDeleteTasksIntent,System.Action`1<Intents.INDeleteTasksIntentResponse>)",
			"Intents.INDeleteTasksIntentHandling_Extensions::ResolveTaskList(Intents.IINDeleteTasksIntentHandling,Intents.INDeleteTasksIntent,System.Action`1<Intents.INDeleteTasksTaskListResolutionResult>)",
			"Intents.INDeleteTasksIntentHandling_Extensions::ResolveTasks(Intents.IINDeleteTasksIntentHandling,Intents.INDeleteTasksIntent,System.Action`1<Intents.INDeleteTasksTaskResolutionResult[]>)",
			"Intents.INDeleteTasksIntentHandlingWrapper::HandleDeleteTasks(Intents.INDeleteTasksIntent,System.Action`1<Intents.INDeleteTasksIntentResponse>)",
			"Intents.INDeleteTasksIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INDeleteTasksIntentResponse::.ctor(Intents.INDeleteTasksIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INDeleteTasksTaskListResolutionResult::.ctor(Intents.INTaskListResolutionResult)",
			"Intents.INDeleteTasksTaskListResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INDeleteTasksTaskListResolutionResult::GetConfirmationRequired(Intents.INTaskList)",
			"Intents.INDeleteTasksTaskListResolutionResult::GetSuccess(Intents.INTaskList)",
			"Intents.INDeleteTasksTaskResolutionResult::.ctor(Intents.INTaskResolutionResult)",
			"Intents.INDeleteTasksTaskResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INDeleteTasksTaskResolutionResult::GetConfirmationRequired(Intents.INTask)",
			"Intents.INDeleteTasksTaskResolutionResult::GetSuccess(Intents.INTask)",
			"Intents.INDoubleResolutionResult::GetConfirmationRequired(Foundation.NSNumber)",
			"Intents.INDoubleResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INEndWorkoutIntent::.ctor(Foundation.NSCoder)",
			"Intents.INEndWorkoutIntent::.ctor(Intents.INSpeakableString)",
			"Intents.INEndWorkoutIntentHandling_Extensions::Confirm(Intents.IINEndWorkoutIntentHandling,Intents.INEndWorkoutIntent,System.Action`1<Intents.INEndWorkoutIntentResponse>)",
			"Intents.INEndWorkoutIntentHandling_Extensions::ResolveWorkoutName(Intents.IINEndWorkoutIntentHandling,Intents.INEndWorkoutIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INEndWorkoutIntentHandlingWrapper::HandleEndWorkout(Intents.INEndWorkoutIntent,System.Action`1<Intents.INEndWorkoutIntentResponse>)",
			"Intents.INEndWorkoutIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INEndWorkoutIntentResponse::.ctor(Intents.INEndWorkoutIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INEnergyResolutionResult::GetConfirmationRequired(Foundation.NSMeasurement`1<Foundation.NSUnitEnergy>)",
			"Intents.INEnergyResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INEnergyResolutionResult::GetSuccess(Foundation.NSMeasurement`1<Foundation.NSUnitEnergy>)",
			"Intents.INEnumResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INExtension::GetHandler(Intents.INIntent)",
			"Intents.INFile::.ctor(Foundation.NSCoder)",
			"Intents.INFile::Create(Foundation.NSData,System.String,System.String)",
			"Intents.INFile::Create(Foundation.NSUrl,System.String,System.String)",
			"Intents.INFile::EncodeTo(Foundation.NSCoder)",
			"Intents.INFileResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INFileResolutionResult::GetConfirmationRequired(Intents.INFile)",
			"Intents.INFileResolutionResult::GetSuccess(Intents.INFile)",
			"Intents.INFlight::.ctor(Foundation.NSCoder)",
			"Intents.INFlight::.ctor(Intents.INAirline,System.String,Intents.INDateComponentsRange,Intents.INDateComponentsRange,Intents.INAirportGate,Intents.INAirportGate)",
			"Intents.INFlight::Copy(Foundation.NSZone)",
			"Intents.INFlight::EncodeTo(Foundation.NSCoder)",
			"Intents.INFlightReservation::.ctor(Foundation.NSCoder)",
			"Intents.INFlightReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Foundation.NSUrl,Intents.INSeat,Intents.INFlight)",
			"Intents.INFlightReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Intents.INSeat,Intents.INFlight)",
			"Intents.INFlightReservation::Copy(Foundation.NSZone)",
			"Intents.INFlightReservation::EncodeTo(Foundation.NSCoder)",
			"Intents.INFocusStatus::.ctor(Foundation.NSCoder)",
			"Intents.INFocusStatus::.ctor(System.Nullable`1<System.Boolean>)",
			"Intents.INFocusStatus::Copy(Foundation.NSZone)",
			"Intents.INFocusStatus::EncodeTo(Foundation.NSCoder)",
			"Intents.INGetAvailableRestaurantReservationBookingDefaultsIntent::.ctor(Foundation.NSCoder)",
			"Intents.INGetAvailableRestaurantReservationBookingDefaultsIntent::.ctor(Intents.INRestaurant)",
			"Intents.INGetAvailableRestaurantReservationBookingDefaultsIntent::set_Restaurant(Intents.INRestaurant)",
			"Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentHandling_Extensions::Confirm(Intents.IINGetAvailableRestaurantReservationBookingDefaultsIntentHandling,Intents.INGetAvailableRestaurantReservationBookingDefaultsIntent,System.Action`1<Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentResponse>)",
			"Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentHandling_Extensions::ResolveAvailableRestaurantReservationBookingDefaults(Intents.IINGetAvailableRestaurantReservationBookingDefaultsIntentHandling,Intents.INGetAvailableRestaurantReservationBookingDefaultsIntent,System.Action`1<Intents.INRestaurantResolutionResult>)",
			"Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentHandlingWrapper::HandleAvailableRestaurantReservationBookingDefaults(Intents.INGetAvailableRestaurantReservationBookingDefaultsIntent,System.Action`1<Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentResponse>)",
			"Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentResponse::.ctor(System.UIntPtr,Foundation.NSDate,Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentResponse::set_MaximumPartySize(Foundation.NSNumber)",
			"Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentResponse::set_MinimumPartySize(Foundation.NSNumber)",
			"Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentResponse::set_ProviderImage(Intents.INImage)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntent::.ctor(Foundation.NSCoder)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntent::.ctor(Intents.INRestaurant,System.UIntPtr,Foundation.NSDateComponents,Foundation.NSNumber,Foundation.NSDate,Foundation.NSDate)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntent::Copy(Foundation.NSZone)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntent::set_EarliestBookingDateForResults(Foundation.NSDate)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntent::set_LatestBookingDateForResults(Foundation.NSDate)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntent::set_MaximumNumberOfResults(Foundation.NSNumber)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntent::set_PreferredBookingDateComponents(Foundation.NSDateComponents)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntent::set_Restaurant(Intents.INRestaurant)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntentHandling_Extensions::Confirm(Intents.IINGetAvailableRestaurantReservationBookingsIntentHandling,Intents.INGetAvailableRestaurantReservationBookingsIntent,System.Action`1<Intents.INGetAvailableRestaurantReservationBookingsIntentResponse>)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntentHandling_Extensions::ResolveAvailableRestaurantReservationBookings(Intents.IINGetAvailableRestaurantReservationBookingsIntentHandling,Intents.INGetAvailableRestaurantReservationBookingsIntent,System.Action`1<Intents.INRestaurantResolutionResult>)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntentHandling_Extensions::ResolvePartySizeAvailableRestaurantReservationBookings(Intents.IINGetAvailableRestaurantReservationBookingsIntentHandling,Intents.INGetAvailableRestaurantReservationBookingsIntent,System.Action`1<Intents.INIntegerResolutionResult>)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntentHandling_Extensions::ResolvePreferredBookingDateAvailableRestaurantReservationBookings(Intents.IINGetAvailableRestaurantReservationBookingsIntentHandling,Intents.INGetAvailableRestaurantReservationBookingsIntent,System.Action`1<Intents.INDateComponentsResolutionResult>)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntentHandlingWrapper::HandleAvailableRestaurantReservationBookings(Intents.INGetAvailableRestaurantReservationBookingsIntent,System.Action`1<Intents.INGetAvailableRestaurantReservationBookingsIntentResponse>)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntentResponse::.ctor(Intents.INRestaurantReservationBooking[],Intents.INGetAvailableRestaurantReservationBookingsIntentCode,Foundation.NSUserActivity)",
			"Intents.INGetAvailableRestaurantReservationBookingsIntentResponse::set_TermsAndConditions(Intents.INTermsAndConditions)",
			"Intents.INGetCarLockStatusIntent::.ctor(Foundation.NSCoder)",
			"Intents.INGetCarLockStatusIntent::.ctor(Intents.INSpeakableString)",
			"Intents.INGetCarLockStatusIntentHandling_Extensions::Confirm(Intents.IINGetCarLockStatusIntentHandling,Intents.INGetCarLockStatusIntent,System.Action`1<Intents.INGetCarLockStatusIntentResponse>)",
			"Intents.INGetCarLockStatusIntentHandling_Extensions::ResolveCarName(Intents.IINGetCarLockStatusIntentHandling,Intents.INGetCarLockStatusIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INGetCarLockStatusIntentHandlingWrapper::HandleGetCarLockStatus(Intents.INGetCarLockStatusIntent,System.Action`1<Intents.INGetCarLockStatusIntentResponse>)",
			"Intents.INGetCarLockStatusIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INGetCarLockStatusIntentResponse::.ctor(Intents.INGetCarLockStatusIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INGetCarLockStatusIntentResponse::set__Locked(Foundation.NSNumber)",
			"Intents.INGetCarPowerLevelStatusIntent::.ctor(Foundation.NSCoder)",
			"Intents.INGetCarPowerLevelStatusIntent::.ctor(Intents.INSpeakableString)",
			"Intents.INGetCarPowerLevelStatusIntentHandling_Extensions::Confirm(Intents.IINGetCarPowerLevelStatusIntentHandling,Intents.INGetCarPowerLevelStatusIntent,System.Action`1<Intents.INGetCarPowerLevelStatusIntentResponse>)",
			"Intents.INGetCarPowerLevelStatusIntentHandling_Extensions::ResolveCarName(Intents.IINGetCarPowerLevelStatusIntentHandling,Intents.INGetCarPowerLevelStatusIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INGetCarPowerLevelStatusIntentHandling_Extensions::StartSendingUpdates(Intents.IINGetCarPowerLevelStatusIntentHandling,Intents.INGetCarPowerLevelStatusIntent,Intents.IINGetCarPowerLevelStatusIntentResponseObserver)",
			"Intents.INGetCarPowerLevelStatusIntentHandling_Extensions::StopSendingUpdates(Intents.IINGetCarPowerLevelStatusIntentHandling,Intents.INGetCarPowerLevelStatusIntent)",
			"Intents.INGetCarPowerLevelStatusIntentHandlingWrapper::HandleGetCarPowerLevelStatus(Intents.INGetCarPowerLevelStatusIntent,System.Action`1<Intents.INGetCarPowerLevelStatusIntentResponse>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::.ctor(Intents.INGetCarPowerLevelStatusIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set__ChargePercentRemaining(Foundation.NSNumber)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set__FuelPercentRemaining(Foundation.NSNumber)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_ActiveConnector(Intents.INCarChargingConnectorType)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_Charging(System.Nullable`1<System.Boolean>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_ChargingFormulaArguments(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_ConsumptionFormulaArguments(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_CurrentBatteryCapacity(Foundation.NSMeasurement`1<Foundation.NSUnitEnergy>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_DateOfLastStateUpdate(Foundation.NSDateComponents)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_DistanceRemaining(Foundation.NSMeasurement`1<Foundation.NSUnitLength>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_DistanceRemainingElectric(Foundation.NSMeasurement`1<Foundation.NSUnitLength>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_DistanceRemainingFuel(Foundation.NSMeasurement`1<Foundation.NSUnitLength>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_MaximumBatteryCapacity(Foundation.NSMeasurement`1<Foundation.NSUnitEnergy>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_MaximumDistance(Foundation.NSMeasurement`1<Foundation.NSUnitLength>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_MaximumDistanceElectric(Foundation.NSMeasurement`1<Foundation.NSUnitLength>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_MaximumDistanceFuel(Foundation.NSMeasurement`1<Foundation.NSUnitLength>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_MinimumBatteryCapacity(Foundation.NSMeasurement`1<Foundation.NSUnitEnergy>)",
			"Intents.INGetCarPowerLevelStatusIntentResponse::set_MinutesToFull(System.Nullable`1<System.Double>)",
			"Intents.INGetCarPowerLevelStatusIntentResponseObserverWrapper::DidUpdate(Intents.INGetCarPowerLevelStatusIntentResponse)",
			"Intents.INGetReservationDetailsIntent::.ctor(Foundation.NSCoder)",
			"Intents.INGetReservationDetailsIntent::.ctor(Intents.INSpeakableString,Intents.INSpeakableString[])",
			"Intents.INGetReservationDetailsIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INGetReservationDetailsIntentResponse::.ctor(Intents.INGetReservationDetailsIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INGetRestaurantGuestIntent::.ctor(Foundation.NSCoder)",
			"Intents.INGetRestaurantGuestIntentHandling_Extensions::Confirm(Intents.IINGetRestaurantGuestIntentHandling,Intents.INGetRestaurantGuestIntent,System.Action`1<Intents.INGetRestaurantGuestIntentResponse>)",
			"Intents.INGetRestaurantGuestIntentHandlingWrapper::HandleRestaurantGuest(Intents.INGetRestaurantGuestIntent,System.Action`1<Intents.INGetRestaurantGuestIntentResponse>)",
			"Intents.INGetRestaurantGuestIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INGetRestaurantGuestIntentResponse::.ctor(Intents.INGetRestaurantGuestIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INGetRestaurantGuestIntentResponse::set_Guest(Intents.INRestaurantGuest)",
			"Intents.INGetRestaurantGuestIntentResponse::set_GuestDisplayPreferences(Intents.INRestaurantGuestDisplayPreferences)",
			"Intents.INGetRideStatusIntent::.ctor(Foundation.NSCoder)",
			"Intents.INGetRideStatusIntentHandling_Extensions::Confirm(Intents.IINGetRideStatusIntentHandling,Intents.INGetRideStatusIntent,System.Action`1<Intents.INGetRideStatusIntentResponse>)",
			"Intents.INGetRideStatusIntentHandlingWrapper::HandleRideStatus(Intents.INGetRideStatusIntent,System.Action`1<Intents.INGetRideStatusIntentResponse>)",
			"Intents.INGetRideStatusIntentHandlingWrapper::StartSendingUpdates(Intents.INGetRideStatusIntent,Intents.IINGetRideStatusIntentResponseObserver)",
			"Intents.INGetRideStatusIntentHandlingWrapper::StopSendingUpdates(Intents.INGetRideStatusIntent)",
			"Intents.INGetRideStatusIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INGetRideStatusIntentResponse::.ctor(Intents.INGetRideStatusIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INGetRideStatusIntentResponse::set_RideStatus(Intents.INRideStatus)",
			"Intents.INGetRideStatusIntentResponseObserverWrapper::DidUpdateRideStatus(Intents.INGetRideStatusIntentResponse)",
			"Intents.INGetUserCurrentRestaurantReservationBookingsIntent::.ctor(Foundation.NSCoder)",
			"Intents.INGetUserCurrentRestaurantReservationBookingsIntent::.ctor(Intents.INRestaurant,System.String,Foundation.NSNumber,Foundation.NSDate)",
			"Intents.INGetUserCurrentRestaurantReservationBookingsIntent::Copy(Foundation.NSZone)",
			"Intents.INGetUserCurrentRestaurantReservationBookingsIntent::set_EarliestBookingDateForResults(Foundation.NSDate)",
			"Intents.INGetUserCurrentRestaurantReservationBookingsIntent::set_MaximumNumberOfResults(Foundation.NSNumber)",
			"Intents.INGetUserCurrentRestaurantReservationBookingsIntent::set_Restaurant(Intents.INRestaurant)",
			"Intents.INGetUserCurrentRestaurantReservationBookingsIntentHandling_Extensions::Confirm(Intents.IINGetUserCurrentRestaurantReservationBookingsIntentHandling,Intents.INGetUserCurrentRestaurantReservationBookingsIntent,System.Action`1<Intents.INGetUserCurrentRestaurantReservationBookingsIntentResponse>)",
			"Intents.INGetUserCurrentRestaurantReservationBookingsIntentHandling_Extensions::ResolveUserCurrentRestaurantReservationBookings(Intents.IINGetUserCurrentRestaurantReservationBookingsIntentHandling,Intents.INGetUserCurrentRestaurantReservationBookingsIntent,System.Action`1<Intents.INRestaurantResolutionResult>)",
			"Intents.INGetUserCurrentRestaurantReservationBookingsIntentHandlingWrapper::HandleUserCurrentRestaurantReservationBookings(Intents.INGetUserCurrentRestaurantReservationBookingsIntent,System.Action`1<Intents.INGetUserCurrentRestaurantReservationBookingsIntentResponse>)",
			"Intents.INGetUserCurrentRestaurantReservationBookingsIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INGetUserCurrentRestaurantReservationBookingsIntentResponse::.ctor(Intents.INRestaurantReservationUserBooking[],Intents.INGetUserCurrentRestaurantReservationBookingsIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INGetVisualCodeIntent::.ctor(Foundation.NSCoder)",
			"Intents.INGetVisualCodeIntentHandling_Extensions::Confirm(Intents.IINGetVisualCodeIntentHandling,Intents.INGetVisualCodeIntent,System.Action`1<Intents.INGetVisualCodeIntentResponse>)",
			"Intents.INGetVisualCodeIntentHandling_Extensions::ResolveVisualCodeType(Intents.IINGetVisualCodeIntentHandling,Intents.INGetVisualCodeIntent,System.Action`1<Intents.INVisualCodeTypeResolutionResult>)",
			"Intents.INGetVisualCodeIntentHandlingWrapper::HandleGetVisualCode(Intents.INGetVisualCodeIntent,System.Action`1<Intents.INGetVisualCodeIntentResponse>)",
			"Intents.INGetVisualCodeIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INGetVisualCodeIntentResponse::.ctor(Intents.INGetVisualCodeIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INGetVisualCodeIntentResponse::set_VisualCodeImage(Intents.INImage)",
			"Intents.INImage::.ctor(Foundation.NSCoder)",
			"Intents.INImage::Copy(Foundation.NSZone)",
			"Intents.INImage::EncodeTo(Foundation.NSCoder)",
			"Intents.INImage::FromData(Foundation.NSData)",
			"Intents.INImage::FromImage(CoreGraphics.CGImage)",
			"Intents.INImage::FromImage(UIKit.UIImage)",
			"Intents.INImage::FromUrl(Foundation.NSUrl)",
			"Intents.INImage::FromUrl(Foundation.NSUrl,System.Double,System.Double)",
			"Intents.INImage::GetImageSize(Intents.INIntentResponse)",
			"Intents.INImageNoteContent::.ctor(Foundation.NSCoder)",
			"Intents.INImageNoteContent::.ctor(Intents.INImage)",
			"Intents.INImageNoteContent::Copy(Foundation.NSZone)",
			"Intents.INImageNoteContent::EncodeTo(Foundation.NSCoder)",
			"Intents.INIntegerResolutionResult::GetConfirmationRequired(Foundation.NSNumber)",
			"Intents.INIntegerResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INIntent::.ctor(Foundation.NSCoder)",
			"Intents.INIntent::Copy(Foundation.NSZone)",
			"Intents.INIntent::EncodeTo(Foundation.NSCoder)",
			"Intents.INIntent::set_DonationMetadata(Intents.INIntentDonationMetadata)",
			"Intents.INIntent::SetImage(Intents.INImage,System.String)",
			"Intents.INIntentDonationMetadata::.ctor(Foundation.NSCoder)",
			"Intents.INIntentDonationMetadata::Copy(Foundation.NSZone)",
			"Intents.INIntentDonationMetadata::EncodeTo(Foundation.NSCoder)",
			"Intents.INIntentHandlerProvidingWrapper::GetHandler(Intents.INIntent)",
			"Intents.INIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INIntentResponse::Copy(Foundation.NSZone)",
			"Intents.INIntentResponse::EncodeTo(Foundation.NSCoder)",
			"Intents.INIntentResponse::set_UserActivity(Foundation.NSUserActivity)",
			"Intents.INInteraction::.ctor(Foundation.NSCoder)",
			"Intents.INInteraction::.ctor(Intents.INIntent,Intents.INIntentResponse)",
			"Intents.INInteraction::_GetParameterValue(Intents.INParameter)",
			"Intents.INInteraction::Copy(Foundation.NSZone)",
			"Intents.INInteraction::EncodeTo(Foundation.NSCoder)",
			"Intents.INInteraction::set_DateInterval(Foundation.NSDateInterval)",
			"Intents.INLengthResolutionResult::GetConfirmationRequired(Foundation.NSMeasurement`1<Foundation.NSUnitLength>)",
			"Intents.INLengthResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INLengthResolutionResult::GetSuccess(Foundation.NSMeasurement`1<Foundation.NSUnitLength>)",
			"Intents.INListCarsIntent::.ctor(Foundation.NSCoder)",
			"Intents.INListCarsIntentHandling_Extensions::ConfirmListCars(Intents.IINListCarsIntentHandling,Intents.INListCarsIntent,System.Action`1<Intents.INListCarsIntentResponse>)",
			"Intents.INListCarsIntentHandlingWrapper::HandleListCars(Intents.INListCarsIntent,System.Action`1<Intents.INListCarsIntentResponse>)",
			"Intents.INListCarsIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INListCarsIntentResponse::.ctor(Intents.INListCarsIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INListRideOptionsIntent::.ctor(CoreLocation.CLPlacemark,CoreLocation.CLPlacemark)",
			"Intents.INListRideOptionsIntent::.ctor(Foundation.NSCoder)",
			"Intents.INListRideOptionsIntentHandling_Extensions::Confirm(Intents.IINListRideOptionsIntentHandling,Intents.INListRideOptionsIntent,System.Action`1<Intents.INListRideOptionsIntentResponse>)",
			"Intents.INListRideOptionsIntentHandling_Extensions::ResolveDropOffLocation(Intents.IINListRideOptionsIntentHandling,Intents.INListRideOptionsIntent,System.Action`1<Intents.INPlacemarkResolutionResult>)",
			"Intents.INListRideOptionsIntentHandling_Extensions::ResolvePickupLocation(Intents.IINListRideOptionsIntentHandling,Intents.INListRideOptionsIntent,System.Action`1<Intents.INPlacemarkResolutionResult>)",
			"Intents.INListRideOptionsIntentHandlingWrapper::HandleListRideOptions(Intents.INListRideOptionsIntent,System.Action`1<Intents.INListRideOptionsIntentResponse>)",
			"Intents.INListRideOptionsIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INListRideOptionsIntentResponse::.ctor(Intents.INListRideOptionsIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INListRideOptionsIntentResponse::set_ExpirationDate(Foundation.NSDate)",
			"Intents.INLocationRelevanceProvider::.ctor(CoreLocation.CLRegion)",
			"Intents.INLocationRelevanceProvider::.ctor(Foundation.NSCoder)",
			"Intents.INLocationSearchTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INLodgingReservation::.ctor(Foundation.NSCoder)",
			"Intents.INLodgingReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],CoreLocation.CLPlacemark,Intents.INDateComponentsRange,System.Nullable`1<System.Int32>,System.Nullable`1<System.Int32>)",
			"Intents.INLodgingReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Foundation.NSUrl,CoreLocation.CLPlacemark,Intents.INDateComponentsRange,System.Nullable`1<System.Int32>,System.Nullable`1<System.Int32>)",
			"Intents.INLodgingReservation::Copy(Foundation.NSZone)",
			"Intents.INLodgingReservation::EncodeTo(Foundation.NSCoder)",
			"Intents.INMassResolutionResult::GetConfirmationRequired(Foundation.NSMeasurement`1<Foundation.NSUnitMass>)",
			"Intents.INMassResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INMassResolutionResult::GetSuccess(Foundation.NSMeasurement`1<Foundation.NSUnitMass>)",
			"Intents.INMediaAffinityTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INMediaDestination::.ctor(Foundation.NSCoder)",
			"Intents.INMediaDestination::Copy(Foundation.NSZone)",
			"Intents.INMediaDestination::EncodeTo(Foundation.NSCoder)",
			"Intents.INMediaDestinationResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INMediaDestinationResolutionResult::GetConfirmationRequired(Intents.INMediaDestination)",
			"Intents.INMediaDestinationResolutionResult::GetSuccess(Intents.INMediaDestination)",
			"Intents.INMediaItem::.ctor(Foundation.NSCoder)",
			"Intents.INMediaItem::.ctor(System.String,System.String,Intents.INMediaItemType,Intents.INImage)",
			"Intents.INMediaItem::.ctor(System.String,System.String,Intents.INMediaItemType,Intents.INImage,System.String)",
			"Intents.INMediaItem::Copy(Foundation.NSZone)",
			"Intents.INMediaItem::EncodeTo(Foundation.NSCoder)",
			"Intents.INMediaItemResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INMediaItemResolutionResult::GetConfirmationRequired(Intents.INMediaItem)",
			"Intents.INMediaItemResolutionResult::GetSuccess(Intents.INMediaItem)",
			"Intents.INMediaSearch::.ctor(Foundation.NSCoder)",
			"Intents.INMediaSearch::.ctor(Intents.INMediaItemType,Intents.INMediaSortOrder,System.String,System.String,System.String,System.String[],System.String[],Intents.INDateComponentsRange,Intents.INMediaReference,System.String)",
			"Intents.INMediaSearch::Copy(Foundation.NSZone)",
			"Intents.INMediaSearch::EncodeTo(Foundation.NSCoder)",
			"Intents.INMediaUserContext::.ctor(Foundation.NSCoder)",
			"Intents.INMediaUserContext::set_NumberOfLibraryItems(System.Nullable`1<System.Int32>)",
			"Intents.INMessage::.ctor(Foundation.NSCoder)",
			"Intents.INMessage::.ctor(System.String,System.String,Foundation.NSDate,Intents.INPerson,Intents.INPerson[])",
			"Intents.INMessage::.ctor(System.String,System.String,System.String,Foundation.NSDate,Intents.INPerson,Intents.INPerson[],Intents.INMessageType)",
			"Intents.INMessage::.ctor(System.String,System.String,System.String,Foundation.NSDate,Intents.INPerson,Intents.INPerson[],Intents.INSpeakableString,Intents.INMessageType)",
			"Intents.INMessage::.ctor(System.String,System.String,System.String,Foundation.NSDate,Intents.INPerson,Intents.INPerson[],Intents.INSpeakableString,Intents.INMessageType,System.String)",
			"Intents.INMessage::Copy(Foundation.NSZone)",
			"Intents.INMessage::EncodeTo(Foundation.NSCoder)",
			"Intents.INMessageAttributeOptionsResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INMessageAttributeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INMessagesDomainHandlingWrapper::HandleSearchForMessages(Intents.INSearchForMessagesIntent,System.Action`1<Intents.INSearchForMessagesIntentResponse>)",
			"Intents.INMessagesDomainHandlingWrapper::HandleSendMessage(Intents.INSendMessageIntent,System.Action`1<Intents.INSendMessageIntentResponse>)",
			"Intents.INMessagesDomainHandlingWrapper::HandleSetMessageAttribute(Intents.INSetMessageAttributeIntent,System.Action`1<Intents.INSetMessageAttributeIntentResponse>)",
			"Intents.INNote::.ctor(Foundation.NSCoder)",
			"Intents.INNote::.ctor(Intents.INSpeakableString,Intents.INNoteContent[],Intents.INSpeakableString,Foundation.NSDateComponents,Foundation.NSDateComponents,System.String)",
			"Intents.INNote::Copy(Foundation.NSZone)",
			"Intents.INNote::EncodeTo(Foundation.NSCoder)",
			"Intents.INNotebookDomainHandlingWrapper::HandleAddTasks(Intents.INAddTasksIntent,System.Action`1<Intents.INAddTasksIntentResponse>)",
			"Intents.INNotebookDomainHandlingWrapper::HandleAppendToNote(Intents.INAppendToNoteIntent,System.Action`1<Intents.INAppendToNoteIntentResponse>)",
			"Intents.INNotebookDomainHandlingWrapper::HandleCreateNote(Intents.INCreateNoteIntent,System.Action`1<Intents.INCreateNoteIntentResponse>)",
			"Intents.INNotebookDomainHandlingWrapper::HandleCreateTaskList(Intents.INCreateTaskListIntent,System.Action`1<Intents.INCreateTaskListIntentResponse>)",
			"Intents.INNotebookDomainHandlingWrapper::HandleSearchForNotebookItems(Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INSearchForNotebookItemsIntentResponse>)",
			"Intents.INNotebookDomainHandlingWrapper::HandleSetTaskAttribute(Intents.INSetTaskAttributeIntent,System.Action`1<Intents.INSetTaskAttributeIntentResponse>)",
			"Intents.INNotebookItemTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INNoteContent::.ctor(Foundation.NSCoder)",
			"Intents.INNoteContent::Copy(Foundation.NSZone)",
			"Intents.INNoteContent::EncodeTo(Foundation.NSCoder)",
			"Intents.INNoteContentResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INNoteContentResolutionResult::GetConfirmationRequired(Intents.INNoteContent)",
			"Intents.INNoteContentResolutionResult::GetSuccess(Intents.INNoteContent)",
			"Intents.INNoteContentTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INNoteResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INNoteResolutionResult::GetConfirmationRequired(Intents.INNote)",
			"Intents.INNoteResolutionResult::GetSuccess(Intents.INNote)",
			"Intents.INObject::.ctor(Foundation.NSCoder)",
			"Intents.INObject::.ctor(System.String,System.String,System.String,Intents.INImage)",
			"Intents.INObject::.ctor(System.String,System.String,System.String,System.String,Intents.INImage)",
			"Intents.INObject::Copy(Foundation.NSZone)",
			"Intents.INObject::EncodeTo(Foundation.NSCoder)",
			"Intents.INObject::set_DisplayImage(Intents.INImage)",
			"Intents.INObjectCollection`1::.ctor(Foundation.NSCoder)",
			"Intents.INObjectCollection`1::Copy(Foundation.NSZone)",
			"Intents.INObjectCollection`1::EncodeTo(Foundation.NSCoder)",
			"Intents.INObjectResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INObjectResolutionResult::GetConfirmationRequired(Intents.INObject)",
			"Intents.INObjectResolutionResult::GetSuccess(Intents.INObject)",
			"Intents.INObjectSection`1::.ctor(Foundation.NSCoder)",
			"Intents.INObjectSection`1::Copy(Foundation.NSZone)",
			"Intents.INObjectSection`1::EncodeTo(Foundation.NSCoder)",
			"Intents.INOutgoingMessageTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INParameter::.ctor(Foundation.NSCoder)",
			"Intents.INParameter::Copy(Foundation.NSZone)",
			"Intents.INParameter::EncodeTo(Foundation.NSCoder)",
			"Intents.INParameter::IsEqualTo(Intents.INParameter)",
			"Intents.INPauseWorkoutIntent::.ctor(Foundation.NSCoder)",
			"Intents.INPauseWorkoutIntent::.ctor(Intents.INSpeakableString)",
			"Intents.INPauseWorkoutIntentHandling_Extensions::Confirm(Intents.IINPauseWorkoutIntentHandling,Intents.INPauseWorkoutIntent,System.Action`1<Intents.INPauseWorkoutIntentResponse>)",
			"Intents.INPauseWorkoutIntentHandling_Extensions::ResolveWorkoutName(Intents.IINPauseWorkoutIntentHandling,Intents.INPauseWorkoutIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INPauseWorkoutIntentHandlingWrapper::HandlePauseWorkout(Intents.INPauseWorkoutIntent,System.Action`1<Intents.INPauseWorkoutIntentResponse>)",
			"Intents.INPauseWorkoutIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INPauseWorkoutIntentResponse::.ctor(Intents.INPauseWorkoutIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INPayBillIntent::.ctor(Foundation.NSCoder)",
			"Intents.INPayBillIntent::.ctor(Intents.INBillPayee,Intents.INPaymentAccount,Intents.INPaymentAmount,Intents.INDateComponentsRange,System.String,Intents.INBillType,Intents.INDateComponentsRange)",
			"Intents.INPayBillIntentHandling_Extensions::Confirm(Intents.IINPayBillIntentHandling,Intents.INPayBillIntent,System.Action`1<Intents.INPayBillIntentResponse>)",
			"Intents.INPayBillIntentHandling_Extensions::ResolveBillPayee(Intents.IINPayBillIntentHandling,Intents.INPayBillIntent,System.Action`1<Intents.INBillPayeeResolutionResult>)",
			"Intents.INPayBillIntentHandling_Extensions::ResolveBillType(Intents.IINPayBillIntentHandling,Intents.INPayBillIntent,System.Action`1<Intents.INBillTypeResolutionResult>)",
			"Intents.INPayBillIntentHandling_Extensions::ResolveDueDate(Intents.IINPayBillIntentHandling,Intents.INPayBillIntent,System.Action`1<Intents.INDateComponentsRangeResolutionResult>)",
			"Intents.INPayBillIntentHandling_Extensions::ResolveFromAccount(Intents.IINPayBillIntentHandling,Intents.INPayBillIntent,System.Action`1<Intents.INPaymentAccountResolutionResult>)",
			"Intents.INPayBillIntentHandling_Extensions::ResolveTransactionAmount(Intents.IINPayBillIntentHandling,Intents.INPayBillIntent,System.Action`1<Intents.INPaymentAmountResolutionResult>)",
			"Intents.INPayBillIntentHandling_Extensions::ResolveTransactionNote(Intents.IINPayBillIntentHandling,Intents.INPayBillIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INPayBillIntentHandling_Extensions::ResolveTransactionScheduledDate(Intents.IINPayBillIntentHandling,Intents.INPayBillIntent,System.Action`1<Intents.INDateComponentsRangeResolutionResult>)",
			"Intents.INPayBillIntentHandlingWrapper::HandlePayBill(Intents.INPayBillIntent,System.Action`1<Intents.INPayBillIntentResponse>)",
			"Intents.INPayBillIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INPayBillIntentResponse::.ctor(Intents.INPayBillIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INPayBillIntentResponse::set_BillDetails(Intents.INBillDetails)",
			"Intents.INPayBillIntentResponse::set_FromAccount(Intents.INPaymentAccount)",
			"Intents.INPayBillIntentResponse::set_TransactionAmount(Intents.INPaymentAmount)",
			"Intents.INPayBillIntentResponse::set_TransactionScheduledDate(Intents.INDateComponentsRange)",
			"Intents.INPaymentAccount::.ctor(Foundation.NSCoder)",
			"Intents.INPaymentAccount::.ctor(Intents.INSpeakableString,System.String,Intents.INAccountType,Intents.INSpeakableString)",
			"Intents.INPaymentAccount::.ctor(Intents.INSpeakableString,System.String,Intents.INAccountType,Intents.INSpeakableString,Intents.INBalanceAmount,Intents.INBalanceAmount)",
			"Intents.INPaymentAccount::Copy(Foundation.NSZone)",
			"Intents.INPaymentAccount::EncodeTo(Foundation.NSCoder)",
			"Intents.INPaymentAccountResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INPaymentAccountResolutionResult::GetConfirmationRequired(Intents.INPaymentAccount)",
			"Intents.INPaymentAccountResolutionResult::GetSuccess(Intents.INPaymentAccount)",
			"Intents.INPaymentAmount::.ctor(Foundation.NSCoder)",
			"Intents.INPaymentAmount::.ctor(Intents.INAmountType,Intents.INCurrencyAmount)",
			"Intents.INPaymentAmount::Copy(Foundation.NSZone)",
			"Intents.INPaymentAmount::EncodeTo(Foundation.NSCoder)",
			"Intents.INPaymentAmountResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INPaymentAmountResolutionResult::GetConfirmationRequired(Intents.INPaymentAmount)",
			"Intents.INPaymentAmountResolutionResult::GetSuccess(Intents.INPaymentAmount)",
			"Intents.INPaymentMethod::.ctor(Foundation.NSCoder)",
			"Intents.INPaymentMethod::.ctor(Intents.INPaymentMethodType,System.String,System.String,Intents.INImage)",
			"Intents.INPaymentMethod::Copy(Foundation.NSZone)",
			"Intents.INPaymentMethod::EncodeTo(Foundation.NSCoder)",
			"Intents.INPaymentMethodResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INPaymentMethodResolutionResult::GetConfirmationRequired(Intents.INPaymentMethod)",
			"Intents.INPaymentMethodResolutionResult::GetSuccess(Intents.INPaymentMethod)",
			"Intents.INPaymentRecord::.ctor(Foundation.NSCoder)",
			"Intents.INPaymentRecord::.ctor(Intents.INPerson,Intents.INPerson,Intents.INCurrencyAmount,Intents.INPaymentMethod,System.String,Intents.INPaymentStatus)",
			"Intents.INPaymentRecord::.ctor(Intents.INPerson,Intents.INPerson,Intents.INCurrencyAmount,Intents.INPaymentMethod,System.String,Intents.INPaymentStatus,Intents.INCurrencyAmount)",
			"Intents.INPaymentRecord::Copy(Foundation.NSZone)",
			"Intents.INPaymentRecord::EncodeTo(Foundation.NSCoder)",
			"Intents.INPaymentsDomainHandlingWrapper::HandlePayBill(Intents.INPayBillIntent,System.Action`1<Intents.INPayBillIntentResponse>)",
			"Intents.INPaymentsDomainHandlingWrapper::HandleRequestPayment(Intents.INRequestPaymentIntent,System.Action`1<Intents.INRequestPaymentIntentResponse>)",
			"Intents.INPaymentsDomainHandlingWrapper::HandleSearch(Intents.INSearchForBillsIntent,System.Action`1<Intents.INSearchForBillsIntentResponse>)",
			"Intents.INPaymentsDomainHandlingWrapper::HandleSearchForAccounts(Intents.INSearchForAccountsIntent,System.Action`1<Intents.INSearchForAccountsIntentResponse>)",
			"Intents.INPaymentsDomainHandlingWrapper::HandleSendPayment(Intents.INSendPaymentIntent,System.Action`1<Intents.INSendPaymentIntentResponse>)",
			"Intents.INPaymentsDomainHandlingWrapper::HandleTransferMoney(Intents.INTransferMoneyIntent,System.Action`1<Intents.INTransferMoneyIntentResponse>)",
			"Intents.INPaymentStatusResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INPerson::.ctor(Foundation.NSCoder)",
			"Intents.INPerson::.ctor(Intents.INPersonHandle,Foundation.NSPersonNameComponents,System.String,Intents.INImage,System.String,System.String)",
			"Intents.INPerson::.ctor(Intents.INPersonHandle,Foundation.NSPersonNameComponents,System.String,Intents.INImage,System.String,System.String,Intents.INPersonHandle[],Intents.INPersonSuggestionType)",
			"Intents.INPerson::.ctor(Intents.INPersonHandle,Foundation.NSPersonNameComponents,System.String,Intents.INImage,System.String,System.String,System.Boolean)",
			"Intents.INPerson::.ctor(Intents.INPersonHandle,Foundation.NSPersonNameComponents,System.String,Intents.INImage,System.String,System.String,System.String)",
			"Intents.INPerson::Copy(Foundation.NSZone)",
			"Intents.INPerson::EncodeTo(Foundation.NSCoder)",
			"Intents.INPerson::InitWithContactSuggestion(Intents.INPersonHandle,Foundation.NSPersonNameComponents,System.String,Intents.INImage,System.String,System.String,System.Boolean,Intents.INPersonSuggestionType)",
			"Intents.INPerson::InitWithMe(Intents.INPersonHandle,Foundation.NSPersonNameComponents,System.String,Intents.INImage,System.String,System.String,System.Boolean,Intents.INPersonSuggestionType)",
			"Intents.INPersonHandle::.ctor(Foundation.NSCoder)",
			"Intents.INPersonHandle::.ctor(System.String,Intents.INPersonHandleType,Foundation.NSString)",
			"Intents.INPersonHandle::Copy(Foundation.NSZone)",
			"Intents.INPersonHandle::EncodeTo(Foundation.NSCoder)",
			"Intents.INPersonResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INPersonResolutionResult::GetConfirmationRequired(Intents.INPerson)",
			"Intents.INPersonResolutionResult::GetSuccess(Intents.INPerson)",
			"Intents.INPhotosDomainHandlingWrapper::HandleSearchForPhotos(Intents.INSearchForPhotosIntent,System.Action`1<Intents.INSearchForPhotosIntentResponse>)",
			"Intents.INPhotosDomainHandlingWrapper::HandleStartPhotoPlayback(Intents.INStartPhotoPlaybackIntent,System.Action`1<Intents.INStartPhotoPlaybackIntentResponse>)",
			"Intents.INPlacemarkResolutionResult::GetConfirmationRequired(CoreLocation.CLPlacemark)",
			"Intents.INPlacemarkResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INPlacemarkResolutionResult::GetSuccess(CoreLocation.CLPlacemark)",
			"Intents.INPlaybackQueueLocationResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INPlaybackRepeatModeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INPlayMediaIntent::.ctor(Foundation.NSCoder)",
			"Intents.INPlayMediaIntent::.ctor(Intents.INMediaItem[],Intents.INMediaItem,System.Nullable`1<System.Boolean>,Intents.INPlaybackRepeatMode,System.Nullable`1<System.Boolean>)",
			"Intents.INPlayMediaIntent::.ctor(Intents.INMediaItem[],Intents.INMediaItem,System.Nullable`1<System.Boolean>,Intents.INPlaybackRepeatMode,System.Nullable`1<System.Boolean>,Intents.INPlaybackQueueLocation,System.Nullable`1<System.Double>,Intents.INMediaSearch)",
			"Intents.INPlayMediaIntentHandling_Extensions::Confirm(Intents.IINPlayMediaIntentHandling,Intents.INPlayMediaIntent,System.Action`1<Intents.INPlayMediaIntentResponse>)",
			"Intents.INPlayMediaIntentHandling_Extensions::ResolveMediaItems(Intents.IINPlayMediaIntentHandling,Intents.INPlayMediaIntent,System.Action`1<Foundation.NSArray`1<Intents.INPlayMediaMediaItemResolutionResult>>)",
			"Intents.INPlayMediaIntentHandling_Extensions::ResolvePlaybackQueueLocation(Intents.IINPlayMediaIntentHandling,Intents.INPlayMediaIntent,System.Action`1<Intents.INPlaybackQueueLocationResolutionResult>)",
			"Intents.INPlayMediaIntentHandling_Extensions::ResolvePlaybackRepeatMode(Intents.IINPlayMediaIntentHandling,Intents.INPlayMediaIntent,System.Action`1<Intents.INPlaybackRepeatModeResolutionResult>)",
			"Intents.INPlayMediaIntentHandling_Extensions::ResolvePlaybackSpeed(Intents.IINPlayMediaIntentHandling,Intents.INPlayMediaIntent,System.Action`1<Intents.INPlayMediaPlaybackSpeedResolutionResult>)",
			"Intents.INPlayMediaIntentHandling_Extensions::ResolvePlayShuffled(Intents.IINPlayMediaIntentHandling,Intents.INPlayMediaIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INPlayMediaIntentHandling_Extensions::ResolveResumePlayback(Intents.IINPlayMediaIntentHandling,Intents.INPlayMediaIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INPlayMediaIntentHandlingWrapper::HandlePlayMedia(Intents.INPlayMediaIntent,System.Action`1<Intents.INPlayMediaIntentResponse>)",
			"Intents.INPlayMediaIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INPlayMediaIntentResponse::.ctor(Intents.INPlayMediaIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INPlayMediaIntentResponse::set_WeakNowPlayingInfo(Foundation.NSDictionary)",
			"Intents.INPlayMediaMediaItemResolutionResult::.ctor(Intents.INMediaItemResolutionResult)",
			"Intents.INPlayMediaMediaItemResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INPlayMediaMediaItemResolutionResult::GetConfirmationRequired(Intents.INMediaItem)",
			"Intents.INPlayMediaMediaItemResolutionResult::GetSuccess(Intents.INMediaItem)",
			"Intents.INPlayMediaPlaybackSpeedResolutionResult::.ctor(Intents.INDoubleResolutionResult)",
			"Intents.INPlayMediaPlaybackSpeedResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INPlayMediaPlaybackSpeedResolutionResult::GetConfirmationRequired(System.Nullable`1<System.Double>)",
			"Intents.INPriceRange::.ctor(Foundation.NSCoder)",
			"Intents.INPriceRange::.ctor(Foundation.NSDecimalNumber,Foundation.NSDecimalNumber,System.String)",
			"Intents.INPriceRange::.ctor(Foundation.NSDecimalNumber,System.String)",
			"Intents.INPriceRange::Copy(Foundation.NSZone)",
			"Intents.INPriceRange::EncodeTo(Foundation.NSCoder)",
			"Intents.INPriceRange::InitWithMaximumPrice(Foundation.NSDecimalNumber,System.String)",
			"Intents.INPriceRange::InitWithMinimumPrice(Foundation.NSDecimalNumber,System.String)",
			"Intents.INRadioDomainHandlingWrapper::HandleSetRadioStation(Intents.INSetRadioStationIntent,System.Action`1<Intents.INSetRadioStationIntentResponse>)",
			"Intents.INRadioTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INRecurrenceRule::.ctor(Foundation.NSCoder)",
			"Intents.INRecurrenceRule::Copy(Foundation.NSZone)",
			"Intents.INRecurrenceRule::EncodeTo(Foundation.NSCoder)",
			"Intents.INRelativeReferenceResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INRelativeSettingResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INRelevanceProvider::.ctor(Foundation.NSCoder)",
			"Intents.INRelevanceProvider::Copy(Foundation.NSZone)",
			"Intents.INRelevanceProvider::EncodeTo(Foundation.NSCoder)",
			"Intents.INRelevantShortcut::.ctor(Foundation.NSCoder)",
			"Intents.INRelevantShortcut::.ctor(Intents.INShortcut)",
			"Intents.INRelevantShortcut::Copy(Foundation.NSZone)",
			"Intents.INRelevantShortcut::EncodeTo(Foundation.NSCoder)",
			"Intents.INRelevantShortcut::set_WatchTemplate(Intents.INDefaultCardTemplate)",
			"Intents.INRentalCar::.ctor(Foundation.NSCoder)",
			"Intents.INRentalCar::Copy(Foundation.NSZone)",
			"Intents.INRentalCar::EncodeTo(Foundation.NSCoder)",
			"Intents.INRentalCarReservation::.ctor(Foundation.NSCoder)",
			"Intents.INRentalCarReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Foundation.NSUrl,Intents.INRentalCar,Intents.INDateComponentsRange,CoreLocation.CLPlacemark,CoreLocation.CLPlacemark)",
			"Intents.INRentalCarReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Intents.INRentalCar,Intents.INDateComponentsRange,CoreLocation.CLPlacemark,CoreLocation.CLPlacemark)",
			"Intents.INRentalCarReservation::Copy(Foundation.NSZone)",
			"Intents.INRentalCarReservation::EncodeTo(Foundation.NSCoder)",
			"Intents.INRequestPaymentCurrencyAmountResolutionResult::.ctor(Intents.INCurrencyAmountResolutionResult)",
			"Intents.INRequestPaymentCurrencyAmountResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INRequestPaymentIntent::.ctor(Foundation.NSCoder)",
			"Intents.INRequestPaymentIntent::.ctor(Intents.INPerson,Intents.INCurrencyAmount,System.String)",
			"Intents.INRequestPaymentIntentHandling_Extensions::Confirm(Intents.IINRequestPaymentIntentHandling,Intents.INRequestPaymentIntent,System.Action`1<Intents.INRequestPaymentIntentResponse>)",
			"Intents.INRequestPaymentIntentHandling_Extensions::ResolveCurrencyAmount(Intents.IINRequestPaymentIntentHandling,Intents.INRequestPaymentIntent,System.Action`1<Intents.INCurrencyAmountResolutionResult>)",
			"Intents.INRequestPaymentIntentHandling_Extensions::ResolveCurrencyAmount(Intents.IINRequestPaymentIntentHandling,Intents.INRequestPaymentIntent,System.Action`1<Intents.INRequestPaymentCurrencyAmountResolutionResult>)",
			"Intents.INRequestPaymentIntentHandling_Extensions::ResolveNote(Intents.IINRequestPaymentIntentHandling,Intents.INRequestPaymentIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INRequestPaymentIntentHandling_Extensions::ResolvePayer(Intents.IINRequestPaymentIntentHandling,Intents.INRequestPaymentIntent,System.Action`1<Intents.INPersonResolutionResult>)",
			"Intents.INRequestPaymentIntentHandling_Extensions::ResolvePayer(Intents.IINRequestPaymentIntentHandling,Intents.INRequestPaymentIntent,System.Action`1<Intents.INRequestPaymentPayerResolutionResult>)",
			"Intents.INRequestPaymentIntentHandlingWrapper::HandleRequestPayment(Intents.INRequestPaymentIntent,System.Action`1<Intents.INRequestPaymentIntentResponse>)",
			"Intents.INRequestPaymentIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INRequestPaymentIntentResponse::.ctor(Intents.INRequestPaymentIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INRequestPaymentIntentResponse::set_PaymentRecord(Intents.INPaymentRecord)",
			"Intents.INRequestPaymentPayerResolutionResult::.ctor(Intents.INPersonResolutionResult)",
			"Intents.INRequestPaymentPayerResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INRequestPaymentPayerResolutionResult::GetConfirmationRequired(Intents.INPerson)",
			"Intents.INRequestPaymentPayerResolutionResult::GetSuccess(Intents.INPerson)",
			"Intents.INRequestRideIntent::.ctor(CoreLocation.CLPlacemark,CoreLocation.CLPlacemark,Intents.INSpeakableString,Foundation.NSNumber,Intents.INPaymentMethod)",
			"Intents.INRequestRideIntent::.ctor(CoreLocation.CLPlacemark,CoreLocation.CLPlacemark,Intents.INSpeakableString,Foundation.NSNumber,Intents.INPaymentMethod,Intents.INDateComponentsRange)",
			"Intents.INRequestRideIntent::.ctor(Foundation.NSCoder)",
			"Intents.INRequestRideIntentHandling_Extensions::Confirm(Intents.IINRequestRideIntentHandling,Intents.INRequestRideIntent,System.Action`1<Intents.INRequestRideIntentResponse>)",
			"Intents.INRequestRideIntentHandling_Extensions::ResolveDropOffLocation(Intents.IINRequestRideIntentHandling,Intents.INRequestRideIntent,System.Action`1<Intents.INPlacemarkResolutionResult>)",
			"Intents.INRequestRideIntentHandling_Extensions::ResolvePartySize(Intents.IINRequestRideIntentHandling,Intents.INRequestRideIntent,System.Action`1<Intents.INIntegerResolutionResult>)",
			"Intents.INRequestRideIntentHandling_Extensions::ResolvePickupLocation(Intents.IINRequestRideIntentHandling,Intents.INRequestRideIntent,System.Action`1<Intents.INPlacemarkResolutionResult>)",
			"Intents.INRequestRideIntentHandling_Extensions::ResolveRideOptionName(Intents.IINRequestRideIntentHandling,Intents.INRequestRideIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INRequestRideIntentHandling_Extensions::ResolveScheduledPickupTime(Intents.IINRequestRideIntentHandling,Intents.INRequestRideIntent,System.Action`1<Intents.INDateComponentsRangeResolutionResult>)",
			"Intents.INRequestRideIntentHandlingWrapper::HandleRequestRide(Intents.INRequestRideIntent,System.Action`1<Intents.INRequestRideIntentResponse>)",
			"Intents.INRequestRideIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INRequestRideIntentResponse::.ctor(Intents.INRequestRideIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INRequestRideIntentResponse::set_RideStatus(Intents.INRideStatus)",
			"Intents.INReservation::.ctor(Foundation.NSCoder)",
			"Intents.INReservation::Copy(Foundation.NSZone)",
			"Intents.INReservation::EncodeTo(Foundation.NSCoder)",
			"Intents.INReservationAction::.ctor(Foundation.NSCoder)",
			"Intents.INReservationAction::.ctor(Intents.INReservationActionType,Intents.INDateComponentsRange,Foundation.NSUserActivity)",
			"Intents.INReservationAction::Copy(Foundation.NSZone)",
			"Intents.INReservationAction::EncodeTo(Foundation.NSCoder)",
			"Intents.INRestaurant::.ctor(CoreLocation.CLLocation,System.String,System.String,System.String)",
			"Intents.INRestaurant::.ctor(Foundation.NSCoder)",
			"Intents.INRestaurant::Copy(Foundation.NSZone)",
			"Intents.INRestaurant::EncodeTo(Foundation.NSCoder)",
			"Intents.INRestaurant::set_Location(CoreLocation.CLLocation)",
			"Intents.INRestaurantGuest::.ctor(Foundation.NSCoder)",
			"Intents.INRestaurantGuest::.ctor(Foundation.NSPersonNameComponents,System.String,System.String)",
			"Intents.INRestaurantGuestDisplayPreferences::.ctor(Foundation.NSCoder)",
			"Intents.INRestaurantGuestDisplayPreferences::Copy(Foundation.NSZone)",
			"Intents.INRestaurantGuestDisplayPreferences::EncodeTo(Foundation.NSCoder)",
			"Intents.INRestaurantGuestResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INRestaurantGuestResolutionResult::GetConfirmationRequired(Intents.INRestaurantGuest)",
			"Intents.INRestaurantGuestResolutionResult::GetSuccess(Intents.INRestaurantGuest)",
			"Intents.INRestaurantOffer::.ctor(Foundation.NSCoder)",
			"Intents.INRestaurantOffer::Copy(Foundation.NSZone)",
			"Intents.INRestaurantOffer::EncodeTo(Foundation.NSCoder)",
			"Intents.INRestaurantReservation::.ctor(Foundation.NSCoder)",
			"Intents.INRestaurantReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Foundation.NSUrl,Intents.INDateComponentsRange,System.Nullable`1<System.Int32>,CoreLocation.CLPlacemark)",
			"Intents.INRestaurantReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Intents.INDateComponentsRange,System.Nullable`1<System.Int32>,CoreLocation.CLPlacemark)",
			"Intents.INRestaurantReservation::Copy(Foundation.NSZone)",
			"Intents.INRestaurantReservation::EncodeTo(Foundation.NSCoder)",
			"Intents.INRestaurantReservationBooking::.ctor(Foundation.NSCoder)",
			"Intents.INRestaurantReservationBooking::.ctor(Intents.INRestaurant,Foundation.NSDate,System.UIntPtr,System.String)",
			"Intents.INRestaurantReservationBooking::Copy(Foundation.NSZone)",
			"Intents.INRestaurantReservationBooking::EncodeTo(Foundation.NSCoder)",
			"Intents.INRestaurantReservationBooking::set_BookingDate(Foundation.NSDate)",
			"Intents.INRestaurantReservationBooking::set_Restaurant(Intents.INRestaurant)",
			"Intents.INRestaurantReservationUserBooking::.ctor(Foundation.NSCoder)",
			"Intents.INRestaurantReservationUserBooking::.ctor(Intents.INRestaurant,Foundation.NSDate,System.UIntPtr,System.String)",
			"Intents.INRestaurantReservationUserBooking::.ctor(Intents.INRestaurant,Foundation.NSDate,System.UIntPtr,System.String,Intents.INRestaurantGuest,Intents.INRestaurantReservationUserBookingStatus,Foundation.NSDate)",
			"Intents.INRestaurantReservationUserBooking::Copy(Foundation.NSZone)",
			"Intents.INRestaurantReservationUserBooking::set_DateStatusModified(Foundation.NSDate)",
			"Intents.INRestaurantReservationUserBooking::set_Guest(Intents.INRestaurantGuest)",
			"Intents.INRestaurantReservationUserBooking::set_SelectedOffer(Intents.INRestaurantOffer)",
			"Intents.INRestaurantResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INRestaurantResolutionResult::GetConfirmationRequired(Intents.INRestaurant)",
			"Intents.INRestaurantResolutionResult::GetSuccess(Intents.INRestaurant)",
			"Intents.INResumeWorkoutIntent::.ctor(Foundation.NSCoder)",
			"Intents.INResumeWorkoutIntent::.ctor(Intents.INSpeakableString)",
			"Intents.INResumeWorkoutIntentHandling_Extensions::Confirm(Intents.IINResumeWorkoutIntentHandling,Intents.INResumeWorkoutIntent,System.Action`1<Intents.INResumeWorkoutIntentResponse>)",
			"Intents.INResumeWorkoutIntentHandling_Extensions::ResolveWorkoutName(Intents.IINResumeWorkoutIntentHandling,Intents.INResumeWorkoutIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INResumeWorkoutIntentHandlingWrapper::HandleResumeWorkout(Intents.INResumeWorkoutIntent,System.Action`1<Intents.INResumeWorkoutIntentResponse>)",
			"Intents.INResumeWorkoutIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INResumeWorkoutIntentResponse::.ctor(Intents.INResumeWorkoutIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INRideCompletionStatus::.ctor(Foundation.NSCoder)",
			"Intents.INRideCompletionStatus::Copy(Foundation.NSZone)",
			"Intents.INRideCompletionStatus::EncodeTo(Foundation.NSCoder)",
			"Intents.INRideCompletionStatus::GetOutstandingPaymentAmount(Intents.INCurrencyAmount)",
			"Intents.INRideCompletionStatus::GetSettledPaymentAmount(Intents.INCurrencyAmount)",
			"Intents.INRideCompletionStatus::set_CompletionUserActivity(Foundation.NSUserActivity)",
			"Intents.INRideCompletionStatus::set_DefaultTippingOptions(Foundation.NSSet`1<Intents.INCurrencyAmount>)",
			"Intents.INRideDriver::.ctor(Foundation.NSCoder)",
			"Intents.INRideDriver::.ctor(Intents.INPersonHandle,Foundation.NSPersonNameComponents,System.String,Intents.INImage,System.String,System.String)",
			"Intents.INRideDriver::.ctor(System.String,Foundation.NSPersonNameComponents,System.String,Intents.INImage,System.String)",
			"Intents.INRideDriver::Copy(Foundation.NSZone)",
			"Intents.INRideDriver::EncodeTo(Foundation.NSCoder)",
			"Intents.INRideFareLineItem::.ctor(Foundation.NSCoder)",
			"Intents.INRideFareLineItem::.ctor(System.String,Foundation.NSDecimalNumber,System.String)",
			"Intents.INRideFareLineItem::Copy(Foundation.NSZone)",
			"Intents.INRideFareLineItem::EncodeTo(Foundation.NSCoder)",
			"Intents.INRideOption::.ctor(Foundation.NSCoder)",
			"Intents.INRideOption::.ctor(System.String,Foundation.NSDate)",
			"Intents.INRideOption::Copy(Foundation.NSZone)",
			"Intents.INRideOption::EncodeTo(Foundation.NSCoder)",
			"Intents.INRideOption::set__UsesMeteredFare(Foundation.NSNumber)",
			"Intents.INRideOption::set_EstimatedPickupDate(Foundation.NSDate)",
			"Intents.INRideOption::set_PriceRange(Intents.INPriceRange)",
			"Intents.INRideOption::set_SpecialPricingBadgeImage(Intents.INImage)",
			"Intents.INRideOption::set_UserActivityForBookingInApplication(Foundation.NSUserActivity)",
			"Intents.INRidePartySizeOption::.ctor(Foundation.NSCoder)",
			"Intents.INRidePartySizeOption::.ctor(Foundation.NSRange,System.String,Intents.INPriceRange)",
			"Intents.INRidePartySizeOption::Copy(Foundation.NSZone)",
			"Intents.INRidePartySizeOption::EncodeTo(Foundation.NSCoder)",
			"Intents.INRidesharingDomainHandlingWrapper::HandleCancelRide(Intents.INCancelRideIntent,System.Action`1<Intents.INCancelRideIntentResponse>)",
			"Intents.INRidesharingDomainHandlingWrapper::HandleListRideOptions(Intents.INListRideOptionsIntent,System.Action`1<Intents.INListRideOptionsIntentResponse>)",
			"Intents.INRidesharingDomainHandlingWrapper::HandleRequestRide(Intents.INRequestRideIntent,System.Action`1<Intents.INRequestRideIntentResponse>)",
			"Intents.INRidesharingDomainHandlingWrapper::HandleRideStatus(Intents.INGetRideStatusIntent,System.Action`1<Intents.INGetRideStatusIntentResponse>)",
			"Intents.INRidesharingDomainHandlingWrapper::HandleSendRideFeedback(Intents.INSendRideFeedbackIntent,System.Action`1<Intents.INSendRideFeedbackIntentResponse>)",
			"Intents.INRidesharingDomainHandlingWrapper::StartSendingUpdates(Intents.INGetRideStatusIntent,Intents.IINGetRideStatusIntentResponseObserver)",
			"Intents.INRidesharingDomainHandlingWrapper::StopSendingUpdates(Intents.INGetRideStatusIntent)",
			"Intents.INRideStatus::.ctor(Foundation.NSCoder)",
			"Intents.INRideStatus::Copy(Foundation.NSZone)",
			"Intents.INRideStatus::EncodeTo(Foundation.NSCoder)",
			"Intents.INRideStatus::set_CompletionStatus(Intents.INRideCompletionStatus)",
			"Intents.INRideStatus::set_Driver(Intents.INRideDriver)",
			"Intents.INRideStatus::set_DropOffLocation(CoreLocation.CLPlacemark)",
			"Intents.INRideStatus::set_EstimatedDropOffDate(Foundation.NSDate)",
			"Intents.INRideStatus::set_EstimatedPickupDate(Foundation.NSDate)",
			"Intents.INRideStatus::set_EstimatedPickupEndDate(Foundation.NSDate)",
			"Intents.INRideStatus::set_PickupLocation(CoreLocation.CLPlacemark)",
			"Intents.INRideStatus::set_RideOption(Intents.INRideOption)",
			"Intents.INRideStatus::set_ScheduledPickupTime(Intents.INDateComponentsRange)",
			"Intents.INRideStatus::set_UserActivityForCancelingInApplication(Foundation.NSUserActivity)",
			"Intents.INRideStatus::set_Vehicle(Intents.INRideVehicle)",
			"Intents.INRideVehicle::.ctor(Foundation.NSCoder)",
			"Intents.INRideVehicle::Copy(Foundation.NSZone)",
			"Intents.INRideVehicle::EncodeTo(Foundation.NSCoder)",
			"Intents.INRideVehicle::set_Location(CoreLocation.CLLocation)",
			"Intents.INRideVehicle::set_MapAnnotationImage(Intents.INImage)",
			"Intents.INSaveProfileInCarIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSaveProfileInCarIntent::InitWithProfileNumberLabel(Foundation.NSNumber,System.String)",
			"Intents.INSaveProfileInCarIntent::InitWithProfileNumberName(Foundation.NSNumber,System.String)",
			"Intents.INSaveProfileInCarIntentHandling_Extensions::Confirm(Intents.IINSaveProfileInCarIntentHandling,Intents.INSaveProfileInCarIntent,System.Action`1<Intents.INSaveProfileInCarIntentResponse>)",
			"Intents.INSaveProfileInCarIntentHandling_Extensions::ResolveProfileName(Intents.IINSaveProfileInCarIntentHandling,Intents.INSaveProfileInCarIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INSaveProfileInCarIntentHandling_Extensions::ResolveProfileNumber(Intents.IINSaveProfileInCarIntentHandling,Intents.INSaveProfileInCarIntent,System.Action`1<Intents.INIntegerResolutionResult>)",
			"Intents.INSaveProfileInCarIntentHandlingWrapper::HandleSaveProfileInCar(Intents.INSaveProfileInCarIntent,System.Action`1<Intents.INSaveProfileInCarIntentResponse>)",
			"Intents.INSaveProfileInCarIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSaveProfileInCarIntentResponse::.ctor(Intents.INSaveProfileInCarIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSearchCallHistoryIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSearchCallHistoryIntent::.ctor(Intents.INCallRecordType,Intents.INDateComponentsRange,Intents.INPerson,Intents.INCallCapabilityOptions)",
			"Intents.INSearchCallHistoryIntent::.ctor(Intents.INDateComponentsRange,Intents.INPerson,Intents.INCallCapabilityOptions,Intents.INCallRecordTypeOptions,Foundation.NSNumber)",
			"Intents.INSearchCallHistoryIntentHandling_Extensions::Confirm(Intents.IINSearchCallHistoryIntentHandling,Intents.INSearchCallHistoryIntent,System.Action`1<Intents.INSearchCallHistoryIntentResponse>)",
			"Intents.INSearchCallHistoryIntentHandling_Extensions::ResolveCallType(Intents.IINSearchCallHistoryIntentHandling,Intents.INSearchCallHistoryIntent,System.Action`1<Intents.INCallRecordTypeResolutionResult>)",
			"Intents.INSearchCallHistoryIntentHandling_Extensions::ResolveCallTypes(Intents.IINSearchCallHistoryIntentHandling,Intents.INSearchCallHistoryIntent,System.Action`1<Intents.INCallRecordTypeOptionsResolutionResult>)",
			"Intents.INSearchCallHistoryIntentHandling_Extensions::ResolveDateCreated(Intents.IINSearchCallHistoryIntentHandling,Intents.INSearchCallHistoryIntent,System.Action`1<Intents.INDateComponentsRangeResolutionResult>)",
			"Intents.INSearchCallHistoryIntentHandling_Extensions::ResolveRecipient(Intents.IINSearchCallHistoryIntentHandling,Intents.INSearchCallHistoryIntent,System.Action`1<Intents.INPersonResolutionResult>)",
			"Intents.INSearchCallHistoryIntentHandling_Extensions::ResolveUnseen(Intents.IINSearchCallHistoryIntentHandling,Intents.INSearchCallHistoryIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INSearchCallHistoryIntentHandlingWrapper::HandleSearchCallHistory(Intents.INSearchCallHistoryIntent,System.Action`1<Intents.INSearchCallHistoryIntentResponse>)",
			"Intents.INSearchCallHistoryIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSearchCallHistoryIntentResponse::.ctor(Intents.INSearchCallHistoryIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSearchForAccountsIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSearchForAccountsIntent::.ctor(Intents.INSpeakableString,Intents.INAccountType,Intents.INSpeakableString,Intents.INBalanceType)",
			"Intents.INSearchForAccountsIntentHandling_Extensions::Confirm(Intents.IINSearchForAccountsIntentHandling,Intents.INSearchForAccountsIntent,System.Action`1<Intents.INSearchForAccountsIntentResponse>)",
			"Intents.INSearchForAccountsIntentHandling_Extensions::ResolveAccountNickname(Intents.IINSearchForAccountsIntentHandling,Intents.INSearchForAccountsIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INSearchForAccountsIntentHandling_Extensions::ResolveAccountType(Intents.IINSearchForAccountsIntentHandling,Intents.INSearchForAccountsIntent,System.Action`1<Intents.INAccountTypeResolutionResult>)",
			"Intents.INSearchForAccountsIntentHandling_Extensions::ResolveOrganizationName(Intents.IINSearchForAccountsIntentHandling,Intents.INSearchForAccountsIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INSearchForAccountsIntentHandling_Extensions::ResolveRequestedBalanceType(Intents.IINSearchForAccountsIntentHandling,Intents.INSearchForAccountsIntent,System.Action`1<Intents.INBalanceTypeResolutionResult>)",
			"Intents.INSearchForAccountsIntentHandlingWrapper::HandleSearchForAccounts(Intents.INSearchForAccountsIntent,System.Action`1<Intents.INSearchForAccountsIntentResponse>)",
			"Intents.INSearchForAccountsIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSearchForAccountsIntentResponse::.ctor(Intents.INSearchForAccountsIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSearchForBillsIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSearchForBillsIntent::.ctor(Intents.INBillPayee,Intents.INDateComponentsRange,Intents.INBillType,Intents.INPaymentStatus,Intents.INDateComponentsRange)",
			"Intents.INSearchForBillsIntentHandling_Extensions::Confirm(Intents.IINSearchForBillsIntentHandling,Intents.INSearchForBillsIntent,System.Action`1<Intents.INSearchForBillsIntentResponse>)",
			"Intents.INSearchForBillsIntentHandling_Extensions::ResolveBillPayee(Intents.IINSearchForBillsIntentHandling,Intents.INSearchForBillsIntent,System.Action`1<Intents.INBillPayeeResolutionResult>)",
			"Intents.INSearchForBillsIntentHandling_Extensions::ResolveBillType(Intents.IINSearchForBillsIntentHandling,Intents.INSearchForBillsIntent,System.Action`1<Intents.INBillTypeResolutionResult>)",
			"Intents.INSearchForBillsIntentHandling_Extensions::ResolveDueDateRange(Intents.IINSearchForBillsIntentHandling,Intents.INSearchForBillsIntent,System.Action`1<Intents.INDateComponentsRangeResolutionResult>)",
			"Intents.INSearchForBillsIntentHandling_Extensions::ResolvePaymentDateRange(Intents.IINSearchForBillsIntentHandling,Intents.INSearchForBillsIntent,System.Action`1<Intents.INDateComponentsRangeResolutionResult>)",
			"Intents.INSearchForBillsIntentHandling_Extensions::ResolveStatus(Intents.IINSearchForBillsIntentHandling,Intents.INSearchForBillsIntent,System.Action`1<Intents.INPaymentStatusResolutionResult>)",
			"Intents.INSearchForBillsIntentHandlingWrapper::HandleSearch(Intents.INSearchForBillsIntent,System.Action`1<Intents.INSearchForBillsIntentResponse>)",
			"Intents.INSearchForBillsIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSearchForBillsIntentResponse::.ctor(Intents.INSearchForBillsIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSearchForMediaIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSearchForMediaIntent::.ctor(Intents.INMediaItem[],Intents.INMediaSearch)",
			"Intents.INSearchForMediaIntentHandling_Extensions::Confirm(Intents.IINSearchForMediaIntentHandling,Intents.INSearchForMediaIntent,System.Action`1<Intents.INSearchForMediaIntentResponse>)",
			"Intents.INSearchForMediaIntentHandling_Extensions::ResolveMediaItems(Intents.IINSearchForMediaIntentHandling,Intents.INSearchForMediaIntent,System.Action`1<Intents.INSearchForMediaMediaItemResolutionResult[]>)",
			"Intents.INSearchForMediaIntentHandlingWrapper::HandleSearch(Intents.INSearchForMediaIntent,System.Action`1<Intents.INSearchForMediaIntentResponse>)",
			"Intents.INSearchForMediaIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSearchForMediaIntentResponse::.ctor(Intents.INSearchForMediaIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSearchForMediaMediaItemResolutionResult::.ctor(Intents.INMediaItemResolutionResult)",
			"Intents.INSearchForMediaMediaItemResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INSearchForMediaMediaItemResolutionResult::GetConfirmationRequired(Intents.INMediaItem)",
			"Intents.INSearchForMediaMediaItemResolutionResult::GetSuccess(Intents.INMediaItem)",
			"Intents.INSearchForMessagesIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSearchForMessagesIntent::.ctor(Intents.INPerson[],Intents.INPerson[],System.String[],Intents.INMessageAttributeOptions,Intents.INDateComponentsRange,System.String[],System.String[],Intents.INSpeakableString[])",
			"Intents.INSearchForMessagesIntent::.ctor(Intents.INPerson[],Intents.INPerson[],System.String[],Intents.INMessageAttributeOptions,Intents.INDateComponentsRange,System.String[],System.String[],Intents.INSpeakableString[],System.String[])",
			"Intents.INSearchForMessagesIntent::.ctor(Intents.INPerson[],Intents.INPerson[],System.String[],Intents.INMessageAttributeOptions,Intents.INDateComponentsRange,System.String[],System.String[],System.String[])",
			"Intents.INSearchForMessagesIntentHandling_Extensions::Confirm(Intents.IINSearchForMessagesIntentHandling,Intents.INSearchForMessagesIntent,System.Action`1<Intents.INSearchForMessagesIntentResponse>)",
			"Intents.INSearchForMessagesIntentHandling_Extensions::ResolveAttributes(Intents.IINSearchForMessagesIntentHandling,Intents.INSearchForMessagesIntent,System.Action`1<Intents.INMessageAttributeOptionsResolutionResult>)",
			"Intents.INSearchForMessagesIntentHandling_Extensions::ResolveDateTimeRange(Intents.IINSearchForMessagesIntentHandling,Intents.INSearchForMessagesIntent,System.Action`1<Intents.INDateComponentsRangeResolutionResult>)",
			"Intents.INSearchForMessagesIntentHandling_Extensions::ResolveGroupNames(Intents.IINSearchForMessagesIntentHandling,Intents.INSearchForMessagesIntent,System.Action`1<Intents.INStringResolutionResult[]>)",
			"Intents.INSearchForMessagesIntentHandling_Extensions::ResolveRecipients(Intents.IINSearchForMessagesIntentHandling,Intents.INSearchForMessagesIntent,System.Action`1<Intents.INPersonResolutionResult[]>)",
			"Intents.INSearchForMessagesIntentHandling_Extensions::ResolveSenders(Intents.IINSearchForMessagesIntentHandling,Intents.INSearchForMessagesIntent,System.Action`1<Intents.INPersonResolutionResult[]>)",
			"Intents.INSearchForMessagesIntentHandling_Extensions::ResolveSpeakableGroupNames(Intents.IINSearchForMessagesIntentHandling,Intents.INSearchForMessagesIntent,System.Action`1<Intents.INSpeakableStringResolutionResult[]>)",
			"Intents.INSearchForMessagesIntentHandlingWrapper::HandleSearchForMessages(Intents.INSearchForMessagesIntent,System.Action`1<Intents.INSearchForMessagesIntentResponse>)",
			"Intents.INSearchForMessagesIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSearchForMessagesIntentResponse::.ctor(Intents.INSearchForMessagesIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSearchForNotebookItemsIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSearchForNotebookItemsIntent::.ctor(Intents.INSpeakableString,System.String,Intents.INNotebookItemType,Intents.INTaskStatus,CoreLocation.CLPlacemark,Intents.INLocationSearchType,Intents.INDateComponentsRange,Intents.INDateSearchType)",
			"Intents.INSearchForNotebookItemsIntent::.ctor(Intents.INSpeakableString,System.String,Intents.INNotebookItemType,Intents.INTaskStatus,CoreLocation.CLPlacemark,Intents.INLocationSearchType,Intents.INDateComponentsRange,Intents.INDateSearchType,Intents.INTemporalEventTriggerTypeOptions,Intents.INTaskPriority,System.String)",
			"Intents.INSearchForNotebookItemsIntent::.ctor(Intents.INSpeakableString,System.String,Intents.INNotebookItemType,Intents.INTaskStatus,CoreLocation.CLPlacemark,Intents.INLocationSearchType,Intents.INDateComponentsRange,Intents.INDateSearchType,System.String)",
			"Intents.INSearchForNotebookItemsIntentHandling_Extensions::Confirm(Intents.IINSearchForNotebookItemsIntentHandling,Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INSearchForNotebookItemsIntentResponse>)",
			"Intents.INSearchForNotebookItemsIntentHandling_Extensions::ResolveContent(Intents.IINSearchForNotebookItemsIntentHandling,Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INSearchForNotebookItemsIntentHandling_Extensions::ResolveDateSearchType(Intents.IINSearchForNotebookItemsIntentHandling,Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INDateSearchTypeResolutionResult>)",
			"Intents.INSearchForNotebookItemsIntentHandling_Extensions::ResolveDateTime(Intents.IINSearchForNotebookItemsIntentHandling,Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INDateComponentsRangeResolutionResult>)",
			"Intents.INSearchForNotebookItemsIntentHandling_Extensions::ResolveItemType(Intents.IINSearchForNotebookItemsIntentHandling,Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INNotebookItemTypeResolutionResult>)",
			"Intents.INSearchForNotebookItemsIntentHandling_Extensions::ResolveLocation(Intents.IINSearchForNotebookItemsIntentHandling,Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INPlacemarkResolutionResult>)",
			"Intents.INSearchForNotebookItemsIntentHandling_Extensions::ResolveLocationSearchType(Intents.IINSearchForNotebookItemsIntentHandling,Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INLocationSearchTypeResolutionResult>)",
			"Intents.INSearchForNotebookItemsIntentHandling_Extensions::ResolveStatus(Intents.IINSearchForNotebookItemsIntentHandling,Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INTaskStatusResolutionResult>)",
			"Intents.INSearchForNotebookItemsIntentHandling_Extensions::ResolveTaskPriority(Intents.IINSearchForNotebookItemsIntentHandling,Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INTaskPriorityResolutionResult>)",
			"Intents.INSearchForNotebookItemsIntentHandling_Extensions::ResolveTemporalEventTriggerTypes(Intents.IINSearchForNotebookItemsIntentHandling,Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INTemporalEventTriggerTypeOptionsResolutionResult>)",
			"Intents.INSearchForNotebookItemsIntentHandling_Extensions::ResolveTitle(Intents.IINSearchForNotebookItemsIntentHandling,Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INSearchForNotebookItemsIntentHandlingWrapper::HandleSearchForNotebookItems(Intents.INSearchForNotebookItemsIntent,System.Action`1<Intents.INSearchForNotebookItemsIntentResponse>)",
			"Intents.INSearchForNotebookItemsIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSearchForNotebookItemsIntentResponse::.ctor(Intents.INSearchForNotebookItemsIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSearchForPhotosIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSearchForPhotosIntent::.ctor(Intents.INDateComponentsRange,CoreLocation.CLPlacemark,System.String,System.String[],Intents.INPhotoAttributeOptions,Intents.INPhotoAttributeOptions,Intents.INPerson[])",
			"Intents.INSearchForPhotosIntentHandling_Extensions::Confirm(Intents.IINSearchForPhotosIntentHandling,Intents.INSearchForPhotosIntent,System.Action`1<Intents.INSearchForPhotosIntentResponse>)",
			"Intents.INSearchForPhotosIntentHandling_Extensions::ResolveAlbumName(Intents.IINSearchForPhotosIntentHandling,Intents.INSearchForPhotosIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INSearchForPhotosIntentHandling_Extensions::ResolveDateCreated(Intents.IINSearchForPhotosIntentHandling,Intents.INSearchForPhotosIntent,System.Action`1<Intents.INDateComponentsRangeResolutionResult>)",
			"Intents.INSearchForPhotosIntentHandling_Extensions::ResolveLocationCreated(Intents.IINSearchForPhotosIntentHandling,Intents.INSearchForPhotosIntent,System.Action`1<Intents.INPlacemarkResolutionResult>)",
			"Intents.INSearchForPhotosIntentHandling_Extensions::ResolvePeopleInPhoto(Intents.IINSearchForPhotosIntentHandling,Intents.INSearchForPhotosIntent,System.Action`1<Intents.INPersonResolutionResult[]>)",
			"Intents.INSearchForPhotosIntentHandling_Extensions::ResolveSearchTerms(Intents.IINSearchForPhotosIntentHandling,Intents.INSearchForPhotosIntent,System.Action`1<Intents.INStringResolutionResult[]>)",
			"Intents.INSearchForPhotosIntentHandlingWrapper::HandleSearchForPhotos(Intents.INSearchForPhotosIntent,System.Action`1<Intents.INSearchForPhotosIntentResponse>)",
			"Intents.INSearchForPhotosIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSearchForPhotosIntentResponse::.ctor(Intents.INSearchForPhotosIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSearchForPhotosIntentResponse::set_SearchResultsCount(Foundation.NSNumber)",
			"Intents.INSeat::.ctor(Foundation.NSCoder)",
			"Intents.INSeat::Copy(Foundation.NSZone)",
			"Intents.INSeat::EncodeTo(Foundation.NSCoder)",
			"Intents.INSendMessageAttachment::Create(Intents.INFile)",
			"Intents.INSendMessageIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSendMessageIntent::.ctor(Intents.INPerson[],Intents.INOutgoingMessageType,System.String,Intents.INSpeakableString,System.String,System.String,Intents.INPerson,Intents.INSendMessageAttachment[])",
			"Intents.INSendMessageIntent::.ctor(Intents.INPerson[],System.String,Intents.INSpeakableString,System.String,System.String,Intents.INPerson)",
			"Intents.INSendMessageIntent::.ctor(Intents.INPerson[],System.String,System.String,System.String,Intents.INPerson)",
			"Intents.INSendMessageIntentDonationMetadata::.ctor(Foundation.NSCoder)",
			"Intents.INSendMessageIntentHandling_Extensions::Confirm(Intents.IINSendMessageIntentHandling,Intents.INSendMessageIntent,System.Action`1<Intents.INSendMessageIntentResponse>)",
			"Intents.INSendMessageIntentHandling_Extensions::ResolveContent(Intents.IINSendMessageIntentHandling,Intents.INSendMessageIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INSendMessageIntentHandling_Extensions::ResolveGroupName(Intents.IINSendMessageIntentHandling,Intents.INSendMessageIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INSendMessageIntentHandling_Extensions::ResolveOutgoingMessageType(Intents.IINSendMessageIntentHandling,Intents.INSendMessageIntent,System.Action`1<Intents.INOutgoingMessageTypeResolutionResult>)",
			"Intents.INSendMessageIntentHandling_Extensions::ResolveRecipients(Intents.IINSendMessageIntentHandling,Intents.INSendMessageIntent,System.Action`1<Intents.INPersonResolutionResult[]>)",
			"Intents.INSendMessageIntentHandling_Extensions::ResolveRecipients(Intents.IINSendMessageIntentHandling,Intents.INSendMessageIntent,System.Action`1<Intents.INSendMessageRecipientResolutionResult[]>)",
			"Intents.INSendMessageIntentHandling_Extensions::ResolveSpeakableGroupName(Intents.IINSendMessageIntentHandling,Intents.INSendMessageIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INSendMessageIntentHandlingWrapper::HandleSendMessage(Intents.INSendMessageIntent,System.Action`1<Intents.INSendMessageIntentResponse>)",
			"Intents.INSendMessageIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSendMessageIntentResponse::.ctor(Intents.INSendMessageIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSendMessageIntentResponse::set_SentMessage(Intents.INMessage)",
			"Intents.INSendMessageRecipientResolutionResult::.ctor(Intents.INPersonResolutionResult)",
			"Intents.INSendMessageRecipientResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INSendMessageRecipientResolutionResult::GetConfirmationRequired(Intents.INPerson)",
			"Intents.INSendMessageRecipientResolutionResult::GetSuccess(Intents.INPerson)",
			"Intents.INSendPaymentCurrencyAmountResolutionResult::.ctor(Intents.INCurrencyAmountResolutionResult)",
			"Intents.INSendPaymentCurrencyAmountResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INSendPaymentIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSendPaymentIntent::.ctor(Intents.INPerson,Intents.INCurrencyAmount,System.String)",
			"Intents.INSendPaymentIntentHandling_Extensions::Confirm(Intents.IINSendPaymentIntentHandling,Intents.INSendPaymentIntent,System.Action`1<Intents.INSendPaymentIntentResponse>)",
			"Intents.INSendPaymentIntentHandling_Extensions::ResolveCurrencyAmount(Intents.IINSendPaymentIntentHandling,Intents.INSendPaymentIntent,System.Action`1<Intents.INCurrencyAmountResolutionResult>)",
			"Intents.INSendPaymentIntentHandling_Extensions::ResolveCurrencyAmount(Intents.IINSendPaymentIntentHandling,Intents.INSendPaymentIntent,System.Action`1<Intents.INSendPaymentCurrencyAmountResolutionResult>)",
			"Intents.INSendPaymentIntentHandling_Extensions::ResolveNote(Intents.IINSendPaymentIntentHandling,Intents.INSendPaymentIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INSendPaymentIntentHandling_Extensions::ResolvePayee(Intents.IINSendPaymentIntentHandling,Intents.INSendPaymentIntent,System.Action`1<Intents.INPersonResolutionResult>)",
			"Intents.INSendPaymentIntentHandling_Extensions::ResolvePayee(Intents.IINSendPaymentIntentHandling,Intents.INSendPaymentIntent,System.Action`1<Intents.INSendPaymentPayeeResolutionResult>)",
			"Intents.INSendPaymentIntentHandlingWrapper::HandleSendPayment(Intents.INSendPaymentIntent,System.Action`1<Intents.INSendPaymentIntentResponse>)",
			"Intents.INSendPaymentIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSendPaymentIntentResponse::.ctor(Intents.INSendPaymentIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSendPaymentIntentResponse::set_PaymentRecord(Intents.INPaymentRecord)",
			"Intents.INSendPaymentPayeeResolutionResult::.ctor(Intents.INPersonResolutionResult)",
			"Intents.INSendPaymentPayeeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INSendPaymentPayeeResolutionResult::GetConfirmationRequired(Intents.INPerson)",
			"Intents.INSendPaymentPayeeResolutionResult::GetSuccess(Intents.INPerson)",
			"Intents.INSendRideFeedbackIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSendRideFeedbackIntent::set_Rating(Foundation.NSNumber)",
			"Intents.INSendRideFeedbackIntent::set_Tip(Intents.INCurrencyAmount)",
			"Intents.INSendRideFeedbackIntentHandling_Extensions::Confirm(Intents.IINSendRideFeedbackIntentHandling,Intents.INSendRideFeedbackIntent,System.Action`1<Intents.INSendRideFeedbackIntentResponse>)",
			"Intents.INSendRideFeedbackIntentHandlingWrapper::HandleSendRideFeedback(Intents.INSendRideFeedbackIntent,System.Action`1<Intents.INSendRideFeedbackIntentResponse>)",
			"Intents.INSendRideFeedbackIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSendRideFeedbackIntentResponse::.ctor(Intents.INSendRideFeedbackIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSetAudioSourceInCarIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSetAudioSourceInCarIntentHandling_Extensions::Confirm(Intents.IINSetAudioSourceInCarIntentHandling,Intents.INSetAudioSourceInCarIntent,System.Action`1<Intents.INSetAudioSourceInCarIntentResponse>)",
			"Intents.INSetAudioSourceInCarIntentHandling_Extensions::ResolveAudioSource(Intents.IINSetAudioSourceInCarIntentHandling,Intents.INSetAudioSourceInCarIntent,System.Action`1<Intents.INCarAudioSourceResolutionResult>)",
			"Intents.INSetAudioSourceInCarIntentHandling_Extensions::ResolveRelativeAudioSourceReference(Intents.IINSetAudioSourceInCarIntentHandling,Intents.INSetAudioSourceInCarIntent,System.Action`1<Intents.INRelativeReferenceResolutionResult>)",
			"Intents.INSetAudioSourceInCarIntentHandlingWrapper::HandleSetAudioSourceInCar(Intents.INSetAudioSourceInCarIntent,System.Action`1<Intents.INSetAudioSourceInCarIntentResponse>)",
			"Intents.INSetAudioSourceInCarIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSetAudioSourceInCarIntentResponse::.ctor(Intents.INSetAudioSourceInCarIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSetCarLockStatusIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSetCarLockStatusIntent::.ctor(Foundation.NSNumber,Intents.INSpeakableString)",
			"Intents.INSetCarLockStatusIntentHandling_Extensions::Confirm(Intents.IINSetCarLockStatusIntentHandling,Intents.INSetCarLockStatusIntent,System.Action`1<Intents.INSetCarLockStatusIntentResponse>)",
			"Intents.INSetCarLockStatusIntentHandling_Extensions::ResolveCarName(Intents.IINSetCarLockStatusIntentHandling,Intents.INSetCarLockStatusIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INSetCarLockStatusIntentHandling_Extensions::ResolveLocked(Intents.IINSetCarLockStatusIntentHandling,Intents.INSetCarLockStatusIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INSetCarLockStatusIntentHandlingWrapper::HandleSetCarLockStatus(Intents.INSetCarLockStatusIntent,System.Action`1<Intents.INSetCarLockStatusIntentResponse>)",
			"Intents.INSetCarLockStatusIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSetCarLockStatusIntentResponse::.ctor(Intents.INSetCarLockStatusIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSetClimateSettingsInCarIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSetClimateSettingsInCarIntent::.ctor(Foundation.NSNumber,Foundation.NSNumber,Foundation.NSNumber,Foundation.NSNumber,Intents.INCarAirCirculationMode,Foundation.NSNumber,Foundation.NSNumber,Intents.INRelativeSetting,Foundation.NSMeasurement`1<Foundation.NSUnitTemperature>,Intents.INRelativeSetting,Intents.INCarSeat)",
			"Intents.INSetClimateSettingsInCarIntent::.ctor(System.Nullable`1<System.Boolean>,System.Nullable`1<System.Boolean>,System.Nullable`1<System.Boolean>,System.Nullable`1<System.Boolean>,Intents.INCarAirCirculationMode,System.Nullable`1<System.Int32>,System.Nullable`1<System.Double>,Intents.INRelativeSetting,Foundation.NSMeasurement`1<Foundation.NSUnitTemperature>,Intents.INRelativeSetting,Intents.INCarSeat,Intents.INSpeakableString)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::Confirm(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INSetClimateSettingsInCarIntentResponse>)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::ResolveAirCirculationMode(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INCarAirCirculationModeResolutionResult>)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::ResolveCarName(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::ResolveClimateZone(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INCarSeatResolutionResult>)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::ResolveEnableAirConditioner(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::ResolveEnableAutoMode(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::ResolveEnableClimateControl(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::ResolveEnableFan(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::ResolveFanSpeedIndex(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INIntegerResolutionResult>)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::ResolveFanSpeedPercentage(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INDoubleResolutionResult>)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::ResolveRelativeFanSpeedSetting(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INRelativeSettingResolutionResult>)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::ResolveRelativeTemperatureSetting(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INRelativeSettingResolutionResult>)",
			"Intents.INSetClimateSettingsInCarIntentHandling_Extensions::ResolveTemperature(Intents.IINSetClimateSettingsInCarIntentHandling,Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INTemperatureResolutionResult>)",
			"Intents.INSetClimateSettingsInCarIntentHandlingWrapper::HandleSetClimateSettingsInCar(Intents.INSetClimateSettingsInCarIntent,System.Action`1<Intents.INSetClimateSettingsInCarIntentResponse>)",
			"Intents.INSetClimateSettingsInCarIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSetClimateSettingsInCarIntentResponse::.ctor(Intents.INSetClimateSettingsInCarIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSetDefrosterSettingsInCarIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSetDefrosterSettingsInCarIntent::.ctor(Foundation.NSNumber,Intents.INCarDefroster)",
			"Intents.INSetDefrosterSettingsInCarIntent::.ctor(System.Nullable`1<System.Boolean>,Intents.INCarDefroster,Intents.INSpeakableString)",
			"Intents.INSetDefrosterSettingsInCarIntentHandling_Extensions::Confirm(Intents.IINSetDefrosterSettingsInCarIntentHandling,Intents.INSetDefrosterSettingsInCarIntent,System.Action`1<Intents.INSetDefrosterSettingsInCarIntentResponse>)",
			"Intents.INSetDefrosterSettingsInCarIntentHandling_Extensions::ResolveCarName(Intents.IINSetDefrosterSettingsInCarIntentHandling,Intents.INSetDefrosterSettingsInCarIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INSetDefrosterSettingsInCarIntentHandling_Extensions::ResolveDefroster(Intents.IINSetDefrosterSettingsInCarIntentHandling,Intents.INSetDefrosterSettingsInCarIntent,System.Action`1<Intents.INCarDefrosterResolutionResult>)",
			"Intents.INSetDefrosterSettingsInCarIntentHandling_Extensions::ResolveEnable(Intents.IINSetDefrosterSettingsInCarIntentHandling,Intents.INSetDefrosterSettingsInCarIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INSetDefrosterSettingsInCarIntentHandlingWrapper::HandleSetDefrosterSettingsInCar(Intents.INSetDefrosterSettingsInCarIntent,System.Action`1<Intents.INSetDefrosterSettingsInCarIntentResponse>)",
			"Intents.INSetDefrosterSettingsInCarIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSetDefrosterSettingsInCarIntentResponse::.ctor(Intents.INSetDefrosterSettingsInCarIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSetMessageAttributeIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSetMessageAttributeIntentHandling_Extensions::Confirm(Intents.IINSetMessageAttributeIntentHandling,Intents.INSetMessageAttributeIntent,System.Action`1<Intents.INSetMessageAttributeIntentResponse>)",
			"Intents.INSetMessageAttributeIntentHandling_Extensions::ResolveAttribute(Intents.IINSetMessageAttributeIntentHandling,Intents.INSetMessageAttributeIntent,System.Action`1<Intents.INMessageAttributeResolutionResult>)",
			"Intents.INSetMessageAttributeIntentHandlingWrapper::HandleSetMessageAttribute(Intents.INSetMessageAttributeIntent,System.Action`1<Intents.INSetMessageAttributeIntentResponse>)",
			"Intents.INSetMessageAttributeIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSetMessageAttributeIntentResponse::.ctor(Intents.INSetMessageAttributeIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSetProfileInCarIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSetProfileInCarIntent::.ctor(System.Nullable`1<System.Int32>,System.String,System.Nullable`1<System.Boolean>,Intents.INSpeakableString)",
			"Intents.INSetProfileInCarIntent::InitWithProfileNumberLabel(Foundation.NSNumber,System.String,Foundation.NSNumber)",
			"Intents.INSetProfileInCarIntent::InitWithProfileNumberName(Foundation.NSNumber,System.String,Foundation.NSNumber)",
			"Intents.INSetProfileInCarIntentHandling_Extensions::Confirm(Intents.IINSetProfileInCarIntentHandling,Intents.INSetProfileInCarIntent,System.Action`1<Intents.INSetProfileInCarIntentResponse>)",
			"Intents.INSetProfileInCarIntentHandling_Extensions::ResolveCarName(Intents.IINSetProfileInCarIntentHandling,Intents.INSetProfileInCarIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INSetProfileInCarIntentHandling_Extensions::ResolveDefaultProfile(Intents.IINSetProfileInCarIntentHandling,Intents.INSetProfileInCarIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INSetProfileInCarIntentHandling_Extensions::ResolveProfileName(Intents.IINSetProfileInCarIntentHandling,Intents.INSetProfileInCarIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INSetProfileInCarIntentHandling_Extensions::ResolveProfileNumber(Intents.IINSetProfileInCarIntentHandling,Intents.INSetProfileInCarIntent,System.Action`1<Intents.INIntegerResolutionResult>)",
			"Intents.INSetProfileInCarIntentHandlingWrapper::HandleSetProfileInCar(Intents.INSetProfileInCarIntent,System.Action`1<Intents.INSetProfileInCarIntentResponse>)",
			"Intents.INSetProfileInCarIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSetProfileInCarIntentResponse::.ctor(Intents.INSetProfileInCarIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSetRadioStationIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSetRadioStationIntent::.ctor(Intents.INRadioType,Foundation.NSNumber,System.String,System.String,Foundation.NSNumber)",
			"Intents.INSetRadioStationIntentHandling_Extensions::Confirm(Intents.IINSetRadioStationIntentHandling,Intents.INSetRadioStationIntent,System.Action`1<Intents.INSetRadioStationIntentResponse>)",
			"Intents.INSetRadioStationIntentHandling_Extensions::ResolveChannel(Intents.IINSetRadioStationIntentHandling,Intents.INSetRadioStationIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INSetRadioStationIntentHandling_Extensions::ResolveFrequency(Intents.IINSetRadioStationIntentHandling,Intents.INSetRadioStationIntent,System.Action`1<Intents.INDoubleResolutionResult>)",
			"Intents.INSetRadioStationIntentHandling_Extensions::ResolvePresetNumber(Intents.IINSetRadioStationIntentHandling,Intents.INSetRadioStationIntent,System.Action`1<Intents.INIntegerResolutionResult>)",
			"Intents.INSetRadioStationIntentHandling_Extensions::ResolveRadioType(Intents.IINSetRadioStationIntentHandling,Intents.INSetRadioStationIntent,System.Action`1<Intents.INRadioTypeResolutionResult>)",
			"Intents.INSetRadioStationIntentHandling_Extensions::ResolveStationName(Intents.IINSetRadioStationIntentHandling,Intents.INSetRadioStationIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INSetRadioStationIntentHandlingWrapper::HandleSetRadioStation(Intents.INSetRadioStationIntent,System.Action`1<Intents.INSetRadioStationIntentResponse>)",
			"Intents.INSetRadioStationIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSetRadioStationIntentResponse::.ctor(Intents.INSetRadioStationIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSetSeatSettingsInCarIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSetSeatSettingsInCarIntent::.ctor(Foundation.NSNumber,Foundation.NSNumber,Foundation.NSNumber,Intents.INCarSeat,Foundation.NSNumber,Intents.INRelativeSetting)",
			"Intents.INSetSeatSettingsInCarIntent::.ctor(System.Nullable`1<System.Boolean>,System.Nullable`1<System.Boolean>,System.Nullable`1<System.Boolean>,Intents.INCarSeat,System.Nullable`1<System.Int32>,Intents.INRelativeSetting,Intents.INSpeakableString)",
			"Intents.INSetSeatSettingsInCarIntentHandling_Extensions::Confirm(Intents.IINSetSeatSettingsInCarIntentHandling,Intents.INSetSeatSettingsInCarIntent,System.Action`1<Intents.INSetSeatSettingsInCarIntentResponse>)",
			"Intents.INSetSeatSettingsInCarIntentHandling_Extensions::ResolveCarName(Intents.IINSetSeatSettingsInCarIntentHandling,Intents.INSetSeatSettingsInCarIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INSetSeatSettingsInCarIntentHandling_Extensions::ResolveEnableCooling(Intents.IINSetSeatSettingsInCarIntentHandling,Intents.INSetSeatSettingsInCarIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INSetSeatSettingsInCarIntentHandling_Extensions::ResolveEnableHeating(Intents.IINSetSeatSettingsInCarIntentHandling,Intents.INSetSeatSettingsInCarIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INSetSeatSettingsInCarIntentHandling_Extensions::ResolveEnableMassage(Intents.IINSetSeatSettingsInCarIntentHandling,Intents.INSetSeatSettingsInCarIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INSetSeatSettingsInCarIntentHandling_Extensions::ResolveLevel(Intents.IINSetSeatSettingsInCarIntentHandling,Intents.INSetSeatSettingsInCarIntent,System.Action`1<Intents.INIntegerResolutionResult>)",
			"Intents.INSetSeatSettingsInCarIntentHandling_Extensions::ResolveRelativeLevelSetting(Intents.IINSetSeatSettingsInCarIntentHandling,Intents.INSetSeatSettingsInCarIntent,System.Action`1<Intents.INRelativeSettingResolutionResult>)",
			"Intents.INSetSeatSettingsInCarIntentHandling_Extensions::ResolveSeat(Intents.IINSetSeatSettingsInCarIntentHandling,Intents.INSetSeatSettingsInCarIntent,System.Action`1<Intents.INCarSeatResolutionResult>)",
			"Intents.INSetSeatSettingsInCarIntentHandlingWrapper::HandleSetSeatSettingsInCar(Intents.INSetSeatSettingsInCarIntent,System.Action`1<Intents.INSetSeatSettingsInCarIntentResponse>)",
			"Intents.INSetSeatSettingsInCarIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSetSeatSettingsInCarIntentResponse::.ctor(Intents.INSetSeatSettingsInCarIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSetTaskAttributeIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSetTaskAttributeIntent::.ctor(Intents.INTask,Intents.INSpeakableString,Intents.INTaskStatus,Intents.INTaskPriority,Intents.INSpatialEventTrigger,Intents.INTemporalEventTrigger)",
			"Intents.INSetTaskAttributeIntent::.ctor(Intents.INTask,Intents.INTaskStatus,Intents.INSpatialEventTrigger,Intents.INTemporalEventTrigger)",
			"Intents.INSetTaskAttributeIntentHandling_Extensions::Confirm(Intents.IINSetTaskAttributeIntentHandling,Intents.INSetTaskAttributeIntent,System.Action`1<Intents.INSetTaskAttributeIntentResponse>)",
			"Intents.INSetTaskAttributeIntentHandling_Extensions::ResolvePriority(Intents.IINSetTaskAttributeIntentHandling,Intents.INSetTaskAttributeIntent,System.Action`1<Intents.INTaskPriorityResolutionResult>)",
			"Intents.INSetTaskAttributeIntentHandling_Extensions::ResolveSpatialEventTrigger(Intents.IINSetTaskAttributeIntentHandling,Intents.INSetTaskAttributeIntent,System.Action`1<Intents.INSpatialEventTriggerResolutionResult>)",
			"Intents.INSetTaskAttributeIntentHandling_Extensions::ResolveStatus(Intents.IINSetTaskAttributeIntentHandling,Intents.INSetTaskAttributeIntent,System.Action`1<Intents.INTaskStatusResolutionResult>)",
			"Intents.INSetTaskAttributeIntentHandling_Extensions::ResolveTargetTask(Intents.IINSetTaskAttributeIntentHandling,Intents.INSetTaskAttributeIntent,System.Action`1<Intents.INTaskResolutionResult>)",
			"Intents.INSetTaskAttributeIntentHandling_Extensions::ResolveTaskTitle(Intents.IINSetTaskAttributeIntentHandling,Intents.INSetTaskAttributeIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INSetTaskAttributeIntentHandling_Extensions::ResolveTemporalEventTrigger(Intents.IINSetTaskAttributeIntentHandling,Intents.INSetTaskAttributeIntent,System.Action`1<Intents.INSetTaskAttributeTemporalEventTriggerResolutionResult>)",
			"Intents.INSetTaskAttributeIntentHandling_Extensions::ResolveTemporalEventTrigger(Intents.IINSetTaskAttributeIntentHandling,Intents.INSetTaskAttributeIntent,System.Action`1<Intents.INTemporalEventTriggerResolutionResult>)",
			"Intents.INSetTaskAttributeIntentHandlingWrapper::HandleSetTaskAttribute(Intents.INSetTaskAttributeIntent,System.Action`1<Intents.INSetTaskAttributeIntentResponse>)",
			"Intents.INSetTaskAttributeIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSetTaskAttributeIntentResponse::.ctor(Intents.INSetTaskAttributeIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSetTaskAttributeIntentResponse::set_ModifiedTask(Intents.INTask)",
			"Intents.INSetTaskAttributeTemporalEventTriggerResolutionResult::.ctor(Intents.INTemporalEventTriggerResolutionResult)",
			"Intents.INSetTaskAttributeTemporalEventTriggerResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INSetTaskAttributeTemporalEventTriggerResolutionResult::GetConfirmationRequired(Intents.INTemporalEventTrigger)",
			"Intents.INSetTaskAttributeTemporalEventTriggerResolutionResult::GetSuccess(Intents.INTemporalEventTrigger)",
			"Intents.INShareFocusStatusIntent::.ctor(Foundation.NSCoder)",
			"Intents.INShareFocusStatusIntent::.ctor(Intents.INFocusStatus)",
			"Intents.INShareFocusStatusIntentHandling_Extensions::ConfirmShareFocusStatus(Intents.IINShareFocusStatusIntentHandling,Intents.INShareFocusStatusIntent,System.Action`1<Intents.INShareFocusStatusIntentResponse>)",
			"Intents.INShareFocusStatusIntentHandlingWrapper::HandleShareFocusStatus(Intents.INShareFocusStatusIntent,System.Action`1<Intents.INShareFocusStatusIntentResponse>)",
			"Intents.INShareFocusStatusIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INShareFocusStatusIntentResponse::.ctor(Intents.INShareFocusStatusIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INShortcut::.ctor(Foundation.NSCoder)",
			"Intents.INShortcut::.ctor(Foundation.NSUserActivity)",
			"Intents.INShortcut::.ctor(Intents.INIntent)",
			"Intents.INShortcut::Copy(Foundation.NSZone)",
			"Intents.INShortcut::EncodeTo(Foundation.NSCoder)",
			"Intents.INSnoozeTasksIntent::.ctor(Foundation.NSCoder)",
			"Intents.INSnoozeTasksIntent::.ctor(Intents.INTask[],Intents.INDateComponentsRange,System.Nullable`1<System.Boolean>)",
			"Intents.INSnoozeTasksIntentHandling_Extensions::Confirm(Intents.IINSnoozeTasksIntentHandling,Intents.INSnoozeTasksIntent,System.Action`1<Intents.INSnoozeTasksIntentResponse>)",
			"Intents.INSnoozeTasksIntentHandling_Extensions::ResolveNextTriggerTime(Intents.IINSnoozeTasksIntentHandling,Intents.INSnoozeTasksIntent,System.Action`1<Intents.INDateComponentsRangeResolutionResult>)",
			"Intents.INSnoozeTasksIntentHandling_Extensions::ResolveTasks(Intents.IINSnoozeTasksIntentHandling,Intents.INSnoozeTasksIntent,System.Action`1<Intents.INSnoozeTasksTaskResolutionResult[]>)",
			"Intents.INSnoozeTasksIntentHandlingWrapper::HandleSnoozeTasks(Intents.INSnoozeTasksIntent,System.Action`1<Intents.INSnoozeTasksIntentResponse>)",
			"Intents.INSnoozeTasksIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INSnoozeTasksIntentResponse::.ctor(Intents.INSnoozeTasksIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INSnoozeTasksTaskResolutionResult::.ctor(Intents.INTaskResolutionResult)",
			"Intents.INSnoozeTasksTaskResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INSnoozeTasksTaskResolutionResult::GetConfirmationRequired(Intents.INTask)",
			"Intents.INSnoozeTasksTaskResolutionResult::GetSuccess(Intents.INTask)",
			"Intents.INSpatialEventTrigger::.ctor(CoreLocation.CLPlacemark,Intents.INSpatialEvent)",
			"Intents.INSpatialEventTrigger::.ctor(Foundation.NSCoder)",
			"Intents.INSpatialEventTrigger::Copy(Foundation.NSZone)",
			"Intents.INSpatialEventTrigger::EncodeTo(Foundation.NSCoder)",
			"Intents.INSpatialEventTriggerResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INSpatialEventTriggerResolutionResult::GetConfirmationRequired(Intents.INSpatialEventTrigger)",
			"Intents.INSpatialEventTriggerResolutionResult::GetSuccess(Intents.INSpatialEventTrigger)",
			"Intents.INSpeakable_Extensions::GetIdentifier(Intents.IINSpeakable)",
			"Intents.INSpeakableString::.ctor(Foundation.NSCoder)",
			"Intents.INSpeakableString::Copy(Foundation.NSZone)",
			"Intents.INSpeakableString::EncodeTo(Foundation.NSCoder)",
			"Intents.INSpeakableStringResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INSpeakableStringResolutionResult::GetConfirmationRequired(Intents.INSpeakableString)",
			"Intents.INSpeakableStringResolutionResult::GetSuccess(Intents.INSpeakableString)",
			"Intents.INSpeedResolutionResult::GetConfirmationRequired(Foundation.NSMeasurement`1<Foundation.NSUnitSpeed>)",
			"Intents.INSpeedResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INSpeedResolutionResult::GetSuccess(Foundation.NSMeasurement`1<Foundation.NSUnitSpeed>)",
			"Intents.INStartAudioCallIntent::.ctor(Foundation.NSCoder)",
			"Intents.INStartAudioCallIntentHandling_Extensions::Confirm(Intents.IINStartAudioCallIntentHandling,Intents.INStartAudioCallIntent,System.Action`1<Intents.INStartAudioCallIntentResponse>)",
			"Intents.INStartAudioCallIntentHandling_Extensions::ResolveContacts(Intents.IINStartAudioCallIntentHandling,Intents.INStartAudioCallIntent,System.Action`1<Intents.INPersonResolutionResult[]>)",
			"Intents.INStartAudioCallIntentHandling_Extensions::ResolveDestinationType(Intents.IINStartAudioCallIntentHandling,Intents.INStartAudioCallIntent,System.Action`1<Intents.INCallDestinationTypeResolutionResult>)",
			"Intents.INStartAudioCallIntentHandlingWrapper::HandleStartAudioCall(Intents.INStartAudioCallIntent,System.Action`1<Intents.INStartAudioCallIntentResponse>)",
			"Intents.INStartAudioCallIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INStartAudioCallIntentResponse::.ctor(Intents.INStartAudioCallIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INStartCallCallCapabilityResolutionResult::.ctor(Intents.INCallCapabilityResolutionResult)",
			"Intents.INStartCallCallCapabilityResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INStartCallCallRecordToCallBackResolutionResult::.ctor(Intents.INCallRecordResolutionResult)",
			"Intents.INStartCallCallRecordToCallBackResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INStartCallCallRecordToCallBackResolutionResult::GetConfirmationRequired(Intents.INCallRecord)",
			"Intents.INStartCallCallRecordToCallBackResolutionResult::GetSuccess(Intents.INCallRecord)",
			"Intents.INStartCallContactResolutionResult::.ctor(Intents.INPersonResolutionResult)",
			"Intents.INStartCallContactResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INStartCallContactResolutionResult::GetConfirmationRequired(Intents.INPerson)",
			"Intents.INStartCallContactResolutionResult::GetSuccess(Intents.INPerson)",
			"Intents.INStartCallIntent::.ctor(Foundation.NSCoder)",
			"Intents.INStartCallIntent::.ctor(Intents.INCallRecordFilter,Intents.INCallRecord,Intents.INCallAudioRoute,Intents.INCallDestinationType,Intents.INPerson[],Intents.INCallCapability)",
			"Intents.INStartCallIntentHandling_Extensions::Confirm(Intents.IINStartCallIntentHandling,Intents.INStartCallIntent,System.Action`1<Intents.INStartCallIntentResponse>)",
			"Intents.INStartCallIntentHandling_Extensions::ResolveCallCapability(Intents.IINStartCallIntentHandling,Intents.INStartCallIntent,System.Action`1<Intents.INStartCallCallCapabilityResolutionResult>)",
			"Intents.INStartCallIntentHandling_Extensions::ResolveCallRecordToCallBack(Intents.IINStartCallIntentHandling,Intents.INStartCallIntent,System.Action`1<Intents.INCallRecordResolutionResult>)",
			"Intents.INStartCallIntentHandling_Extensions::ResolveContacts(Intents.IINStartCallIntentHandling,Intents.INStartCallIntent,System.Action`1<Foundation.NSArray`1<Intents.INStartCallContactResolutionResult>>)",
			"Intents.INStartCallIntentHandling_Extensions::ResolveDestinationType(Intents.IINStartCallIntentHandling,Intents.INStartCallIntent,System.Action`1<Intents.INCallDestinationTypeResolutionResult>)",
			"Intents.INStartCallIntentHandlingWrapper::HandleStartCall(Intents.INStartCallIntent,System.Action`1<Intents.INStartCallIntentResponse>)",
			"Intents.INStartCallIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INStartCallIntentResponse::.ctor(Intents.INStartCallIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INStartPhotoPlaybackIntent::.ctor(Foundation.NSCoder)",
			"Intents.INStartPhotoPlaybackIntent::.ctor(Intents.INDateComponentsRange,CoreLocation.CLPlacemark,System.String,System.String[],Intents.INPhotoAttributeOptions,Intents.INPhotoAttributeOptions,Intents.INPerson[])",
			"Intents.INStartPhotoPlaybackIntentHandling_Extensions::Confirm(Intents.IINStartPhotoPlaybackIntentHandling,Intents.INStartPhotoPlaybackIntent,System.Action`1<Intents.INStartPhotoPlaybackIntentResponse>)",
			"Intents.INStartPhotoPlaybackIntentHandling_Extensions::ResolveAlbumName(Intents.IINStartPhotoPlaybackIntentHandling,Intents.INStartPhotoPlaybackIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INStartPhotoPlaybackIntentHandling_Extensions::ResolveDateCreated(Intents.IINStartPhotoPlaybackIntentHandling,Intents.INStartPhotoPlaybackIntent,System.Action`1<Intents.INDateComponentsRangeResolutionResult>)",
			"Intents.INStartPhotoPlaybackIntentHandling_Extensions::ResolveLocationCreated(Intents.IINStartPhotoPlaybackIntentHandling,Intents.INStartPhotoPlaybackIntent,System.Action`1<Intents.INPlacemarkResolutionResult>)",
			"Intents.INStartPhotoPlaybackIntentHandling_Extensions::ResolvePeopleInPhoto(Intents.IINStartPhotoPlaybackIntentHandling,Intents.INStartPhotoPlaybackIntent,System.Action`1<Intents.INPersonResolutionResult[]>)",
			"Intents.INStartPhotoPlaybackIntentHandlingWrapper::HandleStartPhotoPlayback(Intents.INStartPhotoPlaybackIntent,System.Action`1<Intents.INStartPhotoPlaybackIntentResponse>)",
			"Intents.INStartPhotoPlaybackIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INStartPhotoPlaybackIntentResponse::.ctor(Intents.INStartPhotoPlaybackIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INStartPhotoPlaybackIntentResponse::set_SearchResultsCount(Foundation.NSNumber)",
			"Intents.INStartVideoCallIntent::.ctor(Foundation.NSCoder)",
			"Intents.INStartVideoCallIntentHandling_Extensions::Confirm(Intents.IINStartVideoCallIntentHandling,Intents.INStartVideoCallIntent,System.Action`1<Intents.INStartVideoCallIntentResponse>)",
			"Intents.INStartVideoCallIntentHandling_Extensions::ResolveContacts(Intents.IINStartVideoCallIntentHandling,Intents.INStartVideoCallIntent,System.Action`1<Intents.INPersonResolutionResult[]>)",
			"Intents.INStartVideoCallIntentHandlingWrapper::HandleStartVideoCall(Intents.INStartVideoCallIntent,System.Action`1<Intents.INStartVideoCallIntentResponse>)",
			"Intents.INStartVideoCallIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INStartVideoCallIntentResponse::.ctor(Intents.INStartVideoCallIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INStartWorkoutIntent::.ctor(Foundation.NSCoder)",
			"Intents.INStartWorkoutIntent::.ctor(Intents.INSpeakableString,Foundation.NSNumber,Intents.INWorkoutGoalUnitType,Intents.INWorkoutLocationType,Foundation.NSNumber)",
			"Intents.INStartWorkoutIntentHandling_Extensions::Confirm(Intents.IINStartWorkoutIntentHandling,Intents.INStartWorkoutIntent,System.Action`1<Intents.INStartWorkoutIntentResponse>)",
			"Intents.INStartWorkoutIntentHandling_Extensions::ResolveGoalValue(Intents.IINStartWorkoutIntentHandling,Intents.INStartWorkoutIntent,System.Action`1<Intents.INDoubleResolutionResult>)",
			"Intents.INStartWorkoutIntentHandling_Extensions::ResolveIsOpenEnded(Intents.IINStartWorkoutIntentHandling,Intents.INStartWorkoutIntent,System.Action`1<Intents.INBooleanResolutionResult>)",
			"Intents.INStartWorkoutIntentHandling_Extensions::ResolveWorkoutGoalUnitType(Intents.IINStartWorkoutIntentHandling,Intents.INStartWorkoutIntent,System.Action`1<Intents.INWorkoutGoalUnitTypeResolutionResult>)",
			"Intents.INStartWorkoutIntentHandling_Extensions::ResolveWorkoutLocationType(Intents.IINStartWorkoutIntentHandling,Intents.INStartWorkoutIntent,System.Action`1<Intents.INWorkoutLocationTypeResolutionResult>)",
			"Intents.INStartWorkoutIntentHandling_Extensions::ResolveWorkoutName(Intents.IINStartWorkoutIntentHandling,Intents.INStartWorkoutIntent,System.Action`1<Intents.INSpeakableStringResolutionResult>)",
			"Intents.INStartWorkoutIntentHandlingWrapper::HandleStartWorkout(Intents.INStartWorkoutIntent,System.Action`1<Intents.INStartWorkoutIntentResponse>)",
			"Intents.INStartWorkoutIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INStartWorkoutIntentResponse::.ctor(Intents.INStartWorkoutIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INStringResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INTask::.ctor(Foundation.NSCoder)",
			"Intents.INTask::.ctor(Intents.INSpeakableString,Intents.INTaskStatus,Intents.INTaskType,Intents.INSpatialEventTrigger,Intents.INTemporalEventTrigger,Foundation.NSDateComponents,Foundation.NSDateComponents,System.String)",
			"Intents.INTask::.ctor(Intents.INSpeakableString,Intents.INTaskStatus,Intents.INTaskType,Intents.INSpatialEventTrigger,Intents.INTemporalEventTrigger,Foundation.NSDateComponents,Foundation.NSDateComponents,System.String,Intents.INTaskPriority)",
			"Intents.INTask::Copy(Foundation.NSZone)",
			"Intents.INTask::EncodeTo(Foundation.NSCoder)",
			"Intents.INTaskList::.ctor(Foundation.NSCoder)",
			"Intents.INTaskList::.ctor(Intents.INSpeakableString,Intents.INTask[],Intents.INSpeakableString,Foundation.NSDateComponents,Foundation.NSDateComponents,System.String)",
			"Intents.INTaskList::Copy(Foundation.NSZone)",
			"Intents.INTaskList::EncodeTo(Foundation.NSCoder)",
			"Intents.INTaskListResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INTaskListResolutionResult::GetConfirmationRequired(Intents.INTaskList)",
			"Intents.INTaskListResolutionResult::GetSuccess(Intents.INTaskList)",
			"Intents.INTaskPriorityResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INTaskResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INTaskResolutionResult::GetConfirmationRequired(Intents.INTask)",
			"Intents.INTaskResolutionResult::GetSuccess(Intents.INTask)",
			"Intents.INTaskStatusResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INTemperatureResolutionResult::GetConfirmationRequired(Foundation.NSMeasurement`1<Foundation.NSUnitTemperature>)",
			"Intents.INTemperatureResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INTemperatureResolutionResult::GetSuccess(Foundation.NSMeasurement`1<Foundation.NSUnitTemperature>)",
			"Intents.INTemporalEventTrigger::.ctor(Foundation.NSCoder)",
			"Intents.INTemporalEventTrigger::.ctor(Intents.INDateComponentsRange)",
			"Intents.INTemporalEventTrigger::Copy(Foundation.NSZone)",
			"Intents.INTemporalEventTrigger::EncodeTo(Foundation.NSCoder)",
			"Intents.INTemporalEventTriggerResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INTemporalEventTriggerResolutionResult::GetConfirmationRequired(Intents.INTemporalEventTrigger)",
			"Intents.INTemporalEventTriggerResolutionResult::GetSuccess(Intents.INTemporalEventTrigger)",
			"Intents.INTemporalEventTriggerTypeOptionsResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INTermsAndConditions::.ctor(Foundation.NSCoder)",
			"Intents.INTermsAndConditions::.ctor(System.String,Foundation.NSUrl,Foundation.NSUrl)",
			"Intents.INTermsAndConditions::Copy(Foundation.NSZone)",
			"Intents.INTermsAndConditions::EncodeTo(Foundation.NSCoder)",
			"Intents.INTextNoteContent::.ctor(Foundation.NSCoder)",
			"Intents.INTextNoteContent::Copy(Foundation.NSZone)",
			"Intents.INTextNoteContent::EncodeTo(Foundation.NSCoder)",
			"Intents.INTicketedEvent::.ctor(Foundation.NSCoder)",
			"Intents.INTicketedEvent::.ctor(Intents.INTicketedEventCategory,System.String,Intents.INDateComponentsRange,CoreLocation.CLPlacemark)",
			"Intents.INTicketedEvent::Copy(Foundation.NSZone)",
			"Intents.INTicketedEvent::EncodeTo(Foundation.NSCoder)",
			"Intents.INTicketedEventReservation::.ctor(Foundation.NSCoder)",
			"Intents.INTicketedEventReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Foundation.NSUrl,Intents.INSeat,Intents.INTicketedEvent)",
			"Intents.INTicketedEventReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Intents.INSeat,Intents.INTicketedEvent)",
			"Intents.INTicketedEventReservation::Copy(Foundation.NSZone)",
			"Intents.INTicketedEventReservation::EncodeTo(Foundation.NSCoder)",
			"Intents.INTimeIntervalResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INTrainReservation::.ctor(Foundation.NSCoder)",
			"Intents.INTrainReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Foundation.NSUrl,Intents.INSeat,Intents.INTrainTrip)",
			"Intents.INTrainReservation::.ctor(Intents.INSpeakableString,System.String,Foundation.NSDate,Intents.INReservationStatus,System.String,Intents.INReservationAction[],Intents.INSeat,Intents.INTrainTrip)",
			"Intents.INTrainReservation::Copy(Foundation.NSZone)",
			"Intents.INTrainReservation::EncodeTo(Foundation.NSCoder)",
			"Intents.INTrainTrip::.ctor(Foundation.NSCoder)",
			"Intents.INTrainTrip::.ctor(System.String,System.String,System.String,Intents.INDateComponentsRange,CoreLocation.CLPlacemark,System.String,CoreLocation.CLPlacemark,System.String)",
			"Intents.INTrainTrip::Copy(Foundation.NSZone)",
			"Intents.INTrainTrip::EncodeTo(Foundation.NSCoder)",
			"Intents.INTransferMoneyIntent::.ctor(Foundation.NSCoder)",
			"Intents.INTransferMoneyIntent::.ctor(Intents.INPaymentAccount,Intents.INPaymentAccount,Intents.INPaymentAmount,Intents.INDateComponentsRange,System.String)",
			"Intents.INTransferMoneyIntentHandling_Extensions::Confirm(Intents.IINTransferMoneyIntentHandling,Intents.INTransferMoneyIntent,System.Action`1<Intents.INTransferMoneyIntentResponse>)",
			"Intents.INTransferMoneyIntentHandling_Extensions::ResolveFromAccount(Intents.IINTransferMoneyIntentHandling,Intents.INTransferMoneyIntent,System.Action`1<Intents.INPaymentAccountResolutionResult>)",
			"Intents.INTransferMoneyIntentHandling_Extensions::ResolveToAccount(Intents.IINTransferMoneyIntentHandling,Intents.INTransferMoneyIntent,System.Action`1<Intents.INPaymentAccountResolutionResult>)",
			"Intents.INTransferMoneyIntentHandling_Extensions::ResolveTransactionAmount(Intents.IINTransferMoneyIntentHandling,Intents.INTransferMoneyIntent,System.Action`1<Intents.INPaymentAmountResolutionResult>)",
			"Intents.INTransferMoneyIntentHandling_Extensions::ResolveTransactionNote(Intents.IINTransferMoneyIntentHandling,Intents.INTransferMoneyIntent,System.Action`1<Intents.INStringResolutionResult>)",
			"Intents.INTransferMoneyIntentHandling_Extensions::ResolveTransactionScheduledDate(Intents.IINTransferMoneyIntentHandling,Intents.INTransferMoneyIntent,System.Action`1<Intents.INDateComponentsRangeResolutionResult>)",
			"Intents.INTransferMoneyIntentHandlingWrapper::HandleTransferMoney(Intents.INTransferMoneyIntent,System.Action`1<Intents.INTransferMoneyIntentResponse>)",
			"Intents.INTransferMoneyIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INTransferMoneyIntentResponse::.ctor(Intents.INTransferMoneyIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INTransferMoneyIntentResponse::set_FromAccount(Intents.INPaymentAccount)",
			"Intents.INTransferMoneyIntentResponse::set_ToAccount(Intents.INPaymentAccount)",
			"Intents.INTransferMoneyIntentResponse::set_TransactionAmount(Intents.INPaymentAmount)",
			"Intents.INTransferMoneyIntentResponse::set_TransactionScheduledDate(Intents.INDateComponentsRange)",
			"Intents.INTransferMoneyIntentResponse::set_TransferFee(Intents.INCurrencyAmount)",
			"Intents.INUpcomingMediaManager::SetSuggestedMediaIntents(Foundation.NSOrderedSet`1<Intents.INPlayMediaIntent>)",
			"Intents.INUpdateMediaAffinityIntent::.ctor(Foundation.NSCoder)",
			"Intents.INUpdateMediaAffinityIntent::.ctor(Intents.INMediaItem[],Intents.INMediaSearch,Intents.INMediaAffinityType)",
			"Intents.INUpdateMediaAffinityIntentHandling_Extensions::Confirm(Intents.IINUpdateMediaAffinityIntentHandling,Intents.INUpdateMediaAffinityIntent,System.Action`1<Intents.INUpdateMediaAffinityIntentResponse>)",
			"Intents.INUpdateMediaAffinityIntentHandling_Extensions::ResolveAffinityType(Intents.IINUpdateMediaAffinityIntentHandling,Intents.INUpdateMediaAffinityIntent,System.Action`1<Intents.INMediaAffinityTypeResolutionResult>)",
			"Intents.INUpdateMediaAffinityIntentHandling_Extensions::ResolveMediaItems(Intents.IINUpdateMediaAffinityIntentHandling,Intents.INUpdateMediaAffinityIntent,System.Action`1<Foundation.NSArray`1<Intents.INUpdateMediaAffinityMediaItemResolutionResult>>)",
			"Intents.INUpdateMediaAffinityIntentHandlingWrapper::HandleUpdateMediaAffinity(Intents.INUpdateMediaAffinityIntent,System.Action`1<Intents.INUpdateMediaAffinityIntentResponse>)",
			"Intents.INUpdateMediaAffinityIntentResponse::.ctor(Foundation.NSCoder)",
			"Intents.INUpdateMediaAffinityIntentResponse::.ctor(Intents.INUpdateMediaAffinityIntentResponseCode,Foundation.NSUserActivity)",
			"Intents.INUpdateMediaAffinityMediaItemResolutionResult::.ctor(Intents.INMediaItemResolutionResult)",
			"Intents.INUpdateMediaAffinityMediaItemResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INUpdateMediaAffinityMediaItemResolutionResult::GetConfirmationRequired(Intents.INMediaItem)",
			"Intents.INUpdateMediaAffinityMediaItemResolutionResult::GetSuccess(Intents.INMediaItem)",
			"Intents.INUrlResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INUrlResolutionResult::GetConfirmationRequired(Foundation.NSUrl)",
			"Intents.INUrlResolutionResult::GetSuccess(Foundation.NSUrl)",
			"Intents.INUserContext::.ctor(Foundation.NSCoder)",
			"Intents.INUserContext::EncodeTo(Foundation.NSCoder)",
			"Intents.INVisualCodeDomainHandlingWrapper::HandleGetVisualCode(Intents.INGetVisualCodeIntent,System.Action`1<Intents.INGetVisualCodeIntentResponse>)",
			"Intents.INVisualCodeTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INVocabulary::SetVocabulary(Foundation.NSOrderedSet`1<Intents.IINSpeakable>,Intents.INVocabularyStringType)",
			"Intents.INVocabulary::SetVocabularyStrings(Foundation.NSOrderedSet`1<Foundation.NSString>,Intents.INVocabularyStringType)",
			"Intents.INVoiceShortcut::.ctor(Foundation.NSCoder)",
			"Intents.INVoiceShortcut::Copy(Foundation.NSZone)",
			"Intents.INVoiceShortcut::EncodeTo(Foundation.NSCoder)",
			"Intents.INVoiceShortcutCenter::GetVoiceShortcut(Foundation.NSUuid,System.Action`2<Intents.INVoiceShortcut,Foundation.NSError>)",
			"Intents.INVolumeResolutionResult::GetConfirmationRequired(Foundation.NSMeasurement`1<Foundation.NSUnitVolume>)",
			"Intents.INVolumeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INVolumeResolutionResult::GetSuccess(Foundation.NSMeasurement`1<Foundation.NSUnitVolume>)",
			"Intents.INWorkoutGoalUnitTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INWorkoutLocationTypeResolutionResult::GetConfirmationRequired(Foundation.NSObject,System.IntPtr)",
			"Intents.INWorkoutsDomainHandlingWrapper::HandleCancelWorkout(Intents.INCancelWorkoutIntent,System.Action`1<Intents.INCancelWorkoutIntentResponse>)",
			"Intents.INWorkoutsDomainHandlingWrapper::HandleEndWorkout(Intents.INEndWorkoutIntent,System.Action`1<Intents.INEndWorkoutIntentResponse>)",
			"Intents.INWorkoutsDomainHandlingWrapper::HandlePauseWorkout(Intents.INPauseWorkoutIntent,System.Action`1<Intents.INPauseWorkoutIntentResponse>)",
			"Intents.INWorkoutsDomainHandlingWrapper::HandleResumeWorkout(Intents.INResumeWorkoutIntent,System.Action`1<Intents.INResumeWorkoutIntentResponse>)",
			"Intents.INWorkoutsDomainHandlingWrapper::HandleStartWorkout(Intents.INStartWorkoutIntent,System.Action`1<Intents.INStartWorkoutIntentResponse>)",
			"Intents.NSExtensionContext_ShareExtension::GetIntent(Foundation.NSExtensionContext)",
			"Intents.NSUserActivity_IntentsAdditions::GetInteraction(Foundation.NSUserActivity)",
			"Intents.NSUserActivity_IntentsAdditions::GetShortcutAvailability(Foundation.NSUserActivity)",
			"Intents.NSUserActivity_IntentsAdditions::GetSuggestedInvocationPhrase(Foundation.NSUserActivity)",
			"Intents.NSUserActivity_IntentsAdditions::SetShortcutAvailability(Foundation.NSUserActivity,Intents.INShortcutAvailabilityOptions)",
			"Intents.NSUserActivity_IntentsAdditions::SetSuggestedInvocationPhrase(Foundation.NSUserActivity,System.String)",
			"IntentsUI.INUIAddVoiceShortcutButton::.ctor(Foundation.NSCoder)",
			"IntentsUI.INUIAddVoiceShortcutButton::set_Shortcut(Intents.INShortcut)",
			"IntentsUI.INUIAddVoiceShortcutButtonDelegateWrapper::PresentAddVoiceShortcut(IntentsUI.INUIAddVoiceShortcutViewController,IntentsUI.INUIAddVoiceShortcutButton)",
			"IntentsUI.INUIAddVoiceShortcutButtonDelegateWrapper::PresentEditVoiceShortcut(IntentsUI.INUIEditVoiceShortcutViewController,IntentsUI.INUIAddVoiceShortcutButton)",
			"IntentsUI.INUIAddVoiceShortcutViewController::.ctor(Foundation.NSCoder)",
			"IntentsUI.INUIAddVoiceShortcutViewController::.ctor(Intents.INShortcut)",
			"IntentsUI.INUIAddVoiceShortcutViewControllerDelegateWrapper::DidCancel(IntentsUI.INUIAddVoiceShortcutViewController)",
			"IntentsUI.INUIAddVoiceShortcutViewControllerDelegateWrapper::DidFinish(IntentsUI.INUIAddVoiceShortcutViewController,Intents.INVoiceShortcut,Foundation.NSError)",
			"IntentsUI.INUIEditVoiceShortcutViewController::.ctor(Foundation.NSCoder)",
			"IntentsUI.INUIEditVoiceShortcutViewController::.ctor(Intents.INVoiceShortcut)",
			"IntentsUI.INUIEditVoiceShortcutViewControllerDelegateWrapper::DidCancel(IntentsUI.INUIEditVoiceShortcutViewController)",
			"IntentsUI.INUIEditVoiceShortcutViewControllerDelegateWrapper::DidDelete(IntentsUI.INUIEditVoiceShortcutViewController,Foundation.NSUuid)",
			"IntentsUI.INUIEditVoiceShortcutViewControllerDelegateWrapper::DidUpdate(IntentsUI.INUIEditVoiceShortcutViewController,Intents.INVoiceShortcut,Foundation.NSError)",
			"IntentsUI.INUIHostedViewControlling_Extensions::Configure(IntentsUI.IINUIHostedViewControlling,Intents.INInteraction,IntentsUI.INUIHostedViewContext,System.Action`1<CoreGraphics.CGSize>)",
			"IntentsUI.INUIHostedViewControlling_Extensions::ConfigureView(IntentsUI.IINUIHostedViewControlling,Foundation.NSSet`1<Intents.INParameter>,Intents.INInteraction,IntentsUI.INUIInteractiveBehavior,IntentsUI.INUIHostedViewContext,IntentsUI.INUIHostedViewControllingConfigureViewHandler)",
			"IntentsUI.INUIHostedViewSiriProviding_Extensions::GetDisplaysMap(IntentsUI.IINUIHostedViewSiriProviding)",
			"IntentsUI.INUIHostedViewSiriProviding_Extensions::GetDisplaysMessage(IntentsUI.IINUIHostedViewSiriProviding)",
			"IntentsUI.INUIHostedViewSiriProviding_Extensions::GetDisplaysPaymentTransaction(IntentsUI.IINUIHostedViewSiriProviding)",
			"IntentsUI.NSExtensionContext_INUIHostedViewControlling::GetHostedViewMaximumAllowedSize(Foundation.NSExtensionContext)",
			"IntentsUI.NSExtensionContext_INUIHostedViewControlling::GetHostedViewMinimumAllowedSize(Foundation.NSExtensionContext)",
			"IntentsUI.NSExtensionContext_INUIHostedViewControlling::GetInterfaceParametersDescription(Foundation.NSExtensionContext)",
			"IOSurface.IOSurface::.ctor(Foundation.NSCoder)",
			"IOSurface.IOSurface::.ctor(Foundation.NSDictionary)",
			"IOSurface.IOSurface::EncodeTo(Foundation.NSCoder)",
			"IOSurface.IOSurface::GetAttachment(Foundation.NSString)",
			"IOSurface.IOSurface::RemoveAttachment(Foundation.NSString)",
			"IOSurface.IOSurface::set_AllAttachments(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"IOSurface.IOSurface::SetAttachment(Foundation.NSObject,Foundation.NSString)",
			"iTunesLibrary.ITLibMediaEntity::EnumerateValues(Foundation.NSSet`1<Foundation.NSString>,iTunesLibrary.ITLibMediaEntityEnumerateValuesHandler)",
			"iTunesLibrary.ITLibMediaEntity::EnumerateValuesExcept(Foundation.NSSet`1<Foundation.NSString>,iTunesLibrary.ITLibMediaEntityEnumerateValuesHandler)",
			"iTunesLibrary.ITLibrary::GetArtwork(Foundation.NSUrl)",
			"JavaScriptCore.JSContext::.ctor(JavaScriptCore.JSVirtualMachine)",
			"JavaScriptCore.JSContext::_GetObject(Foundation.NSObject)",
			"JavaScriptCore.JSContext::_SetObject(JavaScriptCore.JSValue,Foundation.NSObject)",
			"JavaScriptCore.JSContext::EvaluateScript(System.String,Foundation.NSUrl)",
			"JavaScriptCore.JSContext::set_Exception(JavaScriptCore.JSValue)",
			"JavaScriptCore.JSManagedValue::.ctor(JavaScriptCore.JSValue)",
			"JavaScriptCore.JSManagedValue::Get(JavaScriptCore.JSValue)",
			"JavaScriptCore.JSManagedValue::Get(JavaScriptCore.JSValue,Foundation.NSObject)",
			"JavaScriptCore.JSValue::_ObjectForKeyedSubscript(Foundation.NSObject)",
			"JavaScriptCore.JSValue::_SetObject(JavaScriptCore.JSValue,Foundation.NSObject)",
			"JavaScriptCore.JSValue::_SetObject(JavaScriptCore.JSValue,System.UIntPtr)",
			"JavaScriptCore.JSValue::CreateArray(JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::CreateError(System.String,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::CreateObject(JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::CreatePromise(JavaScriptCore.JSContext,JavaScriptCore.JSPromiseCreationExecutor)",
			"JavaScriptCore.JSValue::CreateRegularExpression(System.String,System.String,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::CreateRejectedPromise(Foundation.NSObject,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::CreateResolvedPromise(Foundation.NSObject,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::CreateSymbol(System.String,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::DefineProperty(System.String,Foundation.NSObject)",
			"JavaScriptCore.JSValue::From(CoreGraphics.CGPoint,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::From(CoreGraphics.CGRect,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::From(CoreGraphics.CGSize,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::From(Foundation.NSObject,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::From(Foundation.NSRange,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::From(System.Boolean,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::From(System.Double,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::From(System.Int32,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::From(System.UInt32,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::FromJSJSValueRef(System.IntPtr,JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::IsEqualTo(Foundation.NSObject)",
			"JavaScriptCore.JSValue::IsEqualWithTypeCoercionTo(Foundation.NSObject)",
			"JavaScriptCore.JSValue::IsInstanceOf(Foundation.NSObject)",
			"JavaScriptCore.JSValue::Null(JavaScriptCore.JSContext)",
			"JavaScriptCore.JSValue::SetProperty(Foundation.NSObject,System.String)",
			"JavaScriptCore.JSValue::SetValue(JavaScriptCore.JSValue,System.UIntPtr)",
			"JavaScriptCore.JSValue::Undefined(JavaScriptCore.JSContext)",
			"JavaScriptCore.JSVirtualMachine::AddManagedReference(Foundation.NSObject,Foundation.NSObject)",
			"JavaScriptCore.JSVirtualMachine::RemoveManagedReference(Foundation.NSObject,Foundation.NSObject)",
			"LinkPresentation.LPLinkMetadata::.ctor(Foundation.NSCoder)",
			"LinkPresentation.LPLinkMetadata::Copy(Foundation.NSZone)",
			"LinkPresentation.LPLinkMetadata::EncodeTo(Foundation.NSCoder)",
			"LinkPresentation.LPLinkMetadata::set_IconProvider(Foundation.NSItemProvider)",
			"LinkPresentation.LPLinkMetadata::set_ImageProvider(Foundation.NSItemProvider)",
			"LinkPresentation.LPLinkMetadata::set_OriginalUrl(Foundation.NSUrl)",
			"LinkPresentation.LPLinkMetadata::set_RemoteVideoUrl(Foundation.NSUrl)",
			"LinkPresentation.LPLinkMetadata::set_Url(Foundation.NSUrl)",
			"LinkPresentation.LPLinkMetadata::set_VideoProvider(Foundation.NSItemProvider)",
			"LinkPresentation.LPLinkView::.ctor(Foundation.NSCoder)",
			"LinkPresentation.LPLinkView::.ctor(Foundation.NSUrl)",
			"LinkPresentation.LPLinkView::.ctor(LinkPresentation.LPLinkMetadata)",
			"LinkPresentation.LPLinkView::set_Metadata(LinkPresentation.LPLinkMetadata)",
			"LinkPresentation.LPMetadataProvider::StartFetchingMetadata(Foundation.NSUrl,System.Action`2<LinkPresentation.LPLinkMetadata,Foundation.NSError>)",
			"LinkPresentation.LPMetadataProvider::StartFetchingMetadata(Foundation.NSUrlRequest,System.Action`2<LinkPresentation.LPLinkMetadata,Foundation.NSError>)",
			"LocalAuthentication.LAContext::EvaluateAccessControl(Security.SecAccessControl,LocalAuthentication.LAAccessControlOperation,System.String,System.Action`2<System.Boolean,Foundation.NSError>)",
			"LocalAuthentication.LAContext::set_MaxBiometryFailures(Foundation.NSNumber)",
			"LocalAuthentication.LAContext::SetCredentialType(Foundation.NSData,LocalAuthentication.LACredentialType)",
			"LocalAuthenticationEmbeddedUI.LAAuthenticationView::.ctor(Foundation.NSCoder)",
			"LocalAuthenticationEmbeddedUI.LAAuthenticationView::.ctor(LocalAuthentication.LAContext)",
			"LocalAuthenticationEmbeddedUI.LAAuthenticationView::.ctor(LocalAuthentication.LAContext,AppKit.NSControlSize)",
			"MailKit.MEAddressAnnotation::.ctor(Foundation.NSCoder)",
			"MailKit.MEAddressAnnotation::EncodeTo(Foundation.NSCoder)",
			"MailKit.MEComposeSession::.ctor(Foundation.NSCoder)",
			"MailKit.MEComposeSession::EncodeTo(Foundation.NSCoder)",
			"MailKit.MEComposeSessionHandler_Extensions::AllowMessageSend(MailKit.IMEComposeSessionHandler,MailKit.MEComposeSession,System.Action`1<Foundation.NSError>)",
			"MailKit.MEComposeSessionHandler_Extensions::AnnotateAddress(MailKit.IMEComposeSessionHandler,MailKit.MEComposeSession,System.Action`1<Foundation.NSDictionary`2<MailKit.MEEmailAddress,MailKit.MEAddressAnnotation>>)",
			"MailKit.MEComposeSessionHandler_Extensions::GetAdditionalHeaders(MailKit.IMEComposeSessionHandler,MailKit.MEComposeSession)",
			"MailKit.MEComposeSessionHandlerWrapper::GetViewController(MailKit.MEComposeSession)",
			"MailKit.MEComposeSessionHandlerWrapper::MailComposeSessionDidBegin(MailKit.MEComposeSession)",
			"MailKit.MEComposeSessionHandlerWrapper::MailComposeSessionDidEnd(MailKit.MEComposeSession)",
			"MailKit.MEDecodedMessage::.ctor(Foundation.NSCoder)",
			"MailKit.MEDecodedMessage::.ctor(Foundation.NSData,MailKit.MEMessageSecurityInformation,Foundation.NSData)",
			"MailKit.MEDecodedMessage::.ctor(Foundation.NSData,MailKit.MEMessageSecurityInformation,Foundation.NSData,MailKit.MEDecodedMessageBanner)",
			"MailKit.MEDecodedMessage::EncodeTo(Foundation.NSCoder)",
			"MailKit.MEDecodedMessageBanner::.ctor(Foundation.NSCoder)",
			"MailKit.MEDecodedMessageBanner::Copy(Foundation.NSZone)",
			"MailKit.MEDecodedMessageBanner::EncodeTo(Foundation.NSCoder)",
			"MailKit.MEEmailAddress::.ctor(Foundation.NSCoder)",
			"MailKit.MEEmailAddress::Copy(Foundation.NSZone)",
			"MailKit.MEEmailAddress::EncodeTo(Foundation.NSCoder)",
			"MailKit.MEEncodedOutgoingMessage::.ctor(Foundation.NSCoder)",
			"MailKit.MEEncodedOutgoingMessage::.ctor(Foundation.NSData,System.Boolean,System.Boolean)",
			"MailKit.MEEncodedOutgoingMessage::EncodeTo(Foundation.NSCoder)",
			"MailKit.MEExtension_Extensions::GetHandlerForComposeSession(MailKit.IMEExtension,MailKit.MEComposeSession)",
			"MailKit.MEExtension_Extensions::GetHandlerForContentBlocker(MailKit.IMEExtension)",
			"MailKit.MEExtension_Extensions::GetHandlerForMessageActions(MailKit.IMEExtension)",
			"MailKit.MEExtension_Extensions::GetHandlerForMessageSecurity(MailKit.IMEExtension)",
			"MailKit.MEExtensionViewController::.ctor(Foundation.NSCoder)",
			"MailKit.MEExtensionViewController::.ctor(System.String,Foundation.NSBundle)",
			"MailKit.MEMessage::.ctor(Foundation.NSCoder)",
			"MailKit.MEMessage::EncodeTo(Foundation.NSCoder)",
			"MailKit.MEMessageAction::.ctor(Foundation.NSCoder)",
			"MailKit.MEMessageAction::EncodeTo(Foundation.NSCoder)",
			"MailKit.MEMessageActionDecision::.ctor(Foundation.NSCoder)",
			"MailKit.MEMessageActionDecision::Apply(MailKit.MEMessageAction)",
			"MailKit.MEMessageActionDecision::EncodeTo(Foundation.NSCoder)",
			"MailKit.MEMessageActionHandler_Extensions::GetRequiredHeaders(MailKit.IMEMessageActionHandler)",
			"MailKit.MEMessageActionHandlerWrapper::DecideAction(MailKit.MEMessage,System.Action`1<MailKit.MEMessageActionDecision>)",
			"MailKit.MEMessageDecoderWrapper::DecodedMessage(Foundation.NSData)",
			"MailKit.MEMessageEncoderWrapper::EncodeMessage(MailKit.MEMessage,MailKit.MEComposeContext,System.Action`1<MailKit.MEMessageEncodingResult>)",
			"MailKit.MEMessageEncoderWrapper::GetEncodingStatus(MailKit.MEMessage,MailKit.MEComposeContext,System.Action`1<MailKit.MEOutgoingMessageEncodingStatus>)",
			"MailKit.MEMessageEncodingResult::.ctor(Foundation.NSCoder)",
			"MailKit.MEMessageEncodingResult::.ctor(MailKit.MEEncodedOutgoingMessage,Foundation.NSError,Foundation.NSError)",
			"MailKit.MEMessageEncodingResult::EncodeTo(Foundation.NSCoder)",
			"MailKit.MEMessageSecurityHandlerWrapper::DecodedMessage(Foundation.NSData)",
			"MailKit.MEMessageSecurityHandlerWrapper::EncodeMessage(MailKit.MEMessage,MailKit.MEComposeContext,System.Action`1<MailKit.MEMessageEncodingResult>)",
			"MailKit.MEMessageSecurityHandlerWrapper::GetEncodingStatus(MailKit.MEMessage,MailKit.MEComposeContext,System.Action`1<MailKit.MEOutgoingMessageEncodingStatus>)",
			"MailKit.MEMessageSecurityHandlerWrapper::GetExtensionViewController(Foundation.NSData)",
			"MailKit.MEMessageSecurityHandlerWrapper::SetPrimaryActionClicked(Foundation.NSData,System.Action`1<MailKit.MEExtensionViewController>)",
			"MailKit.MEMessageSecurityInformation::.ctor(Foundation.NSCoder)",
			"MailKit.MEMessageSecurityInformation::.ctor(MailKit.MEMessageSigner[],System.Boolean,Foundation.NSError,Foundation.NSError)",
			"MailKit.MEMessageSecurityInformation::.ctor(MailKit.MEMessageSigner[],System.Boolean,Foundation.NSError,Foundation.NSError,System.Boolean,System.String)",
			"MailKit.MEMessageSecurityInformation::EncodeTo(Foundation.NSCoder)",
			"MailKit.MEMessageSigner::.ctor(Foundation.NSCoder)",
			"MailKit.MEMessageSigner::.ctor(MailKit.MEEmailAddress[],System.String,Foundation.NSData)",
			"MailKit.MEMessageSigner::EncodeTo(Foundation.NSCoder)",
			"MailKit.MEOutgoingMessageEncodingStatus::.ctor(Foundation.NSCoder)",
			"MailKit.MEOutgoingMessageEncodingStatus::.ctor(System.Boolean,System.Boolean,Foundation.NSError,MailKit.MEEmailAddress[])",
			"MailKit.MEOutgoingMessageEncodingStatus::EncodeTo(Foundation.NSCoder)",
			"MapKit.MKAnnotation_Extensions::GetSubtitle(MapKit.IMKAnnotation)",
			"MapKit.MKAnnotation_Extensions::GetTitle(MapKit.IMKAnnotation)",
			"MapKit.MKAnnotation_Extensions::SetCoordinate(MapKit.IMKAnnotation,CoreLocation.CLLocationCoordinate2D)",
			"MapKit.MKAnnotationView::.ctor(Foundation.NSCoder)",
			"MapKit.MKAnnotationView::.ctor(MapKit.IMKAnnotation,System.String)",
			"MapKit.MKAnnotationView::set_Annotation(MapKit.IMKAnnotation)",
			"MapKit.MKAnnotationView::set_DetailCalloutAccessoryView(AppKit.NSView)",
			"MapKit.MKAnnotationView::set_DetailCalloutAccessoryView(UIKit.UIView)",
			"MapKit.MKAnnotationView::set_Image(AppKit.NSImage)",
			"MapKit.MKAnnotationView::set_Image(UIKit.UIImage)",
			"MapKit.MKAnnotationView::set_LeftCalloutAccessoryView(AppKit.NSView)",
			"MapKit.MKAnnotationView::set_LeftCalloutAccessoryView(UIKit.UIView)",
			"MapKit.MKAnnotationView::set_RightCalloutAccessoryView(AppKit.NSView)",
			"MapKit.MKAnnotationView::set_RightCalloutAccessoryView(UIKit.UIView)",
			"MapKit.MKCircleRenderer::.ctor(MapKit.MKCircle)",
			"MapKit.MKCircleView::.ctor(Foundation.NSCoder)",
			"MapKit.MKCircleView::.ctor(MapKit.MKCircle)",
			"MapKit.MKCompassButton::.ctor(Foundation.NSCoder)",
			"MapKit.MKCompassButton::FromMapView(MapKit.MKMapView)",
			"MapKit.MKDirections::.ctor(MapKit.MKDirectionsRequest)",
			"MapKit.MKDirectionsRequest::.ctor(Foundation.NSUrl)",
			"MapKit.MKDirectionsRequest::IsDirectionsRequestUrl(Foundation.NSUrl)",
			"MapKit.MKDirectionsRequest::set_ArrivalDate(Foundation.NSDate)",
			"MapKit.MKDirectionsRequest::set_DepartureDate(Foundation.NSDate)",
			"MapKit.MKDirectionsRequest::set_Destination(MapKit.MKMapItem)",
			"MapKit.MKDirectionsRequest::set_Source(MapKit.MKMapItem)",
			"MapKit.MKDistanceFormatter::.ctor(Foundation.NSCoder)",
			"MapKit.MKDistanceFormatter::set_Locale(Foundation.NSLocale)",
			"MapKit.MKGeoJsonDecoder::GeoJsonObjects(Foundation.NSData,Foundation.NSError&)",
			"MapKit.MKLocalPointsOfInterestRequest::Copy(Foundation.NSZone)",
			"MapKit.MKLocalPointsOfInterestRequest::set_PointOfInterestFilter(MapKit.MKPointOfInterestFilter)",
			"MapKit.MKLocalSearch::.ctor(MapKit.MKLocalPointsOfInterestRequest)",
			"MapKit.MKLocalSearch::.ctor(MapKit.MKLocalSearchRequest)",
			"MapKit.MKLocalSearchCompleter::set_PointOfInterestFilter(MapKit.MKPointOfInterestFilter)",
			"MapKit.MKLocalSearchCompleterDelegate_Extensions::DidFail(MapKit.IMKLocalSearchCompleterDelegate,MapKit.MKLocalSearchCompleter,Foundation.NSError)",
			"MapKit.MKLocalSearchCompleterDelegate_Extensions::DidUpdateResults(MapKit.IMKLocalSearchCompleterDelegate,MapKit.MKLocalSearchCompleter)",
			"MapKit.MKLocalSearchRequest::.ctor(MapKit.MKLocalSearchCompletion)",
			"MapKit.MKLocalSearchRequest::Copy(Foundation.NSZone)",
			"MapKit.MKLocalSearchRequest::set_PointOfInterestFilter(MapKit.MKPointOfInterestFilter)",
			"MapKit.MKMapCamera::.ctor(Foundation.NSCoder)",
			"MapKit.MKMapCamera::Copy(Foundation.NSZone)",
			"MapKit.MKMapCamera::EncodeTo(Foundation.NSCoder)",
			"MapKit.MKMapCameraBoundary::.ctor(Foundation.NSCoder)",
			"MapKit.MKMapCameraBoundary::Copy(Foundation.NSZone)",
			"MapKit.MKMapCameraBoundary::EncodeTo(Foundation.NSCoder)",
			"MapKit.MKMapCameraZoomRange::.ctor(Foundation.NSCoder)",
			"MapKit.MKMapCameraZoomRange::Copy(Foundation.NSZone)",
			"MapKit.MKMapCameraZoomRange::EncodeTo(Foundation.NSCoder)",
			"MapKit.MKMapItem::.ctor(Foundation.NSCoder)",
			"MapKit.MKMapItem::.ctor(MapKit.MKPlacemark)",
			"MapKit.MKMapItem::_OpenInMaps(Foundation.NSDictionary)",
			"MapKit.MKMapItem::_OpenMaps(MapKit.MKMapItem[],Foundation.NSDictionary)",
			"MapKit.MKMapItem::EncodeTo(Foundation.NSCoder)",
			"MapKit.MKMapItem::GetObject(Foundation.NSData,System.String,Foundation.NSError&)",
			"MapKit.MKMapItem::OpenInMaps(Foundation.NSDictionary,UIKit.UIScene,System.Action`1<Foundation.NSError>)",
			"MapKit.MKMapItem::OpenMaps(MapKit.MKMapItem[],Foundation.NSDictionary,UIKit.UIScene,System.Action`1<Foundation.NSError>)",
			"MapKit.MKMapItem::set_TimeZone(Foundation.NSTimeZone)",
			"MapKit.MKMapItem::set_Url(Foundation.NSUrl)",
			"MapKit.MKMapSnapshotOptions::Copy(Foundation.NSZone)",
			"MapKit.MKMapSnapshotOptions::set_Appearance(AppKit.NSAppearance)",
			"MapKit.MKMapSnapshotOptions::set_Camera(MapKit.MKMapCamera)",
			"MapKit.MKMapSnapshotOptions::set_PointOfInterestFilter(MapKit.MKPointOfInterestFilter)",
			"MapKit.MKMapSnapshotOptions::set_TraitCollection(UIKit.UITraitCollection)",
			"MapKit.MKMapSnapshotter::.ctor(MapKit.MKMapSnapshotOptions)",
			"MapKit.MKMapSnapshotter::Start(CoreFoundation.DispatchQueue,MapKit.MKMapSnapshotCompletionHandler)",
			"MapKit.MKMapView::.ctor(Foundation.NSCoder)",
			"MapKit.MKMapView::AddAnnotation(MapKit.IMKAnnotation)",
			"MapKit.MKMapView::AddOverlay(MapKit.IMKOverlay)",
			"MapKit.MKMapView::AddOverlay(MapKit.IMKOverlay,MapKit.MKOverlayLevel)",
			"MapKit.MKMapView::ConvertCoordinate(CoreLocation.CLLocationCoordinate2D,AppKit.NSView)",
			"MapKit.MKMapView::ConvertCoordinate(CoreLocation.CLLocationCoordinate2D,UIKit.UIView)",
			"MapKit.MKMapView::ConvertPoint(CoreGraphics.CGPoint,AppKit.NSView)",
			"MapKit.MKMapView::ConvertPoint(CoreGraphics.CGPoint,UIKit.UIView)",
			"MapKit.MKMapView::ConvertRect(CoreGraphics.CGRect,AppKit.NSView)",
			"MapKit.MKMapView::ConvertRect(CoreGraphics.CGRect,UIKit.UIView)",
			"MapKit.MKMapView::ConvertRegion(MapKit.MKCoordinateRegion,AppKit.NSView)",
			"MapKit.MKMapView::ConvertRegion(MapKit.MKCoordinateRegion,UIKit.UIView)",
			"MapKit.MKMapView::DequeueReusableAnnotation(System.String,MapKit.IMKAnnotation)",
			"MapKit.MKMapView::DeselectAnnotation(MapKit.IMKAnnotation,System.Boolean)",
			"MapKit.MKMapView::ExchangeOverlay(MapKit.IMKOverlay,MapKit.IMKOverlay)",
			"MapKit.MKMapView::InsertOverlay(MapKit.IMKOverlay,System.IntPtr)",
			"MapKit.MKMapView::InsertOverlay(MapKit.IMKOverlay,System.UIntPtr,MapKit.MKOverlayLevel)",
			"MapKit.MKMapView::InsertOverlayAbove(MapKit.IMKOverlay,MapKit.IMKOverlay)",
			"MapKit.MKMapView::InsertOverlayBelow(MapKit.IMKOverlay,MapKit.IMKOverlay)",
			"MapKit.MKMapView::Register(ObjCRuntime.Class,System.String)",
			"MapKit.MKMapView::RemoveAnnotation(MapKit.IMKAnnotation)",
			"MapKit.MKMapView::RemoveOverlay(MapKit.IMKOverlay)",
			"MapKit.MKMapView::RendererForOverlay(MapKit.IMKOverlay)",
			"MapKit.MKMapView::SelectAnnotation(MapKit.IMKAnnotation,System.Boolean)",
			"MapKit.MKMapView::set_Camera(MapKit.MKMapCamera)",
			"MapKit.MKMapView::set_CameraBoundary(MapKit.MKMapCameraBoundary)",
			"MapKit.MKMapView::set_CameraZoomRange(MapKit.MKMapCameraZoomRange)",
			"MapKit.MKMapView::set_PointOfInterestFilter(MapKit.MKPointOfInterestFilter)",
			"MapKit.MKMapView::SetCamera(MapKit.MKMapCamera,System.Boolean)",
			"MapKit.MKMapView::SetCameraBoundary(MapKit.MKMapCameraBoundary,System.Boolean)",
			"MapKit.MKMapView::SetCameraZoomRange(MapKit.MKMapCameraZoomRange,System.Boolean)",
			"MapKit.MKMapView::ViewForAnnotation(MapKit.IMKAnnotation)",
			"MapKit.MKMapView::ViewForOverlay(MapKit.IMKOverlay)",
			"MapKit.MKMapViewDelegate_Extensions::CalloutAccessoryControlTapped(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.MKAnnotationView,UIKit.UIControl)",
			"MapKit.MKMapViewDelegate_Extensions::ChangedDragState(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.MKAnnotationView,MapKit.MKAnnotationViewDragState,MapKit.MKAnnotationViewDragState)",
			"MapKit.MKMapViewDelegate_Extensions::CreateClusterAnnotation(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.IMKAnnotation[])",
			"MapKit.MKMapViewDelegate_Extensions::DidAddAnnotationViews(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.MKAnnotationView[])",
			"MapKit.MKMapViewDelegate_Extensions::DidAddOverlayRenderers(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.MKOverlayRenderer[])",
			"MapKit.MKMapViewDelegate_Extensions::DidAddOverlayViews(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.MKOverlayView)",
			"MapKit.MKMapViewDelegate_Extensions::DidChangeUserTrackingMode(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.MKUserTrackingMode,System.Boolean)",
			"MapKit.MKMapViewDelegate_Extensions::DidChangeVisibleRegion(MapKit.IMKMapViewDelegate,MapKit.MKMapView)",
			"MapKit.MKMapViewDelegate_Extensions::DidDeselectAnnotationView(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.MKAnnotationView)",
			"MapKit.MKMapViewDelegate_Extensions::DidFailToLocateUser(MapKit.IMKMapViewDelegate,MapKit.MKMapView,Foundation.NSError)",
			"MapKit.MKMapViewDelegate_Extensions::DidFinishRenderingMap(MapKit.IMKMapViewDelegate,MapKit.MKMapView,System.Boolean)",
			"MapKit.MKMapViewDelegate_Extensions::DidSelectAnnotationView(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.MKAnnotationView)",
			"MapKit.MKMapViewDelegate_Extensions::DidStopLocatingUser(MapKit.IMKMapViewDelegate,MapKit.MKMapView)",
			"MapKit.MKMapViewDelegate_Extensions::DidUpdateUserLocation(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.MKUserLocation)",
			"MapKit.MKMapViewDelegate_Extensions::GetViewForAnnotation(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.IMKAnnotation)",
			"MapKit.MKMapViewDelegate_Extensions::GetViewForOverlay(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.IMKOverlay)",
			"MapKit.MKMapViewDelegate_Extensions::LoadingMapFailed(MapKit.IMKMapViewDelegate,MapKit.MKMapView,Foundation.NSError)",
			"MapKit.MKMapViewDelegate_Extensions::MapLoaded(MapKit.IMKMapViewDelegate,MapKit.MKMapView)",
			"MapKit.MKMapViewDelegate_Extensions::OverlayRenderer(MapKit.IMKMapViewDelegate,MapKit.MKMapView,MapKit.IMKOverlay)",
			"MapKit.MKMapViewDelegate_Extensions::RegionChanged(MapKit.IMKMapViewDelegate,MapKit.MKMapView,System.Boolean)",
			"MapKit.MKMapViewDelegate_Extensions::RegionWillChange(MapKit.IMKMapViewDelegate,MapKit.MKMapView,System.Boolean)",
			"MapKit.MKMapViewDelegate_Extensions::WillStartLoadingMap(MapKit.IMKMapViewDelegate,MapKit.MKMapView)",
			"MapKit.MKMapViewDelegate_Extensions::WillStartLocatingUser(MapKit.IMKMapViewDelegate,MapKit.MKMapView)",
			"MapKit.MKMapViewDelegate_Extensions::WillStartRenderingMap(MapKit.IMKMapViewDelegate,MapKit.MKMapView)",
			"MapKit.MKMarkerAnnotationView/MKMarkerAnnotationViewAppearance::set_GlyphImage(UIKit.UIImage)",
			"MapKit.MKMarkerAnnotationView/MKMarkerAnnotationViewAppearance::set_GlyphTintColor(UIKit.UIColor)",
			"MapKit.MKMarkerAnnotationView/MKMarkerAnnotationViewAppearance::set_MarkerTintColor(UIKit.UIColor)",
			"MapKit.MKMarkerAnnotationView/MKMarkerAnnotationViewAppearance::set_SelectedGlyphImage(UIKit.UIImage)",
			"MapKit.MKMarkerAnnotationView::.ctor(Foundation.NSCoder)",
			"MapKit.MKMarkerAnnotationView::.ctor(MapKit.IMKAnnotation,System.String)",
			"MapKit.MKMarkerAnnotationView::set_GlyphImage(AppKit.NSImage)",
			"MapKit.MKMarkerAnnotationView::set_GlyphImage(UIKit.UIImage)",
			"MapKit.MKMarkerAnnotationView::set_GlyphTintColor(AppKit.NSColor)",
			"MapKit.MKMarkerAnnotationView::set_GlyphTintColor(UIKit.UIColor)",
			"MapKit.MKMarkerAnnotationView::set_MarkerTintColor(AppKit.NSColor)",
			"MapKit.MKMarkerAnnotationView::set_MarkerTintColor(UIKit.UIColor)",
			"MapKit.MKMarkerAnnotationView::set_SelectedGlyphImage(AppKit.NSImage)",
			"MapKit.MKMarkerAnnotationView::set_SelectedGlyphImage(UIKit.UIImage)",
			"MapKit.MKMultiPoint::GetLocations(Foundation.NSIndexSet)",
			"MapKit.MKMultiPolygonRenderer::.ctor(MapKit.MKMultiPolygon)",
			"MapKit.MKMultiPolylineRenderer::.ctor(MapKit.MKMultiPolyline)",
			"MapKit.MKOverlay_Extensions::GetCanReplaceMapContent(MapKit.IMKOverlay)",
			"MapKit.MKOverlay_Extensions::Intersects(MapKit.IMKOverlay,MapKit.MKMapRect)",
			"MapKit.MKOverlayPathRenderer::.ctor(MapKit.IMKOverlay)",
			"MapKit.MKOverlayPathRenderer::ApplyFillPropertiesToContext(CoreGraphics.CGContext,System.Runtime.InteropServices.NFloat)",
			"MapKit.MKOverlayPathRenderer::ApplyStrokePropertiesToContext(CoreGraphics.CGContext,System.Runtime.InteropServices.NFloat)",
			"MapKit.MKOverlayPathRenderer::FillPath(CoreGraphics.CGPath,CoreGraphics.CGContext)",
			"MapKit.MKOverlayPathRenderer::set_FillColor(AppKit.NSColor)",
			"MapKit.MKOverlayPathRenderer::set_FillColor(UIKit.UIColor)",
			"MapKit.MKOverlayPathRenderer::set_Path(CoreGraphics.CGPath)",
			"MapKit.MKOverlayPathRenderer::set_StrokeColor(AppKit.NSColor)",
			"MapKit.MKOverlayPathRenderer::set_StrokeColor(UIKit.UIColor)",
			"MapKit.MKOverlayPathRenderer::StrokePath(CoreGraphics.CGPath,CoreGraphics.CGContext)",
			"MapKit.MKOverlayPathView::.ctor(Foundation.NSCoder)",
			"MapKit.MKOverlayPathView::.ctor(MapKit.IMKOverlay)",
			"MapKit.MKOverlayPathView::ApplyFillProperties(CoreGraphics.CGContext,System.Runtime.InteropServices.NFloat)",
			"MapKit.MKOverlayPathView::ApplyStrokeProperties(CoreGraphics.CGContext,System.Runtime.InteropServices.NFloat)",
			"MapKit.MKOverlayPathView::FillPath(CoreGraphics.CGPath,CoreGraphics.CGContext)",
			"MapKit.MKOverlayPathView::set_FillColor(UIKit.UIColor)",
			"MapKit.MKOverlayPathView::set_Path(CoreGraphics.CGPath)",
			"MapKit.MKOverlayPathView::set_StrokeColor(UIKit.UIColor)",
			"MapKit.MKOverlayPathView::StrokePath(CoreGraphics.CGPath,CoreGraphics.CGContext)",
			"MapKit.MKOverlayRenderer::.ctor(MapKit.IMKOverlay)",
			"MapKit.MKOverlayRenderer::DrawMapRect(MapKit.MKMapRect,System.Runtime.InteropServices.NFloat,CoreGraphics.CGContext)",
			"MapKit.MKOverlayView::.ctor(Foundation.NSCoder)",
			"MapKit.MKOverlayView::.ctor(MapKit.IMKOverlay)",
			"MapKit.MKOverlayView::DrawMapRect(MapKit.MKMapRect,System.Runtime.InteropServices.NFloat,CoreGraphics.CGContext)",
			"MapKit.MKPinAnnotationView/MKPinAnnotationViewAppearance::set_PinTintColor(UIKit.UIColor)",
			"MapKit.MKPinAnnotationView::.ctor(Foundation.NSCoder)",
			"MapKit.MKPinAnnotationView::.ctor(MapKit.IMKAnnotation,System.String)",
			"MapKit.MKPinAnnotationView::set_PinTintColor(AppKit.NSColor)",
			"MapKit.MKPinAnnotationView::set_PinTintColor(UIKit.UIColor)",
			"MapKit.MKPitchControl::.ctor(Foundation.NSCoder)",
			"MapKit.MKPitchControl::Create(MapKit.MKMapView)",
			"MapKit.MKPlacemark::.ctor(CoreLocation.CLLocationCoordinate2D,Contacts.CNPostalAddress)",
			"MapKit.MKPlacemark::.ctor(CoreLocation.CLLocationCoordinate2D,Foundation.NSDictionary)",
			"MapKit.MKPlacemark::.ctor(Foundation.NSCoder)",
			"MapKit.MKPlacemark::Copy(Foundation.NSZone)",
			"MapKit.MKPointOfInterestFilter::.ctor(Foundation.NSCoder)",
			"MapKit.MKPointOfInterestFilter::Copy(Foundation.NSZone)",
			"MapKit.MKPointOfInterestFilter::EncodeTo(Foundation.NSCoder)",
			"MapKit.MKPointOfInterestFilter::ExcludesCategory(MapKit.MKPointOfInterestCategory)",
			"MapKit.MKPointOfInterestFilter::IncludesCategory(MapKit.MKPointOfInterestCategory)",
			"MapKit.MKPolygonRenderer::.ctor(MapKit.MKPolygon)",
			"MapKit.MKPolygonView::.ctor(Foundation.NSCoder)",
			"MapKit.MKPolygonView::.ctor(MapKit.MKPolygon)",
			"MapKit.MKPolylineRenderer::.ctor(MapKit.MKPolyline)",
			"MapKit.MKPolylineView::.ctor(Foundation.NSCoder)",
			"MapKit.MKPolylineView::.ctor(MapKit.MKPolyline)",
			"MapKit.MKReverseGeocoderDelegateWrapper::FailedWithError(MapKit.MKReverseGeocoder,Foundation.NSError)",
			"MapKit.MKReverseGeocoderDelegateWrapper::FoundWithPlacemark(MapKit.MKReverseGeocoder,MapKit.MKPlacemark)",
			"MapKit.MKScaleView::.ctor(Foundation.NSCoder)",
			"MapKit.MKScaleView::FromMapView(MapKit.MKMapView)",
			"MapKit.MKTileOverlayRenderer::.ctor(MapKit.MKTileOverlay)",
			"MapKit.MKUserLocationView::.ctor(Foundation.NSCoder)",
			"MapKit.MKUserLocationView::.ctor(MapKit.IMKAnnotation,System.String)",
			"MapKit.MKUserTrackingBarButtonItem::.ctor(Foundation.NSCoder)",
			"MapKit.MKUserTrackingBarButtonItem::.ctor(MapKit.MKMapView)",
			"MapKit.MKUserTrackingBarButtonItem::set_MapView(MapKit.MKMapView)",
			"MapKit.MKUserTrackingButton::.ctor(Foundation.NSCoder)",
			"MapKit.MKUserTrackingButton::FromMapView(MapKit.MKMapView)",
			"MapKit.MKZoomControl::.ctor(Foundation.NSCoder)",
			"MapKit.MKZoomControl::Create(MapKit.MKMapView)",
			"MapKit.NSUserActivity_MKMapItem::GetMapItem(Foundation.NSUserActivity)",
			"MapKit.NSUserActivity_MKMapItem::SetMapItem(Foundation.NSUserActivity,MapKit.MKMapItem)",
			"MediaAccessibility.MAImageCaptioning::GetCaption(Foundation.NSUrl,Foundation.NSError&)",
			"MediaAccessibility.MAImageCaptioning::SetCaption(Foundation.NSUrl,System.String,Foundation.NSError&)",
			"MediaLibrary.MLMediaLibrary::.ctor(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"MediaLibrary.MLMediaSource::MediaGroupForIdentifier(Foundation.NSString)",
			"MediaLibrary.MLMediaSource::MediaObjectForIdentifier(Foundation.NSString)",
			"MediaPlayer.AVMediaSelectionGroup_MPNowPlayingInfoLanguageOptionAdditions::CreateNowPlayingInfoLanguageOptionGroup(AVFoundation.AVMediaSelectionGroup)",
			"MediaPlayer.AVMediaSelectionOption_MPNowPlayingInfoLanguageOptionAdditions::CreateNowPlayingInfoLanguageOption(AVFoundation.AVMediaSelectionOption)",
			"MediaPlayer.MPContentItem::set_Artwork(MediaPlayer.MPMediaItemArtwork)",
			"MediaPlayer.MPMediaEntity::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMediaEntity::CanFilterByProperty(Foundation.NSString)",
			"MediaPlayer.MPMediaEntity::EncodeTo(Foundation.NSCoder)",
			"MediaPlayer.MPMediaEntity::EnumerateValues(Foundation.NSSet,MediaPlayer.MPMediaItemEnumerator)",
			"MediaPlayer.MPMediaEntity::GetObject(Foundation.NSObject)",
			"MediaPlayer.MPMediaEntity::ValueForProperty(Foundation.NSString)",
			"MediaPlayer.MPMediaItem::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMediaItem::CanFilterByProperty(Foundation.NSString)",
			"MediaPlayer.MPMediaItem::EncodeTo(Foundation.NSCoder)",
			"MediaPlayer.MPMediaItem::EnumerateValues(Foundation.NSSet,MediaPlayer.MPMediaItemEnumerator)",
			"MediaPlayer.MPMediaItem::GetObject(Foundation.NSObject)",
			"MediaPlayer.MPMediaItem::ValueForProperty(Foundation.NSString)",
			"MediaPlayer.MPMediaItemArtwork::.ctor(UIKit.UIImage)",
			"MediaPlayer.MPMediaItemCollection::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMediaItemCollection::EncodeTo(Foundation.NSCoder)",
			"MediaPlayer.MPMediaLibrary::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMediaLibrary::EncodeTo(Foundation.NSCoder)",
			"MediaPlayer.MPMediaLibrary::GetPlaylist(Foundation.NSUuid,MediaPlayer.MPMediaPlaylistCreationMetadata,System.Action`2<MediaPlayer.MPMediaPlaylist,Foundation.NSError>)",
			"MediaPlayer.MPMediaPickerController::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMediaPickerControllerDelegate_Extensions::MediaItemsPicked(MediaPlayer.IMPMediaPickerControllerDelegate,MediaPlayer.MPMediaPickerController,MediaPlayer.MPMediaItemCollection)",
			"MediaPlayer.MPMediaPickerControllerDelegate_Extensions::MediaPickerDidCancel(MediaPlayer.IMPMediaPickerControllerDelegate,MediaPlayer.MPMediaPickerController)",
			"MediaPlayer.MPMediaPlaylist::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMediaPlaylist::EncodeTo(Foundation.NSCoder)",
			"MediaPlayer.MPMediaPredicate::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMediaPredicate::EncodeTo(Foundation.NSCoder)",
			"MediaPlayer.MPMediaPropertyPredicate::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMediaPropertyPredicate::PredicateWithValue(Foundation.NSObject,System.String)",
			"MediaPlayer.MPMediaPropertyPredicate::PredicateWithValue(Foundation.NSObject,System.String,MediaPlayer.MPMediaPredicateComparison)",
			"MediaPlayer.MPMediaQuery::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMediaQuery::.ctor(Foundation.NSSet)",
			"MediaPlayer.MPMediaQuery::AddFilterPredicate(MediaPlayer.MPMediaPredicate)",
			"MediaPlayer.MPMediaQuery::Copy(Foundation.NSZone)",
			"MediaPlayer.MPMediaQuery::EncodeTo(Foundation.NSCoder)",
			"MediaPlayer.MPMediaQuery::RemoveFilterPredicate(MediaPlayer.MPMediaPredicate)",
			"MediaPlayer.MPMediaQuery::set_FilterPredicates(Foundation.NSSet)",
			"MediaPlayer.MPMediaQuerySection::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMediaQuerySection::Copy(Foundation.NSZone)",
			"MediaPlayer.MPMediaQuerySection::EncodeTo(Foundation.NSCoder)",
			"MediaPlayer.MPMovieAccessLog::Copy(Foundation.NSZone)",
			"MediaPlayer.MPMovieAccessLogEvent::Copy(Foundation.NSZone)",
			"MediaPlayer.MPMovieErrorLog::Copy(Foundation.NSZone)",
			"MediaPlayer.MPMovieErrorLogEvent::Copy(Foundation.NSZone)",
			"MediaPlayer.MPMoviePlayerController::.ctor(Foundation.NSUrl)",
			"MediaPlayer.MPMoviePlayerController::set_ContentUrl(Foundation.NSUrl)",
			"MediaPlayer.MPMoviePlayerViewController::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMoviePlayerViewController::.ctor(Foundation.NSUrl)",
			"MediaPlayer.MPMusicPlayerController::Append(MediaPlayer.MPMusicPlayerQueueDescriptor)",
			"MediaPlayer.MPMusicPlayerController::Prepend(MediaPlayer.MPMusicPlayerQueueDescriptor)",
			"MediaPlayer.MPMusicPlayerController::set_NowPlayingItem(MediaPlayer.MPMediaItem)",
			"MediaPlayer.MPMusicPlayerController::SetQueue(MediaPlayer.MPMediaItemCollection)",
			"MediaPlayer.MPMusicPlayerController::SetQueue(MediaPlayer.MPMediaQuery)",
			"MediaPlayer.MPMusicPlayerController::SetQueue(MediaPlayer.MPMusicPlayerQueueDescriptor)",
			"MediaPlayer.MPMusicPlayerControllerMutableQueue::InsertAfter(MediaPlayer.MPMusicPlayerQueueDescriptor,MediaPlayer.MPMediaItem)",
			"MediaPlayer.MPMusicPlayerControllerMutableQueue::RemoveItem(MediaPlayer.MPMediaItem)",
			"MediaPlayer.MPMusicPlayerMediaItemQueueDescriptor::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMusicPlayerMediaItemQueueDescriptor::.ctor(MediaPlayer.MPMediaItemCollection)",
			"MediaPlayer.MPMusicPlayerMediaItemQueueDescriptor::.ctor(MediaPlayer.MPMediaQuery)",
			"MediaPlayer.MPMusicPlayerMediaItemQueueDescriptor::set_StartItem(MediaPlayer.MPMediaItem)",
			"MediaPlayer.MPMusicPlayerMediaItemQueueDescriptor::SetEndTime(System.Double,MediaPlayer.MPMediaItem)",
			"MediaPlayer.MPMusicPlayerMediaItemQueueDescriptor::SetStartTime(System.Double,MediaPlayer.MPMediaItem)",
			"MediaPlayer.MPMusicPlayerPlayParameters::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMusicPlayerPlayParameters::.ctor(Foundation.NSDictionary)",
			"MediaPlayer.MPMusicPlayerPlayParameters::EncodeTo(Foundation.NSCoder)",
			"MediaPlayer.MPMusicPlayerPlayParametersQueueDescriptor::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMusicPlayerPlayParametersQueueDescriptor::set_StartItemPlayParameters(MediaPlayer.MPMusicPlayerPlayParameters)",
			"MediaPlayer.MPMusicPlayerPlayParametersQueueDescriptor::SetEndTime(System.Double,MediaPlayer.MPMusicPlayerPlayParameters)",
			"MediaPlayer.MPMusicPlayerPlayParametersQueueDescriptor::SetStartTime(System.Double,MediaPlayer.MPMusicPlayerPlayParameters)",
			"MediaPlayer.MPMusicPlayerQueueDescriptor::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPMusicPlayerQueueDescriptor::EncodeTo(Foundation.NSCoder)",
			"MediaPlayer.MPMusicPlayerStoreQueueDescriptor::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPNowPlayingInfoCenter::set__NowPlayingInfo(Foundation.NSDictionary)",
			"MediaPlayer.MPNowPlayingInfoLanguageOptionGroup::.ctor(MediaPlayer.MPNowPlayingInfoLanguageOption[],MediaPlayer.MPNowPlayingInfoLanguageOption,System.Boolean)",
			"MediaPlayer.MPNowPlayingSession::AddPlayer(AVFoundation.AVPlayer)",
			"MediaPlayer.MPNowPlayingSession::RemovePlayer(AVFoundation.AVPlayer)",
			"MediaPlayer.MPNowPlayingSessionDelegate_Extensions::DidChangeActive(MediaPlayer.IMPNowPlayingSessionDelegate,MediaPlayer.MPNowPlayingSession)",
			"MediaPlayer.MPNowPlayingSessionDelegate_Extensions::DidChangeCanBecomeActive(MediaPlayer.IMPNowPlayingSessionDelegate,MediaPlayer.MPNowPlayingSession)",
			"MediaPlayer.MPPlayableContentDataSource_Extensions::BeginLoadingChildItems(MediaPlayer.IMPPlayableContentDataSource,Foundation.NSIndexPath,System.Action`1<Foundation.NSError>)",
			"MediaPlayer.MPPlayableContentDataSource_Extensions::ChildItemsDisplayPlaybackProgress(MediaPlayer.IMPPlayableContentDataSource,Foundation.NSIndexPath)",
			"MediaPlayer.MPPlayableContentDataSource_Extensions::GetContentItem(MediaPlayer.IMPPlayableContentDataSource,System.String,System.Action`2<MediaPlayer.MPContentItem,Foundation.NSError>)",
			"MediaPlayer.MPPlayableContentDataSourceWrapper::GetContentItem(Foundation.NSIndexPath)",
			"MediaPlayer.MPPlayableContentDataSourceWrapper::NumberOfChildItems(Foundation.NSIndexPath)",
			"MediaPlayer.MPPlayableContentDelegate_Extensions::ContextUpdated(MediaPlayer.IMPPlayableContentDelegate,MediaPlayer.MPPlayableContentManager,MediaPlayer.MPPlayableContentManagerContext)",
			"MediaPlayer.MPPlayableContentDelegate_Extensions::InitializePlaybackQueue(MediaPlayer.IMPPlayableContentDelegate,MediaPlayer.MPPlayableContentManager,MediaPlayer.MPContentItem[],System.Action`1<Foundation.NSError>)",
			"MediaPlayer.MPPlayableContentDelegate_Extensions::InitializePlaybackQueue(MediaPlayer.IMPPlayableContentDelegate,MediaPlayer.MPPlayableContentManager,System.Action`1<Foundation.NSError>)",
			"MediaPlayer.MPPlayableContentDelegate_Extensions::InitiatePlaybackOfContentItem(MediaPlayer.IMPPlayableContentDelegate,MediaPlayer.MPPlayableContentManager,Foundation.NSIndexPath,System.Action`1<Foundation.NSError>)",
			"MediaPlayer.MPRemoteCommand::AddTarget(Foundation.NSObject,ObjCRuntime.Selector)",
			"MediaPlayer.MPRemoteCommand::RemoveTarget(Foundation.NSObject)",
			"MediaPlayer.MPRemoteCommand::RemoveTarget(Foundation.NSObject,ObjCRuntime.Selector)",
			"MediaPlayer.MPSkipIntervalCommand::get_PreferredIntervals()",
			"MediaPlayer.MPSkipIntervalCommand::set__PreferredIntervals(Foundation.NSArray)",
			"MediaPlayer.MPSystemMusicPlayerControllerWrapper::OpenToPlay(MediaPlayer.MPMusicPlayerQueueDescriptor)",
			"MediaPlayer.MPVolumeView::.ctor(Foundation.NSCoder)",
			"MediaPlayer.MPVolumeView::set_VolumeWarningSliderImage(UIKit.UIImage)",
			"MediaPlayer.MPVolumeView::SetMaximumVolumeSliderImage(UIKit.UIImage,UIKit.UIControlState)",
			"MediaPlayer.MPVolumeView::SetMinimumVolumeSliderImage(UIKit.UIImage,UIKit.UIControlState)",
			"MediaPlayer.MPVolumeView::SetRouteButtonImage(UIKit.UIImage,UIKit.UIControlState)",
			"MediaPlayer.MPVolumeView::SetVolumeThumbImage(UIKit.UIImage,UIKit.UIControlState)",
			"MediaPlayer.NSUserActivity_MediaPlayerAdditions::GetExternalMediaContentIdentifier(Foundation.NSUserActivity)",
			"MediaPlayer.NSUserActivity_MediaPlayerAdditions::SetExternalMediaContentIdentifier(Foundation.NSUserActivity,Foundation.NSString)",
			"MediaSetup.MSServiceAccount::set_AuthorizationTokenUrl(Foundation.NSUrl)",
			"MediaSetup.MSServiceAccount::set_ConfigurationUrl(Foundation.NSUrl)",
			"MediaSetup.MSSetupSession::.ctor(MediaSetup.MSServiceAccount)",
			"Messages.MSConversation::InsertAttachment(Foundation.NSUrl,System.String,System.Action`1<Foundation.NSError>)",
			"Messages.MSConversation::InsertMessage(Messages.MSMessage,System.Action`1<Foundation.NSError>)",
			"Messages.MSConversation::InsertSticker(Messages.MSSticker,System.Action`1<Foundation.NSError>)",
			"Messages.MSConversation::SendAttachment(Foundation.NSUrl,System.String,System.Action`1<Foundation.NSError>)",
			"Messages.MSConversation::SendMessage(Messages.MSMessage,System.Action`1<Foundation.NSError>)",
			"Messages.MSConversation::SendSticker(Messages.MSSticker,System.Action`1<Foundation.NSError>)",
			"Messages.MSMessage::.ctor(Foundation.NSCoder)",
			"Messages.MSMessage::.ctor(Messages.MSSession)",
			"Messages.MSMessage::Copy(Foundation.NSZone)",
			"Messages.MSMessage::EncodeTo(Foundation.NSCoder)",
			"Messages.MSMessage::set_Error(Foundation.NSError)",
			"Messages.MSMessage::set_Layout(Messages.MSMessageLayout)",
			"Messages.MSMessage::set_Url(Foundation.NSUrl)",
			"Messages.MSMessageLayout::Copy(Foundation.NSZone)",
			"Messages.MSMessageLiveLayout::.ctor(Messages.MSMessageTemplateLayout)",
			"Messages.MSMessagesAppViewController::.ctor(Foundation.NSCoder)",
			"Messages.MSMessagesAppViewController::.ctor(System.String,Foundation.NSBundle)",
			"Messages.MSMessagesAppViewController::DidBecomeActive(Messages.MSConversation)",
			"Messages.MSMessagesAppViewController::DidCancelSendingMessage(Messages.MSMessage,Messages.MSConversation)",
			"Messages.MSMessagesAppViewController::DidReceiveMessage(Messages.MSMessage,Messages.MSConversation)",
			"Messages.MSMessagesAppViewController::DidResignActive(Messages.MSConversation)",
			"Messages.MSMessagesAppViewController::DidSelectMessage(Messages.MSMessage,Messages.MSConversation)",
			"Messages.MSMessagesAppViewController::DidStartSendingMessage(Messages.MSMessage,Messages.MSConversation)",
			"Messages.MSMessagesAppViewController::WillBecomeActive(Messages.MSConversation)",
			"Messages.MSMessagesAppViewController::WillResignActive(Messages.MSConversation)",
			"Messages.MSMessagesAppViewController::WillSelectMessage(Messages.MSMessage,Messages.MSConversation)",
			"Messages.MSMessageTemplateLayout::set_Image(UIKit.UIImage)",
			"Messages.MSMessageTemplateLayout::set_MediaFileUrl(Foundation.NSUrl)",
			"Messages.MSSession::.ctor(Foundation.NSCoder)",
			"Messages.MSSession::EncodeTo(Foundation.NSCoder)",
			"Messages.MSSticker::.ctor(Foundation.NSUrl,System.String,Foundation.NSError&)",
			"Messages.MSStickerBrowserView::.ctor(Foundation.NSCoder)",
			"Messages.MSStickerBrowserViewController::.ctor(Foundation.NSCoder)",
			"Messages.MSStickerBrowserViewController::GetNumberOfStickers(Messages.MSStickerBrowserView)",
			"Messages.MSStickerBrowserViewController::GetSticker(Messages.MSStickerBrowserView,System.IntPtr)",
			"Messages.MSStickerBrowserViewDataSourceWrapper::GetNumberOfStickers(Messages.MSStickerBrowserView)",
			"Messages.MSStickerBrowserViewDataSourceWrapper::GetSticker(Messages.MSStickerBrowserView,System.IntPtr)",
			"Messages.MSStickerView::.ctor(CoreGraphics.CGRect,Messages.MSSticker)",
			"Messages.MSStickerView::.ctor(Foundation.NSCoder)",
			"Messages.MSStickerView::set_Sticker(Messages.MSSticker)",
			"MessageUI.MFMailComposeViewController::.ctor(Foundation.NSCoder)",
			"MessageUI.MFMailComposeViewController::AddAttachmentData(Foundation.NSData,System.String,System.String)",
			"MessageUI.MFMailComposeViewControllerDelegate_Extensions::Finished(MessageUI.IMFMailComposeViewControllerDelegate,MessageUI.MFMailComposeViewController,MessageUI.MFMailComposeResult,Foundation.NSError)",
			"MessageUI.MFMessageComposeViewController::.ctor(Foundation.NSCoder)",
			"MessageUI.MFMessageComposeViewController::AddAttachment(Foundation.NSData,System.String,System.String)",
			"MessageUI.MFMessageComposeViewController::AddAttachment(Foundation.NSUrl,System.String)",
			"MessageUI.MFMessageComposeViewController::set_Message(Messages.MSMessage)",
			"MessageUI.MFMessageComposeViewControllerDelegateWrapper::Finished(MessageUI.MFMessageComposeViewController,MessageUI.MessageComposeResult)",
			"Metal.MTLAccelerationStructureBoundingBoxGeometryDescriptor::set_BoundingBoxBuffer(Metal.IMTLBuffer)",
			"Metal.MTLAccelerationStructureCommandEncoderWrapper::BuildAccelerationStructure(Metal.IMTLAccelerationStructure,Metal.MTLAccelerationStructureDescriptor,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLAccelerationStructureCommandEncoderWrapper::CopyAccelerationStructure(Metal.IMTLAccelerationStructure,Metal.IMTLAccelerationStructure)",
			"Metal.MTLAccelerationStructureCommandEncoderWrapper::CopyAndCompactAccelerationStructure(Metal.IMTLAccelerationStructure,Metal.IMTLAccelerationStructure)",
			"Metal.MTLAccelerationStructureCommandEncoderWrapper::RefitAccelerationStructure(Metal.IMTLAccelerationStructure,Metal.MTLAccelerationStructureDescriptor,Metal.IMTLAccelerationStructure,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLAccelerationStructureCommandEncoderWrapper::SampleCountersInBuffer(Metal.IMTLCounterSampleBuffer,System.UIntPtr,System.Boolean)",
			"Metal.MTLAccelerationStructureCommandEncoderWrapper::UpdateFence(Metal.IMTLFence)",
			"Metal.MTLAccelerationStructureCommandEncoderWrapper::UseHeap(Metal.IMTLHeap)",
			"Metal.MTLAccelerationStructureCommandEncoderWrapper::UseResource(Metal.IMTLResource,Metal.MTLResourceUsage)",
			"Metal.MTLAccelerationStructureCommandEncoderWrapper::WaitForFence(Metal.IMTLFence)",
			"Metal.MTLAccelerationStructureCommandEncoderWrapper::WriteCompactedAccelerationStructureSize(Metal.IMTLAccelerationStructure,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLAccelerationStructureCommandEncoderWrapper::WriteCompactedAccelerationStructureSize(Metal.IMTLAccelerationStructure,Metal.IMTLBuffer,System.UIntPtr,Metal.MTLDataType)",
			"Metal.MTLAccelerationStructureDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLAccelerationStructureGeometryDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLAccelerationStructureMotionTriangleGeometryDescriptor::set_IndexBuffer(Metal.IMTLBuffer)",
			"Metal.MTLAccelerationStructureTriangleGeometryDescriptor::set_IndexBuffer(Metal.IMTLBuffer)",
			"Metal.MTLAccelerationStructureTriangleGeometryDescriptor::set_VertexBuffer(Metal.IMTLBuffer)",
			"Metal.MTLArgumentDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLArgumentEncoderWrapper::SetAccelerationStructure(Metal.IMTLAccelerationStructure,System.UIntPtr)",
			"Metal.MTLArgumentEncoderWrapper::SetArgumentBuffer(Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLArgumentEncoderWrapper::SetArgumentBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLArgumentEncoderWrapper::SetBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLArgumentEncoderWrapper::SetComputePipelineState(Metal.IMTLComputePipelineState,System.UIntPtr)",
			"Metal.MTLArgumentEncoderWrapper::SetIndirectCommandBuffer(Metal.IMTLIndirectCommandBuffer,System.UIntPtr)",
			"Metal.MTLArgumentEncoderWrapper::SetIntersectionFunctionTable(Metal.IMTLIntersectionFunctionTable,System.UIntPtr)",
			"Metal.MTLArgumentEncoderWrapper::SetRenderPipelineState(Metal.IMTLRenderPipelineState,System.UIntPtr)",
			"Metal.MTLArgumentEncoderWrapper::SetSamplerState(Metal.IMTLSamplerState,System.UIntPtr)",
			"Metal.MTLArgumentEncoderWrapper::SetTexture(Metal.IMTLTexture,System.UIntPtr)",
			"Metal.MTLArgumentEncoderWrapper::SetVisibleFunctionTable(Metal.IMTLVisibleFunctionTable,System.UIntPtr)",
			"Metal.MTLAttributeDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLAttributeDescriptorArray::SetObject(Metal.MTLAttributeDescriptor,System.UIntPtr)",
			"Metal.MTLBinaryArchiveDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLBinaryArchiveDescriptor::set_Url(Foundation.NSUrl)",
			"Metal.MTLBinaryArchiveWrapper::AddComputePipelineFunctions(Metal.MTLComputePipelineDescriptor,Foundation.NSError&)",
			"Metal.MTLBinaryArchiveWrapper::AddFunctionWithDescriptor(Metal.MTLFunctionDescriptor,Metal.IMTLLibrary,Foundation.NSError&)",
			"Metal.MTLBinaryArchiveWrapper::AddRenderPipelineFunctions(Metal.MTLRenderPipelineDescriptor,Foundation.NSError&)",
			"Metal.MTLBinaryArchiveWrapper::AddTileRenderPipelineFunctions(Metal.MTLTileRenderPipelineDescriptor,Foundation.NSError&)",
			"Metal.MTLBinaryArchiveWrapper::Serialize(Foundation.NSUrl,Foundation.NSError&)",
			"Metal.MTLBlitCommandEncoder_Extensions::GetTextureAccessCounters(Metal.IMTLBlitCommandEncoder,Metal.IMTLTexture,Metal.MTLRegion,System.UIntPtr,System.UIntPtr,System.Boolean,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLBlitCommandEncoder_Extensions::ResetTextureAccessCounters(Metal.IMTLBlitCommandEncoder,Metal.IMTLTexture,Metal.MTLRegion,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLBlitCommandEncoderWrapper::Copy(Metal.IMTLIndirectCommandBuffer,Foundation.NSRange,Metal.IMTLIndirectCommandBuffer,System.UIntPtr)",
			"Metal.MTLBlitCommandEncoderWrapper::Copy(Metal.IMTLTexture,Metal.IMTLTexture)",
			"Metal.MTLBlitCommandEncoderWrapper::Copy(Metal.IMTLTexture,System.UIntPtr,System.UIntPtr,Metal.IMTLTexture,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLBlitCommandEncoderWrapper::CopyFromBuffer(Metal.IMTLBuffer,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLBlitCommandEncoderWrapper::CopyFromBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr,System.UIntPtr,Metal.MTLSize,Metal.IMTLTexture,System.UIntPtr,System.UIntPtr,Metal.MTLOrigin)",
			"Metal.MTLBlitCommandEncoderWrapper::CopyFromBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr,System.UIntPtr,Metal.MTLSize,Metal.IMTLTexture,System.UIntPtr,System.UIntPtr,Metal.MTLOrigin,Metal.MTLBlitOption)",
			"Metal.MTLBlitCommandEncoderWrapper::CopyFromTexture(Metal.IMTLTexture,System.UIntPtr,System.UIntPtr,Metal.MTLOrigin,Metal.MTLSize,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLBlitCommandEncoderWrapper::CopyFromTexture(Metal.IMTLTexture,System.UIntPtr,System.UIntPtr,Metal.MTLOrigin,Metal.MTLSize,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr,System.UIntPtr,Metal.MTLBlitOption)",
			"Metal.MTLBlitCommandEncoderWrapper::CopyFromTexture(Metal.IMTLTexture,System.UIntPtr,System.UIntPtr,Metal.MTLOrigin,Metal.MTLSize,Metal.IMTLTexture,System.UIntPtr,System.UIntPtr,Metal.MTLOrigin)",
			"Metal.MTLBlitCommandEncoderWrapper::FillBuffer(Metal.IMTLBuffer,Foundation.NSRange,System.Byte)",
			"Metal.MTLBlitCommandEncoderWrapper::GenerateMipmapsForTexture(Metal.IMTLTexture)",
			"Metal.MTLBlitCommandEncoderWrapper::GetTextureAccessCounters(Metal.IMTLTexture,Metal.MTLRegion,System.UIntPtr,System.UIntPtr,System.Boolean,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLBlitCommandEncoderWrapper::Optimize(Metal.IMTLIndirectCommandBuffer,Foundation.NSRange)",
			"Metal.MTLBlitCommandEncoderWrapper::OptimizeContentsForCpuAccess(Metal.IMTLTexture)",
			"Metal.MTLBlitCommandEncoderWrapper::OptimizeContentsForCpuAccess(Metal.IMTLTexture,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLBlitCommandEncoderWrapper::OptimizeContentsForGpuAccess(Metal.IMTLTexture)",
			"Metal.MTLBlitCommandEncoderWrapper::OptimizeContentsForGpuAccess(Metal.IMTLTexture,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLBlitCommandEncoderWrapper::ResetCommands(Metal.IMTLIndirectCommandBuffer,Foundation.NSRange)",
			"Metal.MTLBlitCommandEncoderWrapper::ResetTextureAccessCounters(Metal.IMTLTexture,Metal.MTLRegion,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLBlitCommandEncoderWrapper::ResolveCounters(Metal.IMTLCounterSampleBuffer,Foundation.NSRange,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLBlitCommandEncoderWrapper::SampleCounters(Metal.IMTLCounterSampleBuffer,System.UIntPtr,System.Boolean)",
			"Metal.MTLBlitCommandEncoderWrapper::Synchronize(Metal.IMTLResource)",
			"Metal.MTLBlitCommandEncoderWrapper::Synchronize(Metal.IMTLTexture,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLBlitCommandEncoderWrapper::Update(Metal.IMTLFence)",
			"Metal.MTLBlitCommandEncoderWrapper::Wait(Metal.IMTLFence)",
			"Metal.MTLBlitPassDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLBlitPassSampleBufferAttachmentDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLBlitPassSampleBufferAttachmentDescriptor::set_SampleBuffer(Metal.IMTLCounterSampleBuffer)",
			"Metal.MTLBlitPassSampleBufferAttachmentDescriptorArray::SetObject(Metal.MTLBlitPassSampleBufferAttachmentDescriptor,System.UIntPtr)",
			"Metal.MTLBufferLayoutDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLBufferLayoutDescriptorArray::SetObject(Metal.MTLBufferLayoutDescriptor,System.UIntPtr)",
			"Metal.MTLBufferWrapper::CreateRemoteBuffer(Metal.IMTLDevice)",
			"Metal.MTLBufferWrapper::CreateTexture(Metal.MTLTextureDescriptor,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLCaptureDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLCaptureDescriptor::set_CaptureObject(Foundation.NSObject)",
			"Metal.MTLCaptureDescriptor::set_OutputUrl(Foundation.NSUrl)",
			"Metal.MTLCaptureManager::CreateNewCaptureScope(Metal.IMTLCommandQueue)",
			"Metal.MTLCaptureManager::CreateNewCaptureScope(Metal.IMTLDevice)",
			"Metal.MTLCaptureManager::set_DefaultCaptureScope(Metal.IMTLCaptureScope)",
			"Metal.MTLCaptureManager::StartCapture(Metal.IMTLCaptureScope)",
			"Metal.MTLCaptureManager::StartCapture(Metal.IMTLCommandQueue)",
			"Metal.MTLCaptureManager::StartCapture(Metal.IMTLDevice)",
			"Metal.MTLCaptureManager::StartCapture(Metal.MTLCaptureDescriptor,Foundation.NSError&)",
			"Metal.MTLCommandBufferDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLCommandBufferWrapper::CreateBlitCommandEncoder(Metal.MTLBlitPassDescriptor)",
			"Metal.MTLCommandBufferWrapper::CreateComputeCommandEncoder(Metal.MTLComputePassDescriptor)",
			"Metal.MTLCommandBufferWrapper::CreateParallelRenderCommandEncoder(Metal.MTLRenderPassDescriptor)",
			"Metal.MTLCommandBufferWrapper::CreateRenderCommandEncoder(Metal.MTLRenderPassDescriptor)",
			"Metal.MTLCommandBufferWrapper::CreateResourceStateCommandEncoder(Metal.MTLResourceStatePassDescriptor)",
			"Metal.MTLCommandBufferWrapper::EncodeSignal(Metal.IMTLEvent,System.UInt64)",
			"Metal.MTLCommandBufferWrapper::EncodeWait(Metal.IMTLEvent,System.UInt64)",
			"Metal.MTLCommandBufferWrapper::PresentDrawable(Metal.IMTLDrawable)",
			"Metal.MTLCommandBufferWrapper::PresentDrawable(Metal.IMTLDrawable,System.Double)",
			"Metal.MTLCommandBufferWrapper::PresentDrawableAfter(Metal.IMTLDrawable,System.Double)",
			"Metal.MTLCommandQueueWrapper::CreateCommandBuffer(Metal.MTLCommandBufferDescriptor)",
			"Metal.MTLCompileOptions::Copy(Foundation.NSZone)",
			"Metal.MTLCompileOptions::set_PreprocessorMacros(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"Metal.MTLComputeCommandEncoderWrapper::DispatchThreadgroups(Metal.IMTLBuffer,System.UIntPtr,Metal.MTLSize)",
			"Metal.MTLComputeCommandEncoderWrapper::ExecuteCommands(Metal.IMTLIndirectCommandBuffer,Foundation.NSRange)",
			"Metal.MTLComputeCommandEncoderWrapper::ExecuteCommands(Metal.IMTLIndirectCommandBuffer,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLComputeCommandEncoderWrapper::SampleCounters(Metal.IMTLCounterSampleBuffer,System.UIntPtr,System.Boolean)",
			"Metal.MTLComputeCommandEncoderWrapper::SetAccelerationStructure(Metal.IMTLAccelerationStructure,System.UIntPtr)",
			"Metal.MTLComputeCommandEncoderWrapper::SetBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLComputeCommandEncoderWrapper::SetComputePipelineState(Metal.IMTLComputePipelineState)",
			"Metal.MTLComputeCommandEncoderWrapper::SetIntersectionFunctionTable(Metal.IMTLIntersectionFunctionTable,System.UIntPtr)",
			"Metal.MTLComputeCommandEncoderWrapper::SetSamplerState(Metal.IMTLSamplerState,System.Single,System.Single,System.UIntPtr)",
			"Metal.MTLComputeCommandEncoderWrapper::SetSamplerState(Metal.IMTLSamplerState,System.UIntPtr)",
			"Metal.MTLComputeCommandEncoderWrapper::SetStageInRegion(Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLComputeCommandEncoderWrapper::SetTexture(Metal.IMTLTexture,System.UIntPtr)",
			"Metal.MTLComputeCommandEncoderWrapper::SetVisibleFunctionTable(Metal.IMTLVisibleFunctionTable,System.UIntPtr)",
			"Metal.MTLComputeCommandEncoderWrapper::Update(Metal.IMTLFence)",
			"Metal.MTLComputeCommandEncoderWrapper::UseHeap(Metal.IMTLHeap)",
			"Metal.MTLComputeCommandEncoderWrapper::UseResource(Metal.IMTLResource,Metal.MTLResourceUsage)",
			"Metal.MTLComputeCommandEncoderWrapper::Wait(Metal.IMTLFence)",
			"Metal.MTLComputePassDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLComputePassSampleBufferAttachmentDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLComputePassSampleBufferAttachmentDescriptor::set_SampleBuffer(Metal.IMTLCounterSampleBuffer)",
			"Metal.MTLComputePassSampleBufferAttachmentDescriptorArray::SetObject(Metal.MTLComputePassSampleBufferAttachmentDescriptor,System.UIntPtr)",
			"Metal.MTLComputePipelineDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLComputePipelineDescriptor::set_ComputeFunction(Metal.IMTLFunction)",
			"Metal.MTLComputePipelineDescriptor::set_LinkedFunctions(Metal.MTLLinkedFunctions)",
			"Metal.MTLComputePipelineDescriptor::set_StageInputDescriptor(Metal.MTLStageInputOutputDescriptor)",
			"Metal.MTLComputePipelineStateWrapper::CreateFunctionHandle(Metal.IMTLFunction)",
			"Metal.MTLComputePipelineStateWrapper::CreateIntersectionFunctionTable(Metal.MTLIntersectionFunctionTableDescriptor)",
			"Metal.MTLComputePipelineStateWrapper::CreateVisibleFunctionTable(Metal.MTLVisibleFunctionTableDescriptor)",
			"Metal.MTLCounterSampleBufferDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLCounterSampleBufferDescriptor::set_CounterSet(Metal.IMTLCounterSet)",
			"Metal.MTLDepthStencilDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLDepthStencilDescriptor::set_BackFaceStencil(Metal.MTLStencilDescriptor)",
			"Metal.MTLDepthStencilDescriptor::set_FrontFaceStencil(Metal.MTLStencilDescriptor)",
			"Metal.MTLDevice::RemoveObserver(Foundation.NSObject)",
			"Metal.MTLDevice_Extensions::ConvertSparsePixelRegions(Metal.IMTLDevice,System.IntPtr,System.IntPtr,Metal.MTLSize,Metal.MTLSparseTextureRegionAlignmentMode,System.UIntPtr)",
			"Metal.MTLDevice_Extensions::ConvertSparseTileRegions(Metal.IMTLDevice,System.IntPtr,System.IntPtr,Metal.MTLSize,System.UIntPtr)",
			"Metal.MTLDeviceWrapper::CreateAccelerationStructure(Metal.MTLAccelerationStructureDescriptor)",
			"Metal.MTLDeviceWrapper::CreateAccelerationStructureSizes(Metal.MTLAccelerationStructureDescriptor)",
			"Metal.MTLDeviceWrapper::CreateBinaryArchive(Metal.MTLBinaryArchiveDescriptor,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateComputePipelineState(Metal.IMTLFunction,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateComputePipelineState(Metal.IMTLFunction,Metal.MTLPipelineOption,Metal.MTLComputePipelineReflection&,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateComputePipelineState(Metal.IMTLFunction,Metal.MTLPipelineOption,System.Action`3<Metal.IMTLComputePipelineState,Metal.MTLComputePipelineReflection,Foundation.NSError>)",
			"Metal.MTLDeviceWrapper::CreateComputePipelineState(Metal.IMTLFunction,System.Action`2<Metal.IMTLComputePipelineState,Foundation.NSError>)",
			"Metal.MTLDeviceWrapper::CreateComputePipelineState(Metal.MTLComputePipelineDescriptor,Metal.MTLPipelineOption,Metal.MTLComputePipelineReflection&,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateComputePipelineState(Metal.MTLComputePipelineDescriptor,Metal.MTLPipelineOption,Metal.MTLNewComputePipelineStateWithReflectionCompletionHandler)",
			"Metal.MTLDeviceWrapper::CreateCounterSampleBuffer(Metal.MTLCounterSampleBufferDescriptor,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateDefaultLibrary(Foundation.NSBundle,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateDepthStencilState(Metal.MTLDepthStencilDescriptor)",
			"Metal.MTLDeviceWrapper::CreateDynamicLibrary(Foundation.NSUrl,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateDynamicLibrary(Metal.IMTLLibrary,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateHeap(Metal.MTLHeapDescriptor)",
			"Metal.MTLDeviceWrapper::CreateIndirectCommandBuffer(Metal.MTLIndirectCommandBufferDescriptor,System.UIntPtr,Metal.MTLResourceOptions)",
			"Metal.MTLDeviceWrapper::CreateLibrary(CoreFoundation.DispatchData,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateLibrary(Foundation.NSUrl,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateLibrary(Metal.MTLStitchedLibraryDescriptor,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateLibrary(Metal.MTLStitchedLibraryDescriptor,System.Action`2<Metal.IMTLLibrary,Foundation.NSError>)",
			"Metal.MTLDeviceWrapper::CreateLibrary(System.String,Metal.MTLCompileOptions,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateLibrary(System.String,Metal.MTLCompileOptions,System.Action`2<Metal.IMTLLibrary,Foundation.NSError>)",
			"Metal.MTLDeviceWrapper::CreateRasterizationRateMap(Metal.MTLRasterizationRateMapDescriptor)",
			"Metal.MTLDeviceWrapper::CreateRenderPipelineState(Metal.MTLRenderPipelineDescriptor,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateRenderPipelineState(Metal.MTLRenderPipelineDescriptor,Metal.MTLPipelineOption,Metal.MTLRenderPipelineReflection&,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateRenderPipelineState(Metal.MTLRenderPipelineDescriptor,Metal.MTLPipelineOption,System.Action`3<Metal.IMTLRenderPipelineState,Metal.MTLRenderPipelineReflection,Foundation.NSError>)",
			"Metal.MTLDeviceWrapper::CreateRenderPipelineState(Metal.MTLRenderPipelineDescriptor,System.Action`2<Metal.IMTLRenderPipelineState,Foundation.NSError>)",
			"Metal.MTLDeviceWrapper::CreateRenderPipelineState(Metal.MTLTileRenderPipelineDescriptor,Metal.MTLPipelineOption,Metal.MTLNewRenderPipelineStateWithReflectionCompletionHandler)",
			"Metal.MTLDeviceWrapper::CreateRenderPipelineState(Metal.MTLTileRenderPipelineDescriptor,Metal.MTLPipelineOption,Metal.MTLRenderPipelineReflection&,Foundation.NSError&)",
			"Metal.MTLDeviceWrapper::CreateSamplerState(Metal.MTLSamplerDescriptor)",
			"Metal.MTLDeviceWrapper::CreateSharedEvent(Metal.MTLSharedEventHandle)",
			"Metal.MTLDeviceWrapper::CreateSharedTexture(Metal.MTLSharedTextureHandle)",
			"Metal.MTLDeviceWrapper::CreateSharedTexture(Metal.MTLTextureDescriptor)",
			"Metal.MTLDeviceWrapper::CreateTexture(Metal.MTLTextureDescriptor)",
			"Metal.MTLDeviceWrapper::CreateTexture(Metal.MTLTextureDescriptor,IOSurface.IOSurface,System.UIntPtr)",
			"Metal.MTLDeviceWrapper::GetHeapTextureSizeAndAlign(Metal.MTLTextureDescriptor)",
			"Metal.MTLDynamicLibraryWrapper::Serialize(Foundation.NSUrl,Foundation.NSError&)",
			"Metal.MTLFunctionConstantValues::Copy(Foundation.NSZone)",
			"Metal.MTLFunctionDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLFunctionDescriptor::set_ConstantValues(Metal.MTLFunctionConstantValues)",
			"Metal.MTLFunctionStitchingAttributeWrapper::Copy(Foundation.NSZone)",
			"Metal.MTLFunctionStitchingFunctionNode::Copy(Foundation.NSZone)",
			"Metal.MTLFunctionStitchingGraph::.ctor(System.String,Metal.MTLFunctionStitchingFunctionNode[],Metal.MTLFunctionStitchingFunctionNode,Metal.IMTLFunctionStitchingAttribute[])",
			"Metal.MTLFunctionStitchingGraph::Copy(Foundation.NSZone)",
			"Metal.MTLFunctionStitchingGraph::set_OutputNode(Metal.MTLFunctionStitchingFunctionNode)",
			"Metal.MTLFunctionStitchingInputNode::Copy(Foundation.NSZone)",
			"Metal.MTLFunctionStitchingNodeWrapper::Copy(Foundation.NSZone)",
			"Metal.MTLHeapDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLHeapWrapper::CreateTexture(Metal.MTLTextureDescriptor)",
			"Metal.MTLHeapWrapper::CreateTexture(Metal.MTLTextureDescriptor,System.UIntPtr)",
			"Metal.MTLIndirectCommandBufferDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLIndirectComputeCommandWrapper::SetComputePipelineState(Metal.IMTLComputePipelineState)",
			"Metal.MTLIndirectComputeCommandWrapper::SetKernelBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLIndirectRenderCommandWrapper::DrawIndexedPatches(System.UIntPtr,System.UIntPtr,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLIndirectRenderCommandWrapper::DrawIndexedPrimitives(Metal.MTLPrimitiveType,System.UIntPtr,Metal.MTLIndexType,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UIntPtr)",
			"Metal.MTLIndirectRenderCommandWrapper::DrawPatches(System.UIntPtr,System.UIntPtr,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLIndirectRenderCommandWrapper::SetFragmentBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLIndirectRenderCommandWrapper::SetRenderPipelineState(Metal.IMTLRenderPipelineState)",
			"Metal.MTLIndirectRenderCommandWrapper::SetVertexBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLInstanceAccelerationStructureDescriptor::set_InstanceDescriptorBuffer(Metal.IMTLBuffer)",
			"Metal.MTLInstanceAccelerationStructureDescriptor::set_MotionTransformBuffer(Metal.IMTLBuffer)",
			"Metal.MTLIntersectionFunctionDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLIntersectionFunctionTableDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLIntersectionFunctionTableWrapper::SetBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLIntersectionFunctionTableWrapper::SetFunction(Metal.IMTLFunctionHandle,System.UIntPtr)",
			"Metal.MTLIntersectionFunctionTableWrapper::SetVisibleFunctionTable(Metal.IMTLVisibleFunctionTable,System.UIntPtr)",
			"Metal.MTLLibraryWrapper::CreateFunction(Metal.MTLFunctionDescriptor,Foundation.NSError&)",
			"Metal.MTLLibraryWrapper::CreateFunction(Metal.MTLFunctionDescriptor,System.Action`2<Metal.IMTLFunction,Foundation.NSError>)",
			"Metal.MTLLibraryWrapper::CreateFunction(System.String,Metal.MTLFunctionConstantValues,Foundation.NSError&)",
			"Metal.MTLLibraryWrapper::CreateFunction(System.String,Metal.MTLFunctionConstantValues,System.Action`2<Metal.IMTLFunction,Foundation.NSError>)",
			"Metal.MTLLibraryWrapper::CreateIntersectionFunction(Metal.MTLIntersectionFunctionDescriptor,Foundation.NSError&)",
			"Metal.MTLLibraryWrapper::CreateIntersectionFunction(Metal.MTLIntersectionFunctionDescriptor,System.Action`2<Metal.IMTLFunction,Foundation.NSError>)",
			"Metal.MTLLinkedFunctions::Copy(Foundation.NSZone)",
			"Metal.MTLLinkedFunctions::set_Groups(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSArray`1<Metal.IMTLFunction>>)",
			"Metal.MTLLinkedFunctions::set_MotionTransformBuffer(Metal.IMTLBuffer)",
			"Metal.MTLMotionKeyframeData::set_Buffer(Metal.IMTLBuffer)",
			"Metal.MTLPipelineBufferDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLPipelineBufferDescriptorArray::SetObject(Metal.MTLPipelineBufferDescriptor,System.UIntPtr)",
			"Metal.MTLRasterizationRateLayerArray::SetObject(Metal.MTLRasterizationRateLayerDescriptor,System.UIntPtr)",
			"Metal.MTLRasterizationRateLayerDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLRasterizationRateMapDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLRasterizationRateMapDescriptor::Create(Metal.MTLSize,Metal.MTLRasterizationRateLayerDescriptor)",
			"Metal.MTLRasterizationRateMapDescriptor::SetLayer(Metal.MTLRasterizationRateLayerDescriptor,System.UIntPtr)",
			"Metal.MTLRasterizationRateMapWrapper::CopyParameterData(Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLRasterizationRateSampleArray::SetObject(Foundation.NSNumber,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::DrawIndexedPatches(System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::DrawIndexedPatches(System.UIntPtr,System.UIntPtr,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::DrawIndexedPrimitives(Metal.MTLPrimitiveType,Metal.MTLIndexType,Metal.IMTLBuffer,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::DrawIndexedPrimitives(Metal.MTLPrimitiveType,System.UIntPtr,Metal.MTLIndexType,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::DrawIndexedPrimitives(Metal.MTLPrimitiveType,System.UIntPtr,Metal.MTLIndexType,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::DrawIndexedPrimitives(Metal.MTLPrimitiveType,System.UIntPtr,Metal.MTLIndexType,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::DrawPatches(System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::DrawPatches(System.UIntPtr,System.UIntPtr,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::DrawPrimitives(Metal.MTLPrimitiveType,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::ExecuteCommands(Metal.IMTLIndirectCommandBuffer,Foundation.NSRange)",
			"Metal.MTLRenderCommandEncoderWrapper::ExecuteCommands(Metal.IMTLIndirectCommandBuffer,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SampleCounters(Metal.IMTLCounterSampleBuffer,System.UIntPtr,System.Boolean)",
			"Metal.MTLRenderCommandEncoderWrapper::SetDepthStencilState(Metal.IMTLDepthStencilState)",
			"Metal.MTLRenderCommandEncoderWrapper::SetFragmentAccelerationStructure(Metal.IMTLAccelerationStructure,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetFragmentBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetFragmentBuffers(Metal.IMTLBuffer,System.IntPtr,Foundation.NSRange)",
			"Metal.MTLRenderCommandEncoderWrapper::SetFragmentIntersectionFunctionTable(Metal.IMTLIntersectionFunctionTable,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetFragmentSamplerState(Metal.IMTLSamplerState,System.Single,System.Single,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetFragmentSamplerState(Metal.IMTLSamplerState,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetFragmentTexture(Metal.IMTLTexture,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetFragmentVisibleFunctionTable(Metal.IMTLVisibleFunctionTable,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetRenderPipelineState(Metal.IMTLRenderPipelineState)",
			"Metal.MTLRenderCommandEncoderWrapper::SetTessellationFactorBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetTileAccelerationStructure(Metal.IMTLAccelerationStructure,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetTileBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetTileIntersectionFunctionTable(Metal.IMTLIntersectionFunctionTable,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetTileSamplerState(Metal.IMTLSamplerState,System.Single,System.Single,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetTileSamplerState(Metal.IMTLSamplerState,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetTileTexture(Metal.IMTLTexture,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetTileVisibleFunctionTable(Metal.IMTLVisibleFunctionTable,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetVertexAccelerationStructure(Metal.IMTLAccelerationStructure,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetVertexBuffer(Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetVertexIntersectionFunctionTable(Metal.IMTLIntersectionFunctionTable,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetVertexSamplerState(Metal.IMTLSamplerState,System.Single,System.Single,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetVertexSamplerState(Metal.IMTLSamplerState,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetVertexTexture(Metal.IMTLTexture,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::SetVertexVisibleFunctionTable(Metal.IMTLVisibleFunctionTable,System.UIntPtr)",
			"Metal.MTLRenderCommandEncoderWrapper::Update(Metal.IMTLFence,Metal.MTLRenderStages)",
			"Metal.MTLRenderCommandEncoderWrapper::UseHeap(Metal.IMTLHeap)",
			"Metal.MTLRenderCommandEncoderWrapper::UseHeap(Metal.IMTLHeap,Metal.MTLRenderStages)",
			"Metal.MTLRenderCommandEncoderWrapper::UseResource(Metal.IMTLResource,Metal.MTLResourceUsage)",
			"Metal.MTLRenderCommandEncoderWrapper::UseResource(Metal.IMTLResource,Metal.MTLResourceUsage,Metal.MTLRenderStages)",
			"Metal.MTLRenderCommandEncoderWrapper::Wait(Metal.IMTLFence,Metal.MTLRenderStages)",
			"Metal.MTLRenderPassAttachmentDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLRenderPassAttachmentDescriptor::set_ResolveTexture(Metal.IMTLTexture)",
			"Metal.MTLRenderPassAttachmentDescriptor::set_Texture(Metal.IMTLTexture)",
			"Metal.MTLRenderPassColorAttachmentDescriptorArray::SetObject(Metal.MTLRenderPassColorAttachmentDescriptor,System.UIntPtr)",
			"Metal.MTLRenderPassDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLRenderPassDescriptor::set_DepthAttachment(Metal.MTLRenderPassDepthAttachmentDescriptor)",
			"Metal.MTLRenderPassDescriptor::set_RasterizationRateMap(Metal.IMTLRasterizationRateMap)",
			"Metal.MTLRenderPassDescriptor::set_StencilAttachment(Metal.MTLRenderPassStencilAttachmentDescriptor)",
			"Metal.MTLRenderPassDescriptor::set_VisibilityResultBuffer(Metal.IMTLBuffer)",
			"Metal.MTLRenderPassSampleBufferAttachmentDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLRenderPassSampleBufferAttachmentDescriptor::set_SampleBuffer(Metal.IMTLCounterSampleBuffer)",
			"Metal.MTLRenderPassSampleBufferAttachmentDescriptorArray::SetObject(Metal.MTLRenderPassSampleBufferAttachmentDescriptor,System.UIntPtr)",
			"Metal.MTLRenderPipelineColorAttachmentDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLRenderPipelineColorAttachmentDescriptorArray::SetObject(Metal.MTLRenderPipelineColorAttachmentDescriptor,System.UIntPtr)",
			"Metal.MTLRenderPipelineDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLRenderPipelineDescriptor::set_FragmentFunction(Metal.IMTLFunction)",
			"Metal.MTLRenderPipelineDescriptor::set_FragmentLinkedFunctions(Metal.MTLLinkedFunctions)",
			"Metal.MTLRenderPipelineDescriptor::set_VertexDescriptor(Metal.MTLVertexDescriptor)",
			"Metal.MTLRenderPipelineDescriptor::set_VertexFunction(Metal.IMTLFunction)",
			"Metal.MTLRenderPipelineDescriptor::set_VertexLinkedFunctions(Metal.MTLLinkedFunctions)",
			"Metal.MTLRenderPipelineFunctionsDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLRenderPipelineStateWrapper::FunctionHandleWithFunction(Metal.IMTLFunction,Metal.MTLRenderStages)",
			"Metal.MTLRenderPipelineStateWrapper::NewIntersectionFunctionTableWithDescriptor(Metal.MTLIntersectionFunctionTableDescriptor,Metal.MTLRenderStages)",
			"Metal.MTLRenderPipelineStateWrapper::NewRenderPipelineStateWithAdditionalBinaryFunctions(Metal.MTLRenderPipelineFunctionsDescriptor,Foundation.NSError&)",
			"Metal.MTLRenderPipelineStateWrapper::NewVisibleFunctionTableWithDescriptor(Metal.MTLVisibleFunctionTableDescriptor,Metal.MTLRenderStages)",
			"Metal.MTLResourceStateCommandEncoder_Extensions::Update(Metal.IMTLResourceStateCommandEncoder,Metal.IMTLFence)",
			"Metal.MTLResourceStateCommandEncoder_Extensions::Update(Metal.IMTLResourceStateCommandEncoder,Metal.IMTLTexture,Metal.MTLSparseTextureMappingMode,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLResourceStateCommandEncoder_Extensions::Update(Metal.IMTLResourceStateCommandEncoder,Metal.IMTLTexture,Metal.MTLSparseTextureMappingMode,Metal.MTLRegion,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLResourceStateCommandEncoder_Extensions::Update(Metal.IMTLResourceStateCommandEncoder,Metal.IMTLTexture,Metal.MTLSparseTextureMappingMode,System.IntPtr,System.IntPtr,System.IntPtr,System.UIntPtr)",
			"Metal.MTLResourceStateCommandEncoder_Extensions::Wait(Metal.IMTLResourceStateCommandEncoder,Metal.IMTLFence)",
			"Metal.MTLResourceStateCommandEncoderWrapper::Update(Metal.IMTLFence)",
			"Metal.MTLResourceStateCommandEncoderWrapper::Update(Metal.IMTLTexture,Metal.MTLSparseTextureMappingMode,Metal.IMTLBuffer,System.UIntPtr)",
			"Metal.MTLResourceStateCommandEncoderWrapper::Update(Metal.IMTLTexture,Metal.MTLSparseTextureMappingMode,Metal.MTLRegion,System.UIntPtr,System.UIntPtr)",
			"Metal.MTLResourceStateCommandEncoderWrapper::Update(Metal.IMTLTexture,Metal.MTLSparseTextureMappingMode,System.IntPtr,System.IntPtr,System.IntPtr,System.UIntPtr)",
			"Metal.MTLResourceStateCommandEncoderWrapper::Wait(Metal.IMTLFence)",
			"Metal.MTLResourceStatePassDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLResourceStatePassSampleBufferAttachmentDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLResourceStatePassSampleBufferAttachmentDescriptor::set_SampleBuffer(Metal.IMTLCounterSampleBuffer)",
			"Metal.MTLResourceStatePassSampleBufferAttachmentDescriptorArray::SetObject(Metal.MTLResourceStatePassSampleBufferAttachmentDescriptor,System.UIntPtr)",
			"Metal.MTLSamplerDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLSharedEventHandle::.ctor(Foundation.NSCoder)",
			"Metal.MTLSharedEventHandle::EncodeTo(Foundation.NSCoder)",
			"Metal.MTLSharedEventListener::.ctor(CoreFoundation.DispatchQueue)",
			"Metal.MTLSharedEventWrapper::NotifyListener(Metal.MTLSharedEventListener,System.UInt64,Metal.MTLSharedEventNotificationBlock)",
			"Metal.MTLSharedTextureHandle::.ctor(Foundation.NSCoder)",
			"Metal.MTLSharedTextureHandle::EncodeTo(Foundation.NSCoder)",
			"Metal.MTLStageInputOutputDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLStencilDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLStitchedLibraryDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLTexture_Extensions::GetFirstMipmapInTail(Metal.IMTLTexture)",
			"Metal.MTLTexture_Extensions::GetIsSparse(Metal.IMTLTexture)",
			"Metal.MTLTexture_Extensions::GetTailSizeInBytes(Metal.IMTLTexture)",
			"Metal.MTLTextureDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLTextureWrapper::CreateRemoteTexture(Metal.IMTLDevice)",
			"Metal.MTLTileRenderPipelineColorAttachmentDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLTileRenderPipelineColorAttachmentDescriptorArray::SetObject(Metal.MTLTileRenderPipelineColorAttachmentDescriptor,System.UIntPtr)",
			"Metal.MTLTileRenderPipelineDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLTileRenderPipelineDescriptor::set_LinkedFunctions(Metal.MTLLinkedFunctions)",
			"Metal.MTLTileRenderPipelineDescriptor::set_TileFunction(Metal.IMTLFunction)",
			"Metal.MTLVertexAttributeDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLVertexAttributeDescriptorArray::SetObject(Metal.MTLVertexAttributeDescriptor,System.UIntPtr)",
			"Metal.MTLVertexBufferLayoutDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLVertexBufferLayoutDescriptorArray::SetObject(Metal.MTLVertexBufferLayoutDescriptor,System.UIntPtr)",
			"Metal.MTLVertexDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLVertexDescriptor::FromModelIO(ModelIO.MDLVertexDescriptor)",
			"Metal.MTLVertexDescriptor::FromModelIO(ModelIO.MDLVertexDescriptor,Foundation.NSError&)",
			"Metal.MTLVisibleFunctionTableDescriptor::Copy(Foundation.NSZone)",
			"Metal.MTLVisibleFunctionTableWrapper::SetFunction(Metal.IMTLFunctionHandle,System.UIntPtr)",
			"MetalKit.MTKMesh::.ctor(ModelIO.MDLMesh,Metal.IMTLDevice,Foundation.NSError&)",
			"MetalKit.MTKMesh::FromAsset(ModelIO.MDLAsset,Metal.IMTLDevice,Foundation.NSArray&,Foundation.NSError&)",
			"MetalKit.MTKMeshBuffer::Copy(Foundation.NSZone)",
			"MetalKit.MTKMeshBuffer::FillData(Foundation.NSData,System.UIntPtr)",
			"MetalKit.MTKMeshBufferAllocator::.ctor(Metal.IMTLDevice)",
			"MetalKit.MTKMeshBufferAllocator::CreateBuffer(Foundation.NSData,ModelIO.MDLMeshBufferType)",
			"MetalKit.MTKMeshBufferAllocator::CreateBuffer(ModelIO.IMDLMeshBufferZone,Foundation.NSData,ModelIO.MDLMeshBufferType)",
			"MetalKit.MTKMeshBufferAllocator::CreateBuffer(ModelIO.IMDLMeshBufferZone,System.UIntPtr,ModelIO.MDLMeshBufferType)",
			"MetalKit.MTKTextureLoader::.ctor(Metal.IMTLDevice)",
			"MetalKit.MTKTextureLoader::FromCGImage(CoreGraphics.CGImage,Foundation.NSDictionary,Foundation.NSError&)",
			"MetalKit.MTKTextureLoader::FromCGImage(CoreGraphics.CGImage,Foundation.NSDictionary,MetalKit.MTKTextureLoaderCallback)",
			"MetalKit.MTKTextureLoader::FromData(Foundation.NSData,Foundation.NSDictionary,Foundation.NSError&)",
			"MetalKit.MTKTextureLoader::FromData(Foundation.NSData,Foundation.NSDictionary,MetalKit.MTKTextureLoaderCallback)",
			"MetalKit.MTKTextureLoader::FromName(System.String,System.Runtime.InteropServices.NFloat,AppKit.NSDisplayGamut,Foundation.NSBundle,Foundation.NSDictionary,Foundation.NSError&)",
			"MetalKit.MTKTextureLoader::FromName(System.String,System.Runtime.InteropServices.NFloat,AppKit.NSDisplayGamut,Foundation.NSBundle,Foundation.NSDictionary,MetalKit.MTKTextureLoaderCallback)",
			"MetalKit.MTKTextureLoader::FromName(System.String,System.Runtime.InteropServices.NFloat,Foundation.NSBundle,Foundation.NSDictionary,Foundation.NSError&)",
			"MetalKit.MTKTextureLoader::FromName(System.String,System.Runtime.InteropServices.NFloat,Foundation.NSBundle,Foundation.NSDictionary,MetalKit.MTKTextureLoaderCallback)",
			"MetalKit.MTKTextureLoader::FromNames(System.String[],System.Runtime.InteropServices.NFloat,AppKit.NSDisplayGamut,Foundation.NSBundle,Foundation.NSDictionary,MetalKit.MTKTextureLoaderArrayCallback)",
			"MetalKit.MTKTextureLoader::FromNames(System.String[],System.Runtime.InteropServices.NFloat,Foundation.NSBundle,Foundation.NSDictionary,MetalKit.MTKTextureLoaderArrayCallback)",
			"MetalKit.MTKTextureLoader::FromTexture(ModelIO.MDLTexture,Foundation.NSDictionary,Foundation.NSError&)",
			"MetalKit.MTKTextureLoader::FromTexture(ModelIO.MDLTexture,Foundation.NSDictionary,MetalKit.MTKTextureLoaderCallback)",
			"MetalKit.MTKTextureLoader::FromUrl(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"MetalKit.MTKTextureLoader::FromUrl(Foundation.NSUrl,Foundation.NSDictionary,MetalKit.MTKTextureLoaderCallback)",
			"MetalKit.MTKTextureLoader::FromUrls(Foundation.NSUrl[],Foundation.NSDictionary,Foundation.NSError&)",
			"MetalKit.MTKTextureLoader::FromUrls(Foundation.NSUrl[],Foundation.NSDictionary,MetalKit.MTKTextureLoaderArrayCallback)",
			"MetalKit.MTKView::.ctor(CoreGraphics.CGRect,Metal.IMTLDevice)",
			"MetalKit.MTKView::.ctor(Foundation.NSCoder)",
			"MetalKit.MTKView::ActionForLayer(CoreAnimation.CALayer,System.String)",
			"MetalKit.MTKView::DisplayLayer(CoreAnimation.CALayer)",
			"MetalKit.MTKView::DrawLayer(CoreAnimation.CALayer,CoreGraphics.CGContext)",
			"MetalKit.MTKView::EncodeTo(Foundation.NSCoder)",
			"MetalKit.MTKView::LayoutSublayersOfLayer(CoreAnimation.CALayer)",
			"MetalKit.MTKView::set_ColorSpace(CoreGraphics.CGColorSpace)",
			"MetalKit.MTKView::set_Device(Metal.IMTLDevice)",
			"MetalKit.MTKView::WillDrawLayer(CoreAnimation.CALayer)",
			"MetalKit.MTKViewDelegateWrapper::Draw(MetalKit.MTKView)",
			"MetalKit.MTKViewDelegateWrapper::DrawableSizeWillChange(MetalKit.MTKView,CoreGraphics.CGSize)",
			"MetalPerformanceShaders.MPSAccelerationStructure::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSAccelerationStructure::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSAccelerationStructure::.ctor(Foundation.NSCoder,MetalPerformanceShaders.MPSAccelerationStructureGroup)",
			"MetalPerformanceShaders.MPSAccelerationStructure::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSAccelerationStructure::.ctor(MetalPerformanceShaders.MPSAccelerationStructureGroup)",
			"MetalPerformanceShaders.MPSAccelerationStructure::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSAccelerationStructure::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSAccelerationStructure::Copy(Foundation.NSZone,MetalPerformanceShaders.MPSAccelerationStructureGroup)",
			"MetalPerformanceShaders.MPSAccelerationStructure::Encode(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSAccelerationStructure::EncodeRefit(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSAccelerationStructureGroup::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSBinaryImageKernel::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSBinaryImageKernel::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSBinaryImageKernel::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSBinaryImageKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,Foundation.NSObject&,Metal.IMTLTexture,MetalPerformanceShaders.MPSCopyAllocator)",
			"MetalPerformanceShaders.MPSBinaryImageKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,Metal.IMTLTexture,Foundation.NSObject&,MetalPerformanceShaders.MPSCopyAllocator)",
			"MetalPerformanceShaders.MPSBinaryImageKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,Metal.IMTLTexture,Metal.IMTLTexture,Metal.IMTLTexture)",
			"MetalPerformanceShaders.MPSBinaryImageKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnAdd::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnAdd::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnAddGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnAddGradient::.ctor(Metal.IMTLDevice,System.Boolean)",
			"MetalPerformanceShaders.MPSCnnArithmetic::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnArithmetic::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSCnnArithmeticGradientState,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnArithmetic::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,MetalPerformanceShaders.MPSCnnArithmeticGradientState[],Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnArithmeticGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnBatchNormalization::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnBatchNormalization::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnBatchNormalization::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource)",
			"MetalPerformanceShaders.MPSCnnBatchNormalization::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnBatchNormalization::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSCnnBatchNormalizationState,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnBatchNormalization::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,MetalPerformanceShaders.MPSCnnBatchNormalizationState,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnBatchNormalization::GetResultState(MetalPerformanceShaders.MPSImage,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnBatchNormalization::GetTemporaryResultState(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnBatchNormalization::ReloadGammaAndBeta(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnNormalizationGammaAndBetaState)",
			"MetalPerformanceShaders.MPSCnnBatchNormalization::ReloadMeanAndVariance(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnNormalizationMeanAndVarianceState)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationDataSource_Extensions::Copy(MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource,Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationDataSource_Extensions::Encode(MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource,Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationDataSource_Extensions::GetEpsilon(MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationDataSource_Extensions::UpdateGammaAndBeta(MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource,Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnBatchNormalizationState)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationDataSource_Extensions::UpdateGammaAndBeta(MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource,MetalPerformanceShaders.MPSCnnBatchNormalizationState)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationDataSource_Extensions::UpdateMeanAndVariance(MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource,Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnBatchNormalizationState)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationDataSource_Extensions::UpdateMeanAndVariance(MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource,MetalPerformanceShaders.MPSCnnBatchNormalizationState)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationDataSourceWrapper::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationGradient::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationGradient::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSCnnBatchNormalizationState)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationGradient::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSCnnBatchNormalizationState,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationGradient::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,MetalPerformanceShaders.MPSCnnBatchNormalizationState)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationGradient::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,MetalPerformanceShaders.MPSCnnBatchNormalizationState,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationStatistics::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationStatistics::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationStatistics::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationStatistics::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,MetalPerformanceShaders.MPSCnnBatchNormalizationState)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationStatisticsGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationStatisticsGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationStatisticsGradient::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnBatchNormalizationStatisticsGradient::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,MetalPerformanceShaders.MPSCnnBatchNormalizationState)",
			"MetalPerformanceShaders.MPSCnnBinaryConvolution::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnBinaryConvolution::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnBinaryConvolution::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.IMPSCnnConvolutionDataSource,System.Single,MetalPerformanceShaders.MPSCnnBinaryConvolutionType,MetalPerformanceShaders.MPSCnnBinaryConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnBinaryConvolution::InitWithDevice(Metal.IMTLDevice,MetalPerformanceShaders.IMPSCnnConvolutionDataSource,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,MetalPerformanceShaders.MPSCnnBinaryConvolutionType,MetalPerformanceShaders.MPSCnnBinaryConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnBinaryConvolutionNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource,System.Single,MetalPerformanceShaders.MPSCnnBinaryConvolutionType,MetalPerformanceShaders.MPSCnnBinaryConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnBinaryConvolutionNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,MetalPerformanceShaders.MPSCnnBinaryConvolutionType,MetalPerformanceShaders.MPSCnnBinaryConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnBinaryConvolutionNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource,System.Single,MetalPerformanceShaders.MPSCnnBinaryConvolutionType,MetalPerformanceShaders.MPSCnnBinaryConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnBinaryConvolutionNode::InitWithSource(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,MetalPerformanceShaders.MPSCnnBinaryConvolutionType,MetalPerformanceShaders.MPSCnnBinaryConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnBinaryFullyConnected::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnBinaryFullyConnected::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnBinaryFullyConnected::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.IMPSCnnConvolutionDataSource,System.Single,MetalPerformanceShaders.MPSCnnBinaryConvolutionType,MetalPerformanceShaders.MPSCnnBinaryConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnBinaryFullyConnected::InitWithDevice(Metal.IMTLDevice,MetalPerformanceShaders.IMPSCnnConvolutionDataSource,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,MetalPerformanceShaders.MPSCnnBinaryConvolutionType,MetalPerformanceShaders.MPSCnnBinaryConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnBinaryFullyConnectedNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource,System.Single,MetalPerformanceShaders.MPSCnnBinaryConvolutionType,MetalPerformanceShaders.MPSCnnBinaryConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnBinaryFullyConnectedNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,MetalPerformanceShaders.MPSCnnBinaryConvolutionType,MetalPerformanceShaders.MPSCnnBinaryConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnBinaryFullyConnectedNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource,System.Single,MetalPerformanceShaders.MPSCnnBinaryConvolutionType,MetalPerformanceShaders.MPSCnnBinaryConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnBinaryFullyConnectedNode::InitWithSource(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,MetalPerformanceShaders.MPSCnnBinaryConvolutionType,MetalPerformanceShaders.MPSCnnBinaryConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,MetalPerformanceShaders.MPSState[]&,System.Boolean)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSState&,System.Boolean)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::GetDestinationImageDescriptor(Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::GetResultState(MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::GetResultStateBatch(Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>[],Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::GetTemporaryResultState(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::GetTemporaryResultStateBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>[],Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::set_DestinationImageAllocator(MetalPerformanceShaders.IMPSImageAllocator)",
			"MetalPerformanceShaders.MPSCnnBinaryKernel::set_Padding(MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSCnnConvolution::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnConvolution::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnConvolution::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolution::ExportWeightsAndBiases(Metal.IMTLCommandBuffer,System.Boolean)",
			"MetalPerformanceShaders.MPSCnnConvolution::GetResultState(MetalPerformanceShaders.MPSImage,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnConvolution::GetResultStateBatch(Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>[],Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnConvolution::GetTemporaryResultState(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnConvolution::GetTemporaryResultStateBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>[],Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnConvolution::InitWithDevice(Metal.IMTLDevice,MetalPerformanceShaders.MPSCnnConvolutionDescriptor,System.IntPtr,System.IntPtr,MetalPerformanceShaders.MPSCnnConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnConvolution::ReloadWeightsAndBiases(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState)",
			"MetalPerformanceShaders.MPSCnnConvolution::ReloadWeightsAndBiases(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionDataSource_Extensions::Copy(MetalPerformanceShaders.IMPSCnnConvolutionDataSource,Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnConvolutionDataSource_Extensions::GetKernelWeightsDataType(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionDataSource_Extensions::GetLookupTableForUInt8Kernel(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionDataSource_Extensions::GetRangesForUInt8Kernel(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionDataSource_Extensions::GetWeightsQuantizationType(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionDataSource_Extensions::Update(MetalPerformanceShaders.IMPSCnnConvolutionDataSource,Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnConvolutionGradientState,MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState)",
			"MetalPerformanceShaders.MPSCnnConvolutionDataSource_Extensions::Update(MetalPerformanceShaders.IMPSCnnConvolutionDataSource,MetalPerformanceShaders.MPSCnnConvolutionGradientState,MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState)",
			"MetalPerformanceShaders.MPSCnnConvolutionDataSourceWrapper::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSCnnConvolutionDescriptor::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnConvolutionDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSCnnConvolutionDescriptor::EncodeTo(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnConvolutionDescriptor::GetConvolutionDescriptor(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,MetalPerformanceShaders.MPSCnnNeuron)",
			"MetalPerformanceShaders.MPSCnnConvolutionDescriptor::set_FusedNeuronDescriptor(MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnConvolutionDescriptor::set_Neuron(MetalPerformanceShaders.MPSCnnNeuron)",
			"MetalPerformanceShaders.MPSCnnConvolutionDescriptor::SetNeuronToPReLU(Foundation.NSData)",
			"MetalPerformanceShaders.MPSCnnConvolutionGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnConvolutionGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnConvolutionGradient::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionGradient::ReloadWeightsAndBiases(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState)",
			"MetalPerformanceShaders.MPSCnnConvolutionGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSCnnConvolutionGradientStateNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSCnnConvolutionGradientStateNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionTranspose::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnConvolutionTranspose::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnConvolutionTranspose::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionTranspose::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,MetalPerformanceShaders.MPSCnnConvolutionGradientState[])",
			"MetalPerformanceShaders.MPSCnnConvolutionTranspose::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,MetalPerformanceShaders.MPSCnnConvolutionGradientState[],Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnConvolutionTranspose::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSCnnConvolutionGradientState)",
			"MetalPerformanceShaders.MPSCnnConvolutionTranspose::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSCnnConvolutionGradientState,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnConvolutionTransposeNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSCnnConvolutionGradientStateNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionTransposeNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSCnnConvolutionGradientStateNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState::.ctor(Metal.IMTLBuffer,Metal.IMTLBuffer)",
			"MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSCnnConvolutionDescriptor)",
			"MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState::GetTemporaryCnnConvolutionWeightsAndBiasesState(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnConvolutionDescriptor)",
			"MetalPerformanceShaders.MPSCnnCrossChannelNormalization::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnCrossChannelNormalization::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnCrossChannelNormalization::.ctor(Metal.IMTLDevice,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnCrossChannelNormalizationGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnCrossChannelNormalizationGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnCrossChannelNormalizationGradient::.ctor(Metal.IMTLDevice,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnCrossChannelNormalizationGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnCrossChannelNormalizationGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnCrossChannelNormalizationNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnCrossChannelNormalizationNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnCrossChannelNormalizationNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnDepthWiseConvolutionDescriptor::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMax::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMax::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMaxGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMaxGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMaxGradient::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMaxGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMaxGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMaxNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMaxNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMaxNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMaxNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnDilatedPoolingMaxNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnDivide::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnDivide::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnDropout::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnDropout::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnDropout::.ctor(Metal.IMTLDevice,System.Single,System.UIntPtr,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSCnnDropoutGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnDropoutGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnDropoutGradient::.ctor(Metal.IMTLDevice,System.Single,System.UIntPtr,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSCnnDropoutGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.Single,System.UIntPtr,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSCnnDropoutGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.Single,System.UIntPtr,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSCnnDropoutNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnDropoutNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.Single)",
			"MetalPerformanceShaders.MPSCnnDropoutNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.UIntPtr,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSCnnDropoutNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnDropoutNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.Single)",
			"MetalPerformanceShaders.MPSCnnDropoutNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.UIntPtr,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSCnnFullyConnected::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnFullyConnected::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnFullyConnected::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnFullyConnected::InitWithDevice(Metal.IMTLDevice,MetalPerformanceShaders.MPSCnnConvolutionDescriptor,System.IntPtr,System.IntPtr,MetalPerformanceShaders.MPSCnnConvolutionFlags)",
			"MetalPerformanceShaders.MPSCnnFullyConnectedGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnFullyConnectedGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnFullyConnectedGradient::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnFullyConnectedNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnFullyConnectedNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSCnnGradientKernel::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnGradientKernel::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnGradientKernel::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnGradientKernel::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSState)",
			"MetalPerformanceShaders.MPSCnnGradientKernel::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSState,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnGradientKernel::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>)",
			"MetalPerformanceShaders.MPSCnnGradientKernel::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalization::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalization::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalization::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.IMPSCnnInstanceNormalizationDataSource)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalization::GetResultState(MetalPerformanceShaders.MPSImage,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalization::GetTemporaryResultState(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalization::ReloadDataSource(MetalPerformanceShaders.IMPSCnnInstanceNormalizationDataSource)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalization::ReloadGammaAndBeta(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnNormalizationGammaAndBetaState)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationDataSource_Extensions::Copy(MetalPerformanceShaders.IMPSCnnInstanceNormalizationDataSource,Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationDataSource_Extensions::Encode(MetalPerformanceShaders.IMPSCnnInstanceNormalizationDataSource,Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationDataSource_Extensions::GetEpsilon(MetalPerformanceShaders.IMPSCnnInstanceNormalizationDataSource)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationDataSource_Extensions::UpdateGammaAndBeta(MetalPerformanceShaders.IMPSCnnInstanceNormalizationDataSource,Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnInstanceNormalizationGradientState[])",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationDataSource_Extensions::UpdateGammaAndBeta(MetalPerformanceShaders.IMPSCnnInstanceNormalizationDataSource,MetalPerformanceShaders.MPSCnnInstanceNormalizationGradientState[])",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationDataSourceWrapper::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationGradient::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnInstanceNormalizationDataSource)",
			"MetalPerformanceShaders.MPSCnnInstanceNormalizationNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSCnnInstanceNormalizationDataSource)",
			"MetalPerformanceShaders.MPSCnnKernel::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnKernel::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnKernel::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnKernel::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnKernel::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnKernel::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>&,System.Boolean)",
			"MetalPerformanceShaders.MPSCnnKernel::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSState&,System.Boolean)",
			"MetalPerformanceShaders.MPSCnnKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSState,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnKernel::GetDestinationImageDescriptor(Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>)",
			"MetalPerformanceShaders.MPSCnnKernel::GetResultState(MetalPerformanceShaders.MPSImage,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnKernel::GetResultStateBatch(Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>[],Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnKernel::GetTemporaryResultState(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnKernel::GetTemporaryResultStateBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>[],Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnKernel::set_DestinationImageAllocator(MetalPerformanceShaders.IMPSImageAllocator)",
			"MetalPerformanceShaders.MPSCnnKernel::set_Padding(MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSCnnLocalContrastNormalization::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnLocalContrastNormalization::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnLocalContrastNormalization::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnLocalContrastNormalizationGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnLocalContrastNormalizationGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnLocalContrastNormalizationGradient::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnLocalContrastNormalizationGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnLocalContrastNormalizationGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnLocalContrastNormalizationNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnLocalContrastNormalizationNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnLocalContrastNormalizationNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnLogSoftMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnLogSoftMax::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnLogSoftMaxGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnLogSoftMaxGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnLogSoftMaxGradient::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnLogSoftMaxGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSCnnLogSoftMaxGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSCnnLogSoftMaxNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnLogSoftMaxNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnLoss::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnLoss::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnLoss::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSCnnLoss::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSCnnLossLabels)",
			"MetalPerformanceShaders.MPSCnnLoss::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSCnnLossLabels,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnLoss::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSCnnLossLabels>)",
			"MetalPerformanceShaders.MPSCnnLoss::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSCnnLossLabels>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnLossDataDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSCnnLossDataDescriptor::Create(Foundation.NSData,MetalPerformanceShaders.MPSDataLayout,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSCnnLossDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSCnnLossLabels::.ctor(Metal.IMTLDevice,Metal.MTLSize,MetalPerformanceShaders.MPSCnnLossDataDescriptor,MetalPerformanceShaders.MPSCnnLossDataDescriptor)",
			"MetalPerformanceShaders.MPSCnnLossLabels::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSCnnLossDataDescriptor)",
			"MetalPerformanceShaders.MPSCnnLossNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSCnnLossNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSCnnMultiply::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnMultiply::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnMultiplyGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnMultiplyGradient::.ctor(Metal.IMTLDevice,System.Boolean)",
			"MetalPerformanceShaders.MPSCnnNeuron::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuron::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnNeuron::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnNeuron::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronAbsolute::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronAbsolute::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnNeuronAbsolute::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronAbsoluteNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronAbsoluteNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronElu::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronElu::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronElu::.ctor(Metal.IMTLDevice,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronEluNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronEluNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronEluNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronEluNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronExponential::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronExponential::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronExponential::.ctor(Metal.IMTLDevice,System.Single,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronExponentialNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronExponentialNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronExponentialNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronExponentialNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnNeuronGradient::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronHardSigmoid::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronHardSigmoid::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronHardSigmoid::.ctor(Metal.IMTLDevice,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronHardSigmoidNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronHardSigmoidNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronHardSigmoidNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronHardSigmoidNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronLinear::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronLinear::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronLinear::.ctor(Metal.IMTLDevice,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronLinearNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronLinearNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronLinearNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronLinearNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronLogarithm::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronLogarithm::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronLogarithm::.ctor(Metal.IMTLDevice,System.Single,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronLogarithmNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronLogarithmNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronLogarithmNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronLogarithmNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronPower::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronPower::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronPower::.ctor(Metal.IMTLDevice,System.Single,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronPowerNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronPowerNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronPowerNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronPowerNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronPReLU::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronPReLU::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnNeuronPReLU::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronPReLU::InitWithDevice(Metal.IMTLDevice,System.IntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnNeuronPReLUNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,Foundation.NSData)",
			"MetalPerformanceShaders.MPSCnnNeuronPReLUNode::Create(MetalPerformanceShaders.MPSNNImageNode,Foundation.NSData)",
			"MetalPerformanceShaders.MPSCnnNeuronReLU::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronReLU::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronReLU::.ctor(Metal.IMTLDevice,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronReLun::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronReLun::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronReLun::.ctor(Metal.IMTLDevice,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronReLunNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronReLunNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronReLunNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronReLunNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronReLUNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronReLUNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronReLUNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronReLUNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronSigmoid::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronSigmoid::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnNeuronSigmoid::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronSigmoidNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronSigmoidNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronSoftPlus::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronSoftPlus::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronSoftPlus::.ctor(Metal.IMTLDevice,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronSoftPlusNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronSoftPlusNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronSoftPlusNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronSoftPlusNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronSoftSign::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronSoftSign::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnNeuronSoftSign::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronSoftSignNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronSoftSignNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronTanH::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnNeuronTanH::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNNeuronDescriptor)",
			"MetalPerformanceShaders.MPSCnnNeuronTanH::.ctor(Metal.IMTLDevice,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronTanHNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronTanHNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNeuronTanHNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNeuronTanHNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.Single,System.Single)",
			"MetalPerformanceShaders.MPSCnnNormalizationGammaAndBetaState::.ctor(Metal.IMTLBuffer,Metal.IMTLBuffer)",
			"MetalPerformanceShaders.MPSCnnNormalizationGammaAndBetaState::GetTemporaryState(Metal.IMTLCommandBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnNormalizationMeanAndVarianceState::.ctor(Metal.IMTLBuffer,Metal.IMTLBuffer)",
			"MetalPerformanceShaders.MPSCnnNormalizationMeanAndVarianceState::GetTemporaryState(Metal.IMTLCommandBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnNormalizationNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnNormalizationNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnPooling::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnPooling::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnPooling::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPooling::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingAverage::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnPoolingAverage::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnPoolingAverage::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingAverageGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnPoolingAverageGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnPoolingAverageGradient::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingAverageGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSCnnPoolingAverageGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSCnnPoolingAverageNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingAverageNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingAverageNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnPoolingGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnPoolingGradient::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingGradient::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSCnnPoolingGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSCnnPoolingL2Norm::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnPoolingL2Norm::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnPoolingL2Norm::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingL2NormGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnPoolingL2NormGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnPoolingL2NormGradient::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingL2NormGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSCnnPoolingL2NormGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSCnnPoolingL2NormNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingL2NormNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingL2NormNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnPoolingMax::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnPoolingMax::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingMaxGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnPoolingMaxGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnPoolingMaxGradient::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingMaxGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSCnnPoolingMaxGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSCnnPoolingMaxNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingMaxNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingMaxNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnPoolingNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnSoftMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnSoftMax::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnSoftMaxGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnSoftMaxGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnSoftMaxGradient::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnSoftMaxGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSCnnSoftMaxGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSCnnSoftMaxNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnSoftMaxNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnSpatialNormalization::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnSpatialNormalization::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnSpatialNormalization::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnSpatialNormalizationGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnSpatialNormalizationGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnSpatialNormalizationGradient::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnSpatialNormalizationGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnSpatialNormalizationGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnSpatialNormalizationNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSCnnSpatialNormalizationNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnSpatialNormalizationNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnSubPixelConvolutionDescriptor::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnSubtract::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnSubtract::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnSubtractGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnSubtractGradient::.ctor(Metal.IMTLDevice,System.Boolean)",
			"MetalPerformanceShaders.MPSCnnUpsampling::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnUpsampling::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnUpsamplingBilinear::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnUpsamplingBilinear::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnUpsamplingBilinear::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.Boolean)",
			"MetalPerformanceShaders.MPSCnnUpsamplingBilinearGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnUpsamplingBilinearGradient::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnUpsamplingBilinearGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.Double,System.Double)",
			"MetalPerformanceShaders.MPSCnnUpsamplingBilinearGradientNode::NodeWithSourceGradient(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.Double,System.Double)",
			"MetalPerformanceShaders.MPSCnnUpsamplingBilinearNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnUpsamplingBilinearNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr,System.Boolean)",
			"MetalPerformanceShaders.MPSCnnUpsamplingBilinearNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnUpsamplingBilinearNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr,System.Boolean)",
			"MetalPerformanceShaders.MPSCnnUpsamplingGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnUpsamplingGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnUpsamplingGradient::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnUpsamplingNearest::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnUpsamplingNearest::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnUpsamplingNearestGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnUpsamplingNearestGradient::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnUpsamplingNearestGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.Double,System.Double)",
			"MetalPerformanceShaders.MPSCnnUpsamplingNearestGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,System.Double,System.Double)",
			"MetalPerformanceShaders.MPSCnnUpsamplingNearestNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnUpsamplingNearestNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnYoloLoss::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSCnnYoloLoss::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSCnnYoloLoss::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSCnnYoloLossDescriptor)",
			"MetalPerformanceShaders.MPSCnnYoloLoss::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSCnnLossLabels)",
			"MetalPerformanceShaders.MPSCnnYoloLoss::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSCnnLossLabels,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSCnnYoloLoss::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSCnnLossLabels>)",
			"MetalPerformanceShaders.MPSCnnYoloLoss::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSCnnLossLabels>,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSCnnYoloLossDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSCnnYoloLossDescriptor::Create(MetalPerformanceShaders.MPSCnnLossType,MetalPerformanceShaders.MPSCnnLossType,MetalPerformanceShaders.MPSCnnLossType,MetalPerformanceShaders.MPSCnnLossType,MetalPerformanceShaders.MPSCnnReductionType,Foundation.NSData,System.UIntPtr)",
			"MetalPerformanceShaders.MPSCnnYoloLossDescriptor::set_AnchorBoxes(Foundation.NSData)",
			"MetalPerformanceShaders.MPSCnnYoloLossDescriptor::set_ClassesLossDescriptor(MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSCnnYoloLossDescriptor::set_ConfidenceLossDescriptor(MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSCnnYoloLossDescriptor::set_WHLossDescriptor(MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSCnnYoloLossDescriptor::set_XYLossDescriptor(MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSCnnYoloLossNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSCnnYoloLossDescriptor)",
			"MetalPerformanceShaders.MPSCnnYoloLossNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSCnnYoloLossDescriptor)",
			"MetalPerformanceShaders.MPSCommandBuffer::.ctor(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSCommandBuffer::Create(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSCommandBuffer::Create(Metal.IMTLCommandQueue)",
			"MetalPerformanceShaders.MPSCommandBuffer::CreateBlitCommandEncoder(Metal.MTLBlitPassDescriptor)",
			"MetalPerformanceShaders.MPSCommandBuffer::CreateComputeCommandEncoder(Metal.MTLComputePassDescriptor)",
			"MetalPerformanceShaders.MPSCommandBuffer::CreateParallelRenderCommandEncoder(Metal.MTLRenderPassDescriptor)",
			"MetalPerformanceShaders.MPSCommandBuffer::CreateRenderCommandEncoder(Metal.MTLRenderPassDescriptor)",
			"MetalPerformanceShaders.MPSCommandBuffer::CreateResourceStateCommandEncoder(Metal.MTLResourceStatePassDescriptor)",
			"MetalPerformanceShaders.MPSCommandBuffer::EncodeSignal(Metal.IMTLEvent,System.UInt64)",
			"MetalPerformanceShaders.MPSCommandBuffer::EncodeWait(Metal.IMTLEvent,System.UInt64)",
			"MetalPerformanceShaders.MPSCommandBuffer::PresentDrawable(Metal.IMTLDrawable)",
			"MetalPerformanceShaders.MPSCommandBuffer::PresentDrawable(Metal.IMTLDrawable,System.Double)",
			"MetalPerformanceShaders.MPSCommandBuffer::PresentDrawableAfter(Metal.IMTLDrawable,System.Double)",
			"MetalPerformanceShaders.MPSCommandBuffer::set_HeapProvider(MetalPerformanceShaders.IMPSHeapProvider)",
			"MetalPerformanceShaders.MPSCommandBuffer::set_Predicate(MetalPerformanceShaders.MPSPredicate)",
			"MetalPerformanceShaders.MPSGRUDescriptor::set_InputGateInputWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSGRUDescriptor::set_InputGateRecurrentWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSGRUDescriptor::set_OutputGateInputGateWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSGRUDescriptor::set_OutputGateInputWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSGRUDescriptor::set_OutputGateRecurrentWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSGRUDescriptor::set_RecurrentGateInputWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSGRUDescriptor::set_RecurrentGateRecurrentWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSHandleWrapper::EncodeTo(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSHeapProvider_Extensions::RetireHeap(MetalPerformanceShaders.IMPSHeapProvider,Metal.IMTLHeap,System.Double)",
			"MetalPerformanceShaders.MPSHeapProviderWrapper::GetNewHeap(Metal.MTLHeapDescriptor)",
			"MetalPerformanceShaders.MPSImage::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSImageDescriptor)",
			"MetalPerformanceShaders.MPSImage::.ctor(Metal.IMTLTexture,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImage::.ctor(MetalPerformanceShaders.MPSImage,Foundation.NSRange,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImage::Synchronize(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSImageAdd::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageAdd::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageAllocator_Extensions::GetImageBatch(MetalPerformanceShaders.IMPSImageAllocator,Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImageDescriptor,MetalPerformanceShaders.MPSKernel,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImageAllocatorWrapper::EncodeTo(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageAllocatorWrapper::GetImage(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImageDescriptor,MetalPerformanceShaders.MPSKernel)",
			"MetalPerformanceShaders.MPSImageAreaMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageAreaMax::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageAreaMax::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImageAreaMin::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageAreaMin::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImageArithmetic::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageArithmetic::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageBatch::GetResourceSize(Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSImageBatch::IncrementReadCount(Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageBatch::Synchronize(Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSImageBilinearScale::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageBilinearScale::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageBilinearScale::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageBox::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageBox::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageBox::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImageConversion::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageConversion::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageConversion::InitWithDevice(Metal.IMTLDevice,MetalPerformanceShaders.MPSAlphaType,MetalPerformanceShaders.MPSAlphaType,System.IntPtr,CoreGraphics.CGColorConversionInfo)",
			"MetalPerformanceShaders.MPSImageConvolution::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageConvolution::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageConvolution::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageConvolution::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageCopyToMatrix::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageCopyToMatrix::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageCopyToMatrix::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSDataLayout)",
			"MetalPerformanceShaders.MPSImageCopyToMatrix::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSImageCopyToMatrix::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSImageDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSImageDilate::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageDilate::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageDilate::InitWithDevice(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageDivide::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageDivide::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageErode::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageErode::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageEuclideanDistanceTransform::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageEuclideanDistanceTransform::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageEuclideanDistanceTransform::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageFindKeypoints::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageFindKeypoints::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageFindKeypoints::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSImageKeypointRangeInfo)",
			"MetalPerformanceShaders.MPSImageFindKeypoints::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,Metal.IMTLTexture,Metal.MTLRegion,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImageGaussianBlur::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageGaussianBlur::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageGaussianBlur::.ctor(Metal.IMTLDevice,System.Single)",
			"MetalPerformanceShaders.MPSImageGaussianPyramid::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageGaussianPyramid::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageGaussianPyramid::InitWithDevice(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageGuidedFilter::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageGuidedFilter::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageGuidedFilter::.ctor(Metal.IMTLDevice,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImageGuidedFilter::EncodeReconstruction(Metal.IMTLCommandBuffer,Metal.IMTLTexture,Metal.IMTLTexture,Metal.IMTLTexture)",
			"MetalPerformanceShaders.MPSImageGuidedFilter::EncodeRegression(Metal.IMTLCommandBuffer,Metal.IMTLTexture,Metal.IMTLTexture,Metal.IMTLTexture,Metal.IMTLTexture)",
			"MetalPerformanceShaders.MPSImageHistogram::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageHistogram::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageHistogram::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSImageHistogramInfo&)",
			"MetalPerformanceShaders.MPSImageHistogram::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,Metal.IMTLTexture,Metal.IMTLBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImageHistogramEqualization::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageHistogramEqualization::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageHistogramEqualization::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSImageHistogramInfo&)",
			"MetalPerformanceShaders.MPSImageHistogramEqualization::EncodeTransformToCommandBuffer(Metal.IMTLCommandBuffer,Metal.IMTLTexture,Metal.IMTLBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImageHistogramSpecification::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageHistogramSpecification::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageHistogramSpecification::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSImageHistogramInfo&)",
			"MetalPerformanceShaders.MPSImageHistogramSpecification::EncodeTransformToCommandBuffer(Metal.IMTLCommandBuffer,Metal.IMTLTexture,Metal.IMTLBuffer,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImageIntegral::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageIntegral::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageIntegral::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageIntegralOfSquares::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageIntegralOfSquares::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageIntegralOfSquares::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageLanczosScale::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageLanczosScale::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageLanczosScale::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageLaplacian::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageLaplacian::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageLaplacian::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramid::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramid::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramid::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramid::.ctor(Metal.IMTLDevice,System.Single)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramid::InitWithDevice(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramidAdd::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramidAdd::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramidAdd::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramidAdd::.ctor(Metal.IMTLDevice,System.Single)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramidAdd::InitWithDevice(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramidSubtract::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramidSubtract::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramidSubtract::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramidSubtract::.ctor(Metal.IMTLDevice,System.Single)",
			"MetalPerformanceShaders.MPSImageLaplacianPyramidSubtract::InitWithDevice(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageMedian::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageMedian::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageMedian::.ctor(Metal.IMTLDevice,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImageMultiply::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageMultiply::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageNormalizedHistogram::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageNormalizedHistogram::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageNormalizedHistogram::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSImageHistogramInfo&)",
			"MetalPerformanceShaders.MPSImageNormalizedHistogram::Encode(Metal.IMTLCommandBuffer,Metal.IMTLTexture,Metal.IMTLTexture,Metal.IMTLBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImagePyramid::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImagePyramid::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImagePyramid::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImagePyramid::.ctor(Metal.IMTLDevice,System.Single)",
			"MetalPerformanceShaders.MPSImagePyramid::InitWithDevice(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageReduceColumnMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageReduceColumnMax::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageReduceColumnMean::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageReduceColumnMean::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageReduceColumnMin::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageReduceColumnMin::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageReduceColumnSum::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageReduceColumnSum::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageReduceRowMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageReduceRowMax::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageReduceRowMean::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageReduceRowMean::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageReduceRowMin::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageReduceRowMin::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageReduceRowSum::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageReduceRowSum::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageReduceUnary::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageScale::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageScale::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageScale::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageSobel::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageSobel::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageSobel::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageSobel::InitWithDevice(Metal.IMTLDevice,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageStatisticsMean::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageStatisticsMean::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageStatisticsMean::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageStatisticsMeanAndVariance::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageStatisticsMeanAndVariance::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageStatisticsMeanAndVariance::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageStatisticsMinAndMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageStatisticsMinAndMax::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageStatisticsMinAndMax::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageSubtract::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageSubtract::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageTent::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageTent::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSImageThresholdBinary::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageThresholdBinary::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageThresholdBinary::InitWithDevice(Metal.IMTLDevice,System.Single,System.Single,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageThresholdBinaryInverse::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageThresholdBinaryInverse::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageThresholdBinaryInverse::InitWithDevice(Metal.IMTLDevice,System.Single,System.Single,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageThresholdToZero::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageThresholdToZero::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageThresholdToZero::InitWithDevice(Metal.IMTLDevice,System.Single,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageThresholdToZeroInverse::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageThresholdToZeroInverse::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageThresholdToZeroInverse::InitWithDevice(Metal.IMTLDevice,System.Single,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageThresholdTruncate::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageThresholdTruncate::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageThresholdTruncate::InitWithDevice(Metal.IMTLDevice,System.Single,System.IntPtr)",
			"MetalPerformanceShaders.MPSImageTransformProviderWrapper::EncodeTo(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageTransformProviderWrapper::GetTransform(MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.IMPSHandle)",
			"MetalPerformanceShaders.MPSImageTranspose::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSImageTranspose::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSImageTranspose::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSInstanceAccelerationStructure::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSInstanceAccelerationStructure::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSInstanceAccelerationStructure::.ctor(Foundation.NSCoder,MetalPerformanceShaders.MPSAccelerationStructureGroup)",
			"MetalPerformanceShaders.MPSInstanceAccelerationStructure::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSInstanceAccelerationStructure::.ctor(MetalPerformanceShaders.MPSAccelerationStructureGroup)",
			"MetalPerformanceShaders.MPSInstanceAccelerationStructure::set_InstanceBuffer(Metal.IMTLBuffer)",
			"MetalPerformanceShaders.MPSInstanceAccelerationStructure::set_MaskBuffer(Metal.IMTLBuffer)",
			"MetalPerformanceShaders.MPSInstanceAccelerationStructure::set_TransformBuffer(Metal.IMTLBuffer)",
			"MetalPerformanceShaders.MPSKernel::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSKernel::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSKernel::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSKernel::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSKernel::CopyWithZone(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSKernel::EncodeTo(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSKernel::HintTemporaryMemoryHighWaterMark(Metal.IMTLCommandBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSKernel::SetHeapCacheDuration(Metal.IMTLCommandBuffer,System.Double)",
			"MetalPerformanceShaders.MPSKernel::Supports(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSKeyedUnarchiver::.ctor(Foundation.NSData,Metal.IMTLDevice,Foundation.NSError&)",
			"MetalPerformanceShaders.MPSKeyedUnarchiver::GetUnarchivedObject(Foundation.NSSet`1<ObjCRuntime.Class>,Foundation.NSData,Metal.IMTLDevice,Foundation.NSError&)",
			"MetalPerformanceShaders.MPSKeyedUnarchiver::GetUnarchivedObject(ObjCRuntime.Class,Foundation.NSData,Metal.IMTLDevice,Foundation.NSError&)",
			"MetalPerformanceShaders.MPSLSTMDescriptor::set_CellGateInputWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSLSTMDescriptor::set_CellGateMemoryWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSLSTMDescriptor::set_CellGateRecurrentWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSLSTMDescriptor::set_ForgetGateInputWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSLSTMDescriptor::set_ForgetGateMemoryWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSLSTMDescriptor::set_ForgetGateRecurrentWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSLSTMDescriptor::set_InputGateInputWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSLSTMDescriptor::set_InputGateMemoryWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSLSTMDescriptor::set_InputGateRecurrentWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSLSTMDescriptor::set_OutputGateInputWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSLSTMDescriptor::set_OutputGateMemoryWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSLSTMDescriptor::set_OutputGateRecurrentWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSMatrix::.ctor(Metal.IMTLBuffer,MetalPerformanceShaders.MPSMatrixDescriptor)",
			"MetalPerformanceShaders.MPSMatrix::.ctor(Metal.IMTLBuffer,System.UIntPtr,MetalPerformanceShaders.MPSMatrixDescriptor)",
			"MetalPerformanceShaders.MPSMatrix::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSMatrixDescriptor)",
			"MetalPerformanceShaders.MPSMatrix::Synchronize(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSMatrixBatchNormalization::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixBatchNormalization::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixBatchNormalization::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixBatchNormalization::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixBatchNormalization::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSMatrixBatchNormalizationGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixBatchNormalizationGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixBatchNormalizationGradient::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixBatchNormalizationGradient::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixBatchNormalizationGradient::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector)",
			"MetalPerformanceShaders.MPSMatrixBinaryKernel::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixBinaryKernel::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixBinaryKernel::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixCopy::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixCopy::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixCopy::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.Boolean,System.Boolean)",
			"MetalPerformanceShaders.MPSMatrixCopy::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrixCopyDescriptor)",
			"MetalPerformanceShaders.MPSMatrixCopy::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrixCopyDescriptor,MetalPerformanceShaders.MPSVector,System.UIntPtr,MetalPerformanceShaders.MPSVector,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixCopyDescriptor::.ctor(Metal.IMTLDevice,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixCopyDescriptor::.ctor(MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSVector,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixCopyDescriptor::Create(MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrixCopyOffsets)",
			"MetalPerformanceShaders.MPSMatrixCopyDescriptor::SetCopyOperation(System.UIntPtr,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrixCopyOffsets)",
			"MetalPerformanceShaders.MPSMatrixCopyToImage::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixCopyToImage::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixCopyToImage::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSDataLayout)",
			"MetalPerformanceShaders.MPSMatrixCopyToImage::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShaders.MPSMatrixCopyToImage::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSMatrixDecompositionCholesky::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixDecompositionCholesky::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixDecompositionCholesky::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixDecompositionCholesky::.ctor(Metal.IMTLDevice,System.Boolean,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixDecompositionCholesky::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,Metal.IMTLBuffer)",
			"MetalPerformanceShaders.MPSMatrixDecompositionLU::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixDecompositionLU::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixDecompositionLU::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixDecompositionLU::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixDecompositionLU::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,Metal.IMTLBuffer)",
			"MetalPerformanceShaders.MPSMatrixFindTopK::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixFindTopK::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixFindTopK::.ctor(Metal.IMTLDevice,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixFindTopK::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixFindTopK::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSMatrixFullyConnected::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixFullyConnected::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixFullyConnected::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixFullyConnected::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixFullyConnected::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSMatrixFullyConnectedGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixFullyConnectedGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixFullyConnectedGradient::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixFullyConnectedGradient::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixFullyConnectedGradient::EncodeGradientForData(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSMatrixFullyConnectedGradient::EncodeGradientForWeightsAndBias(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSVector)",
			"MetalPerformanceShaders.MPSMatrixLogSoftMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixLogSoftMax::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixLogSoftMax::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixLogSoftMaxGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixLogSoftMaxGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixLogSoftMaxGradient::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixMultiplication::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixMultiplication::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixMultiplication::.ctor(Metal.IMTLDevice,System.Boolean,System.Boolean,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Double,System.Double)",
			"MetalPerformanceShaders.MPSMatrixMultiplication::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixMultiplication::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSMatrixNeuron::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixNeuron::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixNeuron::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixNeuron::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixNeuron::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSMatrixNeuron::SetNeuronToPReLU(Foundation.NSData)",
			"MetalPerformanceShaders.MPSMatrixNeuronGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixNeuronGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixNeuronGradient::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixNeuronGradient::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixNeuronGradient::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSVector)",
			"MetalPerformanceShaders.MPSMatrixNeuronGradient::SetNeuronToPReLU(Foundation.NSData)",
			"MetalPerformanceShaders.MPSMatrixRandom::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixRandom::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSMatrixRandom::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSVector)",
			"MetalPerformanceShaders.MPSMatrixRandomDistributionDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSMatrixRandomMtgp32::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixRandomMtgp32::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixRandomMtgp32::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixRandomMtgp32::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSDataType,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixRandomMtgp32::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSDataType,System.UIntPtr,MetalPerformanceShaders.MPSMatrixRandomDistributionDescriptor)",
			"MetalPerformanceShaders.MPSMatrixRandomMtgp32::Synchronize(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSMatrixRandomPhilox::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixRandomPhilox::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixRandomPhilox::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixRandomPhilox::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSDataType,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixRandomPhilox::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSDataType,System.UIntPtr,MetalPerformanceShaders.MPSMatrixRandomDistributionDescriptor)",
			"MetalPerformanceShaders.MPSMatrixSoftMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixSoftMax::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSoftMax::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSoftMax::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSoftMax::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSMatrixSoftMaxGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixSoftMaxGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSoftMaxGradient::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSoftMaxGradient::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSoftMaxGradient::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSMatrixSolveCholesky::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixSolveCholesky::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSolveCholesky::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSolveCholesky::.ctor(Metal.IMTLDevice,System.Boolean,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixSolveCholesky::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSMatrixSolveLU::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixSolveLU::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSolveLU::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSolveLU::.ctor(Metal.IMTLDevice,System.Boolean,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixSolveLU::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSMatrixSolveTriangular::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixSolveTriangular::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSolveTriangular::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSolveTriangular::.ctor(Metal.IMTLDevice,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UIntPtr,System.UIntPtr,System.Double)",
			"MetalPerformanceShaders.MPSMatrixSolveTriangular::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShaders.MPSMatrixSum::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixSum::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixSum::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Boolean)",
			"MetalPerformanceShaders.MPSMatrixSum::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixUnaryKernel::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixUnaryKernel::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixUnaryKernel::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixVectorMultiplication::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSMatrixVectorMultiplication::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixVectorMultiplication::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSMatrixVectorMultiplication::.ctor(Metal.IMTLDevice,System.Boolean,System.UIntPtr,System.UIntPtr,System.Double,System.Double)",
			"MetalPerformanceShaders.MPSMatrixVectorMultiplication::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSMatrixVectorMultiplication::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector)",
			"MetalPerformanceShaders.MPSNDArray::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNDArrayDescriptor)",
			"MetalPerformanceShaders.MPSNDArray::.ctor(Metal.IMTLDevice,System.Double)",
			"MetalPerformanceShaders.MPSNDArray::Create(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSNDArrayDescriptor,MetalPerformanceShaders.MPSAliasingStrategy)",
			"MetalPerformanceShaders.MPSNDArray::ExportData(Metal.IMTLCommandBuffer,Metal.IMTLBuffer,MetalPerformanceShaders.MPSDataType,System.UIntPtr,System.IntPtr)",
			"MetalPerformanceShaders.MPSNDArray::ExportData(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage[],MetalPerformanceShaders.MPSImageCoordinate)",
			"MetalPerformanceShaders.MPSNDArray::ImportData(Metal.IMTLCommandBuffer,Metal.IMTLBuffer,MetalPerformanceShaders.MPSDataType,System.UIntPtr,System.IntPtr)",
			"MetalPerformanceShaders.MPSNDArray::ImportData(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage[],MetalPerformanceShaders.MPSImageCoordinate)",
			"MetalPerformanceShaders.MPSNDArray::Synchronize(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSNDArrayAllocatorWrapper::AllocateArray(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSNDArrayDescriptor,MetalPerformanceShaders.MPSKernel)",
			"MetalPerformanceShaders.MPSNDArrayAllocatorWrapper::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSNDArrayAllocatorWrapper::EncodeTo(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNAdditionGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNBinaryGradientStateNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNAdditionGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode[],MetalPerformanceShaders.MPSNNFilterNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNAdditionGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNBinaryGradientStateNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNAdditionNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNArithmeticGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNBinaryGradientStateNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNArithmeticGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode[],MetalPerformanceShaders.MPSNNFilterNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNArithmeticGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNBinaryGradientStateNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNBilinearScaleNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSNNBilinearScaleNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSImageTransformProvider,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSNNBinaryArithmeticNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNBinaryArithmeticNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNBinaryGradientState::.ctor(Metal.IMTLDevice,Metal.MTLTextureDescriptor)",
			"MetalPerformanceShaders.MPSNNBinaryGradientState::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSStateResourceList)",
			"MetalPerformanceShaders.MPSNNBinaryGradientState::.ctor(Metal.IMTLDevice,System.UIntPtr)",
			"MetalPerformanceShaders.MPSNNBinaryGradientState::.ctor(Metal.IMTLResource)",
			"MetalPerformanceShaders.MPSNNBinaryGradientState::CreateTemporaryState(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSNNBinaryGradientState::CreateTemporaryState(Metal.IMTLCommandBuffer,Metal.MTLTextureDescriptor)",
			"MetalPerformanceShaders.MPSNNBinaryGradientState::CreateTemporaryState(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSStateResourceList)",
			"MetalPerformanceShaders.MPSNNBinaryGradientState::CreateTemporaryState(Metal.IMTLCommandBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSNNCompare::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNCompare::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNConcatenationGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSNNConcatenationGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSNNCropAndResizeBilinear::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNCropAndResizeBilinear::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNCropAndResizeBilinear::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr)",
			"MetalPerformanceShaders.MPSNNDefaultPadding::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNDefaultPadding::EncodeTo(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNDefaultPadding::GetDestinationImageDescriptor(MetalPerformanceShaders.MPSImage[],MetalPerformanceShaders.MPSState[],MetalPerformanceShaders.MPSKernel,MetalPerformanceShaders.MPSImageDescriptor)",
			"MetalPerformanceShaders.MPSNNDivisionNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNFilterNode::GetFilter(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNFilterNode::GetFilters(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNFilterNode::GetTrainingGraph(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSGradientNodeHandler)",
			"MetalPerformanceShaders.MPSNNFilterNode::set_PaddingPolicy(MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSNNForwardLossNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSNNForwardLossNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSNNForwardLossNode::.ctor(MetalPerformanceShaders.MPSNNImageNode[],MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSNNForwardLossNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSNNForwardLossNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSNNForwardLossNode::Create(MetalPerformanceShaders.MPSNNImageNode[],MetalPerformanceShaders.MPSCnnLossDescriptor)",
			"MetalPerformanceShaders.MPSNNForwardLossNode::GetFilter(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNForwardLossNode::GetFilters(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNForwardLossNode::set_PropertyCallBack(MetalPerformanceShaders.IMPSNNLossCallback)",
			"MetalPerformanceShaders.MPSNNGradientState::.ctor(Metal.IMTLDevice,Metal.MTLTextureDescriptor)",
			"MetalPerformanceShaders.MPSNNGradientState::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSStateResourceList)",
			"MetalPerformanceShaders.MPSNNGradientState::.ctor(Metal.IMTLDevice,System.UIntPtr)",
			"MetalPerformanceShaders.MPSNNGradientState::.ctor(Metal.IMTLResource)",
			"MetalPerformanceShaders.MPSNNGradientState::CreateTemporaryState(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSNNGradientState::CreateTemporaryState(Metal.IMTLCommandBuffer,Metal.MTLTextureDescriptor)",
			"MetalPerformanceShaders.MPSNNGradientState::CreateTemporaryState(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSStateResourceList)",
			"MetalPerformanceShaders.MPSNNGradientState::CreateTemporaryState(Metal.IMTLCommandBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSNNGraph::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNGraph::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNGraph::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNGraph::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNImageNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNGraph::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSNNGraph::Create(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNImageNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNGraph::Create(Metal.IMTLDevice,MetalPerformanceShaders.MPSNNImageNode[],System.IntPtr)",
			"MetalPerformanceShaders.MPSNNGraph::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>[],Foundation.NSArray`1<MetalPerformanceShaders.MPSState>[])",
			"MetalPerformanceShaders.MPSNNGraph::EncodeBatch(Metal.IMTLCommandBuffer,Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>[],Foundation.NSArray`1<MetalPerformanceShaders.MPSState>[],Foundation.NSMutableArray`1<Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>>,Foundation.NSMutableArray`1<Foundation.NSArray`1<MetalPerformanceShaders.MPSState>>)",
			"MetalPerformanceShaders.MPSNNGraph::EncodeTo(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNGraph::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage[])",
			"MetalPerformanceShaders.MPSNNGraph::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage[],MetalPerformanceShaders.MPSState[],Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSState>)",
			"MetalPerformanceShaders.MPSNNGraph::set_DestinationImageAllocator(MetalPerformanceShaders.IMPSImageAllocator)",
			"MetalPerformanceShaders.MPSNNImageNode::.ctor(MetalPerformanceShaders.IMPSHandle)",
			"MetalPerformanceShaders.MPSNNImageNode::Create(MetalPerformanceShaders.IMPSHandle)",
			"MetalPerformanceShaders.MPSNNImageNode::GetExportedNode(MetalPerformanceShaders.IMPSHandle)",
			"MetalPerformanceShaders.MPSNNImageNode::set_ImageAllocator(MetalPerformanceShaders.IMPSImageAllocator)",
			"MetalPerformanceShaders.MPSNNImageNode::set_MPSHandle(MetalPerformanceShaders.IMPSHandle)",
			"MetalPerformanceShaders.MPSNNInitialGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNInitialGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNLanczosScaleNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSNNLanczosScaleNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSImageTransformProvider,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSNNLossCallbackWrapper::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSNNLossCallbackWrapper::EncodeTo(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNLossCallbackWrapper::GetScalarWeight(MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSNNLossGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,MetalPerformanceShaders.MPSCnnLossDescriptor,System.Boolean)",
			"MetalPerformanceShaders.MPSNNLossGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,MetalPerformanceShaders.MPSCnnLossDescriptor,System.Boolean)",
			"MetalPerformanceShaders.MPSNNLossGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode[],MetalPerformanceShaders.MPSNNGradientStateNode,MetalPerformanceShaders.MPSCnnLossDescriptor,System.Boolean)",
			"MetalPerformanceShaders.MPSNNLossGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,MetalPerformanceShaders.MPSCnnLossDescriptor,System.Boolean)",
			"MetalPerformanceShaders.MPSNNLossGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode,MetalPerformanceShaders.MPSCnnLossDescriptor,System.Boolean)",
			"MetalPerformanceShaders.MPSNNLossGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode[],MetalPerformanceShaders.MPSNNGradientStateNode,MetalPerformanceShaders.MPSCnnLossDescriptor,System.Boolean)",
			"MetalPerformanceShaders.MPSNNLossGradientNode::set_PropertyCallBack(MetalPerformanceShaders.IMPSNNLossCallback)",
			"MetalPerformanceShaders.MPSNNMultiplicationGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNBinaryGradientStateNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNMultiplicationGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode[],MetalPerformanceShaders.MPSNNFilterNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNMultiplicationGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNBinaryGradientStateNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNMultiplicationNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNNeuronDescriptor::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNNeuronDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSNNNeuronDescriptor::Create(Foundation.NSData,System.Boolean)",
			"MetalPerformanceShaders.MPSNNNeuronDescriptor::EncodeTo(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNNeuronDescriptor::set_Data(Foundation.NSData)",
			"MetalPerformanceShaders.MPSNNOptimizer::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNOptimizerAdam::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNOptimizerAdam::.ctor(Metal.IMTLDevice,System.Double,System.Double,System.Single,System.UIntPtr,MetalPerformanceShaders.MPSNNOptimizerDescriptor)",
			"MetalPerformanceShaders.MPSNNOptimizerAdam::.ctor(Metal.IMTLDevice,System.Single)",
			"MetalPerformanceShaders.MPSNNOptimizerAdam::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnBatchNormalizationState,Foundation.NSArray`1<MetalPerformanceShaders.MPSVector>,Foundation.NSArray`1<MetalPerformanceShaders.MPSVector>,MetalPerformanceShaders.MPSCnnNormalizationGammaAndBetaState)",
			"MetalPerformanceShaders.MPSNNOptimizerAdam::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnBatchNormalizationState,MetalPerformanceShaders.MPSCnnBatchNormalizationState,Foundation.NSArray`1<MetalPerformanceShaders.MPSVector>,Foundation.NSArray`1<MetalPerformanceShaders.MPSVector>,MetalPerformanceShaders.MPSCnnNormalizationGammaAndBetaState)",
			"MetalPerformanceShaders.MPSNNOptimizerAdam::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnConvolutionGradientState,MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState,Foundation.NSArray`1<MetalPerformanceShaders.MPSVector>,Foundation.NSArray`1<MetalPerformanceShaders.MPSVector>,MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState)",
			"MetalPerformanceShaders.MPSNNOptimizerAdam::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector)",
			"MetalPerformanceShaders.MPSNNOptimizerRmsProp::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNOptimizerRmsProp::.ctor(Metal.IMTLDevice,System.Double,System.Single,MetalPerformanceShaders.MPSNNOptimizerDescriptor)",
			"MetalPerformanceShaders.MPSNNOptimizerRmsProp::.ctor(Metal.IMTLDevice,System.Single)",
			"MetalPerformanceShaders.MPSNNOptimizerRmsProp::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnBatchNormalizationState,Foundation.NSArray`1<MetalPerformanceShaders.MPSVector>,MetalPerformanceShaders.MPSCnnNormalizationGammaAndBetaState)",
			"MetalPerformanceShaders.MPSNNOptimizerRmsProp::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnBatchNormalizationState,MetalPerformanceShaders.MPSCnnBatchNormalizationState,Foundation.NSArray`1<MetalPerformanceShaders.MPSVector>,MetalPerformanceShaders.MPSCnnNormalizationGammaAndBetaState)",
			"MetalPerformanceShaders.MPSNNOptimizerRmsProp::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnConvolutionGradientState,MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState,Foundation.NSArray`1<MetalPerformanceShaders.MPSVector>,MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState)",
			"MetalPerformanceShaders.MPSNNOptimizerRmsProp::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector)",
			"MetalPerformanceShaders.MPSNNOptimizerStochasticGradientDescent::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNOptimizerStochasticGradientDescent::.ctor(Metal.IMTLDevice,System.Single)",
			"MetalPerformanceShaders.MPSNNOptimizerStochasticGradientDescent::.ctor(Metal.IMTLDevice,System.Single,System.Boolean,MetalPerformanceShaders.MPSNNOptimizerDescriptor)",
			"MetalPerformanceShaders.MPSNNOptimizerStochasticGradientDescent::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnBatchNormalizationState,Foundation.NSArray`1<MetalPerformanceShaders.MPSVector>,MetalPerformanceShaders.MPSCnnNormalizationGammaAndBetaState)",
			"MetalPerformanceShaders.MPSNNOptimizerStochasticGradientDescent::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnBatchNormalizationState,MetalPerformanceShaders.MPSCnnBatchNormalizationState,Foundation.NSArray`1<MetalPerformanceShaders.MPSVector>,MetalPerformanceShaders.MPSCnnNormalizationGammaAndBetaState)",
			"MetalPerformanceShaders.MPSNNOptimizerStochasticGradientDescent::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSCnnConvolutionGradientState,MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState,Foundation.NSArray`1<MetalPerformanceShaders.MPSVector>,MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState)",
			"MetalPerformanceShaders.MPSNNOptimizerStochasticGradientDescent::Encode(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector,MetalPerformanceShaders.MPSVector)",
			"MetalPerformanceShaders.MPSNNPad::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNPad::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNPad::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNPad::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSImageCoordinate,MetalPerformanceShaders.MPSImageCoordinate)",
			"MetalPerformanceShaders.MPSNNPad::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSImageCoordinate,MetalPerformanceShaders.MPSImageCoordinate,Foundation.NSData)",
			"MetalPerformanceShaders.MPSNNPadding_Extensions::GetDestinationImageDescriptor(MetalPerformanceShaders.IMPSNNPadding,MetalPerformanceShaders.MPSImage[],MetalPerformanceShaders.MPSState[],MetalPerformanceShaders.MPSKernel,MetalPerformanceShaders.MPSImageDescriptor)",
			"MetalPerformanceShaders.MPSNNPadding_Extensions::GetInverse(MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSNNPadding_Extensions::GetLabel(MetalPerformanceShaders.IMPSNNPadding)",
			"MetalPerformanceShaders.MPSNNPaddingWrapper::EncodeTo(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNPadGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNPadGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNPadGradient::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNPadGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSNNPadGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSNNPadNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSImageCoordinate,MetalPerformanceShaders.MPSImageCoordinate,MetalPerformanceShaders.MPSImageEdgeMode)",
			"MetalPerformanceShaders.MPSNNPadNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSImageCoordinate,MetalPerformanceShaders.MPSImageCoordinate,MetalPerformanceShaders.MPSImageEdgeMode)",
			"MetalPerformanceShaders.MPSNNReduceBinary::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceColumnMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceColumnMax::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceColumnMean::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceColumnMean::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceColumnMin::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceColumnMin::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceColumnSum::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceColumnSum::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsAndWeightsMean::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsAndWeightsMean::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsAndWeightsSum::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsAndWeightsSum::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsAndWeightsSum::.ctor(Metal.IMTLDevice,System.Boolean)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsArgumentMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsArgumentMax::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsArgumentMin::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsArgumentMin::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsMax::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsMean::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsMean::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsMin::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsMin::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsSum::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceFeatureChannelsSum::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceRowMax::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceRowMax::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceRowMean::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceRowMean::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceRowMin::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceRowMin::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceRowSum::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReduceRowSum::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReduceUnary::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReductionColumnMaxNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionColumnMaxNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionColumnMeanNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionColumnMeanNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionColumnMinNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionColumnMinNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionColumnSumNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionColumnSumNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionFeatureChannelsArgumentMaxNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionFeatureChannelsArgumentMaxNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionFeatureChannelsArgumentMinNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionFeatureChannelsArgumentMinNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionFeatureChannelsMaxNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionFeatureChannelsMaxNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionFeatureChannelsMeanNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionFeatureChannelsMeanNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionFeatureChannelsMinNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionFeatureChannelsMinNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionFeatureChannelsSumNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionFeatureChannelsSumNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionRowMaxNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionRowMaxNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionRowMeanNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionRowMeanNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionRowMinNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionRowMinNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionRowSumNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionRowSumNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionSpatialMeanGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSNNReductionSpatialMeanGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSNNReductionSpatialMeanNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReductionSpatialMeanNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNReshape::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReshape::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReshape::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReshapeGradient::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNReshapeGradient::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReshapeGradient::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNReshapeGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSNNReshapeGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNGradientStateNode)",
			"MetalPerformanceShaders.MPSNNReshapeNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSNNReshapeNode::Create(MetalPerformanceShaders.MPSNNImageNode,System.UIntPtr,System.UIntPtr,System.UIntPtr)",
			"MetalPerformanceShaders.MPSNNResizeBilinear::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNResizeBilinear::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNResizeBilinear::.ctor(Metal.IMTLDevice,System.UIntPtr,System.UIntPtr,System.Boolean)",
			"MetalPerformanceShaders.MPSNNScaleNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSNNScaleNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSImageTransformProvider,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSNNScaleNode::Create(MetalPerformanceShaders.MPSNNImageNode,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSNNScaleNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.IMPSImageTransformProvider,Metal.MTLSize)",
			"MetalPerformanceShaders.MPSNNSlice::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSNNSlice::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNSlice::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSNNStateNode::set_MPSHandle(MetalPerformanceShaders.IMPSHandle)",
			"MetalPerformanceShaders.MPSNNSubtractionGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNBinaryGradientStateNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNSubtractionGradientNode::.ctor(MetalPerformanceShaders.MPSNNImageNode[],MetalPerformanceShaders.MPSNNFilterNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNSubtractionGradientNode::Create(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNBinaryGradientStateNode,System.Boolean)",
			"MetalPerformanceShaders.MPSNNSubtractionNode::.ctor(MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNUnaryReductionNode::.ctor(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSNNUnaryReductionNode::Create(MetalPerformanceShaders.MPSNNImageNode)",
			"MetalPerformanceShaders.MPSPredicate::.ctor(Metal.IMTLBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSPredicate::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSPredicate::Create(Metal.IMTLBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSRayIntersector::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSRayIntersector::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSRayIntersector::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSRayIntersector::Copy(Foundation.NSZone)",
			"MetalPerformanceShaders.MPSRayIntersector::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSRayIntersector::Encode(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSRayIntersector::EncodeIntersection(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSIntersectionType,Metal.IMTLBuffer,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,MetalPerformanceShaders.MPSAccelerationStructure)",
			"MetalPerformanceShaders.MPSRayIntersector::EncodeIntersection(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSIntersectionType,Metal.IMTLBuffer,System.UIntPtr,Metal.IMTLBuffer,System.UIntPtr,System.UIntPtr,MetalPerformanceShaders.MPSAccelerationStructure)",
			"MetalPerformanceShaders.MPSRnnImageInferenceLayer::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSRnnImageInferenceLayer::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSRnnImageInferenceLayer::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSRnnDescriptor)",
			"MetalPerformanceShaders.MPSRnnImageInferenceLayer::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSRnnDescriptor[])",
			"MetalPerformanceShaders.MPSRnnImageInferenceLayer::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSRnnImageInferenceLayer::EncodeBidirectionalSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage[],MetalPerformanceShaders.MPSImage[],MetalPerformanceShaders.MPSImage[])",
			"MetalPerformanceShaders.MPSRnnImageInferenceLayer::EncodeSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage[],MetalPerformanceShaders.MPSImage[],MetalPerformanceShaders.MPSRnnRecurrentImageState,Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSRnnRecurrentImageState>)",
			"MetalPerformanceShaders.MPSRnnMatrixInferenceLayer::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSRnnMatrixInferenceLayer::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSRnnMatrixInferenceLayer::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSRnnDescriptor)",
			"MetalPerformanceShaders.MPSRnnMatrixInferenceLayer::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSRnnDescriptor[])",
			"MetalPerformanceShaders.MPSRnnMatrixInferenceLayer::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSRnnMatrixInferenceLayer::EncodeBidirectionalSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix[])",
			"MetalPerformanceShaders.MPSRnnMatrixInferenceLayer::EncodeSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSRnnRecurrentMatrixState,Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSRnnRecurrentMatrixState>)",
			"MetalPerformanceShaders.MPSRnnMatrixInferenceLayer::EncodeSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],System.IntPtr,MetalPerformanceShaders.MPSMatrix[],System.IntPtr,MetalPerformanceShaders.MPSRnnRecurrentMatrixState,Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSRnnRecurrentMatrixState>)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingLayer::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingLayer::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingLayer::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSRnnDescriptor,Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSMatrix>)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingLayer::Copy(Foundation.NSZone,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingLayer::CreateTemporaryWeightGradientMatrices(Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSMatrix>,MetalPerformanceShaders.MPSDataType,Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingLayer::CreateWeightGradientMatrices(Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSMatrix>,MetalPerformanceShaders.MPSDataType)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingLayer::CreateWeightMatrices(Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSMatrix>)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingLayer::EncodeCopyWeights(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSRnnMatrixId,MetalPerformanceShaders.MPSMatrix,System.Boolean,Metal.MTLOrigin)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingLayer::EncodeForwardSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix[],Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSRnnMatrixTrainingState>,MetalPerformanceShaders.MPSMatrix[])",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingLayer::EncodeForwardSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],System.IntPtr,MetalPerformanceShaders.MPSMatrix[],System.IntPtr,Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSRnnMatrixTrainingState>,MetalPerformanceShaders.MPSRnnRecurrentMatrixState,Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSRnnRecurrentMatrixState>,MetalPerformanceShaders.MPSMatrix[])",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingLayer::EncodeGradientSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSRnnMatrixTrainingState[],MetalPerformanceShaders.MPSMatrix[])",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingLayer::EncodeGradientSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],System.IntPtr,MetalPerformanceShaders.MPSMatrix[],System.IntPtr,MetalPerformanceShaders.MPSMatrix[],System.IntPtr,MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSRnnMatrixTrainingState[],MetalPerformanceShaders.MPSRnnRecurrentMatrixState,Foundation.NSMutableArray`1<MetalPerformanceShaders.MPSRnnRecurrentMatrixState>,MetalPerformanceShaders.MPSMatrix[])",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingState::.ctor(Metal.IMTLDevice,Metal.MTLTextureDescriptor)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingState::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSStateResourceList)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingState::.ctor(Metal.IMTLDevice,System.UIntPtr)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingState::.ctor(Metal.IMTLResource)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingState::CreateTemporaryState(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingState::CreateTemporaryState(Metal.IMTLCommandBuffer,Metal.MTLTextureDescriptor)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingState::CreateTemporaryState(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSStateResourceList)",
			"MetalPerformanceShaders.MPSRnnMatrixTrainingState::CreateTemporaryState(Metal.IMTLCommandBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSRnnSingleGateDescriptor::set_InputWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSRnnSingleGateDescriptor::set_RecurrentWeights(MetalPerformanceShaders.IMPSCnnConvolutionDataSource)",
			"MetalPerformanceShaders.MPSState::.ctor(Metal.IMTLDevice,Metal.MTLTextureDescriptor)",
			"MetalPerformanceShaders.MPSState::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSStateResourceList)",
			"MetalPerformanceShaders.MPSState::.ctor(Metal.IMTLDevice,System.UIntPtr)",
			"MetalPerformanceShaders.MPSState::.ctor(Metal.IMTLResource)",
			"MetalPerformanceShaders.MPSState::CreateTemporaryState(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSState::CreateTemporaryState(Metal.IMTLCommandBuffer,Metal.MTLTextureDescriptor)",
			"MetalPerformanceShaders.MPSState::CreateTemporaryState(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSStateResourceList)",
			"MetalPerformanceShaders.MPSState::CreateTemporaryState(Metal.IMTLCommandBuffer,System.UIntPtr)",
			"MetalPerformanceShaders.MPSState::GetDestinationImageDescriptor(Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>,Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,MetalPerformanceShaders.MPSKernel,MetalPerformanceShaders.MPSImageDescriptor)",
			"MetalPerformanceShaders.MPSState::Synchronize(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSStateBatch::GetResourceSize(Foundation.NSArray`1<MetalPerformanceShaders.MPSState>)",
			"MetalPerformanceShaders.MPSStateBatch::IncrementReadCount(Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,System.IntPtr)",
			"MetalPerformanceShaders.MPSStateBatch::Synchronize(Foundation.NSArray`1<MetalPerformanceShaders.MPSState>,Metal.IMTLCommandBuffer)",
			"MetalPerformanceShaders.MPSStateResourceList::Append(Metal.MTLTextureDescriptor)",
			"MetalPerformanceShaders.MPSTemporaryImage::.ctor(MetalPerformanceShaders.MPSImage,Foundation.NSRange,System.UIntPtr)",
			"MetalPerformanceShaders.MPSTemporaryImage::GetTemporaryImage(Metal.IMTLCommandBuffer,Metal.MTLTextureDescriptor)",
			"MetalPerformanceShaders.MPSTemporaryImage::GetTemporaryImage(Metal.IMTLCommandBuffer,Metal.MTLTextureDescriptor,System.UIntPtr)",
			"MetalPerformanceShaders.MPSTemporaryImage::GetTemporaryImage(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImageDescriptor)",
			"MetalPerformanceShaders.MPSTemporaryImage::PrefetchStorage(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImageDescriptor[])",
			"MetalPerformanceShaders.MPSTemporaryMatrix::Create(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrixDescriptor)",
			"MetalPerformanceShaders.MPSTemporaryMatrix::PrefetchStorage(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrixDescriptor[])",
			"MetalPerformanceShaders.MPSTemporaryNDArray::Create(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSNDArrayDescriptor)",
			"MetalPerformanceShaders.MPSTemporaryVector::Create(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSVectorDescriptor)",
			"MetalPerformanceShaders.MPSTemporaryVector::PrefetchStorage(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSVectorDescriptor[])",
			"MetalPerformanceShaders.MPSTriangleAccelerationStructure::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSTriangleAccelerationStructure::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSTriangleAccelerationStructure::.ctor(Foundation.NSCoder,MetalPerformanceShaders.MPSAccelerationStructureGroup)",
			"MetalPerformanceShaders.MPSTriangleAccelerationStructure::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSTriangleAccelerationStructure::.ctor(MetalPerformanceShaders.MPSAccelerationStructureGroup)",
			"MetalPerformanceShaders.MPSTriangleAccelerationStructure::set_IndexBuffer(Metal.IMTLBuffer)",
			"MetalPerformanceShaders.MPSTriangleAccelerationStructure::set_MaskBuffer(Metal.IMTLBuffer)",
			"MetalPerformanceShaders.MPSTriangleAccelerationStructure::set_VertexBuffer(Metal.IMTLBuffer)",
			"MetalPerformanceShaders.MPSUnaryImageKernel::.ctor(Foundation.NSCoder)",
			"MetalPerformanceShaders.MPSUnaryImageKernel::.ctor(Foundation.NSCoder,Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSUnaryImageKernel::.ctor(Metal.IMTLDevice)",
			"MetalPerformanceShaders.MPSUnaryImageKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,Foundation.NSObject&,MetalPerformanceShaders.MPSCopyAllocator)",
			"MetalPerformanceShaders.MPSUnaryImageKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,Metal.IMTLTexture,Metal.IMTLTexture)",
			"MetalPerformanceShaders.MPSUnaryImageKernel::EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage)",
			"MetalPerformanceShaders.MPSVector::.ctor(Metal.IMTLBuffer,MetalPerformanceShaders.MPSVectorDescriptor)",
			"MetalPerformanceShaders.MPSVector::.ctor(Metal.IMTLBuffer,System.UIntPtr,MetalPerformanceShaders.MPSVectorDescriptor)",
			"MetalPerformanceShaders.MPSVector::.ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSVectorDescriptor)",
			"MetalPerformanceShaders.MPSVector::Synchronize(Metal.IMTLCommandBuffer)",
			"MetalPerformanceShadersGraph.MPSGraph::Compile(MetalPerformanceShadersGraph.MPSGraphDevice,Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphShapedType>,MetalPerformanceShadersGraph.MPSGraphTensor[],MetalPerformanceShadersGraph.MPSGraphOperation[],MetalPerformanceShadersGraph.MPSGraphCompilationDescriptor)",
			"MetalPerformanceShadersGraph.MPSGraph::Encode(MetalPerformanceShaders.MPSCommandBuffer,Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>,MetalPerformanceShadersGraph.MPSGraphOperation[],Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>,MetalPerformanceShadersGraph.MPSGraphExecutionDescriptor)",
			"MetalPerformanceShadersGraph.MPSGraph::Encode(MetalPerformanceShaders.MPSCommandBuffer,Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>,MetalPerformanceShadersGraph.MPSGraphTensor[],MetalPerformanceShadersGraph.MPSGraphOperation[],MetalPerformanceShadersGraph.MPSGraphExecutionDescriptor)",
			"MetalPerformanceShadersGraph.MPSGraph::Run(Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>,MetalPerformanceShadersGraph.MPSGraphTensor[],MetalPerformanceShadersGraph.MPSGraphOperation[])",
			"MetalPerformanceShadersGraph.MPSGraph::Run(Metal.IMTLCommandQueue,Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>,MetalPerformanceShadersGraph.MPSGraphOperation[],Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>)",
			"MetalPerformanceShadersGraph.MPSGraph::Run(Metal.IMTLCommandQueue,Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>,MetalPerformanceShadersGraph.MPSGraphTensor[],MetalPerformanceShadersGraph.MPSGraphOperation[])",
			"MetalPerformanceShadersGraph.MPSGraph::RunAsync(Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>,MetalPerformanceShadersGraph.MPSGraphTensor[],MetalPerformanceShadersGraph.MPSGraphOperation[],MetalPerformanceShadersGraph.MPSGraphExecutionDescriptor)",
			"MetalPerformanceShadersGraph.MPSGraph::RunAsync(Metal.IMTLCommandQueue,Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>,MetalPerformanceShadersGraph.MPSGraphOperation[],Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>,MetalPerformanceShadersGraph.MPSGraphExecutionDescriptor)",
			"MetalPerformanceShadersGraph.MPSGraph::RunAsync(Metal.IMTLCommandQueue,Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>,MetalPerformanceShadersGraph.MPSGraphTensor[],MetalPerformanceShadersGraph.MPSGraphOperation[],MetalPerformanceShadersGraph.MPSGraphExecutionDescriptor)",
			"MetalPerformanceShadersGraph.MPSGraph_GatherNDOps::GatherND(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_GatherOps::Gather(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MemoryOps::Assign(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MemoryOps::Constant(MetalPerformanceShadersGraph.MPSGraph,Foundation.NSData,System.Int32[],MetalPerformanceShaders.MPSDataType)",
			"MetalPerformanceShadersGraph.MPSGraph_MemoryOps::Constant(MetalPerformanceShadersGraph.MPSGraph,System.Double,MetalPerformanceShaders.MPSDataType)",
			"MetalPerformanceShadersGraph.MPSGraph_MemoryOps::Constant(MetalPerformanceShadersGraph.MPSGraph,System.Double,System.Int32[],MetalPerformanceShaders.MPSDataType)",
			"MetalPerformanceShadersGraph.MPSGraph_MemoryOps::Placeholder(MetalPerformanceShadersGraph.MPSGraph,System.Int32[],MetalPerformanceShaders.MPSDataType,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MemoryOps::Placeholder(MetalPerformanceShadersGraph.MPSGraph,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MemoryOps::Read(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MemoryOps::Variable(MetalPerformanceShadersGraph.MPSGraph,Foundation.NSData,System.Int32[],MetalPerformanceShaders.MPSDataType,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphActivationOps::LeakyReLU(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphActivationOps::LeakyReLU(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Double,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphActivationOps::LeakyReLUGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphActivationOps::ReLU(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphActivationOps::ReLUGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphActivationOps::Sigmoid(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphActivationOps::SigmoidGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphActivationOps::SoftMax(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphActivationOps::SoftMaxGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Absolute(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Acos(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Acosh(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Addition(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Asin(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Asinh(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Atan(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Atan2(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Atanh(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Ceil(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Clamp(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Cos(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Cosh(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Division(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::DivisionNoNaN(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::EqualTo(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Erf(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Exponent(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::ExponentBase10(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::ExponentBase2(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Floor(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::FloorModulo(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::GreaterThan(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::GreaterThanOrEqualTo(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Identity(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::IsFinite(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::IsInfinite(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::IsNaN(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::LessThan(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::LessThanOrEqualTo(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Logarithm(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::LogarithmBase10(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::LogarithmBase2(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::LogicalAnd(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::LogicalNand(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::LogicalNor(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::LogicalOr(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::LogicalXnor(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::LogicalXor(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Maximum(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::MaximumWithNaNPropagation(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Minimum(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::MinimumWithNaNPropagation(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Modulo(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Multiplication(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Negative(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Not(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::NotEqualTo(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Power(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Reciprocal(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::ReverseSquareRoot(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Rint(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Round(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Select(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Sign(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Signbit(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Sin(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Sinh(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Square(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::SquareRoot(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Subtraction(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Tan(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphArithmeticOps::Tanh(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphControlFlowOps::ControlDependency(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphOperation[],MetalPerformanceShadersGraph.MPSGraphControlFlowDependencyBlock,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphControlFlowOps::For(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor[],MetalPerformanceShadersGraph.MPSGraphForLoopBodyBlock,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphControlFlowOps::For(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor[],MetalPerformanceShadersGraph.MPSGraphForLoopBodyBlock,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphControlFlowOps::If(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphIfThenElseBlock,MetalPerformanceShadersGraph.MPSGraphIfThenElseBlock,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphControlFlowOps::While(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor[],MetalPerformanceShadersGraph.MPSGraphWhileBeforeBlock,MetalPerformanceShadersGraph.MPSGraphWhileAfterBlock,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphConvolutionOps::Convolution2D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphConvolutionOps::Convolution2DDataGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphConvolutionOps::Convolution2DDataGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphConvolutionOps::Convolution2DWeightsGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphConvolutionOps::Convolution2DWeightsGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphConvolutionTransposeOps::ConvolutionTranspose2D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphConvolutionTransposeOps::ConvolutionTranspose2D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphConvolutionTransposeOps::ConvolutionTranspose2DDataGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphConvolutionTransposeOps::ConvolutionTranspose2DDataGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphConvolutionTransposeOps::ConvolutionTranspose2DWeightsGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphConvolutionTransposeOps::ConvolutionTranspose2DWeightsGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphDepthwiseConvolutionOps::DepthwiseConvolution2D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphDepthwiseConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphDepthwiseConvolutionOps::DepthwiseConvolution2DDataGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],MetalPerformanceShadersGraph.MPSGraphDepthwiseConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphDepthwiseConvolutionOps::DepthwiseConvolution2DWeightsGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],MetalPerformanceShadersGraph.MPSGraphDepthwiseConvolution2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphDepthwiseConvolutionOps::DepthwiseConvolution3D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphDepthwiseConvolution3DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphDepthwiseConvolutionOps::DepthwiseConvolution3DDataGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],MetalPerformanceShadersGraph.MPSGraphDepthwiseConvolution3DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphDepthwiseConvolutionOps::DepthwiseConvolution3DWeightsGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],MetalPerformanceShadersGraph.MPSGraphDepthwiseConvolution3DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphGradientOps::Gradients(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphLossOps::SoftMaxCrossEntropy(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,MetalPerformanceShadersGraph.MPSGraphLossReductionType,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphLossOps::SoftMaxCrossEntropyGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,MetalPerformanceShadersGraph.MPSGraphLossReductionType,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphMatrixMultiplicationOps::MatrixMultiplication(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphNormalizationOps::Mean(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphNormalizationOps::Normalization(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Single,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphNormalizationOps::NormalizationBetaGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphNormalizationOps::NormalizationGammaGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.Single,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphNormalizationOps::NormalizationGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.Single,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphNormalizationOps::Variance(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphNormalizationOps::Variance(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphOneHotOps::OneHot(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,MetalPerformanceShaders.MPSDataType,System.Double,System.Double,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphOneHotOps::OneHot(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,MetalPerformanceShaders.MPSDataType,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphOneHotOps::OneHot(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphOneHotOps::OneHot(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.UIntPtr,MetalPerformanceShaders.MPSDataType,System.Double,System.Double,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphOneHotOps::OneHot(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.UIntPtr,MetalPerformanceShaders.MPSDataType,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphOneHotOps::OneHot(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphOptimizerOps::ApplyStochasticGradientDescent(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphVariableOp,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphOptimizerOps::StochasticGradientDescent(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphPoolingOps::AvgPooling2D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphPooling2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphPoolingOps::AvgPooling2DGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphPooling2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphPoolingOps::AvgPooling4D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphPooling4DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphPoolingOps::AvgPooling4DGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphPooling4DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphPoolingOps::L2NormPooling4D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphPooling4DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphPoolingOps::L2NormPooling4DGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphPooling4DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphPoolingOps::MaxPooling2D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphPooling2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphPoolingOps::MaxPooling2DGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphPooling2DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphPoolingOps::MaxPooling4D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphPooling4DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphPoolingOps::MaxPooling4DGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphPooling4DOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::Dropout(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::Dropout(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Double,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::Random(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphRandomOpDescriptor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::Random(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphRandomOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::Random(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphRandomOpDescriptor,System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::Random(MetalPerformanceShadersGraph.MPSGraph,System.Int32[],MetalPerformanceShadersGraph.MPSGraphRandomOpDescriptor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::Random(MetalPerformanceShadersGraph.MPSGraph,System.Int32[],MetalPerformanceShadersGraph.MPSGraphRandomOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::Random(MetalPerformanceShadersGraph.MPSGraph,System.Int32[],MetalPerformanceShadersGraph.MPSGraphRandomOpDescriptor,System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::RandomPhiloxState(MetalPerformanceShadersGraph.MPSGraph,System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::RandomPhiloxState(MetalPerformanceShadersGraph.MPSGraph,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::RandomUniform(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::RandomUniform(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::RandomUniform(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::RandomUniform(MetalPerformanceShadersGraph.MPSGraph,System.Int32[],MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::RandomUniform(MetalPerformanceShadersGraph.MPSGraph,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphRandomOps::RandomUniform(MetalPerformanceShadersGraph.MPSGraph,System.Int32[],System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionArgMaximum(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionArgMinimum(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionMaximum(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionMaximum(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionMaximumPropagateNaN(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionMaximumPropagateNaN(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionMinimum(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionMinimum(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionMinimumPropagateNaN(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionMinimumPropagateNaN(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionProduct(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionProduct(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionSum(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphReductionOps::ReductionSum(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphResizeOps::Resize(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphResizeMode,System.Boolean,System.Boolean,MetalPerformanceShadersGraph.MPSGraphTensorNamedDataLayout,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphResizeOps::Resize(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],MetalPerformanceShadersGraph.MPSGraphResizeMode,System.Boolean,System.Boolean,MetalPerformanceShadersGraph.MPSGraphTensorNamedDataLayout,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphResizeOps::ResizeGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphResizeMode,System.Boolean,System.Boolean,MetalPerformanceShadersGraph.MPSGraphTensorNamedDataLayout,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphScatterOps::Scatter(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,MetalPerformanceShadersGraph.MPSGraphScatterMode,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphScatterOps::Scatter(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.IntPtr,MetalPerformanceShadersGraph.MPSGraphScatterMode,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphSparseOps::Sparse(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphCreateSparseOpDescriptor,MetalPerformanceShadersGraph.MPSGraphTensor[],System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphSparseOps::Sparse(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphSparseStorageType,MetalPerformanceShadersGraph.MPSGraphTensor[],System.Int32[],MetalPerformanceShaders.MPSDataType,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphStencilOps::Stencil(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphStencilOpDescriptor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Broadcast(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Broadcast(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Cast(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShaders.MPSDataType,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Concat(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::ConcatTensors(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor[],System.IntPtr,System.Boolean,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::ConcatTensors(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor[],System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::DepthToSpace2D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.Boolean,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::DepthToSpace2D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Boolean,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Flatten2D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Flatten2D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Pad(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphPaddingMode,System.Int32[],System.Int32[],System.Double,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::PadGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphPaddingMode,System.Int32[],System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Reshape(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Reshape(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Reverse(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Reverse(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Reverse(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Shape(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Slice(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.Int32[],System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Slice(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.Int32[],System.Int32[],System.UInt32,System.UInt32,System.UInt32,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Slice(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.IntPtr,System.IntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::SliceGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.Int32[],System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::SliceGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.Int32[],System.Int32[],System.UInt32,System.UInt32,System.UInt32,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::SpaceToDepth2D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.Boolean,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::SpaceToDepth2D(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Boolean,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Tile(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::TileGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTensorShapeOps::Transpose(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTopKGradientOps::TopKGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTopKGradientOps::TopKGradient(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTopKOps::TopK(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_MPSGraphTopKOps::TopK(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_ScatterNDOps::ScatterND(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.UIntPtr,MetalPerformanceShadersGraph.MPSGraphScatterMode,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_ScatterNDOps::ScatterND(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.UIntPtr,MetalPerformanceShadersGraph.MPSGraphScatterMode,System.String)",
			"MetalPerformanceShadersGraph.MPSGraph_ScatterNDOps::ScatterND(MetalPerformanceShadersGraph.MPSGraph,MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor,System.Int32[],System.UIntPtr,System.String)",
			"MetalPerformanceShadersGraph.MPSGraphCompilationDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShadersGraph.MPSGraphCreateSparseOpDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShadersGraph.MPSGraphDepthwiseConvolution2DOpDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShadersGraph.MPSGraphDepthwiseConvolution3DOpDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShadersGraph.MPSGraphDevice::Create(Metal.IMTLDevice)",
			"MetalPerformanceShadersGraph.MPSGraphExecutable::Encode(MetalPerformanceShaders.MPSCommandBuffer,MetalPerformanceShadersGraph.MPSGraphTensorData[],MetalPerformanceShadersGraph.MPSGraphTensorData[],MetalPerformanceShadersGraph.MPSGraphExecutableExecutionDescriptor)",
			"MetalPerformanceShadersGraph.MPSGraphExecutable::Run(Metal.IMTLCommandQueue,MetalPerformanceShadersGraph.MPSGraphTensorData[],MetalPerformanceShadersGraph.MPSGraphTensorData[],MetalPerformanceShadersGraph.MPSGraphExecutableExecutionDescriptor)",
			"MetalPerformanceShadersGraph.MPSGraphExecutable::RunAsync(Metal.IMTLCommandQueue,MetalPerformanceShadersGraph.MPSGraphTensorData[],MetalPerformanceShadersGraph.MPSGraphTensorData[],MetalPerformanceShadersGraph.MPSGraphExecutableExecutionDescriptor)",
			"MetalPerformanceShadersGraph.MPSGraphExecutable::Specialize(MetalPerformanceShadersGraph.MPSGraphDevice,MetalPerformanceShadersGraph.MPSGraphType[],MetalPerformanceShadersGraph.MPSGraphCompilationDescriptor)",
			"MetalPerformanceShadersGraph.MPSGraphOperation::Copy(Foundation.NSZone)",
			"MetalPerformanceShadersGraph.MPSGraphPooling2DOpDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShadersGraph.MPSGraphPooling4DOpDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShadersGraph.MPSGraphRandomOpDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShadersGraph.MPSGraphShapedType::IsEqualTo(MetalPerformanceShadersGraph.MPSGraphShapedType)",
			"MetalPerformanceShadersGraph.MPSGraphStencilOpDescriptor::Copy(Foundation.NSZone)",
			"MetalPerformanceShadersGraph.MPSGraphTensor::Copy(Foundation.NSZone)",
			"MetalPerformanceShadersGraph.MPSGraphTensorData::.ctor(Foundation.NSArray`1<MetalPerformanceShaders.MPSImage>)",
			"MetalPerformanceShadersGraph.MPSGraphTensorData::.ctor(Metal.IMTLBuffer,System.Int32[],MetalPerformanceShaders.MPSDataType)",
			"MetalPerformanceShadersGraph.MPSGraphTensorData::.ctor(MetalPerformanceShaders.MPSMatrix)",
			"MetalPerformanceShadersGraph.MPSGraphTensorData::.ctor(MetalPerformanceShaders.MPSMatrix,System.UIntPtr)",
			"MetalPerformanceShadersGraph.MPSGraphTensorData::.ctor(MetalPerformanceShaders.MPSNDArray)",
			"MetalPerformanceShadersGraph.MPSGraphTensorData::.ctor(MetalPerformanceShaders.MPSVector)",
			"MetalPerformanceShadersGraph.MPSGraphTensorData::.ctor(MetalPerformanceShaders.MPSVector,System.UIntPtr)",
			"MetalPerformanceShadersGraph.MPSGraphTensorData::.ctor(MetalPerformanceShadersGraph.MPSGraphDevice,Foundation.NSData,System.Int32[],MetalPerformanceShaders.MPSDataType)",
			"MetalPerformanceShadersGraph.MPSGraphType::Copy(Foundation.NSZone)",
			"MetricKit.MXAnimationMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXAppExitMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXAppLaunchMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXAppResponsivenessMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXAppRunTimeMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXAverage`1::.ctor(Foundation.NSCoder)",
			"MetricKit.MXAverage`1::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXBackgroundExitData::.ctor(Foundation.NSCoder)",
			"MetricKit.MXBackgroundExitData::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXCallStackTree::.ctor(Foundation.NSCoder)",
			"MetricKit.MXCallStackTree::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXCellularConditionMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXCpuExceptionDiagnostic::.ctor(Foundation.NSCoder)",
			"MetricKit.MXCpuMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXCrashDiagnostic::.ctor(Foundation.NSCoder)",
			"MetricKit.MXDiagnostic::.ctor(Foundation.NSCoder)",
			"MetricKit.MXDiagnostic::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXDiagnosticPayload::.ctor(Foundation.NSCoder)",
			"MetricKit.MXDiagnosticPayload::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXDiskIOMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXDiskWriteExceptionDiagnostic::.ctor(Foundation.NSCoder)",
			"MetricKit.MXDisplayMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXForegroundExitData::.ctor(Foundation.NSCoder)",
			"MetricKit.MXForegroundExitData::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXGpuMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXHangDiagnostic::.ctor(Foundation.NSCoder)",
			"MetricKit.MXHistogram`1::.ctor(Foundation.NSCoder)",
			"MetricKit.MXHistogram`1::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXHistogramBucket`1::.ctor(Foundation.NSCoder)",
			"MetricKit.MXHistogramBucket`1::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXLocationActivityMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXMemoryMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXMetaData::.ctor(Foundation.NSCoder)",
			"MetricKit.MXMetaData::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXMetric::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXMetricManager::_MakeLogHandle(Foundation.NSString)",
			"MetricKit.MXMetricManager::Add(MetricKit.IMXMetricManagerSubscriber)",
			"MetricKit.MXMetricManager::Remove(MetricKit.IMXMetricManagerSubscriber)",
			"MetricKit.MXMetricManagerSubscriber_Extensions::DidReceiveDiagnosticPayloads(MetricKit.IMXMetricManagerSubscriber,MetricKit.MXDiagnosticPayload[])",
			"MetricKit.MXMetricManagerSubscriber_Extensions::DidReceiveMetricPayloads(MetricKit.IMXMetricManagerSubscriber,MetricKit.MXMetricPayload[])",
			"MetricKit.MXMetricPayload::.ctor(Foundation.NSCoder)",
			"MetricKit.MXMetricPayload::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXNetworkTransferMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXSignpostIntervalData::.ctor(Foundation.NSCoder)",
			"MetricKit.MXSignpostIntervalData::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXSignpostMetric::.ctor(Foundation.NSCoder)",
			"MetricKit.MXUnitAveragePixelLuminance::.ctor(Foundation.NSCoder)",
			"MetricKit.MXUnitAveragePixelLuminance::.ctor(System.String,Foundation.NSUnitConverter)",
			"MetricKit.MXUnitAveragePixelLuminance::Copy(Foundation.NSZone)",
			"MetricKit.MXUnitAveragePixelLuminance::EncodeTo(Foundation.NSCoder)",
			"MetricKit.MXUnitSignalBars::.ctor(Foundation.NSCoder)",
			"MetricKit.MXUnitSignalBars::.ctor(System.String,Foundation.NSUnitConverter)",
			"MetricKit.MXUnitSignalBars::Copy(Foundation.NSZone)",
			"MetricKit.MXUnitSignalBars::EncodeTo(Foundation.NSCoder)",
			"MLCompute.MLCActivationDescriptor::Copy(Foundation.NSZone)",
			"MLCompute.MLCActivationLayer::Create(MLCompute.MLCActivationDescriptor)",
			"MLCompute.MLCAdamOptimizer::Copy(Foundation.NSZone)",
			"MLCompute.MLCAdamOptimizer::Create(MLCompute.MLCOptimizerDescriptor)",
			"MLCompute.MLCAdamOptimizer::Create(MLCompute.MLCOptimizerDescriptor,System.Single,System.Single,System.Single,System.Boolean,System.UIntPtr)",
			"MLCompute.MLCAdamOptimizer::Create(MLCompute.MLCOptimizerDescriptor,System.Single,System.Single,System.Single,System.UIntPtr)",
			"MLCompute.MLCAdamWOptimizer::Copy(Foundation.NSZone)",
			"MLCompute.MLCAdamWOptimizer::GetOptimizer(MLCompute.MLCOptimizerDescriptor)",
			"MLCompute.MLCAdamWOptimizer::GetOptimizer(MLCompute.MLCOptimizerDescriptor,System.Single,System.Single,System.Single,System.Boolean,System.UIntPtr)",
			"MLCompute.MLCBatchNormalizationLayer::Create(System.UIntPtr,MLCompute.MLCTensor,MLCompute.MLCTensor,MLCompute.MLCTensor,MLCompute.MLCTensor,System.Single)",
			"MLCompute.MLCBatchNormalizationLayer::Create(System.UIntPtr,MLCompute.MLCTensor,MLCompute.MLCTensor,MLCompute.MLCTensor,MLCompute.MLCTensor,System.Single,System.Single)",
			"MLCompute.MLCConvolutionDescriptor::Copy(Foundation.NSZone)",
			"MLCompute.MLCConvolutionLayer::Create(MLCompute.MLCTensor,MLCompute.MLCTensor,MLCompute.MLCConvolutionDescriptor)",
			"MLCompute.MLCDevice::Copy(Foundation.NSZone)",
			"MLCompute.MLCEmbeddingDescriptor::Copy(Foundation.NSZone)",
			"MLCompute.MLCEmbeddingDescriptor::Create(System.IntPtr,System.IntPtr)",
			"MLCompute.MLCEmbeddingDescriptor::Create(System.IntPtr,System.IntPtr,System.Nullable`1<System.IntPtr>,System.Nullable`1<System.Single>,System.Nullable`1<System.Single>,System.Boolean)",
			"MLCompute.MLCEmbeddingLayer::Create(MLCompute.MLCEmbeddingDescriptor,MLCompute.MLCTensor)",
			"MLCompute.MLCFullyConnectedLayer::Create(MLCompute.MLCTensor,MLCompute.MLCTensor,MLCompute.MLCConvolutionDescriptor)",
			"MLCompute.MLCGraph::BindAndWrite(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>,MLCompute.MLCDevice,System.Boolean)",
			"MLCompute.MLCGraph::BindAndWrite(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>,MLCompute.MLCDevice,System.UIntPtr,System.Boolean)",
			"MLCompute.MLCGraph::CreateNode(MLCompute.MLCLayer,MLCompute.MLCTensor)",
			"MLCompute.MLCGraph::CreateNode(MLCompute.MLCLayer,MLCompute.MLCTensor[])",
			"MLCompute.MLCGraph::CreateNode(MLCompute.MLCLayer,MLCompute.MLCTensor[],MLCompute.MLCTensor[])",
			"MLCompute.MLCGraph::CreateNode(MLCompute.MLCLayer,MLCompute.MLCTensor[],System.Boolean)",
			"MLCompute.MLCGraph::Gather(System.UIntPtr,MLCompute.MLCTensor,MLCompute.MLCTensor)",
			"MLCompute.MLCGraph::GetResultTensors(MLCompute.MLCLayer)",
			"MLCompute.MLCGraph::GetSourceTensors(MLCompute.MLCLayer)",
			"MLCompute.MLCGraph::Reshape(System.IntPtr[],MLCompute.MLCTensor)",
			"MLCompute.MLCGraph::Scatter(System.UIntPtr,MLCompute.MLCTensor,MLCompute.MLCTensor,MLCompute.MLCTensor,MLCompute.MLCReductionType)",
			"MLCompute.MLCGraph::Select(MLCompute.MLCTensor[],MLCompute.MLCTensor)",
			"MLCompute.MLCGraph::Split(MLCompute.MLCTensor,System.UIntPtr,System.UIntPtr)",
			"MLCompute.MLCGraph::Split(MLCompute.MLCTensor,System.UIntPtr[],System.UIntPtr)",
			"MLCompute.MLCGraph::Transpose(System.IntPtr[],MLCompute.MLCTensor)",
			"MLCompute.MLCGroupNormalizationLayer::Create(System.UIntPtr,System.UIntPtr,MLCompute.MLCTensor,MLCompute.MLCTensor,System.Single)",
			"MLCompute.MLCInferenceGraph::AddInputs(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>)",
			"MLCompute.MLCInferenceGraph::AddInputs(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>)",
			"MLCompute.MLCInferenceGraph::AddOutputs(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>)",
			"MLCompute.MLCInferenceGraph::Compile(MLCompute.MLCGraphCompilationOptions,MLCompute.MLCDevice)",
			"MLCompute.MLCInferenceGraph::Compile(MLCompute.MLCGraphCompilationOptions,MLCompute.MLCDevice,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>)",
			"MLCompute.MLCInferenceGraph::Execute(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,System.UIntPtr,MLCompute.MLCExecutionOptions,MLCompute.MLCGraphCompletionHandler)",
			"MLCompute.MLCInferenceGraph::Execute(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,System.UIntPtr,MLCompute.MLCExecutionOptions,MLCompute.MLCGraphCompletionHandler)",
			"MLCompute.MLCInferenceGraph::Execute(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,System.UIntPtr,MLCompute.MLCExecutionOptions,MLCompute.MLCGraphCompletionHandler)",
			"MLCompute.MLCInferenceGraph::Execute(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,System.UIntPtr,MLCompute.MLCExecutionOptions,MLCompute.MLCGraphCompletionHandler)",
			"MLCompute.MLCInstanceNormalizationLayer::Create(System.UIntPtr,MLCompute.MLCTensor,MLCompute.MLCTensor,MLCompute.MLCTensor,MLCompute.MLCTensor,System.Single,System.Single)",
			"MLCompute.MLCInstanceNormalizationLayer::Create(System.UIntPtr,MLCompute.MLCTensor,MLCompute.MLCTensor,System.Single)",
			"MLCompute.MLCInstanceNormalizationLayer::Create(System.UIntPtr,MLCompute.MLCTensor,MLCompute.MLCTensor,System.Single,System.Single)",
			"MLCompute.MLCLayerNormalizationLayer::Create(System.IntPtr[],MLCompute.MLCTensor,MLCompute.MLCTensor,System.Single)",
			"MLCompute.MLCLossDescriptor::Copy(Foundation.NSZone)",
			"MLCompute.MLCLossLayer::Create(MLCompute.MLCLossDescriptor)",
			"MLCompute.MLCLossLayer::Create(MLCompute.MLCLossDescriptor,MLCompute.MLCTensor)",
			"MLCompute.MLCLossLayer::CreateCategoricalCrossEntropyLoss(MLCompute.MLCReductionType,System.Single,System.UIntPtr,MLCompute.MLCTensor)",
			"MLCompute.MLCLossLayer::CreateCosineDistanceLoss(MLCompute.MLCReductionType,MLCompute.MLCTensor)",
			"MLCompute.MLCLossLayer::CreateHingeLoss(MLCompute.MLCReductionType,MLCompute.MLCTensor)",
			"MLCompute.MLCLossLayer::CreateHuberLoss(MLCompute.MLCReductionType,System.Single,MLCompute.MLCTensor)",
			"MLCompute.MLCLossLayer::CreateLogLoss(MLCompute.MLCReductionType,System.Single,MLCompute.MLCTensor)",
			"MLCompute.MLCLossLayer::CreateMeanAbsoluteErrorLoss(MLCompute.MLCReductionType,MLCompute.MLCTensor)",
			"MLCompute.MLCLossLayer::CreateMeanSquaredErrorLoss(MLCompute.MLCReductionType,MLCompute.MLCTensor)",
			"MLCompute.MLCLossLayer::CreateSigmoidCrossEntropyLoss(MLCompute.MLCReductionType,System.Single,MLCompute.MLCTensor)",
			"MLCompute.MLCLossLayer::CreateSoftmaxCrossEntropyLoss(MLCompute.MLCReductionType,System.Single,System.UIntPtr,MLCompute.MLCTensor)",
			"MLCompute.MLCLstmDescriptor::Copy(Foundation.NSZone)",
			"MLCompute.MLCLstmLayer::Create(MLCompute.MLCLstmDescriptor,MLCompute.MLCTensor[],MLCompute.MLCTensor[],MLCompute.MLCTensor[])",
			"MLCompute.MLCLstmLayer::Create(MLCompute.MLCLstmDescriptor,MLCompute.MLCTensor[],MLCompute.MLCTensor[],MLCompute.MLCTensor[],MLCompute.MLCTensor[])",
			"MLCompute.MLCLstmLayer::Create(MLCompute.MLCLstmDescriptor,MLCompute.MLCTensor[],MLCompute.MLCTensor[],MLCompute.MLCTensor[],MLCompute.MLCTensor[],MLCompute.MLCActivationDescriptor[],MLCompute.MLCActivationDescriptor)",
			"MLCompute.MLCMatMulDescriptor::Copy(Foundation.NSZone)",
			"MLCompute.MLCMatMulLayer::Create(MLCompute.MLCMatMulDescriptor)",
			"MLCompute.MLCMultiheadAttentionDescriptor::Copy(Foundation.NSZone)",
			"MLCompute.MLCMultiheadAttentionLayer::Create(MLCompute.MLCMultiheadAttentionDescriptor,MLCompute.MLCTensor[],MLCompute.MLCTensor[],MLCompute.MLCTensor[])",
			"MLCompute.MLCOptimizer::Copy(Foundation.NSZone)",
			"MLCompute.MLCOptimizerDescriptor::Copy(Foundation.NSZone)",
			"MLCompute.MLCPaddingLayer::Copy(Foundation.NSZone)",
			"MLCompute.MLCPlatform::SetRngSeed(System.UIntPtr)",
			"MLCompute.MLCPoolingDescriptor::Copy(Foundation.NSZone)",
			"MLCompute.MLCPoolingLayer::Create(MLCompute.MLCPoolingDescriptor)",
			"MLCompute.MLCRmsPropOptimizer::Copy(Foundation.NSZone)",
			"MLCompute.MLCRmsPropOptimizer::Create(MLCompute.MLCOptimizerDescriptor)",
			"MLCompute.MLCRmsPropOptimizer::Create(MLCompute.MLCOptimizerDescriptor,System.Single,System.Single,System.Single,System.Boolean)",
			"MLCompute.MLCSgdOptimizer::Copy(Foundation.NSZone)",
			"MLCompute.MLCSgdOptimizer::Create(MLCompute.MLCOptimizerDescriptor)",
			"MLCompute.MLCSgdOptimizer::Create(MLCompute.MLCOptimizerDescriptor,System.Single,System.Boolean)",
			"MLCompute.MLCTensor::BindAndWrite(MLCompute.MLCTensorData,MLCompute.MLCDevice)",
			"MLCompute.MLCTensor::Copy(Foundation.NSZone)",
			"MLCompute.MLCTensor::Create(MLCompute.MLCTensorDescriptor)",
			"MLCompute.MLCTensor::Create(MLCompute.MLCTensorDescriptor,Foundation.NSNumber)",
			"MLCompute.MLCTensor::Create(MLCompute.MLCTensorDescriptor,MLCompute.MLCRandomInitializerType)",
			"MLCompute.MLCTensor::Create(MLCompute.MLCTensorDescriptor,MLCompute.MLCTensorData)",
			"MLCompute.MLCTensor::Create(System.IntPtr[],Foundation.NSNumber,MLCompute.MLCDataType)",
			"MLCompute.MLCTensor::Create(System.IntPtr[],MLCompute.MLCTensorData,MLCompute.MLCDataType)",
			"MLCompute.MLCTensor::Create(System.IntPtr[],System.Boolean,System.UIntPtr,System.UIntPtr,MLCompute.MLCTensorData)",
			"MLCompute.MLCTensor::Create(System.UIntPtr,System.UIntPtr,System.UIntPtr,MLCompute.MLCTensorData)",
			"MLCompute.MLCTensor::Create(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,MLCompute.MLCTensorData)",
			"MLCompute.MLCTensor::Create(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,MLCompute.MLCTensorData,MLCompute.MLCDataType)",
			"MLCompute.MLCTensor::CreateByDequantizing(MLCompute.MLCDataType,MLCompute.MLCTensor,MLCompute.MLCTensor)",
			"MLCompute.MLCTensor::CreateByDequantizing(MLCompute.MLCDataType,MLCompute.MLCTensor,MLCompute.MLCTensor,System.IntPtr)",
			"MLCompute.MLCTensor::CreateByQuantizing(MLCompute.MLCDataType,MLCompute.MLCTensor,MLCompute.MLCTensor,System.IntPtr)",
			"MLCompute.MLCTensorDescriptor::Copy(Foundation.NSZone)",
			"MLCompute.MLCTensorOptimizerDeviceData::Copy(Foundation.NSZone)",
			"MLCompute.MLCTensorParameter::Create(MLCompute.MLCTensor)",
			"MLCompute.MLCTensorParameter::Create(MLCompute.MLCTensor,MLCompute.MLCTensorData[])",
			"MLCompute.MLCTrainingGraph::AddInputs(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>)",
			"MLCompute.MLCTrainingGraph::AddInputs(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>)",
			"MLCompute.MLCTrainingGraph::AddOutputs(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>)",
			"MLCompute.MLCTrainingGraph::AllocateUserGradient(MLCompute.MLCTensor)",
			"MLCompute.MLCTrainingGraph::BindOptimizer(MLCompute.MLCTensorData[],MLCompute.MLCTensorOptimizerDeviceData[],MLCompute.MLCTensor)",
			"MLCompute.MLCTrainingGraph::Compile(MLCompute.MLCGraphCompilationOptions,MLCompute.MLCDevice)",
			"MLCompute.MLCTrainingGraph::Compile(MLCompute.MLCGraphCompilationOptions,MLCompute.MLCDevice,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensor>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>)",
			"MLCompute.MLCTrainingGraph::Compile(MLCompute.MLCOptimizer)",
			"MLCompute.MLCTrainingGraph::Create(MLCompute.MLCGraph[],MLCompute.MLCLayer,MLCompute.MLCOptimizer)",
			"MLCompute.MLCTrainingGraph::Execute(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,System.UIntPtr,MLCompute.MLCExecutionOptions,MLCompute.MLCGraphCompletionHandler)",
			"MLCompute.MLCTrainingGraph::Execute(Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,System.UIntPtr,MLCompute.MLCExecutionOptions,MLCompute.MLCGraphCompletionHandler)",
			"MLCompute.MLCTrainingGraph::ExecuteForward(System.UIntPtr,MLCompute.MLCExecutionOptions,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,MLCompute.MLCGraphCompletionHandler)",
			"MLCompute.MLCTrainingGraph::ExecuteGradient(System.UIntPtr,MLCompute.MLCExecutionOptions,Foundation.NSDictionary`2<Foundation.NSString,MLCompute.MLCTensorData>,MLCompute.MLCGraphCompletionHandler)",
			"MLCompute.MLCTrainingGraph::GetGradientData(MLCompute.MLCTensor,MLCompute.MLCLayer)",
			"MLCompute.MLCTrainingGraph::GetGradientTensor(MLCompute.MLCTensor)",
			"MLCompute.MLCTrainingGraph::GetResultGradientTensors(MLCompute.MLCLayer)",
			"MLCompute.MLCTrainingGraph::GetSourceGradientTensors(MLCompute.MLCLayer)",
			"MLCompute.MLCYoloLossDescriptor::Copy(Foundation.NSZone)",
			"MLCompute.MLCYoloLossDescriptor::Create(Foundation.NSData,System.UIntPtr)",
			"MLCompute.MLCYoloLossLayer::Create(MLCompute.MLCYoloLossDescriptor)",
			"MobileCoreServices.UTType::Equals(Foundation.NSString,Foundation.NSString)",
			"ModelIO.MDLAnimatedValue::Copy(Foundation.NSZone)",
			"ModelIO.MDLAnimationBindComponent::Copy(Foundation.NSZone)",
			"ModelIO.MDLAnimationBindComponent::set_JointAnimation(ModelIO.IMDLJointAnimation)",
			"ModelIO.MDLAnimationBindComponent::set_Skeleton(ModelIO.MDLSkeleton)",
			"ModelIO.MDLAsset::.ctor(Foundation.NSUrl)",
			"ModelIO.MDLAsset::.ctor(Foundation.NSUrl,ModelIO.MDLVertexDescriptor,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLAsset::.ctor(Foundation.NSUrl,ModelIO.MDLVertexDescriptor,ModelIO.IMDLMeshBufferAllocator,System.Boolean,Foundation.NSError&)",
			"ModelIO.MDLAsset::.ctor(ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLAsset::AddObject(ModelIO.MDLObject)",
			"ModelIO.MDLAsset::Copy(Foundation.NSZone)",
			"ModelIO.MDLAsset::ExportAssetToUrl(Foundation.NSUrl,Foundation.NSError&)",
			"ModelIO.MDLAsset::FromScene(SceneKit.SCNScene)",
			"ModelIO.MDLAsset::FromScene(SceneKit.SCNScene,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLAsset::PlaceLightProbes(System.Single,ModelIO.MDLProbePlacement,ModelIO.IMDLLightProbeIrradianceDataSource)",
			"ModelIO.MDLAsset::RemoveObject(ModelIO.MDLObject)",
			"ModelIO.MDLAsset::set_Animations(ModelIO.IMDLObjectContainerComponent)",
			"ModelIO.MDLAsset::set_Masters(ModelIO.IMDLObjectContainerComponent)",
			"ModelIO.MDLAsset::set_Originals(ModelIO.IMDLObjectContainerComponent)",
			"ModelIO.MDLAsset::set_Resolver(ModelIO.IMDLAssetResolver)",
			"ModelIO.MDLAsset::SetComponent(ModelIO.IMDLComponent,ObjCRuntime.Protocol)",
			"ModelIO.MDLCamera::FromSceneCamera(SceneKit.SCNCamera)",
			"ModelIO.MDLCheckerboardTexture::.ctor(Foundation.NSData,System.Boolean,System.String,CoreGraphics.NVector2i,System.IntPtr,System.UIntPtr,ModelIO.MDLTextureChannelEncoding,System.Boolean)",
			"ModelIO.MDLCheckerboardTexture::.ctor(System.Single,System.String,CoreGraphics.NVector2i,System.Int32,ModelIO.MDLTextureChannelEncoding,CoreGraphics.CGColor,CoreGraphics.CGColor)",
			"ModelIO.MDLCheckerboardTexture::set_Color1(CoreGraphics.CGColor)",
			"ModelIO.MDLCheckerboardTexture::set_Color2(CoreGraphics.CGColor)",
			"ModelIO.MDLColorSwatchTexture::.ctor(CoreGraphics.CGColor,CoreGraphics.CGColor,System.String,CoreGraphics.NVector2i)",
			"ModelIO.MDLColorSwatchTexture::.ctor(Foundation.NSData,System.Boolean,System.String,CoreGraphics.NVector2i,System.IntPtr,System.UIntPtr,ModelIO.MDLTextureChannelEncoding,System.Boolean)",
			"ModelIO.MDLLight::FromSceneLight(SceneKit.SCNLight)",
			"ModelIO.MDLLight::GetIrradiance(System.Numerics.Vector3,CoreGraphics.CGColorSpace)",
			"ModelIO.MDLLight::set_ColorSpace(Foundation.NSString)",
			"ModelIO.MDLLightProbe::.ctor(ModelIO.MDLTexture,ModelIO.MDLTexture)",
			"ModelIO.MDLLightProbe::Create(System.IntPtr,ModelIO.MDLTransform,ModelIO.MDLLight[],ModelIO.MDLObject[],ModelIO.MDLTexture,ModelIO.MDLTexture)",
			"ModelIO.MDLLightProbeIrradianceDataSource_Extensions::GetSphericalHarmonicsCoefficients(ModelIO.IMDLLightProbeIrradianceDataSource,System.Numerics.Vector3)",
			"ModelIO.MDLLightProbeIrradianceDataSource_Extensions::GetSphericalHarmonicsLevel(ModelIO.IMDLLightProbeIrradianceDataSource)",
			"ModelIO.MDLLightProbeIrradianceDataSource_Extensions::SetSphericalHarmonicsLevel(ModelIO.IMDLLightProbeIrradianceDataSource,System.UIntPtr)",
			"ModelIO.MDLMaterial::.ctor(System.String,ModelIO.MDLScatteringFunction)",
			"ModelIO.MDLMaterial::FromSceneMaterial(SceneKit.SCNMaterial)",
			"ModelIO.MDLMaterial::LoadTextures(ModelIO.IMDLAssetResolver)",
			"ModelIO.MDLMaterial::RemoveProperty(ModelIO.MDLMaterialProperty)",
			"ModelIO.MDLMaterial::ResolveTextures(ModelIO.IMDLAssetResolver)",
			"ModelIO.MDLMaterial::set_BaseMaterial(ModelIO.MDLMaterial)",
			"ModelIO.MDLMaterial::SetProperty(ModelIO.MDLMaterialProperty)",
			"ModelIO.MDLMaterialProperty::.ctor(System.String,ModelIO.MDLMaterialSemantic,CoreGraphics.CGColor)",
			"ModelIO.MDLMaterialProperty::.ctor(System.String,ModelIO.MDLMaterialSemantic,Foundation.NSUrl)",
			"ModelIO.MDLMaterialProperty::.ctor(System.String,ModelIO.MDLMaterialSemantic,ModelIO.MDLTextureSampler)",
			"ModelIO.MDLMaterialProperty::Copy(Foundation.NSZone)",
			"ModelIO.MDLMaterialProperty::set_Color(CoreGraphics.CGColor)",
			"ModelIO.MDLMaterialProperty::set_TextureSamplerValue(ModelIO.MDLTextureSampler)",
			"ModelIO.MDLMaterialProperty::set_UrlValue(Foundation.NSUrl)",
			"ModelIO.MDLMaterialProperty::SetProperties(ModelIO.MDLMaterialProperty)",
			"ModelIO.MDLMaterialPropertyConnection::.ctor(ModelIO.MDLMaterialProperty,ModelIO.MDLMaterialProperty)",
			"ModelIO.MDLMatrix4x4Array::Copy(Foundation.NSZone)",
			"ModelIO.MDLMesh::.ctor(ModelIO.IMDLMeshBuffer,System.UIntPtr,ModelIO.MDLVertexDescriptor,ModelIO.MDLSubmesh[])",
			"ModelIO.MDLMesh::.ctor(ModelIO.IMDLMeshBuffer[],System.UIntPtr,ModelIO.MDLVertexDescriptor,ModelIO.MDLSubmesh[])",
			"ModelIO.MDLMesh::.ctor(ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::AddAttribute(System.String,ModelIO.MDLVertexFormat,System.String,Foundation.NSData,System.IntPtr)",
			"ModelIO.MDLMesh::AddAttribute(System.String,ModelIO.MDLVertexFormat,System.String,Foundation.NSData,System.IntPtr,System.Double)",
			"ModelIO.MDLMesh::CreateCapsule(System.Single,System.Numerics.Vector2,System.UIntPtr,System.UIntPtr,System.UIntPtr,ModelIO.MDLGeometryType,System.Boolean,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::CreateCylindroid(System.Single,System.Numerics.Vector2,System.UIntPtr,System.UIntPtr,ModelIO.MDLGeometryType,System.Boolean,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::CreateEllipsoid(System.Numerics.Vector3,System.UIntPtr,System.UIntPtr,ModelIO.MDLGeometryType,System.Boolean,System.Boolean,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::CreateEllipticalCone(System.Single,System.Numerics.Vector2,System.UIntPtr,System.UIntPtr,ModelIO.MDLGeometryType,System.Boolean,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::CreateIcosahedron(System.Single,System.Boolean,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::CreateIcosahedron(System.Single,System.Boolean,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::CreatePlane(System.Numerics.Vector2,CoreGraphics.NVector2i,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::CreateSubdividedMesh(ModelIO.MDLMesh,System.UIntPtr,System.UIntPtr)",
			"ModelIO.MDLMesh::FromGeometry(SceneKit.SCNGeometry)",
			"ModelIO.MDLMesh::FromGeometry(SceneKit.SCNGeometry,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::InitBox(System.Numerics.Vector3,CoreGraphics.NVector3i,System.Boolean,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::InitCapsule(System.Numerics.Vector3,CoreGraphics.NVector2i,System.Int32,System.Boolean,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::InitCone(System.Numerics.Vector3,CoreGraphics.NVector2i,System.Boolean,System.Boolean,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::InitCylinder(System.Numerics.Vector3,CoreGraphics.NVector2i,System.Boolean,System.Boolean,System.Boolean,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::InitHemisphere(System.Numerics.Vector3,CoreGraphics.NVector2i,System.Boolean,System.Boolean,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::InitIcosahedron(System.Numerics.Vector3,System.Boolean,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::InitMesh(ModelIO.MDLMesh,System.Int32,System.UInt32,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::InitPlane(System.Numerics.Vector3,CoreGraphics.NVector2i,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::InitSphere(System.Numerics.Vector3,CoreGraphics.NVector2i,System.Boolean,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::NewBoxWithDimensions(System.Numerics.Vector3,CoreGraphics.NVector3i,ModelIO.MDLGeometryType,System.Boolean,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLMesh::ReplaceAttribute(System.String,ModelIO.MDLVertexAttributeData)",
			"ModelIO.MDLMesh::set_Submeshes(Foundation.NSMutableArray`1<ModelIO.MDLSubmesh>)",
			"ModelIO.MDLMesh::set_VertexDescriptor(ModelIO.MDLVertexDescriptor)",
			"ModelIO.MDLMesh::UpdateAttribute(System.String,ModelIO.MDLVertexAttributeData)",
			"ModelIO.MDLMeshBufferAllocatorWrapper::CreateBuffer(Foundation.NSData,ModelIO.MDLMeshBufferType)",
			"ModelIO.MDLMeshBufferAllocatorWrapper::CreateBuffer(ModelIO.IMDLMeshBufferZone,Foundation.NSData,ModelIO.MDLMeshBufferType)",
			"ModelIO.MDLMeshBufferAllocatorWrapper::CreateBuffer(ModelIO.IMDLMeshBufferZone,System.UIntPtr,ModelIO.MDLMeshBufferType)",
			"ModelIO.MDLMeshBufferData::.ctor(ModelIO.MDLMeshBufferType,Foundation.NSData)",
			"ModelIO.MDLMeshBufferData::Copy(Foundation.NSZone)",
			"ModelIO.MDLMeshBufferData::FillData(Foundation.NSData,System.UIntPtr)",
			"ModelIO.MDLMeshBufferDataAllocator::CreateBuffer(Foundation.NSData,ModelIO.MDLMeshBufferType)",
			"ModelIO.MDLMeshBufferDataAllocator::CreateBuffer(ModelIO.IMDLMeshBufferZone,Foundation.NSData,ModelIO.MDLMeshBufferType)",
			"ModelIO.MDLMeshBufferDataAllocator::CreateBuffer(ModelIO.IMDLMeshBufferZone,System.UIntPtr,ModelIO.MDLMeshBufferType)",
			"ModelIO.MDLMeshBufferWrapper::Copy(Foundation.NSZone)",
			"ModelIO.MDLMeshBufferWrapper::FillData(Foundation.NSData,System.UIntPtr)",
			"ModelIO.MDLNoiseTexture::.ctor(Foundation.NSData,System.Boolean,System.String,CoreGraphics.NVector2i,System.IntPtr,System.UIntPtr,ModelIO.MDLTextureChannelEncoding,System.Boolean)",
			"ModelIO.MDLNormalMapTexture::.ctor(Foundation.NSData,System.Boolean,System.String,CoreGraphics.NVector2i,System.IntPtr,System.UIntPtr,ModelIO.MDLTextureChannelEncoding,System.Boolean)",
			"ModelIO.MDLNormalMapTexture::.ctor(ModelIO.MDLTexture,System.String,System.Single,System.Single)",
			"ModelIO.MDLObject::AddChild(ModelIO.MDLObject)",
			"ModelIO.MDLObject::EnumerateChildObjects(ObjCRuntime.Class,ModelIO.MDLObject,ModelIO.MDLObjectHandler,System.Boolean&)",
			"ModelIO.MDLObject::FromNode(SceneKit.SCNNode)",
			"ModelIO.MDLObject::FromNode(SceneKit.SCNNode,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLObject::set_Children(ModelIO.IMDLObjectContainerComponent)",
			"ModelIO.MDLObject::set_Instance(ModelIO.MDLObject)",
			"ModelIO.MDLObject::set_Transform(ModelIO.IMDLTransformComponent)",
			"ModelIO.MDLObject::SetComponent(ModelIO.IMDLComponent,ObjCRuntime.Protocol)",
			"ModelIO.MDLObjectContainer::AddObject(ModelIO.MDLObject)",
			"ModelIO.MDLObjectContainer::RemoveObject(ModelIO.MDLObject)",
			"ModelIO.MDLObjectContainerComponentWrapper::AddObject(ModelIO.MDLObject)",
			"ModelIO.MDLObjectContainerComponentWrapper::RemoveObject(ModelIO.MDLObject)",
			"ModelIO.MDLPackedJointAnimation::Copy(Foundation.NSZone)",
			"ModelIO.MDLPhotometricLight::.ctor(Foundation.NSUrl)",
			"ModelIO.MDLPhysicallyPlausibleLight::set_Color(CoreGraphics.CGColor)",
			"ModelIO.MDLRelativeAssetResolver::.ctor(ModelIO.MDLAsset)",
			"ModelIO.MDLSkeleton::Copy(Foundation.NSZone)",
			"ModelIO.MDLSkyCubeTexture::.ctor(Foundation.NSData,System.Boolean,System.String,CoreGraphics.NVector2i,System.IntPtr,System.UIntPtr,ModelIO.MDLTextureChannelEncoding,System.Boolean)",
			"ModelIO.MDLSkyCubeTexture::set_GroundColor(CoreGraphics.CGColor)",
			"ModelIO.MDLSubmesh::.ctor(ModelIO.IMDLMeshBuffer,System.UIntPtr,ModelIO.MDLIndexBitDepth,ModelIO.MDLGeometryType,ModelIO.MDLMaterial)",
			"ModelIO.MDLSubmesh::.ctor(ModelIO.MDLSubmesh,ModelIO.MDLIndexBitDepth,ModelIO.MDLGeometryType)",
			"ModelIO.MDLSubmesh::.ctor(System.String,ModelIO.IMDLMeshBuffer,System.UIntPtr,ModelIO.MDLIndexBitDepth,ModelIO.MDLGeometryType,ModelIO.MDLMaterial)",
			"ModelIO.MDLSubmesh::.ctor(System.String,ModelIO.IMDLMeshBuffer,System.UIntPtr,ModelIO.MDLIndexBitDepth,ModelIO.MDLGeometryType,ModelIO.MDLMaterial,ModelIO.MDLSubmeshTopology)",
			"ModelIO.MDLSubmesh::FromGeometryElement(SceneKit.SCNGeometryElement)",
			"ModelIO.MDLSubmesh::FromGeometryElement(SceneKit.SCNGeometryElement,ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLSubmesh::set_Material(ModelIO.MDLMaterial)",
			"ModelIO.MDLSubmesh::set_Topology(ModelIO.MDLSubmeshTopology)",
			"ModelIO.MDLSubmeshTopology::.ctor(ModelIO.MDLSubmesh)",
			"ModelIO.MDLSubmeshTopology::set_EdgeCreaseIndices(ModelIO.IMDLMeshBuffer)",
			"ModelIO.MDLSubmeshTopology::set_EdgeCreases(ModelIO.IMDLMeshBuffer)",
			"ModelIO.MDLSubmeshTopology::set_FaceTopology(ModelIO.IMDLMeshBuffer)",
			"ModelIO.MDLSubmeshTopology::set_Holes(ModelIO.IMDLMeshBuffer)",
			"ModelIO.MDLSubmeshTopology::set_VertexCreaseIndices(ModelIO.IMDLMeshBuffer)",
			"ModelIO.MDLSubmeshTopology::set_VertexCreases(ModelIO.IMDLMeshBuffer)",
			"ModelIO.MDLTexture::.ctor(Foundation.NSData,System.Boolean,System.String,CoreGraphics.NVector2i,System.IntPtr,System.UIntPtr,ModelIO.MDLTextureChannelEncoding,System.Boolean)",
			"ModelIO.MDLTexture::CreateIrradianceTextureCube(ModelIO.MDLTexture,System.String,CoreGraphics.NVector2i)",
			"ModelIO.MDLTexture::CreateIrradianceTextureCube(ModelIO.MDLTexture,System.String,CoreGraphics.NVector2i,System.Single)",
			"ModelIO.MDLTexture::CreateTexture(System.String,Foundation.NSBundle)",
			"ModelIO.MDLTexture::CreateTexture(System.String,ModelIO.IMDLAssetResolver)",
			"ModelIO.MDLTexture::CreateTextureCube(System.String[],Foundation.NSBundle)",
			"ModelIO.MDLTexture::WriteToUrl(Foundation.NSUrl)",
			"ModelIO.MDLTexture::WriteToUrl(Foundation.NSUrl,System.String)",
			"ModelIO.MDLTexture::WriteToUrl(Foundation.NSUrl,System.String,System.UIntPtr)",
			"ModelIO.MDLTexture::WriteToUrl(Foundation.NSUrl,System.UIntPtr)",
			"ModelIO.MDLTextureSampler::set_HardwareFilter(ModelIO.MDLTextureFilter)",
			"ModelIO.MDLTextureSampler::set_Texture(ModelIO.MDLTexture)",
			"ModelIO.MDLTextureSampler::set_Transform(ModelIO.MDLTransform)",
			"ModelIO.MDLTransform::.ctor(ModelIO.IMDLTransformComponent)",
			"ModelIO.MDLTransform::.ctor(ModelIO.IMDLTransformComponent,System.Boolean)",
			"ModelIO.MDLTransform::Copy(Foundation.NSZone)",
			"ModelIO.MDLTransform::CreateGlobalTransform(ModelIO.MDLObject,System.Double)",
			"ModelIO.MDLTransformComponent_Extensions::GetLocalTransform(ModelIO.IMDLTransformComponent,System.Double)",
			"ModelIO.MDLTransformComponent_Extensions::SetLocalTransform(ModelIO.IMDLTransformComponent,CoreGraphics.NMatrix4)",
			"ModelIO.MDLTransformComponent_Extensions::SetLocalTransform(ModelIO.IMDLTransformComponent,CoreGraphics.NMatrix4,System.Double)",
			"ModelIO.MDLTransformStack::Copy(Foundation.NSZone)",
			"ModelIO.MDLTransformStack::CreateGlobalTransform(ModelIO.MDLObject,System.Double)",
			"ModelIO.MDLUrlTexture::.ctor(Foundation.NSData,System.Boolean,System.String,CoreGraphics.NVector2i,System.IntPtr,System.UIntPtr,ModelIO.MDLTextureChannelEncoding,System.Boolean)",
			"ModelIO.MDLUrlTexture::.ctor(Foundation.NSUrl,System.String)",
			"ModelIO.MDLUrlTexture::set_Url(Foundation.NSUrl)",
			"ModelIO.MDLVertexAttribute::Copy(Foundation.NSZone)",
			"ModelIO.MDLVertexAttributeData::set_Map(ModelIO.MDLMeshBufferMap)",
			"ModelIO.MDLVertexBufferLayout::Copy(Foundation.NSZone)",
			"ModelIO.MDLVertexDescriptor::.ctor(ModelIO.MDLVertexDescriptor)",
			"ModelIO.MDLVertexDescriptor::AddOrReplaceAttribute(ModelIO.MDLVertexAttribute)",
			"ModelIO.MDLVertexDescriptor::Copy(Foundation.NSZone)",
			"ModelIO.MDLVertexDescriptor::FromMetal(Metal.MTLVertexDescriptor)",
			"ModelIO.MDLVertexDescriptor::FromMetal(Metal.MTLVertexDescriptor,Foundation.NSError&)",
			"ModelIO.MDLVertexDescriptor::set_Attributes(Foundation.NSMutableArray`1<ModelIO.MDLVertexAttribute>)",
			"ModelIO.MDLVertexDescriptor::set_Layouts(Foundation.NSMutableArray`1<ModelIO.MDLVertexBufferLayout>)",
			"ModelIO.MDLVoxelArray::.ctor(Foundation.NSData,ModelIO.MDLAxisAlignedBoundingBox,System.Single)",
			"ModelIO.MDLVoxelArray::.ctor(ModelIO.MDLAsset,System.Int32,System.Int32,System.Int32,System.Single)",
			"ModelIO.MDLVoxelArray::.ctor(ModelIO.MDLAsset,System.Int32,System.Single)",
			"ModelIO.MDLVoxelArray::.ctor(ModelIO.MDLAsset,System.Int32,System.Single,System.Single,System.Single)",
			"ModelIO.MDLVoxelArray::CreateMesh(ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLVoxelArray::DifferenceWith(ModelIO.MDLVoxelArray)",
			"ModelIO.MDLVoxelArray::GetCoarseMeshUsingAllocator(ModelIO.IMDLMeshBufferAllocator)",
			"ModelIO.MDLVoxelArray::IntersectWith(ModelIO.MDLVoxelArray)",
			"ModelIO.MDLVoxelArray::SetVoxels(ModelIO.MDLMesh,System.Int32,System.Int32,System.Int32,System.Single)",
			"ModelIO.MDLVoxelArray::SetVoxels(ModelIO.MDLMesh,System.Int32,System.Single)",
			"ModelIO.MDLVoxelArray::SetVoxels(ModelIO.MDLMesh,System.Int32,System.Single,System.Single,System.Single)",
			"ModelIO.MDLVoxelArray::UnionWith(ModelIO.MDLVoxelArray)",
			"MultipeerConnectivity.MCAdvertiserAssistant::.ctor(System.String,Foundation.NSDictionary,MultipeerConnectivity.MCSession)",
			"MultipeerConnectivity.MCAdvertiserAssistantDelegate_Extensions::DidDismissInvitation(MultipeerConnectivity.IMCAdvertiserAssistantDelegate,MultipeerConnectivity.MCAdvertiserAssistant)",
			"MultipeerConnectivity.MCAdvertiserAssistantDelegate_Extensions::WillPresentInvitation(MultipeerConnectivity.IMCAdvertiserAssistantDelegate,MultipeerConnectivity.MCAdvertiserAssistant)",
			"MultipeerConnectivity.MCBrowserViewController::.ctor(Foundation.NSCoder)",
			"MultipeerConnectivity.MCBrowserViewController::.ctor(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCSession)",
			"MultipeerConnectivity.MCBrowserViewController::.ctor(System.String,Foundation.NSBundle)",
			"MultipeerConnectivity.MCBrowserViewController::.ctor(System.String,MultipeerConnectivity.MCSession)",
			"MultipeerConnectivity.MCBrowserViewController::DidNotStartBrowsingForPeers(MultipeerConnectivity.MCNearbyServiceBrowser,Foundation.NSError)",
			"MultipeerConnectivity.MCBrowserViewController::FoundPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID,Foundation.NSDictionary)",
			"MultipeerConnectivity.MCBrowserViewController::LostPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID)",
			"MultipeerConnectivity.MCBrowserViewControllerDelegate_Extensions::ShouldPresentNearbyPeer(MultipeerConnectivity.IMCBrowserViewControllerDelegate,MultipeerConnectivity.MCBrowserViewController,MultipeerConnectivity.MCPeerID,Foundation.NSDictionary)",
			"MultipeerConnectivity.MCBrowserViewControllerDelegateWrapper::DidFinish(MultipeerConnectivity.MCBrowserViewController)",
			"MultipeerConnectivity.MCBrowserViewControllerDelegateWrapper::WasCancelled(MultipeerConnectivity.MCBrowserViewController)",
			"MultipeerConnectivity.MCNearbyServiceAdvertiser::.ctor(MultipeerConnectivity.MCPeerID,Foundation.NSDictionary,System.String)",
			"MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate_Extensions::DidNotStartAdvertisingPeer(MultipeerConnectivity.IMCNearbyServiceAdvertiserDelegate,MultipeerConnectivity.MCNearbyServiceAdvertiser,Foundation.NSError)",
			"MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateWrapper::DidReceiveInvitationFromPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,MultipeerConnectivity.MCPeerID,Foundation.NSData,MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler)",
			"MultipeerConnectivity.MCNearbyServiceBrowser::.ctor(MultipeerConnectivity.MCPeerID,System.String)",
			"MultipeerConnectivity.MCNearbyServiceBrowser::InvitePeer(MultipeerConnectivity.MCPeerID,MultipeerConnectivity.MCSession,Foundation.NSData,System.Double)",
			"MultipeerConnectivity.MCNearbyServiceBrowserDelegate_Extensions::DidNotStartBrowsingForPeers(MultipeerConnectivity.IMCNearbyServiceBrowserDelegate,MultipeerConnectivity.MCNearbyServiceBrowser,Foundation.NSError)",
			"MultipeerConnectivity.MCNearbyServiceBrowserDelegateWrapper::FoundPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID,Foundation.NSDictionary)",
			"MultipeerConnectivity.MCNearbyServiceBrowserDelegateWrapper::LostPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID)",
			"MultipeerConnectivity.MCPeerID::.ctor(Foundation.NSCoder)",
			"MultipeerConnectivity.MCPeerID::Copy(Foundation.NSZone)",
			"MultipeerConnectivity.MCPeerID::EncodeTo(Foundation.NSCoder)",
			"MultipeerConnectivity.MCSession::.ctor(MultipeerConnectivity.MCPeerID)",
			"MultipeerConnectivity.MCSession::CancelConnectPeer(MultipeerConnectivity.MCPeerID)",
			"MultipeerConnectivity.MCSession::ConnectPeer(MultipeerConnectivity.MCPeerID,Foundation.NSData)",
			"MultipeerConnectivity.MCSession::Init(MultipeerConnectivity.MCPeerID,Foundation.NSArray,MultipeerConnectivity.MCEncryptionPreference)",
			"MultipeerConnectivity.MCSession::NearbyConnectionDataForPeer(MultipeerConnectivity.MCPeerID,MultipeerConnectivity.MCSessionNearbyConnectionDataForPeerCompletionHandler)",
			"MultipeerConnectivity.MCSession::SendData(Foundation.NSData,MultipeerConnectivity.MCPeerID[],MultipeerConnectivity.MCSessionSendDataMode,Foundation.NSError&)",
			"MultipeerConnectivity.MCSession::SendResource(Foundation.NSUrl,System.String,MultipeerConnectivity.MCPeerID,System.Action`1<Foundation.NSError>)",
			"MultipeerConnectivity.MCSession::StartStream(System.String,MultipeerConnectivity.MCPeerID,Foundation.NSError&)",
			"MultipeerConnectivity.MCSessionDelegate_Extensions::DidReceiveCertificate(MultipeerConnectivity.IMCSessionDelegate,MultipeerConnectivity.MCSession,Security.SecCertificate[],MultipeerConnectivity.MCPeerID,System.Action`1<System.Boolean>)",
			"MultipeerConnectivity.MCSessionDelegateWrapper::DidChangeState(MultipeerConnectivity.MCSession,MultipeerConnectivity.MCPeerID,MultipeerConnectivity.MCSessionState)",
			"MultipeerConnectivity.MCSessionDelegateWrapper::DidFinishReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSUrl,Foundation.NSError)",
			"MultipeerConnectivity.MCSessionDelegateWrapper::DidReceiveData(MultipeerConnectivity.MCSession,Foundation.NSData,MultipeerConnectivity.MCPeerID)",
			"MultipeerConnectivity.MCSessionDelegateWrapper::DidReceiveStream(MultipeerConnectivity.MCSession,Foundation.NSInputStream,System.String,MultipeerConnectivity.MCPeerID)",
			"MultipeerConnectivity.MCSessionDelegateWrapper::DidStartReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSProgress)",
			"NaturalLanguage.NLEmbedding::GetCurrentRevision(Foundation.NSString)",
			"NaturalLanguage.NLEmbedding::GetCurrentSentenceEmbeddingRevision(Foundation.NSString)",
			"NaturalLanguage.NLEmbedding::GetEmbedding(Foundation.NSUrl,Foundation.NSError&)",
			"NaturalLanguage.NLEmbedding::GetSentenceEmbedding(Foundation.NSString)",
			"NaturalLanguage.NLEmbedding::GetSentenceEmbedding(Foundation.NSString,System.UIntPtr)",
			"NaturalLanguage.NLEmbedding::GetSupportedRevisions(Foundation.NSString)",
			"NaturalLanguage.NLEmbedding::GetSupportedSentenceEmbeddingRevisions(Foundation.NSString)",
			"NaturalLanguage.NLEmbedding::GetWordEmbedding(Foundation.NSString)",
			"NaturalLanguage.NLEmbedding::GetWordEmbedding(Foundation.NSString,System.UIntPtr)",
			"NaturalLanguage.NLEmbedding::Write(Foundation.NSDictionary,Foundation.NSString,System.UIntPtr,Foundation.NSUrl,Foundation.NSError&)",
			"NaturalLanguage.NLGazetteer::.ctor(Foundation.NSData,Foundation.NSError&)",
			"NaturalLanguage.NLGazetteer::.ctor(Foundation.NSDictionary,Foundation.NSString,Foundation.NSError&)",
			"NaturalLanguage.NLGazetteer::.ctor(Foundation.NSUrl,Foundation.NSError&)",
			"NaturalLanguage.NLGazetteer::Create(Foundation.NSUrl,Foundation.NSError&)",
			"NaturalLanguage.NLGazetteer::Write(Foundation.NSDictionary,Foundation.NSString,Foundation.NSUrl,Foundation.NSError&)",
			"NaturalLanguage.NLLanguageRecognizer::set_NativeLanguageHints(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSNumber>)",
			"NaturalLanguage.NLModel::Create(CoreML.MLModel,Foundation.NSError&)",
			"NaturalLanguage.NLModel::Create(Foundation.NSUrl,Foundation.NSError&)",
			"NaturalLanguage.NLModelConfiguration::.ctor(Foundation.NSCoder)",
			"NaturalLanguage.NLModelConfiguration::Copy(Foundation.NSZone)",
			"NaturalLanguage.NLModelConfiguration::EncodeTo(Foundation.NSCoder)",
			"NaturalLanguage.NLStrongDictionary::get_Item(Foundation.NSString)",
			"NaturalLanguage.NLTagger::EnumerateTags(Foundation.NSRange,NaturalLanguage.NLTokenUnit,Foundation.NSString,NaturalLanguage.NLTaggerOptions,NaturalLanguage.NLTaggerEnumerateTagsContinuationHandler)",
			"NaturalLanguage.NLTagger::GetAvailableTagSchemes(NaturalLanguage.NLTokenUnit,Foundation.NSString)",
			"NaturalLanguage.NLTagger::GetGazetteers(Foundation.NSString)",
			"NaturalLanguage.NLTagger::GetModels(Foundation.NSString)",
			"NaturalLanguage.NLTagger::GetNativeTagHypotheses(System.UIntPtr,NaturalLanguage.NLTokenUnit,Foundation.NSString,System.UIntPtr,Foundation.NSRange&)",
			"NaturalLanguage.NLTagger::GetTag(System.UIntPtr,NaturalLanguage.NLTokenUnit,Foundation.NSString,Foundation.NSRange&)",
			"NaturalLanguage.NLTagger::GetTagHypotheses(System.UIntPtr,NaturalLanguage.NLTokenUnit,Foundation.NSString,System.UIntPtr,System.IntPtr)",
			"NaturalLanguage.NLTagger::GetTags(Foundation.NSRange,NaturalLanguage.NLTokenUnit,Foundation.NSString,NaturalLanguage.NLTaggerOptions,Foundation.NSValue[]&)",
			"NaturalLanguage.NLTagger::GetTokenRange(System.UIntPtr,Foundation.NSString)",
			"NaturalLanguage.NLTagger::RequestAssets(Foundation.NSString,Foundation.NSString,System.Action`2<NaturalLanguage.NLTaggerAssetsResult,Foundation.NSError>)",
			"NaturalLanguage.NLTagger::SetGazetteers(NaturalLanguage.NLGazetteer[],Foundation.NSString)",
			"NaturalLanguage.NLTagger::SetLanguage(Foundation.NSString,Foundation.NSRange)",
			"NaturalLanguage.NLTagger::SetModels(NaturalLanguage.NLModel[],Foundation.NSString)",
			"NaturalLanguage.NLTagger::SetOrthography(Foundation.NSOrthography,Foundation.NSRange)",
			"NaturalLanguage.NLTokenizer::_SetLanguage(Foundation.NSString)",
			"NaturalLanguage.NLVectorDictionary::get_Item(Foundation.NSString)",
			"NearbyInteraction.NIConfiguration::.ctor(Foundation.NSCoder)",
			"NearbyInteraction.NIConfiguration::Copy(Foundation.NSZone)",
			"NearbyInteraction.NIConfiguration::EncodeTo(Foundation.NSCoder)",
			"NearbyInteraction.NIDiscoveryToken::.ctor(Foundation.NSCoder)",
			"NearbyInteraction.NIDiscoveryToken::Copy(Foundation.NSZone)",
			"NearbyInteraction.NIDiscoveryToken::EncodeTo(Foundation.NSCoder)",
			"NearbyInteraction.NINearbyAccessoryConfiguration::.ctor(Foundation.NSCoder)",
			"NearbyInteraction.NINearbyAccessoryConfiguration::.ctor(Foundation.NSData,Foundation.NSError&)",
			"NearbyInteraction.NINearbyObject::.ctor(Foundation.NSCoder)",
			"NearbyInteraction.NINearbyObject::Copy(Foundation.NSZone)",
			"NearbyInteraction.NINearbyObject::EncodeTo(Foundation.NSCoder)",
			"NearbyInteraction.NINearbyPeerConfiguration::.ctor(Foundation.NSCoder)",
			"NearbyInteraction.NINearbyPeerConfiguration::.ctor(NearbyInteraction.NIDiscoveryToken)",
			"NearbyInteraction.NISession::Run(NearbyInteraction.NIConfiguration)",
			"NearbyInteraction.NISession::set_DelegateQueue(CoreFoundation.DispatchQueue)",
			"NearbyInteraction.NISessionDelegate_Extensions::DidGenerateShareableConfigurationData(NearbyInteraction.INISessionDelegate,NearbyInteraction.NISession,Foundation.NSData,NearbyInteraction.NINearbyObject)",
			"NearbyInteraction.NISessionDelegate_Extensions::DidSessionInvalidate(NearbyInteraction.INISessionDelegate,NearbyInteraction.NISession,Foundation.NSError)",
			"NearbyInteraction.NISessionDelegate_Extensions::DidSessionRemoveNearbyObjects(NearbyInteraction.INISessionDelegate,NearbyInteraction.NISession,NearbyInteraction.NINearbyObject[],NearbyInteraction.NINearbyObjectRemovalReason)",
			"NearbyInteraction.NISessionDelegate_Extensions::DidSessionUpdateNearbyObjects(NearbyInteraction.INISessionDelegate,NearbyInteraction.NISession,NearbyInteraction.NINearbyObject[])",
			"NearbyInteraction.NISessionDelegate_Extensions::SessionSuspensionEnded(NearbyInteraction.INISessionDelegate,NearbyInteraction.NISession)",
			"NearbyInteraction.NISessionDelegate_Extensions::SessionWasSuspended(NearbyInteraction.INISessionDelegate,NearbyInteraction.NISession)",
			"Network.NWAdvertiseDescriptor::set_TxtRecord(Network.NWTxtRecord)",
			"Network.NWBrowser::.ctor(Network.NWBrowserDescriptor,Network.NWParameters)",
			"Network.NWBrowser::SetDispatchQueue(CoreFoundation.DispatchQueue)",
			"Network.NWBrowseResult::GetChanges(Network.NWBrowseResult,Network.NWBrowseResult)",
			"Network.NWConnection::.ctor(Network.NWEndpoint,Network.NWParameters)",
			"Network.NWConnection::GetEstablishmentReport(CoreFoundation.DispatchQueue,System.Action`1<Network.NWEstablishmentReport>)",
			"Network.NWConnection::GetProtocolMetadata(Network.NWProtocolDefinition)",
			"Network.NWConnection::LowLevelSend(System.IntPtr,CoreFoundation.DispatchData,System.IntPtr,System.Boolean,System.Void*)",
			"Network.NWConnection::Send(CoreFoundation.DispatchData,Network.NWContentContext,System.Boolean,System.Action`1<Network.NWError>)",
			"Network.NWConnection::SendIdempotent(CoreFoundation.DispatchData,Network.NWContentContext,System.Boolean)",
			"Network.NWConnection::SetQueue(CoreFoundation.DispatchQueue)",
			"Network.NWConnectionGroup::GetProtocolMetadata(Network.NWContentContext)",
			"Network.NWConnectionGroup::GetProtocolMetadata(Network.NWContentContext,Network.NWProtocolDefinition)",
			"Network.NWConnectionGroup::Reply(Network.NWContentContext,Network.NWContentContext,CoreFoundation.DispatchData)",
			"Network.NWConnectionGroup::Send(CoreFoundation.DispatchData,Network.NWEndpoint,Network.NWContentContext,System.Action`1<Network.NWError>)",
			"Network.NWConnectionGroup::TryReinsertExtractedConnection(Network.NWConnection)",
			"Network.NWContentContext::GetProtocolMetadata(Network.NWProtocolDefinition)",
			"Network.NWContentContext::set_Antecedent(Network.NWContentContext)",
			"Network.NWContentContext::SetMetadata(Network.NWProtocolMetadata)",
			"Network.NWDataTransferReport::.ctor(Network.NWConnection)",
			"Network.NWDataTransferReport::Collect(CoreFoundation.DispatchQueue,System.Action`1<Network.NWDataTransferReport>)",
			"Network.NWEthernetChannel::.ctor(System.UInt16,Network.NWInterface)",
			"Network.NWEthernetChannel::SetQueue(CoreFoundation.DispatchQueue)",
			"Network.NWFramer::CreateOptions(Network.NWProtocolDefinition)",
			"Network.NWFramer::DeliverInput(System.ReadOnlySpan`1<System.Byte>,Network.NWFramerMessage,System.Boolean)",
			"Network.NWFramer::DeliverInputNoCopy(System.UIntPtr,Network.NWFramerMessage,System.Boolean)",
			"Network.NWFramer::PrependApplicationProtocol(Network.NWProtocolOptions)",
			"Network.NWFramer::WriteOutput(CoreFoundation.DispatchData)",
			"Network.NWFramerMessage::Create(Network.NWProtocolDefinition)",
			"Network.NWFramerMessage::SetObject(System.String,Foundation.NSObject)",
			"Network.NWListener::Create(Network.NWConnection,Network.NWParameters)",
			"Network.NWListener::Create(Network.NWParameters)",
			"Network.NWListener::Create(System.String,Network.NWParameters)",
			"Network.NWListener::SetAdvertiseDescriptor(Network.NWAdvertiseDescriptor)",
			"Network.NWListener::SetQueue(CoreFoundation.DispatchQueue)",
			"Network.NWParameters::ProhibitInterface(Network.NWInterface)",
			"Network.NWParameters::set_LocalEndpoint(Network.NWEndpoint)",
			"Network.NWParameters::set_RequiredInterface(Network.NWInterface)",
			"Network.NWParameters::SetPrivacyContext(Network.NWPrivacyContext)",
			"Network.NWPath::EqualsTo(Network.NWPath)",
			"Network.NWPathMonitor::SetQueue(CoreFoundation.DispatchQueue)",
			"Network.NWPrivacyContext::RequireEncryptedNameResolution(System.Boolean,Network.NWResolverConfig)",
			"Network.NWProtocolDefinition::Equals(System.Object)",
			"Network.NWProtocolStack::PrependApplicationProtocol(Network.NWProtocolOptions)",
			"Network.NWProtocolStack::set_TransportProtocol(Network.NWProtocolOptions)",
			"Network.NWResolverConfig::.ctor(Network.NWEndpoint,Network.NWResolverConfigEndpointType)",
			"Network.NWResolverConfig::AddServerAddress(Network.NWEndpoint)",
			"Network.NWWebSocketMetadata::SetPongHandler(CoreFoundation.DispatchQueue,System.Action`1<Network.NWError>)",
			"Network.NWWebSocketOptions::SetClientRequestHandler(CoreFoundation.DispatchQueue,System.Action`1<Network.NWWebSocketRequest>)",
			"NetworkExtension.NEAppProxyFlow::CloseRead(Foundation.NSError)",
			"NetworkExtension.NEAppProxyFlow::CloseWrite(Foundation.NSError)",
			"NetworkExtension.NEAppProxyFlow::OpenWithLocalEndpoint(NetworkExtension.NWHostEndpoint,System.Action`1<Foundation.NSError>)",
			"NetworkExtension.NEAppProxyFlow::set_NetworkInterface(Network.NWInterface)",
			"NetworkExtension.NEAppProxyFlow::SetMetadata(Network.NWParameters)",
			"NetworkExtension.NEAppProxyProvider::CancelProxy(Foundation.NSError)",
			"NetworkExtension.NEAppProxyProvider::HandleNewFlow(NetworkExtension.NEAppProxyFlow)",
			"NetworkExtension.NEAppProxyProvider::HandleNewUdpFlow(NetworkExtension.NEAppProxyUdpFlow,NetworkExtension.NWEndpoint)",
			"NetworkExtension.NEAppProxyProvider::StartProxy(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.Action`1<Foundation.NSError>)",
			"NetworkExtension.NEAppProxyTcpFlow::WriteData(Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"NetworkExtension.NEAppPushDelegateWrapper::DidReceiveIncomingCall(NetworkExtension.NEAppPushManager,Foundation.NSDictionary)",
			"NetworkExtension.NEAppPushManager::set_ProviderConfiguration(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"NetworkExtension.NEAppPushProvider::ReportIncomingCall(Foundation.NSDictionary)",
			"NetworkExtension.NEAppRule::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEAppRule::Copy(Foundation.NSZone)",
			"NetworkExtension.NEAppRule::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEDnsOverHttpsSettings::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEDnsOverHttpsSettings::set_ServerUrl(Foundation.NSUrl)",
			"NetworkExtension.NEDnsOverTlsSettings::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEDnsProxyManager::set_ProviderProtocol(NetworkExtension.NEDnsProxyProviderProtocol)",
			"NetworkExtension.NEDnsProxyProvider::CancelProxy(Foundation.NSError)",
			"NetworkExtension.NEDnsProxyProvider::HandleNewFlow(NetworkExtension.NEAppProxyFlow)",
			"NetworkExtension.NEDnsProxyProvider::HandleNewUdpFlow(NetworkExtension.NEAppProxyUdpFlow,NetworkExtension.NWEndpoint)",
			"NetworkExtension.NEDnsProxyProvider::StartProxy(Foundation.NSDictionary,System.Action`1<Foundation.NSError>)",
			"NetworkExtension.NEDnsProxyProviderProtocol::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEDnsProxyProviderProtocol::set_ProviderConfiguration(Foundation.NSDictionary)",
			"NetworkExtension.NEDnsSettings::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEDnsSettings::Copy(Foundation.NSZone)",
			"NetworkExtension.NEDnsSettings::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEDnsSettingsManager::set_DnsSettings(NetworkExtension.NEDnsSettings)",
			"NetworkExtension.NEEvaluateConnectionRule::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEEvaluateConnectionRule::Copy(Foundation.NSZone)",
			"NetworkExtension.NEEvaluateConnectionRule::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEEvaluateConnectionRule::set_ProbeUrl(Foundation.NSUrl)",
			"NetworkExtension.NEFilterBrowserFlow::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFilterControlProvider::HandleNewFlow(NetworkExtension.NEFilterFlow,System.Action`1<NetworkExtension.NEFilterControlVerdict>)",
			"NetworkExtension.NEFilterControlProvider::HandleRemediationForFlow(NetworkExtension.NEFilterFlow,System.Action`1<NetworkExtension.NEFilterControlVerdict>)",
			"NetworkExtension.NEFilterControlProvider::HandleReport(NetworkExtension.NEFilterReport)",
			"NetworkExtension.NEFilterControlProvider::set_RemediationMap(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>>)",
			"NetworkExtension.NEFilterControlProvider::set_UrlAppendStringMap(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSString>)",
			"NetworkExtension.NEFilterControlVerdict::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFilterControlVerdict::Copy(Foundation.NSZone)",
			"NetworkExtension.NEFilterControlVerdict::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEFilterDataProvider::ApplySettings(NetworkExtension.NEFilterSettings,System.Action`1<Foundation.NSError>)",
			"NetworkExtension.NEFilterDataProvider::HandleInboundDataCompleteForFlow(NetworkExtension.NEFilterFlow)",
			"NetworkExtension.NEFilterDataProvider::HandleInboundDataFromFlow(NetworkExtension.NEFilterFlow,System.UIntPtr,Foundation.NSData)",
			"NetworkExtension.NEFilterDataProvider::HandleNewFlow(NetworkExtension.NEFilterFlow)",
			"NetworkExtension.NEFilterDataProvider::HandleOutboundDataCompleteForFlow(NetworkExtension.NEFilterFlow)",
			"NetworkExtension.NEFilterDataProvider::HandleOutboundDataFromFlow(NetworkExtension.NEFilterFlow,System.UIntPtr,Foundation.NSData)",
			"NetworkExtension.NEFilterDataProvider::HandleRemediationForFlow(NetworkExtension.NEFilterFlow)",
			"NetworkExtension.NEFilterDataProvider::ResumeFlow(NetworkExtension.NEFilterFlow,NetworkExtension.NEFilterVerdict)",
			"NetworkExtension.NEFilterDataProvider::UpdateFlow(NetworkExtension.NEFilterSocketFlow,NetworkExtension.NEFilterDataVerdict,NetworkExtension.NETrafficDirection)",
			"NetworkExtension.NEFilterDataVerdict::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFilterDataVerdict::Copy(Foundation.NSZone)",
			"NetworkExtension.NEFilterDataVerdict::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEFilterFlow::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFilterFlow::Copy(Foundation.NSZone)",
			"NetworkExtension.NEFilterFlow::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEFilterManager::set_ProviderConfiguration(NetworkExtension.NEFilterProviderConfiguration)",
			"NetworkExtension.NEFilterNewFlowVerdict::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFilterNewFlowVerdict::Copy(Foundation.NSZone)",
			"NetworkExtension.NEFilterNewFlowVerdict::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEFilterPacketProvider::AllowPacket(NetworkExtension.NEPacket)",
			"NetworkExtension.NEFilterPacketProvider::DelayCurrentPacket(NetworkExtension.NEFilterPacketContext)",
			"NetworkExtension.NEFilterProvider::HandleReport(NetworkExtension.NEFilterReport)",
			"NetworkExtension.NEFilterProviderConfiguration::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFilterProviderConfiguration::Copy(Foundation.NSZone)",
			"NetworkExtension.NEFilterProviderConfiguration::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEFilterProviderConfiguration::set_IdentityReference(Foundation.NSData)",
			"NetworkExtension.NEFilterProviderConfiguration::set_PasswordReference(Foundation.NSData)",
			"NetworkExtension.NEFilterProviderConfiguration::set_VendorConfiguration(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"NetworkExtension.NEFilterRemediationVerdict::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFilterRemediationVerdict::Copy(Foundation.NSZone)",
			"NetworkExtension.NEFilterRemediationVerdict::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEFilterReport::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFilterReport::Copy(Foundation.NSZone)",
			"NetworkExtension.NEFilterReport::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEFilterRule::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFilterRule::.ctor(NetworkExtension.NENetworkRule,NetworkExtension.NEFilterAction)",
			"NetworkExtension.NEFilterRule::Copy(Foundation.NSZone)",
			"NetworkExtension.NEFilterRule::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEFilterSettings::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFilterSettings::Copy(Foundation.NSZone)",
			"NetworkExtension.NEFilterSettings::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEFilterSocketFlow::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFilterVerdict::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFilterVerdict::Copy(Foundation.NSZone)",
			"NetworkExtension.NEFilterVerdict::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEFlowMetaData::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEFlowMetaData::Copy(Foundation.NSZone)",
			"NetworkExtension.NEFlowMetaData::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEHotspotConfiguration::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEHotspotConfiguration::.ctor(NetworkExtension.NEHotspotHS20Settings,NetworkExtension.NEHotspotEapSettings)",
			"NetworkExtension.NEHotspotConfiguration::.ctor(System.String,NetworkExtension.NEHotspotEapSettings)",
			"NetworkExtension.NEHotspotConfiguration::Copy(Foundation.NSZone)",
			"NetworkExtension.NEHotspotConfiguration::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEHotspotConfiguration::set_LifeTimeInDays(Foundation.NSNumber)",
			"NetworkExtension.NEHotspotConfigurationManager::ApplyConfiguration(NetworkExtension.NEHotspotConfiguration,System.Action`1<Foundation.NSError>)",
			"NetworkExtension.NEHotspotEapSettings::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEHotspotEapSettings::Copy(Foundation.NSZone)",
			"NetworkExtension.NEHotspotEapSettings::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEHotspotEapSettings::set_SupportedEapTypes(NetworkExtension.NEHotspotConfigurationEapType[])",
			"NetworkExtension.NEHotspotEapSettings::SetIdentity(Security.SecIdentity)",
			"NetworkExtension.NEHotspotHelper::Logoff(NetworkExtension.NEHotspotNetwork)",
			"NetworkExtension.NEHotspotHelper::Register(Foundation.NSDictionary,CoreFoundation.DispatchQueue,NetworkExtension.NEHotspotHelperHandler)",
			"NetworkExtension.NEHotspotHelperCommand::CreateTcpConnection(NetworkExtension.NWEndpoint)",
			"NetworkExtension.NEHotspotHelperCommand::CreateUdpSession(NetworkExtension.NWEndpoint)",
			"NetworkExtension.NEHotspotHelperResponse::SetNetwork(NetworkExtension.NEHotspotNetwork)",
			"NetworkExtension.NEHotspotHS20Settings::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEHotspotHS20Settings::Copy(Foundation.NSZone)",
			"NetworkExtension.NEHotspotHS20Settings::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEIPv4Route::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEIPv4Route::Copy(Foundation.NSZone)",
			"NetworkExtension.NEIPv4Route::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEIPv4Settings::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEIPv4Settings::Copy(Foundation.NSZone)",
			"NetworkExtension.NEIPv4Settings::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEIPv6Route::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEIPv6Route::.ctor(System.String,Foundation.NSNumber)",
			"NetworkExtension.NEIPv6Route::Copy(Foundation.NSZone)",
			"NetworkExtension.NEIPv6Route::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEIPv6Settings::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEIPv6Settings::Copy(Foundation.NSZone)",
			"NetworkExtension.NEIPv6Settings::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NENetworkRule::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NENetworkRule::.ctor(NetworkExtension.NWHostEndpoint,NetworkExtension.NENetworkRuleProtocol)",
			"NetworkExtension.NENetworkRule::.ctor(NetworkExtension.NWHostEndpoint,System.UIntPtr,NetworkExtension.NENetworkRuleProtocol)",
			"NetworkExtension.NENetworkRule::.ctor(NetworkExtension.NWHostEndpoint,System.UIntPtr,NetworkExtension.NWHostEndpoint,System.UIntPtr,NetworkExtension.NENetworkRuleProtocol,NetworkExtension.NETrafficDirection)",
			"NetworkExtension.NENetworkRule::Copy(Foundation.NSZone)",
			"NetworkExtension.NENetworkRule::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEOnDemandRule::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEOnDemandRule::Copy(Foundation.NSZone)",
			"NetworkExtension.NEOnDemandRule::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEOnDemandRule::set_ProbeUrl(Foundation.NSUrl)",
			"NetworkExtension.NEOnDemandRuleConnect::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEOnDemandRuleDisconnect::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEOnDemandRuleEvaluateConnection::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEOnDemandRuleIgnore::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEPacket::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEPacket::.ctor(Foundation.NSData,System.Byte)",
			"NetworkExtension.NEPacket::Copy(Foundation.NSZone)",
			"NetworkExtension.NEPacket::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEPacketTunnelNetworkSettings::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEPacketTunnelNetworkSettings::set_IPv4Settings(NetworkExtension.NEIPv4Settings)",
			"NetworkExtension.NEPacketTunnelNetworkSettings::set_IPv6Settings(NetworkExtension.NEIPv6Settings)",
			"NetworkExtension.NEPacketTunnelNetworkSettings::set_Mtu(Foundation.NSNumber)",
			"NetworkExtension.NEPacketTunnelNetworkSettings::set_TunnelOverheadBytes(Foundation.NSNumber)",
			"NetworkExtension.NEPacketTunnelProvider::CancelTunnel(Foundation.NSError)",
			"NetworkExtension.NEPacketTunnelProvider::CreateTcpConnection(NetworkExtension.NWEndpoint,System.Boolean,NetworkExtension.NWTlsParameters,NetworkExtension.INWTcpConnectionAuthenticationDelegate)",
			"NetworkExtension.NEPacketTunnelProvider::CreateUdpSession(NetworkExtension.NWEndpoint,NetworkExtension.NWHostEndpoint)",
			"NetworkExtension.NEPacketTunnelProvider::StartTunnel(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.Action`1<Foundation.NSError>)",
			"NetworkExtension.NEPrivateLteNetwork::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEPrivateLteNetwork::Copy(Foundation.NSZone)",
			"NetworkExtension.NEPrivateLteNetwork::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEProvider::CreateTcpConnectionToEndpoint(NetworkExtension.NWEndpoint,System.Boolean,NetworkExtension.NWTlsParameters,Foundation.NSObject)",
			"NetworkExtension.NEProvider::CreateUdpSessionToEndpoint(NetworkExtension.NWEndpoint,NetworkExtension.NWHostEndpoint)",
			"NetworkExtension.NEProxyServer::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEProxyServer::Copy(Foundation.NSZone)",
			"NetworkExtension.NEProxyServer::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEProxySettings::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEProxySettings::Copy(Foundation.NSZone)",
			"NetworkExtension.NEProxySettings::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEProxySettings::set_HttpServer(NetworkExtension.NEProxyServer)",
			"NetworkExtension.NEProxySettings::set_HttpsServer(NetworkExtension.NEProxyServer)",
			"NetworkExtension.NEProxySettings::set_ProxyAutoConfigurationUrl(Foundation.NSUrl)",
			"NetworkExtension.NETransparentProxyNetworkSettings::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NETunnelNetworkSettings::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NETunnelNetworkSettings::Copy(Foundation.NSZone)",
			"NetworkExtension.NETunnelNetworkSettings::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NETunnelNetworkSettings::set_DnsSettings(NetworkExtension.NEDnsSettings)",
			"NetworkExtension.NETunnelNetworkSettings::set_ProxySettings(NetworkExtension.NEProxySettings)",
			"NetworkExtension.NETunnelProvider::HandleAppMessage(Foundation.NSData,System.Action`1<Foundation.NSData>)",
			"NetworkExtension.NETunnelProvider::SetTunnelNetworkSettings(NetworkExtension.NETunnelNetworkSettings,System.Action`1<Foundation.NSError>)",
			"NetworkExtension.NETunnelProviderProtocol::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NETunnelProviderProtocol::set_ProviderConfiguration(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"NetworkExtension.NETunnelProviderSession::SendProviderMessage(Foundation.NSData,Foundation.NSError&,System.Action`1<Foundation.NSData>)",
			"NetworkExtension.NETunnelProviderSession::StartTunnel(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&)",
			"NetworkExtension.NEVpnConnection::StartVpnTunnel(Foundation.NSDictionary,Foundation.NSError&)",
			"NetworkExtension.NEVpnIke2SecurityAssociationParameters::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEVpnIke2SecurityAssociationParameters::Copy(Foundation.NSZone)",
			"NetworkExtension.NEVpnIke2SecurityAssociationParameters::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEVpnManager::set_Protocol(NetworkExtension.NEVpnProtocol)",
			"NetworkExtension.NEVpnManager::set_ProtocolConfiguration(NetworkExtension.NEVpnProtocol)",
			"NetworkExtension.NEVpnManager::SetAuthorization(Security.Authorization)",
			"NetworkExtension.NEVpnProtocol::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEVpnProtocol::Copy(Foundation.NSZone)",
			"NetworkExtension.NEVpnProtocol::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NEVpnProtocol::set_IdentityData(Foundation.NSData)",
			"NetworkExtension.NEVpnProtocol::set_IdentityReference(Foundation.NSData)",
			"NetworkExtension.NEVpnProtocol::set_PasswordReference(Foundation.NSData)",
			"NetworkExtension.NEVpnProtocol::set_ProxySettings(NetworkExtension.NEProxySettings)",
			"NetworkExtension.NEVpnProtocolIke2::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEVpnProtocolIpSec::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NEVpnProtocolIpSec::set_SharedSecretReference(Foundation.NSData)",
			"NetworkExtension.NSMutableURLRequest_NEHotspotHelper::BindTo(Foundation.NSMutableUrlRequest,NetworkExtension.NEHotspotHelperCommand)",
			"NetworkExtension.NWBonjourServiceEndpoint::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NWEndpoint::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NWEndpoint::Copy(Foundation.NSZone)",
			"NetworkExtension.NWEndpoint::EncodeTo(Foundation.NSCoder)",
			"NetworkExtension.NWHostEndpoint::.ctor(Foundation.NSCoder)",
			"NetworkExtension.NWPath::IsEqualToPath(NetworkExtension.NWPath)",
			"NetworkExtension.NWTcpConnection::.ctor(NetworkExtension.NWTcpConnection)",
			"NetworkExtension.NWTcpConnection::Write(Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"NetworkExtension.NWTcpConnectionAuthenticationDelegate_Extensions::EvaluateTrust(NetworkExtension.INWTcpConnectionAuthenticationDelegate,NetworkExtension.NWTcpConnection,Foundation.NSArray,System.Action`1<Security.SecTrust>)",
			"NetworkExtension.NWTcpConnectionAuthenticationDelegate_Extensions::ProvideIdentity(NetworkExtension.INWTcpConnectionAuthenticationDelegate,NetworkExtension.NWTcpConnection,System.Action`2<Security.SecIdentity,Foundation.NSArray>)",
			"NetworkExtension.NWTcpConnectionAuthenticationDelegate_Extensions::ShouldEvaluateTrust(NetworkExtension.INWTcpConnectionAuthenticationDelegate,NetworkExtension.NWTcpConnection)",
			"NetworkExtension.NWTcpConnectionAuthenticationDelegate_Extensions::ShouldProvideIdentity(NetworkExtension.INWTcpConnectionAuthenticationDelegate,NetworkExtension.NWTcpConnection)",
			"NetworkExtension.NWTlsParameters::set_SslCipherSuites(Foundation.NSSet`1<Foundation.NSNumber>)",
			"NetworkExtension.NWTlsParameters::set_TlsSessionID(Foundation.NSData)",
			"NetworkExtension.NWUdpSession::.ctor(NetworkExtension.NWUdpSession)",
			"NetworkExtension.NWUdpSession::WriteDatagram(Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"NewsstandKit.NKAssetDownload::DownloadWithDelegate(Foundation.INSUrlConnectionDownloadDelegate)",
			"NewsstandKit.NKAssetDownload::set_UserInfo(Foundation.NSDictionary)",
			"NewsstandKit.NKIssue::AddAsset(Foundation.NSUrlRequest)",
			"NewsstandKit.NKLibrary::AddIssue(System.String,Foundation.NSDate)",
			"NewsstandKit.NKLibrary::RemoveIssue(NewsstandKit.NKIssue)",
			"NewsstandKit.NKLibrary::set_CurrentlyReadingIssue(NewsstandKit.NKIssue)",
			"NotificationCenter.NCWidgetListViewController::.ctor(Foundation.NSCoder)",
			"NotificationCenter.NCWidgetListViewController::.ctor(System.String,Foundation.NSBundle)",
			"NotificationCenter.NCWidgetListViewController::GetRow(AppKit.NSViewController)",
			"NotificationCenter.NCWidgetListViewDelegate_Extensions::DidRemoveRow(NotificationCenter.INCWidgetListViewDelegate,NotificationCenter.NCWidgetListViewController,System.UIntPtr)",
			"NotificationCenter.NCWidgetListViewDelegate_Extensions::DidReorderRow(NotificationCenter.INCWidgetListViewDelegate,NotificationCenter.NCWidgetListViewController,System.UIntPtr,System.UIntPtr)",
			"NotificationCenter.NCWidgetListViewDelegate_Extensions::PerformAddAction(NotificationCenter.INCWidgetListViewDelegate,NotificationCenter.NCWidgetListViewController)",
			"NotificationCenter.NCWidgetListViewDelegate_Extensions::ShouldRemoveRow(NotificationCenter.INCWidgetListViewDelegate,NotificationCenter.NCWidgetListViewController,System.UIntPtr)",
			"NotificationCenter.NCWidgetListViewDelegate_Extensions::ShouldReorderRow(NotificationCenter.INCWidgetListViewDelegate,NotificationCenter.NCWidgetListViewController,System.UIntPtr)",
			"NotificationCenter.NCWidgetListViewDelegateWrapper::GetViewControllerForRow(NotificationCenter.NCWidgetListViewController,System.UIntPtr)",
			"NotificationCenter.NCWidgetProviding_Extensions::GetWidgetAllowsEditing(NotificationCenter.INCWidgetProviding)",
			"NotificationCenter.NCWidgetProviding_Extensions::GetWidgetMarginInsets(NotificationCenter.INCWidgetProviding,AppKit.NSEdgeInsets)",
			"NotificationCenter.NCWidgetProviding_Extensions::GetWidgetMarginInsets(NotificationCenter.INCWidgetProviding,UIKit.UIEdgeInsets)",
			"NotificationCenter.NCWidgetProviding_Extensions::WidgetActiveDisplayModeDidChange(NotificationCenter.INCWidgetProviding,NotificationCenter.NCWidgetDisplayMode,CoreGraphics.CGSize)",
			"NotificationCenter.NCWidgetProviding_Extensions::WidgetDidBeginEditing(NotificationCenter.INCWidgetProviding)",
			"NotificationCenter.NCWidgetProviding_Extensions::WidgetDidEndEditing(NotificationCenter.INCWidgetProviding)",
			"NotificationCenter.NCWidgetProviding_Extensions::WidgetPerformUpdate(NotificationCenter.INCWidgetProviding,System.Action`1<NotificationCenter.NCUpdateResult>)",
			"NotificationCenter.NCWidgetSearchViewController::.ctor(Foundation.NSCoder)",
			"NotificationCenter.NCWidgetSearchViewController::.ctor(System.String,Foundation.NSBundle)",
			"NotificationCenter.NCWidgetSearchViewDelegateWrapper::ResultSelected(NotificationCenter.NCWidgetSearchViewController,Foundation.NSObject)",
			"NotificationCenter.NCWidgetSearchViewDelegateWrapper::SearchForTerm(NotificationCenter.NCWidgetSearchViewController,System.String,System.UIntPtr)",
			"NotificationCenter.NCWidgetSearchViewDelegateWrapper::TermCleared(NotificationCenter.NCWidgetSearchViewController)",
			"NotificationCenter.NSExtensionContext_NCWidgetAdditions::GetWidgetActiveDisplayMode(Foundation.NSExtensionContext)",
			"NotificationCenter.NSExtensionContext_NCWidgetAdditions::GetWidgetLargestAvailableDisplayMode(Foundation.NSExtensionContext)",
			"NotificationCenter.NSExtensionContext_NCWidgetAdditions::GetWidgetMaximumSize(Foundation.NSExtensionContext,NotificationCenter.NCWidgetDisplayMode)",
			"NotificationCenter.NSExtensionContext_NCWidgetAdditions::SetWidgetLargestAvailableDisplayMode(Foundation.NSExtensionContext,NotificationCenter.NCWidgetDisplayMode)",
			"ObjCRuntime.BackingField::Save(T&,T)",
			"ObjCRuntime.DisposableObject::op_Equality(ObjCRuntime.DisposableObject,ObjCRuntime.DisposableObject)",
			"ObjCRuntime.DisposableObject::op_Inequality(ObjCRuntime.DisposableObject,ObjCRuntime.DisposableObject)",
			"ObjCRuntime.Dlfcn::SetArray(System.IntPtr,System.String,Foundation.NSArray)",
			"ObjCRuntime.Dlfcn::SetString(System.IntPtr,System.String,Foundation.NSString)",
			"ObjCRuntime.NativeHandle::op_Equality(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.NativeHandle::op_Implicit(ObjCRuntime.NativeHandle)",
			"ObjCRuntime.NativeHandle::op_Inequality(ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.NativeHandle::op_Inequality(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.NativeObjectExtensions::GetHandle(ObjCRuntime.INativeObject)",
			"ObjCRuntime.NativeObjectExtensions::GetNonNullHandle(ObjCRuntime.INativeObject,System.String)",
			"ObjCRuntime.Runtime::ConvertSmartEnumToNSString(System.IntPtr)",
			"ObjCRuntime.Runtime::GetHandleForINativeObject(System.IntPtr)",
			"ObjCRuntime.Runtime::log_coreclr_render(System.String,System.Object[])",
			"ObjCRuntime.Runtime::UnwrapNSException(System.IntPtr)",
			"ObjCRuntime.Trampolines/NIDACAccountStoreRemoveCompletionHandler::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDACAccountStoreSaveCompletionHandler::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDACRequestCompletionHandler::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity1V0::Invoke(Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity1V0::Invoke(Foundation.NSInputStream)",
			"ObjCRuntime.Trampolines/NIDActionArity1V1::Invoke(Foundation.NSUrlRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity1V10::Invoke(Accessibility.AXBrailleMap)",
			"ObjCRuntime.Trampolines/NIDActionArity1V10::Invoke(AVFoundation.AVAsynchronousCIImageFilteringRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity1V10::Invoke(AVFoundation.AVAudioBuffer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V100::Invoke(Intents.INGetRideStatusIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V100::Invoke(Intents.INSetClimateSettingsInCarIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V101::Invoke(Foundation.NSSet`1<UserNotifications.UNNotificationCategory>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V101::Invoke(Intents.INGetUserCurrentRestaurantReservationBookingsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V101::Invoke(Intents.INSetDefrosterSettingsInCarIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V102::Invoke(Intents.INGetVisualCodeIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V102::Invoke(Intents.INSetProfileInCarIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V102::Invoke(UserNotifications.UNNotificationSettings)",
			"ObjCRuntime.Trampolines/NIDActionArity1V103::Invoke(Intents.INSetSeatSettingsInCarIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V103::Invoke(Intents.INVisualCodeTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V104::Invoke(Intents.INCreateNoteIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V104::Invoke(Intents.INListCarsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V105::Invoke(Intents.INCreateTaskListIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V105::Invoke(Intents.INListRideOptionsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V106::Invoke(Intents.INDeleteTasksIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V106::Invoke(Intents.INPlacemarkResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V107::Invoke(Intents.INDeleteTasksTaskListResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V107::Invoke(Intents.INSearchForMessagesIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V108::Invoke(Intents.INSendMessageIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V109::Invoke(Intents.INEndWorkoutIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V109::Invoke(Intents.INSetMessageAttributeIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V11::Invoke(AppKit.NSSliderAccessory)",
			"ObjCRuntime.Trampolines/NIDActionArity1V11::Invoke(AVFoundation.AVAudioBuffer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V11::Invoke(BackgroundTasks.BGTask)",
			"ObjCRuntime.Trampolines/NIDActionArity1V110::Invoke(Intents.INSearchForNotebookItemsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V111::Invoke(Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V111::Invoke(Intents.INSetTaskAttributeIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V111::Invoke(WebKit.WKFindResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V112::Invoke(Intents.INGetAvailableRestaurantReservationBookingsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V112::Invoke(Intents.INPauseWorkoutIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V113::Invoke(Intents.INGetRestaurantGuestIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V113::Invoke(Intents.INPayBillIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V113::Invoke(WebKit.WKDownload)",
			"ObjCRuntime.Trampolines/NIDActionArity1V114::Invoke(Foundation.NSArray)",
			"ObjCRuntime.Trampolines/NIDActionArity1V114::Invoke(Intents.INBillPayeeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V114::Invoke(Intents.INGetRideStatusIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V115::Invoke(Intents.INGetUserCurrentRestaurantReservationBookingsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V115::Invoke(Intents.INPaymentAccountResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V116::Invoke(Intents.INGetVisualCodeIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V116::Invoke(Intents.INPaymentAmountResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V117::Invoke(Intents.INDateComponentsRangeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V117::Invoke(Intents.INVisualCodeTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V118::Invoke(Intents.INBillTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V118::Invoke(UIKit.UIImage)",
			"ObjCRuntime.Trampolines/NIDActionArity1V119::Invoke(Intents.INListCarsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V119::Invoke(Intents.INRequestPaymentIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V12::Invoke(Accessibility.AXBrailleMap)",
			"ObjCRuntime.Trampolines/NIDActionArity1V12::Invoke(Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity1V120::Invoke(Intents.INListRideOptionsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V120::Invoke(Intents.INSearchForAccountsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V121::Invoke(Intents.INPlacemarkResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V121::Invoke(Intents.INSearchForBillsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V122::Invoke(Intents.INSearchForMessagesIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V122::Invoke(Intents.INSendPaymentIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V123::Invoke(Intents.INSendMessageIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V123::Invoke(Intents.INTransferMoneyIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V124::Invoke(Intents.INSearchForPhotosIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V124::Invoke(Intents.INSetMessageAttributeIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V125::Invoke(Intents.INSearchForNotebookItemsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V125::Invoke(Intents.INStartPhotoPlaybackIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V126::Invoke(Intents.INPlayMediaIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V126::Invoke(Intents.INSetTaskAttributeIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V127::Invoke(Foundation.NSArray`1<Intents.INPlayMediaMediaItemResolutionResult>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V127::Invoke(Intents.INPauseWorkoutIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V128::Invoke(Intents.INBooleanResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V128::Invoke(Intents.INPayBillIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V129::Invoke(Intents.INBillPayeeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V129::Invoke(Intents.INPlaybackRepeatModeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V13::Invoke(CloudKit.CKServerChangeToken)",
			"ObjCRuntime.Trampolines/NIDActionArity1V13::Invoke(UIKit.UIViewController)",
			"ObjCRuntime.Trampolines/NIDActionArity1V130::Invoke(Intents.INPaymentAccountResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V130::Invoke(Intents.INPlaybackQueueLocationResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V131::Invoke(Intents.INPaymentAmountResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V131::Invoke(Intents.INPlayMediaPlaybackSpeedResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V132::Invoke(Intents.INDateComponentsRangeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V133::Invoke(Intents.INBillTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V133::Invoke(Intents.INSetRadioStationIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V134::Invoke(Intents.INPersonResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V134::Invoke(Intents.INRequestPaymentIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V135::Invoke(Intents.INRequestPaymentPayerResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V135::Invoke(Intents.INSearchForAccountsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V136::Invoke(Intents.INCurrencyAmountResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V136::Invoke(Intents.INSearchForBillsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V137::Invoke(Intents.INRequestPaymentCurrencyAmountResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V137::Invoke(Intents.INSendPaymentIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V138::Invoke(Intents.INRequestRideIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V138::Invoke(Intents.INTransferMoneyIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V139::Invoke(Intents.INResumeWorkoutIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V139::Invoke(Intents.INSearchForPhotosIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V14::Invoke(AppKit.NSAnimationContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V14::Invoke(AssetsLibrary.ALAssetsGroup)",
			"ObjCRuntime.Trampolines/NIDActionArity1V14::Invoke(AuthenticationServices.ASCredentialIdentityStoreState)",
			"ObjCRuntime.Trampolines/NIDActionArity1V14::Invoke(CloudKit.CKRecordZoneID)",
			"ObjCRuntime.Trampolines/NIDActionArity1V140::Invoke(Intents.INSendRideFeedbackIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V140::Invoke(Intents.INStartPhotoPlaybackIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V141::Invoke(Intents.INCallRecordTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V141::Invoke(Intents.INPlayMediaIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V142::Invoke(Foundation.NSArray`1<Intents.INPlayMediaMediaItemResolutionResult>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V142::Invoke(Intents.INCallRecordTypeOptionsResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V143::Invoke(Intents.INAccountTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V143::Invoke(Intents.INBooleanResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V144::Invoke(Intents.INBalanceTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V144::Invoke(Intents.INPlaybackRepeatModeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V145::Invoke(Intents.INPaymentStatusResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V145::Invoke(Intents.INPlaybackQueueLocationResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V146::Invoke(Intents.INPlayMediaPlaybackSpeedResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V146::Invoke(Intents.INSearchForMediaIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V148::Invoke(Intents.INSetRadioStationIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V149::Invoke(Intents.INMessageAttributeOptionsResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V149::Invoke(Intents.INPersonResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V15::Invoke(AppKit.NSColor)",
			"ObjCRuntime.Trampolines/NIDActionArity1V15::Invoke(AssetsLibrary.ALAsset)",
			"ObjCRuntime.Trampolines/NIDActionArity1V15::Invoke(CloudKit.CKNotification)",
			"ObjCRuntime.Trampolines/NIDActionArity1V150::Invoke(Intents.INRequestPaymentPayerResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V151::Invoke(Intents.INCurrencyAmountResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V151::Invoke(Intents.INNotebookItemTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V152::Invoke(Intents.INRequestPaymentCurrencyAmountResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V152::Invoke(Intents.INTaskStatusResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V153::Invoke(Intents.INLocationSearchTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V153::Invoke(Intents.INRequestRideIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V154::Invoke(Intents.INDateSearchTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V154::Invoke(Intents.INResumeWorkoutIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V155::Invoke(Intents.INSendRideFeedbackIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V155::Invoke(Intents.INTemporalEventTriggerTypeOptionsResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V156::Invoke(Intents.INCallRecordTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V157::Invoke(Intents.INCallRecordTypeOptionsResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V157::Invoke(Intents.INOutgoingMessageTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V158::Invoke(Intents.INAccountTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V158::Invoke(Intents.INSendPaymentPayeeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V159::Invoke(Intents.INBalanceTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V159::Invoke(Intents.INSendPaymentCurrencyAmountResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V16::Invoke(BackgroundTasks.BGTask)",
			"ObjCRuntime.Trampolines/NIDActionArity1V16::Invoke(CloudKit.CKRecord)",
			"ObjCRuntime.Trampolines/NIDActionArity1V16::Invoke(Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity1V16::Invoke(UIKit.UIViewController)",
			"ObjCRuntime.Trampolines/NIDActionArity1V160::Invoke(Intents.INCarAudioSourceResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V160::Invoke(Intents.INPaymentStatusResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V161::Invoke(Intents.INRelativeReferenceResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V161::Invoke(Intents.INSearchForMediaIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V162::Invoke(Intents.INCarAirCirculationModeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V163::Invoke(Intents.INDoubleResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V164::Invoke(Intents.INMessageAttributeOptionsResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V164::Invoke(Intents.INRelativeSettingResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V165::Invoke(Intents.INTemperatureResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V166::Invoke(Intents.INCarSeatResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V166::Invoke(Intents.INNotebookItemTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V167::Invoke(Intents.INCarDefrosterResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V167::Invoke(Intents.INTaskStatusResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V168::Invoke(Intents.INLocationSearchTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V168::Invoke(Intents.INMessageAttributeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V169::Invoke(Intents.INDateSearchTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V169::Invoke(Intents.INRadioTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V17::Invoke(AppKit.NSSliderAccessory)",
			"ObjCRuntime.Trampolines/NIDActionArity1V17::Invoke(AuthenticationServices.ASCredentialIdentityStoreState)",
			"ObjCRuntime.Trampolines/NIDActionArity1V17::Invoke(CloudKit.CKRecordID)",
			"ObjCRuntime.Trampolines/NIDActionArity1V17::Invoke(Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity1V170::Invoke(Intents.INTaskResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V170::Invoke(Intents.INTemporalEventTriggerTypeOptionsResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V171::Invoke(Intents.INSetTaskAttributeTemporalEventTriggerResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V172::Invoke(Intents.INOutgoingMessageTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V172::Invoke(Intents.INShareFocusStatusIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V173::Invoke(Intents.INSendPaymentPayeeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V173::Invoke(Intents.INSnoozeTasksIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V174::Invoke(Intents.INSendPaymentCurrencyAmountResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V175::Invoke(Intents.INCallDestinationTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V175::Invoke(Intents.INCarAudioSourceResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V176::Invoke(Intents.INRelativeReferenceResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V176::Invoke(Intents.INStartCallIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V177::Invoke(Intents.INCallRecordResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V177::Invoke(Intents.INCarAirCirculationModeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V178::Invoke(Foundation.NSArray`1<Intents.INStartCallContactResolutionResult>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V178::Invoke(Intents.INDoubleResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V179::Invoke(Intents.INRelativeSettingResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V179::Invoke(Intents.INStartCallCallCapabilityResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V18::Invoke(CloudKit.CKShareParticipant)",
			"ObjCRuntime.Trampolines/NIDActionArity1V18::Invoke(CloudKit.CKUserIdentity)",
			"ObjCRuntime.Trampolines/NIDActionArity1V180::Invoke(Intents.INStartWorkoutIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V180::Invoke(Intents.INTemperatureResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V181::Invoke(Intents.INCarSeatResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V181::Invoke(Intents.INWorkoutGoalUnitTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V182::Invoke(Intents.INCarDefrosterResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V182::Invoke(Intents.INWorkoutLocationTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V183::Invoke(Intents.INMessageAttributeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V183::Invoke(Intents.INUpdateMediaAffinityIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V184::Invoke(Foundation.NSArray`1<Intents.INUpdateMediaAffinityMediaItemResolutionResult>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V184::Invoke(Intents.INRadioTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V185::Invoke(Intents.INMediaAffinityTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V185::Invoke(Intents.INTaskResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V186::Invoke(Intents.INSetTaskAttributeTemporalEventTriggerResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V187::Invoke(Intents.INShareFocusStatusIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V188::Invoke(Intents.INSnoozeTasksIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V188::Invoke(MediaPlayer.MPMusicPlayerControllerMutableQueue)",
			"ObjCRuntime.Trampolines/NIDActionArity1V189::Invoke(Metal.IMTLCommandBuffer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V19::Invoke(BackgroundTasks.BGTask)",
			"ObjCRuntime.Trampolines/NIDActionArity1V19::Invoke(CloudKit.CKServerChangeToken)",
			"ObjCRuntime.Trampolines/NIDActionArity1V19::Invoke(Metal.IMTLDrawable)",
			"ObjCRuntime.Trampolines/NIDActionArity1V190::Invoke(Intents.INCallDestinationTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V190::Invoke(ModelIO.MDLMaterialPropertyNode)",
			"ObjCRuntime.Trampolines/NIDActionArity1V191::Invoke(Intents.INStartCallIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V191::Invoke(NetworkExtension.NEFilterControlVerdict)",
			"ObjCRuntime.Trampolines/NIDActionArity1V192::Invoke(Intents.INCallRecordResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V192::Invoke(NetworkExtension.NEHotspotNetwork)",
			"ObjCRuntime.Trampolines/NIDActionArity1V193::Invoke(Foundation.NSArray`1<Intents.INStartCallContactResolutionResult>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V194::Invoke(Intents.INStartCallCallCapabilityResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V194::Invoke(Security.SecTrust)",
			"ObjCRuntime.Trampolines/NIDActionArity1V195::Invoke(Intents.INStartWorkoutIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V195::Invoke(PassKit.PKAddPaymentPassRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity1V196::Invoke(Intents.INWorkoutGoalUnitTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V197::Invoke(Intents.INWorkoutLocationTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V198::Invoke(Intents.INUpdateMediaAffinityIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V199::Invoke(Foundation.NSArray`1<Intents.INUpdateMediaAffinityMediaItemResolutionResult>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V2::Invoke(AudioToolbox.AudioBuffers)",
			"ObjCRuntime.Trampolines/NIDActionArity1V2::Invoke(Foundation.NSInputStream)",
			"ObjCRuntime.Trampolines/NIDActionArity1V20::Invoke(AppKit.NSViewController)",
			"ObjCRuntime.Trampolines/NIDActionArity1V20::Invoke(CarPlay.CPAlertAction)",
			"ObjCRuntime.Trampolines/NIDActionArity1V20::Invoke(CloudKit.CKRecordZoneID)",
			"ObjCRuntime.Trampolines/NIDActionArity1V20::Invoke(CoreData.NSAsynchronousFetchResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V200::Invoke(Intents.INMediaAffinityTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V200::Invoke(PassKit.PKPaymentAuthorizationResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V201::Invoke(PassKit.PKPaymentRequestPaymentMethodUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V202::Invoke(PassKit.PKPaymentRequestShippingContactUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V203::Invoke(MediaPlayer.MPMusicPlayerControllerMutableQueue)",
			"ObjCRuntime.Trampolines/NIDActionArity1V204::Invoke(Metal.IMTLCommandBuffer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V204::Invoke(PassKit.PKPaymentRequestMerchantSessionUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V205::Invoke(ModelIO.MDLMaterialPropertyNode)",
			"ObjCRuntime.Trampolines/NIDActionArity1V205::Invoke(PassKit.PKPaymentRequestCouponCodeUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V206::Invoke(NetworkExtension.NEFilterControlVerdict)",
			"ObjCRuntime.Trampolines/NIDActionArity1V206::Invoke(PassKit.PKPaymentRequestShippingMethodUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V207::Invoke(NetworkExtension.NEHotspotNetwork)",
			"ObjCRuntime.Trampolines/NIDActionArity1V209::Invoke(Security.SecTrust)",
			"ObjCRuntime.Trampolines/NIDActionArity1V21::Invoke(AuthenticationServices.ASCredentialIdentityStoreState)",
			"ObjCRuntime.Trampolines/NIDActionArity1V21::Invoke(CloudKit.CKNotification)",
			"ObjCRuntime.Trampolines/NIDActionArity1V21::Invoke(CoreData.NSManagedObjectContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V211::Invoke(PassKit.PKAddPaymentPassRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity1V213::Invoke(PassKit.PKIssuerProvisioningExtensionStatus)",
			"ObjCRuntime.Trampolines/NIDActionArity1V213::Invoke(Photos.PHContentEditingOutput)",
			"ObjCRuntime.Trampolines/NIDActionArity1V214::Invoke(SceneKit.SCNNode)",
			"ObjCRuntime.Trampolines/NIDActionArity1V218::Invoke(PassKit.PKPaymentAuthorizationResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V218::Invoke(UIKit.UIAlertAction)",
			"ObjCRuntime.Trampolines/NIDActionArity1V219::Invoke(PassKit.PKPaymentRequestPaymentMethodUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V219::Invoke(UIKit.UITextField)",
			"ObjCRuntime.Trampolines/NIDActionArity1V22::Invoke(CloudKit.CKRecord)",
			"ObjCRuntime.Trampolines/NIDActionArity1V22::Invoke(CloudKit.CKUserIdentity)",
			"ObjCRuntime.Trampolines/NIDActionArity1V22::Invoke(Intents.INIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V220::Invoke(PassKit.PKPaymentRequestShippingContactUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V221::Invoke(Intents.INIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V222::Invoke(PassKit.PKPaymentRequestMerchantSessionUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V222::Invoke(UIKit.UIBandSelectionInteraction)",
			"ObjCRuntime.Trampolines/NIDActionArity1V223::Invoke(Foundation.NSIndexPath)",
			"ObjCRuntime.Trampolines/NIDActionArity1V223::Invoke(PassKit.PKPaymentRequestCouponCodeUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V224::Invoke(PassKit.PKPaymentRequestShippingMethodUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V225::Invoke(UIKit.UICollectionViewCell)",
			"ObjCRuntime.Trampolines/NIDActionArity1V228::Invoke(UIKit.IUIFocusAnimationContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V229::Invoke(UIKit.UIGraphicsImageRendererContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V23::Invoke(CloudKit.CKRecordID)",
			"ObjCRuntime.Trampolines/NIDActionArity1V23::Invoke(CloudKit.CKServerChangeToken)",
			"ObjCRuntime.Trampolines/NIDActionArity1V23::Invoke(Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDActionArity1V230::Invoke(UIKit.UIGraphicsPdfRendererContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V231::Invoke(Photos.PHContentEditingOutput)",
			"ObjCRuntime.Trampolines/NIDActionArity1V231::Invoke(UIKit.UIGraphicsRendererContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V232::Invoke(SceneKit.SCNNode)",
			"ObjCRuntime.Trampolines/NIDActionArity1V232::Invoke(UIKit.UIImage)",
			"ObjCRuntime.Trampolines/NIDActionArity1V234::Invoke(UIKit.IUITextInput)",
			"ObjCRuntime.Trampolines/NIDActionArity1V235::Invoke(UIKit.UILexicon)",
			"ObjCRuntime.Trampolines/NIDActionArity1V236::Invoke(UIKit.UITableViewCell)",
			"ObjCRuntime.Trampolines/NIDActionArity1V237::Invoke(UIKit.IUIViewControllerTransitionCoordinatorContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V237::Invoke(UIKit.UIAlertAction)",
			"ObjCRuntime.Trampolines/NIDActionArity1V238::Invoke(UIKit.UITextField)",
			"ObjCRuntime.Trampolines/NIDActionArity1V238::Invoke(UserNotifications.UNNotificationContent)",
			"ObjCRuntime.Trampolines/NIDActionArity1V239::Invoke(UIKit.UIBandSelectionInteraction)",
			"ObjCRuntime.Trampolines/NIDActionArity1V24::Invoke(CarPlay.CPBarButton)",
			"ObjCRuntime.Trampolines/NIDActionArity1V24::Invoke(CloudKit.CKRecordZoneID)",
			"ObjCRuntime.Trampolines/NIDActionArity1V24::Invoke(CloudKit.CKShareParticipant)",
			"ObjCRuntime.Trampolines/NIDActionArity1V24::Invoke(CoreML.MLUpdateContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V240::Invoke(Foundation.NSIndexPath)",
			"ObjCRuntime.Trampolines/NIDActionArity1V240::Invoke(Foundation.NSSet`1<UserNotifications.UNNotificationCategory>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V241::Invoke(UserNotifications.UNNotificationSettings)",
			"ObjCRuntime.Trampolines/NIDActionArity1V242::Invoke(UIKit.UICollectionViewCell)",
			"ObjCRuntime.Trampolines/NIDActionArity1V245::Invoke(UIKit.IUIFocusAnimationContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V246::Invoke(UIKit.UIGraphicsImageRendererContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V247::Invoke(UIKit.UIGraphicsPdfRendererContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V248::Invoke(UIKit.UIContextMenuConfiguration)",
			"ObjCRuntime.Trampolines/NIDActionArity1V248::Invoke(UIKit.UIGraphicsRendererContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V25::Invoke(CarPlay.CPButton)",
			"ObjCRuntime.Trampolines/NIDActionArity1V25::Invoke(CloudKit.CKNotification)",
			"ObjCRuntime.Trampolines/NIDActionArity1V25::Invoke(Foundation.NSUrl)",
			"ObjCRuntime.Trampolines/NIDActionArity1V25::Invoke(Metal.IMTLDrawable)",
			"ObjCRuntime.Trampolines/NIDActionArity1V250::Invoke(UIKit.IUITextInput)",
			"ObjCRuntime.Trampolines/NIDActionArity1V250::Invoke(WebKit.WKFindResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V251::Invoke(UIKit.UILexicon)",
			"ObjCRuntime.Trampolines/NIDActionArity1V252::Invoke(UIKit.UITableViewCell)",
			"ObjCRuntime.Trampolines/NIDActionArity1V252::Invoke(WebKit.WKDownload)",
			"ObjCRuntime.Trampolines/NIDActionArity1V253::Invoke(Foundation.NSArray)",
			"ObjCRuntime.Trampolines/NIDActionArity1V253::Invoke(UIKit.IUIViewControllerTransitionCoordinatorContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V254::Invoke(UserNotifications.UNNotificationContent)",
			"ObjCRuntime.Trampolines/NIDActionArity1V256::Invoke(Foundation.NSSet`1<UserNotifications.UNNotificationCategory>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V257::Invoke(UserNotifications.UNNotificationSettings)",
			"ObjCRuntime.Trampolines/NIDActionArity1V26::Invoke(CarPlay.CPDashboardButton)",
			"ObjCRuntime.Trampolines/NIDActionArity1V26::Invoke(CloudKit.CKRecord)",
			"ObjCRuntime.Trampolines/NIDActionArity1V26::Invoke(CoreData.NSAsynchronousFetchResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V26::Invoke(Foundation.NSFileHandle)",
			"ObjCRuntime.Trampolines/NIDActionArity1V264::Invoke(UIKit.UIContextMenuConfiguration)",
			"ObjCRuntime.Trampolines/NIDActionArity1V266::Invoke(WebKit.WKFindResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V268::Invoke(WebKit.WKDownload)",
			"ObjCRuntime.Trampolines/NIDActionArity1V269::Invoke(Foundation.NSArray)",
			"ObjCRuntime.Trampolines/NIDActionArity1V27::Invoke(CarPlay.CPGridButton)",
			"ObjCRuntime.Trampolines/NIDActionArity1V27::Invoke(CloudKit.CKRecordID)",
			"ObjCRuntime.Trampolines/NIDActionArity1V27::Invoke(CoreData.NSManagedObjectContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V28::Invoke(CarPlay.CPMapButton)",
			"ObjCRuntime.Trampolines/NIDActionArity1V28::Invoke(CloudKit.CKShareParticipant)",
			"ObjCRuntime.Trampolines/NIDActionArity1V28::Invoke(Foundation.NSNotification)",
			"ObjCRuntime.Trampolines/NIDActionArity1V29::Invoke(CarPlay.CPNowPlayingButton)",
			"ObjCRuntime.Trampolines/NIDActionArity1V29::Invoke(Foundation.NSTimer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V29::Invoke(Metal.IMTLDrawable)",
			"ObjCRuntime.Trampolines/NIDActionArity1V3::Invoke(Foundation.NSUrlRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity1V30::Invoke(CarPlay.CPTextButton)",
			"ObjCRuntime.Trampolines/NIDActionArity1V30::Invoke(CoreData.NSAsynchronousFetchResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V30::Invoke(CoreML.MLUpdateContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V30::Invoke(Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDActionArity1V31::Invoke(CloudKit.CKUserIdentity)",
			"ObjCRuntime.Trampolines/NIDActionArity1V31::Invoke(CoreData.NSManagedObjectContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V31::Invoke(Foundation.NSCachedUrlResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V32::Invoke(CloudKit.CKServerChangeToken)",
			"ObjCRuntime.Trampolines/NIDActionArity1V32::Invoke(CoreML.MLUpdateContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V32::Invoke(CoreTelephony.CTCall)",
			"ObjCRuntime.Trampolines/NIDActionArity1V32::Invoke(Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDActionArity1V33::Invoke(CloudKit.CKRecordZoneID)",
			"ObjCRuntime.Trampolines/NIDActionArity1V33::Invoke(CoreTelephony.CTCarrier)",
			"ObjCRuntime.Trampolines/NIDActionArity1V33::Invoke(Foundation.NSUrlCredential)",
			"ObjCRuntime.Trampolines/NIDActionArity1V34::Invoke(CloudKit.CKNotification)",
			"ObjCRuntime.Trampolines/NIDActionArity1V34::Invoke(Foundation.NSString)",
			"ObjCRuntime.Trampolines/NIDActionArity1V35::Invoke(CloudKit.CKRecord)",
			"ObjCRuntime.Trampolines/NIDActionArity1V35::Invoke(Foundation.NSData)",
			"ObjCRuntime.Trampolines/NIDActionArity1V36::Invoke(CloudKit.CKRecordID)",
			"ObjCRuntime.Trampolines/NIDActionArity1V36::Invoke(Foundation.NSUrl)",
			"ObjCRuntime.Trampolines/NIDActionArity1V36::Invoke(Foundation.NSUrlRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity1V37::Invoke(CloudKit.CKShareParticipant)",
			"ObjCRuntime.Trampolines/NIDActionArity1V37::Invoke(Foundation.NSFileHandle)",
			"ObjCRuntime.Trampolines/NIDActionArity1V37::Invoke(Foundation.NSInputStream)",
			"ObjCRuntime.Trampolines/NIDActionArity1V38::Invoke(GameController.GCController)",
			"ObjCRuntime.Trampolines/NIDActionArity1V38::Invoke(Metal.IMTLDrawable)",
			"ObjCRuntime.Trampolines/NIDActionArity1V39::Invoke(CoreData.NSAsynchronousFetchResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V39::Invoke(Foundation.NSNotification)",
			"ObjCRuntime.Trampolines/NIDActionArity1V39::Invoke(GameController.GCMotion)",
			"ObjCRuntime.Trampolines/NIDActionArity1V4::Invoke(AudioToolbox.AudioBuffers)",
			"ObjCRuntime.Trampolines/NIDActionArity1V4::Invoke(AVFoundation.AVMetadataItemValueRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity1V40::Invoke(CoreData.NSManagedObjectContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V40::Invoke(Foundation.NSProgress)",
			"ObjCRuntime.Trampolines/NIDActionArity1V40::Invoke(Foundation.NSTimer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V40::Invoke(GameKit.GKPlayer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V41::Invoke(Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDActionArity1V41::Invoke(Foundation.NSTimer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V41::Invoke(GameplayKit.GKRuleSystem)",
			"ObjCRuntime.Trampolines/NIDActionArity1V42::Invoke(Foundation.NSCachedUrlResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V42::Invoke(Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDActionArity1V42::Invoke(Intents.INAddMediaIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V43::Invoke(CoreML.MLUpdateContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V43::Invoke(Foundation.NSCachedUrlResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V43::Invoke(Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDActionArity1V44::Invoke(Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDActionArity1V44::Invoke(Foundation.NSUrlCredential)",
			"ObjCRuntime.Trampolines/NIDActionArity1V44::Invoke(Intents.INAddMediaMediaDestinationResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V45::Invoke(CoreTelephony.CTCall)",
			"ObjCRuntime.Trampolines/NIDActionArity1V45::Invoke(Foundation.NSUrlCredential)",
			"ObjCRuntime.Trampolines/NIDActionArity1V45::Invoke(Intents.INPlayMediaIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V46::Invoke(Foundation.NSArray`1<Intents.INPlayMediaMediaItemResolutionResult>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V46::Invoke(Foundation.NSData)",
			"ObjCRuntime.Trampolines/NIDActionArity1V47::Invoke(GameController.GCController)",
			"ObjCRuntime.Trampolines/NIDActionArity1V47::Invoke(Intents.INBooleanResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V48::Invoke(CoreTelephony.CTCarrier)",
			"ObjCRuntime.Trampolines/NIDActionArity1V48::Invoke(GameController.GCMotion)",
			"ObjCRuntime.Trampolines/NIDActionArity1V48::Invoke(Intents.INPlaybackRepeatModeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V49::Invoke(Foundation.NSString)",
			"ObjCRuntime.Trampolines/NIDActionArity1V49::Invoke(Intents.INPlaybackQueueLocationResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V5::Invoke(AVFoundation.AVAsynchronousCIImageFilteringRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity1V50::Invoke(GameKit.GKPlayer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V50::Invoke(Intents.INPlayMediaPlaybackSpeedResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V51::Invoke(Foundation.NSData)",
			"ObjCRuntime.Trampolines/NIDActionArity1V51::Invoke(GameplayKit.GKRuleSystem)",
			"ObjCRuntime.Trampolines/NIDActionArity1V52::Invoke(Foundation.NSUrl)",
			"ObjCRuntime.Trampolines/NIDActionArity1V52::Invoke(IdentityLookup.ILMessageFilterQueryResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V52::Invoke(Intents.INSearchForMediaIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V53::Invoke(Foundation.NSFileHandle)",
			"ObjCRuntime.Trampolines/NIDActionArity1V53::Invoke(Intents.INActivateCarSignalIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V53::Invoke(Intents.INSendMessageIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V54::Invoke(Intents.INSpeakableStringResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V54::Invoke(Intents.INUpdateMediaAffinityIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V55::Invoke(Foundation.NSArray`1<Intents.INUpdateMediaAffinityMediaItemResolutionResult>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V55::Invoke(Foundation.NSNotification)",
			"ObjCRuntime.Trampolines/NIDActionArity1V55::Invoke(Intents.INCarSignalOptionsResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V56::Invoke(Foundation.NSTimer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V56::Invoke(Intents.INAddMediaIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V56::Invoke(Intents.INMediaAffinityTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V56::Invoke(Intents.INStringResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V57::Invoke(Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDActionArity1V57::Invoke(Intents.INOutgoingMessageTypeResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V57::Invoke(MediaPlayer.MPMusicPlayerControllerMutableQueue)",
			"ObjCRuntime.Trampolines/NIDActionArity1V58::Invoke(Foundation.NSCachedUrlResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V58::Invoke(Intents.INAddMediaMediaDestinationResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V58::Invoke(Intents.INShareFocusStatusIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V58::Invoke(Metal.IMTLCommandBuffer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V59::Invoke(Foundation.NSDictionary`2<MailKit.MEEmailAddress,MailKit.MEAddressAnnotation>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V59::Invoke(Foundation.NSUrlCredential)",
			"ObjCRuntime.Trampolines/NIDActionArity1V59::Invoke(Intents.INAddTasksIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V59::Invoke(ModelIO.MDLMaterialPropertyNode)",
			"ObjCRuntime.Trampolines/NIDActionArity1V6::Invoke(AudioToolbox.AudioBuffers)",
			"ObjCRuntime.Trampolines/NIDActionArity1V6::Invoke(AVFoundation.AVCaptionConversionWarning)",
			"ObjCRuntime.Trampolines/NIDActionArity1V60::Invoke(Intents.INTaskListResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V60::Invoke(MailKit.MEMessageActionDecision)",
			"ObjCRuntime.Trampolines/NIDActionArity1V61::Invoke(GameController.GCController)",
			"ObjCRuntime.Trampolines/NIDActionArity1V61::Invoke(Intents.INAddTasksTargetTaskListResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V61::Invoke(MailKit.MEOutgoingMessageEncodingStatus)",
			"ObjCRuntime.Trampolines/NIDActionArity1V62::Invoke(GameController.GCMotion)",
			"ObjCRuntime.Trampolines/NIDActionArity1V62::Invoke(MailKit.MEMessageEncodingResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V62::Invoke(SceneKit.SCNNode)",
			"ObjCRuntime.Trampolines/NIDActionArity1V63::Invoke(Intents.INSpatialEventTriggerResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V63::Invoke(MailKit.MEExtensionViewController)",
			"ObjCRuntime.Trampolines/NIDActionArity1V64::Invoke(GameKit.GKPlayer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V64::Invoke(Intents.INTemporalEventTriggerResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V64::Invoke(JavaScriptCore.JSContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V64::Invoke(Metal.IMTLCommandBuffer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V65::Invoke(GameplayKit.GKRuleSystem)",
			"ObjCRuntime.Trampolines/NIDActionArity1V65::Invoke(Intents.INAddTasksTemporalEventTriggerResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V65::Invoke(ModelIO.MDLMaterialPropertyNode)",
			"ObjCRuntime.Trampolines/NIDActionArity1V65::Invoke(TVServices.ITVTopShelfContent)",
			"ObjCRuntime.Trampolines/NIDActionArity1V66::Invoke(Foundation.NSDictionary`2<Foundation.NSString,TVServices.TVAppProfileDescriptor>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V66::Invoke(IdentityLookup.ILMessageFilterQueryResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V66::Invoke(Intents.INTaskPriorityResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V67::Invoke(Foundation.NSString)",
			"ObjCRuntime.Trampolines/NIDActionArity1V67::Invoke(Intents.INActivateCarSignalIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V67::Invoke(Intents.INAppendToNoteIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V67::Invoke(Security.SecTrust)",
			"ObjCRuntime.Trampolines/NIDActionArity1V68::Invoke(Intents.INNoteResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V68::Invoke(Intents.INSpeakableStringResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V68::Invoke(UIKit.UIAlertAction)",
			"ObjCRuntime.Trampolines/NIDActionArity1V69::Invoke(Intents.INCarSignalOptionsResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V69::Invoke(Intents.INNoteContentResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V69::Invoke(UIKit.UITextField)",
			"ObjCRuntime.Trampolines/NIDActionArity1V7::Invoke(AVFoundation.AVAudioBuffer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V7::Invoke(AVFoundation.AVMetadataItemValueRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity1V70::Invoke(Intents.INAddMediaIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V70::Invoke(Intents.INBookRestaurantReservationIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V71::Invoke(Intents.INRestaurantResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V71::Invoke(PassKit.PKPaymentAuthorizationResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V71::Invoke(UIKit.IUIFocusAnimationContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V72::Invoke(Intents.INAddMediaMediaDestinationResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V72::Invoke(Intents.INDateComponentsResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V72::Invoke(PassKit.PKPaymentRequestPaymentMethodUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V72::Invoke(UIKit.UIGraphicsImageRendererContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V73::Invoke(Intents.INAddTasksIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V73::Invoke(Intents.INIntegerResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V73::Invoke(PassKit.PKPaymentRequestShippingContactUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V73::Invoke(UIKit.UIGraphicsPdfRendererContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V74::Invoke(Intents.INRestaurantGuestResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V74::Invoke(Intents.INTaskListResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V74::Invoke(PassKit.PKPaymentRequestMerchantSessionUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V74::Invoke(UIKit.UIGraphicsRendererContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V75::Invoke(Intents.INAddTasksTargetTaskListResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V75::Invoke(Intents.INStringResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V75::Invoke(PassKit.PKPaymentRequestCouponCodeUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V75::Invoke(UIKit.UIImage)",
			"ObjCRuntime.Trampolines/NIDActionArity1V76::Invoke(Intents.INSearchCallHistoryIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V76::Invoke(PassKit.PKPaymentRequestShippingMethodUpdate)",
			"ObjCRuntime.Trampolines/NIDActionArity1V76::Invoke(UIKit.IUIViewControllerTransitionCoordinatorContext)",
			"ObjCRuntime.Trampolines/NIDActionArity1V77::Invoke(Intents.INSpatialEventTriggerResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V77::Invoke(Intents.INStartAudioCallIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V78::Invoke(Intents.INStartVideoCallIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V78::Invoke(Intents.INTemporalEventTriggerResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V78::Invoke(UserNotifications.UNNotificationSettings)",
			"ObjCRuntime.Trampolines/NIDActionArity1V79::Invoke(Intents.INAddTasksTemporalEventTriggerResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V79::Invoke(Intents.INCancelRideIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V8::Invoke(Accessibility.AXBrailleMap)",
			"ObjCRuntime.Trampolines/NIDActionArity1V8::Invoke(AVFoundation.AVAsynchronousCIImageFilteringRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity1V80::Invoke(Intents.INCancelWorkoutIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V80::Invoke(Intents.INTaskPriorityResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V81::Invoke(Intents.INAppendToNoteIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V81::Invoke(Intents.INGetCarLockStatusIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V82::Invoke(Intents.INGetCarPowerLevelStatusIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V82::Invoke(Intents.INNoteResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V83::Invoke(Intents.INNoteContentResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V83::Invoke(Intents.INSetCarLockStatusIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V83::Invoke(Photos.PHContentEditingOutput)",
			"ObjCRuntime.Trampolines/NIDActionArity1V84::Invoke(Intents.INBookRestaurantReservationIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V84::Invoke(Intents.INSaveProfileInCarIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V84::Invoke(PhotosUI.PHProjectInfo)",
			"ObjCRuntime.Trampolines/NIDActionArity1V85::Invoke(Intents.INRestaurantResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V85::Invoke(Intents.INSetAudioSourceInCarIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V85::Invoke(SafariServices.SFSafariWindow)",
			"ObjCRuntime.Trampolines/NIDActionArity1V86::Invoke(Intents.INDateComponentsResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V86::Invoke(Intents.INSetClimateSettingsInCarIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V87::Invoke(AppKit.NSRunningApplication)",
			"ObjCRuntime.Trampolines/NIDActionArity1V87::Invoke(Intents.INIntegerResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V87::Invoke(Intents.INSetDefrosterSettingsInCarIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V88::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSString>)",
			"ObjCRuntime.Trampolines/NIDActionArity1V88::Invoke(Intents.INRestaurantGuestResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V88::Invoke(Intents.INSetProfileInCarIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V89::Invoke(Intents.INSetSeatSettingsInCarIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V89::Invoke(Intents.INStringResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V89::Invoke(SafariServices.SFSafariTab)",
			"ObjCRuntime.Trampolines/NIDActionArity1V9::Invoke(AVFoundation.AVAudioBuffer)",
			"ObjCRuntime.Trampolines/NIDActionArity1V9::Invoke(AVFoundation.AVMetadataItemValueRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity1V90::Invoke(Intents.INCreateNoteIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V90::Invoke(Intents.INSearchCallHistoryIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V90::Invoke(SafariServices.SFSafariPageProperties)",
			"ObjCRuntime.Trampolines/NIDActionArity1V91::Invoke(AppKit.NSImage)",
			"ObjCRuntime.Trampolines/NIDActionArity1V91::Invoke(Intents.INCreateTaskListIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V91::Invoke(Intents.INStartAudioCallIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V92::Invoke(Intents.INDeleteTasksIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V92::Invoke(Intents.INStartVideoCallIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V92::Invoke(SafariServices.SFSafariPage)",
			"ObjCRuntime.Trampolines/NIDActionArity1V93::Invoke(Intents.INCancelRideIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V93::Invoke(Intents.INDeleteTasksTaskListResolutionResult)",
			"ObjCRuntime.Trampolines/NIDActionArity1V94::Invoke(Intents.INCancelWorkoutIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V95::Invoke(Intents.INEndWorkoutIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V95::Invoke(Intents.INGetCarLockStatusIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V95::Invoke(SafariServices.SFSafariToolbarItem)",
			"ObjCRuntime.Trampolines/NIDActionArity1V96::Invoke(Intents.INGetCarPowerLevelStatusIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V96::Invoke(SceneKit.SCNNode)",
			"ObjCRuntime.Trampolines/NIDActionArity1V97::Invoke(Intents.INGetAvailableRestaurantReservationBookingDefaultsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V97::Invoke(Intents.INSetCarLockStatusIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V98::Invoke(Intents.INGetAvailableRestaurantReservationBookingsIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V98::Invoke(Intents.INSaveProfileInCarIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V99::Invoke(Intents.INGetRestaurantGuestIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V99::Invoke(Intents.INSetAudioSourceInCarIntentResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity1V99::Invoke(UserNotifications.UNNotificationContent)",
			"ObjCRuntime.Trampolines/NIDActionArity2V0::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V0::Invoke(System.Int32,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V1::Invoke(ARKit.ARReferenceObject,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V1::Invoke(Foundation.NSArray`1<AVFoundation.AVTimedMetadataGroup>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V10::Invoke(AVFoundation.AVAssetTrackSegment,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V10::Invoke(Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential)",
			"ObjCRuntime.Trampolines/NIDActionArity2V10::Invoke(System.Int64,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V100::Invoke(HomeKit.HMServiceGroup,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V100::Invoke(LinkPresentation.LPLinkMetadata,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V100::Invoke(Security.SecIdentity,Foundation.NSArray)",
			"ObjCRuntime.Trampolines/NIDActionArity2V101::Invoke(HomeKit.HMUser,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V101::Invoke(MediaPlayer.MPMediaEntity[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V101::Invoke(PassKit.PKAddShareablePassConfiguration,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V102::Invoke(HomeKit.HMZone,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V102::Invoke(MediaPlayer.MPMediaPlaylist,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V102::Invoke(Photos.PHLivePhoto,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDActionArity2V103::Invoke(HomeKit.HMHome,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V103::Invoke(MediaPlayer.MPMusicPlayerControllerQueue,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V103::Invoke(Photos.PHLivePhoto,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V104::Invoke(IdentityLookup.ILNetworkResponse,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V104::Invoke(MediaPlayer.MPContentItem,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V104::Invoke(QuickLookThumbnailing.QLThumbnailRepresentation,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V105::Invoke(Intents.INVoiceShortcut,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V105::Invoke(Metal.IMTLLibrary,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V105::Invoke(QuickLookThumbnailing.QLThumbnailReply,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V106::Invoke(LinkPresentation.LPLinkMetadata,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V106::Invoke(Metal.IMTLRenderPipelineState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V106::Invoke(QuickLookUI.QLPreviewReply,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V107::Invoke(MediaPlayer.MPMediaEntity[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V107::Invoke(Metal.IMTLComputePipelineState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V107::Invoke(ReplayKit.RPBroadcastActivityController,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V108::Invoke(MediaPlayer.MPMediaPlaylist,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V108::Invoke(Metal.IMTLFunction,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V108::Invoke(ReplayKit.RPPreviewViewController,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V109::Invoke(MediaPlayer.MPMusicPlayerControllerQueue,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V109::Invoke(MetalPerformanceShaders.MPSImage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V109::Invoke(SafariServices.SFContentBlockerState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V11::Invoke(AVFoundation.AVAudioUnit,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V11::Invoke(Foundation.NSArray`1<AVFoundation.AVAssetTrack>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V11::Invoke(Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity2V110::Invoke(MediaPlayer.MPContentItem,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V110::Invoke(NaturalLanguage.NLTaggerAssetsResult,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V110::Invoke(System.Boolean,Foundation.NSString)",
			"ObjCRuntime.Trampolines/NIDActionArity2V111::Invoke(Foundation.NSArray,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V111::Invoke(Metal.IMTLLibrary,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V111::Invoke(ScreenCaptureKit.SCShareableContent,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V112::Invoke(Metal.IMTLRenderPipelineState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V112::Invoke(NetworkExtension.NEAppPushManager[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V112::Invoke(ShazamKit.SHMediaItem,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V113::Invoke(Metal.IMTLComputePipelineState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V113::Invoke(Speech.SFSpeechRecognitionResult,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V114::Invoke(Metal.IMTLFunction,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V114::Invoke(Security.SecIdentity,Foundation.NSArray)",
			"ObjCRuntime.Trampolines/NIDActionArity2V114::Invoke(StoreKit.SKCloudServiceCapability,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V115::Invoke(Foundation.NSString,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V115::Invoke(MetalPerformanceShaders.MPSImage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V115::Invoke(PassKit.PKAddShareablePassConfiguration,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V116::Invoke(NaturalLanguage.NLTaggerAssetsResult,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V116::Invoke(StoreKit.SKProduct[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V117::Invoke(Foundation.NSArray,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V117::Invoke(Photos.PHLivePhoto,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDActionArity2V117::Invoke(StoreKit.SKProductStorePromotionVisibility,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V118::Invoke(NetworkExtension.NEAppPushManager[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V118::Invoke(Photos.PHLivePhoto,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V118::Invoke(WebKit.WKContentRuleList,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V119::Invoke(QuickLook.QLPreviewReply,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V119::Invoke(WebKit.WKNavigationActionPolicy,WebKit.WKWebpagePreferences)",
			"ObjCRuntime.Trampolines/NIDActionArity2V12::Invoke(AVFoundation.AVAssetTrackSegment,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V12::Invoke(AVFoundation.AVMutableCompositionTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V12::Invoke(CoreMedia.CMTime,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V120::Invoke(Foundation.NSObject,Foundation.NSString)",
			"ObjCRuntime.Trampolines/NIDActionArity2V120::Invoke(QuickLookThumbnailing.QLThumbnailRepresentation,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V120::Invoke(Security.SecIdentity,Foundation.NSArray)",
			"ObjCRuntime.Trampolines/NIDActionArity2V121::Invoke(AppKit.NSImage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V121::Invoke(PassKit.PKAddShareablePassConfiguration,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V121::Invoke(QuickLookThumbnailing.QLThumbnailReply,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V122::Invoke(ReplayKit.RPBroadcastActivityViewController,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V123::Invoke(Photos.PHLivePhoto,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDActionArity2V123::Invoke(ReplayKit.RPPreviewViewController,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V124::Invoke(Photos.PHLivePhoto,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V124::Invoke(SafariServices.SFContentBlockerState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V125::Invoke(QuickLook.QLPreviewReply,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V125::Invoke(ShazamKit.SHMediaItem,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V126::Invoke(QuickLookThumbnailing.QLThumbnailRepresentation,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V126::Invoke(Speech.SFSpeechRecognitionResult,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V127::Invoke(QuickLookThumbnailing.QLThumbnailReply,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V127::Invoke(StoreKit.SKCloudServiceCapability,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V128::Invoke(Foundation.NSString,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V128::Invoke(ReplayKit.RPBroadcastActivityViewController,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V129::Invoke(ReplayKit.RPPreviewViewController,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V129::Invoke(StoreKit.SKProduct[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V13::Invoke(Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V13::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V13::Invoke(System.Int64,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V130::Invoke(SafariServices.SFContentBlockerState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V130::Invoke(StoreKit.SKProductStorePromotionVisibility,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V131::Invoke(ShazamKit.SHMediaItem,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V131::Invoke(UIKit.NSTextLayoutManager,UIKit.NSTextLayoutFragment)",
			"ObjCRuntime.Trampolines/NIDActionArity2V132::Invoke(Foundation.NSString,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDActionArity2V132::Invoke(Speech.SFSpeechRecognitionResult,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V133::Invoke(Foundation.NSUrl,UIKit.UIDocumentBrowserImportMode)",
			"ObjCRuntime.Trampolines/NIDActionArity2V133::Invoke(StoreKit.SKCloudServiceCapability,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V134::Invoke(Foundation.NSSet`1<Foundation.NSString>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V134::Invoke(Foundation.NSString,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V135::Invoke(Foundation.NSSet`1<Foundation.NSString>[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V135::Invoke(StoreKit.SKProduct[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V136::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V136::Invoke(StoreKit.SKProductStorePromotionVisibility,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V137::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V137::Invoke(Foundation.NSSet`1<ThreadNetwork.THCredentials>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V138::Invoke(ThreadNetwork.THCredentials,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V138::Invoke(UIKit.UISpringLoadedInteraction,UIKit.IUISpringLoadedInteractionContext)",
			"ObjCRuntime.Trampolines/NIDActionArity2V139::Invoke(UIKit.NSTextLayoutManager,UIKit.NSTextLayoutFragment)",
			"ObjCRuntime.Trampolines/NIDActionArity2V139::Invoke(UIKit.UITableViewRowAction,Foundation.NSIndexPath)",
			"ObjCRuntime.Trampolines/NIDActionArity2V14::Invoke(AVFoundation.AVAudioUnit,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V14::Invoke(AVFoundation.AVFragmentedAssetTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V14::Invoke(Foundation.NSArray`1<AVFoundation.AVAssetTrack>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V140::Invoke(Foundation.NSString,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDActionArity2V140::Invoke(WebKit.WKContentRuleList,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V141::Invoke(Foundation.NSUrl,UIKit.UIDocumentBrowserImportMode)",
			"ObjCRuntime.Trampolines/NIDActionArity2V141::Invoke(WebKit.WKNavigationActionPolicy,WebKit.WKWebpagePreferences)",
			"ObjCRuntime.Trampolines/NIDActionArity2V142::Invoke(Foundation.NSObject,Foundation.NSString)",
			"ObjCRuntime.Trampolines/NIDActionArity2V142::Invoke(Foundation.NSSet`1<Foundation.NSString>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V143::Invoke(Foundation.NSSet`1<Foundation.NSString>[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V143::Invoke(UIKit.UIImage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V144::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V145::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V146::Invoke(UIKit.UISpringLoadedInteraction,UIKit.IUISpringLoadedInteractionContext)",
			"ObjCRuntime.Trampolines/NIDActionArity2V147::Invoke(UIKit.UITableViewRowAction,Foundation.NSIndexPath)",
			"ObjCRuntime.Trampolines/NIDActionArity2V148::Invoke(VideoSubscriberAccount.VSAccountAccessStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V149::Invoke(VideoSubscriberAccount.VSAccountMetadata,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V15::Invoke(AVFoundation.AVAssetTrackSegment,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V15::Invoke(AVFoundation.AVMutableCompositionTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V15::Invoke(Foundation.NSArray`1<AVFoundation.AVFragmentedAssetTrack>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V150::Invoke(WebKit.WKContentRuleList,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V151::Invoke(WebKit.WKNavigationActionPolicy,WebKit.WKWebpagePreferences)",
			"ObjCRuntime.Trampolines/NIDActionArity2V152::Invoke(Foundation.NSObject,Foundation.NSString)",
			"ObjCRuntime.Trampolines/NIDActionArity2V153::Invoke(UIKit.UIImage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V16::Invoke(AVFoundation.AVAudioUnit,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V16::Invoke(Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V16::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V17::Invoke(AVFoundation.AVAssetTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V17::Invoke(AVFoundation.AVFragmentedAssetTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V17::Invoke(AVFoundation.AVMutableCompositionTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V18::Invoke(AudioUnit.AUAudioUnit,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V18::Invoke(Foundation.NSArray`1<AVFoundation.AVFragmentedAssetTrack>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V18::Invoke(Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V19::Invoke(AuthenticationServices.ASAuthorizationAppleIdProviderCredentialState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V19::Invoke(AVFoundation.AVFragmentedAssetTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V19::Invoke(AVFoundation.AVMovieTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V2::Invoke(ARKit.ARWorldMap,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V2::Invoke(AVFoundation.AVMediaSelectionGroup,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V20::Invoke(CloudKit.CKShare,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V20::Invoke(Foundation.NSArray`1<AVFoundation.AVFragmentedAssetTrack>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V20::Invoke(Foundation.NSArray`1<AVFoundation.AVMovieTrack>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V21::Invoke(AVFoundation.AVAssetTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V21::Invoke(AVFoundation.AVMovieTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V21::Invoke(CloudKit.CKUserIdentity,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V22::Invoke(Accounts.ACAccountCredentialRenewResult,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V22::Invoke(CloudKit.CKShareMetadata,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V22::Invoke(Foundation.NSArray`1<AVFoundation.AVMovieTrack>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V23::Invoke(Accounts.ACAccountCredentialRenewResult,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V23::Invoke(AVFoundation.AVAssetTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V23::Invoke(CloudKit.CKShareParticipant,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V23::Invoke(Foundation.NSUrl,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V24::Invoke(CloudKit.CKRecordID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V25::Invoke(Accounts.ACAccountCredentialRenewResult,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V25::Invoke(AudioUnit.AUAudioUnit,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V25::Invoke(CloudKit.CKAccountStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V26::Invoke(AppKit.NSTableViewRowAction,System.IntPtr)",
			"ObjCRuntime.Trampolines/NIDActionArity2V26::Invoke(AuthenticationServices.ASAuthorizationAppleIdCredential,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V26::Invoke(CloudKit.CKApplicationPermissionStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V26::Invoke(Foundation.NSUrl,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V27::Invoke(AppKit.NSTextLayoutManager,AppKit.NSTextLayoutFragment)",
			"ObjCRuntime.Trampolines/NIDActionArity2V27::Invoke(AudioUnit.AUAudioUnit,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V27::Invoke(AuthenticationServices.ASAuthorizationAppleIdProviderCredentialState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V27::Invoke(CloudKit.CKRecordZoneID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V28::Invoke(AppKit.NSRunningApplication,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V28::Invoke(AuthenticationServices.ASAuthorizationAppleIdCredential,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V28::Invoke(CallKit.CXCallDirectoryEnabledStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V28::Invoke(CloudKit.CKRecordZone[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V29::Invoke(AppKit.NSWorkspaceAuthorization,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V29::Invoke(AuthenticationServices.ASAuthorizationAppleIdProviderCredentialState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V29::Invoke(ClassKit.CLSContext,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V29::Invoke(CloudKit.CKSubscription[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V3::Invoke(Foundation.NSArray`1<AVFoundation.AVMetadataItem>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V3::Invoke(System.Int32,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V30::Invoke(AudioUnit.AUAudioUnit,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V30::Invoke(CallKit.CXCallDirectoryEnabledStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V30::Invoke(ClassKit.CLSActivity,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V30::Invoke(CloudKit.CKRecord,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V31::Invoke(AuthenticationServices.ASAuthorizationAppleIdProviderCredentialState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V31::Invoke(ClassKit.CLSContext,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V31::Invoke(ClassKit.CLSContext[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V31::Invoke(CloudKit.CKRecordZone,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V32::Invoke(ClassKit.CLSActivity,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V32::Invoke(ClassKit.CLSContext,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V32::Invoke(CloudKit.CKShare,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V32::Invoke(CloudKit.CKSubscription,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V33::Invoke(ClassKit.CLSActivity,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V33::Invoke(ClassKit.CLSContext[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V33::Invoke(CloudKit.CKRecord[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V33::Invoke(CloudKit.CKUserIdentity[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V34::Invoke(ClassKit.CLSContext[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V34::Invoke(CloudKit.CKShare,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V34::Invoke(CloudKit.CKUserIdentity,CloudKit.CKUserIdentityLookupInfo)",
			"ObjCRuntime.Trampolines/NIDActionArity2V34::Invoke(CloudKit.CKUserIdentity,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V35::Invoke(CloudKit.CKServerChangeToken,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V35::Invoke(CloudKit.CKShare,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V35::Invoke(CloudKit.CKUserIdentity[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V35::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSOperation>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V36::Invoke(CloudKit.CKRecordID,System.Double)",
			"ObjCRuntime.Trampolines/NIDActionArity2V36::Invoke(CloudKit.CKShareMetadata,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V36::Invoke(CloudKit.CKUserIdentity,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V36::Invoke(CloudKit.CKUserIdentity[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V37::Invoke(CloudKit.CKRecord,System.Double)",
			"ObjCRuntime.Trampolines/NIDActionArity2V37::Invoke(CloudKit.CKShareParticipant,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V37::Invoke(CloudKit.CKUserIdentity,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V37::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSOperation>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V38::Invoke(CloudKit.CKQueryCursor,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V38::Invoke(CloudKit.CKRecordID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V38::Invoke(CloudKit.CKShareMetadata,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V38::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSOperation>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V39::Invoke(CloudKit.CKAccountStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V39::Invoke(CloudKit.CKShareMetadata,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V39::Invoke(CloudKit.CKShareParticipant,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V39::Invoke(CoreData.NSPersistentStoreDescription,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V4::Invoke(AVFoundation.AVCompositionTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V4::Invoke(Foundation.NSArray`1<AVFoundation.AVTimedMetadataGroup>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V40::Invoke(CloudKit.CKApplicationPermissionStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V40::Invoke(CloudKit.CKRecordID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V40::Invoke(CloudKit.CKShareParticipant,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V40::Invoke(CoreML.MLModel,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V41::Invoke(CloudKit.CKAccountStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V41::Invoke(CloudKit.CKRecordID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V41::Invoke(CloudKit.CKRecordZoneID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V41::Invoke(System.String,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V42::Invoke(CloudKit.CKAccountStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V42::Invoke(CloudKit.CKApplicationPermissionStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V42::Invoke(CloudKit.CKRecordZone[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V43::Invoke(CloudKit.CKApplicationPermissionStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V43::Invoke(CloudKit.CKRecordZoneID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V43::Invoke(CloudKit.CKSubscription[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V43::Invoke(Foundation.NSUrl,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V44::Invoke(CloudKit.CKRecord,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V44::Invoke(CloudKit.CKRecordZone[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V44::Invoke(CloudKit.CKRecordZoneID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V44::Invoke(Foundation.NSObject,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V45::Invoke(CloudKit.CKRecordZone,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V45::Invoke(CloudKit.CKRecordZone[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V45::Invoke(CloudKit.CKSubscription[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V45::Invoke(Foundation.INSItemProviderReading,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V46::Invoke(CloudKit.CKRecord,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V46::Invoke(CloudKit.CKSubscription,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V46::Invoke(CloudKit.CKSubscription[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V46::Invoke(Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential)",
			"ObjCRuntime.Trampolines/NIDActionArity2V47::Invoke(CloudKit.CKRecord,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V47::Invoke(CloudKit.CKRecord[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V47::Invoke(CloudKit.CKRecordZone,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V47::Invoke(Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity2V48::Invoke(CloudKit.CKRecordZone,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V48::Invoke(CloudKit.CKSubscription,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V48::Invoke(CloudKit.CKUserIdentity,CloudKit.CKUserIdentityLookupInfo)",
			"ObjCRuntime.Trampolines/NIDActionArity2V48::Invoke(Foundation.NSUrlSessionWebSocketMessage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V49::Invoke(CloudKit.CKRecord[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V49::Invoke(CloudKit.CKServerChangeToken,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V49::Invoke(CloudKit.CKSubscription,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V49::Invoke(GameKit.GKPlayer[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V5::Invoke(AVFoundation.AVMediaSelectionGroup,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V5::Invoke(Foundation.NSArray`1<AVFoundation.AVCompositionTrack>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V50::Invoke(CloudKit.CKRecord[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V50::Invoke(CloudKit.CKRecordID,System.Double)",
			"ObjCRuntime.Trampolines/NIDActionArity2V50::Invoke(CloudKit.CKUserIdentity,CloudKit.CKUserIdentityLookupInfo)",
			"ObjCRuntime.Trampolines/NIDActionArity2V50::Invoke(GameKit.GKChallenge[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V51::Invoke(CloudKit.CKRecord,System.Double)",
			"ObjCRuntime.Trampolines/NIDActionArity2V51::Invoke(CloudKit.CKServerChangeToken,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V51::Invoke(CloudKit.CKUserIdentity,CloudKit.CKUserIdentityLookupInfo)",
			"ObjCRuntime.Trampolines/NIDActionArity2V51::Invoke(GameKit.GKCloudPlayer,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V52::Invoke(CloudKit.CKQueryCursor,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V52::Invoke(CloudKit.CKRecordID,System.Double)",
			"ObjCRuntime.Trampolines/NIDActionArity2V52::Invoke(CloudKit.CKServerChangeToken,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V52::Invoke(GameKit.GKGameSession,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V53::Invoke(CloudKit.CKRecord,System.Double)",
			"ObjCRuntime.Trampolines/NIDActionArity2V53::Invoke(CloudKit.CKRecordID,System.Double)",
			"ObjCRuntime.Trampolines/NIDActionArity2V53::Invoke(CoreData.NSPersistentStoreDescription,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V53::Invoke(GameKit.GKGameSession[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V54::Invoke(CloudKit.CKQueryCursor,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V54::Invoke(CloudKit.CKRecord,System.Double)",
			"ObjCRuntime.Trampolines/NIDActionArity2V54::Invoke(CoreML.MLModel,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V54::Invoke(GameKit.GKLeaderboard[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V55::Invoke(CloudKit.CKQueryCursor,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V55::Invoke(CoreData.NSPersistentStoreDescription,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V55::Invoke(CoreML.MLModelCollection,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V55::Invoke(GameKit.GKFriendsAuthorizationStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V56::Invoke(CoreData.NSPersistentStoreDescription,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V56::Invoke(CoreML.MLModel,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V56::Invoke(CoreMotion.CMAltitudeData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V56::Invoke(UIKit.UIViewController,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V57::Invoke(CoreML.MLModel,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V57::Invoke(CoreML.MLModelCollection,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V57::Invoke(CoreMotion.CMPedometerData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V57::Invoke(GameKit.GKMatch,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V58::Invoke(CoreML.MLModelCollection,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V58::Invoke(CoreMotion.CMAbsoluteAltitudeData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V58::Invoke(CoreMotion.CMPedometerEvent,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V58::Invoke(GameKit.GKPlayer,GameKit.GKInviteRecipientResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity2V59::Invoke(CoreMotion.CMAltitudeData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V59::Invoke(CoreMotion.CMPedometerData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V59::Invoke(Foundation.NSData[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V59::Invoke(GameKit.GKPlayer,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDActionArity2V6::Invoke(Foundation.NSArray`1<AVFoundation.AVMetadataItem>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V6::Invoke(Foundation.NSArray`1<AVFoundation.AVMutableCompositionTrack>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V60::Invoke(CoreMotion.CMPedometerData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V60::Invoke(CoreMotion.CMPedometerEvent,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V60::Invoke(GameKit.GKTurnBasedMatch,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V60::Invoke(System.IntPtr,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V61::Invoke(CoreMotion.CMPedometerEvent,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V61::Invoke(CoreNFC.NFCNdefMessage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V61::Invoke(GameKit.GKTurnBasedExchange,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V61::Invoke(System.String,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V62::Invoke(FileProvider.NSFileProviderDomain[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V62::Invoke(Foundation.NSData[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V62::Invoke(Foundation.NSNumber[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V62::Invoke(GameKit.GKPlayer,GameKit.GKVoiceChatPlayerState)",
			"ObjCRuntime.Trampolines/NIDActionArity2V63::Invoke(FileProvider.INSFileProviderItem,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V63::Invoke(MediaPlayer.MPMusicPlayerControllerQueue,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V63::Invoke(System.IntPtr,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V63::Invoke(System.String,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V64::Invoke(CoreNFC.NFCNdefMessage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V64::Invoke(FileProvider.INSFileProviderServiceSource[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V64::Invoke(Metal.IMTLLibrary,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V65::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSFileProviderService>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V65::Invoke(Foundation.NSNumber[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V65::Invoke(Metal.IMTLRenderPipelineState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V66::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSFileProviderService>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V66::Invoke(Foundation.NSUrl,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V66::Invoke(Metal.IMTLComputePipelineState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V66::Invoke(System.String,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V67::Invoke(FileProvider.INSFileProviderItem,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V67::Invoke(Foundation.NSObject,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V67::Invoke(Metal.IMTLFunction,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V68::Invoke(FileProvider.NSFileProviderDomain[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V68::Invoke(Foundation.INSItemProviderReading,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V68::Invoke(MetalPerformanceShaders.MPSImage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V69::Invoke(Foundation.NSUrlSessionWebSocketMessage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V69::Invoke(NaturalLanguage.NLTaggerAssetsResult,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V7::Invoke(AVFoundation.AVCompositionTrack,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V7::Invoke(CoreMedia.CMTime,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V7::Invoke(Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential)",
			"ObjCRuntime.Trampolines/NIDActionArity2V70::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSFileProviderService>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V70::Invoke(Photos.PHLivePhoto,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDActionArity2V70::Invoke(System.String[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V71::Invoke(Foundation.NSObject,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V71::Invoke(GameKit.GKPlayer[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V71::Invoke(Photos.PHLivePhoto,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V72::Invoke(Foundation.INSItemProviderReading,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V72::Invoke(GameKit.GKChallenge[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V72::Invoke(ReplayKit.RPBroadcastActivityViewController,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V73::Invoke(Foundation.NSUrlSessionWebSocketMessage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V73::Invoke(GameKit.GKCloudPlayer,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V73::Invoke(ReplayKit.RPPreviewViewController,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V74::Invoke(GameKit.GKGameSession,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V74::Invoke(ShazamKit.SHMediaItem,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V74::Invoke(System.String[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V75::Invoke(GameKit.GKGameSession[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V75::Invoke(GameKit.GKPlayer[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V75::Invoke(StoreKit.SKCloudServiceCapability,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V76::Invoke(Foundation.NSString,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V76::Invoke(GameKit.GKChallenge[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V76::Invoke(GameKit.GKLeaderboard[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V77::Invoke(GameKit.GKCloudPlayer,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V77::Invoke(GameKit.GKSavedGame[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V77::Invoke(StoreKit.SKProduct[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V78::Invoke(GameKit.GKFriendsAuthorizationStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V78::Invoke(GameKit.GKGameSession,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V78::Invoke(StoreKit.SKProductStorePromotionVisibility,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V79::Invoke(GameKit.GKGameSession[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V79::Invoke(GameKit.GKSavedGame,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V8::Invoke(Foundation.NSArray`1<AVFoundation.AVCompositionTrack>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V8::Invoke(Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest)",
			"ObjCRuntime.Trampolines/NIDActionArity2V8::Invoke(System.Int64,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V80::Invoke(AppKit.NSViewController,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V80::Invoke(GameKit.GKLeaderboard[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V80::Invoke(UIKit.NSTextLayoutManager,UIKit.NSTextLayoutFragment)",
			"ObjCRuntime.Trampolines/NIDActionArity2V80::Invoke(UIKit.UIViewController,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V81::Invoke(GameKit.GKMatch,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V81::Invoke(GameKit.GKSavedGame[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V81::Invoke(VideoSubscriberAccount.VSAccountAccessStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V82::Invoke(GameKit.GKFriendsAuthorizationStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V82::Invoke(VideoSubscriberAccount.VSAccountMetadata,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V83::Invoke(GameKit.GKPlayer,GameKit.GKInviteRecipientResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity2V83::Invoke(GameKit.GKSavedGame,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V84::Invoke(UIKit.UIViewController,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V85::Invoke(GameKit.GKMatch,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V85::Invoke(GameKit.GKPlayer,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDActionArity2V86::Invoke(GameKit.GKTurnBasedMatch,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V87::Invoke(GameKit.GKPlayer,GameKit.GKInviteRecipientResponse)",
			"ObjCRuntime.Trampolines/NIDActionArity2V87::Invoke(GameKit.GKTurnBasedExchange,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V88::Invoke(GameKit.GKPlayer,GameKit.GKVoiceChatPlayerState)",
			"ObjCRuntime.Trampolines/NIDActionArity2V89::Invoke(Foundation.NSDictionary,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V89::Invoke(GameKit.GKPlayer,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDActionArity2V89::Invoke(Intents.INVoiceShortcut,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V9::Invoke(CoreMedia.CMTime,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V9::Invoke(Foundation.NSArray`1<AVFoundation.AVAssetTrack>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V9::Invoke(Foundation.NSArray`1<AVFoundation.AVMutableCompositionTrack>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V90::Invoke(GameKit.GKTurnBasedMatch,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V90::Invoke(HealthKit.HKHeartbeatSeriesSample,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V90::Invoke(LinkPresentation.LPLinkMetadata,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V91::Invoke(GameKit.GKTurnBasedExchange,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V91::Invoke(HealthKit.HKWorkoutRoute,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V91::Invoke(Metal.IMTLLibrary,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V92::Invoke(GameKit.GKPlayer,GameKit.GKVoiceChatPlayerState)",
			"ObjCRuntime.Trampolines/NIDActionArity2V92::Invoke(HomeKit.HMActionSet,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V92::Invoke(Metal.IMTLRenderPipelineState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V93::Invoke(Foundation.NSDictionary,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V93::Invoke(HomeKit.HMRoom,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V93::Invoke(Metal.IMTLComputePipelineState,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V94::Invoke(HealthKit.HKHeartbeatSeriesSample,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V94::Invoke(HomeKit.HMServiceGroup,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V94::Invoke(Metal.IMTLFunction,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V95::Invoke(HealthKit.HKWorkoutRoute,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V95::Invoke(HomeKit.HMUser,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V95::Invoke(MetalPerformanceShaders.MPSImage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V96::Invoke(HomeKit.HMAccessorySetupResult,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V96::Invoke(HomeKit.HMZone,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V96::Invoke(NaturalLanguage.NLTaggerAssetsResult,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V97::Invoke(Foundation.NSArray,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V97::Invoke(HomeKit.HMActionSet,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V97::Invoke(HomeKit.HMHome,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V98::Invoke(HomeKit.HMAccessory[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V98::Invoke(IdentityLookup.ILNetworkResponse,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V99::Invoke(HomeKit.HMRoom,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V99::Invoke(Intents.INVoiceShortcut,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity2V99::Invoke(NetworkExtension.NETransparentProxyManager[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V0::Invoke(CloudKit.CKRecord,CloudKit.CKRecordID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V0::Invoke(CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureBracketedStillImageSettings,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V1::Invoke(CloudKit.CKRecord,CloudKit.CKRecordID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V1::Invoke(Foundation.NSInputStream,Foundation.NSOutputStream,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V10::Invoke(QuickLookThumbnailing.QLThumbnailRepresentation,QuickLookThumbnailing.QLThumbnailRepresentationType,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V11::Invoke(CoreMedia.CMSampleBuffer,ReplayKit.RPSampleBufferType,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V12::Invoke(Foundation.NSData,Foundation.NSHttpUrlResponse,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V2::Invoke(Foundation.NSInputStream,Foundation.NSOutputStream,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V2::Invoke(Metal.IMTLRenderPipelineState,Metal.MTLRenderPipelineReflection,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V3::Invoke(HealthKit.HKActivitySummaryQuery,HealthKit.HKActivitySummary[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V3::Invoke(Metal.IMTLComputePipelineState,Metal.MTLComputePipelineReflection,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V4::Invoke(CoreMedia.CMSampleBuffer,ReplayKit.RPSampleBufferType,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V4::Invoke(QuickLookThumbnailing.QLThumbnailRepresentation,QuickLookThumbnailing.QLThumbnailRepresentationType,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V4::Invoke(System.Boolean,System.UIntPtr,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V5::Invoke(CoreMedia.CMSampleBuffer,ReplayKit.RPSampleBufferType,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V5::Invoke(HealthKit.HKQuantity,HealthKit.HKQuantity,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V6::Invoke(Foundation.NSData,Foundation.NSHttpUrlResponse,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V6::Invoke(HealthKit.HKVerifiableClinicalRecordQuery,HealthKit.HKVerifiableClinicalRecord[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V7::Invoke(Metal.IMTLRenderPipelineState,Metal.MTLRenderPipelineReflection,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity3V8::Invoke(Metal.IMTLComputePipelineState,Metal.MTLComputePipelineReflection,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity4V0::Invoke(HealthKit.HKDocumentQuery,HealthKit.HKDocumentSample[],System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDActionArity4V0::Invoke(System.IntPtr,Foundation.NSTextCheckingResult[],Foundation.NSOrthography,System.IntPtr)",
			"ObjCRuntime.Trampolines/NIDALAssetsEnumerator::Invoke(AssetsLibrary.ALAsset,System.IntPtr,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDALAssetsLibraryGroupsEnumerationResultsDelegate::Invoke(AssetsLibrary.ALAssetsGroup,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDASCredentialIdentityStoreCompletionHandler::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDASWebAuthenticationSessionCompletionHandler::Invoke(Foundation.NSUrl,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDAttributedStringForCandidateHandler::Invoke(Foundation.NSObject,System.IntPtr)",
			"ObjCRuntime.Trampolines/NIDAUImplementorDisplayNameWithLengthCallback::Invoke(AudioUnit.AUParameterNode,System.IntPtr)",
			"ObjCRuntime.Trampolines/NIDAUImplementorStringFromValueCallback::Invoke(AudioUnit.AUParameter,System.Nullable`1<System.Single>&)",
			"ObjCRuntime.Trampolines/NIDAUImplementorValueFromStringCallback::Invoke(AudioUnit.AUParameter,System.String)",
			"ObjCRuntime.Trampolines/NIDAUImplementorValueObserver::Invoke(AudioUnit.AUParameter,System.Single)",
			"ObjCRuntime.Trampolines/NIDAUImplementorValueProvider::Invoke(AudioUnit.AUParameter)",
			"ObjCRuntime.Trampolines/NIDAUInternalRenderBlock::Invoke(AudioUnit.AudioUnitRenderActionFlags&,AudioToolbox.AudioTimeStamp&,System.UInt32,System.IntPtr,AudioToolbox.AudioBuffers,AudioUnit.AURenderEventEnumerator,AudioUnit.AURenderPullInputBlock)",
			"ObjCRuntime.Trampolines/NIDAUMidiCIProfileChangedCallback::Invoke(System.Byte,System.Byte,CoreMidi.MidiCIProfile,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDAURenderBlock::Invoke(AudioUnit.AudioUnitRenderActionFlags&,AudioToolbox.AudioTimeStamp&,System.UInt32,System.IntPtr,AudioToolbox.AudioBuffers,AudioUnit.AURenderPullInputBlock)",
			"ObjCRuntime.Trampolines/NIDAURenderPullInputBlock::Invoke(AudioUnit.AudioUnitRenderActionFlags&,AudioToolbox.AudioTimeStamp&,System.UInt32,System.IntPtr,AudioToolbox.AudioBuffers)",
			"ObjCRuntime.Trampolines/NIDAVAssetImageGeneratorCompletionHandler::Invoke(CoreMedia.CMTime,System.IntPtr,CoreMedia.CMTime,AVFoundation.AVAssetImageGeneratorResult,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDAVAudioEngineManualRenderingBlock::Invoke(System.UInt32,AudioToolbox.AudioBuffers,System.Int32&)",
			"ObjCRuntime.Trampolines/NIDAVAudioNodeTapBlock::Invoke(AVFoundation.AVAudioPcmBuffer,AVFoundation.AVAudioTime)",
			"ObjCRuntime.Trampolines/NIDAVAudioUnitComponentFilter::Invoke(AVFoundation.AVAudioUnitComponent,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDAVCaptureCompletionHandler::Invoke(CoreMedia.CMSampleBuffer,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKAcceptPerShareCompletionHandler::Invoke(CloudKit.CKShareMetadata,CloudKit.CKShare,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKDatabaseDeleteSubscriptionHandler::Invoke(System.String,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKFetchDatabaseChangesCompletionHandler::Invoke(CloudKit.CKServerChangeToken,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKFetchPerShareMetadataHandler::Invoke(Foundation.NSUrl,CloudKit.CKShareMetadata,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKFetchRecordChangesHandler::Invoke(CloudKit.CKServerChangeToken,Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKFetchRecordsCompletedHandler::Invoke(Foundation.NSDictionary,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKFetchRecordZoneChangesFetchCompletedHandler::Invoke(CloudKit.CKRecordZoneID,CloudKit.CKServerChangeToken,Foundation.NSData,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKFetchRecordZoneChangesRecordWasChangedHandler::Invoke(CloudKit.CKRecordID,CloudKit.CKRecord,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKFetchRecordZoneChangesTokensUpdatedHandler::Invoke(CloudKit.CKRecordZoneID,CloudKit.CKServerChangeToken,Foundation.NSData)",
			"ObjCRuntime.Trampolines/NIDCKFetchRecordZoneChangesWithIDWasDeletedHandler::Invoke(CloudKit.CKRecordID,Foundation.NSString)",
			"ObjCRuntime.Trampolines/NIDCKFetchShareParticipantsOperationPerShareParticipantCompletionHandler::Invoke(CloudKit.CKUserIdentityLookupInfo,CloudKit.CKShareParticipant,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKFetchSubscriptionsCompleteHandler::Invoke(Foundation.NSDictionary,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKFetchSubscriptionsPerSubscriptionCompletionHandler::Invoke(Foundation.NSString,CloudKit.CKSubscription,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKFetchWebAuthTokenOperationHandler::Invoke(System.String,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKMarkNotificationsReadHandler::Invoke(CloudKit.CKNotificationID[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKModifyRecordsOperationHandler::Invoke(CloudKit.CKRecord[],CloudKit.CKRecordID[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKModifyRecordsOperationPerRecordDeleteHandler::Invoke(CloudKit.CKRecordID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKModifyRecordsOperationPerRecordSaveHandler::Invoke(CloudKit.CKRecordID,CloudKit.CKRecord,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKModifyRecordZonesHandler::Invoke(CloudKit.CKRecordZone[],CloudKit.CKRecordZoneID[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKModifyRecordZonesPerRecordZoneDeleteHandler::Invoke(CloudKit.CKRecordZoneID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKModifyRecordZonesPerRecordZoneSaveHandler::Invoke(CloudKit.CKRecordZoneID,CloudKit.CKRecordZone,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKModifySubscriptionsHandler::Invoke(CloudKit.CKSubscription[],System.String[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKModifySubscriptionsPerSubscriptionDeleteHandler::Invoke(Foundation.NSString,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKModifySubscriptionsPerSubscriptionSaveHandler::Invoke(Foundation.NSString,CloudKit.CKSubscription,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKQueryOperationRecordMatchedHandler::Invoke(CloudKit.CKRecordID,CloudKit.CKRecord,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKRecordZoneCompleteHandler::Invoke(Foundation.NSDictionary,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCKRecordZonePerRecordZoneCompletionHandler::Invoke(CloudKit.CKRecordZoneID,CloudKit.CKRecordZone,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCLGeocodeCompletionHandler::Invoke(CoreLocation.CLPlacemark[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCloudKitRegistrationPreparationHandler::Invoke(CloudKit.CKShare,CloudKit.CKContainer,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCMAccelerometerHandler::Invoke(CoreMotion.CMAccelerometerData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCMDeviceMotionHandler::Invoke(CoreMotion.CMDeviceMotion,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCMGyroHandler::Invoke(CoreMotion.CMGyroData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCMHeadphoneDeviceMotionHandler::Invoke(CoreMotion.CMDeviceMotion,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCMMagnetometerHandler::Invoke(CoreMotion.CMMagnetometerData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCMMotionActivityHandler::Invoke(CoreMotion.CMMotionActivity)",
			"ObjCRuntime.Trampolines/NIDCMMotionActivityQueryHandler::Invoke(CoreMotion.CMMotionActivity[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCMStepQueryHandler::Invoke(System.IntPtr,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCMStepUpdateHandler::Invoke(System.IntPtr,Foundation.NSDate,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCNContactStoreListContactsHandler::Invoke(Contacts.CNContact,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDCNContactStoreRequestAccessHandler::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDCPBarButtonHandler::Invoke(CarPlay.CPBarButton)",
			"ObjCRuntime.Trampolines/NIDCPListImageRowItemHandler::Invoke(CarPlay.CPListImageRowItem,System.IntPtr,System.Action)",
			"ObjCRuntime.Trampolines/NIDCPSelectableListItemHandler::Invoke(CarPlay.ICPSelectableListItem,System.Action)",
			"ObjCRuntime.Trampolines/NIDCSSearchableIndexFetchHandler::Invoke(Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDDCDeviceGenerateTokenCompletionHandler::Invoke(Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDDownloadFontAssetsRequestCompletionHandler::Invoke(Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDEKEventSearchCallback::Invoke(EventKit.EKEvent,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDEnumerateDatesCallback::Invoke(Foundation.NSDate,System.Boolean,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V1::Invoke(AppKit.NSAppearance)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V1::Invoke(GameplayKit.GKRuleSystem)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V10::Invoke(UIKit.UITraitCollection)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V11::Invoke(UIKit.UIMenu)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V13::Invoke(UIKit.UITableViewCell)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V2::Invoke(AppKit.NSTextElement)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V3::Invoke(AppKit.NSTextLayoutFragment)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V3::Invoke(MediaPlayer.MPRemoteCommandEvent)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V4::Invoke(GameplayKit.GKRuleSystem)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V4::Invoke(Photos.PHAdjustmentData)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V5::Invoke(CoreGraphics.CGContext)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V6::Invoke(MediaPlayer.MPRemoteCommandEvent)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V6::Invoke(UIKit.NSTextElement)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V7::Invoke(Photos.PHAdjustmentData)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V7::Invoke(UIKit.NSTextElement)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V7::Invoke(UIKit.NSTextLayoutFragment)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V8::Invoke(CoreGraphics.CGContext)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V8::Invoke(UIKit.NSTextLayoutFragment)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V8::Invoke(UIKit.UITraitCollection)",
			"ObjCRuntime.Trampolines/NIDFuncArity2V9::Invoke(UIKit.UICollectionViewCell)",
			"ObjCRuntime.Trampolines/NIDFuncArity3V0::Invoke(Foundation.NSObject,Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDFuncArity3V0::Invoke(SceneKit.SCNNode,SceneKit.SCNQuaternion)",
			"ObjCRuntime.Trampolines/NIDFuncArity3V1::Invoke(SceneKit.SCNNode,SceneKit.SCNQuaternion)",
			"ObjCRuntime.Trampolines/NIDFuncArity3V1::Invoke(SceneKit.SCNNode,SceneKit.SCNVector3)",
			"ObjCRuntime.Trampolines/NIDFuncArity3V2::Invoke(SceneKit.SCNNode,SceneKit.SCNVector3)",
			"ObjCRuntime.Trampolines/NIDGCControllerAxisValueChangedHandler::Invoke(GameController.GCControllerAxisInput,System.Single)",
			"ObjCRuntime.Trampolines/NIDGCControllerButtonTouchedChanged::Invoke(GameController.GCControllerButtonInput,System.Single,System.Boolean,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDGCControllerButtonValueChanged::Invoke(GameController.GCControllerButtonInput,System.Single,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDGCControllerDirectionPadValueChangedHandler::Invoke(GameController.GCControllerDirectionPad,System.Single,System.Single)",
			"ObjCRuntime.Trampolines/NIDGCControllerTouchpadHandler::Invoke(GameController.GCControllerTouchpad,System.Single,System.Single,System.Single,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDGCExtendedGamepadValueChangedHandler::Invoke(GameController.GCExtendedGamepad,GameController.GCControllerElement)",
			"ObjCRuntime.Trampolines/NIDGCGamepadValueChangedHandler::Invoke(GameController.GCGamepad,GameController.GCControllerElement)",
			"ObjCRuntime.Trampolines/NIDGCKeyboardValueChangedHandler::Invoke(GameController.GCKeyboardInput,GameController.GCControllerButtonInput,System.IntPtr,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDGCMicroGamepadValueChangedHandler::Invoke(GameController.GCMicroGamepad,GameController.GCControllerElement)",
			"ObjCRuntime.Trampolines/NIDGCMouseMoved::Invoke(GameController.GCMouseInput,System.Single,System.Single)",
			"ObjCRuntime.Trampolines/NIDGCVirtualControllerElementUpdateBlock::Invoke(GameController.GCVirtualControllerElementConfiguration)",
			"ObjCRuntime.Trampolines/NIDGetGeolocationCallback::Invoke(CoreLocation.CLLocationCoordinate2D,System.Double,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGetValuesCompletionHandler::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKAchievementDescriptionHandler::Invoke(GameKit.GKAchievementDescription[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKCategoryHandler::Invoke(System.String[],System.String[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKChallengeComposeHandler::Invoke(AppKit.NSViewController,System.Boolean,System.String[])",
			"ObjCRuntime.Trampolines/NIDGKChallengeComposeHandler::Invoke(UIKit.UIViewController,System.Boolean,System.String[])",
			"ObjCRuntime.Trampolines/NIDGKCompletionHandler::Invoke(GameKit.GKAchievement[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKEntriesForPlayerScopeHandler::Invoke(GameKit.GKLeaderboardEntry,GameKit.GKLeaderboardEntry[],System.IntPtr,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKEntriesForPlayersHandler::Invoke(GameKit.GKLeaderboardEntry,GameKit.GKLeaderboardEntry[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKFetchItemsForIdentityVerificationSignatureCompletionHandler::Invoke(Foundation.NSUrl,Foundation.NSData,Foundation.NSData,System.UInt64,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKFriendsHandler::Invoke(System.String[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKIdentityVerificationSignatureHandler::Invoke(Foundation.NSUrl,Foundation.NSData,Foundation.NSData,System.UInt64,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKImageLoadedHandler::Invoke(AppKit.NSImage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKImageLoadedHandler::Invoke(UIKit.UIImage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKInviteHandler::Invoke(GameKit.GKInvite,System.String[])",
			"ObjCRuntime.Trampolines/NIDGKLeaderboardSetsHandler::Invoke(GameKit.GKLeaderboardSet[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKLeaderboardsHandler::Invoke(GameKit.GKLeaderboard[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKNotificationMatch::Invoke(GameKit.GKMatch,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKPlayerPhotoLoaded::Invoke(AppKit.NSImage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKPlayerPhotoLoaded::Invoke(UIKit.UIImage,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKPlayersHandler::Invoke(GameKit.GKPlayer[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKQueryHandler::Invoke(System.IntPtr,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKScoresLoadedHandler::Invoke(GameKit.GKScore[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKTurnBasedMatchData::Invoke(Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKTurnBasedMatchesRequest::Invoke(GameKit.GKTurnBasedMatch[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGKTurnBasedMatchRequest::Invoke(GameKit.GKTurnBasedMatch,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGLKTextureLoaderCallback::Invoke(GLKit.GLKTextureInfo,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDGlobalEventHandler::Invoke(AppKit.NSEvent)",
			"ObjCRuntime.Trampolines/NIDHKAnchoredObjectResultHandler::Invoke(HealthKit.HKAnchoredObjectQuery,HealthKit.HKSample[],System.UIntPtr,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKAnchoredObjectUpdateHandler::Invoke(HealthKit.HKAnchoredObjectQuery,HealthKit.HKSample[],HealthKit.HKDeletedObject[],HealthKit.HKQueryAnchor,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKCorrelationQueryResultHandler::Invoke(HealthKit.HKCorrelationQuery,HealthKit.HKCorrelation[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKElectrocardiogramQueryDataHandler::Invoke(HealthKit.HKElectrocardiogramQuery,HealthKit.HKElectrocardiogramVoltageMeasurement,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKHealthStoreGetRequestStatusForAuthorizationToShareHandler::Invoke(HealthKit.HKAuthorizationRequestStatus,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKHeartbeatSeriesBuilderCompletionHandler::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKHeartbeatSeriesQueryDataHandler::Invoke(HealthKit.HKHeartbeatSeriesQuery,System.Double,System.Boolean,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKObserverQueryDescriptorUpdateHandler::Invoke(HealthKit.HKObserverQuery,Foundation.NSSet`1<HealthKit.HKSampleType>,System.Action,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKObserverQueryUpdateHandler::Invoke(HealthKit.HKObserverQuery,System.Action,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKQuantitySeriesSampleBuilderFinishSeriesDelegate::Invoke(HealthKit.HKQuantitySample[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKQuantitySeriesSampleQueryQuantityDelegate::Invoke(HealthKit.HKQuantitySeriesSampleQuery,HealthKit.HKQuantity,Foundation.NSDate,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKQuantitySeriesSampleQueryQuantityHandler::Invoke(HealthKit.HKQuantitySeriesSampleQuery,HealthKit.HKQuantity,Foundation.NSDateInterval,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKSampleQueryResultsHandler::Invoke(HealthKit.HKSampleQuery,HealthKit.HKSample[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKSourceQueryCompletionHandler::Invoke(HealthKit.HKSourceQuery,Foundation.NSSet,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKStatisticsCollectionEnumerator::Invoke(HealthKit.HKStatistics,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDHKStatisticsCollectionQueryInitialResultsHandler::Invoke(HealthKit.HKStatisticsCollectionQuery,HealthKit.HKStatisticsCollection,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKStatisticsCollectionQueryStatisticsUpdateHandler::Invoke(HealthKit.HKStatisticsCollectionQuery,HealthKit.HKStatistics,HealthKit.HKStatisticsCollection,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKStatisticsQueryHandler::Invoke(HealthKit.HKStatisticsQuery,HealthKit.HKStatistics,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKStoreSampleAddedCallback::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKVerifiableClinicalRecordQueryResultHandler::Invoke(HealthKit.HKVerifiableClinicalRecordQuery,Foundation.NSArray`1<HealthKit.HKVerifiableClinicalRecord>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKWorkoutBuilderCompletionHandler::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKWorkoutRouteBuilderAddMetadataHandler::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHKWorkoutRouteBuilderDataHandler::Invoke(HealthKit.HKWorkoutRouteQuery,CoreLocation.CLLocation[],System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDHMFetchRoomHandler::Invoke(HomeKit.HMMatterRoom[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDINUIHostedViewControllingConfigureViewHandler::Invoke(System.Boolean,Foundation.NSSet`1<Intents.INParameter>,CoreGraphics.CGSize)",
			"ObjCRuntime.Trampolines/NIDINVoiceShortcutCenterGetVoiceShortcutsHandler::Invoke(Intents.INVoiceShortcut[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDItemProviderDataCompletionHandler::Invoke(Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDITLibMediaEntityEnumerateValuesHandler::Invoke(Foundation.NSString,Foundation.NSObject,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDJSContextExceptionHandler::Invoke(JavaScriptCore.JSContext,JavaScriptCore.JSValue)",
			"ObjCRuntime.Trampolines/NIDJSPromiseCreationExecutor::Invoke(JavaScriptCore.JSValue,JavaScriptCore.JSValue)",
			"ObjCRuntime.Trampolines/NIDLAContextReplyHandler::Invoke(System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDLoadBroadcastingHandler::Invoke(System.String,System.String,AppKit.NSImage)",
			"ObjCRuntime.Trampolines/NIDLoadBroadcastingHandler::Invoke(System.String,System.String,UIKit.UIImage)",
			"ObjCRuntime.Trampolines/NIDLoadInPlaceFileRepresentationHandler::Invoke(Foundation.NSUrl,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDLocalEventHandler::Invoke(AppKit.NSEvent)",
			"ObjCRuntime.Trampolines/NIDMCNearbyServiceAdvertiserInvitationHandler::Invoke(System.Boolean,MultipeerConnectivity.MCSession)",
			"ObjCRuntime.Trampolines/NIDMCSessionNearbyConnectionDataForPeerCompletionHandler::Invoke(Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMDLObjectHandler::Invoke(ModelIO.MDLObject,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDMidiCIProfileChangedHandler::Invoke(CoreMidi.MidiCISession,System.Byte,CoreMidi.MidiCIProfile,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDMidiCIProfileSpecificDataHandler::Invoke(CoreMidi.MidiCISession,System.Byte,CoreMidi.MidiCIProfile,Foundation.NSData)",
			"ObjCRuntime.Trampolines/NIDMidiCISessionDisconnectHandler::Invoke(CoreMidi.MidiCISession,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMKDirectionsHandler::Invoke(MapKit.MKDirectionsResponse,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMKETAHandler::Invoke(MapKit.MKETAResponse,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMKLocalSearchCompletionHandler::Invoke(MapKit.MKLocalSearchResponse,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMKMapSnapshotCompletionHandler::Invoke(MapKit.MKMapSnapshot,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMKTileOverlayLoadTileCompletionHandler::Invoke(Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMLCGraphCompletionHandler::Invoke(MLCompute.MLCTensor,Foundation.NSError,System.Double)",
			"ObjCRuntime.Trampolines/NIDMPMediaItemEnumerator::Invoke(System.String,Foundation.NSObject,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDMPSAccelerationStructureCompletionHandler::Invoke(MetalPerformanceShaders.MPSAccelerationStructure)",
			"ObjCRuntime.Trampolines/NIDMPSCopyAllocator::Invoke(MetalPerformanceShaders.MPSKernel,Foundation.NSObject,Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDMPSGradientNodeHandler::Invoke(MetalPerformanceShaders.MPSNNFilterNode,MetalPerformanceShaders.MPSNNFilterNode,MetalPerformanceShaders.MPSNNImageNode,MetalPerformanceShaders.MPSNNImageNode)",
			"ObjCRuntime.Trampolines/NIDMPSGraphCompletionHandler::Invoke(Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMPSGraphExecutableCompletionHandler::Invoke(MetalPerformanceShadersGraph.MPSGraphTensorData[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMPSGraphExecutableScheduledHandler::Invoke(MetalPerformanceShadersGraph.MPSGraphTensorData[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMPSGraphForLoopBodyBlock::Invoke(MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensor[])",
			"ObjCRuntime.Trampolines/NIDMPSGraphScheduledHandler::Invoke(Foundation.NSDictionary`2<MetalPerformanceShadersGraph.MPSGraphTensor,MetalPerformanceShadersGraph.MPSGraphTensorData>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMPSGraphWhileBeforeBlock::Invoke(MetalPerformanceShadersGraph.MPSGraphTensor[],Foundation.NSMutableArray`1<MetalPerformanceShadersGraph.MPSGraphTensor>)",
			"ObjCRuntime.Trampolines/NIDMTKTextureLoaderArrayCallback::Invoke(Metal.IMTLTexture[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMTKTextureLoaderCallback::Invoke(Metal.IMTLTexture,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMTLNewComputePipelineStateWithReflectionCompletionHandler::Invoke(Metal.IMTLComputePipelineState,Metal.MTLComputePipelineReflection,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMTLNewRenderPipelineStateWithReflectionCompletionHandler::Invoke(Metal.IMTLRenderPipelineState,Metal.MTLRenderPipelineReflection,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDMTLSharedEventNotificationBlock::Invoke(Metal.IMTLSharedEvent,System.UInt64)",
			"ObjCRuntime.Trampolines/NIDNEDatagramRead::Invoke(Foundation.NSData[],NetworkExtension.NWEndpoint[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNEFilterPacketHandler::Invoke(NetworkExtension.NEFilterPacketContext,System.IntPtr,NetworkExtension.NETrafficDirection,System.IntPtr,System.UIntPtr)",
			"ObjCRuntime.Trampolines/NIDNEHotspotHelperHandler::Invoke(NetworkExtension.NEHotspotHelperCommand)",
			"ObjCRuntime.Trampolines/NIDNFCFeliCaPollingCompletionHandler::Invoke(Foundation.NSData,Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNFCFeliCaReadWithoutEncryptionCompletionHandler::Invoke(System.IntPtr,System.IntPtr,Foundation.NSData[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNFCFeliCaRequestServiceV2CompletionHandler::Invoke(System.IntPtr,System.IntPtr,CoreNFC.NFCFeliCaEncryptionId,Foundation.NSData[],Foundation.NSData[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNFCFeliCaRequestSpecificationVersionCompletionHandler::Invoke(System.IntPtr,System.IntPtr,Foundation.NSData,Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNFCFeliCaStatus1Status2CompletionHandler::Invoke(System.IntPtr,System.IntPtr,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNFCGetSystemInfoCompletionHandler::Invoke(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNFCIso15693TagGetMultipleBlockSecurityStatusCallback::Invoke(Foundation.NSNumber[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNFCIso15693TagGetSystemInfoAndUidCallback::Invoke(Foundation.NSData,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNFCIso15693TagReadMultipleBlocksCallback::Invoke(Foundation.NSData[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNFCIso15693TagResponseCallback::Invoke(CoreNFC.NFCIso15693ResponseFlag,Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNFCIso7816SendCompletionHandler::Invoke(Foundation.NSData,System.Byte,System.Byte,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNFCQueryNdefStatusCompletionHandler::Invoke(CoreNFC.NFCNdefStatus,System.UIntPtr,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNLTaggerEnumerateTagsContinuationHandler::Invoke(Foundation.NSString,Foundation.NSRange,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSApplicationEnumerateWindowsHandler::Invoke(AppKit.NSWindow,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSAttributedRangeCallback::Invoke(Foundation.NSDictionary,Foundation.NSRange,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSAttributedStringCallback::Invoke(Foundation.NSObject,Foundation.NSRange,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSAttributedStringCompletionHandler::Invoke(Foundation.NSAttributedString,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSBatchInsertRequestDictionaryHandler::Invoke(Foundation.NSMutableDictionary)",
			"ObjCRuntime.Trampolines/NIDNSBatchInsertRequestManagedObjectHandler::Invoke(CoreData.NSManagedObject)",
			"ObjCRuntime.Trampolines/NIDNSCollectionLayoutGroupCustomItemProvider::Invoke(AppKit.INSCollectionLayoutEnvironment)",
			"ObjCRuntime.Trampolines/NIDNSCollectionLayoutGroupCustomItemProvider::Invoke(UIKit.INSCollectionLayoutEnvironment)",
			"ObjCRuntime.Trampolines/NIDNSCollectionLayoutSectionVisibleItemsInvalidationHandler::Invoke(AppKit.INSCollectionLayoutVisibleItem[],CoreGraphics.CGPoint,AppKit.INSCollectionLayoutEnvironment)",
			"ObjCRuntime.Trampolines/NIDNSCollectionLayoutSectionVisibleItemsInvalidationHandler::Invoke(UIKit.INSCollectionLayoutVisibleItem[],CoreGraphics.CGPoint,UIKit.INSCollectionLayoutEnvironment)",
			"ObjCRuntime.Trampolines/NIDNSCollectionViewCompositionalLayoutSectionProvider::Invoke(System.IntPtr,AppKit.INSCollectionLayoutEnvironment)",
			"ObjCRuntime.Trampolines/NIDNSCollectionViewDiffableDataSourceItemProvider::Invoke(AppKit.NSCollectionView,Foundation.NSIndexPath,Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDNSCollectionViewDiffableDataSourceSupplementaryViewProvider::Invoke(AppKit.NSCollectionView,System.String,Foundation.NSIndexPath)",
			"ObjCRuntime.Trampolines/NIDNSComparator::Invoke(Foundation.NSObject,Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDNSDocumentControllerOpenPanelWithCompletionHandler::Invoke(Foundation.NSArray)",
			"ObjCRuntime.Trampolines/NIDNSDocumentLockCompletionHandler::Invoke(Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSDocumentMoveToUrlCompletionHandler::Invoke(Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSDocumentUnlockCompletionHandler::Invoke(Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSDraggingEnumerator::Invoke(AppKit.NSDraggingItem,System.IntPtr,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSEnumerateErrorHandler::Invoke(Foundation.NSUrl,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSEnumerateLinguisticTagsEnumerator::Invoke(Foundation.NSString,Foundation.NSRange,Foundation.NSRange,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSErrorUserInfoValueProvider::Invoke(Foundation.NSError,Foundation.NSString)",
			"ObjCRuntime.Trampolines/NIDNSExpressionCallbackHandler::Invoke(Foundation.NSObject,Foundation.NSExpression[],Foundation.NSMutableDictionary)",
			"ObjCRuntime.Trampolines/NIDNSFileCoordinatorWorkerRW::Invoke(Foundation.NSUrl,Foundation.NSUrl)",
			"ObjCRuntime.Trampolines/NIDNSFileProviderCreateOrModifyItemCompletionHandler::Invoke(FileProvider.INSFileProviderItem,FileProvider.NSFileProviderItemFields,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSFileProviderExtensionFetchThumbnailsHandler::Invoke(Foundation.NSString,Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSFileProviderFetchContentsCompletionHandler::Invoke(Foundation.NSUrl,FileProvider.INSFileProviderItem,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSFileProviderGetIdentifierHandler::Invoke(Foundation.NSString,Foundation.NSString,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSFileProviderPartialContentFetchingCompletionHandler::Invoke(Foundation.NSUrl,FileProvider.INSFileProviderItem,Foundation.NSRange,FileProvider.NSFileProviderMaterializationFlags,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSFileProviderPerThumbnailCompletionHandler::Invoke(Foundation.NSString,Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSFileVersionNonlocalVersionsCompletionHandler::Invoke(Foundation.NSFileVersion[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSItemProviderCompletionHandler::Invoke(Foundation.INSSecureCoding,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSItemProviderLoadHandler::Invoke(Foundation.NSItemProviderCompletionHandler,ObjCRuntime.Class,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDNSLingusticEnumerator::Invoke(Foundation.NSString,Foundation.NSRange,Foundation.NSRange,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSMatchEnumerator::Invoke(Foundation.NSTextCheckingResult,Foundation.NSMatchingFlags,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSMetadataQueryEnumerationCallback::Invoke(Foundation.NSObject,System.UIntPtr,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSPersistentCloudKitContainerAcceptShareInvitationsHandler::Invoke(Foundation.NSArray`1<CloudKit.CKShareMetadata>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSPersistentCloudKitContainerFetchParticipantsMatchingLookupInfosHandler::Invoke(Foundation.NSArray`1<CloudKit.CKShareParticipant>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSPersistentCloudKitContainerPersistUpdatedShareHandler::Invoke(CloudKit.CKShare,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSPersistentCloudKitContainerPurgeObjectsAndRecordsInZoneHandler::Invoke(CloudKit.CKRecordZoneID,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSPersistentCloudKitContainerShareManagedObjectsHandler::Invoke(Foundation.NSSet`1<CoreData.NSManagedObjectID>,CloudKit.CKShare,CloudKit.CKContainer,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSPredicateEvaluator::Invoke(Foundation.NSObject,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDNSSetEnumerator::Invoke(Foundation.NSObject,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSStoryboardControllerCreator::Invoke(Foundation.NSCoder)",
			"ObjCRuntime.Trampolines/NIDNSTableViewDiffableDataSourceCellProvider::Invoke(AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr,Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDNSTableViewDiffableDataSourceRowProvider::Invoke(AppKit.NSTableView,System.IntPtr,Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDNSTableViewDiffableDataSourceSectionHeaderViewProvider::Invoke(AppKit.NSTableView,System.IntPtr,Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDNSTableViewRowHandler::Invoke(AppKit.NSTableRowView,System.IntPtr)",
			"ObjCRuntime.Trampolines/NIDNSTextLayoutEnumerateLineFragments::Invoke(CoreGraphics.CGRect,CoreGraphics.CGRect,AppKit.NSTextContainer,Foundation.NSRange,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSTextLayoutEnumerateLineFragments::Invoke(CoreGraphics.CGRect,CoreGraphics.CGRect,UIKit.NSTextContainer,Foundation.NSRange,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSTextLayoutManagerEnumerateRenderingAttributesDelegate::Invoke(AppKit.NSTextLayoutManager,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,AppKit.NSTextRange)",
			"ObjCRuntime.Trampolines/NIDNSTextLayoutManagerEnumerateRenderingAttributesDelegate::Invoke(UIKit.NSTextLayoutManager,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,UIKit.NSTextRange)",
			"ObjCRuntime.Trampolines/NIDNSTextLayoutManagerEnumerateTextSegmentsDelegate::Invoke(AppKit.NSTextRange,CoreGraphics.CGRect,System.Runtime.InteropServices.NFloat,AppKit.NSTextContainer)",
			"ObjCRuntime.Trampolines/NIDNSTextLayoutManagerEnumerateTextSegmentsDelegate::Invoke(UIKit.NSTextRange,CoreGraphics.CGRect,System.Runtime.InteropServices.NFloat,UIKit.NSTextContainer)",
			"ObjCRuntime.Trampolines/NIDNSTextSelectionDataSourceEnumerateCaretOffsetsDelegate::Invoke(System.Runtime.InteropServices.NFloat,AppKit.INSTextLocation,System.Boolean,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSTextSelectionDataSourceEnumerateCaretOffsetsDelegate::Invoke(System.Runtime.InteropServices.NFloat,UIKit.INSTextLocation,System.Boolean,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSTextSelectionDataSourceEnumerateContainerBoundariesDelegate::Invoke(AppKit.INSTextLocation,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSTextSelectionDataSourceEnumerateContainerBoundariesDelegate::Invoke(UIKit.INSTextLocation,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSTextSelectionDataSourceEnumerateSubstringsDelegate::Invoke(Foundation.NSString,AppKit.NSTextRange,AppKit.NSTextRange,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSTextSelectionDataSourceEnumerateSubstringsDelegate::Invoke(Foundation.NSString,UIKit.NSTextRange,UIKit.NSTextRange,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSUrlConnectionDataResponse::Invoke(Foundation.NSUrlResponse,Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSUrlDownloadSessionResponse::Invoke(Foundation.NSUrl,Foundation.NSUrlResponse,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSUrlSessionDataRead::Invoke(Foundation.NSData,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSUrlSessionResponse::Invoke(Foundation.NSData,Foundation.NSUrlResponse,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSWindowCompletionHandler::Invoke(AppKit.NSWindow,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDNSWindowTrackEventsMatchingCompletionHandler::Invoke(AppKit.NSEvent,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDNSWorkspaceUrlHandler::Invoke(Foundation.NSDictionary,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDOpenDocumentCompletionHandler::Invoke(AppKit.NSDocument,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDPHAssetImageProgressHandler::Invoke(System.Double,Foundation.NSError,System.Boolean&,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDPHAssetVideoProgressHandler::Invoke(System.Double,Foundation.NSError,System.Boolean&,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDPHContentEditingHandler::Invoke(Photos.PHContentEditingInput,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDPHFetchResultEnumerator::Invoke(Foundation.NSObject,System.UIntPtr,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDPHImageDataHandler::Invoke(Foundation.NSData,Foundation.NSString,UIKit.UIImageOrientation,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDPHImageManagerRequestAVAssetHandler::Invoke(AVFoundation.AVAsset,AVFoundation.AVAudioMix,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDPHImageManagerRequestExportHandler::Invoke(AVFoundation.AVAssetExportSession,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDPHImageManagerRequestImageDataHandler::Invoke(Foundation.NSData,System.String,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDPHImageManagerRequestLivePhoto::Invoke(Photos.PHLivePhoto,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDPHImageManagerRequestPlayerHandler::Invoke(AVFoundation.AVPlayerItem,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDPHImageResultHandler::Invoke(AppKit.NSImage,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDPHImageResultHandler::Invoke(UIKit.UIImage,Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDPHLivePhotoFrameProcessingBlock::Invoke(Photos.IPHLivePhotoFrame,Foundation.NSError&)",
			"ObjCRuntime.Trampolines/NIDPKInformationRequestCompletionBlock::Invoke(PassKit.PKBarcodeEventMetadataResponse)",
			"ObjCRuntime.Trampolines/NIDPKInterpolatedPointsEnumeratorHandler::Invoke(PencilKit.PKStrokePoint,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDPKPassLibrarySignDataCompletionHandler::Invoke(Foundation.NSData,Foundation.NSData,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDPKSignatureRequestCompletionBlock::Invoke(PassKit.PKBarcodeEventSignatureResponse)",
			"ObjCRuntime.Trampolines/NIDQLPreviewReplyDataCreationHandler::Invoke(QuickLook.QLPreviewReply,Foundation.NSError&)",
			"ObjCRuntime.Trampolines/NIDQLPreviewReplyDataCreationHandler::Invoke(QuickLookUI.QLPreviewReply,Foundation.NSError&)",
			"ObjCRuntime.Trampolines/NIDQLPreviewReplyDrawingHandler::Invoke(CoreGraphics.CGContext,QuickLook.QLPreviewReply,Foundation.NSError&)",
			"ObjCRuntime.Trampolines/NIDQLPreviewReplyDrawingHandler::Invoke(CoreGraphics.CGContext,QuickLookUI.QLPreviewReply,Foundation.NSError&)",
			"ObjCRuntime.Trampolines/NIDQLPreviewReplyUIDocumentCreationHandler::Invoke(QuickLook.QLPreviewReply,Foundation.NSError&)",
			"ObjCRuntime.Trampolines/NIDQLPreviewReplyUIDocumentCreationHandler::Invoke(QuickLookUI.QLPreviewReply,Foundation.NSError&)",
			"ObjCRuntime.Trampolines/NIDRegisterFileRepresentationCompletionHandler::Invoke(Foundation.NSUrl,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDRegisterObjectRepresentationCompletionHandler::Invoke(Foundation.INSItemProviderWriting,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDSCNActionNodeWithElapsedTimeHandler::Invoke(SceneKit.SCNNode,System.Runtime.InteropServices.NFloat)",
			"ObjCRuntime.Trampolines/NIDSCNAnimationDidStartHandler::Invoke(SceneKit.SCNAnimation,SceneKit.ISCNAnimatable)",
			"ObjCRuntime.Trampolines/NIDSCNAnimationDidStopHandler::Invoke(SceneKit.SCNAnimation,SceneKit.ISCNAnimatable,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDSCNAnimationEventHandler::Invoke(SceneKit.ISCNAnimationProtocol,Foundation.NSObject,System.Boolean)",
			"ObjCRuntime.Trampolines/NIDSCNBindingHandler::Invoke(System.UInt32,System.UInt32,SceneKit.SCNNode,SceneKit.SCNRenderer)",
			"ObjCRuntime.Trampolines/NIDSCNBufferBindingHandler::Invoke(SceneKit.ISCNBufferStream,SceneKit.SCNNode,SceneKit.ISCNShadable,SceneKit.SCNRenderer)",
			"ObjCRuntime.Trampolines/NIDSCNNodeHandler::Invoke(SceneKit.SCNNode,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDSCNNodePredicate::Invoke(SceneKit.SCNNode,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDSCNSceneExportProgressHandler::Invoke(System.Single,Foundation.NSError,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDSCNSceneSourceFilter::Invoke(Foundation.NSObject,Foundation.NSString,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDSCNSceneSourceStatusHandler::Invoke(System.Single,SceneKit.SCNSceneSourceStatus,Foundation.NSError,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDSCNTransformConstraintHandler::Invoke(SceneKit.SCNNode,SceneKit.SCNMatrix4)",
			"ObjCRuntime.Trampolines/NIDSecProtocolChallenge::Invoke(Security.SecProtocolMetadata,Security.SecProtocolChallengeComplete)",
			"ObjCRuntime.Trampolines/NIDSecProtocolChallengeComplete::Invoke(Security.SecIdentity2)",
			"ObjCRuntime.Trampolines/NIDSecProtocolKeyUpdate::Invoke(Security.SecProtocolMetadata,System.Action)",
			"ObjCRuntime.Trampolines/NIDSecProtocolVerify::Invoke(Security.SecProtocolMetadata,Security.SecTrust2,Security.SecProtocolVerifyComplete)",
			"ObjCRuntime.Trampolines/NIDSFAuthenticationCompletionHandler::Invoke(Foundation.NSUrl,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDSFExtensionValidationHandler::Invoke(System.Boolean,Foundation.NSString)",
			"ObjCRuntime.Trampolines/NIDSKActionDurationHandler::Invoke(SpriteKit.SKNode,System.Runtime.InteropServices.NFloat)",
			"ObjCRuntime.Trampolines/NIDSKArcadeServiceRegisterHandler::Invoke(Foundation.NSData,System.UInt32,Foundation.NSData,System.UInt32,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDSKArcadeServiceSubscriptionHandler::Invoke(Foundation.NSData,System.UInt32,Foundation.NSData,System.UInt32,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDSKNodeChildEnumeratorHandler::Invoke(SpriteKit.SKNode,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDSKPhysicsWorldBodiesAlongRayStartEnumeratorHandler::Invoke(SpriteKit.SKPhysicsBody,CoreGraphics.CGPoint,CoreGraphics.CGVector,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDSKPhysicsWorldBodiesEnumeratorHandler::Invoke(SpriteKit.SKPhysicsBody,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDSKTextureAtlasLoadCallback::Invoke(Foundation.NSError,SpriteKit.SKTextureAtlas)",
			"ObjCRuntime.Trampolines/NIDTWRequestHandler::Invoke(Foundation.NSData,Foundation.NSHttpUrlResponse,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDUIAccessibilityCustomActionHandler::Invoke(UIKit.UIAccessibilityCustomAction)",
			"ObjCRuntime.Trampolines/NIDUIAccessibilityCustomRotorSearch::Invoke(UIKit.UIAccessibilityCustomRotorSearchPredicate)",
			"ObjCRuntime.Trampolines/NIDUIActionHandler::Invoke(UIKit.UIAction)",
			"ObjCRuntime.Trampolines/NIDUIActivityItemsConfigurationMetadataProviderHandler::Invoke(Foundation.NSString)",
			"ObjCRuntime.Trampolines/NIDUIActivityItemsConfigurationPerItemMetadataProviderHandler::Invoke(System.IntPtr,Foundation.NSString)",
			"ObjCRuntime.Trampolines/NIDUIActivityItemsConfigurationPreviewProviderHandler::Invoke(System.IntPtr,Foundation.NSString,CoreGraphics.CGSize)",
			"ObjCRuntime.Trampolines/NIDUIActivityViewControllerCompletion::Invoke(Foundation.NSString,System.Boolean,Foundation.NSExtensionItem[],Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDUIBandSelectionInteractionShouldBeginHandler::Invoke(UIKit.UIBandSelectionInteraction,CoreGraphics.CGPoint)",
			"ObjCRuntime.Trampolines/NIDUIButtonConfigurationUpdateHandler::Invoke(UIKit.UIButton)",
			"ObjCRuntime.Trampolines/NIDUIButtonPointerStyleProvider::Invoke(UIKit.UIButton,UIKit.UIPointerEffect,UIKit.UIPointerShape)",
			"ObjCRuntime.Trampolines/NIDUICloudSharingControllerPreparationCompletionHandler::Invoke(CloudKit.CKShare,CloudKit.CKContainer,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDUICloudSharingControllerPreparationHandler::Invoke(UIKit.UICloudSharingController,UIKit.UICloudSharingControllerPreparationCompletionHandler)",
			"ObjCRuntime.Trampolines/NIDUICollectionLayoutListItemSeparatorHandler::Invoke(Foundation.NSIndexPath,UIKit.UIListSeparatorConfiguration)",
			"ObjCRuntime.Trampolines/NIDUICollectionLayoutListSwipeActionsConfigurationProvider::Invoke(Foundation.NSIndexPath)",
			"ObjCRuntime.Trampolines/NIDUICollectionViewCellConfigurationUpdateHandler::Invoke(UIKit.UICollectionViewCell,UIKit.UICellConfigurationState)",
			"ObjCRuntime.Trampolines/NIDUICollectionViewCellRegistrationConfigurationHandler::Invoke(UIKit.UICollectionViewCell,Foundation.NSIndexPath,Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDUICollectionViewCompositionalLayoutSectionProvider::Invoke(System.IntPtr,UIKit.INSCollectionLayoutEnvironment)",
			"ObjCRuntime.Trampolines/NIDUICollectionViewDiffableDataSourceCellProvider::Invoke(UIKit.UICollectionView,Foundation.NSIndexPath,Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDUICollectionViewDiffableDataSourceSupplementaryViewProvider::Invoke(UIKit.UICollectionView,System.String,Foundation.NSIndexPath)",
			"ObjCRuntime.Trampolines/NIDUICollectionViewSupplementaryRegistrationConfigurationHandler::Invoke(UIKit.UICollectionReusableView,System.String,Foundation.NSIndexPath)",
			"ObjCRuntime.Trampolines/NIDUIConfigurationColorTransformerHandler::Invoke(UIKit.UIColor)",
			"ObjCRuntime.Trampolines/NIDUIConfigurationTextAttributesTransformerHandler::Invoke(Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDUIContextualActionHandler::Invoke(UIKit.UIContextualAction,UIKit.UIView,UIKit.UIContextualActionCompletionHandler)",
			"ObjCRuntime.Trampolines/NIDUIControlEnumerateEventsIteratorHandler::Invoke(UIKit.UIAction,Foundation.NSObject,ObjCRuntime.Selector,UIKit.UIControlEvent,System.Boolean&)",
			"ObjCRuntime.Trampolines/NIDUIFieldCustomEvaluator::Invoke(UIKit.UIFieldBehavior,CoreGraphics.CGPoint,CoreGraphics.CGVector,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Double)",
			"ObjCRuntime.Trampolines/NIDUIPreviewHandler::Invoke(UIKit.UIPreviewAction,UIKit.UIViewController)",
			"ObjCRuntime.Trampolines/NIDUIPrinterPickerCompletionHandler::Invoke(UIKit.UIPrinterPickerController,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDUIPrintInteractionCompletionHandler::Invoke(UIKit.UIPrintInteractionController,System.Boolean,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDUIScreenshotServiceDelegatePdfHandler::Invoke(Foundation.NSData,System.IntPtr,CoreGraphics.CGRect)",
			"ObjCRuntime.Trampolines/NIDUIStoryboardViewControllerCreator::Invoke(Foundation.NSCoder)",
			"ObjCRuntime.Trampolines/NIDUITableViewCellConfigurationUpdateHandler::Invoke(UIKit.UITableViewCell,UIKit.UICellConfigurationState)",
			"ObjCRuntime.Trampolines/NIDUITableViewDiffableDataSourceCellProvider::Invoke(UIKit.UITableView,Foundation.NSIndexPath,Foundation.NSObject)",
			"ObjCRuntime.Trampolines/NIDUITableViewHeaderFooterViewConfigurationUpdateHandler::Invoke(UIKit.UITableViewHeaderFooterView,UIKit.UIViewConfigurationState)",
			"ObjCRuntime.Trampolines/NIDUITextAttributesConversionHandler::Invoke(Foundation.NSDictionary)",
			"ObjCRuntime.Trampolines/NIDUIWindowSceneActivationActionConfigurationProvider::Invoke(UIKit.UIWindowSceneActivationAction)",
			"ObjCRuntime.Trampolines/NIDUIWindowSceneActivationInteractionConfigurationProvider::Invoke(UIKit.UIWindowSceneActivationInteraction,CoreGraphics.CGPoint)",
			"ObjCRuntime.Trampolines/NIDVirtualConferenceHandler::Invoke(EventKit.EKVirtualConferenceDescriptor,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDVirtualConferenceRoomTypeHandler::Invoke(Foundation.NSArray`1<EventKit.EKVirtualConferenceRoomTypeDescriptor>,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDVNRequestCompletionHandler::Invoke(Vision.VNRequest,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDVNRequestProgressHandler::Invoke(Vision.VNRequest,System.Double,Foundation.NSError)",
			"ObjCRuntime.Trampolines/NIDWCSessionReplyDataHandler::Invoke(Foundation.NSData)",
			"ObjCRuntime.Trampolines/NIDWCSessionReplyHandler::Invoke(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"ObjCRuntime.Trampolines/NIDWKJavascriptEvaluationResult::Invoke(Foundation.NSObject,Foundation.NSError)",
			"ObjCRuntime.Trampolines/SDAttributedStringForCandidateHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,System.IntPtr)",
			"ObjCRuntime.Trampolines/SDAVAudioConverterInputHandler::Invoke(System.IntPtr,System.UInt32,AVFoundation.AVAudioConverterInputStatus&)",
			"ObjCRuntime.Trampolines/SDAVAudioIONodeInputBlock::Invoke(System.IntPtr,System.UInt32)",
			"ObjCRuntime.Trampolines/SDAVAudioSinkNodeReceiverHandler::Invoke(System.IntPtr,AudioToolbox.AudioTimeStamp,System.UInt32,ObjCRuntime.NativeHandle&)",
			"ObjCRuntime.Trampolines/SDAVAudioSourceNodeRenderHandler::Invoke(System.IntPtr,System.Boolean&,AudioToolbox.AudioTimeStamp&,System.UInt32,ObjCRuntime.NativeHandle&)",
			"ObjCRuntime.Trampolines/SDFuncArity1V0::Invoke(System.IntPtr)",
			"ObjCRuntime.Trampolines/SDFuncArity1V1::Invoke(System.IntPtr)",
			"ObjCRuntime.Trampolines/SDFuncArity1V2::Invoke(System.IntPtr)",
			"ObjCRuntime.Trampolines/SDFuncArity1V3::Invoke(System.IntPtr)",
			"ObjCRuntime.Trampolines/SDFuncArity2V0::Invoke(System.IntPtr,System.Double)",
			"ObjCRuntime.Trampolines/SDFuncArity2V1::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDFuncArity2V10::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDFuncArity2V11::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDFuncArity2V12::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDFuncArity2V13::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDFuncArity2V2::Invoke(System.IntPtr,CoreGraphics.CGSize)",
			"ObjCRuntime.Trampolines/SDFuncArity2V5::Invoke(System.IntPtr,CoreGraphics.CGSize)",
			"ObjCRuntime.Trampolines/SDFuncArity2V8::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDFuncArity2V9::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDGCVirtualControllerElementUpdateBlock::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDLocalEventHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDMPSCopyAllocator::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDMPSGraphControlFlowDependencyBlock::Invoke(System.IntPtr)",
			"ObjCRuntime.Trampolines/SDMPSGraphForLoopBodyBlock::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDMPSGraphIfThenElseBlock::Invoke(System.IntPtr)",
			"ObjCRuntime.Trampolines/SDMPSGraphWhileAfterBlock::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDMPSGraphWhileBeforeBlock::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDNSCollectionLayoutGroupCustomItemProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDNSCollectionViewCompositionalLayoutSectionProvider::Invoke(System.IntPtr,System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDNSCollectionViewDiffableDataSourceItemProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDNSCollectionViewDiffableDataSourceSupplementaryViewProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDNSDraggingItemImagesContentProvider::Invoke(System.IntPtr)",
			"ObjCRuntime.Trampolines/SDNSErrorUserInfoValueProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDNSExpressionCallbackHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDNSStoryboardControllerCreator::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDNSTableViewDiffableDataSourceCellProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle,System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDNSTableViewDiffableDataSourceRowProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDNSTableViewDiffableDataSourceSectionHeaderViewProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDPHLivePhotoFrameProcessingBlock::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle&)",
			"ObjCRuntime.Trampolines/SDQLPreviewReplyDataCreationHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle&)",
			"ObjCRuntime.Trampolines/SDQLPreviewReplyDrawingHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle&)",
			"ObjCRuntime.Trampolines/SDQLPreviewReplyUIDocumentCreationHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle&)",
			"ObjCRuntime.Trampolines/SDRegisterDataRepresentationLoadHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDRegisterFileRepresentationLoadHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDRegisterObjectRepresentationLoadHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUIAccessibilityCustomRotorSearch::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUIActivityItemsConfigurationMetadataProviderHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUIActivityItemsConfigurationPerItemMetadataProviderHandler::Invoke(System.IntPtr,System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUIActivityItemsConfigurationPreviewProviderHandler::Invoke(System.IntPtr,System.IntPtr,ObjCRuntime.NativeHandle,CoreGraphics.CGSize)",
			"ObjCRuntime.Trampolines/SDUIButtonPointerStyleProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUICollectionLayoutListItemSeparatorHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUICollectionLayoutListSwipeActionsConfigurationProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUICollectionViewCompositionalLayoutSectionProvider::Invoke(System.IntPtr,System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUICollectionViewDiffableDataSourceCellProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUICollectionViewDiffableDataSourceSupplementaryViewProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUIConfigurationColorTransformerHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUIConfigurationTextAttributesTransformerHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUIContextMenuActionProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUIContextMenuContentPreviewProvider::Invoke(System.IntPtr)",
			"ObjCRuntime.Trampolines/SDUIScreenshotServiceDelegatePdfHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,System.IntPtr,CoreGraphics.CGRect)",
			"ObjCRuntime.Trampolines/SDUIStoryboardViewControllerCreator::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUITableViewDiffableDataSourceCellProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUITextAttributesConversionHandler::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUIWindowSceneActivationActionConfigurationProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle)",
			"ObjCRuntime.Trampolines/SDUIWindowSceneActivationInteractionConfigurationProvider::Invoke(System.IntPtr,ObjCRuntime.NativeHandle,CoreGraphics.CGPoint)",
			"ObjCRuntime.Trampolines/SDValueDescriptionProviderHandler::Invoke(System.IntPtr,System.Double)",
			"OpenGL.CGLContext::set_CurrentContext(OpenGL.CGLContext)",
			"OpenGLES.EAGLContext::.ctor(OpenGLES.EAGLRenderingAPI,OpenGLES.EAGLSharegroup)",
			"OpenGLES.EAGLContext::RenderBufferStorage(System.UIntPtr,CoreAnimation.CAEAGLLayer)",
			"OpenGLES.EAGLContext::SetCurrentContext(OpenGLES.EAGLContext)",
			"OpenGLES.EAGLContext::TexImage(IOSurface.IOSurface,System.UIntPtr,System.UIntPtr,System.UInt32,System.UInt32,System.UIntPtr,System.UIntPtr,System.UInt32)",
			"OpenGLES.EAGLDrawableWrapper::set_DrawableProperties(Foundation.NSDictionary)",
			"OSLog.OSLogMessageComponent::.ctor(Foundation.NSCoder)",
			"OSLog.OSLogMessageComponent::EncodeTo(Foundation.NSCoder)",
			"OSLog.OSLogStore::CreateStore(Foundation.NSUrl,Foundation.NSError&)",
			"OSLog.OSLogStore::GetEntriesEnumerator(OSLog.OSLogEnumeratorOptions,OSLog.OSLogPosition,Foundation.NSPredicate,Foundation.NSError&)",
			"OSLog.OSLogStore::GetPosition(Foundation.NSDate)",
			"PassKit.PKAddPassButton::.ctor(Foundation.NSCoder)",
			"PassKit.PKAddPassesViewController::.ctor(Foundation.NSCoder)",
			"PassKit.PKAddPassesViewController::.ctor(PassKit.PKPass)",
			"PassKit.PKAddPassesViewController::.ctor(System.String,Foundation.NSBundle)",
			"PassKit.PKAddPassesViewControllerDelegate_Extensions::Finished(PassKit.IPKAddPassesViewControllerDelegate,PassKit.PKAddPassesViewController)",
			"PassKit.PKAddPaymentPassRequest::.ctor(Foundation.NSCoder)",
			"PassKit.PKAddPaymentPassRequest::EncodeTo(Foundation.NSCoder)",
			"PassKit.PKAddPaymentPassRequest::set_ActivationData(Foundation.NSData)",
			"PassKit.PKAddPaymentPassRequest::set_EncryptedPassData(Foundation.NSData)",
			"PassKit.PKAddPaymentPassRequest::set_EphemeralPublicKey(Foundation.NSData)",
			"PassKit.PKAddPaymentPassRequest::set_WrappedKey(Foundation.NSData)",
			"PassKit.PKAddPaymentPassRequestConfiguration::.ctor(Foundation.NSCoder)",
			"PassKit.PKAddPaymentPassRequestConfiguration::.ctor(Foundation.NSString)",
			"PassKit.PKAddPaymentPassRequestConfiguration::EncodeTo(Foundation.NSCoder)",
			"PassKit.PKAddPaymentPassRequestConfiguration::set_ProductIdentifiers(Foundation.NSSet`1<Foundation.NSString>)",
			"PassKit.PKAddPaymentPassViewController::.ctor(Foundation.NSCoder)",
			"PassKit.PKAddPaymentPassViewController::.ctor(PassKit.PKAddPaymentPassRequestConfiguration,PassKit.IPKAddPaymentPassViewControllerDelegate)",
			"PassKit.PKAddPaymentPassViewControllerDelegateWrapper::DidFinishAddingPaymentPass(PassKit.PKAddPaymentPassViewController,PassKit.PKPaymentPass,Foundation.NSError)",
			"PassKit.PKAddPaymentPassViewControllerDelegateWrapper::GenerateRequestWithCertificateChain(PassKit.PKAddPaymentPassViewController,Foundation.NSData[],Foundation.NSData,Foundation.NSData,System.Action`1<PassKit.PKAddPaymentPassRequest>)",
			"PassKit.PKAddSecureElementPassViewController::.ctor(Foundation.NSCoder)",
			"PassKit.PKAddSecureElementPassViewController::.ctor(PassKit.PKAddSecureElementPassConfiguration,PassKit.IPKAddSecureElementPassViewControllerDelegate)",
			"PassKit.PKAddSecureElementPassViewController::CanAddSecureElementPass(PassKit.PKAddSecureElementPassConfiguration)",
			"PassKit.PKAddSecureElementPassViewControllerDelegateWrapper::DidFinishAddingSecureElementPass(PassKit.PKAddSecureElementPassViewController,PassKit.PKSecureElementPass,Foundation.NSError)",
			"PassKit.PKAddSecureElementPassViewControllerDelegateWrapper::DidFinishAddingSecureElementPasses(PassKit.PKAddSecureElementPassViewController,PassKit.PKSecureElementPass[],Foundation.NSError)",
			"PassKit.PKBarcodeEventMetadataResponse::.ctor(Foundation.NSData)",
			"PassKit.PKBarcodeEventMetadataResponse::set_PaymentInformation(Foundation.NSData)",
			"PassKit.PKBarcodeEventSignatureResponse::.ctor(Foundation.NSData)",
			"PassKit.PKBarcodeEventSignatureResponse::set_SignedData(Foundation.NSData)",
			"PassKit.PKContact::.ctor(Foundation.NSCoder)",
			"PassKit.PKContact::EncodeTo(Foundation.NSCoder)",
			"PassKit.PKContact::set_Name(Foundation.NSPersonNameComponents)",
			"PassKit.PKContact::set_PhoneNumber(Contacts.CNPhoneNumber)",
			"PassKit.PKContact::set_PostalAddress(Contacts.CNPostalAddress)",
			"PassKit.PKDateComponentsRange::.ctor(Foundation.NSCoder)",
			"PassKit.PKDateComponentsRange::.ctor(Foundation.NSDateComponents,Foundation.NSDateComponents)",
			"PassKit.PKDateComponentsRange::Copy(Foundation.NSZone)",
			"PassKit.PKDateComponentsRange::EncodeTo(Foundation.NSCoder)",
			"PassKit.PKDeferredPaymentSummaryItem::set_DeferredDate(Foundation.NSDate)",
			"PassKit.PKDisbursementAuthorizationController::.ctor(PassKit.PKDisbursementRequest,PassKit.IPKDisbursementAuthorizationControllerDelegate)",
			"PassKit.PKDisbursementAuthorizationControllerDelegateWrapper::DidAuthorize(PassKit.PKDisbursementAuthorizationController,PassKit.PKDisbursementVoucher)",
			"PassKit.PKDisbursementAuthorizationControllerDelegateWrapper::DidFinish(PassKit.PKDisbursementAuthorizationController)",
			"PassKit.PKDisbursementRequest::set_Amount(Foundation.NSDecimalNumber)",
			"PassKit.PKIssuerProvisioningExtensionHandler::GenerateAddPaymentPassRequest(System.String,PassKit.PKAddPaymentPassRequestConfiguration,Foundation.NSData[],Foundation.NSData,Foundation.NSData,System.Action`1<PassKit.PKAddPaymentPassRequest>)",
			"PassKit.PKIssuerProvisioningExtensionPaymentPassEntry::.ctor(System.String,System.String,CoreGraphics.CGImage,PassKit.PKAddPaymentPassRequestConfiguration)",
			"PassKit.PKObject::.ctor(Foundation.NSCoder)",
			"PassKit.PKObject::Copy(Foundation.NSZone)",
			"PassKit.PKObject::EncodeTo(Foundation.NSCoder)",
			"PassKit.PKPass::.ctor(Foundation.NSCoder)",
			"PassKit.PKPass::.ctor(Foundation.NSData,Foundation.NSError&)",
			"PassKit.PKPass::Copy(Foundation.NSZone)",
			"PassKit.PKPass::EncodeTo(Foundation.NSCoder)",
			"PassKit.PKPass::GetLocalizedValue(Foundation.NSString)",
			"PassKit.PKPassLibrary::ActivatePaymentPass(PassKit.PKPaymentPass,Foundation.NSData,System.Action`2<System.Boolean,Foundation.NSError>)",
			"PassKit.PKPassLibrary::ActivatePaymentPass(PassKit.PKPaymentPass,System.String,System.Action`2<System.Boolean,Foundation.NSError>)",
			"PassKit.PKPassLibrary::ActivateSecureElementPass(PassKit.PKSecureElementPass,Foundation.NSData,System.Action`2<System.Boolean,Foundation.NSError>)",
			"PassKit.PKPassLibrary::Contains(PassKit.PKPass)",
			"PassKit.PKPassLibrary::GetServiceProviderData(PassKit.PKSecureElementPass,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"PassKit.PKPassLibrary::PresentPaymentPass(PassKit.PKPaymentPass)",
			"PassKit.PKPassLibrary::PresentSecureElementPass(PassKit.PKSecureElementPass)",
			"PassKit.PKPassLibrary::Remove(PassKit.PKPass)",
			"PassKit.PKPassLibrary::Replace(PassKit.PKPass)",
			"PassKit.PKPassLibrary::SignData(Foundation.NSData,PassKit.PKSecureElementPass,PassKit.PKPassLibrarySignDataCompletionHandler)",
			"PassKit.PKPaymentAuthorizationController::.ctor(PassKit.PKPaymentRequest)",
			"PassKit.PKPaymentAuthorizationControllerDelegate_Extensions::DidAuthorizePayment(PassKit.IPKPaymentAuthorizationControllerDelegate,PassKit.PKPaymentAuthorizationController,PassKit.PKPayment,System.Action`1<PassKit.PKPaymentAuthorizationResult>)",
			"PassKit.PKPaymentAuthorizationControllerDelegate_Extensions::DidAuthorizePayment(PassKit.IPKPaymentAuthorizationControllerDelegate,PassKit.PKPaymentAuthorizationController,PassKit.PKPayment,System.Action`1<PassKit.PKPaymentAuthorizationStatus>)",
			"PassKit.PKPaymentAuthorizationControllerDelegate_Extensions::DidChangeCouponCode(PassKit.IPKPaymentAuthorizationControllerDelegate,PassKit.PKPaymentAuthorizationController,System.String,System.Action`1<PassKit.PKPaymentRequestCouponCodeUpdate>)",
			"PassKit.PKPaymentAuthorizationControllerDelegate_Extensions::DidRequestMerchantSessionUpdate(PassKit.IPKPaymentAuthorizationControllerDelegate,PassKit.PKPaymentAuthorizationController,System.Action`1<PassKit.PKPaymentRequestMerchantSessionUpdate>)",
			"PassKit.PKPaymentAuthorizationControllerDelegate_Extensions::DidSelectPaymentMethod(PassKit.IPKPaymentAuthorizationControllerDelegate,PassKit.PKPaymentAuthorizationController,PassKit.PKPaymentMethod,System.Action`1<PassKit.PKPaymentRequestPaymentMethodUpdate>)",
			"PassKit.PKPaymentAuthorizationControllerDelegate_Extensions::DidSelectPaymentMethod(PassKit.IPKPaymentAuthorizationControllerDelegate,PassKit.PKPaymentAuthorizationController,PassKit.PKPaymentMethod,System.Action`1<PassKit.PKPaymentSummaryItem[]>)",
			"PassKit.PKPaymentAuthorizationControllerDelegate_Extensions::DidSelectShippingContact(PassKit.IPKPaymentAuthorizationControllerDelegate,PassKit.PKPaymentAuthorizationController,PassKit.PKContact,System.Action`1<PassKit.PKPaymentRequestShippingContactUpdate>)",
			"PassKit.PKPaymentAuthorizationControllerDelegate_Extensions::DidSelectShippingContact(PassKit.IPKPaymentAuthorizationControllerDelegate,PassKit.PKPaymentAuthorizationController,PassKit.PKContact,System.Action`3<PassKit.PKPaymentAuthorizationStatus,PassKit.PKShippingMethod[],PassKit.PKPaymentSummaryItem[]>)",
			"PassKit.PKPaymentAuthorizationControllerDelegate_Extensions::DidSelectShippingMethod(PassKit.IPKPaymentAuthorizationControllerDelegate,PassKit.PKPaymentAuthorizationController,PassKit.PKPaymentMethod,System.Action`1<PassKit.PKPaymentRequestPaymentMethodUpdate>)",
			"PassKit.PKPaymentAuthorizationControllerDelegate_Extensions::DidSelectShippingMethod(PassKit.IPKPaymentAuthorizationControllerDelegate,PassKit.PKPaymentAuthorizationController,PassKit.PKShippingMethod,System.Action`2<PassKit.PKPaymentAuthorizationStatus,PassKit.PKPaymentSummaryItem[]>)",
			"PassKit.PKPaymentAuthorizationControllerDelegate_Extensions::GetPresentationWindow(PassKit.IPKPaymentAuthorizationControllerDelegate,PassKit.PKPaymentAuthorizationController)",
			"PassKit.PKPaymentAuthorizationControllerDelegate_Extensions::WillAuthorizePayment(PassKit.IPKPaymentAuthorizationControllerDelegate,PassKit.PKPaymentAuthorizationController)",
			"PassKit.PKPaymentAuthorizationControllerDelegateWrapper::DidFinish(PassKit.PKPaymentAuthorizationController)",
			"PassKit.PKPaymentAuthorizationControllerDelegateWrapper::GetPresentationWindow(PassKit.PKPaymentAuthorizationController)",
			"PassKit.PKPaymentAuthorizationViewController::.ctor(Foundation.NSCoder)",
			"PassKit.PKPaymentAuthorizationViewController::.ctor(PassKit.PKPaymentRequest)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegate_Extensions::DidAuthorizePayment(PassKit.IPKPaymentAuthorizationViewControllerDelegate,PassKit.PKPaymentAuthorizationViewController,PassKit.PKPayment,System.Action`1<PassKit.PKPaymentAuthorizationStatus>)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegate_Extensions::DidAuthorizePayment2(PassKit.IPKPaymentAuthorizationViewControllerDelegate,PassKit.PKPaymentAuthorizationViewController,PassKit.PKPayment,System.Action`1<PassKit.PKPaymentAuthorizationResult>)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegate_Extensions::DidChangeCouponCode(PassKit.IPKPaymentAuthorizationViewControllerDelegate,PassKit.PKPaymentAuthorizationViewController,System.String,System.Action`1<PassKit.PKPaymentRequestCouponCodeUpdate>)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegate_Extensions::DidRequestMerchantSessionUpdate(PassKit.IPKPaymentAuthorizationViewControllerDelegate,PassKit.PKPaymentAuthorizationViewController,System.Action`1<PassKit.PKPaymentRequestMerchantSessionUpdate>)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegate_Extensions::DidSelectPaymentMethod(PassKit.IPKPaymentAuthorizationViewControllerDelegate,PassKit.PKPaymentAuthorizationViewController,PassKit.PKPaymentMethod,System.Action`1<PassKit.PKPaymentSummaryItem[]>)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegate_Extensions::DidSelectPaymentMethod2(PassKit.IPKPaymentAuthorizationViewControllerDelegate,PassKit.PKPaymentAuthorizationViewController,PassKit.PKPaymentMethod,System.Action`1<PassKit.PKPaymentRequestPaymentMethodUpdate>)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegate_Extensions::DidSelectShippingAddress(PassKit.IPKPaymentAuthorizationViewControllerDelegate,PassKit.PKPaymentAuthorizationViewController,AddressBook.ABRecord,PassKit.PKPaymentShippingAddressSelected)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegate_Extensions::DidSelectShippingContact(PassKit.IPKPaymentAuthorizationViewControllerDelegate,PassKit.PKPaymentAuthorizationViewController,PassKit.PKContact,PassKit.PKPaymentShippingAddressSelected)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegate_Extensions::DidSelectShippingContact2(PassKit.IPKPaymentAuthorizationViewControllerDelegate,PassKit.PKPaymentAuthorizationViewController,PassKit.PKContact,System.Action`1<PassKit.PKPaymentRequestShippingContactUpdate>)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegate_Extensions::DidSelectShippingMethod(PassKit.IPKPaymentAuthorizationViewControllerDelegate,PassKit.PKPaymentAuthorizationViewController,PassKit.PKShippingMethod,PassKit.PKPaymentShippingMethodSelected)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegate_Extensions::DidSelectShippingMethod2(PassKit.IPKPaymentAuthorizationViewControllerDelegate,PassKit.PKPaymentAuthorizationViewController,PassKit.PKShippingMethod,System.Action`1<PassKit.PKPaymentRequestShippingMethodUpdate>)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegate_Extensions::WillAuthorizePayment(PassKit.IPKPaymentAuthorizationViewControllerDelegate,PassKit.PKPaymentAuthorizationViewController)",
			"PassKit.PKPaymentAuthorizationViewControllerDelegateWrapper::PaymentAuthorizationViewControllerDidFinish(PassKit.PKPaymentAuthorizationViewController)",
			"PassKit.PKPaymentButton::.ctor(Foundation.NSCoder)",
			"PassKit.PKPaymentInformationRequestHandlingWrapper::HandleConfigurationRequest(PassKit.PKBarcodeEventConfigurationRequest,System.Action)",
			"PassKit.PKPaymentInformationRequestHandlingWrapper::HandleInformationRequest(PassKit.PKBarcodeEventMetadataRequest,PassKit.PKInformationRequestCompletionBlock)",
			"PassKit.PKPaymentInformationRequestHandlingWrapper::HandleSignatureRequest(PassKit.PKBarcodeEventSignatureRequest,PassKit.PKSignatureRequestCompletionBlock)",
			"PassKit.PKPaymentMerchantSession::.ctor(Foundation.NSDictionary)",
			"PassKit.PKPaymentMethod::.ctor(Foundation.NSCoder)",
			"PassKit.PKPaymentMethod::EncodeTo(Foundation.NSCoder)",
			"PassKit.PKPaymentPass::.ctor(Foundation.NSCoder)",
			"PassKit.PKPaymentRequest::CreatePaymentBillingAddressInvalidError(Foundation.NSString,System.String)",
			"PassKit.PKPaymentRequest::CreatePaymentContactInvalidError(Foundation.NSString,System.String)",
			"PassKit.PKPaymentRequest::CreatePaymentShippingAddressInvalidError(Foundation.NSString,System.String)",
			"PassKit.PKPaymentRequest::set_ApplicationData(Foundation.NSData)",
			"PassKit.PKPaymentRequest::set_BillingAddress(AddressBook.ABRecord)",
			"PassKit.PKPaymentRequest::set_BillingContact(PassKit.PKContact)",
			"PassKit.PKPaymentRequest::set_ShippingAddress(AddressBook.ABRecord)",
			"PassKit.PKPaymentRequest::set_ShippingContact(PassKit.PKContact)",
			"PassKit.PKPaymentRequest::set_SupportedCountries(Foundation.NSSet`1<Foundation.NSString>)",
			"PassKit.PKPaymentRequest::set_WeakRequiredBillingContactFields(Foundation.NSSet)",
			"PassKit.PKPaymentRequest::set_WeakRequiredShippingContactFields(Foundation.NSSet)",
			"PassKit.PKPaymentRequestMerchantSessionUpdate::.ctor(PassKit.PKPaymentAuthorizationStatus,PassKit.PKPaymentMerchantSession)",
			"PassKit.PKPaymentRequestMerchantSessionUpdate::set_Session(PassKit.PKPaymentMerchantSession)",
			"PassKit.PKPaymentSummaryItem::Create(System.String,Foundation.NSDecimalNumber)",
			"PassKit.PKPaymentSummaryItem::Create(System.String,Foundation.NSDecimalNumber,PassKit.PKPaymentSummaryItemType)",
			"PassKit.PKPaymentSummaryItem::set_Amount(Foundation.NSDecimalNumber)",
			"PassKit.PKRecurringPaymentSummaryItem::set_EndDate(Foundation.NSDate)",
			"PassKit.PKRecurringPaymentSummaryItem::set_StartDate(Foundation.NSDate)",
			"PassKit.PKSecureElementPass::.ctor(Foundation.NSCoder)",
			"PassKit.PKShareablePassMetadata::.ctor(System.String,System.String,CoreGraphics.CGImage,System.String,System.String,System.String,System.String,System.String,System.Boolean)",
			"PassKit.PKShareablePassMetadata::.ctor(System.String,System.String,System.String,CoreGraphics.CGImage,System.String,System.String)",
			"PassKit.PKShippingMethod::set_DateComponentsRange(PassKit.PKDateComponentsRange)",
			"PassKit.PKStoredValuePassBalance::IsEqual(PassKit.PKStoredValuePassBalance)",
			"PassKit.PKStoredValuePassProperties::GetPassProperties(PassKit.PKPass)",
			"PassKit.PKSuicaPassProperties::GetPassProperties(PassKit.PKPass)",
			"PassKit.PKTransitPassProperties::GetPassProperties(PassKit.PKPass)",
			"PdfKit.PdfAction::Copy(Foundation.NSZone)",
			"PdfKit.PdfActionGoTo::.ctor(PdfKit.PdfDestination)",
			"PdfKit.PdfActionGoTo::set_Destination(PdfKit.PdfDestination)",
			"PdfKit.PdfActionRemoteGoTo::.ctor(System.IntPtr,CoreGraphics.CGPoint,Foundation.NSUrl)",
			"PdfKit.PdfActionRemoteGoTo::set_Url(Foundation.NSUrl)",
			"PdfKit.PdfActionUrl::.ctor(Foundation.NSUrl)",
			"PdfKit.PdfActionUrl::set_Url(Foundation.NSUrl)",
			"PdfKit.PdfAnnotation::.ctor(CoreGraphics.CGRect,Foundation.NSString,Foundation.NSDictionary)",
			"PdfKit.PdfAnnotation::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotation::_GetValue(Foundation.NSString)",
			"PdfKit.PdfAnnotation::_SetValue(System.IntPtr,Foundation.NSString)",
			"PdfKit.PdfAnnotation::AddBezierPath(AppKit.NSBezierPath)",
			"PdfKit.PdfAnnotation::AddBezierPath(UIKit.UIBezierPath)",
			"PdfKit.PdfAnnotation::Copy(Foundation.NSZone)",
			"PdfKit.PdfAnnotation::Draw(PdfKit.PdfDisplayBox,CoreGraphics.CGContext)",
			"PdfKit.PdfAnnotation::EncodeTo(Foundation.NSCoder)",
			"PdfKit.PdfAnnotation::RemoveBezierPath(AppKit.NSBezierPath)",
			"PdfKit.PdfAnnotation::RemoveBezierPath(UIKit.UIBezierPath)",
			"PdfKit.PdfAnnotation::RemoveValue(Foundation.NSString)",
			"PdfKit.PdfAnnotation::set_Action(PdfKit.PdfAction)",
			"PdfKit.PdfAnnotation::set_BackgroundColor(AppKit.NSColor)",
			"PdfKit.PdfAnnotation::set_BackgroundColor(UIKit.UIColor)",
			"PdfKit.PdfAnnotation::set_Border(PdfKit.PdfBorder)",
			"PdfKit.PdfAnnotation::set_Color(AppKit.NSColor)",
			"PdfKit.PdfAnnotation::set_Color(UIKit.UIColor)",
			"PdfKit.PdfAnnotation::set_Destination(PdfKit.PdfDestination)",
			"PdfKit.PdfAnnotation::set_Font(AppKit.NSFont)",
			"PdfKit.PdfAnnotation::set_Font(UIKit.UIFont)",
			"PdfKit.PdfAnnotation::set_FontColor(AppKit.NSColor)",
			"PdfKit.PdfAnnotation::set_FontColor(UIKit.UIColor)",
			"PdfKit.PdfAnnotation::set_InteriorColor(AppKit.NSColor)",
			"PdfKit.PdfAnnotation::set_InteriorColor(UIKit.UIColor)",
			"PdfKit.PdfAnnotation::set_ModificationDate(Foundation.NSDate)",
			"PdfKit.PdfAnnotation::set_MouseUpAction(PdfKit.PdfAction)",
			"PdfKit.PdfAnnotation::set_Page(PdfKit.PdfPage)",
			"PdfKit.PdfAnnotation::set_Popup(PdfKit.PdfAnnotation)",
			"PdfKit.PdfAnnotation::set_Popup(PdfKit.PdfAnnotationPopup)",
			"PdfKit.PdfAnnotation::set_Type(Foundation.NSString)",
			"PdfKit.PdfAnnotation::set_Url(Foundation.NSUrl)",
			"PdfKit.PdfAnnotation::SetValue(CoreGraphics.CGRect,Foundation.NSString)",
			"PdfKit.PdfAnnotation::SetValue(System.Boolean,Foundation.NSString)",
			"PdfKit.PdfAnnotation::SetValue(T,PdfKit.PdfAnnotationKey)",
			"PdfKit.PdfAnnotationButtonWidget::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationButtonWidget::set_BackgroundColor(AppKit.NSColor)",
			"PdfKit.PdfAnnotationButtonWidget::set_Font(AppKit.NSFont)",
			"PdfKit.PdfAnnotationButtonWidget::set_FontColor(AppKit.NSColor)",
			"PdfKit.PdfAnnotationChoiceWidget::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationChoiceWidget::set_BackgroundColor(AppKit.NSColor)",
			"PdfKit.PdfAnnotationChoiceWidget::set_Font(AppKit.NSFont)",
			"PdfKit.PdfAnnotationChoiceWidget::set_FontColor(AppKit.NSColor)",
			"PdfKit.PdfAnnotationCircle::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationCircle::set_InteriorColor(AppKit.NSColor)",
			"PdfKit.PdfAnnotationFreeText::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationFreeText::set_Font(AppKit.NSFont)",
			"PdfKit.PdfAnnotationFreeText::set_FontColor(AppKit.NSColor)",
			"PdfKit.PdfAnnotationInk::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationInk::AddBezierPath(AppKit.NSBezierPath)",
			"PdfKit.PdfAnnotationInk::RemoveBezierPath(AppKit.NSBezierPath)",
			"PdfKit.PdfAnnotationLine::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationLine::set_InteriorColor(AppKit.NSColor)",
			"PdfKit.PdfAnnotationLink::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationLink::set_Destination(PdfKit.PdfDestination)",
			"PdfKit.PdfAnnotationLink::set_Url(Foundation.NSUrl)",
			"PdfKit.PdfAnnotationMarkup::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationPopup::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationSquare::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationSquare::set_InteriorColor(AppKit.NSColor)",
			"PdfKit.PdfAnnotationStamp::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationText::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationTextWidget::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfAnnotationTextWidget::set_AttributedStringValue(Foundation.NSAttributedString)",
			"PdfKit.PdfAnnotationTextWidget::set_BackgroundColor(AppKit.NSColor)",
			"PdfKit.PdfAnnotationTextWidget::set_Font(AppKit.NSFont)",
			"PdfKit.PdfAnnotationTextWidget::set_FontColor(AppKit.NSColor)",
			"PdfKit.PdfAppearanceCharacteristics::Copy(Foundation.NSZone)",
			"PdfKit.PdfAppearanceCharacteristics::set_BackgroundColor(AppKit.NSColor)",
			"PdfKit.PdfAppearanceCharacteristics::set_BackgroundColor(UIKit.UIColor)",
			"PdfKit.PdfAppearanceCharacteristics::set_BorderColor(AppKit.NSColor)",
			"PdfKit.PdfAppearanceCharacteristics::set_BorderColor(UIKit.UIColor)",
			"PdfKit.PdfBorder::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfBorder::Copy(Foundation.NSZone)",
			"PdfKit.PdfBorder::EncodeTo(Foundation.NSCoder)",
			"PdfKit.PdfDestination::.ctor(PdfKit.PdfPage,CoreGraphics.CGPoint)",
			"PdfKit.PdfDestination::Compare(PdfKit.PdfDestination)",
			"PdfKit.PdfDestination::Copy(Foundation.NSZone)",
			"PdfKit.PdfDocument::.ctor(Foundation.NSData)",
			"PdfKit.PdfDocument::.ctor(Foundation.NSUrl)",
			"PdfKit.PdfDocument::Copy(Foundation.NSZone)",
			"PdfKit.PdfDocument::Find(System.String,PdfKit.PdfSelection,Foundation.NSStringCompareOptions)",
			"PdfKit.PdfDocument::GetDataRepresentation(Foundation.NSDictionary)",
			"PdfKit.PdfDocument::GetPageIndex(PdfKit.PdfPage)",
			"PdfKit.PdfDocument::GetPrintOperation(AppKit.NSPrintInfo,PdfKit.PdfPrintScalingMode,System.Boolean)",
			"PdfKit.PdfDocument::GetSelection(PdfKit.PdfPage,CoreGraphics.CGPoint,PdfKit.PdfPage,CoreGraphics.CGPoint)",
			"PdfKit.PdfDocument::GetSelection(PdfKit.PdfPage,System.IntPtr,PdfKit.PdfPage,System.IntPtr)",
			"PdfKit.PdfDocument::InsertPage(PdfKit.PdfPage,System.IntPtr)",
			"PdfKit.PdfDocument::OutlineItem(PdfKit.PdfSelection)",
			"PdfKit.PdfDocument::set_DocumentAttributes(Foundation.NSDictionary)",
			"PdfKit.PdfDocument::set_OutlineRoot(PdfKit.PdfOutline)",
			"PdfKit.PdfDocument::Write(Foundation.NSUrl)",
			"PdfKit.PdfDocument::Write(Foundation.NSUrl,Foundation.NSDictionary)",
			"PdfKit.PdfDocument::Write(System.String,Foundation.NSDictionary)",
			"PdfKit.PdfDocumentDelegate_Extensions::DidBeginDocumentFind(PdfKit.IPdfDocumentDelegate,Foundation.NSNotification)",
			"PdfKit.PdfDocumentDelegate_Extensions::DidMatchString(PdfKit.IPdfDocumentDelegate,PdfKit.PdfSelection)",
			"PdfKit.PdfDocumentDelegate_Extensions::DidUnlock(PdfKit.IPdfDocumentDelegate,Foundation.NSNotification)",
			"PdfKit.PdfDocumentDelegate_Extensions::FindFinished(PdfKit.IPdfDocumentDelegate,Foundation.NSNotification)",
			"PdfKit.PdfDocumentDelegate_Extensions::GetClassForAnnotationClass(PdfKit.IPdfDocumentDelegate,ObjCRuntime.Class)",
			"PdfKit.PdfDocumentDelegate_Extensions::GetClassForAnnotationType(PdfKit.IPdfDocumentDelegate,System.String)",
			"PdfKit.PdfDocumentDelegate_Extensions::GetClassForPage(PdfKit.IPdfDocumentDelegate)",
			"PdfKit.PdfDocumentDelegate_Extensions::MatchFound(PdfKit.IPdfDocumentDelegate,Foundation.NSNotification)",
			"PdfKit.PdfDocumentDelegate_Extensions::PageFindFinished(PdfKit.IPdfDocumentDelegate,Foundation.NSNotification)",
			"PdfKit.PdfDocumentDelegate_Extensions::PageFindStarted(PdfKit.IPdfDocumentDelegate,Foundation.NSNotification)",
			"PdfKit.PdfOutline::InsertChild(PdfKit.PdfOutline,System.IntPtr)",
			"PdfKit.PdfOutline::set_Action(PdfKit.PdfAction)",
			"PdfKit.PdfOutline::set_Destination(PdfKit.PdfDestination)",
			"PdfKit.PdfPage::.ctor(AppKit.NSImage)",
			"PdfKit.PdfPage::.ctor(UIKit.UIImage)",
			"PdfKit.PdfPage::AddAnnotation(PdfKit.PdfAnnotation)",
			"PdfKit.PdfPage::Copy(Foundation.NSZone)",
			"PdfKit.PdfPage::Draw(PdfKit.PdfDisplayBox,CoreGraphics.CGContext)",
			"PdfKit.PdfPage::RemoveAnnotation(PdfKit.PdfAnnotation)",
			"PdfKit.PdfPage::TransformContext(CoreGraphics.CGContext,PdfKit.PdfDisplayBox)",
			"PdfKit.PdfSelection::.ctor(PdfKit.PdfDocument)",
			"PdfKit.PdfSelection::AddSelection(PdfKit.PdfSelection)",
			"PdfKit.PdfSelection::Copy(Foundation.NSZone)",
			"PdfKit.PdfSelection::Draw(PdfKit.PdfPage,PdfKit.PdfDisplayBox,System.Boolean)",
			"PdfKit.PdfSelection::Draw(PdfKit.PdfPage,System.Boolean)",
			"PdfKit.PdfSelection::GetBoundsForPage(PdfKit.PdfPage)",
			"PdfKit.PdfSelection::GetNumberOfTextRanges(PdfKit.PdfPage)",
			"PdfKit.PdfSelection::GetRange(System.UIntPtr,PdfKit.PdfPage)",
			"PdfKit.PdfSelection::set_Color(AppKit.NSColor)",
			"PdfKit.PdfSelection::set_Color(UIKit.UIColor)",
			"PdfKit.PdfThumbnailView::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfThumbnailView::EncodeTo(Foundation.NSCoder)",
			"PdfKit.PdfThumbnailView::set_BackgroundColor(AppKit.NSColor)",
			"PdfKit.PdfThumbnailView::set_BackgroundColor(UIKit.UIColor)",
			"PdfKit.PdfThumbnailView::set_LabelFont(AppKit.NSFont)",
			"PdfKit.PdfView::.ctor(Foundation.NSCoder)",
			"PdfKit.PdfView::AnimationDidEnd(AppKit.NSAnimation)",
			"PdfKit.PdfView::AnimationDidReachProgressMark(AppKit.NSAnimation,System.Single)",
			"PdfKit.PdfView::AnimationDidStop(AppKit.NSAnimation)",
			"PdfKit.PdfView::AnimationShouldStart(AppKit.NSAnimation)",
			"PdfKit.PdfView::AnnotationsChanged(PdfKit.PdfPage)",
			"PdfKit.PdfView::ComputeAnimationCurve(AppKit.NSAnimation,System.Single)",
			"PdfKit.PdfView::ConfinementRectForMenu(AppKit.NSMenu,AppKit.NSScreen)",
			"PdfKit.PdfView::ConvertPointFromPage(CoreGraphics.CGPoint,PdfKit.PdfPage)",
			"PdfKit.PdfView::ConvertPointToPage(CoreGraphics.CGPoint,PdfKit.PdfPage)",
			"PdfKit.PdfView::ConvertRectangleFromPage(CoreGraphics.CGRect,PdfKit.PdfPage)",
			"PdfKit.PdfView::ConvertRectangleToPage(CoreGraphics.CGRect,PdfKit.PdfPage)",
			"PdfKit.PdfView::Copy(Foundation.NSObject)",
			"PdfKit.PdfView::DrawPage(PdfKit.PdfPage)",
			"PdfKit.PdfView::DrawPage(PdfKit.PdfPage,CoreGraphics.CGContext)",
			"PdfKit.PdfView::DrawPagePost(PdfKit.PdfPage)",
			"PdfKit.PdfView::DrawPagePost(PdfKit.PdfPage,CoreGraphics.CGContext)",
			"PdfKit.PdfView::GetAreaOfInterest(AppKit.NSEvent)",
			"PdfKit.PdfView::GetAreaOfInterest(UIKit.UIEvent)",
			"PdfKit.PdfView::GoBack(Foundation.NSObject)",
			"PdfKit.PdfView::GoForward(Foundation.NSObject)",
			"PdfKit.PdfView::GoToDestination(PdfKit.PdfDestination)",
			"PdfKit.PdfView::GoToFirstPage(Foundation.NSObject)",
			"PdfKit.PdfView::GoToLastPage(Foundation.NSObject)",
			"PdfKit.PdfView::GoToNextPage(Foundation.NSObject)",
			"PdfKit.PdfView::GoToPage(PdfKit.PdfPage)",
			"PdfKit.PdfView::GoToPreviousPage(Foundation.NSObject)",
			"PdfKit.PdfView::GoToRectangle(CoreGraphics.CGRect,PdfKit.PdfPage)",
			"PdfKit.PdfView::GoToSelection(PdfKit.PdfSelection)",
			"PdfKit.PdfView::HasKeyEquivalentForEvent(AppKit.NSMenu,AppKit.NSEvent,Foundation.NSObject,ObjCRuntime.Selector)",
			"PdfKit.PdfView::MenuDidClose(AppKit.NSMenu)",
			"PdfKit.PdfView::MenuItemCount(AppKit.NSMenu)",
			"PdfKit.PdfView::MenuWillHighlightItem(AppKit.NSMenu,AppKit.NSMenuItem)",
			"PdfKit.PdfView::MenuWillOpen(AppKit.NSMenu)",
			"PdfKit.PdfView::NeedsUpdate(AppKit.NSMenu)",
			"PdfKit.PdfView::PerformAction(PdfKit.PdfAction)",
			"PdfKit.PdfView::Print(AppKit.NSPrintInfo,System.Boolean)",
			"PdfKit.PdfView::Print(AppKit.NSPrintInfo,System.Boolean,PdfKit.PdfPrintScalingMode)",
			"PdfKit.PdfView::RowSize(PdfKit.PdfPage)",
			"PdfKit.PdfView::ScrollSelectionToVisible(Foundation.NSObject)",
			"PdfKit.PdfView::SelectAll(Foundation.NSObject)",
			"PdfKit.PdfView::set_BackgroundColor(AppKit.NSColor)",
			"PdfKit.PdfView::set_BackgroundColor(UIKit.UIColor)",
			"PdfKit.PdfView::set_CurrentSelection(PdfKit.PdfSelection)",
			"PdfKit.PdfView::set_Document(PdfKit.PdfDocument)",
			"PdfKit.PdfView::SetCurrentSelection(PdfKit.PdfSelection,System.Boolean)",
			"PdfKit.PdfView::ShouldBegin(UIKit.UIGestureRecognizer)",
			"PdfKit.PdfView::ShouldBeRequiredToFailBy(UIKit.UIGestureRecognizer,UIKit.UIGestureRecognizer)",
			"PdfKit.PdfView::ShouldReceiveEvent(UIKit.UIGestureRecognizer,UIKit.UIEvent)",
			"PdfKit.PdfView::ShouldReceivePress(UIKit.UIGestureRecognizer,UIKit.UIPress)",
			"PdfKit.PdfView::ShouldReceiveTouch(UIKit.UIGestureRecognizer,UIKit.UITouch)",
			"PdfKit.PdfView::ShouldRecognizeSimultaneously(UIKit.UIGestureRecognizer,UIKit.UIGestureRecognizer)",
			"PdfKit.PdfView::ShouldRequireFailureOf(UIKit.UIGestureRecognizer,UIKit.UIGestureRecognizer)",
			"PdfKit.PdfView::TakeBackgroundColor(Foundation.NSObject)",
			"PdfKit.PdfView::TakePasswordFrom(Foundation.NSObject)",
			"PdfKit.PdfView::UpdateItem(AppKit.NSMenu,AppKit.NSMenuItem,System.IntPtr,System.Boolean)",
			"PdfKit.PdfView::UsePageViewController(System.Boolean,Foundation.NSDictionary)",
			"PdfKit.PdfView::ZoomIn(Foundation.NSObject)",
			"PdfKit.PdfView::ZoomOut(Foundation.NSObject)",
			"PdfKit.PdfViewDelegate_Extensions::GetParentViewController(PdfKit.IPdfViewDelegate)",
			"PdfKit.PdfViewDelegate_Extensions::OpenPdf(PdfKit.IPdfViewDelegate,PdfKit.PdfView,PdfKit.PdfActionRemoteGoTo)",
			"PdfKit.PdfViewDelegate_Extensions::PerformFind(PdfKit.IPdfViewDelegate,PdfKit.PdfView)",
			"PdfKit.PdfViewDelegate_Extensions::PerformGoToPage(PdfKit.IPdfViewDelegate,PdfKit.PdfView)",
			"PdfKit.PdfViewDelegate_Extensions::PerformPrint(PdfKit.IPdfViewDelegate,PdfKit.PdfView)",
			"PdfKit.PdfViewDelegate_Extensions::TitleOfPrintJob(PdfKit.IPdfViewDelegate,PdfKit.PdfView)",
			"PdfKit.PdfViewDelegate_Extensions::WillChangeScaleFactor(PdfKit.IPdfViewDelegate,PdfKit.PdfView,System.Runtime.InteropServices.NFloat)",
			"PdfKit.PdfViewDelegate_Extensions::WillClickOnLink(PdfKit.IPdfViewDelegate,PdfKit.PdfView,Foundation.NSUrl)",
			"PencilKit.PKCanvasView::.ctor(Foundation.NSCoder)",
			"PencilKit.PKCanvasView::FramesObscuredDidChange(PencilKit.PKToolPicker)",
			"PencilKit.PKCanvasView::IsRulerActiveDidChange(PencilKit.PKToolPicker)",
			"PencilKit.PKCanvasView::SelectedToolDidChange(PencilKit.PKToolPicker)",
			"PencilKit.PKCanvasView::set_Drawing(PencilKit.PKDrawing)",
			"PencilKit.PKCanvasView::set_Tool(PencilKit.PKTool)",
			"PencilKit.PKCanvasView::VisibilityDidChange(PencilKit.PKToolPicker)",
			"PencilKit.PKCanvasViewDelegate_Extensions::DidBeginUsingTool(PencilKit.IPKCanvasViewDelegate,PencilKit.PKCanvasView)",
			"PencilKit.PKCanvasViewDelegate_Extensions::DidFinishRendering(PencilKit.IPKCanvasViewDelegate,PencilKit.PKCanvasView)",
			"PencilKit.PKCanvasViewDelegate_Extensions::DrawingDidChange(PencilKit.IPKCanvasViewDelegate,PencilKit.PKCanvasView)",
			"PencilKit.PKCanvasViewDelegate_Extensions::EndUsingTool(PencilKit.IPKCanvasViewDelegate,PencilKit.PKCanvasView)",
			"PencilKit.PKDrawing::.ctor(Foundation.NSCoder)",
			"PencilKit.PKDrawing::.ctor(Foundation.NSData,Foundation.NSError&)",
			"PencilKit.PKDrawing::Copy(Foundation.NSZone)",
			"PencilKit.PKDrawing::EncodeTo(Foundation.NSCoder)",
			"PencilKit.PKDrawing::GetDrawing(PencilKit.PKDrawing)",
			"PencilKit.PKFloatRange::Copy(Foundation.NSZone)",
			"PencilKit.PKInk::.ctor(Foundation.NSString,AppKit.NSColor)",
			"PencilKit.PKInk::.ctor(Foundation.NSString,UIKit.UIColor)",
			"PencilKit.PKInk::Copy(Foundation.NSZone)",
			"PencilKit.PKInkingTool::.ctor(PencilKit.PKInk,System.Runtime.InteropServices.NFloat)",
			"PencilKit.PKInkingTool::.ctor(PencilKit.PKInkType,AppKit.NSColor)",
			"PencilKit.PKInkingTool::.ctor(PencilKit.PKInkType,AppKit.NSColor,System.Runtime.InteropServices.NFloat)",
			"PencilKit.PKInkingTool::.ctor(PencilKit.PKInkType,UIKit.UIColor)",
			"PencilKit.PKInkingTool::.ctor(PencilKit.PKInkType,UIKit.UIColor,System.Runtime.InteropServices.NFloat)",
			"PencilKit.PKInkingTool::ConvertColor(UIKit.UIColor,UIKit.UIUserInterfaceStyle,UIKit.UIUserInterfaceStyle)",
			"PencilKit.PKInkingTool::GetDefaultWidth(PencilKit.PKInkType)",
			"PencilKit.PKInkingTool::GetMaximumWidth(PencilKit.PKInkType)",
			"PencilKit.PKInkingTool::GetMinimumWidth(PencilKit.PKInkType)",
			"PencilKit.PKStroke::.ctor(PencilKit.PKInk,PencilKit.PKStrokePath,CoreGraphics.CGAffineTransform,AppKit.NSBezierPath)",
			"PencilKit.PKStroke::.ctor(PencilKit.PKInk,PencilKit.PKStrokePath,CoreGraphics.CGAffineTransform,UIKit.UIBezierPath)",
			"PencilKit.PKStroke::Copy(Foundation.NSZone)",
			"PencilKit.PKStrokePath::.ctor(PencilKit.PKStrokePoint[],Foundation.NSDate)",
			"PencilKit.PKStrokePath::Copy(Foundation.NSZone)",
			"PencilKit.PKStrokePath::EnumerateInterpolatedPointsByDistanceStep(PencilKit.PKFloatRange,System.Runtime.InteropServices.NFloat,PencilKit.PKInterpolatedPointsEnumeratorHandler)",
			"PencilKit.PKStrokePath::EnumerateInterpolatedPointsByParametricStep(PencilKit.PKFloatRange,System.Runtime.InteropServices.NFloat,PencilKit.PKInterpolatedPointsEnumeratorHandler)",
			"PencilKit.PKStrokePath::EnumerateInterpolatedPointsByTimeStep(PencilKit.PKFloatRange,System.Double,PencilKit.PKInterpolatedPointsEnumeratorHandler)",
			"PencilKit.PKStrokePoint::Copy(Foundation.NSZone)",
			"PencilKit.PKTool::Copy(Foundation.NSZone)",
			"PencilKit.PKToolPicker::AddObserver(PencilKit.IPKToolPickerObserver)",
			"PencilKit.PKToolPicker::GetFrameObscured(UIKit.UIView)",
			"PencilKit.PKToolPicker::GetSharedToolPicker(UIKit.UIWindow)",
			"PencilKit.PKToolPicker::RemoveObserver(PencilKit.IPKToolPickerObserver)",
			"PencilKit.PKToolPicker::set_SelectedTool(PencilKit.PKTool)",
			"PencilKit.PKToolPicker::SetVisible(System.Boolean,UIKit.UIResponder)",
			"PencilKit.PKToolPickerObserver_Extensions::FramesObscuredDidChange(PencilKit.IPKToolPickerObserver,PencilKit.PKToolPicker)",
			"PencilKit.PKToolPickerObserver_Extensions::IsRulerActiveDidChange(PencilKit.IPKToolPickerObserver,PencilKit.PKToolPicker)",
			"PencilKit.PKToolPickerObserver_Extensions::SelectedToolDidChange(PencilKit.IPKToolPickerObserver,PencilKit.PKToolPicker)",
			"PencilKit.PKToolPickerObserver_Extensions::VisibilityDidChange(PencilKit.IPKToolPickerObserver,PencilKit.PKToolPicker)",
			"Phase.PhaseAmbientMixerDefinition::.ctor(AVFoundation.AVAudioChannelLayout,System.Numerics.Quaternion)",
			"Phase.PhaseAmbientMixerDefinition::.ctor(AVFoundation.AVAudioChannelLayout,System.Numerics.Quaternion,Foundation.NSString)",
			"Phase.PhaseAssetRegistry::RegisterGlobalMetaParameter(Phase.PhaseMetaParameterDefinition,Foundation.NSError&)",
			"Phase.PhaseAssetRegistry::RegisterSoundAsset(Foundation.NSData,System.String,AVFoundation.AVAudioFormat,Phase.PhaseNormalizationMode,Foundation.NSError&)",
			"Phase.PhaseAssetRegistry::RegisterSoundAsset(Foundation.NSUrl,System.String,Phase.PhaseAssetType,AVFoundation.AVAudioChannelLayout,Phase.PhaseNormalizationMode,Foundation.NSError&)",
			"Phase.PhaseAssetRegistry::RegisterSoundEventAsset(Phase.PhaseSoundEventNodeDefinition,System.String,Foundation.NSError&)",
			"Phase.PhaseBlendNodeDefinition::.ctor(Phase.PhaseNumberMetaParameterDefinition)",
			"Phase.PhaseBlendNodeDefinition::.ctor(Phase.PhaseNumberMetaParameterDefinition,System.String)",
			"Phase.PhaseBlendNodeDefinition::.ctor(Phase.PhaseSpatialMixerDefinition)",
			"Phase.PhaseBlendNodeDefinition::.ctor(Phase.PhaseSpatialMixerDefinition,System.String)",
			"Phase.PhaseBlendNodeDefinition::AddRange(Phase.PhaseEnvelope,Phase.PhaseSoundEventNodeDefinition)",
			"Phase.PhaseBlendNodeDefinition::AddRangeForInputValuesAbove(System.Double,System.Double,Phase.PhaseCurveType,Phase.PhaseSoundEventNodeDefinition)",
			"Phase.PhaseBlendNodeDefinition::AddRangeForInputValuesBelow(System.Double,System.Double,Phase.PhaseCurveType,Phase.PhaseSoundEventNodeDefinition)",
			"Phase.PhaseBlendNodeDefinition::AddRangeForInputValuesBetween(System.Double,System.Double,System.Double,System.Double,Phase.PhaseCurveType,Phase.PhaseCurveType,Phase.PhaseSoundEventNodeDefinition)",
			"Phase.PhaseChannelMixerDefinition::.ctor(AVFoundation.AVAudioChannelLayout)",
			"Phase.PhaseChannelMixerDefinition::.ctor(AVFoundation.AVAudioChannelLayout,System.String)",
			"Phase.PhaseContainerNodeDefinition::Add(Phase.PhaseSoundEventNodeDefinition)",
			"Phase.PhaseDistanceModelParameters::set_FadeOutParameters(Phase.PhaseDistanceModelFadeOutParameters)",
			"Phase.PhaseDucker::.ctor(Phase.PhaseEngine,Foundation.NSSet`1<Phase.PhaseGroup>,Foundation.NSSet`1<Phase.PhaseGroup>,System.Double,System.Double,System.Double,Phase.PhaseCurveType,Phase.PhaseCurveType)",
			"Phase.PhaseEngine::set_DefaultMedium(Phase.PhaseMedium)",
			"Phase.PhaseEnvelopeDistanceModelParameters::.ctor(Phase.PhaseEnvelope)",
			"Phase.PhaseGeneratorNodeDefinition::set_GainMetaParameterDefinition(Phase.PhaseNumberMetaParameterDefinition)",
			"Phase.PhaseGeneratorNodeDefinition::set_RateMetaParameterDefinition(Phase.PhaseNumberMetaParameterDefinition)",
			"Phase.PhaseGroup::Register(Phase.PhaseEngine)",
			"Phase.PhaseGroupPreset::.ctor(Phase.PhaseEngine,Foundation.NSDictionary`2<Foundation.NSString,Phase.PhaseGroupPresetSetting>,System.Double,System.Double)",
			"Phase.PhaseListener::.ctor(Phase.PhaseEngine)",
			"Phase.PhaseMappedMetaParameterDefinition::.ctor(Phase.PhaseNumberMetaParameterDefinition,Phase.PhaseEnvelope)",
			"Phase.PhaseMappedMetaParameterDefinition::.ctor(Phase.PhaseNumberMetaParameterDefinition,Phase.PhaseEnvelope,System.String)",
			"Phase.PhaseMaterial::.ctor(Phase.PhaseEngine,Phase.PhaseMaterialPreset)",
			"Phase.PhaseMedium::.ctor(Phase.PhaseEngine,Phase.PhaseMediumPreset)",
			"Phase.PhaseMetaParameter::set_Value(Foundation.NSObject)",
			"Phase.PhaseMixerDefinition::set_GainMetaParameterDefinition(Phase.PhaseNumberMetaParameterDefinition)",
			"Phase.PhaseMixerParameters::AddAmbientMixerParameters(System.String,Phase.PhaseListener)",
			"Phase.PhaseMixerParameters::AddSpatialMixerParameters(System.String,Phase.PhaseSource,Phase.PhaseListener)",
			"Phase.PhaseObject::.ctor(Phase.PhaseEngine)",
			"Phase.PhaseObject::AddChild(Phase.PhaseObject,Foundation.NSError&)",
			"Phase.PhaseObject::Copy(Foundation.NSZone)",
			"Phase.PhaseObject::RemoveChild(Phase.PhaseObject)",
			"Phase.PhaseOccluder::.ctor(Phase.PhaseEngine)",
			"Phase.PhaseOccluder::.ctor(Phase.PhaseEngine,Phase.PhaseShape[])",
			"Phase.PhasePushStreamNode::ScheduleBuffer(AVFoundation.AVAudioPcmBuffer)",
			"Phase.PhasePushStreamNode::ScheduleBuffer(AVFoundation.AVAudioPcmBuffer,AVFoundation.AVAudioTime,Phase.PhasePushStreamBufferOptions)",
			"Phase.PhasePushStreamNode::ScheduleBuffer(AVFoundation.AVAudioPcmBuffer,AVFoundation.AVAudioTime,Phase.PhasePushStreamBufferOptions,Phase.PhasePushStreamCompletionCallbackCondition,System.Action`1<Phase.PhasePushStreamCompletionCallbackCondition>)",
			"Phase.PhasePushStreamNode::ScheduleBuffer(AVFoundation.AVAudioPcmBuffer,Phase.PhasePushStreamCompletionCallbackCondition,System.Action`1<Phase.PhasePushStreamCompletionCallbackCondition>)",
			"Phase.PhasePushStreamNodeDefinition::.ctor(Phase.PhaseMixerDefinition,AVFoundation.AVAudioFormat)",
			"Phase.PhasePushStreamNodeDefinition::.ctor(Phase.PhaseMixerDefinition,AVFoundation.AVAudioFormat,System.String)",
			"Phase.PhaseRandomNodeDefinition::AddSubtree(Phase.PhaseSoundEventNodeDefinition,Foundation.NSNumber)",
			"Phase.PhaseSamplerNodeDefinition::.ctor(System.String,Phase.PhaseMixerDefinition)",
			"Phase.PhaseSamplerNodeDefinition::.ctor(System.String,Phase.PhaseMixerDefinition,System.String)",
			"Phase.PhaseShape::.ctor(Phase.PhaseEngine,ModelIO.MDLMesh)",
			"Phase.PhaseShape::.ctor(Phase.PhaseEngine,ModelIO.MDLMesh,Phase.PhaseMaterial[])",
			"Phase.PhaseShape::Copy(Foundation.NSZone)",
			"Phase.PhaseShapeElement::set_Material(Phase.PhaseMaterial)",
			"Phase.PhaseSoundEvent::.ctor(Phase.PhaseEngine,System.String,Foundation.NSError&)",
			"Phase.PhaseSoundEvent::.ctor(Phase.PhaseEngine,System.String,Phase.PhaseMixerParameters,Foundation.NSError&)",
			"Phase.PhaseSource::.ctor(Phase.PhaseEngine)",
			"Phase.PhaseSource::.ctor(Phase.PhaseEngine,Phase.PhaseShape[])",
			"Phase.PhaseSpatialMixerDefinition::.ctor(Phase.PhaseSpatialPipeline)",
			"Phase.PhaseSpatialMixerDefinition::.ctor(Phase.PhaseSpatialPipeline,System.String)",
			"Phase.PhaseSpatialMixerDefinition::set_DistanceModelParameters(Phase.PhaseDistanceModelParameters)",
			"Phase.PhaseSpatialMixerDefinition::set_ListenerDirectivityModelParameters(Phase.PhaseDirectivityModelParameters)",
			"Phase.PhaseSpatialMixerDefinition::set_SourceDirectivityModelParameters(Phase.PhaseDirectivityModelParameters)",
			"Phase.PhaseSpatialPipelineEntry::set_SendLevelMetaParameterDefinition(Phase.PhaseNumberMetaParameterDefinition)",
			"Phase.PhaseSwitchNodeDefinition::.ctor(Phase.PhaseStringMetaParameterDefinition)",
			"Phase.PhaseSwitchNodeDefinition::.ctor(Phase.PhaseStringMetaParameterDefinition,System.String)",
			"Phase.PhaseSwitchNodeDefinition::AddSubtree(Phase.PhaseSoundEventNodeDefinition,System.String)",
			"Photos.PHAdjustmentData::.ctor(Foundation.NSCoder)",
			"Photos.PHAdjustmentData::.ctor(System.String,System.String,Foundation.NSData)",
			"Photos.PHAdjustmentData::EncodeTo(Foundation.NSCoder)",
			"Photos.PHAsset::FetchAssets(Foundation.NSUrl[],Photos.PHFetchOptions)",
			"Photos.PHAsset::FetchAssets(Photos.PHAssetCollection,Photos.PHFetchOptions)",
			"Photos.PHAsset::FetchAssets(Photos.PHAssetMediaType,Photos.PHFetchOptions)",
			"Photos.PHAsset::FetchAssets(Photos.PHFetchOptions)",
			"Photos.PHAsset::FetchAssets(System.String,Photos.PHFetchOptions)",
			"Photos.PHAsset::FetchAssetsUsingLocalIdentifiers(System.String[],Photos.PHFetchOptions)",
			"Photos.PHAsset::FetchKeyAssets(Photos.PHAssetCollection,Photos.PHFetchOptions)",
			"Photos.PHAssetChangeRequest::ChangeRequest(Photos.PHAsset)",
			"Photos.PHAssetChangeRequest::FromImage(AppKit.NSImage)",
			"Photos.PHAssetChangeRequest::FromImage(Foundation.NSUrl)",
			"Photos.PHAssetChangeRequest::FromImage(UIKit.UIImage)",
			"Photos.PHAssetChangeRequest::FromVideo(Foundation.NSUrl)",
			"Photos.PHAssetChangeRequest::set_ContentEditingOutput(Photos.PHContentEditingOutput)",
			"Photos.PHAssetChangeRequest::set_CreationDate(Foundation.NSDate)",
			"Photos.PHAssetChangeRequest::set_Location(CoreLocation.CLLocation)",
			"Photos.PHAssetCollection::FetchAssetCollections(Foundation.NSUrl[],Photos.PHFetchOptions)",
			"Photos.PHAssetCollection::FetchAssetCollections(Photos.PHAsset,Photos.PHAssetCollectionType,Photos.PHFetchOptions)",
			"Photos.PHAssetCollection::FetchAssetCollections(Photos.PHAssetCollectionType,Photos.PHAssetCollectionSubtype,Photos.PHFetchOptions)",
			"Photos.PHAssetCollection::FetchAssetCollections(System.String[],Photos.PHFetchOptions)",
			"Photos.PHAssetCollection::FetchMoments(Photos.PHCollectionList,Photos.PHFetchOptions)",
			"Photos.PHAssetCollection::FetchMoments(Photos.PHFetchOptions)",
			"Photos.PHAssetCollection::GetTransientAssetCollection(Photos.PHFetchResult,System.String)",
			"Photos.PHAssetCollectionChangeRequest::ChangeRequest(Photos.PHAssetCollection)",
			"Photos.PHAssetCollectionChangeRequest::ChangeRequest(Photos.PHAssetCollection,Photos.PHFetchResult)",
			"Photos.PHAssetCollectionChangeRequest::InsertAssets(Photos.PHObject[],Foundation.NSIndexSet)",
			"Photos.PHAssetCollectionChangeRequest::MoveAssets(Foundation.NSIndexSet,System.UIntPtr)",
			"Photos.PHAssetCollectionChangeRequest::RemoveAssets(Foundation.NSIndexSet)",
			"Photos.PHAssetCollectionChangeRequest::ReplaceAssets(Foundation.NSIndexSet,Photos.PHObject[])",
			"Photos.PHAssetContentEditingInputExtensions::CancelContentEditingInputRequest(Photos.PHAsset,System.UIntPtr)",
			"Photos.PHAssetContentEditingInputExtensions::RequestContentEditingInput(Photos.PHAsset,Photos.PHContentEditingInputRequestOptions,Photos.PHContentEditingHandler)",
			"Photos.PHAssetCreationRequest::AddResource(Photos.PHAssetResourceType,Foundation.NSData,Photos.PHAssetResourceCreationOptions)",
			"Photos.PHAssetCreationRequest::AddResource(Photos.PHAssetResourceType,Foundation.NSUrl,Photos.PHAssetResourceCreationOptions)",
			"Photos.PHAssetResource::GetAssetResources(Photos.PHAsset)",
			"Photos.PHAssetResource::GetAssetResources(Photos.PHLivePhoto)",
			"Photos.PHAssetResourceCreationOptions::Copy(Foundation.NSZone)",
			"Photos.PHAssetResourceManager::RequestData(Photos.PHAssetResource,Photos.PHAssetResourceRequestOptions,System.Action`1<Foundation.NSData>,System.Action`1<Foundation.NSError>)",
			"Photos.PHAssetResourceManager::WriteData(Photos.PHAssetResource,Foundation.NSUrl,Photos.PHAssetResourceRequestOptions,System.Action`1<Foundation.NSError>)",
			"Photos.PHAssetResourceRequestOptions::Copy(Foundation.NSZone)",
			"Photos.PHCachingImageManager::StartCaching(Photos.PHAsset[],CoreGraphics.CGSize,Photos.PHImageContentMode,Photos.PHImageRequestOptions)",
			"Photos.PHCachingImageManager::StopCaching(Photos.PHAsset[],CoreGraphics.CGSize,Photos.PHImageContentMode,Photos.PHImageRequestOptions)",
			"Photos.PHChange::GetFetchResultChangeDetails(Photos.PHFetchResult)",
			"Photos.PHChange::GetObjectChangeDetails(Photos.PHObject)",
			"Photos.PHCloudIdentifier::.ctor(Foundation.NSCoder)",
			"Photos.PHCloudIdentifier::EncodeTo(Foundation.NSCoder)",
			"Photos.PHCollection::FetchCollections(Photos.PHCollectionList,Photos.PHFetchOptions)",
			"Photos.PHCollection::FetchTopLevelUserCollections(Photos.PHFetchOptions)",
			"Photos.PHCollectionList::CreateTransientCollectionList(Photos.PHFetchResult,System.String)",
			"Photos.PHCollectionList::FetchCollectionLists(Photos.PHCollection,Photos.PHFetchOptions)",
			"Photos.PHCollectionList::FetchCollectionLists(Photos.PHCollectionListType,Photos.PHCollectionListSubtype,Photos.PHFetchOptions)",
			"Photos.PHCollectionList::FetchCollectionLists(System.String[],Photos.PHFetchOptions)",
			"Photos.PHCollectionList::FetchMomentLists(Photos.PHCollectionListSubtype,Photos.PHAssetCollection,Photos.PHFetchOptions)",
			"Photos.PHCollectionList::FetchMomentLists(Photos.PHCollectionListSubtype,Photos.PHFetchOptions)",
			"Photos.PHCollectionListChangeRequest::ChangeRequest(Photos.PHCollectionList)",
			"Photos.PHCollectionListChangeRequest::ChangeRequest(Photos.PHCollectionList,Photos.PHFetchResult)",
			"Photos.PHCollectionListChangeRequest::ChangeRequestForTopLevelCollectionList(Photos.PHFetchResult)",
			"Photos.PHCollectionListChangeRequest::InsertChildCollections(Photos.PHCollection[],Foundation.NSIndexSet)",
			"Photos.PHCollectionListChangeRequest::MoveChildCollections(Foundation.NSIndexSet,System.UIntPtr)",
			"Photos.PHCollectionListChangeRequest::RemoveChildCollections(Foundation.NSIndexSet)",
			"Photos.PHCollectionListChangeRequest::ReplaceChildCollection(Foundation.NSIndexSet,Photos.PHCollection[])",
			"Photos.PHContentEditingOutput::.ctor(Foundation.NSCoder)",
			"Photos.PHContentEditingOutput::.ctor(Photos.PHContentEditingInput)",
			"Photos.PHContentEditingOutput::.ctor(Photos.PHObjectPlaceholder)",
			"Photos.PHContentEditingOutput::EncodeTo(Foundation.NSCoder)",
			"Photos.PHContentEditingOutput::set_AdjustmentData(Photos.PHAdjustmentData)",
			"Photos.PHFetchOptions::Copy(Foundation.NSZone)",
			"Photos.PHFetchOptions::set_Predicate(Foundation.NSPredicate)",
			"Photos.PHFetchResult::_ObjectsAt(Foundation.NSIndexSet)",
			"Photos.PHFetchResult::Contains(Foundation.NSObject)",
			"Photos.PHFetchResult::Copy(Foundation.NSZone)",
			"Photos.PHFetchResult::Enumerate(Foundation.NSIndexSet,Foundation.NSEnumerationOptions,Photos.PHFetchResultEnumerator)",
			"Photos.PHFetchResult::IndexOf(Foundation.NSObject)",
			"Photos.PHFetchResult::IndexOf(Foundation.NSObject,Foundation.NSRange)",
			"Photos.PHFetchResultChangeDetails::ChangeDetails(Photos.PHFetchResult,Photos.PHFetchResult,Photos.PHObject[])",
			"Photos.PHImageManager::RequestAVAsset(Photos.PHAsset,Photos.PHVideoRequestOptions,Photos.PHImageManagerRequestAVAssetHandler)",
			"Photos.PHImageManager::RequestExportSession(Photos.PHAsset,Photos.PHVideoRequestOptions,System.String,Photos.PHImageManagerRequestExportHandler)",
			"Photos.PHImageManager::RequestImageData(Photos.PHAsset,Photos.PHImageRequestOptions,Photos.PHImageDataHandler)",
			"Photos.PHImageManager::RequestImageDataAndOrientation(Photos.PHAsset,Photos.PHImageRequestOptions,Photos.PHImageManagerRequestImageDataHandler)",
			"Photos.PHImageManager::RequestImageForAsset(Photos.PHAsset,CoreGraphics.CGSize,Photos.PHImageContentMode,Photos.PHImageRequestOptions,Photos.PHImageResultHandler)",
			"Photos.PHImageManager::RequestLivePhoto(Photos.PHAsset,CoreGraphics.CGSize,Photos.PHImageContentMode,Photos.PHLivePhotoRequestOptions,Photos.PHImageManagerRequestLivePhoto)",
			"Photos.PHImageManager::RequestPlayerItem(Photos.PHAsset,Photos.PHVideoRequestOptions,Photos.PHImageManagerRequestPlayerHandler)",
			"Photos.PHImageRequestOptions::Copy(Foundation.NSZone)",
			"Photos.PHLivePhoto::.ctor(Foundation.NSCoder)",
			"Photos.PHLivePhoto::Copy(Foundation.NSZone)",
			"Photos.PHLivePhoto::EncodeTo(Foundation.NSCoder)",
			"Photos.PHLivePhoto::GetObject(Foundation.NSData,System.String,Foundation.NSError&)",
			"Photos.PHLivePhoto::RequestLivePhoto(Foundation.NSUrl[],AppKit.NSImage,CoreGraphics.CGSize,Photos.PHImageContentMode,System.Action`2<Photos.PHLivePhoto,Foundation.NSDictionary>)",
			"Photos.PHLivePhoto::RequestLivePhoto(Foundation.NSUrl[],UIKit.UIImage,CoreGraphics.CGSize,Photos.PHImageContentMode,System.Action`2<Photos.PHLivePhoto,Foundation.NSDictionary>)",
			"Photos.PHLivePhotoEditingContext::.ctor(Photos.PHContentEditingInput)",
			"Photos.PHLivePhotoEditingContext::_PrepareLivePhotoForPlayback(CoreGraphics.CGSize,Foundation.NSDictionary,System.Action`2<Photos.PHLivePhoto,Foundation.NSError>)",
			"Photos.PHLivePhotoEditingContext::_SaveLivePhoto(Photos.PHContentEditingOutput,Foundation.NSDictionary,System.Action`2<System.Boolean,Foundation.NSError>)",
			"Photos.PHLivePhotoRequestOptions::Copy(Foundation.NSZone)",
			"Photos.PHObject::Copy(Foundation.NSZone)",
			"Photos.PHPhotoLibrary::Register(Photos.IPHPhotoLibraryAvailabilityObserver)",
			"Photos.PHPhotoLibrary::RegisterChangeObserver(Photos.IPHPhotoLibraryChangeObserver)",
			"Photos.PHPhotoLibrary::Unregister(Photos.IPHPhotoLibraryAvailabilityObserver)",
			"Photos.PHPhotoLibrary::UnregisterChangeObserver(Photos.IPHPhotoLibraryChangeObserver)",
			"Photos.PHPhotoLibrary_CloudIdentifiers::GetCloudIdentifierMappings(Photos.PHPhotoLibrary,System.String[])",
			"Photos.PHPhotoLibrary_CloudIdentifiers::GetCloudIdentifiers(Photos.PHPhotoLibrary,System.String[])",
			"Photos.PHPhotoLibrary_CloudIdentifiers::GetLocalIdentifierMappings(Photos.PHPhotoLibrary,Photos.PHCloudIdentifier[])",
			"Photos.PHPhotoLibrary_CloudIdentifiers::GetLocalIdentifiers(Photos.PHPhotoLibrary,Photos.PHCloudIdentifier[])",
			"Photos.PHPhotoLibraryAvailabilityObserverWrapper::PhotoLibraryDidBecomeUnavailable(Photos.PHPhotoLibrary)",
			"Photos.PHPhotoLibraryChangeObserverWrapper::PhotoLibraryDidChange(Photos.PHChange)",
			"Photos.PHProjectChangeRequest::.ctor(Photos.PHProject)",
			"Photos.PHProjectChangeRequest::set_ProjectExtensionData(Foundation.NSData)",
			"Photos.PHProjectChangeRequest::SetKeyAsset(Photos.PHAsset)",
			"Photos.PHProjectChangeRequest::SetProjectPreviewImage(AppKit.NSImage)",
			"PhotosUI.PHContentEditingControllerWrapper::CanHandleAdjustmentData(Photos.PHAdjustmentData)",
			"PhotosUI.PHContentEditingControllerWrapper::StartContentEditing(Photos.PHContentEditingInput,AppKit.NSImage)",
			"PhotosUI.PHContentEditingControllerWrapper::StartContentEditing(Photos.PHContentEditingInput,UIKit.UIImage)",
			"PhotosUI.PHLivePhotoView::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHLivePhotoView::set_LivePhoto(Photos.PHLivePhoto)",
			"PhotosUI.PHLivePhotoViewDelegate_Extensions::CanBeginPlayback(PhotosUI.IPHLivePhotoViewDelegate,PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)",
			"PhotosUI.PHLivePhotoViewDelegate_Extensions::DidEndPlayback(PhotosUI.IPHLivePhotoViewDelegate,PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)",
			"PhotosUI.PHLivePhotoViewDelegate_Extensions::WillBeginPlayback(PhotosUI.IPHLivePhotoViewDelegate,PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)",
			"PhotosUI.PHPhotoLibrary_PhotosUISupport::PresentLimitedLibraryPicker(Photos.PHPhotoLibrary,UIKit.UIViewController)",
			"PhotosUI.PHPhotoLibrary_PhotosUISupport::PresentLimitedLibraryPicker(Photos.PHPhotoLibrary,UIKit.UIViewController,System.Action`1<System.String[]>)",
			"PhotosUI.PHPickerConfiguration::.ctor(Photos.PHPhotoLibrary)",
			"PhotosUI.PHPickerConfiguration::Copy(Foundation.NSZone)",
			"PhotosUI.PHPickerConfiguration::set_Filter(PhotosUI.PHPickerFilter)",
			"PhotosUI.PHPickerFilter::Copy(Foundation.NSZone)",
			"PhotosUI.PHPickerViewController::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHPickerViewController::.ctor(PhotosUI.PHPickerConfiguration)",
			"PhotosUI.PHPickerViewControllerDelegateWrapper::DidFinishPicking(PhotosUI.PHPickerViewController,PhotosUI.PHPickerResult[])",
			"PhotosUI.PHProjectAssetElement::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHProjectAssetElement::EncodeTo(Foundation.NSCoder)",
			"PhotosUI.PHProjectElement::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHProjectElement::EncodeTo(Foundation.NSCoder)",
			"PhotosUI.PHProjectExtensionContext::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHProjectExtensionContext::Copy(Foundation.NSZone)",
			"PhotosUI.PHProjectExtensionContext::EncodeTo(Foundation.NSCoder)",
			"PhotosUI.PHProjectExtensionContext::ShowEditor(Photos.PHAsset)",
			"PhotosUI.PHProjectExtensionContext::UpdatedProjectInfo(PhotosUI.PHProjectInfo,System.Action`1<PhotosUI.PHProjectInfo>)",
			"PhotosUI.PHProjectExtensionController_Extensions::GetSupportedProjectTypes(PhotosUI.IPHProjectExtensionController)",
			"PhotosUI.PHProjectExtensionController_Extensions::GetTypeDescriptionDataSource(PhotosUI.IPHProjectExtensionController,Foundation.NSString,PhotosUI.IPHProjectTypeDescriptionInvalidator)",
			"PhotosUI.PHProjectExtensionControllerWrapper::BeginProject(PhotosUI.PHProjectExtensionContext,PhotosUI.PHProjectInfo,System.Action`1<Foundation.NSError>)",
			"PhotosUI.PHProjectExtensionControllerWrapper::ResumeProject(PhotosUI.PHProjectExtensionContext,System.Action`1<Foundation.NSError>)",
			"PhotosUI.PHProjectInfo::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHProjectInfo::EncodeTo(Foundation.NSCoder)",
			"PhotosUI.PHProjectJournalEntryElement::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHProjectJournalEntryElement::EncodeTo(Foundation.NSCoder)",
			"PhotosUI.PHProjectMapElement::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHProjectMapElement::EncodeTo(Foundation.NSCoder)",
			"PhotosUI.PHProjectRegionOfInterest::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHProjectRegionOfInterest::EncodeTo(Foundation.NSCoder)",
			"PhotosUI.PHProjectSection::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHProjectSection::EncodeTo(Foundation.NSCoder)",
			"PhotosUI.PHProjectSectionContent::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHProjectSectionContent::EncodeTo(Foundation.NSCoder)",
			"PhotosUI.PHProjectTextElement::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHProjectTextElement::EncodeTo(Foundation.NSCoder)",
			"PhotosUI.PHProjectTypeDescription::.ctor(Foundation.NSCoder)",
			"PhotosUI.PHProjectTypeDescription::.ctor(Foundation.NSString,System.String,Foundation.NSAttributedString,AppKit.NSImage,PhotosUI.PHProjectTypeDescription[])",
			"PhotosUI.PHProjectTypeDescription::.ctor(Foundation.NSString,System.String,Foundation.NSAttributedString,AppKit.NSImage,System.Boolean)",
			"PhotosUI.PHProjectTypeDescription::.ctor(Foundation.NSString,System.String,System.String,AppKit.NSImage)",
			"PhotosUI.PHProjectTypeDescription::.ctor(Foundation.NSString,System.String,System.String,AppKit.NSImage,PhotosUI.PHProjectTypeDescription[])",
			"PhotosUI.PHProjectTypeDescription::.ctor(Foundation.NSString,System.String,System.String,AppKit.NSImage,System.Boolean)",
			"PhotosUI.PHProjectTypeDescription::EncodeTo(Foundation.NSCoder)",
			"PhotosUI.PHProjectTypeDescriptionDataSource_Extensions::WillDiscardDataSource(PhotosUI.IPHProjectTypeDescriptionDataSource)",
			"PhotosUI.PHProjectTypeDescriptionDataSourceWrapper::GetFooterTextForSubtypes(Foundation.NSString)",
			"PhotosUI.PHProjectTypeDescriptionDataSourceWrapper::GetSubtypes(Foundation.NSString)",
			"PhotosUI.PHProjectTypeDescriptionDataSourceWrapper::GetTypeDescription(Foundation.NSString)",
			"PhotosUI.PHProjectTypeDescriptionInvalidatorWrapper::InvalidateFooterTextForSubtypes(Foundation.NSString)",
			"PhotosUI.PHProjectTypeDescriptionInvalidatorWrapper::InvalidateTypeDescription(Foundation.NSString)",
			"PrintCore.PMPageFormat::Create(PrintCore.PMPaper)",
			"PrintCore.PMPageFormat::TryCreate(PrintCore.PMPageFormat&,PrintCore.PMPaper)",
			"PrintCore.PMPaper::GetLocalizedName(PrintCore.PMPrinter)",
			"PrintCore.PMPrinter::GetOutputResolution(PrintCore.PMPrintSettings)",
			"PrintCore.PMPrinter::SetOutputResolution(PrintCore.PMPrintSettings,PrintCore.PMResolution)",
			"PrintCore.PMPrinter::TryGetMimeTypes(PrintCore.PMPrintSettings,System.String[]&)",
			"PrintCore.PMPrinter::TryPrintFile(PrintCore.PMPrintSettings,PrintCore.PMPageFormat,Foundation.NSUrl,System.String)",
			"PrintCore.PMPrinter::TryPrintFromProvider(PrintCore.PMPrintSettings,PrintCore.PMPageFormat,CoreGraphics.CGDataProvider,System.String)",
			"PrintCore.PMPrintSession::AssignDefaultPageFormat(PrintCore.PMPageFormat)",
			"PrintCore.PMPrintSession::AssignDefaultSettings(PrintCore.PMPrintSettings)",
			"PrintCore.PMPrintSession::ValidatePrintSettings(PrintCore.PMPrintSettings,System.Boolean&)",
			"PrintCore.PMPrintSettings::CopySettings(PrintCore.PMPrintSettings)",
			"PushKit.PKPushRegistry::.ctor(CoreFoundation.DispatchQueue)",
			"PushKit.PKPushRegistry::set_DesiredPushTypes(Foundation.NSSet)",
			"PushKit.PKPushRegistryDelegate_Extensions::DidInvalidatePushToken(PushKit.IPKPushRegistryDelegate,PushKit.PKPushRegistry,System.String)",
			"PushKit.PKPushRegistryDelegate_Extensions::DidReceiveIncomingPush(PushKit.IPKPushRegistryDelegate,PushKit.PKPushRegistry,PushKit.PKPushPayload,System.String)",
			"PushKit.PKPushRegistryDelegate_Extensions::DidReceiveIncomingPush(PushKit.IPKPushRegistryDelegate,PushKit.PKPushRegistry,PushKit.PKPushPayload,System.String,System.Action)",
			"PushKit.PKPushRegistryDelegateWrapper::DidUpdatePushCredentials(PushKit.PKPushRegistry,PushKit.PKPushCredentials,System.String)",
			"QuartzComposer.QCComposition::Copy(Foundation.NSZone)",
			"QuartzComposer.QCComposition::GetComposition(Foundation.NSData)",
			"QuartzComposer.QCCompositionLayer::.ctor(Foundation.NSCoder)",
			"QuartzComposer.QCCompositionLayer::.ctor(QuartzComposer.QCComposition)",
			"QuartzComposer.QCCompositionLayer::Create(QuartzComposer.QCComposition)",
			"QuartzComposer.QCCompositionRepository::GetCompositions(Foundation.NSArray,Foundation.NSDictionary)",
			"QuickLook.QLPreviewController::.ctor(Foundation.NSCoder)",
			"QuickLook.QLPreviewController::.ctor(System.String,Foundation.NSBundle)",
			"QuickLook.QLPreviewController::CanPreviewItem(QuickLook.IQLPreviewItem)",
			"QuickLook.QLPreviewControllerDataSourceWrapper::GetPreviewItem(QuickLook.QLPreviewController,System.IntPtr)",
			"QuickLook.QLPreviewControllerDataSourceWrapper::PreviewItemCount(QuickLook.QLPreviewController)",
			"QuickLook.QLPreviewControllerDelegate_Extensions::DidDismiss(QuickLook.IQLPreviewControllerDelegate,QuickLook.QLPreviewController)",
			"QuickLook.QLPreviewControllerDelegate_Extensions::DidSaveEditedCopy(QuickLook.IQLPreviewControllerDelegate,QuickLook.QLPreviewController,QuickLook.IQLPreviewItem,Foundation.NSUrl)",
			"QuickLook.QLPreviewControllerDelegate_Extensions::DidUpdateContents(QuickLook.IQLPreviewControllerDelegate,QuickLook.QLPreviewController,QuickLook.IQLPreviewItem)",
			"QuickLook.QLPreviewControllerDelegate_Extensions::FrameForPreviewItem(QuickLook.IQLPreviewControllerDelegate,QuickLook.QLPreviewController,QuickLook.IQLPreviewItem,UIKit.UIView&)",
			"QuickLook.QLPreviewControllerDelegate_Extensions::GetEditingMode(QuickLook.IQLPreviewControllerDelegate,QuickLook.QLPreviewController,QuickLook.IQLPreviewItem)",
			"QuickLook.QLPreviewControllerDelegate_Extensions::ShouldOpenUrl(QuickLook.IQLPreviewControllerDelegate,QuickLook.QLPreviewController,Foundation.NSUrl,QuickLook.IQLPreviewItem)",
			"QuickLook.QLPreviewControllerDelegate_Extensions::TransitionImageForPreviewItem(QuickLook.IQLPreviewControllerDelegate,QuickLook.QLPreviewController,QuickLook.IQLPreviewItem,CoreGraphics.CGRect)",
			"QuickLook.QLPreviewControllerDelegate_Extensions::TransitionViewForPreviewItem(QuickLook.IQLPreviewControllerDelegate,QuickLook.QLPreviewController,QuickLook.IQLPreviewItem)",
			"QuickLook.QLPreviewControllerDelegate_Extensions::WillDismiss(QuickLook.IQLPreviewControllerDelegate,QuickLook.QLPreviewController)",
			"QuickLook.QLPreviewingController_Extensions::PreparePreviewOfFile(QuickLook.IQLPreviewingController,Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"QuickLook.QLPreviewingController_Extensions::PreparePreviewOfSearchableItem(QuickLook.IQLPreviewingController,System.String,System.String,System.Action`1<Foundation.NSError>)",
			"QuickLook.QLPreviewingController_Extensions::ProvidePreview(QuickLook.IQLPreviewingController,QuickLook.QLFilePreviewRequest,System.Action`2<QuickLook.QLPreviewReply,Foundation.NSError>)",
			"QuickLook.QLPreviewItem_Extensions::GetPreviewItemTitle(QuickLook.IQLPreviewItem)",
			"QuickLook.QLPreviewProvider::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"QuickLook.QLPreviewReply::.ctor(Foundation.NSUrl)",
			"QuickLook.QLPreviewReply::.ctor(UniformTypeIdentifiers.UTType,CoreGraphics.CGSize,QuickLook.QLPreviewReplyDataCreationHandler)",
			"QuickLook.QLPreviewReply::set_Attachments(Foundation.NSDictionary`2<Foundation.NSString,QuickLook.QLPreviewReplyAttachment>)",
			"QuickLook.QLPreviewReplyAttachment::.ctor(Foundation.NSData,UniformTypeIdentifiers.UTType)",
			"QuickLook.QLPreviewSceneActivationConfiguration::.ctor(Foundation.NSUrl[],QuickLook.QLPreviewSceneOptions)",
			"QuickLook.QLPreviewSceneActivationConfiguration::.ctor(Foundation.NSUserActivity)",
			"QuickLook.QLThumbnailImage::Create(Foundation.NSUrl,CoreGraphics.CGSize,System.Single,System.Boolean)",
			"QuickLookThumbnailing.QLThumbnailGenerationRequest::.ctor(Foundation.NSCoder)",
			"QuickLookThumbnailing.QLThumbnailGenerationRequest::.ctor(Foundation.NSUrl,CoreGraphics.CGSize,System.Runtime.InteropServices.NFloat,QuickLookThumbnailing.QLThumbnailGenerationRequestRepresentationTypes)",
			"QuickLookThumbnailing.QLThumbnailGenerationRequest::Copy(Foundation.NSZone)",
			"QuickLookThumbnailing.QLThumbnailGenerationRequest::EncodeTo(Foundation.NSCoder)",
			"QuickLookThumbnailing.QLThumbnailGenerationRequest::set_ContentType(UniformTypeIdentifiers.UTType)",
			"QuickLookThumbnailing.QLThumbnailGenerator::CancelRequest(QuickLookThumbnailing.QLThumbnailGenerationRequest)",
			"QuickLookThumbnailing.QLThumbnailGenerator::GenerateBestRepresentation(QuickLookThumbnailing.QLThumbnailGenerationRequest,System.Action`2<QuickLookThumbnailing.QLThumbnailRepresentation,Foundation.NSError>)",
			"QuickLookThumbnailing.QLThumbnailGenerator::GenerateRepresentations(QuickLookThumbnailing.QLThumbnailGenerationRequest,System.Action`3<QuickLookThumbnailing.QLThumbnailRepresentation,QuickLookThumbnailing.QLThumbnailRepresentationType,Foundation.NSError>)",
			"QuickLookThumbnailing.QLThumbnailGenerator::SaveBestRepresentation(QuickLookThumbnailing.QLThumbnailGenerationRequest,Foundation.NSUrl,System.String,System.Action`1<Foundation.NSError>)",
			"QuickLookThumbnailing.QLThumbnailProvider::ProvideThumbnail(QuickLookThumbnailing.QLFileThumbnailRequest,System.Action`2<QuickLookThumbnailing.QLThumbnailReply,Foundation.NSError>)",
			"QuickLookThumbnailing.QLThumbnailReply::CreateReply(Foundation.NSUrl)",
			"QuickLookUI.QLPreviewingController_Extensions::PreparePreviewOfFile(QuickLookUI.IQLPreviewingController,Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"QuickLookUI.QLPreviewingController_Extensions::PreparePreviewOfSearchableItem(QuickLookUI.IQLPreviewingController,System.String,System.String,System.Action`1<Foundation.NSError>)",
			"QuickLookUI.QLPreviewingController_Extensions::ProvidePreview(QuickLookUI.IQLPreviewingController,QuickLookUI.QLFilePreviewRequest,System.Action`2<QuickLookUI.QLPreviewReply,Foundation.NSError>)",
			"QuickLookUI.QLPreviewItem_Extensions::GetPreviewItemDisplayState(QuickLookUI.IQLPreviewItem)",
			"QuickLookUI.QLPreviewItem_Extensions::GetPreviewItemTitle(QuickLookUI.IQLPreviewItem)",
			"QuickLookUI.QLPreviewPanel::.ctor(Foundation.NSCoder)",
			"QuickLookUI.QLPreviewPanel::EnterFullScreenMode(AppKit.NSScreen,Foundation.NSDictionary)",
			"QuickLookUI.QLPreviewPanel::ExitFullScreenModeWithOptions(Foundation.NSDictionary)",
			"QuickLookUI.QLPreviewPanel::set_DisplayState(Foundation.NSObject)",
			"QuickLookUI.QLPreviewPanelController::AcceptsPreviewPanelControl(Foundation.NSObject,QuickLookUI.QLPreviewPanel)",
			"QuickLookUI.QLPreviewPanelController::BeginPreviewPanelControl(Foundation.NSObject,QuickLookUI.QLPreviewPanel)",
			"QuickLookUI.QLPreviewPanelController::EndPreviewPanelControl(Foundation.NSObject,QuickLookUI.QLPreviewPanel)",
			"QuickLookUI.QLPreviewPanelDataSourceWrapper::NumberOfPreviewItemsInPreviewPanel(QuickLookUI.QLPreviewPanel)",
			"QuickLookUI.QLPreviewPanelDataSourceWrapper::PreviewItemAtIndex(QuickLookUI.QLPreviewPanel,System.IntPtr)",
			"QuickLookUI.QLPreviewPanelDelegate_Extensions::HandleEvent(QuickLookUI.IQLPreviewPanelDelegate,QuickLookUI.QLPreviewPanel,AppKit.NSEvent)",
			"QuickLookUI.QLPreviewPanelDelegate_Extensions::SourceFrameOnScreenForPreviewItem(QuickLookUI.IQLPreviewPanelDelegate,QuickLookUI.QLPreviewPanel,QuickLookUI.IQLPreviewItem)",
			"QuickLookUI.QLPreviewPanelDelegate_Extensions::TransitionImageForPreviewItem(QuickLookUI.IQLPreviewPanelDelegate,QuickLookUI.QLPreviewPanel,QuickLookUI.IQLPreviewItem,CoreGraphics.CGRect)",
			"QuickLookUI.QLPreviewProvider::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"QuickLookUI.QLPreviewReply::.ctor(Foundation.NSUrl)",
			"QuickLookUI.QLPreviewReply::.ctor(UniformTypeIdentifiers.UTType,CoreGraphics.CGSize,QuickLookUI.QLPreviewReplyDataCreationHandler)",
			"QuickLookUI.QLPreviewReply::set_Attachments(Foundation.NSDictionary`2<Foundation.NSString,QuickLookUI.QLPreviewReplyAttachment>)",
			"QuickLookUI.QLPreviewReplyAttachment::.ctor(Foundation.NSData,UniformTypeIdentifiers.UTType)",
			"QuickLookUI.QLPreviewView::.ctor(Foundation.NSCoder)",
			"QuickLookUI.QLPreviewView::set_DisplayState(Foundation.NSObject)",
			"QuickLookUI.QLPreviewView::set_PreviewItem(QuickLookUI.IQLPreviewItem)",
			"ReplayKit.NSExtensionContext_RPBroadcastExtension::CompleteRequest(Foundation.NSExtensionContext,Foundation.NSUrl,Foundation.NSDictionary`2<Foundation.NSString,Foundation.INSCoding>)",
			"ReplayKit.NSExtensionContext_RPBroadcastExtension::CompleteRequest(Foundation.NSExtensionContext,Foundation.NSUrl,ReplayKit.RPBroadcastConfiguration,Foundation.NSDictionary`2<Foundation.NSString,Foundation.INSCoding>)",
			"ReplayKit.NSExtensionContext_RPBroadcastExtension::LoadBroadcastingApplicationInfo(Foundation.NSExtensionContext,ReplayKit.LoadBroadcastingHandler)",
			"ReplayKit.RPBroadcastActivityController::ShowBroadcastPicker(CoreGraphics.CGPoint,AppKit.NSWindow,System.String,System.Action`2<ReplayKit.RPBroadcastActivityController,Foundation.NSError>)",
			"ReplayKit.RPBroadcastActivityControllerDelegateWrapper::DidFinish(ReplayKit.RPBroadcastActivityController,ReplayKit.RPBroadcastController,Foundation.NSError)",
			"ReplayKit.RPBroadcastActivityViewController::.ctor(Foundation.NSCoder)",
			"ReplayKit.RPBroadcastActivityViewController::.ctor(System.String,Foundation.NSBundle)",
			"ReplayKit.RPBroadcastActivityViewControllerDelegateWrapper::DidFinish(ReplayKit.RPBroadcastActivityViewController,ReplayKit.RPBroadcastController,Foundation.NSError)",
			"ReplayKit.RPBroadcastConfiguration::.ctor(Foundation.NSCoder)",
			"ReplayKit.RPBroadcastConfiguration::EncodeTo(Foundation.NSCoder)",
			"ReplayKit.RPBroadcastConfiguration::set_VideoCompressionProperties(AVFoundation.AVVideoCodecSettings)",
			"ReplayKit.RPBroadcastConfiguration::set_WeakVideoCompressionProperties(Foundation.NSDictionary`2<Foundation.NSString,Foundation.INSSecureCoding>)",
			"ReplayKit.RPBroadcastControllerDelegate_Extensions::DidFinish(ReplayKit.IRPBroadcastControllerDelegate,ReplayKit.RPBroadcastController,Foundation.NSError)",
			"ReplayKit.RPBroadcastControllerDelegate_Extensions::DidUpdateBroadcastUrl(ReplayKit.IRPBroadcastControllerDelegate,ReplayKit.RPBroadcastController,Foundation.NSUrl)",
			"ReplayKit.RPBroadcastControllerDelegate_Extensions::DidUpdateServiceInfo(ReplayKit.IRPBroadcastControllerDelegate,ReplayKit.RPBroadcastController,Foundation.NSDictionary`2<Foundation.NSString,Foundation.INSCoding>)",
			"ReplayKit.RPBroadcastHandler::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"ReplayKit.RPBroadcastHandler::UpdateServiceInfo(Foundation.NSDictionary`2<Foundation.NSString,Foundation.INSCoding>)",
			"ReplayKit.RPBroadcastMP4ClipHandler::FinishedProcessingMP4Clip(ReplayKit.RPBroadcastConfiguration,Foundation.NSError)",
			"ReplayKit.RPBroadcastMP4ClipHandler::ProcessMP4Clip(Foundation.NSUrl,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.Boolean)",
			"ReplayKit.RPBroadcastSampleHandler::BroadcastAnnotated(Foundation.NSDictionary)",
			"ReplayKit.RPBroadcastSampleHandler::BroadcastStarted(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"ReplayKit.RPBroadcastSampleHandler::FinishBroadcast(Foundation.NSError)",
			"ReplayKit.RPBroadcastSampleHandler::ProcessSampleBuffer(CoreMedia.CMSampleBuffer,ReplayKit.RPSampleBufferType)",
			"ReplayKit.RPPreviewViewController::.ctor(Foundation.NSCoder)",
			"ReplayKit.RPPreviewViewController::.ctor(System.String,Foundation.NSBundle)",
			"ReplayKit.RPPreviewViewControllerDelegate_Extensions::DidFinish(ReplayKit.IRPPreviewViewControllerDelegate,ReplayKit.RPPreviewViewController)",
			"ReplayKit.RPPreviewViewControllerDelegate_Extensions::DidFinish(ReplayKit.IRPPreviewViewControllerDelegate,ReplayKit.RPPreviewViewController,Foundation.NSSet`1<Foundation.NSString>)",
			"ReplayKit.RPScreenRecorder::ExportClip(Foundation.NSUrl,System.Double,System.Action`1<Foundation.NSError>)",
			"ReplayKit.RPScreenRecorder::StopRecording(Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"ReplayKit.RPScreenRecorderDelegate_Extensions::DidChangeAvailability(ReplayKit.IRPScreenRecorderDelegate,ReplayKit.RPScreenRecorder)",
			"ReplayKit.RPScreenRecorderDelegate_Extensions::DidStopRecording(ReplayKit.IRPScreenRecorderDelegate,ReplayKit.RPScreenRecorder,Foundation.NSError,ReplayKit.RPPreviewViewController)",
			"ReplayKit.RPScreenRecorderDelegate_Extensions::DidStopRecording(ReplayKit.IRPScreenRecorderDelegate,ReplayKit.RPScreenRecorder,ReplayKit.RPPreviewViewController,Foundation.NSError)",
			"ReplayKit.RPSystemBroadcastPickerView::.ctor(Foundation.NSCoder)",
			"ReplayKit.RPSystemBroadcastPickerView::EncodeTo(Foundation.NSCoder)",
			"SafariServices.SFAuthenticationSession::.ctor(Foundation.NSUrl,System.String,SafariServices.SFAuthenticationCompletionHandler)",
			"SafariServices.SFSafariApplication::DispatchMessage(System.String,System.String,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.Action`1<Foundation.NSError>)",
			"SafariServices.SFSafariApplication::OpenWindow(Foundation.NSUrl,System.Action`1<SafariServices.SFSafariWindow>)",
			"SafariServices.SFSafariExtensionHandler::AdditionalRequestHeaders(Foundation.NSUrl,System.Action`1<Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSString>>)",
			"SafariServices.SFSafariExtensionHandler::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"SafariServices.SFSafariExtensionHandler::ContentBlocker(System.String,Foundation.NSUrl[],SafariServices.SFSafariPage)",
			"SafariServices.SFSafariExtensionHandler::ContextMenuItemSelected(System.String,SafariServices.SFSafariPage,Foundation.NSDictionary)",
			"SafariServices.SFSafariExtensionHandler::MessageReceived(System.String,SafariServices.SFSafariPage,Foundation.NSDictionary)",
			"SafariServices.SFSafariExtensionHandler::MessageReceivedFromContainingApp(System.String,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"SafariServices.SFSafariExtensionHandler::PopoverDidClose(SafariServices.SFSafariWindow)",
			"SafariServices.SFSafariExtensionHandler::PopoverWillShow(SafariServices.SFSafariWindow)",
			"SafariServices.SFSafariExtensionHandler::ToolbarItemClicked(SafariServices.SFSafariWindow)",
			"SafariServices.SFSafariExtensionHandler::ValidateContextMenuItem(System.String,SafariServices.SFSafariPage,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,SafariServices.SFExtensionValidationHandler)",
			"SafariServices.SFSafariExtensionHandler::ValidateToolbarItem(SafariServices.SFSafariWindow,System.Action`2<System.Boolean,Foundation.NSString>)",
			"SafariServices.SFSafariExtensionHandler::WillNavigate(SafariServices.SFSafariPage,Foundation.NSUrl)",
			"SafariServices.SFSafariExtensionHandling_Extensions::AdditionalRequestHeaders(SafariServices.ISFSafariExtensionHandling,Foundation.NSUrl,System.Action`1<Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSString>>)",
			"SafariServices.SFSafariExtensionHandling_Extensions::ContentBlocker(SafariServices.ISFSafariExtensionHandling,System.String,Foundation.NSUrl[],SafariServices.SFSafariPage)",
			"SafariServices.SFSafariExtensionHandling_Extensions::ContextMenuItemSelected(SafariServices.ISFSafariExtensionHandling,System.String,SafariServices.SFSafariPage,Foundation.NSDictionary)",
			"SafariServices.SFSafariExtensionHandling_Extensions::GetPopoverViewController(SafariServices.ISFSafariExtensionHandling)",
			"SafariServices.SFSafariExtensionHandling_Extensions::MessageReceived(SafariServices.ISFSafariExtensionHandling,System.String,SafariServices.SFSafariPage,Foundation.NSDictionary)",
			"SafariServices.SFSafariExtensionHandling_Extensions::MessageReceivedFromContainingApp(SafariServices.ISFSafariExtensionHandling,System.String,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"SafariServices.SFSafariExtensionHandling_Extensions::PopoverDidClose(SafariServices.ISFSafariExtensionHandling,SafariServices.SFSafariWindow)",
			"SafariServices.SFSafariExtensionHandling_Extensions::PopoverWillShow(SafariServices.ISFSafariExtensionHandling,SafariServices.SFSafariWindow)",
			"SafariServices.SFSafariExtensionHandling_Extensions::ToolbarItemClicked(SafariServices.ISFSafariExtensionHandling,SafariServices.SFSafariWindow)",
			"SafariServices.SFSafariExtensionHandling_Extensions::ValidateContextMenuItem(SafariServices.ISFSafariExtensionHandling,System.String,SafariServices.SFSafariPage,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,SafariServices.SFExtensionValidationHandler)",
			"SafariServices.SFSafariExtensionHandling_Extensions::ValidateToolbarItem(SafariServices.ISFSafariExtensionHandling,SafariServices.SFSafariWindow,System.Action`2<System.Boolean,Foundation.NSString>)",
			"SafariServices.SFSafariExtensionHandling_Extensions::WillNavigate(SafariServices.ISFSafariExtensionHandling,SafariServices.SFSafariPage,Foundation.NSUrl)",
			"SafariServices.SFSafariExtensionViewController::.ctor(Foundation.NSCoder)",
			"SafariServices.SFSafariExtensionViewController::.ctor(System.String,Foundation.NSBundle)",
			"SafariServices.SFSafariPage::.ctor(Foundation.NSCoder)",
			"SafariServices.SFSafariPage::Copy(Foundation.NSZone)",
			"SafariServices.SFSafariPage::DispatchMessageToScript(System.String,Foundation.NSDictionary)",
			"SafariServices.SFSafariPage::EncodeTo(Foundation.NSCoder)",
			"SafariServices.SFSafariTab::.ctor(Foundation.NSCoder)",
			"SafariServices.SFSafariTab::Copy(Foundation.NSZone)",
			"SafariServices.SFSafariTab::EncodeTo(Foundation.NSCoder)",
			"SafariServices.SFSafariTab::NavigateTo(Foundation.NSUrl)",
			"SafariServices.SFSafariToolbarItem::.ctor(Foundation.NSCoder)",
			"SafariServices.SFSafariToolbarItem::Copy(Foundation.NSZone)",
			"SafariServices.SFSafariToolbarItem::EncodeTo(Foundation.NSCoder)",
			"SafariServices.SFSafariToolbarItem::SetImage(AppKit.NSImage)",
			"SafariServices.SFSafariViewController::.ctor(Foundation.NSCoder)",
			"SafariServices.SFSafariViewController::.ctor(Foundation.NSUrl)",
			"SafariServices.SFSafariViewController::.ctor(Foundation.NSUrl,SafariServices.SFSafariViewControllerConfiguration)",
			"SafariServices.SFSafariViewController::.ctor(Foundation.NSUrl,System.Boolean)",
			"SafariServices.SFSafariViewController::.ctor(System.String,Foundation.NSBundle)",
			"SafariServices.SFSafariViewControllerActivityButton::.ctor(Foundation.NSCoder)",
			"SafariServices.SFSafariViewControllerActivityButton::.ctor(UIKit.UIImage,System.String)",
			"SafariServices.SFSafariViewControllerActivityButton::Copy(Foundation.NSZone)",
			"SafariServices.SFSafariViewControllerActivityButton::EncodeTo(Foundation.NSCoder)",
			"SafariServices.SFSafariViewControllerConfiguration::Copy(Foundation.NSZone)",
			"SafariServices.SFSafariViewControllerConfiguration::set_ActivityButton(SafariServices.SFSafariViewControllerActivityButton)",
			"SafariServices.SFSafariViewControllerConfiguration::set_EventAttribution(UIKit.UIEventAttribution)",
			"SafariServices.SFSafariViewControllerDelegate_Extensions::DidCompleteInitialLoad(SafariServices.ISFSafariViewControllerDelegate,SafariServices.SFSafariViewController,System.Boolean)",
			"SafariServices.SFSafariViewControllerDelegate_Extensions::DidFinish(SafariServices.ISFSafariViewControllerDelegate,SafariServices.SFSafariViewController)",
			"SafariServices.SFSafariViewControllerDelegate_Extensions::GetActivityItems(SafariServices.ISFSafariViewControllerDelegate,SafariServices.SFSafariViewController,Foundation.NSUrl,System.String)",
			"SafariServices.SFSafariViewControllerDelegate_Extensions::GetExcludedActivityTypes(SafariServices.ISFSafariViewControllerDelegate,SafariServices.SFSafariViewController,Foundation.NSUrl,System.String)",
			"SafariServices.SFSafariViewControllerDelegate_Extensions::InitialLoadDidRedirectToUrl(SafariServices.ISFSafariViewControllerDelegate,SafariServices.SFSafariViewController,Foundation.NSUrl)",
			"SafariServices.SFSafariViewControllerDelegate_Extensions::WillOpenInBrowser(SafariServices.ISFSafariViewControllerDelegate,SafariServices.SFSafariViewController)",
			"SafariServices.SFSafariWindow::.ctor(Foundation.NSCoder)",
			"SafariServices.SFSafariWindow::Copy(Foundation.NSZone)",
			"SafariServices.SFSafariWindow::EncodeTo(Foundation.NSCoder)",
			"SafariServices.SFSafariWindow::OpenTab(Foundation.NSUrl,System.Boolean,System.Action`1<SafariServices.SFSafariTab>)",
			"SafariServices.SFUniversalLink::.ctor(Foundation.NSUrl)",
			"SafariServices.SSReadingList::Add(Foundation.NSUrl,System.String,System.String,Foundation.NSError&)",
			"SceneKit.SCNAccelerationConstraint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNAction::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNAction::Copy(Foundation.NSZone)",
			"SceneKit.SCNAction::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNAction::PlayAudioSource(SceneKit.SCNAudioSource,System.Boolean)",
			"SceneKit.SCNAction::RepeatAction(SceneKit.SCNAction,System.UIntPtr)",
			"SceneKit.SCNAction::RepeatActionForever(SceneKit.SCNAction)",
			"SceneKit.SCNAction::Run(System.Action`1<SceneKit.SCNNode>,CoreFoundation.DispatchQueue)",
			"SceneKit.SCNActionableWrapper::RunAction(SceneKit.SCNAction)",
			"SceneKit.SCNActionableWrapper::RunAction(SceneKit.SCNAction,System.Action)",
			"SceneKit.SCNActionableWrapper::RunAction(SceneKit.SCNAction,System.String)",
			"SceneKit.SCNActionableWrapper::RunAction(SceneKit.SCNAction,System.String,System.Action)",
			"SceneKit.SCNAnimatableWrapper::AddAnimation(SceneKit.ISCNAnimationProtocol,System.String)",
			"SceneKit.SCNAnimatableWrapper::AddAnimation(SceneKit.SCNAnimationPlayer,Foundation.NSString)",
			"SceneKit.SCNAnimatableWrapper::GetAnimation(Foundation.NSString)",
			"SceneKit.SCNAnimatableWrapper::GetAnimationPlayer(Foundation.NSString)",
			"SceneKit.SCNAnimatableWrapper::IsAnimationPaused(Foundation.NSString)",
			"SceneKit.SCNAnimatableWrapper::PauseAnimation(Foundation.NSString)",
			"SceneKit.SCNAnimatableWrapper::RemoveAnimation(Foundation.NSString)",
			"SceneKit.SCNAnimatableWrapper::RemoveAnimation(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNAnimatableWrapper::RemoveAnimationUsingBlendOutDuration(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNAnimatableWrapper::ResumeAnimation(Foundation.NSString)",
			"SceneKit.SCNAnimatableWrapper::SetSpeed(System.Runtime.InteropServices.NFloat,Foundation.NSString)",
			"SceneKit.SCNAnimation::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNAnimation::Copy(Foundation.NSZone)",
			"SceneKit.SCNAnimation::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNAnimation::FromCAAnimation(CoreAnimation.CAAnimation)",
			"SceneKit.SCNAnimation::FromUrl(Foundation.NSUrl)",
			"SceneKit.SCNAnimation::set_TimingFunction(SceneKit.SCNTimingFunction)",
			"SceneKit.SCNAnimationPlayer::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNAnimationPlayer::AddAnimation(SceneKit.ISCNAnimationProtocol,System.String)",
			"SceneKit.SCNAnimationPlayer::AddAnimation(SceneKit.SCNAnimationPlayer,Foundation.NSString)",
			"SceneKit.SCNAnimationPlayer::Copy(Foundation.NSZone)",
			"SceneKit.SCNAnimationPlayer::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNAnimationPlayer::FromAnimation(SceneKit.SCNAnimation)",
			"SceneKit.SCNAnimationPlayer::GetAnimation(Foundation.NSString)",
			"SceneKit.SCNAnimationPlayer::GetAnimationPlayer(Foundation.NSString)",
			"SceneKit.SCNAnimationPlayer::IsAnimationPaused(Foundation.NSString)",
			"SceneKit.SCNAnimationPlayer::PauseAnimation(Foundation.NSString)",
			"SceneKit.SCNAnimationPlayer::RemoveAnimation(Foundation.NSString)",
			"SceneKit.SCNAnimationPlayer::RemoveAnimation(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNAnimationPlayer::RemoveAnimationUsingBlendOutDuration(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNAnimationPlayer::ResumeAnimation(Foundation.NSString)",
			"SceneKit.SCNAnimationPlayer::SetSpeed(System.Runtime.InteropServices.NFloat,Foundation.NSString)",
			"SceneKit.SCNAudioPlayer::.ctor(AVFoundation.AVAudioNode)",
			"SceneKit.SCNAudioPlayer::.ctor(SceneKit.SCNAudioSource)",
			"SceneKit.SCNAudioPlayer::AVAudioNode(AVFoundation.AVAudioNode)",
			"SceneKit.SCNAudioPlayer::FromSource(SceneKit.SCNAudioSource)",
			"SceneKit.SCNAudioSource::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNAudioSource::.ctor(Foundation.NSUrl)",
			"SceneKit.SCNAudioSource::Copy(Foundation.NSZone)",
			"SceneKit.SCNAudioSource::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNAvoidOccluderConstraint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNAvoidOccluderConstraint::FromTarget(SceneKit.SCNNode)",
			"SceneKit.SCNAvoidOccluderConstraint::set_Target(SceneKit.SCNNode)",
			"SceneKit.SCNAvoidOccluderConstraintDelegate_Extensions::DidAvoidOccluder(SceneKit.ISCNAvoidOccluderConstraintDelegate,SceneKit.SCNAvoidOccluderConstraint,SceneKit.SCNNode,SceneKit.SCNNode)",
			"SceneKit.SCNAvoidOccluderConstraintDelegate_Extensions::ShouldAvoidOccluder(SceneKit.ISCNAvoidOccluderConstraintDelegate,SceneKit.SCNAvoidOccluderConstraint,SceneKit.SCNNode,SceneKit.SCNNode)",
			"SceneKit.SCNBillboardConstraint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNBox::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNCamera::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNCamera::AddAnimation(SceneKit.ISCNAnimationProtocol,System.String)",
			"SceneKit.SCNCamera::AddAnimation(SceneKit.SCNAnimationPlayer,Foundation.NSString)",
			"SceneKit.SCNCamera::Copy(Foundation.NSZone)",
			"SceneKit.SCNCamera::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNCamera::FromModelCamera(ModelIO.MDLCamera)",
			"SceneKit.SCNCamera::GetAnimation(Foundation.NSString)",
			"SceneKit.SCNCamera::GetAnimationPlayer(Foundation.NSString)",
			"SceneKit.SCNCamera::IsAnimationPaused(Foundation.NSString)",
			"SceneKit.SCNCamera::PauseAnimation(Foundation.NSString)",
			"SceneKit.SCNCamera::RemoveAnimation(Foundation.NSString)",
			"SceneKit.SCNCamera::RemoveAnimation(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNCamera::RemoveAnimationUsingBlendOutDuration(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNCamera::ResumeAnimation(Foundation.NSString)",
			"SceneKit.SCNCamera::set_Technique(SceneKit.SCNTechnique)",
			"SceneKit.SCNCamera::SetSpeed(System.Runtime.InteropServices.NFloat,Foundation.NSString)",
			"SceneKit.SCNCameraController::set_PointOfView(SceneKit.SCNNode)",
			"SceneKit.SCNCameraControllerDelegate_Extensions::CameraInertiaDidEnd(SceneKit.ISCNCameraControllerDelegate,SceneKit.SCNCameraController)",
			"SceneKit.SCNCameraControllerDelegate_Extensions::CameraInertiaWillStart(SceneKit.ISCNCameraControllerDelegate,SceneKit.SCNCameraController)",
			"SceneKit.SCNCapsule::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNCone::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNConstraint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNConstraint::AddAnimation(SceneKit.ISCNAnimationProtocol,System.String)",
			"SceneKit.SCNConstraint::AddAnimation(SceneKit.SCNAnimationPlayer,Foundation.NSString)",
			"SceneKit.SCNConstraint::Copy(Foundation.NSZone)",
			"SceneKit.SCNConstraint::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNConstraint::GetAnimation(Foundation.NSString)",
			"SceneKit.SCNConstraint::GetAnimationPlayer(Foundation.NSString)",
			"SceneKit.SCNConstraint::IsAnimationPaused(Foundation.NSString)",
			"SceneKit.SCNConstraint::PauseAnimation(Foundation.NSString)",
			"SceneKit.SCNConstraint::RemoveAnimation(Foundation.NSString)",
			"SceneKit.SCNConstraint::RemoveAnimation(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNConstraint::RemoveAnimationUsingBlendOutDuration(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNConstraint::ResumeAnimation(Foundation.NSString)",
			"SceneKit.SCNConstraint::SetSpeed(System.Runtime.InteropServices.NFloat,Foundation.NSString)",
			"SceneKit.SCNCylinder::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNDistanceConstraint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNDistanceConstraint::FromTarget(SceneKit.SCNNode)",
			"SceneKit.SCNDistanceConstraint::set_Target(SceneKit.SCNNode)",
			"SceneKit.SCNFloor::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNGeometry::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNGeometry::AddAnimation(SceneKit.ISCNAnimationProtocol,System.String)",
			"SceneKit.SCNGeometry::AddAnimation(SceneKit.SCNAnimationPlayer,Foundation.NSString)",
			"SceneKit.SCNGeometry::Copy(Foundation.NSZone)",
			"SceneKit.SCNGeometry::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNGeometry::FromMesh(ModelIO.MDLMesh)",
			"SceneKit.SCNGeometry::GetAnimation(Foundation.NSString)",
			"SceneKit.SCNGeometry::GetAnimationPlayer(Foundation.NSString)",
			"SceneKit.SCNGeometry::InsertMaterial(SceneKit.SCNMaterial,System.IntPtr)",
			"SceneKit.SCNGeometry::IsAnimationPaused(Foundation.NSString)",
			"SceneKit.SCNGeometry::PauseAnimation(Foundation.NSString)",
			"SceneKit.SCNGeometry::RemoveAnimation(Foundation.NSString)",
			"SceneKit.SCNGeometry::RemoveAnimation(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNGeometry::RemoveAnimationUsingBlendOutDuration(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNGeometry::ReplaceMaterial(System.IntPtr,SceneKit.SCNMaterial)",
			"SceneKit.SCNGeometry::ResumeAnimation(Foundation.NSString)",
			"SceneKit.SCNGeometry::set_EdgeCreasesElement(SceneKit.SCNGeometryElement)",
			"SceneKit.SCNGeometry::set_EdgeCreasesSource(SceneKit.SCNGeometrySource)",
			"SceneKit.SCNGeometry::set_FirstMaterial(SceneKit.SCNMaterial)",
			"SceneKit.SCNGeometry::set_MinimumLanguageVersion(Foundation.NSNumber)",
			"SceneKit.SCNGeometry::set_Program(SceneKit.SCNProgram)",
			"SceneKit.SCNGeometry::set_Tessellator(SceneKit.SCNGeometryTessellator)",
			"SceneKit.SCNGeometry::set_WeakShaderModifiers(Foundation.NSDictionary)",
			"SceneKit.SCNGeometry::SetSpeed(System.Runtime.InteropServices.NFloat,Foundation.NSString)",
			"SceneKit.SCNGeometryElement::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNGeometryElement::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNGeometryElement::FromBuffer(Metal.IMTLBuffer,SceneKit.SCNGeometryPrimitiveType,System.IntPtr,System.IntPtr)",
			"SceneKit.SCNGeometryElement::FromData(Foundation.NSData,SceneKit.SCNGeometryPrimitiveType,System.IntPtr,System.IntPtr)",
			"SceneKit.SCNGeometryElement::FromSubmesh(ModelIO.MDLSubmesh)",
			"SceneKit.SCNGeometrySource::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNGeometrySource::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNGeometrySource::FromData(Foundation.NSData,Foundation.NSString,System.IntPtr,System.Boolean,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)",
			"SceneKit.SCNGeometrySource::FromMetalBuffer(Metal.IMTLBuffer,Metal.MTLVertexFormat,Foundation.NSString,System.IntPtr,System.IntPtr,System.IntPtr)",
			"SceneKit.SCNGeometryTessellator::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNGeometryTessellator::Copy(Foundation.NSZone)",
			"SceneKit.SCNGeometryTessellator::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNIKConstraint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNIKConstraint::.ctor(SceneKit.SCNNode)",
			"SceneKit.SCNIKConstraint::Create(SceneKit.SCNNode)",
			"SceneKit.SCNIKConstraint::GetMaxAllowedRotationAngle(SceneKit.SCNNode)",
			"SceneKit.SCNIKConstraint::SetMaxAllowedRotationAnglet(System.Runtime.InteropServices.NFloat,SceneKit.SCNNode)",
			"SceneKit.SCNJavaScript::ExportModule(JavaScriptCore.JSContext)",
			"SceneKit.SCNLayer::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNLayer::GetNodesInsideFrustum(SceneKit.SCNNode)",
			"SceneKit.SCNLayer::HitTest(CoreGraphics.CGPoint,Foundation.NSDictionary)",
			"SceneKit.SCNLayer::IsNodeInsideFrustum(SceneKit.SCNNode,SceneKit.SCNNode)",
			"SceneKit.SCNLayer::Prepare(Foundation.NSObject,System.Func`1<System.Boolean>)",
			"SceneKit.SCNLayer::PresentScene(SceneKit.SCNScene,SpriteKit.SKTransition,SceneKit.SCNNode,System.Action)",
			"SceneKit.SCNLayer::set_AudioListener(SceneKit.SCNNode)",
			"SceneKit.SCNLayer::set_OverlayScene(SpriteKit.SKScene)",
			"SceneKit.SCNLayer::set_PointOfView(SceneKit.SCNNode)",
			"SceneKit.SCNLayer::set_Scene(SceneKit.SCNScene)",
			"SceneKit.SCNLayer::set_Technique(SceneKit.SCNTechnique)",
			"SceneKit.SCNLevelOfDetail::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNLevelOfDetail::Copy(Foundation.NSZone)",
			"SceneKit.SCNLevelOfDetail::CreateWithScreenSpaceRadius(SceneKit.SCNGeometry,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNLevelOfDetail::CreateWithWorldSpaceDistance(SceneKit.SCNGeometry,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNLevelOfDetail::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNLight::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNLight::AddAnimation(SceneKit.ISCNAnimationProtocol,System.String)",
			"SceneKit.SCNLight::AddAnimation(SceneKit.SCNAnimationPlayer,Foundation.NSString)",
			"SceneKit.SCNLight::Copy(Foundation.NSZone)",
			"SceneKit.SCNLight::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNLight::FromModelLight(ModelIO.MDLLight)",
			"SceneKit.SCNLight::GetAnimation(Foundation.NSString)",
			"SceneKit.SCNLight::GetAnimationPlayer(Foundation.NSString)",
			"SceneKit.SCNLight::GetAttribute(Foundation.NSString)",
			"SceneKit.SCNLight::IsAnimationPaused(Foundation.NSString)",
			"SceneKit.SCNLight::PauseAnimation(Foundation.NSString)",
			"SceneKit.SCNLight::RemoveAnimation(Foundation.NSString)",
			"SceneKit.SCNLight::RemoveAnimation(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNLight::RemoveAnimationUsingBlendOutDuration(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNLight::ResumeAnimation(Foundation.NSString)",
			"SceneKit.SCNLight::set_IesProfileUrl(Foundation.NSUrl)",
			"SceneKit.SCNLight::set_LightType(Foundation.NSString)",
			"SceneKit.SCNLight::set_Technique(SceneKit.SCNTechnique)",
			"SceneKit.SCNLight::set_WeakColor(Foundation.NSObject)",
			"SceneKit.SCNLight::set_WeakShadowColor(Foundation.NSObject)",
			"SceneKit.SCNLight::SetAttribute(Foundation.NSObject,Foundation.NSString)",
			"SceneKit.SCNLight::SetSpeed(System.Runtime.InteropServices.NFloat,Foundation.NSString)",
			"SceneKit.SCNLookAtConstraint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNLookAtConstraint::Create(SceneKit.SCNNode)",
			"SceneKit.SCNLookAtConstraint::set_Target(SceneKit.SCNNode)",
			"SceneKit.SCNMaterial::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNMaterial::AddAnimation(SceneKit.ISCNAnimationProtocol,System.String)",
			"SceneKit.SCNMaterial::AddAnimation(SceneKit.SCNAnimationPlayer,Foundation.NSString)",
			"SceneKit.SCNMaterial::Copy(Foundation.NSZone)",
			"SceneKit.SCNMaterial::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNMaterial::FromMaterial(ModelIO.MDLMaterial)",
			"SceneKit.SCNMaterial::GetAnimation(Foundation.NSString)",
			"SceneKit.SCNMaterial::GetAnimationPlayer(Foundation.NSString)",
			"SceneKit.SCNMaterial::IsAnimationPaused(Foundation.NSString)",
			"SceneKit.SCNMaterial::PauseAnimation(Foundation.NSString)",
			"SceneKit.SCNMaterial::RemoveAnimation(Foundation.NSString)",
			"SceneKit.SCNMaterial::RemoveAnimation(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNMaterial::RemoveAnimationUsingBlendOutDuration(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNMaterial::ResumeAnimation(Foundation.NSString)",
			"SceneKit.SCNMaterial::set_LightingModelName(Foundation.NSString)",
			"SceneKit.SCNMaterial::set_MinimumLanguageVersion(Foundation.NSNumber)",
			"SceneKit.SCNMaterial::set_Program(SceneKit.SCNProgram)",
			"SceneKit.SCNMaterial::set_WeakShaderModifiers(Foundation.NSDictionary)",
			"SceneKit.SCNMaterial::SetSpeed(System.Runtime.InteropServices.NFloat,Foundation.NSString)",
			"SceneKit.SCNMaterialProperty::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNMaterialProperty::AddAnimation(SceneKit.ISCNAnimationProtocol,System.String)",
			"SceneKit.SCNMaterialProperty::AddAnimation(SceneKit.SCNAnimationPlayer,Foundation.NSString)",
			"SceneKit.SCNMaterialProperty::Create(Foundation.NSObject)",
			"SceneKit.SCNMaterialProperty::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNMaterialProperty::GetAnimation(Foundation.NSString)",
			"SceneKit.SCNMaterialProperty::GetAnimationPlayer(Foundation.NSString)",
			"SceneKit.SCNMaterialProperty::IsAnimationPaused(Foundation.NSString)",
			"SceneKit.SCNMaterialProperty::PauseAnimation(Foundation.NSString)",
			"SceneKit.SCNMaterialProperty::RemoveAnimation(Foundation.NSString)",
			"SceneKit.SCNMaterialProperty::RemoveAnimation(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNMaterialProperty::RemoveAnimationUsingBlendOutDuration(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNMaterialProperty::ResumeAnimation(Foundation.NSString)",
			"SceneKit.SCNMaterialProperty::set_BorderColor(Foundation.NSObject)",
			"SceneKit.SCNMaterialProperty::set_Contents(Foundation.NSObject)",
			"SceneKit.SCNMaterialProperty::SetSpeed(System.Runtime.InteropServices.NFloat,Foundation.NSString)",
			"SceneKit.SCNMorpher::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNMorpher::AddAnimation(SceneKit.ISCNAnimationProtocol,System.String)",
			"SceneKit.SCNMorpher::AddAnimation(SceneKit.SCNAnimationPlayer,Foundation.NSString)",
			"SceneKit.SCNMorpher::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNMorpher::GetAnimation(Foundation.NSString)",
			"SceneKit.SCNMorpher::GetAnimationPlayer(Foundation.NSString)",
			"SceneKit.SCNMorpher::IsAnimationPaused(Foundation.NSString)",
			"SceneKit.SCNMorpher::PauseAnimation(Foundation.NSString)",
			"SceneKit.SCNMorpher::RemoveAnimation(Foundation.NSString)",
			"SceneKit.SCNMorpher::RemoveAnimation(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNMorpher::RemoveAnimationUsingBlendOutDuration(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNMorpher::ResumeAnimation(Foundation.NSString)",
			"SceneKit.SCNMorpher::SetSpeed(System.Runtime.InteropServices.NFloat,Foundation.NSString)",
			"SceneKit.SCNNode::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNNode::AddAnimation(SceneKit.ISCNAnimationProtocol,System.String)",
			"SceneKit.SCNNode::AddAnimation(SceneKit.SCNAnimationPlayer,Foundation.NSString)",
			"SceneKit.SCNNode::AddAudioPlayer(SceneKit.SCNAudioPlayer)",
			"SceneKit.SCNNode::AddChildNode(SceneKit.SCNNode)",
			"SceneKit.SCNNode::AddParticleSystem(SceneKit.SCNParticleSystem)",
			"SceneKit.SCNNode::ConvertPositionFromNode(SceneKit.SCNVector3,SceneKit.SCNNode)",
			"SceneKit.SCNNode::ConvertPositionToNode(SceneKit.SCNVector3,SceneKit.SCNNode)",
			"SceneKit.SCNNode::ConvertTransformFromNode(SceneKit.SCNMatrix4,SceneKit.SCNNode)",
			"SceneKit.SCNNode::ConvertTransformToNode(SceneKit.SCNMatrix4,SceneKit.SCNNode)",
			"SceneKit.SCNNode::ConvertVectorFromNode(SceneKit.SCNVector3,SceneKit.SCNNode)",
			"SceneKit.SCNNode::ConvertVectorToNode(SceneKit.SCNVector3,SceneKit.SCNNode)",
			"SceneKit.SCNNode::Copy(Foundation.NSZone)",
			"SceneKit.SCNNode::DidHintFocusMovement(UIKit.UIFocusMovementHint)",
			"SceneKit.SCNNode::DidUpdateFocus(UIKit.UIFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)",
			"SceneKit.SCNNode::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNNode::FromGeometry(SceneKit.SCNGeometry)",
			"SceneKit.SCNNode::FromModelObject(ModelIO.MDLObject)",
			"SceneKit.SCNNode::GetAnimation(Foundation.NSString)",
			"SceneKit.SCNNode::GetAnimationPlayer(Foundation.NSString)",
			"SceneKit.SCNNode::GetSoundIdentifier(UIKit.UIFocusUpdateContext)",
			"SceneKit.SCNNode::HitTest(SceneKit.SCNVector3,SceneKit.SCNVector3,Foundation.NSDictionary)",
			"SceneKit.SCNNode::InsertChildNode(SceneKit.SCNNode,System.IntPtr)",
			"SceneKit.SCNNode::IsAnimationPaused(Foundation.NSString)",
			"SceneKit.SCNNode::PauseAnimation(Foundation.NSString)",
			"SceneKit.SCNNode::RemoveAnimation(Foundation.NSString)",
			"SceneKit.SCNNode::RemoveAnimation(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNNode::RemoveAnimationUsingBlendOutDuration(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNNode::RemoveAudioPlayer(SceneKit.SCNAudioPlayer)",
			"SceneKit.SCNNode::RemoveParticleSystem(SceneKit.SCNParticleSystem)",
			"SceneKit.SCNNode::ReplaceChildNode(SceneKit.SCNNode,SceneKit.SCNNode)",
			"SceneKit.SCNNode::ResumeAnimation(Foundation.NSString)",
			"SceneKit.SCNNode::RunAction(SceneKit.SCNAction)",
			"SceneKit.SCNNode::RunAction(SceneKit.SCNAction,System.Action)",
			"SceneKit.SCNNode::RunAction(SceneKit.SCNAction,System.String)",
			"SceneKit.SCNNode::RunAction(SceneKit.SCNAction,System.String,System.Action)",
			"SceneKit.SCNNode::set_Camera(SceneKit.SCNCamera)",
			"SceneKit.SCNNode::set_Geometry(SceneKit.SCNGeometry)",
			"SceneKit.SCNNode::set_Light(SceneKit.SCNLight)",
			"SceneKit.SCNNode::set_Morpher(SceneKit.SCNMorpher)",
			"SceneKit.SCNNode::set_PhysicsBody(SceneKit.SCNPhysicsBody)",
			"SceneKit.SCNNode::set_PhysicsField(SceneKit.SCNPhysicsField)",
			"SceneKit.SCNNode::set_Skinner(SceneKit.SCNSkinner)",
			"SceneKit.SCNNode::SetSpeed(System.Runtime.InteropServices.NFloat,Foundation.NSString)",
			"SceneKit.SCNNode::ShouldUpdateFocus(UIKit.UIFocusUpdateContext)",
			"SceneKit.SCNNodeRendererDelegate_Extensions::Render(SceneKit.ISCNNodeRendererDelegate,SceneKit.SCNNode,SceneKit.SCNRenderer,Foundation.NSDictionary)",
			"SceneKit.SCNParticlePropertyController::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNParticlePropertyController::Copy(Foundation.NSZone)",
			"SceneKit.SCNParticlePropertyController::Create(CoreAnimation.CAAnimation)",
			"SceneKit.SCNParticlePropertyController::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNParticlePropertyController::set_Animation(CoreAnimation.CAAnimation)",
			"SceneKit.SCNParticlePropertyController::set_InputProperty(Foundation.NSString)",
			"SceneKit.SCNParticleSystem::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNParticleSystem::AddAnimation(SceneKit.ISCNAnimationProtocol,System.String)",
			"SceneKit.SCNParticleSystem::AddAnimation(SceneKit.SCNAnimationPlayer,Foundation.NSString)",
			"SceneKit.SCNParticleSystem::Copy(Foundation.NSZone)",
			"SceneKit.SCNParticleSystem::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNParticleSystem::GetAnimation(Foundation.NSString)",
			"SceneKit.SCNParticleSystem::GetAnimationPlayer(Foundation.NSString)",
			"SceneKit.SCNParticleSystem::IsAnimationPaused(Foundation.NSString)",
			"SceneKit.SCNParticleSystem::PauseAnimation(Foundation.NSString)",
			"SceneKit.SCNParticleSystem::RemoveAnimation(Foundation.NSString)",
			"SceneKit.SCNParticleSystem::RemoveAnimation(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNParticleSystem::RemoveAnimationUsingBlendOutDuration(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNParticleSystem::ResumeAnimation(Foundation.NSString)",
			"SceneKit.SCNParticleSystem::set_EmitterShape(SceneKit.SCNGeometry)",
			"SceneKit.SCNParticleSystem::set_ParticleColor(AppKit.NSColor)",
			"SceneKit.SCNParticleSystem::set_ParticleColor(UIKit.UIColor)",
			"SceneKit.SCNParticleSystem::set_ParticleImage(Foundation.NSObject)",
			"SceneKit.SCNParticleSystem::set_SystemSpawnedOnCollision(SceneKit.SCNParticleSystem)",
			"SceneKit.SCNParticleSystem::set_SystemSpawnedOnDying(SceneKit.SCNParticleSystem)",
			"SceneKit.SCNParticleSystem::set_SystemSpawnedOnLiving(SceneKit.SCNParticleSystem)",
			"SceneKit.SCNParticleSystem::set_WeakPropertyControllers(Foundation.NSDictionary)",
			"SceneKit.SCNParticleSystem::SetSpeed(System.Runtime.InteropServices.NFloat,Foundation.NSString)",
			"SceneKit.SCNPhysicsBallSocketJoint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsBallSocketJoint::Create(SceneKit.SCNPhysicsBody,SceneKit.SCNVector3)",
			"SceneKit.SCNPhysicsBallSocketJoint::Create(SceneKit.SCNPhysicsBody,SceneKit.SCNVector3,SceneKit.SCNPhysicsBody,SceneKit.SCNVector3)",
			"SceneKit.SCNPhysicsBehavior::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsBehavior::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsBody::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsBody::Copy(Foundation.NSZone)",
			"SceneKit.SCNPhysicsBody::CreateBody(SceneKit.SCNPhysicsBodyType,SceneKit.SCNPhysicsShape)",
			"SceneKit.SCNPhysicsBody::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsBody::set_PhysicsShape(SceneKit.SCNPhysicsShape)",
			"SceneKit.SCNPhysicsConeTwistJoint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsConeTwistJoint::FromBodies(SceneKit.SCNPhysicsBody,SceneKit.SCNMatrix4,SceneKit.SCNPhysicsBody,SceneKit.SCNMatrix4)",
			"SceneKit.SCNPhysicsConeTwistJoint::FromBody(SceneKit.SCNPhysicsBody,SceneKit.SCNMatrix4)",
			"SceneKit.SCNPhysicsContactDelegate_Extensions::DidBeginContact(SceneKit.ISCNPhysicsContactDelegate,SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)",
			"SceneKit.SCNPhysicsContactDelegate_Extensions::DidEndContact(SceneKit.ISCNPhysicsContactDelegate,SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)",
			"SceneKit.SCNPhysicsContactDelegate_Extensions::DidUpdateContact(SceneKit.ISCNPhysicsContactDelegate,SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)",
			"SceneKit.SCNPhysicsField::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsField::Copy(Foundation.NSZone)",
			"SceneKit.SCNPhysicsField::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsHingeJoint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsHingeJoint::Create(SceneKit.SCNPhysicsBody,SceneKit.SCNVector3,SceneKit.SCNVector3)",
			"SceneKit.SCNPhysicsHingeJoint::Create(SceneKit.SCNPhysicsBody,SceneKit.SCNVector3,SceneKit.SCNVector3,SceneKit.SCNPhysicsBody,SceneKit.SCNVector3,SceneKit.SCNVector3)",
			"SceneKit.SCNPhysicsShape::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsShape::Copy(Foundation.NSZone)",
			"SceneKit.SCNPhysicsShape::Create(SceneKit.SCNGeometry,Foundation.NSDictionary)",
			"SceneKit.SCNPhysicsShape::Create(SceneKit.SCNNode,Foundation.NSDictionary)",
			"SceneKit.SCNPhysicsShape::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsSliderJoint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsSliderJoint::Create(SceneKit.SCNPhysicsBody,SceneKit.SCNVector3,SceneKit.SCNVector3)",
			"SceneKit.SCNPhysicsSliderJoint::Create(SceneKit.SCNPhysicsBody,SceneKit.SCNVector3,SceneKit.SCNVector3,SceneKit.SCNPhysicsBody,SceneKit.SCNVector3,SceneKit.SCNVector3)",
			"SceneKit.SCNPhysicsVehicle::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsVehicle::Create(SceneKit.SCNPhysicsBody,SceneKit.SCNPhysicsVehicleWheel[])",
			"SceneKit.SCNPhysicsVehicleWheel::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsVehicleWheel::Copy(Foundation.NSZone)",
			"SceneKit.SCNPhysicsVehicleWheel::Create(SceneKit.SCNNode)",
			"SceneKit.SCNPhysicsVehicleWheel::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsWorld::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsWorld::AddBehavior(SceneKit.SCNPhysicsBehavior)",
			"SceneKit.SCNPhysicsWorld::ContactTest(SceneKit.SCNPhysicsBody,Foundation.NSDictionary)",
			"SceneKit.SCNPhysicsWorld::ContactTest(SceneKit.SCNPhysicsBody,SceneKit.SCNPhysicsBody,Foundation.NSDictionary)",
			"SceneKit.SCNPhysicsWorld::ConvexSweepTest(SceneKit.SCNPhysicsShape,SceneKit.SCNMatrix4,SceneKit.SCNMatrix4,Foundation.NSDictionary)",
			"SceneKit.SCNPhysicsWorld::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNPhysicsWorld::RayTestWithSegmentFromPoint(SceneKit.SCNVector3,SceneKit.SCNVector3,Foundation.NSDictionary)",
			"SceneKit.SCNPhysicsWorld::RemoveBehavior(SceneKit.SCNPhysicsBehavior)",
			"SceneKit.SCNPlane::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNProgram::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNProgram::Copy(Foundation.NSZone)",
			"SceneKit.SCNProgram::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNProgram::set_Library(Metal.IMTLLibrary)",
			"SceneKit.SCNProgram::SetSemantic(Foundation.NSString,System.String,Foundation.NSDictionary)",
			"SceneKit.SCNProgramDelegate_Extensions::BindValue(SceneKit.ISCNProgramDelegate,SceneKit.SCNProgram,System.String,System.UInt32,System.UInt32,SceneKit.SCNRenderer)",
			"SceneKit.SCNProgramDelegate_Extensions::HandleError(SceneKit.ISCNProgramDelegate,SceneKit.SCNProgram,Foundation.NSError)",
			"SceneKit.SCNProgramDelegate_Extensions::IsProgramOpaque(SceneKit.ISCNProgramDelegate,SceneKit.SCNProgram)",
			"SceneKit.SCNProgramDelegate_Extensions::UnbindValue(SceneKit.ISCNProgramDelegate,SceneKit.SCNProgram,System.String,System.UInt32,System.UInt32,SceneKit.SCNRenderer)",
			"SceneKit.SCNPyramid::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNReferenceNode::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNReferenceNode::.ctor(Foundation.NSUrl)",
			"SceneKit.SCNReferenceNode::CreateFromUrl(Foundation.NSUrl)",
			"SceneKit.SCNReferenceNode::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNReferenceNode::set_ReferenceUrl(Foundation.NSUrl)",
			"SceneKit.SCNRenderer::FromContext(OpenGL.CGLContext,Foundation.NSDictionary)",
			"SceneKit.SCNRenderer::FromContext(OpenGLES.EAGLContext,Foundation.NSDictionary)",
			"SceneKit.SCNRenderer::FromContext(System.IntPtr,Foundation.NSDictionary)",
			"SceneKit.SCNRenderer::FromDevice(Metal.IMTLDevice,Foundation.NSDictionary)",
			"SceneKit.SCNRenderer::GetNodesInsideFrustum(SceneKit.SCNNode)",
			"SceneKit.SCNRenderer::HitTest(CoreGraphics.CGPoint,Foundation.NSDictionary)",
			"SceneKit.SCNRenderer::IsNodeInsideFrustum(SceneKit.SCNNode,SceneKit.SCNNode)",
			"SceneKit.SCNRenderer::Prepare(Foundation.NSObject,System.Func`1<System.Boolean>)",
			"SceneKit.SCNRenderer::PresentScene(SceneKit.SCNScene,SpriteKit.SKTransition,SceneKit.SCNNode,System.Action)",
			"SceneKit.SCNRenderer::Render(CoreGraphics.CGRect,Metal.IMTLCommandBuffer,Metal.MTLRenderPassDescriptor)",
			"SceneKit.SCNRenderer::Render(System.Double,CoreGraphics.CGRect,Metal.IMTLCommandBuffer,Metal.MTLRenderPassDescriptor)",
			"SceneKit.SCNRenderer::set_AudioListener(SceneKit.SCNNode)",
			"SceneKit.SCNRenderer::set_OverlayScene(SpriteKit.SKScene)",
			"SceneKit.SCNRenderer::set_PointOfView(SceneKit.SCNNode)",
			"SceneKit.SCNRenderer::set_Scene(SceneKit.SCNScene)",
			"SceneKit.SCNRenderer::set_Technique(SceneKit.SCNTechnique)",
			"SceneKit.SCNReplicatorConstraint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNReplicatorConstraint::FromTarget(SceneKit.SCNNode)",
			"SceneKit.SCNReplicatorConstraint::set_Target(SceneKit.SCNNode)",
			"SceneKit.SCNScene::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNScene::AddParticleSystem(SceneKit.SCNParticleSystem,SceneKit.SCNMatrix4)",
			"SceneKit.SCNScene::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNScene::FromAsset(ModelIO.MDLAsset)",
			"SceneKit.SCNScene::FromFile(System.String,System.String,Foundation.NSDictionary)",
			"SceneKit.SCNScene::FromUrl(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"SceneKit.SCNScene::GetAttribute(Foundation.NSString)",
			"SceneKit.SCNScene::RemoveParticleSystem(SceneKit.SCNParticleSystem)",
			"SceneKit.SCNScene::set_FogColor(Foundation.NSObject)",
			"SceneKit.SCNScene::SetAttribute(Foundation.NSObject,Foundation.NSString)",
			"SceneKit.SCNScene::WriteToUrl(Foundation.NSUrl,Foundation.NSDictionary,SceneKit.ISCNSceneExportDelegate,SceneKit.SCNSceneExportProgressHandler)",
			"SceneKit.SCNSceneExportDelegate_Extensions::WriteImage(SceneKit.ISCNSceneExportDelegate,AppKit.NSImage,Foundation.NSUrl,Foundation.NSUrl)",
			"SceneKit.SCNSceneExportDelegate_Extensions::WriteImage(SceneKit.ISCNSceneExportDelegate,UIKit.UIImage,Foundation.NSUrl,Foundation.NSUrl)",
			"SceneKit.SCNSceneRendererDelegate_Extensions::DidApplyAnimations(SceneKit.ISCNSceneRendererDelegate,SceneKit.ISCNSceneRenderer,System.Double)",
			"SceneKit.SCNSceneRendererDelegate_Extensions::DidApplyConstraints(SceneKit.ISCNSceneRendererDelegate,SceneKit.ISCNSceneRenderer,System.Double)",
			"SceneKit.SCNSceneRendererDelegate_Extensions::DidRenderScene(SceneKit.ISCNSceneRendererDelegate,SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)",
			"SceneKit.SCNSceneRendererDelegate_Extensions::DidSimulatePhysics(SceneKit.ISCNSceneRendererDelegate,SceneKit.ISCNSceneRenderer,System.Double)",
			"SceneKit.SCNSceneRendererDelegate_Extensions::Update(SceneKit.ISCNSceneRendererDelegate,SceneKit.ISCNSceneRenderer,System.Double)",
			"SceneKit.SCNSceneRendererDelegate_Extensions::WillRenderScene(SceneKit.ISCNSceneRendererDelegate,SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)",
			"SceneKit.SCNSceneRendererWrapper::GetNodesInsideFrustum(SceneKit.SCNNode)",
			"SceneKit.SCNSceneRendererWrapper::HitTest(CoreGraphics.CGPoint,Foundation.NSDictionary)",
			"SceneKit.SCNSceneRendererWrapper::IsNodeInsideFrustum(SceneKit.SCNNode,SceneKit.SCNNode)",
			"SceneKit.SCNSceneRendererWrapper::Prepare(Foundation.NSObject,System.Func`1<System.Boolean>)",
			"SceneKit.SCNSceneRendererWrapper::PresentScene(SceneKit.SCNScene,SpriteKit.SKTransition,SceneKit.SCNNode,System.Action)",
			"SceneKit.SCNSceneRendererWrapper::set_AudioListener(SceneKit.SCNNode)",
			"SceneKit.SCNSceneRendererWrapper::set_OverlayScene(SpriteKit.SKScene)",
			"SceneKit.SCNSceneRendererWrapper::set_PointOfView(SceneKit.SCNNode)",
			"SceneKit.SCNSceneRendererWrapper::set_Scene(SceneKit.SCNScene)",
			"SceneKit.SCNSceneRendererWrapper::set_WeakSceneRendererDelegate(Foundation.NSObject)",
			"SceneKit.SCNSceneSource::.ctor(Foundation.NSData,Foundation.NSDictionary)",
			"SceneKit.SCNSceneSource::.ctor(Foundation.NSUrl,Foundation.NSDictionary)",
			"SceneKit.SCNSceneSource::FromData(Foundation.NSData,Foundation.NSDictionary)",
			"SceneKit.SCNSceneSource::FromUrl(Foundation.NSUrl,Foundation.NSDictionary)",
			"SceneKit.SCNSceneSource::GetProperty(Foundation.NSString)",
			"SceneKit.SCNSceneSource::SceneFromOptions(Foundation.NSDictionary,SceneKit.SCNSceneSourceStatusHandler)",
			"SceneKit.SCNSceneSource::SceneWithOption(Foundation.NSDictionary,Foundation.NSError&)",
			"SceneKit.SCNShadable_Extensions::GetMinimumLanguageVersion(SceneKit.ISCNShadable)",
			"SceneKit.SCNShadable_Extensions::GetProgram(SceneKit.ISCNShadable)",
			"SceneKit.SCNShadable_Extensions::GetWeakShaderModifiers(SceneKit.ISCNShadable)",
			"SceneKit.SCNShadable_Extensions::HandleBinding(SceneKit.ISCNShadable,System.String,SceneKit.SCNBindingHandler)",
			"SceneKit.SCNShadable_Extensions::HandleUnbinding(SceneKit.ISCNShadable,System.String,SceneKit.SCNBindingHandler)",
			"SceneKit.SCNShadable_Extensions::SetMinimumLanguageVersion(SceneKit.ISCNShadable,Foundation.NSNumber)",
			"SceneKit.SCNShadable_Extensions::SetProgram(SceneKit.ISCNShadable,SceneKit.SCNProgram)",
			"SceneKit.SCNShadable_Extensions::SetWeakShaderModifiers(SceneKit.ISCNShadable,Foundation.NSDictionary)",
			"SceneKit.SCNShape::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNShape::Create(AppKit.NSBezierPath,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNShape::Create(UIKit.UIBezierPath,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNShape::set_ChamferProfile(AppKit.NSBezierPath)",
			"SceneKit.SCNShape::set_ChamferProfile(UIKit.UIBezierPath)",
			"SceneKit.SCNShape::set_Path(AppKit.NSBezierPath)",
			"SceneKit.SCNShape::set_Path(UIKit.UIBezierPath)",
			"SceneKit.SCNSkinner::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNSkinner::_Create(SceneKit.SCNGeometry,SceneKit.SCNNode[],Foundation.NSArray,SceneKit.SCNGeometrySource,SceneKit.SCNGeometrySource)",
			"SceneKit.SCNSkinner::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNSkinner::set_BaseGeometry(SceneKit.SCNGeometry)",
			"SceneKit.SCNSkinner::set_Skeleton(SceneKit.SCNNode)",
			"SceneKit.SCNSkinner::ToNSArray(SceneKit.SCNMatrix4[])",
			"SceneKit.SCNSliderConstraint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNSphere::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNTechnique::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNTechnique::_GetObject(Foundation.NSObject)",
			"SceneKit.SCNTechnique::_SetObject(Foundation.NSObject,Foundation.INSCopying)",
			"SceneKit.SCNTechnique::AddAnimation(SceneKit.ISCNAnimationProtocol,System.String)",
			"SceneKit.SCNTechnique::AddAnimation(SceneKit.SCNAnimationPlayer,Foundation.NSString)",
			"SceneKit.SCNTechnique::Copy(Foundation.NSZone)",
			"SceneKit.SCNTechnique::Create(Foundation.NSDictionary)",
			"SceneKit.SCNTechnique::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNTechnique::GetAnimation(Foundation.NSString)",
			"SceneKit.SCNTechnique::GetAnimationPlayer(Foundation.NSString)",
			"SceneKit.SCNTechnique::IsAnimationPaused(Foundation.NSString)",
			"SceneKit.SCNTechnique::PauseAnimation(Foundation.NSString)",
			"SceneKit.SCNTechnique::RemoveAnimation(Foundation.NSString)",
			"SceneKit.SCNTechnique::RemoveAnimation(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNTechnique::RemoveAnimationUsingBlendOutDuration(Foundation.NSString,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNTechnique::ResumeAnimation(Foundation.NSString)",
			"SceneKit.SCNTechnique::set_Library(Metal.IMTLLibrary)",
			"SceneKit.SCNTechnique::SetSpeed(System.Runtime.InteropServices.NFloat,Foundation.NSString)",
			"SceneKit.SCNTechniqueSupportWrapper::set_Technique(SceneKit.SCNTechnique)",
			"SceneKit.SCNText::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNText::Create(Foundation.NSObject,System.Runtime.InteropServices.NFloat)",
			"SceneKit.SCNText::set_ChamferProfile(AppKit.NSBezierPath)",
			"SceneKit.SCNText::set_ChamferProfile(UIKit.UIBezierPath)",
			"SceneKit.SCNText::set_Font(AppKit.NSFont)",
			"SceneKit.SCNText::set_Font(UIKit.UIFont)",
			"SceneKit.SCNText::set_String(Foundation.NSObject)",
			"SceneKit.SCNTimingFunction::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNTimingFunction::Create(CoreAnimation.CAMediaTimingFunction)",
			"SceneKit.SCNTimingFunction::EncodeTo(Foundation.NSCoder)",
			"SceneKit.SCNTorus::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNTransaction::set_AnimationTimingFunction(CoreAnimation.CAMediaTimingFunction)",
			"SceneKit.SCNTransaction::SetValueForKey(Foundation.NSObject,Foundation.NSString)",
			"SceneKit.SCNTransaction::ValueForKey(Foundation.NSString)",
			"SceneKit.SCNTransformConstraint::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNTube::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNView::.ctor(CoreGraphics.CGRect,Foundation.NSDictionary)",
			"SceneKit.SCNView::.ctor(Foundation.NSCoder)",
			"SceneKit.SCNView::GetNodesInsideFrustum(SceneKit.SCNNode)",
			"SceneKit.SCNView::HitTest(CoreGraphics.CGPoint,Foundation.NSDictionary)",
			"SceneKit.SCNView::IsNodeInsideFrustum(SceneKit.SCNNode,SceneKit.SCNNode)",
			"SceneKit.SCNView::Pause(Foundation.NSObject)",
			"SceneKit.SCNView::Play(Foundation.NSObject)",
			"SceneKit.SCNView::Prepare(Foundation.NSObject,System.Func`1<System.Boolean>)",
			"SceneKit.SCNView::PresentScene(SceneKit.SCNScene,SpriteKit.SKTransition,SceneKit.SCNNode,System.Action)",
			"SceneKit.SCNView::set_AudioListener(SceneKit.SCNNode)",
			"SceneKit.SCNView::set_BackgroundColor(AppKit.NSColor)",
			"SceneKit.SCNView::set_EAGLContext(OpenGLES.EAGLContext)",
			"SceneKit.SCNView::set_OpenGLContext(AppKit.NSOpenGLContext)",
			"SceneKit.SCNView::set_OverlayScene(SpriteKit.SKScene)",
			"SceneKit.SCNView::set_PixelFormat(AppKit.NSOpenGLPixelFormat)",
			"SceneKit.SCNView::set_PointOfView(SceneKit.SCNNode)",
			"SceneKit.SCNView::set_Scene(SceneKit.SCNScene)",
			"SceneKit.SCNView::set_Technique(SceneKit.SCNTechnique)",
			"SceneKit.SCNView::Stop(Foundation.NSObject)",
			"ScreenCaptureKit.SCContentFilter::.ctor(ScreenCaptureKit.SCWindow)",
			"ScreenCaptureKit.SCContentFilter::InitWithDisplayExcludingApplications(ScreenCaptureKit.SCDisplay,ScreenCaptureKit.SCRunningApplication[],ScreenCaptureKit.SCWindow[])",
			"ScreenCaptureKit.SCContentFilter::InitWithDisplayExcludingWindows(ScreenCaptureKit.SCDisplay,ScreenCaptureKit.SCWindow[])",
			"ScreenCaptureKit.SCContentFilter::InitWithDisplayIncludingApplications(ScreenCaptureKit.SCDisplay,ScreenCaptureKit.SCRunningApplication[],ScreenCaptureKit.SCWindow[])",
			"ScreenCaptureKit.SCContentFilter::InitWithDisplayIncludingWindows(ScreenCaptureKit.SCDisplay,ScreenCaptureKit.SCWindow[])",
			"ScreenCaptureKit.SCShareableContent::GetShareableContentAboveWindow(System.Boolean,ScreenCaptureKit.SCWindow,System.Action`2<ScreenCaptureKit.SCShareableContent,Foundation.NSError>)",
			"ScreenCaptureKit.SCShareableContent::GetShareableContentBelowWindow(System.Boolean,ScreenCaptureKit.SCWindow,System.Action`2<ScreenCaptureKit.SCShareableContent,Foundation.NSError>)",
			"ScreenCaptureKit.SCStream::.ctor(ScreenCaptureKit.SCContentFilter,ScreenCaptureKit.SCStreamConfiguration,ScreenCaptureKit.ISCStreamDelegate)",
			"ScreenCaptureKit.SCStream::AddStreamOutput(ScreenCaptureKit.ISCStreamOutput,ScreenCaptureKit.SCStreamOutputType,CoreFoundation.DispatchQueue,Foundation.NSError&)",
			"ScreenCaptureKit.SCStream::RemoveStreamOutput(ScreenCaptureKit.ISCStreamOutput,ScreenCaptureKit.SCStreamOutputType,Foundation.NSError&)",
			"ScreenCaptureKit.SCStream::UpdateConfiguration(ScreenCaptureKit.SCStreamConfiguration,System.Action`1<Foundation.NSError>)",
			"ScreenCaptureKit.SCStream::UpdateContentFilter(ScreenCaptureKit.SCContentFilter,System.Action`1<Foundation.NSError>)",
			"ScreenCaptureKit.SCStreamConfiguration::set_BackgroundColor(CoreGraphics.CGColor)",
			"ScreenCaptureKit.SCStreamDelegate_Extensions::DidStop(ScreenCaptureKit.ISCStreamDelegate,ScreenCaptureKit.SCStream,Foundation.NSError)",
			"ScreenCaptureKit.SCStreamOutput_Extensions::DidOutputSampleBuffer(ScreenCaptureKit.ISCStreamOutput,ScreenCaptureKit.SCStream,CoreMedia.CMSampleBuffer,ScreenCaptureKit.SCStreamOutputType)",
			"ScreenTime.STScreenTimeConfiguration::.ctor(Foundation.NSCoder)",
			"ScreenTime.STScreenTimeConfiguration::EncodeTo(Foundation.NSCoder)",
			"ScreenTime.STScreenTimeConfigurationObserver::.ctor(CoreFoundation.DispatchQueue)",
			"ScreenTime.STWebHistory::DeleteHistory(Foundation.NSDateInterval)",
			"ScreenTime.STWebHistory::DeleteHistory(Foundation.NSUrl)",
			"ScreenTime.STWebpageController::.ctor(Foundation.NSCoder)",
			"ScreenTime.STWebpageController::.ctor(System.String,Foundation.NSBundle)",
			"ScreenTime.STWebpageController::set_Url(Foundation.NSUrl)",
			"ScriptingBridge.SBApplication::.ctor(Foundation.NSCoder)",
			"ScriptingBridge.SBApplication::.ctor(Foundation.NSUrl)",
			"ScriptingBridge.SBApplication::_FromURL(Foundation.NSUrl)",
			"ScriptingBridge.SBApplication::EncodeTo(Foundation.NSCoder)",
			"ScriptingBridge.SBApplication::set_WeakDelegate(Foundation.NSObject)",
			"ScriptingBridge.SBApplicationDelegateWrapper::EventFailed(System.IntPtr,Foundation.NSError)",
			"ScriptingBridge.SBElementArray::.ctor(Foundation.NSCoder)",
			"ScriptingBridge.SBElementArray::ArrayByApplyingSelector(ObjCRuntime.Selector,Foundation.NSObject)",
			"ScriptingBridge.SBElementArray::ObjectAtLocation(Foundation.NSObject)",
			"ScriptingBridge.SBElementArray::ObjectWithID(Foundation.NSObject)",
			"ScriptingBridge.SBObject::.ctor(Foundation.NSCoder)",
			"ScriptingBridge.SBObject::.ctor(Foundation.NSDictionary)",
			"ScriptingBridge.SBObject::.ctor(Foundation.NSObject)",
			"ScriptingBridge.SBObject::EncodeTo(Foundation.NSCoder)",
			"SearchKit.SKDocument::.ctor(Foundation.NSUrl)",
			"SearchKit.SKDocument::Create(System.String,SearchKit.SKDocument,System.String)",
			"SearchKit.SKIndex::AddDocument(SearchKit.SKDocument,System.String,System.Boolean)",
			"SearchKit.SKIndex::AddDocumentWithText(SearchKit.SKDocument,System.String,System.Boolean)",
			"SearchKit.SKIndex::CreateWithMutableData(Foundation.NSMutableData,System.String,SearchKit.SKIndexType,SearchKit.SKTextAnalysis)",
			"SearchKit.SKIndex::CreateWithUrl(Foundation.NSUrl,System.String,SearchKit.SKIndexType,SearchKit.SKTextAnalysis)",
			"SearchKit.SKIndex::FromData(Foundation.NSData,System.String)",
			"SearchKit.SKIndex::FromMutableData(Foundation.NSMutableData,System.String)",
			"SearchKit.SKIndex::FromUrl(Foundation.NSUrl,System.String,System.Boolean)",
			"SearchKit.SKIndex::MoveDocument(SearchKit.SKDocument,SearchKit.SKDocument)",
			"SearchKit.SKIndex::RemoveDocument(SearchKit.SKDocument)",
			"SearchKit.SKIndex::RenameDocument(SearchKit.SKDocument,System.String)",
			"SearchKit.SKIndex::SetDocumentProperties(SearchKit.SKDocument,Foundation.NSDictionary)",
			"SearchKit.SKSummary::Create(Foundation.NSString)",
			"Security.SecCertificate::Initialize(Foundation.NSData)",
			"Security.SecCertificate2::.ctor(Security.SecCertificate)",
			"Security.SecIdentity::Import(System.Byte[],System.String)",
			"Security.SecIdentity2::.ctor(Security.SecIdentity)",
			"Security.SecIdentity2::.ctor(Security.SecIdentity,Security.SecCertificate[])",
			"Security.SecImportExport::ImportPkcs12(Foundation.NSData,Foundation.NSDictionary,Foundation.NSDictionary[]&)",
			"Security.SecKey::Create(Foundation.NSData,Foundation.NSDictionary,Foundation.NSError&)",
			"Security.SecKey::Create(Foundation.NSData,Security.SecKeyType,Security.SecKeyClass,System.Int32,Foundation.NSDictionary,Foundation.NSError&)",
			"Security.SecKey::CreateDecryptedData(Security.SecKeyAlgorithm,Foundation.NSData,Foundation.NSError&)",
			"Security.SecKey::CreateEncryptedData(Security.SecKeyAlgorithm,Foundation.NSData,Foundation.NSError&)",
			"Security.SecKey::CreateRandomKey(Foundation.NSDictionary,Foundation.NSError&)",
			"Security.SecKey::CreateRandomKey(Security.SecKeyType,System.Int32,Foundation.NSDictionary,Foundation.NSError&)",
			"Security.SecKey::CreateSignature(Security.SecKeyAlgorithm,Foundation.NSData,Foundation.NSError&)",
			"Security.SecKey::GenerateKeyPair(Foundation.NSDictionary,Security.SecKey&,Security.SecKey&)",
			"Security.SecKey::GenerateKeyPair(Security.SecKeyType,System.Int32,Security.SecPublicPrivateKeyAttrs,Security.SecKey&,Security.SecKey&)",
			"Security.SecKey::GenerateKeyPair(Security.SecKeyType,System.Int32,Security.SecPublicPrivateKeyAttrs,Security.SecPublicPrivateKeyAttrs,Security.SecKey&,Security.SecKey&)",
			"Security.SecKey::GetKeyExchangeResult(Security.SecKeyAlgorithm,Security.SecKey,Foundation.NSDictionary,Foundation.NSError&)",
			"Security.SecKey::IsAlgorithmSupported(Security.SecKeyOperationType,Security.SecKeyAlgorithm)",
			"Security.SecKey::VerifySignature(Security.SecKeyAlgorithm,Foundation.NSData,Foundation.NSData,Foundation.NSError&)",
			"Security.SecKeyChain::Add(Security.SecRecord)",
			"Security.SecKeyChain::Remove(Security.SecRecord)",
			"Security.SecKeyChain::Update(Security.SecRecord,Security.SecRecord)",
			"Security.SecPolicy::CreatePolicy(Foundation.NSString,Foundation.NSDictionary)",
			"Security.SecProtocolOptions::AddPreSharedKey(CoreFoundation.DispatchData)",
			"Security.SecProtocolOptions::IsEqual(Security.SecProtocolOptions)",
			"Security.SecProtocolOptions::IsEqual(Security.SecProtocolOptions,Security.SecProtocolOptions)",
			"Security.SecProtocolOptions::SetKeyUpdateCallback(Security.SecProtocolKeyUpdate,CoreFoundation.DispatchQueue)",
			"Security.SecProtocolOptions::SetTlsDiffieHellmanParameters(CoreFoundation.DispatchData)",
			"Security.SecProtocolOptions::SetTlsPreSharedKeyIdentityHint(CoreFoundation.DispatchData)",
			"Security.SecRecord::get_ApplicationTag()",
			"Security.SecRecord::get_CanDecrypt()",
			"Security.SecRecord::get_CanDerive()",
			"Security.SecRecord::get_CanEncrypt()",
			"Security.SecRecord::get_CanSign()",
			"Security.SecRecord::get_CanUnwrap()",
			"Security.SecRecord::get_CanVerify()",
			"Security.SecRecord::get_CanWrap()",
			"Security.SecRecord::get_EffectiveKeySize()",
			"Security.SecRecord::get_IsPermanent()",
			"Security.SecRecord::get_KeySizeInBits()",
			"Security.SecRecord::get_KeyType()",
			"Security.SecRecord::get_Label()",
			"Security.SecRecord::get_TokenID()",
			"Security.SecRecord::set_AccessControl(Security.SecAccessControl)",
			"Security.SecRecord::set_ApplicationTag(Foundation.NSData)",
			"Security.SecRecord::set_AuthenticationContext(LocalAuthentication.LAContext)",
			"Security.SecRecord::set_CanDecrypt(System.Boolean)",
			"Security.SecRecord::set_CanDerive(System.Boolean)",
			"Security.SecRecord::set_CanEncrypt(System.Boolean)",
			"Security.SecRecord::set_CanSign(System.Boolean)",
			"Security.SecRecord::set_CanUnwrap(System.Boolean)",
			"Security.SecRecord::set_CanVerify(System.Boolean)",
			"Security.SecRecord::set_CanWrap(System.Boolean)",
			"Security.SecRecord::set_EffectiveKeySize(System.Int32)",
			"Security.SecRecord::set_IsPermanent(System.Boolean)",
			"Security.SecRecord::set_KeySizeInBits(System.Int32)",
			"Security.SecRecord::set_KeyType(Security.SecKeyType)",
			"Security.SecRecord::set_Label(System.String)",
			"Security.SecRecord::set_MatchPolicy(Security.SecPolicy)",
			"Security.SecRecord::set_TokenID(Security.SecTokenID)",
			"Security.SecRecord::SetValueRef(ObjCRuntime.INativeObject)",
			"Security.SecTrust::.ctor(Security.SecCertificate,Security.SecPolicy)",
			"Security.SecTrust::Evaluate(CoreFoundation.DispatchQueue,Security.SecTrustCallback)",
			"Security.SecTrust::Evaluate(CoreFoundation.DispatchQueue,Security.SecTrustWithErrorCallback)",
			"Security.SecTrust::Initialize(System.IntPtr,Security.SecPolicy)",
			"Security.SecTrust::SetExceptions(Foundation.NSData)",
			"Security.SecTrust::SetOCSPResponse(Foundation.NSArray)",
			"Security.SecTrust::SetOCSPResponse(Foundation.NSData)",
			"Security.SecTrust::SetPolicies(Foundation.NSArray)",
			"Security.SecTrust::SetPolicy(Security.SecPolicy)",
			"Security.SecTrust::SetSignedCertificateTimestamps(Foundation.NSArray`1<Foundation.NSData>)",
			"Security.SecTrust2::.ctor(Security.SecTrust)",
			"Security.SslContext::Bundle(Security.SecIdentity,System.Collections.Generic.IEnumerable`1<Security.SecCertificate>)",
			"Security.SslContext::SetOcspResponse(Foundation.NSData)",
			"Security.SslContext::SetSessionConfig(Foundation.NSString)",
			"SensorKit.NSString_SRDeletionRecord::_GetSensorForDeletionRecordsFromSensor(Foundation.NSString)",
			"SensorKit.SRDeletionRecord::.ctor(Foundation.NSCoder)",
			"SensorKit.SRDeletionRecord::EncodeTo(Foundation.NSCoder)",
			"SensorKit.SRDevice::.ctor(Foundation.NSCoder)",
			"SensorKit.SRDevice::Copy(Foundation.NSZone)",
			"SensorKit.SRDevice::EncodeTo(Foundation.NSCoder)",
			"SensorKit.SRFetchRequest::set_Device(SensorKit.SRDevice)",
			"SensorKit.SRFetchResult`1::Copy(Foundation.NSZone)",
			"SensorKit.SRSensorReader::.ctor(Foundation.NSString)",
			"SensorKit.SRSensorReader::Fetch(SensorKit.SRFetchRequest)",
			"SensorKit.SRSensorReader::RequestAuthorization(Foundation.NSSet`1<Foundation.NSString>,System.Action`1<Foundation.NSError>)",
			"SensorKit.SRSensorReaderDelegate_Extensions::DidChangeAuthorizationStatus(SensorKit.ISRSensorReaderDelegate,SensorKit.SRSensorReader,SensorKit.SRAuthorizationStatus)",
			"SensorKit.SRSensorReaderDelegate_Extensions::DidCompleteFetch(SensorKit.ISRSensorReaderDelegate,SensorKit.SRSensorReader,SensorKit.SRFetchRequest)",
			"SensorKit.SRSensorReaderDelegate_Extensions::DidFetchDevices(SensorKit.ISRSensorReaderDelegate,SensorKit.SRSensorReader,SensorKit.SRDevice[])",
			"SensorKit.SRSensorReaderDelegate_Extensions::DidFetchResult(SensorKit.ISRSensorReaderDelegate,SensorKit.SRSensorReader,SensorKit.SRFetchRequest,SensorKit.SRFetchResult`1<Foundation.NSObject>)",
			"SensorKit.SRSensorReaderDelegate_Extensions::DidStopRecording(SensorKit.ISRSensorReaderDelegate,SensorKit.SRSensorReader)",
			"SensorKit.SRSensorReaderDelegate_Extensions::FetchDevicesFailed(SensorKit.ISRSensorReaderDelegate,SensorKit.SRSensorReader,Foundation.NSError)",
			"SensorKit.SRSensorReaderDelegate_Extensions::FetchingRequestFailed(SensorKit.ISRSensorReaderDelegate,SensorKit.SRSensorReader,SensorKit.SRFetchRequest,Foundation.NSError)",
			"SensorKit.SRSensorReaderDelegate_Extensions::StartRecordingFailed(SensorKit.ISRSensorReaderDelegate,SensorKit.SRSensorReader,Foundation.NSError)",
			"SensorKit.SRSensorReaderDelegate_Extensions::StopRecordingFailed(SensorKit.ISRSensorReaderDelegate,SensorKit.SRSensorReader,Foundation.NSError)",
			"SensorKit.SRSensorReaderDelegate_Extensions::WillStartRecording(SensorKit.ISRSensorReaderDelegate,SensorKit.SRSensorReader)",
			"ShazamKit.SHCustomCatalog::Add(Foundation.NSUrl,Foundation.NSError&)",
			"ShazamKit.SHCustomCatalog::Add(ShazamKit.SHSignature,ShazamKit.SHMediaItem[],Foundation.NSError&)",
			"ShazamKit.SHCustomCatalog::Write(Foundation.NSUrl,Foundation.NSError&)",
			"ShazamKit.SHMatch::.ctor(Foundation.NSCoder)",
			"ShazamKit.SHMatch::EncodeTo(Foundation.NSCoder)",
			"ShazamKit.SHMatchedMediaItem::.ctor(Foundation.NSCoder)",
			"ShazamKit.SHMatchedMediaItem::EncodeTo(Foundation.NSCoder)",
			"ShazamKit.SHMediaItem::.ctor(Foundation.NSCoder)",
			"ShazamKit.SHMediaItem::Copy(Foundation.NSZone)",
			"ShazamKit.SHMediaItem::Create(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"ShazamKit.SHMediaItem::EncodeTo(Foundation.NSCoder)",
			"ShazamKit.SHSession::.ctor(ShazamKit.SHCatalog)",
			"ShazamKit.SHSession::Match(AVFoundation.AVAudioPcmBuffer,AVFoundation.AVAudioTime)",
			"ShazamKit.SHSession::Match(ShazamKit.SHSignature)",
			"ShazamKit.SHSessionDelegate_Extensions::DidFindMatch(ShazamKit.ISHSessionDelegate,ShazamKit.SHSession,ShazamKit.SHMatch)",
			"ShazamKit.SHSessionDelegate_Extensions::DidNotFindMatch(ShazamKit.ISHSessionDelegate,ShazamKit.SHSession,ShazamKit.SHSignature,Foundation.NSError)",
			"ShazamKit.SHSignature::.ctor(Foundation.NSCoder)",
			"ShazamKit.SHSignature::.ctor(Foundation.NSData,Foundation.NSError&)",
			"ShazamKit.SHSignature::Copy(Foundation.NSZone)",
			"ShazamKit.SHSignature::EncodeTo(Foundation.NSCoder)",
			"ShazamKit.SHSignature::GetSignature(Foundation.NSData,Foundation.NSError&)",
			"ShazamKit.SHSignatureGenerator::Append(AVFoundation.AVAudioPcmBuffer,AVFoundation.AVAudioTime,Foundation.NSError&)",
			"Social.SLComposeServiceViewController::.ctor(Foundation.NSCoder)",
			"Social.SLComposeServiceViewController::.ctor(System.String,Foundation.NSBundle)",
			"Social.SLComposeServiceViewController::CellClicked(AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,System.UIntPtr)",
			"Social.SLComposeServiceViewController::CellDoubleClicked(AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,System.UIntPtr)",
			"Social.SLComposeServiceViewController::Changed(UIKit.UITextView)",
			"Social.SLComposeServiceViewController::DidChangeSelection(Foundation.NSNotification)",
			"Social.SLComposeServiceViewController::DidChangeTypingAttributes(Foundation.NSNotification)",
			"Social.SLComposeServiceViewController::DidCheckText(AppKit.NSTextView,Foundation.NSRange,Foundation.NSTextCheckingTypes,Foundation.NSDictionary,Foundation.NSTextCheckingResult[],Foundation.NSOrthography,System.IntPtr)",
			"Social.SLComposeServiceViewController::DoCommandBySelector(AppKit.NSTextView,ObjCRuntime.Selector)",
			"Social.SLComposeServiceViewController::DraggedCell(AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,AppKit.NSEvent,System.UIntPtr)",
			"Social.SLComposeServiceViewController::EditingEnded(UIKit.UITextView)",
			"Social.SLComposeServiceViewController::EditingStarted(UIKit.UITextView)",
			"Social.SLComposeServiceViewController::GetCandidates(AppKit.NSTextView,Foundation.NSRange)",
			"Social.SLComposeServiceViewController::GetCompletions(AppKit.NSTextView,System.String[],Foundation.NSRange,System.IntPtr&)",
			"Social.SLComposeServiceViewController::GetTextCheckingCandidates(AppKit.NSTextView,Foundation.NSTextCheckingResult[],Foundation.NSRange)",
			"Social.SLComposeServiceViewController::GetUndoManager(AppKit.NSTextView)",
			"Social.SLComposeServiceViewController::GetWritablePasteboardTypes(AppKit.NSTextView,AppKit.NSTextAttachmentCell,System.UIntPtr)",
			"Social.SLComposeServiceViewController::LinkClicked(AppKit.NSTextView,Foundation.NSObject,System.UIntPtr)",
			"Social.SLComposeServiceViewController::MenuForEvent(AppKit.NSTextView,AppKit.NSMenu,AppKit.NSEvent,System.UIntPtr)",
			"Social.SLComposeServiceViewController::PushConfigurationViewController(UIKit.UIViewController)",
			"Social.SLComposeServiceViewController::SelectionChanged(UIKit.UITextView)",
			"Social.SLComposeServiceViewController::set_AutoCompletionViewController(UIKit.UIViewController)",
			"Social.SLComposeServiceViewController::set_CharactersRemaining(Foundation.NSNumber)",
			"Social.SLComposeServiceViewController::ShouldBeginEditing(UIKit.UITextView)",
			"Social.SLComposeServiceViewController::ShouldChangeText(UIKit.UITextView,Foundation.NSRange,System.String)",
			"Social.SLComposeServiceViewController::ShouldChangeTextInRange(AppKit.NSTextView,Foundation.NSRange,System.String)",
			"Social.SLComposeServiceViewController::ShouldChangeTextInRanges(AppKit.NSTextView,Foundation.NSValue[],System.String[])",
			"Social.SLComposeServiceViewController::ShouldChangeTypingAttributes(AppKit.NSTextView,Foundation.NSDictionary,Foundation.NSDictionary)",
			"Social.SLComposeServiceViewController::ShouldEndEditing(UIKit.UITextView)",
			"Social.SLComposeServiceViewController::ShouldInteractWithTextAttachment(UIKit.UITextView,UIKit.NSTextAttachment,Foundation.NSRange)",
			"Social.SLComposeServiceViewController::ShouldInteractWithTextAttachment(UIKit.UITextView,UIKit.NSTextAttachment,Foundation.NSRange,UIKit.UITextItemInteraction)",
			"Social.SLComposeServiceViewController::ShouldInteractWithUrl(UIKit.UITextView,Foundation.NSUrl,Foundation.NSRange)",
			"Social.SLComposeServiceViewController::ShouldInteractWithUrl(UIKit.UITextView,Foundation.NSUrl,Foundation.NSRange,UIKit.UITextItemInteraction)",
			"Social.SLComposeServiceViewController::ShouldSelectCandidates(AppKit.NSTextView,System.UIntPtr)",
			"Social.SLComposeServiceViewController::ShouldSetSpellingState(AppKit.NSTextView,System.IntPtr,Foundation.NSRange)",
			"Social.SLComposeServiceViewController::ShouldUpdateTouchBarItemIdentifiers(AppKit.NSTextView,System.String[])",
			"Social.SLComposeServiceViewController::WillChangeSelection(AppKit.NSTextView,Foundation.NSRange,Foundation.NSRange)",
			"Social.SLComposeServiceViewController::WillChangeSelectionFromRanges(AppKit.NSTextView,Foundation.NSValue[],Foundation.NSValue[])",
			"Social.SLComposeServiceViewController::WillCheckText(AppKit.NSTextView,Foundation.NSRange,Foundation.NSDictionary,Foundation.NSTextCheckingTypes)",
			"Social.SLComposeServiceViewController::WillDisplayToolTip(AppKit.NSTextView,System.String,System.UIntPtr)",
			"Social.SLComposeServiceViewController::WriteCell(AppKit.NSTextView,AppKit.NSTextAttachmentCell,System.UIntPtr,AppKit.NSPasteboard,System.String)",
			"Social.SLComposeViewController::.ctor(Foundation.NSCoder)",
			"Social.SLComposeViewController::.ctor(System.String,Foundation.NSBundle)",
			"Social.SLComposeViewController::AddImage(UIKit.UIImage)",
			"Social.SLComposeViewController::AddUrl(Foundation.NSUrl)",
			"Social.SLComposeViewController::FromService(Foundation.NSString)",
			"Social.SLComposeViewController::IsAvailable(Foundation.NSString)",
			"Social.SLRequest::AddMultipartData(Foundation.NSData,System.String,System.String)",
			"Social.SLRequest::AddMultipartData(Foundation.NSData,System.String,System.String,System.String)",
			"Social.SLRequest::Create(Foundation.NSString,Social.SLRequestMethod,Foundation.NSUrl,Foundation.NSDictionary)",
			"Social.SLRequest::set_Account(Accounts.ACAccount)",
			"SoundAnalysis.SNAudioFileAnalyzer::.ctor(Foundation.NSUrl,Foundation.NSError&)",
			"SoundAnalysis.SNAudioFileAnalyzer::AddRequest(SoundAnalysis.ISNRequest,SoundAnalysis.ISNResultsObserving,Foundation.NSError&)",
			"SoundAnalysis.SNAudioFileAnalyzer::RemoveRequest(SoundAnalysis.ISNRequest)",
			"SoundAnalysis.SNAudioStreamAnalyzer::.ctor(AVFoundation.AVAudioFormat)",
			"SoundAnalysis.SNAudioStreamAnalyzer::AddRequest(SoundAnalysis.ISNRequest,SoundAnalysis.ISNResultsObserving,Foundation.NSError&)",
			"SoundAnalysis.SNAudioStreamAnalyzer::Analyze(AVFoundation.AVAudioBuffer,System.Int64)",
			"SoundAnalysis.SNAudioStreamAnalyzer::RemoveRequest(SoundAnalysis.ISNRequest)",
			"SoundAnalysis.SNClassifySoundRequest::.ctor(CoreML.MLModel,Foundation.NSError&)",
			"SoundAnalysis.SNResultsObserving_Extensions::DidComplete(SoundAnalysis.ISNResultsObserving,SoundAnalysis.ISNRequest)",
			"SoundAnalysis.SNResultsObserving_Extensions::DidFail(SoundAnalysis.ISNResultsObserving,SoundAnalysis.ISNRequest,Foundation.NSError)",
			"SoundAnalysis.SNResultsObservingWrapper::DidProduceResult(SoundAnalysis.ISNRequest,SoundAnalysis.ISNResult)",
			"Speech.SFAcousticFeature::.ctor(Foundation.NSCoder)",
			"Speech.SFAcousticFeature::Copy(Foundation.NSZone)",
			"Speech.SFAcousticFeature::EncodeTo(Foundation.NSCoder)",
			"Speech.SFSpeechAudioBufferRecognitionRequest::Append(AVFoundation.AVAudioPcmBuffer)",
			"Speech.SFSpeechAudioBufferRecognitionRequest::Append(CoreMedia.CMSampleBuffer)",
			"Speech.SFSpeechRecognitionMetadata::.ctor(Foundation.NSCoder)",
			"Speech.SFSpeechRecognitionMetadata::Copy(Foundation.NSZone)",
			"Speech.SFSpeechRecognitionMetadata::EncodeTo(Foundation.NSCoder)",
			"Speech.SFSpeechRecognitionResult::.ctor(Foundation.NSCoder)",
			"Speech.SFSpeechRecognitionResult::Copy(Foundation.NSZone)",
			"Speech.SFSpeechRecognitionResult::EncodeTo(Foundation.NSCoder)",
			"Speech.SFSpeechRecognitionTaskDelegate_Extensions::DidDetectSpeech(Speech.ISFSpeechRecognitionTaskDelegate,Speech.SFSpeechRecognitionTask)",
			"Speech.SFSpeechRecognitionTaskDelegate_Extensions::DidFinishRecognition(Speech.ISFSpeechRecognitionTaskDelegate,Speech.SFSpeechRecognitionTask,Speech.SFSpeechRecognitionResult)",
			"Speech.SFSpeechRecognitionTaskDelegate_Extensions::DidFinishSuccessfully(Speech.ISFSpeechRecognitionTaskDelegate,Speech.SFSpeechRecognitionTask,System.Boolean)",
			"Speech.SFSpeechRecognitionTaskDelegate_Extensions::DidHypothesizeTranscription(Speech.ISFSpeechRecognitionTaskDelegate,Speech.SFSpeechRecognitionTask,Speech.SFTranscription)",
			"Speech.SFSpeechRecognitionTaskDelegate_Extensions::FinishedReadingAudio(Speech.ISFSpeechRecognitionTaskDelegate,Speech.SFSpeechRecognitionTask)",
			"Speech.SFSpeechRecognitionTaskDelegate_Extensions::WasCancelled(Speech.ISFSpeechRecognitionTaskDelegate,Speech.SFSpeechRecognitionTask)",
			"Speech.SFSpeechRecognizer::.ctor(Foundation.NSLocale)",
			"Speech.SFSpeechRecognizer::GetRecognitionTask(Speech.SFSpeechRecognitionRequest,Speech.ISFSpeechRecognitionTaskDelegate)",
			"Speech.SFSpeechRecognizer::GetRecognitionTask(Speech.SFSpeechRecognitionRequest,System.Action`2<Speech.SFSpeechRecognitionResult,Foundation.NSError>)",
			"Speech.SFSpeechRecognizer::set_Queue(Foundation.NSOperationQueue)",
			"Speech.SFSpeechRecognizerDelegate_Extensions::AvailabilityDidChange(Speech.ISFSpeechRecognizerDelegate,Speech.SFSpeechRecognizer,System.Boolean)",
			"Speech.SFSpeechUrlRecognitionRequest::.ctor(Foundation.NSUrl)",
			"Speech.SFTranscription::.ctor(Foundation.NSCoder)",
			"Speech.SFTranscription::Copy(Foundation.NSZone)",
			"Speech.SFTranscription::EncodeTo(Foundation.NSCoder)",
			"Speech.SFTranscriptionSegment::.ctor(Foundation.NSCoder)",
			"Speech.SFTranscriptionSegment::Copy(Foundation.NSZone)",
			"Speech.SFTranscriptionSegment::EncodeTo(Foundation.NSCoder)",
			"Speech.SFVoiceAnalytics::.ctor(Foundation.NSCoder)",
			"Speech.SFVoiceAnalytics::Copy(Foundation.NSZone)",
			"Speech.SFVoiceAnalytics::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SK3DNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SK3DNode::HitTest(CoreGraphics.CGPoint,Foundation.NSDictionary)",
			"SpriteKit.SK3DNode::set_PointOfView(SceneKit.SCNNode)",
			"SpriteKit.SK3DNode::set_ScnScene(SceneKit.SCNScene)",
			"SpriteKit.SKAction::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKAction::ColorizeWithColor(AppKit.NSColor,System.Runtime.InteropServices.NFloat,System.Double)",
			"SpriteKit.SKAction::ColorizeWithColor(UIKit.UIColor,System.Runtime.InteropServices.NFloat,System.Double)",
			"SpriteKit.SKAction::Copy(Foundation.NSZone)",
			"SpriteKit.SKAction::Create(System.String,Foundation.NSUrl)",
			"SpriteKit.SKAction::Create(System.String,Foundation.NSUrl,System.Double)",
			"SpriteKit.SKAction::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKAction::FollowPath(CoreGraphics.CGPath,System.Boolean,System.Boolean,System.Double)",
			"SpriteKit.SKAction::FollowPath(CoreGraphics.CGPath,System.Boolean,System.Boolean,System.Runtime.InteropServices.NFloat)",
			"SpriteKit.SKAction::FollowPath(CoreGraphics.CGPath,System.Double)",
			"SpriteKit.SKAction::FollowPath(CoreGraphics.CGPath,System.Runtime.InteropServices.NFloat)",
			"SpriteKit.SKAction::PerformSelector(ObjCRuntime.Selector,Foundation.NSObject)",
			"SpriteKit.SKAction::ReachTo(CoreGraphics.CGPoint,SpriteKit.SKNode,System.Double)",
			"SpriteKit.SKAction::ReachTo(CoreGraphics.CGPoint,SpriteKit.SKNode,System.Runtime.InteropServices.NFloat)",
			"SpriteKit.SKAction::ReachToNode(SpriteKit.SKNode,SpriteKit.SKNode,System.Double)",
			"SpriteKit.SKAction::ReachToNode(SpriteKit.SKNode,SpriteKit.SKNode,System.Runtime.InteropServices.NFloat)",
			"SpriteKit.SKAction::RepeatAction(SpriteKit.SKAction,System.UIntPtr)",
			"SpriteKit.SKAction::RepeatActionForever(SpriteKit.SKAction)",
			"SpriteKit.SKAction::Run(System.Action,CoreFoundation.DispatchQueue)",
			"SpriteKit.SKAction::RunAction(SpriteKit.SKAction,System.String)",
			"SpriteKit.SKAction::SetNormalTexture(SpriteKit.SKTexture)",
			"SpriteKit.SKAction::SetNormalTexture(SpriteKit.SKTexture,System.Boolean)",
			"SpriteKit.SKAction::SetTexture(SpriteKit.SKTexture)",
			"SpriteKit.SKAction::SetTexture(SpriteKit.SKTexture,System.Boolean)",
			"SpriteKit.SKAction::WarpTo(SpriteKit.SKWarpGeometry,System.Double)",
			"SpriteKit.SKAttribute::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKAttribute::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKAttributeValue::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKAttributeValue::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKAudioNode::.ctor(AVFoundation.AVAudioNode)",
			"SpriteKit.SKAudioNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKAudioNode::.ctor(Foundation.NSUrl)",
			"SpriteKit.SKAudioNode::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKAudioNode::set_AvAudioNode(AVFoundation.AVAudioNode)",
			"SpriteKit.SKCameraNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKCameraNode::Contains(SpriteKit.SKNode)",
			"SpriteKit.SKConstraint::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKConstraint::Copy(Foundation.NSZone)",
			"SpriteKit.SKConstraint::CreateDistance(SpriteKit.SKRange,CoreGraphics.CGPoint)",
			"SpriteKit.SKConstraint::CreateDistance(SpriteKit.SKRange,CoreGraphics.CGPoint,SpriteKit.SKNode)",
			"SpriteKit.SKConstraint::CreateDistance(SpriteKit.SKRange,SpriteKit.SKNode)",
			"SpriteKit.SKConstraint::CreateOrientToNode(SpriteKit.SKNode,SpriteKit.SKRange)",
			"SpriteKit.SKConstraint::CreateOrientToPoint(CoreGraphics.CGPoint,SpriteKit.SKNode,SpriteKit.SKRange)",
			"SpriteKit.SKConstraint::CreateOrientToPoint(CoreGraphics.CGPoint,SpriteKit.SKRange)",
			"SpriteKit.SKConstraint::CreateRestriction(SpriteKit.SKRange,SpriteKit.SKRange)",
			"SpriteKit.SKConstraint::CreateXRestriction(SpriteKit.SKRange)",
			"SpriteKit.SKConstraint::CreateYRestriction(SpriteKit.SKRange)",
			"SpriteKit.SKConstraint::CreateZRotation(SpriteKit.SKRange)",
			"SpriteKit.SKConstraint::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKConstraint::set_ReferenceNode(SpriteKit.SKNode)",
			"SpriteKit.SKCropNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKCropNode::set_MaskNode(SpriteKit.SKNode)",
			"SpriteKit.SKEffectNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKEffectNode::set_AttributeValues(Foundation.NSDictionary`2<Foundation.NSString,SpriteKit.SKAttributeValue>)",
			"SpriteKit.SKEffectNode::set_Filter(CoreImage.CIFilter)",
			"SpriteKit.SKEffectNode::set_Shader(SpriteKit.SKShader)",
			"SpriteKit.SKEffectNode::SetValue(SpriteKit.SKAttributeValue,System.String)",
			"SpriteKit.SKEmitterNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKEmitterNode::set_AttributeValues(Foundation.NSDictionary`2<Foundation.NSString,SpriteKit.SKAttributeValue>)",
			"SpriteKit.SKEmitterNode::set_ParticleAction(SpriteKit.SKAction)",
			"SpriteKit.SKEmitterNode::set_ParticleAlphaSequence(SpriteKit.SKKeyframeSequence)",
			"SpriteKit.SKEmitterNode::set_ParticleColor(AppKit.NSColor)",
			"SpriteKit.SKEmitterNode::set_ParticleColor(UIKit.UIColor)",
			"SpriteKit.SKEmitterNode::set_ParticleColorBlendFactorSequence(SpriteKit.SKKeyframeSequence)",
			"SpriteKit.SKEmitterNode::set_ParticleColorSequence(SpriteKit.SKKeyframeSequence)",
			"SpriteKit.SKEmitterNode::set_ParticleScaleSequence(SpriteKit.SKKeyframeSequence)",
			"SpriteKit.SKEmitterNode::set_ParticleTexture(SpriteKit.SKTexture)",
			"SpriteKit.SKEmitterNode::set_Shader(SpriteKit.SKShader)",
			"SpriteKit.SKEmitterNode::SetValue(SpriteKit.SKAttributeValue,System.String)",
			"SpriteKit.SKFieldNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKFieldNode::CreateVelocityField(SpriteKit.SKTexture)",
			"SpriteKit.SKFieldNode::set_Region(SpriteKit.SKRegion)",
			"SpriteKit.SKFieldNode::set_Texture(SpriteKit.SKTexture)",
			"SpriteKit.SKKeyframeSequence::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKKeyframeSequence::.ctor(Foundation.NSObject[],Foundation.NSArray)",
			"SpriteKit.SKKeyframeSequence::AddKeyframeValue(Foundation.NSObject,System.Runtime.InteropServices.NFloat)",
			"SpriteKit.SKKeyframeSequence::Copy(Foundation.NSZone)",
			"SpriteKit.SKKeyframeSequence::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKKeyframeSequence::SetKeyframeValue(Foundation.NSObject,System.Runtime.InteropServices.NFloat,System.UIntPtr)",
			"SpriteKit.SKKeyframeSequence::SetKeyframeValue(Foundation.NSObject,System.UIntPtr)",
			"SpriteKit.SKLabelNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKLabelNode::FromText(Foundation.NSAttributedString)",
			"SpriteKit.SKLabelNode::set_AttributedText(Foundation.NSAttributedString)",
			"SpriteKit.SKLabelNode::set_Color(AppKit.NSColor)",
			"SpriteKit.SKLabelNode::set_Color(UIKit.UIColor)",
			"SpriteKit.SKLabelNode::set_FontColor(AppKit.NSColor)",
			"SpriteKit.SKLabelNode::set_FontColor(UIKit.UIColor)",
			"SpriteKit.SKLightNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKLightNode::set_AmbientColor(AppKit.NSColor)",
			"SpriteKit.SKLightNode::set_AmbientColor(UIKit.UIColor)",
			"SpriteKit.SKLightNode::set_LightColor(AppKit.NSColor)",
			"SpriteKit.SKLightNode::set_LightColor(UIKit.UIColor)",
			"SpriteKit.SKLightNode::set_ShadowColor(AppKit.NSColor)",
			"SpriteKit.SKLightNode::set_ShadowColor(UIKit.UIColor)",
			"SpriteKit.SKMutableTexture::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKNode::AddChild(SpriteKit.SKNode)",
			"SpriteKit.SKNode::ConvertPointFromNode(CoreGraphics.CGPoint,SpriteKit.SKNode)",
			"SpriteKit.SKNode::ConvertPointToNode(CoreGraphics.CGPoint,SpriteKit.SKNode)",
			"SpriteKit.SKNode::Copy(Foundation.NSZone)",
			"SpriteKit.SKNode::Create(System.String,Foundation.NSSet`1<ObjCRuntime.Class>,Foundation.NSError&)",
			"SpriteKit.SKNode::DidHintFocusMovement(UIKit.UIFocusMovementHint)",
			"SpriteKit.SKNode::DidUpdateFocus(UIKit.UIFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)",
			"SpriteKit.SKNode::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKNode::GetSoundIdentifier(UIKit.UIFocusUpdateContext)",
			"SpriteKit.SKNode::InParentHierarchy(SpriteKit.SKNode)",
			"SpriteKit.SKNode::InsertChild(SpriteKit.SKNode,System.IntPtr)",
			"SpriteKit.SKNode::IntersectsNode(SpriteKit.SKNode)",
			"SpriteKit.SKNode::IsEqual(SpriteKit.SKNode)",
			"SpriteKit.SKNode::MoveToParent(SpriteKit.SKNode)",
			"SpriteKit.SKNode::RunAction(SpriteKit.SKAction)",
			"SpriteKit.SKNode::RunAction(SpriteKit.SKAction,System.Action)",
			"SpriteKit.SKNode::RunAction(SpriteKit.SKAction,System.String)",
			"SpriteKit.SKNode::set_PhysicsBody(SpriteKit.SKPhysicsBody)",
			"SpriteKit.SKNode::set_ReachConstraints(SpriteKit.SKReachConstraints)",
			"SpriteKit.SKNode::set_UserData(Foundation.NSMutableDictionary)",
			"SpriteKit.SKNode::ShouldUpdateFocus(UIKit.UIFocusUpdateContext)",
			"SpriteKit.SKNodeEvent_NSEvent::LocationInNode(AppKit.NSEvent,SpriteKit.SKNode)",
			"SpriteKit.SKNodeTouches_UITouch::LocationInNode(UIKit.UITouch,SpriteKit.SKNode)",
			"SpriteKit.SKNodeTouches_UITouch::PreviousLocationInNode(UIKit.UITouch,SpriteKit.SKNode)",
			"SpriteKit.SKPhysicsBody::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKPhysicsBody::Copy(Foundation.NSZone)",
			"SpriteKit.SKPhysicsBody::Create(SpriteKit.SKTexture,CoreGraphics.CGSize)",
			"SpriteKit.SKPhysicsBody::Create(SpriteKit.SKTexture,System.Single,CoreGraphics.CGSize)",
			"SpriteKit.SKPhysicsBody::CreateBodyFromPath(CoreGraphics.CGPath)",
			"SpriteKit.SKPhysicsBody::CreateEdgeChain(CoreGraphics.CGPath)",
			"SpriteKit.SKPhysicsBody::CreateEdgeLoop(CoreGraphics.CGPath)",
			"SpriteKit.SKPhysicsBody::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKPhysicsContactDelegate_Extensions::DidBeginContact(SpriteKit.ISKPhysicsContactDelegate,SpriteKit.SKPhysicsContact)",
			"SpriteKit.SKPhysicsContactDelegate_Extensions::DidEndContact(SpriteKit.ISKPhysicsContactDelegate,SpriteKit.SKPhysicsContact)",
			"SpriteKit.SKPhysicsJoint::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKPhysicsJoint::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKPhysicsJoint::set_BodyA(SpriteKit.SKPhysicsBody)",
			"SpriteKit.SKPhysicsJoint::set_BodyB(SpriteKit.SKPhysicsBody)",
			"SpriteKit.SKPhysicsJointFixed::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKPhysicsJointFixed::Create(SpriteKit.SKPhysicsBody,SpriteKit.SKPhysicsBody,CoreGraphics.CGPoint)",
			"SpriteKit.SKPhysicsJointLimit::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKPhysicsJointLimit::Create(SpriteKit.SKPhysicsBody,SpriteKit.SKPhysicsBody,CoreGraphics.CGPoint,CoreGraphics.CGPoint)",
			"SpriteKit.SKPhysicsJointPin::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKPhysicsJointPin::Create(SpriteKit.SKPhysicsBody,SpriteKit.SKPhysicsBody,CoreGraphics.CGPoint)",
			"SpriteKit.SKPhysicsJointSliding::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKPhysicsJointSliding::Create(SpriteKit.SKPhysicsBody,SpriteKit.SKPhysicsBody,CoreGraphics.CGPoint,CoreGraphics.CGVector)",
			"SpriteKit.SKPhysicsJointSpring::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKPhysicsJointSpring::Create(SpriteKit.SKPhysicsBody,SpriteKit.SKPhysicsBody,CoreGraphics.CGPoint,CoreGraphics.CGPoint)",
			"SpriteKit.SKPhysicsWorld::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKPhysicsWorld::AddJoint(SpriteKit.SKPhysicsJoint)",
			"SpriteKit.SKPhysicsWorld::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKPhysicsWorld::RemoveJoint(SpriteKit.SKPhysicsJoint)",
			"SpriteKit.SKRange::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKRange::Copy(Foundation.NSZone)",
			"SpriteKit.SKRange::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKReachConstraints::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKReachConstraints::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKReferenceNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKReferenceNode::.ctor(Foundation.NSUrl)",
			"SpriteKit.SKReferenceNode::DidLoadReferenceNode(SpriteKit.SKNode)",
			"SpriteKit.SKReferenceNode::FromUrl(Foundation.NSUrl)",
			"SpriteKit.SKRegion::.ctor(CoreGraphics.CGPath)",
			"SpriteKit.SKRegion::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKRegion::Copy(Foundation.NSZone)",
			"SpriteKit.SKRegion::CreateDifference(SpriteKit.SKRegion)",
			"SpriteKit.SKRegion::CreateIntersection(SpriteKit.SKRegion)",
			"SpriteKit.SKRegion::CreateUnion(SpriteKit.SKRegion)",
			"SpriteKit.SKRegion::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKRenderer::FromDevice(Metal.IMTLDevice)",
			"SpriteKit.SKRenderer::Render(CoreGraphics.CGRect,Metal.IMTLCommandBuffer,Metal.MTLRenderPassDescriptor)",
			"SpriteKit.SKRenderer::Render(CoreGraphics.CGRect,Metal.IMTLRenderCommandEncoder,Metal.MTLRenderPassDescriptor,Metal.IMTLCommandQueue)",
			"SpriteKit.SKScene::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKScene::DidMoveToView(SpriteKit.SKView)",
			"SpriteKit.SKScene::set_BackgroundColor(AppKit.NSColor)",
			"SpriteKit.SKScene::set_BackgroundColor(UIKit.UIColor)",
			"SpriteKit.SKScene::WillMoveFromView(SpriteKit.SKView)",
			"SpriteKit.SKSceneDelegate_Extensions::DidApplyConstraints(SpriteKit.ISKSceneDelegate,SpriteKit.SKScene)",
			"SpriteKit.SKSceneDelegate_Extensions::DidEvaluateActions(SpriteKit.ISKSceneDelegate,SpriteKit.SKScene)",
			"SpriteKit.SKSceneDelegate_Extensions::DidFinishUpdate(SpriteKit.ISKSceneDelegate,SpriteKit.SKScene)",
			"SpriteKit.SKSceneDelegate_Extensions::DidSimulatePhysics(SpriteKit.ISKSceneDelegate,SpriteKit.SKScene)",
			"SpriteKit.SKSceneDelegate_Extensions::Update(SpriteKit.ISKSceneDelegate,System.Double,SpriteKit.SKScene)",
			"SpriteKit.SKShader::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKShader::AddUniform(SpriteKit.SKUniform)",
			"SpriteKit.SKShader::Copy(Foundation.NSZone)",
			"SpriteKit.SKShader::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKShapeNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKShapeNode::FromPath(CoreGraphics.CGPath)",
			"SpriteKit.SKShapeNode::FromPath(CoreGraphics.CGPath,System.Boolean)",
			"SpriteKit.SKShapeNode::set_AttributeValues(Foundation.NSDictionary`2<Foundation.NSString,SpriteKit.SKAttributeValue>)",
			"SpriteKit.SKShapeNode::set_FillColor(AppKit.NSColor)",
			"SpriteKit.SKShapeNode::set_FillColor(UIKit.UIColor)",
			"SpriteKit.SKShapeNode::set_FillShader(SpriteKit.SKShader)",
			"SpriteKit.SKShapeNode::set_FillTexture(SpriteKit.SKTexture)",
			"SpriteKit.SKShapeNode::set_Path(CoreGraphics.CGPath)",
			"SpriteKit.SKShapeNode::set_StrokeColor(AppKit.NSColor)",
			"SpriteKit.SKShapeNode::set_StrokeColor(UIKit.UIColor)",
			"SpriteKit.SKShapeNode::set_StrokeShader(SpriteKit.SKShader)",
			"SpriteKit.SKShapeNode::set_StrokeTexture(SpriteKit.SKTexture)",
			"SpriteKit.SKShapeNode::SetValue(SpriteKit.SKAttributeValue,System.String)",
			"SpriteKit.SKSpriteNode::.ctor(AppKit.NSColor,CoreGraphics.CGSize)",
			"SpriteKit.SKSpriteNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKSpriteNode::.ctor(SpriteKit.SKTexture)",
			"SpriteKit.SKSpriteNode::.ctor(SpriteKit.SKTexture,AppKit.NSColor,CoreGraphics.CGSize)",
			"SpriteKit.SKSpriteNode::.ctor(SpriteKit.SKTexture,UIKit.UIColor,CoreGraphics.CGSize)",
			"SpriteKit.SKSpriteNode::.ctor(UIKit.UIColor,CoreGraphics.CGSize)",
			"SpriteKit.SKSpriteNode::Create(SpriteKit.SKTexture,SpriteKit.SKTexture)",
			"SpriteKit.SKSpriteNode::FromColor(AppKit.NSColor,CoreGraphics.CGSize)",
			"SpriteKit.SKSpriteNode::FromColor(UIKit.UIColor,CoreGraphics.CGSize)",
			"SpriteKit.SKSpriteNode::FromTexture(SpriteKit.SKTexture)",
			"SpriteKit.SKSpriteNode::FromTexture(SpriteKit.SKTexture,CoreGraphics.CGSize)",
			"SpriteKit.SKSpriteNode::set_AttributeValues(Foundation.NSDictionary`2<Foundation.NSString,SpriteKit.SKAttributeValue>)",
			"SpriteKit.SKSpriteNode::set_Color(AppKit.NSColor)",
			"SpriteKit.SKSpriteNode::set_Color(UIKit.UIColor)",
			"SpriteKit.SKSpriteNode::set_NormalTexture(SpriteKit.SKTexture)",
			"SpriteKit.SKSpriteNode::set_Shader(SpriteKit.SKShader)",
			"SpriteKit.SKSpriteNode::set_Texture(SpriteKit.SKTexture)",
			"SpriteKit.SKSpriteNode::SetValue(SpriteKit.SKAttributeValue,System.String)",
			"SpriteKit.SKTexture::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKTexture::Copy(Foundation.NSZone)",
			"SpriteKit.SKTexture::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKTexture::FromData(Foundation.NSData,CoreGraphics.CGSize)",
			"SpriteKit.SKTexture::FromData(Foundation.NSData,CoreGraphics.CGSize,System.Boolean)",
			"SpriteKit.SKTexture::FromData(Foundation.NSData,CoreGraphics.CGSize,System.UInt32,System.UInt32)",
			"SpriteKit.SKTexture::FromImage(AppKit.NSImage)",
			"SpriteKit.SKTexture::FromImage(CoreGraphics.CGImage)",
			"SpriteKit.SKTexture::FromImage(UIKit.UIImage)",
			"SpriteKit.SKTexture::FromNoiseMap(GameplayKit.GKNoiseMap)",
			"SpriteKit.SKTexture::FromRectangle(CoreGraphics.CGRect,SpriteKit.SKTexture)",
			"SpriteKit.SKTexture::TextureByApplyingCIFilter(CoreImage.CIFilter)",
			"SpriteKit.SKTextureAtlas::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKTextureAtlas::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKTextureAtlas::FromDictionary(Foundation.NSDictionary)",
			"SpriteKit.SKTileDefinition::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKTileDefinition::.ctor(SpriteKit.SKTexture)",
			"SpriteKit.SKTileDefinition::.ctor(SpriteKit.SKTexture,CoreGraphics.CGSize)",
			"SpriteKit.SKTileDefinition::.ctor(SpriteKit.SKTexture,SpriteKit.SKTexture,CoreGraphics.CGSize)",
			"SpriteKit.SKTileDefinition::Copy(Foundation.NSZone)",
			"SpriteKit.SKTileDefinition::Create(SpriteKit.SKTexture)",
			"SpriteKit.SKTileDefinition::Create(SpriteKit.SKTexture,CoreGraphics.CGSize)",
			"SpriteKit.SKTileDefinition::Create(SpriteKit.SKTexture,SpriteKit.SKTexture,CoreGraphics.CGSize)",
			"SpriteKit.SKTileDefinition::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKTileDefinition::set_UserData(Foundation.NSMutableDictionary)",
			"SpriteKit.SKTileGroup::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKTileGroup::.ctor(SpriteKit.SKTileDefinition)",
			"SpriteKit.SKTileGroup::Copy(Foundation.NSZone)",
			"SpriteKit.SKTileGroup::Create(SpriteKit.SKTileDefinition)",
			"SpriteKit.SKTileGroup::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKTileGroupRule::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKTileGroupRule::Copy(Foundation.NSZone)",
			"SpriteKit.SKTileGroupRule::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKTileMapNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKTileMapNode::.ctor(SpriteKit.SKTileSet,System.UIntPtr,System.UIntPtr,CoreGraphics.CGSize)",
			"SpriteKit.SKTileMapNode::.ctor(SpriteKit.SKTileSet,System.UIntPtr,System.UIntPtr,CoreGraphics.CGSize,SpriteKit.SKTileGroup)",
			"SpriteKit.SKTileMapNode::.ctor(SpriteKit.SKTileSet,System.UIntPtr,System.UIntPtr,CoreGraphics.CGSize,SpriteKit.SKTileGroup[])",
			"SpriteKit.SKTileMapNode::Copy(Foundation.NSZone)",
			"SpriteKit.SKTileMapNode::Create(SpriteKit.SKTileSet,System.UIntPtr,System.UIntPtr,CoreGraphics.CGSize)",
			"SpriteKit.SKTileMapNode::Create(SpriteKit.SKTileSet,System.UIntPtr,System.UIntPtr,CoreGraphics.CGSize,SpriteKit.SKTileGroup)",
			"SpriteKit.SKTileMapNode::Create(SpriteKit.SKTileSet,System.UIntPtr,System.UIntPtr,CoreGraphics.CGSize,SpriteKit.SKTileGroup[])",
			"SpriteKit.SKTileMapNode::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKTileMapNode::Fill(SpriteKit.SKTileGroup)",
			"SpriteKit.SKTileMapNode::FromTileSet(SpriteKit.SKTileSet,System.UIntPtr,System.UIntPtr,CoreGraphics.CGSize,GameplayKit.GKNoiseMap,Foundation.NSNumber[])",
			"SpriteKit.SKTileMapNode::set_AttributeValues(Foundation.NSDictionary`2<Foundation.NSString,SpriteKit.SKAttributeValue>)",
			"SpriteKit.SKTileMapNode::set_Color(AppKit.NSColor)",
			"SpriteKit.SKTileMapNode::set_Color(UIKit.UIColor)",
			"SpriteKit.SKTileMapNode::set_Shader(SpriteKit.SKShader)",
			"SpriteKit.SKTileMapNode::SetTileGroup(SpriteKit.SKTileGroup,SpriteKit.SKTileDefinition,System.UIntPtr,System.UIntPtr)",
			"SpriteKit.SKTileMapNode::SetTileGroup(SpriteKit.SKTileGroup,System.UIntPtr,System.UIntPtr)",
			"SpriteKit.SKTileMapNode::SetValue(SpriteKit.SKAttributeValue,System.String)",
			"SpriteKit.SKTileSet::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKTileSet::Copy(Foundation.NSZone)",
			"SpriteKit.SKTileSet::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKTileSet::FromUrl(Foundation.NSUrl)",
			"SpriteKit.SKTransformNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKTransition::Copy(Foundation.NSZone)",
			"SpriteKit.SKTransition::FadeWithColor(AppKit.NSColor,System.Double)",
			"SpriteKit.SKTransition::FadeWithColor(UIKit.UIColor,System.Double)",
			"SpriteKit.SKTransition::TransitionWithCIFilter(CoreImage.CIFilter,System.Double)",
			"SpriteKit.SKUniform::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKUniform::.ctor(System.String,SpriteKit.SKTexture)",
			"SpriteKit.SKUniform::Copy(Foundation.NSZone)",
			"SpriteKit.SKUniform::Create(System.String,SpriteKit.SKTexture)",
			"SpriteKit.SKUniform::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKUniform::set_TextureValue(SpriteKit.SKTexture)",
			"SpriteKit.SKVideoNode::.ctor(AVFoundation.AVPlayer)",
			"SpriteKit.SKVideoNode::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKVideoNode::FromPlayer(AVFoundation.AVPlayer)",
			"SpriteKit.SKVideoNode::InitWithURL(Foundation.NSUrl)",
			"SpriteKit.SKVideoNode::InitWithVideoURL(Foundation.NSUrl)",
			"SpriteKit.SKVideoNode::VideoNodeWithURL(Foundation.NSUrl)",
			"SpriteKit.SKVideoNode::VideoNodeWithVideoURL(Foundation.NSUrl)",
			"SpriteKit.SKView::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKView::ConvertPointFromScene(CoreGraphics.CGPoint,SpriteKit.SKScene)",
			"SpriteKit.SKView::ConvertPointToScene(CoreGraphics.CGPoint,SpriteKit.SKScene)",
			"SpriteKit.SKView::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKView::PresentScene(SpriteKit.SKScene)",
			"SpriteKit.SKView::PresentScene(SpriteKit.SKScene,SpriteKit.SKTransition)",
			"SpriteKit.SKView::TextureFromNode(SpriteKit.SKNode)",
			"SpriteKit.SKView::TextureFromNode(SpriteKit.SKNode,CoreGraphics.CGRect)",
			"SpriteKit.SKViewDelegate_Extensions::ShouldRender(SpriteKit.ISKViewDelegate,SpriteKit.SKView,System.Double)",
			"SpriteKit.SKWarpableWrapper::set_WarpGeometry(SpriteKit.SKWarpGeometry)",
			"SpriteKit.SKWarpGeometry::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKWarpGeometry::Copy(Foundation.NSZone)",
			"SpriteKit.SKWarpGeometry::EncodeTo(Foundation.NSCoder)",
			"SpriteKit.SKWarpGeometryGrid::.ctor(Foundation.NSCoder)",
			"SpriteKit.SKWarpGeometryGrid::EncodeTo(Foundation.NSCoder)",
			"StoreKit.SKAdImpression::set_AdCampaignIdentifier(Foundation.NSNumber)",
			"StoreKit.SKAdImpression::set_AdvertisedAppStoreItemIdentifier(Foundation.NSNumber)",
			"StoreKit.SKAdImpression::set_SourceAppStoreItemIdentifier(Foundation.NSNumber)",
			"StoreKit.SKAdImpression::set_Timestamp(Foundation.NSNumber)",
			"StoreKit.SKAdNetwork::EndImpression(StoreKit.SKAdImpression,System.Action`1<Foundation.NSError>)",
			"StoreKit.SKAdNetwork::StartImpression(StoreKit.SKAdImpression,System.Action`1<Foundation.NSError>)",
			"StoreKit.SKArcadeService::Register(Foundation.NSData,System.UInt32,StoreKit.SKArcadeServiceRegisterHandler)",
			"StoreKit.SKCloudServiceSetupViewController::.ctor(Foundation.NSCoder)",
			"StoreKit.SKCloudServiceSetupViewController::Load(Foundation.NSDictionary,System.Action`2<System.Boolean,Foundation.NSError>)",
			"StoreKit.SKCloudServiceSetupViewControllerDelegate_Extensions::DidDismiss(StoreKit.ISKCloudServiceSetupViewControllerDelegate,StoreKit.SKCloudServiceSetupViewController)",
			"StoreKit.SKMutablePayment::PaymentWithProduct(StoreKit.SKProduct)",
			"StoreKit.SKMutablePayment::set_PaymentDiscount(StoreKit.SKPaymentDiscount)",
			"StoreKit.SKMutablePayment::set_RequestData(Foundation.NSData)",
			"StoreKit.SKOverlay::.ctor(StoreKit.SKOverlayConfiguration)",
			"StoreKit.SKOverlay::DismissOverlayInScene(UIKit.UIWindowScene)",
			"StoreKit.SKOverlay::PresentInScene(UIKit.UIWindowScene)",
			"StoreKit.SKOverlayAppClipConfiguration::SetAdditionalValue(Foundation.NSObject,System.String)",
			"StoreKit.SKOverlayAppConfiguration::SetAdditionalValue(Foundation.NSObject,System.String)",
			"StoreKit.SKOverlayDelegate_Extensions::DidFailToLoad(StoreKit.ISKOverlayDelegate,StoreKit.SKOverlay,Foundation.NSError)",
			"StoreKit.SKOverlayDelegate_Extensions::DidFinishDismissal(StoreKit.ISKOverlayDelegate,StoreKit.SKOverlay,StoreKit.SKOverlayTransitionContext)",
			"StoreKit.SKOverlayDelegate_Extensions::DidFinishPresentation(StoreKit.ISKOverlayDelegate,StoreKit.SKOverlay,StoreKit.SKOverlayTransitionContext)",
			"StoreKit.SKOverlayDelegate_Extensions::WillStartDismissal(StoreKit.ISKOverlayDelegate,StoreKit.SKOverlay,StoreKit.SKOverlayTransitionContext)",
			"StoreKit.SKOverlayDelegate_Extensions::WillStartPresentation(StoreKit.ISKOverlayDelegate,StoreKit.SKOverlay,StoreKit.SKOverlayTransitionContext)",
			"StoreKit.SKPayment::Copy(Foundation.NSZone)",
			"StoreKit.SKPayment::CreateFrom(StoreKit.SKProduct)",
			"StoreKit.SKPayment::MutableCopy(Foundation.NSZone)",
			"StoreKit.SKPaymentDiscount::.ctor(System.String,System.String,Foundation.NSUuid,System.String,Foundation.NSNumber)",
			"StoreKit.SKPaymentQueue::AddPayment(StoreKit.SKPayment)",
			"StoreKit.SKPaymentQueue::AddTransactionObserver(StoreKit.ISKPaymentTransactionObserver)",
			"StoreKit.SKPaymentQueue::FinishTransaction(StoreKit.SKPaymentTransaction)",
			"StoreKit.SKPaymentQueue::RemoveTransactionObserver(StoreKit.ISKPaymentTransactionObserver)",
			"StoreKit.SKPaymentQueueDelegate_Extensions::ShouldContinueTransaction(StoreKit.ISKPaymentQueueDelegate,StoreKit.SKPaymentQueue,StoreKit.SKPaymentTransaction,StoreKit.SKStorefront)",
			"StoreKit.SKPaymentQueueDelegate_Extensions::ShouldShowPriceConsent(StoreKit.ISKPaymentQueueDelegate,StoreKit.SKPaymentQueue)",
			"StoreKit.SKPaymentTransactionObserver_Extensions::DidChangeStorefront(StoreKit.ISKPaymentTransactionObserver,StoreKit.SKPaymentQueue)",
			"StoreKit.SKPaymentTransactionObserver_Extensions::DidRevokeEntitlements(StoreKit.ISKPaymentTransactionObserver,StoreKit.SKPaymentQueue,System.String[])",
			"StoreKit.SKPaymentTransactionObserver_Extensions::RemovedTransactions(StoreKit.ISKPaymentTransactionObserver,StoreKit.SKPaymentQueue,StoreKit.SKPaymentTransaction[])",
			"StoreKit.SKPaymentTransactionObserver_Extensions::RestoreCompletedTransactionsFailedWithError(StoreKit.ISKPaymentTransactionObserver,StoreKit.SKPaymentQueue,Foundation.NSError)",
			"StoreKit.SKPaymentTransactionObserver_Extensions::RestoreCompletedTransactionsFinished(StoreKit.ISKPaymentTransactionObserver,StoreKit.SKPaymentQueue)",
			"StoreKit.SKPaymentTransactionObserver_Extensions::ShouldAddStorePayment(StoreKit.ISKPaymentTransactionObserver,StoreKit.SKPaymentQueue,StoreKit.SKPayment,StoreKit.SKProduct)",
			"StoreKit.SKPaymentTransactionObserver_Extensions::UpdatedDownloads(StoreKit.ISKPaymentTransactionObserver,StoreKit.SKPaymentQueue,StoreKit.SKDownload[])",
			"StoreKit.SKPaymentTransactionObserverWrapper::UpdatedTransactions(StoreKit.SKPaymentQueue,StoreKit.SKPaymentTransaction[])",
			"StoreKit.SKProductsRequest::.ctor(Foundation.NSSet)",
			"StoreKit.SKProductsRequestDelegateWrapper::ReceivedResponse(StoreKit.SKProductsRequest,StoreKit.SKProductsResponse)",
			"StoreKit.SKProductStorePromotionController::FetchStorePromotionVisibility(StoreKit.SKProduct,System.Action`2<StoreKit.SKProductStorePromotionVisibility,Foundation.NSError>)",
			"StoreKit.SKProductStorePromotionController::Update(StoreKit.SKProductStorePromotionVisibility,StoreKit.SKProduct,System.Action`1<Foundation.NSError>)",
			"StoreKit.SKReceiptRefreshRequest::.ctor(Foundation.NSDictionary)",
			"StoreKit.SKRequestDelegate_Extensions::RequestFailed(StoreKit.ISKRequestDelegate,StoreKit.SKRequest,Foundation.NSError)",
			"StoreKit.SKRequestDelegate_Extensions::RequestFinished(StoreKit.ISKRequestDelegate,StoreKit.SKRequest)",
			"StoreKit.SKStoreProductViewController::.ctor(Foundation.NSCoder)",
			"StoreKit.SKStoreProductViewController::LoadProduct(Foundation.NSDictionary,System.Action`2<System.Boolean,Foundation.NSError>)",
			"StoreKit.SKStoreProductViewControllerDelegate_Extensions::Finished(StoreKit.ISKStoreProductViewControllerDelegate,StoreKit.SKStoreProductViewController)",
			"StoreKit.SKStoreReviewController::RequestReview(UIKit.UIWindowScene)",
			"SystemConfiguration.NetworkReachability::Schedule(CoreFoundation.CFRunLoop,System.String)",
			"SystemConfiguration.NetworkReachability::SetDispatchQueue(CoreFoundation.DispatchQueue)",
			"SystemConfiguration.NetworkReachability::Unschedule(CoreFoundation.CFRunLoop,System.String)",
			"ThreadNetwork.THClient::DeleteCredentialsForBorderAgent(Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"ThreadNetwork.THClient::RetrieveCredentialsForBorderAgent(Foundation.NSData,System.Action`2<ThreadNetwork.THCredentials,Foundation.NSError>)",
			"ThreadNetwork.THClient::RetrieveCredentialsForExtendedPanId(Foundation.NSData,System.Action`2<ThreadNetwork.THCredentials,Foundation.NSError>)",
			"ThreadNetwork.THClient::StoreCredentialsForBorderAgent(Foundation.NSData,Foundation.NSData,System.Action`1<Foundation.NSError>)",
			"ThreadNetwork.THCredentials::.ctor(Foundation.NSCoder)",
			"ThreadNetwork.THCredentials::EncodeTo(Foundation.NSCoder)",
			"TVMLKit.TVApplicationController::.ctor(TVMLKit.TVApplicationControllerContext,UIKit.UIWindow,TVMLKit.ITVApplicationControllerDelegate)",
			"TVMLKit.TVApplicationControllerContext::Copy(Foundation.NSZone)",
			"TVMLKit.TVApplicationControllerContext::set_JavaScriptApplicationUrl(Foundation.NSUrl)",
			"TVMLKit.TVApplicationControllerContext::set_LaunchOptions(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"TVMLKit.TVApplicationControllerDelegate_Extensions::DidFail(TVMLKit.ITVApplicationControllerDelegate,TVMLKit.TVApplicationController,Foundation.NSError)",
			"TVMLKit.TVApplicationControllerDelegate_Extensions::DidFinishLaunching(TVMLKit.ITVApplicationControllerDelegate,TVMLKit.TVApplicationController,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"TVMLKit.TVApplicationControllerDelegate_Extensions::DidStop(TVMLKit.ITVApplicationControllerDelegate,TVMLKit.TVApplicationController,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"TVMLKit.TVApplicationControllerDelegate_Extensions::EvaluateAppJavaScript(TVMLKit.ITVApplicationControllerDelegate,TVMLKit.TVApplicationController,JavaScriptCore.JSContext)",
			"TVMLKit.TVApplicationControllerDelegate_Extensions::GetPlayer(TVMLKit.ITVApplicationControllerDelegate,TVMLKit.TVApplicationController)",
			"TVMLKit.TVBrowserTransitionAnimator::AnimateTransition(UIKit.IUIViewControllerContextTransitioning)",
			"TVMLKit.TVBrowserTransitionAnimator::GetInterruptibleAnimator(UIKit.IUIViewControllerContextTransitioning)",
			"TVMLKit.TVBrowserTransitionAnimator::TransitionDuration(UIKit.IUIViewControllerContextTransitioning)",
			"TVMLKit.TVBrowserViewController::.ctor(Foundation.NSCoder)",
			"TVMLKit.TVBrowserViewController::.ctor(System.String,Foundation.NSBundle)",
			"TVMLKit.TVBrowserViewController::GetCorrespondingViewController(TVMLKit.TVViewElement)",
			"TVMLKit.TVBrowserViewController::set_CenteredViewElement(TVMLKit.TVViewElement)",
			"TVMLKit.TVBrowserViewControllerDataSourceWrapper::GetCorrespondingDocumentViewController(TVMLKit.TVBrowserViewController,TVMLKit.TVViewElement)",
			"TVMLKit.TVBrowserViewControllerDelegate_Extensions::DidCenterOnViewElement(TVMLKit.ITVBrowserViewControllerDelegate,TVMLKit.TVBrowserViewController,TVMLKit.TVViewElement)",
			"TVMLKit.TVBrowserViewControllerDelegate_Extensions::WillCenterOnViewElement(TVMLKit.ITVBrowserViewControllerDelegate,TVMLKit.TVBrowserViewController,TVMLKit.TVViewElement)",
			"TVMLKit.TVColor::Copy(Foundation.NSZone)",
			"TVMLKit.TVDocumentViewController::.ctor(Foundation.NSCoder)",
			"TVMLKit.TVDocumentViewController::CreateViewController(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,TVMLKit.TVApplicationController)",
			"TVMLKit.TVDocumentViewController::Update(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"TVMLKit.TVDocumentViewControllerDelegate_Extensions::DidFailUpdate(TVMLKit.ITVDocumentViewControllerDelegate,TVMLKit.TVDocumentViewController,Foundation.NSError)",
			"TVMLKit.TVDocumentViewControllerDelegate_Extensions::DidUpdate(TVMLKit.ITVDocumentViewControllerDelegate,TVMLKit.TVDocumentViewController)",
			"TVMLKit.TVDocumentViewControllerDelegate_Extensions::DidUpdate(TVMLKit.ITVDocumentViewControllerDelegate,TVMLKit.TVDocumentViewController,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"TVMLKit.TVDocumentViewControllerDelegate_Extensions::HandleEvent(TVMLKit.ITVDocumentViewControllerDelegate,TVMLKit.TVDocumentViewController,Foundation.NSString,TVMLKit.TVViewElement)",
			"TVMLKit.TVDocumentViewControllerDelegate_Extensions::WillUpdate(TVMLKit.ITVDocumentViewControllerDelegate,TVMLKit.TVDocumentViewController)",
			"TVMLKit.TVInterfaceCreating_Extensions::GetCollectionViewCellClass(TVMLKit.ITVInterfaceCreating,TVMLKit.TVViewElement)",
			"TVMLKit.TVInterfaceCreating_Extensions::GetImageForResource(TVMLKit.ITVInterfaceCreating,System.String)",
			"TVMLKit.TVInterfaceCreating_Extensions::GetPlayerViewController(TVMLKit.ITVInterfaceCreating,TVMLKit.TVPlayer)",
			"TVMLKit.TVInterfaceCreating_Extensions::GetUrlForResource(TVMLKit.ITVInterfaceCreating,System.String)",
			"TVMLKit.TVInterfaceCreating_Extensions::GetViewControllerForElement(TVMLKit.ITVInterfaceCreating,TVMLKit.TVViewElement,UIKit.UIViewController)",
			"TVMLKit.TVInterfaceCreating_Extensions::GetViewForElement(TVMLKit.ITVInterfaceCreating,TVMLKit.TVViewElement,UIKit.UIView)",
			"TVMLKit.TVInterfaceFactory::GetCollectionViewCellClass(TVMLKit.TVViewElement)",
			"TVMLKit.TVInterfaceFactory::GetPlayerViewController(TVMLKit.TVPlayer)",
			"TVMLKit.TVInterfaceFactory::GetViewControllerForElement(TVMLKit.TVViewElement,UIKit.UIViewController)",
			"TVMLKit.TVInterfaceFactory::GetViewForElement(TVMLKit.TVViewElement,UIKit.UIView)",
			"TVMLKit.TVInterfaceFactory::set_ExtendedInterfaceCreator(TVMLKit.ITVInterfaceCreating)",
			"TVMLKit.TVPlaybackCustomEventUserInfo::.ctor(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.Boolean)",
			"TVMLKit.TVPlaybackCustomEventUserInfo::ProcessReturn(JavaScriptCore.JSValue,JavaScriptCore.JSContext)",
			"TVMLKit.TVPlaybackEventMarshaling_Extensions::ProcessReturn(TVMLKit.ITVPlaybackEventMarshaling,JavaScriptCore.JSValue,JavaScriptCore.JSContext)",
			"TVMLKit.TVPlayer::.ctor(AVFoundation.AVPlayer)",
			"TVMLKit.TVPlayer::DispatchEvent(System.String,TVMLKit.ITVPlaybackEventMarshaling,System.Action`1<System.Boolean>)",
			"TVMLKit.TVTextElement::GetAttributedString(UIKit.UIFont)",
			"TVMLKit.TVTextElement::GetAttributedString(UIKit.UIFont,UIKit.UIColor,UIKit.UITextAlignment)",
			"TVMLKit.TVViewElement::Copy(Foundation.NSZone)",
			"TVMLKit.TVViewElement::DispatchEvent(System.String,System.Boolean,System.Boolean,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.Action`2<System.Boolean,System.Boolean>)",
			"TVMLKit.TVViewElement::DispatchEvent(TVMLKit.TVElementEventType,System.Boolean,System.Boolean,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.Action`2<System.Boolean,System.Boolean>)",
			"TVMLKit.TVViewElementStyle::Copy(Foundation.NSZone)",
			"TVServices.TVAppProfileDescriptor::.ctor(Foundation.NSCoder)",
			"TVServices.TVAppProfileDescriptor::Copy(Foundation.NSZone)",
			"TVServices.TVAppProfileDescriptor::EncodeTo(Foundation.NSCoder)",
			"TVServices.TVContentIdentifier::.ctor(Foundation.NSCoder)",
			"TVServices.TVContentIdentifier::.ctor(System.String,TVServices.TVContentIdentifier)",
			"TVServices.TVContentIdentifier::Copy(Foundation.NSZone)",
			"TVServices.TVContentIdentifier::EncodeTo(Foundation.NSCoder)",
			"TVServices.TVContentItem::.ctor(Foundation.NSCoder)",
			"TVServices.TVContentItem::.ctor(TVServices.TVContentIdentifier)",
			"TVServices.TVContentItem::Copy(Foundation.NSZone)",
			"TVServices.TVContentItem::EncodeTo(Foundation.NSCoder)",
			"TVServices.TVContentItem::set_BadgeCount(Foundation.NSNumber)",
			"TVServices.TVContentItem::set_CreationDate(Foundation.NSDate)",
			"TVServices.TVContentItem::set_CurrentPosition(Foundation.NSNumber)",
			"TVServices.TVContentItem::set_DisplayUrl(Foundation.NSUrl)",
			"TVServices.TVContentItem::set_Duration(Foundation.NSNumber)",
			"TVServices.TVContentItem::set_ExpirationDate(Foundation.NSDate)",
			"TVServices.TVContentItem::set_HasPlayedToEnd(Foundation.NSNumber)",
			"TVServices.TVContentItem::set_ImageUrl(Foundation.NSUrl)",
			"TVServices.TVContentItem::set_LastAccessedDate(Foundation.NSDate)",
			"TVServices.TVContentItem::set_PlayUrl(Foundation.NSUrl)",
			"TVServices.TVContentItem::SetImageUrl(Foundation.NSUrl,TVServices.TVContentItemImageTrait)",
			"TVServices.TVTopShelfAction::.ctor(Foundation.NSUrl)",
			"TVServices.TVTopShelfCarouselItem::set_CinemagraphUrl(Foundation.NSUrl)",
			"TVServices.TVTopShelfCarouselItem::set_CreationDate(Foundation.NSDate)",
			"TVServices.TVTopShelfCarouselItem::set_PreviewVideoUrl(Foundation.NSUrl)",
			"TVServices.TVTopShelfItem::set_DisplayAction(TVServices.TVTopShelfAction)",
			"TVServices.TVTopShelfItem::set_ExpirationDate(Foundation.NSDate)",
			"TVServices.TVTopShelfItem::set_PlayAction(TVServices.TVTopShelfAction)",
			"TVServices.TVTopShelfItem::SetImageUrl(Foundation.NSUrl,TVServices.TVTopShelfItemImageTraits)",
			"TVServices.TVUserManager::PresentProfilePreferencePanel(Foundation.NSDictionary`2<Foundation.NSString,TVServices.TVAppProfileDescriptor>,TVServices.TVAppProfileDescriptor[],System.Action`1<Foundation.NSDictionary`2<Foundation.NSString,TVServices.TVAppProfileDescriptor>>)",
			"TVServices.TVUserManager::ShouldStorePreferenceForCurrentUser(TVServices.TVAppProfileDescriptor,System.Action`1<System.Boolean>)",
			"TVUIKit.TVCaptionButtonView::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVCaptionButtonView::set_ContentImage(UIKit.UIImage)",
			"TVUIKit.TVCardView::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVCardView::set_CardBackgroundColor(UIKit.UIColor)",
			"TVUIKit.TVCollectionViewDelegateFullScreenLayout_Extensions::DidCenterCell(TVUIKit.ITVCollectionViewDelegateFullScreenLayout,UIKit.UICollectionView,UIKit.UICollectionViewLayout,Foundation.NSIndexPath)",
			"TVUIKit.TVCollectionViewDelegateFullScreenLayout_Extensions::WillCenterCell(TVUIKit.ITVCollectionViewDelegateFullScreenLayout,UIKit.UICollectionView,UIKit.UICollectionViewLayout,Foundation.NSIndexPath)",
			"TVUIKit.TVCollectionViewFullScreenCell::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVCollectionViewFullScreenLayout::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVCollectionViewFullScreenLayoutAttributes::CreateForCell(Foundation.NSIndexPath)",
			"TVUIKit.TVCollectionViewFullScreenLayoutAttributes::CreateForDecorationView(Foundation.NSString,Foundation.NSIndexPath)",
			"TVUIKit.TVCollectionViewFullScreenLayoutAttributes::CreateForSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)",
			"TVUIKit.TVDigitEntryViewController::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVLockupHeaderFooterView::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVLockupView::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVLockupView::set_FooterView(TVUIKit.TVLockupHeaderFooterView)",
			"TVUIKit.TVLockupView::set_HeaderView(TVUIKit.TVLockupHeaderFooterView)",
			"TVUIKit.TVLockupViewComponent_Extensions::UpdateAppearanceForLockupView(TVUIKit.ITVLockupViewComponent,UIKit.UIControlState)",
			"TVUIKit.TVMediaItemContentBadgeProperties::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVMediaItemContentBadgeProperties::Copy(Foundation.NSZone)",
			"TVUIKit.TVMediaItemContentBadgeProperties::EncodeTo(Foundation.NSCoder)",
			"TVUIKit.TVMediaItemContentBadgeProperties::set_BackgroundColor(UIKit.UIColor)",
			"TVUIKit.TVMediaItemContentBadgeProperties::set_Color(UIKit.UIColor)",
			"TVUIKit.TVMediaItemContentBadgeProperties::set_Font(UIKit.UIFont)",
			"TVUIKit.TVMediaItemContentConfiguration::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVMediaItemContentConfiguration::Copy(Foundation.NSZone)",
			"TVUIKit.TVMediaItemContentConfiguration::EncodeTo(Foundation.NSCoder)",
			"TVUIKit.TVMediaItemContentConfiguration::GetUpdatedConfiguration(UIKit.IUIConfigurationState)",
			"TVUIKit.TVMediaItemContentConfiguration::set_BadgeProperties(TVUIKit.TVMediaItemContentBadgeProperties)",
			"TVUIKit.TVMediaItemContentConfiguration::set_Image(UIKit.UIImage)",
			"TVUIKit.TVMediaItemContentConfiguration::set_OverlayView(UIKit.UIView)",
			"TVUIKit.TVMediaItemContentTextProperties::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVMediaItemContentTextProperties::Copy(Foundation.NSZone)",
			"TVUIKit.TVMediaItemContentTextProperties::EncodeTo(Foundation.NSCoder)",
			"TVUIKit.TVMediaItemContentTextProperties::set_Color(UIKit.UIColor)",
			"TVUIKit.TVMediaItemContentTextProperties::set_Font(UIKit.UIFont)",
			"TVUIKit.TVMediaItemContentView::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVMediaItemContentView::.ctor(TVUIKit.TVMediaItemContentConfiguration)",
			"TVUIKit.TVMediaItemContentView::set_Configuration(UIKit.IUIContentConfiguration)",
			"TVUIKit.TVMonogramContentConfiguration::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVMonogramContentConfiguration::Copy(Foundation.NSZone)",
			"TVUIKit.TVMonogramContentConfiguration::EncodeTo(Foundation.NSCoder)",
			"TVUIKit.TVMonogramContentConfiguration::GetUpdatedConfiguration(UIKit.IUIConfigurationState)",
			"TVUIKit.TVMonogramContentConfiguration::set_Image(UIKit.UIImage)",
			"TVUIKit.TVMonogramContentConfiguration::set_PersonNameComponents(Foundation.NSPersonNameComponents)",
			"TVUIKit.TVMonogramContentTextProperties::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVMonogramContentTextProperties::Copy(Foundation.NSZone)",
			"TVUIKit.TVMonogramContentTextProperties::EncodeTo(Foundation.NSCoder)",
			"TVUIKit.TVMonogramContentTextProperties::set_Color(UIKit.UIColor)",
			"TVUIKit.TVMonogramContentTextProperties::set_Font(UIKit.UIFont)",
			"TVUIKit.TVMonogramContentView::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVMonogramContentView::.ctor(TVUIKit.TVMonogramContentConfiguration)",
			"TVUIKit.TVMonogramContentView::set_Configuration(UIKit.IUIContentConfiguration)",
			"TVUIKit.TVMonogramView::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVMonogramView::set_Image(UIKit.UIImage)",
			"TVUIKit.TVMonogramView::set_PersonNameComponents(Foundation.NSPersonNameComponents)",
			"TVUIKit.TVPosterView::.ctor(Foundation.NSCoder)",
			"TVUIKit.TVPosterView::.ctor(UIKit.UIImage)",
			"TVUIKit.TVPosterView::set_Image(UIKit.UIImage)",
			"Twitter.TWRequest::.ctor(Foundation.NSUrl,Foundation.NSDictionary,Twitter.TWRequestMethod)",
			"Twitter.TWRequest::AddMultiPartData(Foundation.NSData,System.String,System.String)",
			"Twitter.TWRequest::set_Account(Accounts.ACAccount)",
			"Twitter.TWTweetComposeViewController::.ctor(Foundation.NSCoder)",
			"Twitter.TWTweetComposeViewController::.ctor(System.String,Foundation.NSBundle)",
			"Twitter.TWTweetComposeViewController::AddImage(UIKit.UIImage)",
			"Twitter.TWTweetComposeViewController::AddUrl(Foundation.NSUrl)",
			"UIKit.NIDUIConfigurationColorTransformerHandler::Invoke(UIKit.UIColor)",
			"UIKit.NSAttributedString_NSAttributedStringKitAdditions::ContainsAttachments(Foundation.NSAttributedString,Foundation.NSRange)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::DecodeCGAffineTransform(Foundation.NSCoder,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::DecodeCGPoint(Foundation.NSCoder,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::DecodeCGRect(Foundation.NSCoder,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::DecodeCGSize(Foundation.NSCoder,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::DecodeCGVector(Foundation.NSCoder,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::DecodeDirectionalEdgeInsets(Foundation.NSCoder,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::DecodeUIEdgeInsets(Foundation.NSCoder,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::DecodeUIOffsetForKey(Foundation.NSCoder,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::Encode(Foundation.NSCoder,CoreGraphics.CGAffineTransform,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::Encode(Foundation.NSCoder,CoreGraphics.CGPoint,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::Encode(Foundation.NSCoder,CoreGraphics.CGRect,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::Encode(Foundation.NSCoder,CoreGraphics.CGSize,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::Encode(Foundation.NSCoder,CoreGraphics.CGVector,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::Encode(Foundation.NSCoder,UIKit.NSDirectionalEdgeInsets,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::Encode(Foundation.NSCoder,UIKit.UIEdgeInsets,System.String)",
			"UIKit.NSCoder_UIGeometryKeyedCoding::Encode(Foundation.NSCoder,UIKit.UIOffset,System.String)",
			"UIKit.NSCollectionLayoutAnchor::Copy(Foundation.NSZone)",
			"UIKit.NSCollectionLayoutBoundarySupplementaryItem::Copy(Foundation.NSZone)",
			"UIKit.NSCollectionLayoutBoundarySupplementaryItem::Create(UIKit.NSCollectionLayoutSize,System.String,UIKit.NSRectAlignment)",
			"UIKit.NSCollectionLayoutBoundarySupplementaryItem::Create(UIKit.NSCollectionLayoutSize,System.String,UIKit.NSRectAlignment,CoreGraphics.CGPoint)",
			"UIKit.NSCollectionLayoutDecorationItem::Copy(Foundation.NSZone)",
			"UIKit.NSCollectionLayoutDimension::Copy(Foundation.NSZone)",
			"UIKit.NSCollectionLayoutEdgeSpacing::Copy(Foundation.NSZone)",
			"UIKit.NSCollectionLayoutEdgeSpacing::Create(UIKit.NSCollectionLayoutSpacing,UIKit.NSCollectionLayoutSpacing,UIKit.NSCollectionLayoutSpacing,UIKit.NSCollectionLayoutSpacing)",
			"UIKit.NSCollectionLayoutGroup::Copy(Foundation.NSZone)",
			"UIKit.NSCollectionLayoutGroup::CreateCustom(UIKit.NSCollectionLayoutSize,UIKit.NSCollectionLayoutGroupCustomItemProvider)",
			"UIKit.NSCollectionLayoutGroup::CreateHorizontal(UIKit.NSCollectionLayoutSize,UIKit.NSCollectionLayoutItem,System.IntPtr)",
			"UIKit.NSCollectionLayoutGroup::CreateHorizontal(UIKit.NSCollectionLayoutSize,UIKit.NSCollectionLayoutItem[])",
			"UIKit.NSCollectionLayoutGroup::CreateVertical(UIKit.NSCollectionLayoutSize,UIKit.NSCollectionLayoutItem,System.IntPtr)",
			"UIKit.NSCollectionLayoutGroup::CreateVertical(UIKit.NSCollectionLayoutSize,UIKit.NSCollectionLayoutItem[])",
			"UIKit.NSCollectionLayoutGroup::set_InterItemSpacing(UIKit.NSCollectionLayoutSpacing)",
			"UIKit.NSCollectionLayoutGroupCustomItem::Copy(Foundation.NSZone)",
			"UIKit.NSCollectionLayoutItem::Copy(Foundation.NSZone)",
			"UIKit.NSCollectionLayoutItem::Create(UIKit.NSCollectionLayoutSize)",
			"UIKit.NSCollectionLayoutItem::Create(UIKit.NSCollectionLayoutSize,UIKit.NSCollectionLayoutSupplementaryItem[])",
			"UIKit.NSCollectionLayoutItem::set_EdgeSpacing(UIKit.NSCollectionLayoutEdgeSpacing)",
			"UIKit.NSCollectionLayoutSection::Copy(Foundation.NSZone)",
			"UIKit.NSCollectionLayoutSection::Create(UIKit.NSCollectionLayoutGroup)",
			"UIKit.NSCollectionLayoutSection::GetSection(UIKit.UICollectionLayoutListConfiguration,UIKit.INSCollectionLayoutEnvironment)",
			"UIKit.NSCollectionLayoutSize::Copy(Foundation.NSZone)",
			"UIKit.NSCollectionLayoutSize::Create(UIKit.NSCollectionLayoutDimension,UIKit.NSCollectionLayoutDimension)",
			"UIKit.NSCollectionLayoutSpacing::Copy(Foundation.NSZone)",
			"UIKit.NSCollectionLayoutSupplementaryItem::Copy(Foundation.NSZone)",
			"UIKit.NSCollectionLayoutSupplementaryItem::Create(UIKit.NSCollectionLayoutSize,System.String,UIKit.NSCollectionLayoutAnchor)",
			"UIKit.NSCollectionLayoutSupplementaryItem::Create(UIKit.NSCollectionLayoutSize,System.String,UIKit.NSCollectionLayoutAnchor,UIKit.NSCollectionLayoutAnchor)",
			"UIKit.NSDataAsset::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.NSDataAsset::Copy(Foundation.NSZone)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::AppendItems(ItemIdentifierType[],ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::ContainsItem(ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::Copy(Foundation.NSZone)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::GetIndex(ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::GetLevel(ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::GetParent(ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::GetSnapshot(ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::GetSnapshot(ItemIdentifierType,System.Boolean)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::InsertItemsAfter(ItemIdentifierType[],ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::InsertItemsBefore(ItemIdentifierType[],ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::InsertSnapshotAfterItem(UIKit.NSDiffableDataSourceSectionSnapshot`1<ItemIdentifierType>,ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::InsertSnapshotBeforeItem(UIKit.NSDiffableDataSourceSectionSnapshot`1<ItemIdentifierType>,ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::IsExpanded(ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::IsVisible(ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSectionSnapshot`1::ReplaceChildren(ItemIdentifierType,UIKit.NSDiffableDataSourceSectionSnapshot`1<ItemIdentifierType>)",
			"UIKit.NSDiffableDataSourceSnapshot`2::AppendItems(ItemIdentifierType[],SectionIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::Copy(Foundation.NSZone)",
			"UIKit.NSDiffableDataSourceSnapshot`2::GetIndex(ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::GetIndex(SectionIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::GetItemIdentifiersInSection(SectionIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::GetNumberOfItems(SectionIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::GetSectionIdentifierForSection(ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::InsertItemsAfter(ItemIdentifierType[],ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::InsertItemsBefore(ItemIdentifierType[],ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::InsertSectionsAfter(SectionIdentifierType[],SectionIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::InsertSectionsBefore(SectionIdentifierType[],SectionIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::MoveItemAfter(ItemIdentifierType,ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::MoveItemBefore(ItemIdentifierType,ItemIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::MoveSectionAfter(SectionIdentifierType,SectionIdentifierType)",
			"UIKit.NSDiffableDataSourceSnapshot`2::MoveSectionBefore(SectionIdentifierType,SectionIdentifierType)",
			"UIKit.NSExtendedStringDrawing::WeakDrawString(Foundation.NSString,CoreGraphics.CGRect,Foundation.NSStringDrawingOptions,Foundation.NSDictionary,Foundation.NSStringDrawingContext)",
			"UIKit.NSExtendedStringDrawing::WeakGetBoundingRect(Foundation.NSString,CoreGraphics.CGSize,Foundation.NSStringDrawingOptions,Foundation.NSDictionary,Foundation.NSStringDrawingContext)",
			"UIKit.NSIdentifier::GetIdentifier(UIKit.NSLayoutConstraint)",
			"UIKit.NSIdentifier::SetIdentifier(UIKit.NSLayoutConstraint,System.String)",
			"UIKit.NSLayoutAnchor`1::.ctor(Foundation.NSCoder)",
			"UIKit.NSLayoutAnchor`1::ConstraintEqualTo(UIKit.NSLayoutAnchor`1<AnchorType>)",
			"UIKit.NSLayoutAnchor`1::ConstraintEqualTo(UIKit.NSLayoutAnchor`1<AnchorType>,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutAnchor`1::ConstraintGreaterThanOrEqualTo(UIKit.NSLayoutAnchor`1<AnchorType>)",
			"UIKit.NSLayoutAnchor`1::ConstraintGreaterThanOrEqualTo(UIKit.NSLayoutAnchor`1<AnchorType>,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutAnchor`1::ConstraintLessThanOrEqualTo(UIKit.NSLayoutAnchor`1<AnchorType>)",
			"UIKit.NSLayoutAnchor`1::ConstraintLessThanOrEqualTo(UIKit.NSLayoutAnchor`1<AnchorType>,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutAnchor`1::Copy(Foundation.NSZone)",
			"UIKit.NSLayoutAnchor`1::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSLayoutConstraint::Create(ObjCRuntime.INativeObject,UIKit.NSLayoutAttribute,UIKit.NSLayoutRelation,ObjCRuntime.INativeObject,UIKit.NSLayoutAttribute,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutConstraint::FromVisualFormat(System.String,UIKit.NSLayoutFormatOptions,Foundation.NSDictionary,Foundation.NSDictionary)",
			"UIKit.NSLayoutDimension::.ctor(Foundation.NSCoder)",
			"UIKit.NSLayoutDimension::ConstraintEqualTo(UIKit.NSLayoutDimension,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutDimension::ConstraintEqualTo(UIKit.NSLayoutDimension,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutDimension::ConstraintGreaterThanOrEqualTo(UIKit.NSLayoutDimension,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutDimension::ConstraintGreaterThanOrEqualTo(UIKit.NSLayoutDimension,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutDimension::ConstraintLessThanOrEqualTo(UIKit.NSLayoutDimension,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutDimension::ConstraintLessThanOrEqualTo(UIKit.NSLayoutDimension,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutManager::.ctor(Foundation.NSCoder)",
			"UIKit.NSLayoutManager::AddTextContainer(UIKit.NSTextContainer)",
			"UIKit.NSLayoutManager::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSLayoutManager::EnsureLayoutForBoundingRect(CoreGraphics.CGRect,UIKit.NSTextContainer)",
			"UIKit.NSLayoutManager::EnsureLayoutForTextContainer(UIKit.NSTextContainer)",
			"UIKit.NSLayoutManager::EnumerateEnclosingRects(Foundation.NSRange,Foundation.NSRange,UIKit.NSTextContainer,UIKit.NSTextLayoutEnumerateEnclosingRects)",
			"UIKit.NSLayoutManager::FillBackground(System.IntPtr,System.UIntPtr,Foundation.NSRange,UIKit.UIColor)",
			"UIKit.NSLayoutManager::GetBoundingRect(Foundation.NSRange,UIKit.NSTextContainer)",
			"UIKit.NSLayoutManager::GetCharacterIndex(CoreGraphics.CGPoint,UIKit.NSTextContainer,System.IntPtr)",
			"UIKit.NSLayoutManager::GetCharacterIndex(CoreGraphics.CGPoint,UIKit.NSTextContainer,System.Runtime.InteropServices.NFloat&)",
			"UIKit.NSLayoutManager::GetFractionOfDistanceThroughGlyph(CoreGraphics.CGPoint,UIKit.NSTextContainer)",
			"UIKit.NSLayoutManager::GetGlyphIndex(CoreGraphics.CGPoint,UIKit.NSTextContainer)",
			"UIKit.NSLayoutManager::GetGlyphIndex(CoreGraphics.CGPoint,UIKit.NSTextContainer,System.Runtime.InteropServices.NFloat&)",
			"UIKit.NSLayoutManager::GetGlyphRange(UIKit.NSTextContainer)",
			"UIKit.NSLayoutManager::GetGlyphRangeForBoundingRect(CoreGraphics.CGRect,UIKit.NSTextContainer)",
			"UIKit.NSLayoutManager::GetGlyphRangeForBoundingRectWithoutAdditionalLayout(CoreGraphics.CGRect,UIKit.NSTextContainer)",
			"UIKit.NSLayoutManager::GetUsedRect(UIKit.NSTextContainer)",
			"UIKit.NSLayoutManager::InsertTextContainer(UIKit.NSTextContainer,System.IntPtr)",
			"UIKit.NSLayoutManager::ProcessEditing(UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.IntPtr,Foundation.NSRange)",
			"UIKit.NSLayoutManager::SetExtraLineFragment(CoreGraphics.CGRect,CoreGraphics.CGRect,UIKit.NSTextContainer)",
			"UIKit.NSLayoutManager::SetGlyphs(System.IntPtr,System.IntPtr,System.IntPtr,UIKit.UIFont,Foundation.NSRange)",
			"UIKit.NSLayoutManager::SetTextContainer(UIKit.NSTextContainer,Foundation.NSRange)",
			"UIKit.NSLayoutManager::ShowGlyphs(System.IntPtr,System.IntPtr,System.IntPtr,UIKit.UIFont,CoreGraphics.CGAffineTransform,Foundation.NSDictionary,CoreGraphics.CGContext)",
			"UIKit.NSLayoutManager::ShowGlyphs(System.IntPtr,System.IntPtr,System.UIntPtr,UIKit.UIFont,CoreGraphics.CGAffineTransform,Foundation.NSDictionary,CoreGraphics.CGContext)",
			"UIKit.NSLayoutManager::TextContainerChangedGeometry(UIKit.NSTextContainer)",
			"UIKit.NSLayoutManagerDelegate_Extensions::DidChangeGeometry(UIKit.INSLayoutManagerDelegate,UIKit.NSLayoutManager,UIKit.NSTextContainer,CoreGraphics.CGSize)",
			"UIKit.NSLayoutManagerDelegate_Extensions::DidCompleteLayout(UIKit.INSLayoutManagerDelegate,UIKit.NSLayoutManager,UIKit.NSTextContainer,System.Boolean)",
			"UIKit.NSLayoutManagerDelegate_Extensions::DidInvalidatedLayout(UIKit.INSLayoutManagerDelegate,UIKit.NSLayoutManager)",
			"UIKit.NSLayoutManagerDelegate_Extensions::GetBoundingBox(UIKit.INSLayoutManagerDelegate,UIKit.NSLayoutManager,System.UIntPtr,UIKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint,System.UIntPtr)",
			"UIKit.NSLayoutManagerDelegate_Extensions::GetLineSpacingAfterGlyph(UIKit.INSLayoutManagerDelegate,UIKit.NSLayoutManager,System.UIntPtr,CoreGraphics.CGRect)",
			"UIKit.NSLayoutManagerDelegate_Extensions::GetParagraphSpacingAfterGlyph(UIKit.INSLayoutManagerDelegate,UIKit.NSLayoutManager,System.UIntPtr,CoreGraphics.CGRect)",
			"UIKit.NSLayoutManagerDelegate_Extensions::GetParagraphSpacingBeforeGlyph(UIKit.INSLayoutManagerDelegate,UIKit.NSLayoutManager,System.UIntPtr,CoreGraphics.CGRect)",
			"UIKit.NSLayoutManagerDelegate_Extensions::ShouldBreakLineByHyphenatingBeforeCharacter(UIKit.INSLayoutManagerDelegate,UIKit.NSLayoutManager,System.UIntPtr)",
			"UIKit.NSLayoutManagerDelegate_Extensions::ShouldBreakLineByWordBeforeCharacter(UIKit.INSLayoutManagerDelegate,UIKit.NSLayoutManager,System.UIntPtr)",
			"UIKit.NSLayoutManagerDelegate_Extensions::ShouldGenerateGlyphs(UIKit.INSLayoutManagerDelegate,UIKit.NSLayoutManager,System.IntPtr,System.IntPtr,System.IntPtr,UIKit.UIFont,Foundation.NSRange)",
			"UIKit.NSLayoutManagerDelegate_Extensions::ShouldSetLineFragmentRect(UIKit.INSLayoutManagerDelegate,UIKit.NSLayoutManager,CoreGraphics.CGRect&,CoreGraphics.CGRect&,System.Runtime.InteropServices.NFloat&,UIKit.NSTextContainer,Foundation.NSRange)",
			"UIKit.NSLayoutManagerDelegate_Extensions::ShouldUseAction(UIKit.INSLayoutManagerDelegate,UIKit.NSLayoutManager,UIKit.NSControlCharacterAction,System.UIntPtr)",
			"UIKit.NSLayoutXAxisAnchor::.ctor(Foundation.NSCoder)",
			"UIKit.NSLayoutXAxisAnchor::ConstraintEqualToSystemSpacingAfterAnchor(UIKit.NSLayoutXAxisAnchor,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutXAxisAnchor::ConstraintGreaterThanOrEqualToSystemSpacingAfterAnchor(UIKit.NSLayoutXAxisAnchor,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutXAxisAnchor::ConstraintLessThanOrEqualToSystemSpacingAfterAnchor(UIKit.NSLayoutXAxisAnchor,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutXAxisAnchor::CreateAnchorWithOffset(UIKit.NSLayoutXAxisAnchor)",
			"UIKit.NSLayoutYAxisAnchor::.ctor(Foundation.NSCoder)",
			"UIKit.NSLayoutYAxisAnchor::ConstraintEqualToSystemSpacingBelowAnchor(UIKit.NSLayoutYAxisAnchor,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutYAxisAnchor::ConstraintGreaterThanOrEqualToSystemSpacingBelowAnchor(UIKit.NSLayoutYAxisAnchor,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutYAxisAnchor::ConstraintLessThanOrEqualToSystemSpacingBelowAnchor(UIKit.NSLayoutYAxisAnchor,System.Runtime.InteropServices.NFloat)",
			"UIKit.NSLayoutYAxisAnchor::CreateAnchorWithOffset(UIKit.NSLayoutYAxisAnchor)",
			"UIKit.NSMutableAttributedStringKitAdditions::FixAttributesInRange(Foundation.NSMutableAttributedString,Foundation.NSRange)",
			"UIKit.NSMutableParagraphStyle::.ctor(Foundation.NSCoder)",
			"UIKit.NSMutableParagraphStyle::AddTabStop(UIKit.NSTextTab)",
			"UIKit.NSMutableParagraphStyle::RemoveTabStop(UIKit.NSTextTab)",
			"UIKit.NSMutableParagraphStyle::SetParagraphStyle(UIKit.NSParagraphStyle)",
			"UIKit.NSObject_UIAccessibilityCustomRotor::GetAccessibilityCustomRotors(Foundation.NSObject)",
			"UIKit.NSObject_UIAccessibilityCustomRotor::SetAccessibilityCustomRotors(Foundation.NSObject,UIKit.UIAccessibilityCustomRotor[])",
			"UIKit.NSParagraphStyle::.ctor(Foundation.NSCoder)",
			"UIKit.NSParagraphStyle::Copy(Foundation.NSZone)",
			"UIKit.NSParagraphStyle::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSParagraphStyle::MutableCopy(Foundation.NSZone)",
			"UIKit.NSShadow::.ctor(Foundation.NSCoder)",
			"UIKit.NSShadow::Copy(Foundation.NSZone)",
			"UIKit.NSShadow::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSShadow::set_ShadowColor(UIKit.UIColor)",
			"UIKit.NSStringDrawing::WeakDrawString(Foundation.NSString,CoreGraphics.CGPoint,Foundation.NSDictionary)",
			"UIKit.NSStringDrawing::WeakDrawString(Foundation.NSString,CoreGraphics.CGRect,Foundation.NSDictionary)",
			"UIKit.NSStringDrawing::WeakGetSizeUsingAttributes(Foundation.NSString,Foundation.NSDictionary)",
			"UIKit.NSTextAttachment::.ctor(Foundation.NSCoder)",
			"UIKit.NSTextAttachment::.ctor(Foundation.NSData,System.String)",
			"UIKit.NSTextAttachment::Create(UIKit.UIImage)",
			"UIKit.NSTextAttachment::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSTextAttachment::GetAttachmentBounds(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,UIKit.INSTextLocation,UIKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint)",
			"UIKit.NSTextAttachment::GetAttachmentBounds(UIKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint,System.UIntPtr)",
			"UIKit.NSTextAttachment::GetImageForBounds(CoreGraphics.CGRect,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,UIKit.INSTextLocation,UIKit.NSTextContainer)",
			"UIKit.NSTextAttachment::GetImageForBounds(CoreGraphics.CGRect,UIKit.NSTextContainer,System.UIntPtr)",
			"UIKit.NSTextAttachment::GetViewProvider(UIKit.UIView,UIKit.INSTextLocation,UIKit.NSTextContainer)",
			"UIKit.NSTextAttachment::set_Contents(Foundation.NSData)",
			"UIKit.NSTextAttachment::set_FileWrapper(Foundation.NSFileWrapper)",
			"UIKit.NSTextAttachment::set_Image(UIKit.UIImage)",
			"UIKit.NSTextAttachmentContainerWrapper::GetAttachmentBounds(UIKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint,System.UIntPtr)",
			"UIKit.NSTextAttachmentContainerWrapper::GetImageForBounds(CoreGraphics.CGRect,UIKit.NSTextContainer,System.UIntPtr)",
			"UIKit.NSTextAttachmentLayoutWrapper::GetAttachmentBounds(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,UIKit.INSTextLocation,UIKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint)",
			"UIKit.NSTextAttachmentLayoutWrapper::GetImageForBounds(CoreGraphics.CGRect,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,UIKit.INSTextLocation,UIKit.NSTextContainer)",
			"UIKit.NSTextAttachmentLayoutWrapper::GetViewProvider(UIKit.UIView,UIKit.INSTextLocation,UIKit.NSTextContainer)",
			"UIKit.NSTextAttachmentViewProvider::.ctor(UIKit.NSTextAttachment,UIKit.UIView,UIKit.NSTextLayoutManager,UIKit.INSTextLocation)",
			"UIKit.NSTextAttachmentViewProvider::GetAttachmentBounds(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,UIKit.INSTextLocation,UIKit.NSTextContainer,CoreGraphics.CGRect,CoreGraphics.CGPoint)",
			"UIKit.NSTextAttachmentViewProvider::set_View(UIKit.UIView)",
			"UIKit.NSTextContainer::.ctor(Foundation.NSCoder)",
			"UIKit.NSTextContainer::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSTextContainer::ReplaceLayoutManager(UIKit.NSLayoutManager)",
			"UIKit.NSTextContentManager::.ctor(Foundation.NSCoder)",
			"UIKit.NSTextContentManager::Add(UIKit.NSTextLayoutManager)",
			"UIKit.NSTextContentManager::AdjustedRange(UIKit.NSTextRange,System.Boolean)",
			"UIKit.NSTextContentManager::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSTextContentManager::EnumerateTextElements(UIKit.INSTextLocation,UIKit.NSTextContentManagerEnumerationOptions,System.Func`2<UIKit.NSTextElement,System.Boolean>)",
			"UIKit.NSTextContentManager::GetLocation(UIKit.INSTextLocation,System.IntPtr)",
			"UIKit.NSTextContentManager::GetOffset(UIKit.INSTextLocation,UIKit.INSTextLocation)",
			"UIKit.NSTextContentManager::GetTextElements(UIKit.NSTextRange)",
			"UIKit.NSTextContentManager::RecordEditAction(UIKit.NSTextRange,UIKit.NSTextRange)",
			"UIKit.NSTextContentManager::Remove(UIKit.NSTextLayoutManager)",
			"UIKit.NSTextContentManager::ReplaceContents(UIKit.NSTextRange,UIKit.NSTextElement[])",
			"UIKit.NSTextContentManager::set_PrimaryTextLayoutManager(UIKit.NSTextLayoutManager)",
			"UIKit.NSTextContentManagerDelegate_Extensions::GetTextContentManager(UIKit.INSTextContentManagerDelegate,UIKit.NSTextContentManager,UIKit.INSTextLocation)",
			"UIKit.NSTextContentManagerDelegate_Extensions::ShouldEnumerateTextElement(UIKit.INSTextContentManagerDelegate,UIKit.NSTextContentManager,UIKit.NSTextElement,UIKit.NSTextContentManagerEnumerationOptions)",
			"UIKit.NSTextContentStorage::.ctor(Foundation.NSCoder)",
			"UIKit.NSTextContentStorage::GetAdjustedRange(UIKit.NSTextRange,System.Boolean)",
			"UIKit.NSTextContentStorage::GetAttributedString(UIKit.NSTextElement)",
			"UIKit.NSTextContentStorage::GetLocation(UIKit.INSTextLocation,System.IntPtr)",
			"UIKit.NSTextContentStorage::GetOffset(UIKit.INSTextLocation,UIKit.INSTextLocation)",
			"UIKit.NSTextContentStorage::GetTextElement(Foundation.NSAttributedString)",
			"UIKit.NSTextContentStorage::PerformEditingTransaction(UIKit.NSTextStorage,System.Action)",
			"UIKit.NSTextContentStorage::ProcessEditing(UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.IntPtr,Foundation.NSRange)",
			"UIKit.NSTextContentStorage::set_AttributedString(Foundation.NSAttributedString)",
			"UIKit.NSTextContentStorage::set_TextStorage(UIKit.NSTextStorage)",
			"UIKit.NSTextContentStorageDelegate_Extensions::GetTextParagraph(UIKit.INSTextContentStorageDelegate,UIKit.NSTextContentStorage,Foundation.NSRange)",
			"UIKit.NSTextElement::.ctor(UIKit.NSTextContentManager)",
			"UIKit.NSTextElement::set_ElementRange(UIKit.NSTextRange)",
			"UIKit.NSTextElementProvider_Extensions::AdjustedRange(UIKit.INSTextElementProvider,UIKit.NSTextRange,System.Boolean)",
			"UIKit.NSTextElementProvider_Extensions::GetLocation(UIKit.INSTextElementProvider,UIKit.INSTextLocation,System.IntPtr)",
			"UIKit.NSTextElementProvider_Extensions::GetOffset(UIKit.INSTextElementProvider,UIKit.INSTextLocation,UIKit.INSTextLocation)",
			"UIKit.NSTextElementProviderWrapper::EnumerateTextElements(UIKit.INSTextLocation,UIKit.NSTextContentManagerEnumerationOptions,System.Func`2<UIKit.NSTextElement,System.Boolean>)",
			"UIKit.NSTextElementProviderWrapper::ReplaceContents(UIKit.NSTextRange,UIKit.NSTextElement[])",
			"UIKit.NSTextLayoutFragment::.ctor(Foundation.NSCoder)",
			"UIKit.NSTextLayoutFragment::.ctor(UIKit.NSTextElement,UIKit.NSTextRange)",
			"UIKit.NSTextLayoutFragment::Draw(CoreGraphics.CGPoint,CoreGraphics.CGContext)",
			"UIKit.NSTextLayoutFragment::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSTextLayoutFragment::GetFrameForTextAttachment(UIKit.INSTextLocation)",
			"UIKit.NSTextLayoutFragment::set_LayoutQueue(Foundation.NSOperationQueue)",
			"UIKit.NSTextLayoutManager::.ctor(Foundation.NSCoder)",
			"UIKit.NSTextLayoutManager::AddRenderingAttribute(System.String,Foundation.NSObject,UIKit.NSTextRange)",
			"UIKit.NSTextLayoutManager::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSTextLayoutManager::EnsureLayout(UIKit.NSTextRange)",
			"UIKit.NSTextLayoutManager::EnumerateCaretOffsets(UIKit.INSTextLocation,UIKit.NSTextSelectionDataSourceEnumerateCaretOffsetsDelegate)",
			"UIKit.NSTextLayoutManager::EnumerateContainerBoundaries(UIKit.INSTextLocation,System.Boolean,UIKit.NSTextSelectionDataSourceEnumerateContainerBoundariesDelegate)",
			"UIKit.NSTextLayoutManager::EnumerateRenderingAttributes(UIKit.INSTextLocation,System.Boolean,UIKit.NSTextLayoutManagerEnumerateRenderingAttributesDelegate)",
			"UIKit.NSTextLayoutManager::EnumerateSubstrings(UIKit.INSTextLocation,Foundation.NSStringEnumerationOptions,UIKit.NSTextSelectionDataSourceEnumerateSubstringsDelegate)",
			"UIKit.NSTextLayoutManager::EnumerateTextLayoutFragments(UIKit.INSTextLocation,UIKit.NSTextLayoutFragmentEnumerationOptions,System.Func`2<UIKit.NSTextLayoutFragment,System.Boolean>)",
			"UIKit.NSTextLayoutManager::EnumerateTextSegments(UIKit.NSTextRange,UIKit.NSTextLayoutManagerSegmentType,UIKit.NSTextLayoutManagerSegmentOptions,UIKit.NSTextLayoutManagerEnumerateTextSegmentsDelegate)",
			"UIKit.NSTextLayoutManager::GetBaseWritingDirection(UIKit.INSTextLocation)",
			"UIKit.NSTextLayoutManager::GetLineFragmentRange(CoreGraphics.CGPoint,UIKit.INSTextLocation)",
			"UIKit.NSTextLayoutManager::GetLocation(UIKit.INSTextLocation,System.IntPtr)",
			"UIKit.NSTextLayoutManager::GetOffsetFromLocation(UIKit.INSTextLocation,UIKit.INSTextLocation)",
			"UIKit.NSTextLayoutManager::GetRenderingAttributes(Foundation.NSObject,UIKit.INSTextLocation)",
			"UIKit.NSTextLayoutManager::GetTextLayoutFragment(UIKit.INSTextLocation)",
			"UIKit.NSTextLayoutManager::GetTextLayoutOrientation(UIKit.INSTextLocation)",
			"UIKit.NSTextLayoutManager::GetTextRange(UIKit.NSTextSelectionGranularity,UIKit.INSTextLocation)",
			"UIKit.NSTextLayoutManager::InvalidateLayout(UIKit.NSTextRange)",
			"UIKit.NSTextLayoutManager::InvalidateRenderingAttributes(UIKit.NSTextRange)",
			"UIKit.NSTextLayoutManager::RemoveRenderingAttribute(System.String,UIKit.NSTextRange)",
			"UIKit.NSTextLayoutManager::Replace(UIKit.NSTextContentManager)",
			"UIKit.NSTextLayoutManager::ReplaceContents(UIKit.NSTextRange,Foundation.NSAttributedString)",
			"UIKit.NSTextLayoutManager::ReplaceContents(UIKit.NSTextRange,UIKit.NSTextElement[])",
			"UIKit.NSTextLayoutManager::set_LayoutQueue(Foundation.NSOperationQueue)",
			"UIKit.NSTextLayoutManager::set_TextContainer(UIKit.NSTextContainer)",
			"UIKit.NSTextLayoutManager::set_TextSelectionNavigation(UIKit.NSTextSelectionNavigation)",
			"UIKit.NSTextLayoutManager::SetRenderingAttributes(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,UIKit.NSTextRange)",
			"UIKit.NSTextLayoutManagerDelegate_Extensions::GetRenderingAttributes(UIKit.INSTextLayoutManagerDelegate,UIKit.NSTextLayoutManager,Foundation.NSObject,UIKit.INSTextLocation,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"UIKit.NSTextLayoutManagerDelegate_Extensions::GetTextLayoutFragment(UIKit.INSTextLayoutManagerDelegate,UIKit.NSTextLayoutManager,UIKit.INSTextLocation,UIKit.NSTextElement)",
			"UIKit.NSTextLayoutManagerDelegate_Extensions::ShouldBreakLineBeforeLocation(UIKit.INSTextLayoutManagerDelegate,UIKit.NSTextLayoutManager,UIKit.INSTextLocation,System.Boolean)",
			"UIKit.NSTextLineFragment::.ctor(Foundation.NSAttributedString,Foundation.NSRange)",
			"UIKit.NSTextLineFragment::.ctor(Foundation.NSCoder)",
			"UIKit.NSTextLineFragment::.ctor(System.String,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSRange)",
			"UIKit.NSTextLineFragment::Draw(CoreGraphics.CGPoint,CoreGraphics.CGContext)",
			"UIKit.NSTextLineFragment::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSTextLocationWrapper::Compare(UIKit.INSTextLocation)",
			"UIKit.NSTextParagraph::.ctor(Foundation.NSAttributedString)",
			"UIKit.NSTextParagraph::.ctor(UIKit.NSTextContentManager)",
			"UIKit.NSTextRange::.ctor(UIKit.INSTextLocation)",
			"UIKit.NSTextRange::.ctor(UIKit.INSTextLocation,UIKit.INSTextLocation)",
			"UIKit.NSTextRange::Contains(UIKit.INSTextLocation)",
			"UIKit.NSTextRange::Contains(UIKit.NSTextRange)",
			"UIKit.NSTextRange::GetTextRangeByFormingUnion(UIKit.NSTextRange)",
			"UIKit.NSTextRange::GetTextRangeByIntersecting(UIKit.NSTextRange)",
			"UIKit.NSTextRange::Intersects(UIKit.NSTextRange)",
			"UIKit.NSTextRange::IsEqual(UIKit.NSTextRange)",
			"UIKit.NSTextSelection::.ctor(Foundation.NSCoder)",
			"UIKit.NSTextSelection::.ctor(UIKit.INSTextLocation,UIKit.NSTextSelectionAffinity)",
			"UIKit.NSTextSelection::.ctor(UIKit.NSTextRange,UIKit.NSTextSelectionAffinity,UIKit.NSTextSelectionGranularity)",
			"UIKit.NSTextSelection::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSTextSelection::set_SecondarySelectionLocation(UIKit.INSTextLocation)",
			"UIKit.NSTextSelection::set_TypingAttributes(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"UIKit.NSTextSelectionDataSource_Extensions::EnumerateContainerBoundaries(UIKit.INSTextSelectionDataSource,UIKit.INSTextLocation,System.Boolean,UIKit.NSTextSelectionDataSourceEnumerateContainerBoundariesDelegate)",
			"UIKit.NSTextSelectionDataSource_Extensions::GetTextLayoutOrientation(UIKit.INSTextSelectionDataSource,UIKit.INSTextLocation)",
			"UIKit.NSTextSelectionDataSourceWrapper::EnumerateCaretOffsets(UIKit.INSTextLocation,UIKit.NSTextSelectionDataSourceEnumerateCaretOffsetsDelegate)",
			"UIKit.NSTextSelectionDataSourceWrapper::EnumerateSubstrings(UIKit.INSTextLocation,Foundation.NSStringEnumerationOptions,UIKit.NSTextSelectionDataSourceEnumerateSubstringsDelegate)",
			"UIKit.NSTextSelectionDataSourceWrapper::GetBaseWritingDirection(UIKit.INSTextLocation)",
			"UIKit.NSTextSelectionDataSourceWrapper::GetLineFragmentRange(CoreGraphics.CGPoint,UIKit.INSTextLocation)",
			"UIKit.NSTextSelectionDataSourceWrapper::GetLocation(UIKit.INSTextLocation,System.IntPtr)",
			"UIKit.NSTextSelectionDataSourceWrapper::GetOffsetFromLocation(UIKit.INSTextLocation,UIKit.INSTextLocation)",
			"UIKit.NSTextSelectionDataSourceWrapper::GetTextRange(UIKit.NSTextSelectionGranularity,UIKit.INSTextLocation)",
			"UIKit.NSTextSelectionNavigation::.ctor(UIKit.INSTextSelectionDataSource)",
			"UIKit.NSTextSelectionNavigation::GetDeletionRanges(UIKit.NSTextSelection,UIKit.NSTextSelectionNavigationDirection,UIKit.NSTextSelectionNavigationDestination,System.Boolean)",
			"UIKit.NSTextSelectionNavigation::GetDestinationSelection(UIKit.NSTextSelection,UIKit.NSTextSelectionNavigationDirection,UIKit.NSTextSelectionNavigationDestination,System.Boolean,System.Boolean)",
			"UIKit.NSTextSelectionNavigation::GetResolvedInsertionLocation(UIKit.NSTextSelection,UIKit.NSTextSelectionNavigationWritingDirection)",
			"UIKit.NSTextSelectionNavigation::GetTextSelection(UIKit.NSTextSelectionGranularity,CoreGraphics.CGPoint,UIKit.INSTextLocation)",
			"UIKit.NSTextSelectionNavigation::GetTextSelection(UIKit.NSTextSelectionGranularity,UIKit.NSTextSelection)",
			"UIKit.NSTextSelectionNavigation::GetTextSelectionsInteracting(CoreGraphics.CGPoint,UIKit.INSTextLocation,UIKit.NSTextSelection[],UIKit.NSTextSelectionNavigationModifier,System.Boolean,CoreGraphics.CGRect)",
			"UIKit.NSTextStorage::.ctor(Foundation.NSCoder)",
			"UIKit.NSTextStorage::AddLayoutManager(UIKit.NSLayoutManager)",
			"UIKit.NSTextStorage::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSTextStorage::RemoveLayoutManager(UIKit.NSLayoutManager)",
			"UIKit.NSTextStorageDelegate_Extensions::DidProcessEditing(UIKit.INSTextStorageDelegate,UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.IntPtr)",
			"UIKit.NSTextStorageDelegate_Extensions::WillProcessEditing(UIKit.INSTextStorageDelegate,UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.IntPtr)",
			"UIKit.NSTextStorageObservingWrapper::PerformEditingTransaction(UIKit.NSTextStorage,System.Action)",
			"UIKit.NSTextStorageObservingWrapper::ProcessEditing(UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.IntPtr,Foundation.NSRange)",
			"UIKit.NSTextStorageObservingWrapper::set_TextStorage(UIKit.NSTextStorage)",
			"UIKit.NSTextTab::.ctor(Foundation.NSCoder)",
			"UIKit.NSTextTab::.ctor(UIKit.UITextAlignment,System.Runtime.InteropServices.NFloat,Foundation.NSDictionary)",
			"UIKit.NSTextTab::Copy(Foundation.NSZone)",
			"UIKit.NSTextTab::EncodeTo(Foundation.NSCoder)",
			"UIKit.NSTextTab::GetColumnTerminators(Foundation.NSLocale)",
			"UIKit.NSTextViewportLayoutController::.ctor(UIKit.NSTextLayoutManager)",
			"UIKit.NSTextViewportLayoutController::RelocateViewport(UIKit.INSTextLocation)",
			"UIKit.NSTextViewportLayoutControllerDelegate_Extensions::DidLayout(UIKit.INSTextViewportLayoutControllerDelegate,UIKit.NSTextViewportLayoutController)",
			"UIKit.NSTextViewportLayoutControllerDelegate_Extensions::WillLayout(UIKit.INSTextViewportLayoutControllerDelegate,UIKit.NSTextViewportLayoutController)",
			"UIKit.NSTextViewportLayoutControllerDelegateWrapper::ConfigureRenderingSurface(UIKit.NSTextViewportLayoutController,UIKit.NSTextLayoutFragment)",
			"UIKit.NSTextViewportLayoutControllerDelegateWrapper::GetViewportBounds(UIKit.NSTextViewportLayoutController)",
			"UIKit.SDUIConfigurationColorTransformerHandler::Invoke(System.IntPtr,System.IntPtr)",
			"UIKit.TransitionCoordinator_UIViewController::GetTransitionCoordinator(UIKit.UIViewController)",
			"UIKit.UIAccelerometerDelegate_Extensions::DidAccelerate(UIKit.IUIAccelerometerDelegate,UIKit.UIAccelerometer,UIKit.UIAcceleration)",
			"UIKit.UIAccessibility::ConvertFrameToScreenCoordinates(CoreGraphics.CGRect,UIKit.UIView)",
			"UIKit.UIAccessibility::ConvertPathToScreenCoordinates(UIKit.UIBezierPath,UIKit.UIView)",
			"UIKit.UIAccessibility::PostNotification(System.Int32,Foundation.NSObject)",
			"UIKit.UIAccessibility::ZoomFocusChanged(UIKit.UIAccessibilityZoomType,CoreGraphics.CGRect,UIKit.UIView)",
			"UIKit.UIAccessibilityContainer_Extensions::AccessibilityElementCount(UIKit.IUIAccessibilityContainer)",
			"UIKit.UIAccessibilityContainer_Extensions::GetAccessibilityContainerType(UIKit.IUIAccessibilityContainer)",
			"UIKit.UIAccessibilityContainer_Extensions::GetAccessibilityElementAt(UIKit.IUIAccessibilityContainer,System.IntPtr)",
			"UIKit.UIAccessibilityContainer_Extensions::GetAccessibilityElements(UIKit.IUIAccessibilityContainer)",
			"UIKit.UIAccessibilityContainer_Extensions::GetIndexOfAccessibilityElement(UIKit.IUIAccessibilityContainer,Foundation.NSObject)",
			"UIKit.UIAccessibilityContainer_Extensions::SetAccessibilityContainerType(UIKit.IUIAccessibilityContainer,UIKit.UIAccessibilityContainerType)",
			"UIKit.UIAccessibilityContainer_Extensions::SetAccessibilityElements(UIKit.IUIAccessibilityContainer,Foundation.NSObject)",
			"UIKit.UIAccessibilityContainerDataTable_Extensions::GetAccessibilityHeaderElementsForColumn(UIKit.IUIAccessibilityContainerDataTable,System.UIntPtr)",
			"UIKit.UIAccessibilityContainerDataTable_Extensions::GetAccessibilityHeaderElementsForRow(UIKit.IUIAccessibilityContainerDataTable,System.UIntPtr)",
			"UIKit.UIAccessibilityCustomAction::.ctor(Foundation.NSAttributedString,Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIAccessibilityCustomAction::.ctor(Foundation.NSAttributedString,UIKit.UIAccessibilityCustomActionHandler)",
			"UIKit.UIAccessibilityCustomAction::.ctor(Foundation.NSAttributedString,UIKit.UIImage,Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIAccessibilityCustomAction::.ctor(Foundation.NSAttributedString,UIKit.UIImage,UIKit.UIAccessibilityCustomActionHandler)",
			"UIKit.UIAccessibilityCustomAction::.ctor(System.String,Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIAccessibilityCustomAction::.ctor(System.String,UIKit.UIImage,Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIAccessibilityCustomAction::.ctor(System.String,UIKit.UIImage,UIKit.UIAccessibilityCustomActionHandler)",
			"UIKit.UIAccessibilityCustomAction::set_AttributedName(Foundation.NSAttributedString)",
			"UIKit.UIAccessibilityCustomAction::set_Image(UIKit.UIImage)",
			"UIKit.UIAccessibilityCustomAction::set_Selector(ObjCRuntime.Selector)",
			"UIKit.UIAccessibilityCustomRotor::.ctor(Foundation.NSAttributedString,UIKit.UIAccessibilityCustomRotorSearch)",
			"UIKit.UIAccessibilityCustomRotor::set_AttributedName(Foundation.NSAttributedString)",
			"UIKit.UIAccessibilityCustomRotorItemResult::.ctor(Foundation.NSObject,UIKit.UITextRange)",
			"UIKit.UIAccessibilityCustomRotorItemResult::set_TargetRange(UIKit.UITextRange)",
			"UIKit.UIAccessibilityCustomRotorSearchPredicate::set_CurrentItem(UIKit.UIAccessibilityCustomRotorItemResult)",
			"UIKit.UIAccessibilityElement::.ctor(Foundation.NSObject)",
			"UIKit.UIAccessibilityLocationDescriptor::.ctor(Foundation.NSAttributedString,CoreGraphics.CGPoint,UIKit.UIView)",
			"UIKit.UIAccessibilityLocationDescriptor::.ctor(System.String,CoreGraphics.CGPoint,UIKit.UIView)",
			"UIKit.UIAccessibilityLocationDescriptor::.ctor(System.String,UIKit.UIView)",
			"UIKit.UIAccessibilityReadingContent_Extensions::GetAccessibilityAttributedContent(UIKit.IUIAccessibilityReadingContent,System.IntPtr)",
			"UIKit.UIAccessibilityReadingContent_Extensions::GetAccessibilityAttributedPageContent(UIKit.IUIAccessibilityReadingContent)",
			"UIKit.UIAction::.ctor(Foundation.NSCoder)",
			"UIKit.UIAction::CaptureTextFromCameraAction(UIKit.IUIKeyInput,System.String)",
			"UIKit.UIAction::Create(System.String,UIKit.UIImage,System.String,UIKit.UIActionHandler)",
			"UIKit.UIAction::set_Image(UIKit.UIImage)",
			"UIKit.UIActionSheet::.ctor(Foundation.NSCoder)",
			"UIKit.UIActionSheet::.ctor(System.String,UIKit.IUIActionSheetDelegate,System.String,System.String,System.String)",
			"UIKit.UIActionSheet::ShowFrom(CoreGraphics.CGRect,UIKit.UIView,System.Boolean)",
			"UIKit.UIActionSheet::ShowFrom(UIKit.UIBarButtonItem,System.Boolean)",
			"UIKit.UIActionSheet::ShowFromTabBar(UIKit.UITabBar)",
			"UIKit.UIActionSheet::ShowFromToolbar(UIKit.UIToolbar)",
			"UIKit.UIActionSheet::ShowInView(UIKit.UIView)",
			"UIKit.UIActionSheetDelegate_Extensions::Canceled(UIKit.IUIActionSheetDelegate,UIKit.UIActionSheet)",
			"UIKit.UIActionSheetDelegate_Extensions::Clicked(UIKit.IUIActionSheetDelegate,UIKit.UIActionSheet,System.IntPtr)",
			"UIKit.UIActionSheetDelegate_Extensions::Dismissed(UIKit.IUIActionSheetDelegate,UIKit.UIActionSheet,System.IntPtr)",
			"UIKit.UIActionSheetDelegate_Extensions::Presented(UIKit.IUIActionSheetDelegate,UIKit.UIActionSheet)",
			"UIKit.UIActionSheetDelegate_Extensions::WillDismiss(UIKit.IUIActionSheetDelegate,UIKit.UIActionSheet,System.IntPtr)",
			"UIKit.UIActionSheetDelegate_Extensions::WillPresent(UIKit.IUIActionSheetDelegate,UIKit.UIActionSheet)",
			"UIKit.UIActivityIndicatorView/UIActivityIndicatorViewAppearance::set_Color(UIKit.UIColor)",
			"UIKit.UIActivityIndicatorView::.ctor(Foundation.NSCoder)",
			"UIKit.UIActivityIndicatorView::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIActivityIndicatorView::set_Color(UIKit.UIColor)",
			"UIKit.UIActivityItemProvider::.ctor(Foundation.NSObject)",
			"UIKit.UIActivityItemProvider::GetDataTypeIdentifierForActivity(UIKit.UIActivityViewController,Foundation.NSString)",
			"UIKit.UIActivityItemProvider::GetItemForActivity(UIKit.UIActivityViewController,Foundation.NSString)",
			"UIKit.UIActivityItemProvider::GetLinkMetadata(UIKit.UIActivityViewController)",
			"UIKit.UIActivityItemProvider::GetPlaceholderData(UIKit.UIActivityViewController)",
			"UIKit.UIActivityItemProvider::GetSubjectForActivity(UIKit.UIActivityViewController,Foundation.NSString)",
			"UIKit.UIActivityItemProvider::GetThumbnailImageForActivity(UIKit.UIActivityViewController,Foundation.NSString,CoreGraphics.CGSize)",
			"UIKit.UIActivityItemsConfiguration::GetActivityItemsConfigurationMetadata(Foundation.NSString)",
			"UIKit.UIActivityItemsConfiguration::GetActivityItemsConfigurationMetadata(System.IntPtr,Foundation.NSString)",
			"UIKit.UIActivityItemsConfiguration::GetActivityItemsConfigurationPreview(System.IntPtr,Foundation.NSString,CoreGraphics.CGSize)",
			"UIKit.UIActivityItemsConfiguration::GetActivityItemsConfigurationSupportsInteraction(Foundation.NSString)",
			"UIKit.UIActivityItemsConfiguration::set_LocalObject(Foundation.NSObject)",
			"UIKit.UIActivityItemsConfigurationReading_Extensions::GetActivityItemsConfigurationMetadata(UIKit.IUIActivityItemsConfigurationReading,Foundation.NSString)",
			"UIKit.UIActivityItemsConfigurationReading_Extensions::GetActivityItemsConfigurationMetadata(UIKit.IUIActivityItemsConfigurationReading,System.IntPtr,Foundation.NSString)",
			"UIKit.UIActivityItemsConfigurationReading_Extensions::GetActivityItemsConfigurationPreview(UIKit.IUIActivityItemsConfigurationReading,System.IntPtr,Foundation.NSString,CoreGraphics.CGSize)",
			"UIKit.UIActivityItemsConfigurationReading_Extensions::GetActivityItemsConfigurationSupportsInteraction(UIKit.IUIActivityItemsConfigurationReading,Foundation.NSString)",
			"UIKit.UIActivityItemsConfigurationReading_Extensions::GetApplicationActivitiesForActivityItemsConfiguration(UIKit.IUIActivityItemsConfigurationReading)",
			"UIKit.UIActivityItemSource_Extensions::GetDataTypeIdentifierForActivity(UIKit.IUIActivityItemSource,UIKit.UIActivityViewController,Foundation.NSString)",
			"UIKit.UIActivityItemSource_Extensions::GetLinkMetadata(UIKit.IUIActivityItemSource,UIKit.UIActivityViewController)",
			"UIKit.UIActivityItemSource_Extensions::GetSubjectForActivity(UIKit.IUIActivityItemSource,UIKit.UIActivityViewController,Foundation.NSString)",
			"UIKit.UIActivityItemSource_Extensions::GetThumbnailImageForActivity(UIKit.IUIActivityItemSource,UIKit.UIActivityViewController,Foundation.NSString,CoreGraphics.CGSize)",
			"UIKit.UIActivityItemSourceWrapper::GetItemForActivity(UIKit.UIActivityViewController,Foundation.NSString)",
			"UIKit.UIActivityItemSourceWrapper::GetPlaceholderData(UIKit.UIActivityViewController)",
			"UIKit.UIActivityViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UIActivityViewController::.ctor(UIKit.IUIActivityItemsConfigurationReading)",
			"UIKit.UIAdaptivePresentationControllerDelegate_Extensions::DidAttemptToDismiss(UIKit.IUIAdaptivePresentationControllerDelegate,UIKit.UIPresentationController)",
			"UIKit.UIAdaptivePresentationControllerDelegate_Extensions::DidDismiss(UIKit.IUIAdaptivePresentationControllerDelegate,UIKit.UIPresentationController)",
			"UIKit.UIAdaptivePresentationControllerDelegate_Extensions::GetAdaptivePresentationStyle(UIKit.IUIAdaptivePresentationControllerDelegate,UIKit.UIPresentationController)",
			"UIKit.UIAdaptivePresentationControllerDelegate_Extensions::GetAdaptivePresentationStyle(UIKit.IUIAdaptivePresentationControllerDelegate,UIKit.UIPresentationController,UIKit.UITraitCollection)",
			"UIKit.UIAdaptivePresentationControllerDelegate_Extensions::GetViewControllerForAdaptivePresentation(UIKit.IUIAdaptivePresentationControllerDelegate,UIKit.UIPresentationController,UIKit.UIModalPresentationStyle)",
			"UIKit.UIAdaptivePresentationControllerDelegate_Extensions::PrepareAdaptivePresentationController(UIKit.IUIAdaptivePresentationControllerDelegate,UIKit.UIPresentationController,UIKit.UIPresentationController)",
			"UIKit.UIAdaptivePresentationControllerDelegate_Extensions::ShouldDismiss(UIKit.IUIAdaptivePresentationControllerDelegate,UIKit.UIPresentationController)",
			"UIKit.UIAdaptivePresentationControllerDelegate_Extensions::WillDismiss(UIKit.IUIAdaptivePresentationControllerDelegate,UIKit.UIPresentationController)",
			"UIKit.UIAdaptivePresentationControllerDelegate_Extensions::WillPresent(UIKit.IUIAdaptivePresentationControllerDelegate,UIKit.UIPresentationController,UIKit.UIModalPresentationStyle,UIKit.IUIViewControllerTransitionCoordinator)",
			"UIKit.UIAlertAction::Copy(Foundation.NSZone)",
			"UIKit.UIAlertController::.ctor(Foundation.NSCoder)",
			"UIKit.UIAlertController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UIAlertController::AddAction(UIKit.UIAlertAction)",
			"UIKit.UIAlertController::set_PreferredAction(UIKit.UIAlertAction)",
			"UIKit.UIAlertView::.ctor(Foundation.NSCoder)",
			"UIKit.UIAlertView::.ctor(System.String,System.String,UIKit.IUIAlertViewDelegate,System.String,System.IntPtr,System.IntPtr,System.IntPtr)",
			"UIKit.UIAlertView::.ctor(System.String,System.String,UIKit.IUIAlertViewDelegate,System.String,System.String[])",
			"UIKit.UIAlertView::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIAlertViewDelegate_Extensions::Canceled(UIKit.IUIAlertViewDelegate,UIKit.UIAlertView)",
			"UIKit.UIAlertViewDelegate_Extensions::Clicked(UIKit.IUIAlertViewDelegate,UIKit.UIAlertView,System.IntPtr)",
			"UIKit.UIAlertViewDelegate_Extensions::Dismissed(UIKit.IUIAlertViewDelegate,UIKit.UIAlertView,System.IntPtr)",
			"UIKit.UIAlertViewDelegate_Extensions::Presented(UIKit.IUIAlertViewDelegate,UIKit.UIAlertView)",
			"UIKit.UIAlertViewDelegate_Extensions::ShouldEnableFirstOtherButton(UIKit.IUIAlertViewDelegate,UIKit.UIAlertView)",
			"UIKit.UIAlertViewDelegate_Extensions::WillDismiss(UIKit.IUIAlertViewDelegate,UIKit.UIAlertView,System.IntPtr)",
			"UIKit.UIAlertViewDelegate_Extensions::WillPresent(UIKit.IUIAlertViewDelegate,UIKit.UIAlertView)",
			"UIKit.UIAppearance::Equals(System.Object)",
			"UIKit.UIAppearance::GetAppearance(System.IntPtr,UIKit.UITraitCollection)",
			"UIKit.UIAppearance::GetAppearance(System.IntPtr,UIKit.UITraitCollection,System.Type[])",
			"UIKit.UIAppearance::op_Equality(UIKit.UIAppearance,UIKit.UIAppearance)",
			"UIKit.UIApplication::CancelLocalNotification(UIKit.UILocalNotification)",
			"UIKit.UIApplication::OpenUrl(Foundation.NSUrl)",
			"UIKit.UIApplication::OpenUrl(Foundation.NSUrl,Foundation.NSDictionary,System.Action`1<System.Boolean>)",
			"UIKit.UIApplication::PresentLocalNotificationNow(UIKit.UILocalNotification)",
			"UIKit.UIApplication::RegisterObjectForStateRestoration(UIKit.IUIStateRestoring,System.String)",
			"UIKit.UIApplication::RegisterUserNotificationSettings(UIKit.UIUserNotificationSettings)",
			"UIKit.UIApplication::RequestSceneSessionActivation(UIKit.UISceneSession,Foundation.NSUserActivity,UIKit.UISceneActivationRequestOptions,System.Action`1<Foundation.NSError>)",
			"UIKit.UIApplication::RequestSceneSessionDestruction(UIKit.UISceneSession,UIKit.UISceneDestructionRequestOptions,System.Action`1<Foundation.NSError>)",
			"UIKit.UIApplication::RequestSceneSessionRefresh(UIKit.UISceneSession)",
			"UIKit.UIApplication::ScheduleLocalNotification(UIKit.UILocalNotification)",
			"UIKit.UIApplication::SendAction(ObjCRuntime.Selector,Foundation.NSObject,Foundation.NSObject,UIKit.UIEvent)",
			"UIKit.UIApplication::SendEvent(UIKit.UIEvent)",
			"UIKit.UIApplication::SetNewsstandIconImage(UIKit.UIImage)",
			"UIKit.UIApplication::SupportedInterfaceOrientationsForWindow(UIKit.UIWindow)",
			"UIKit.UIApplicationDelegate_Extensions::AccessibilityPerformMagicTap(UIKit.IUIApplicationDelegate)",
			"UIKit.UIApplicationDelegate_Extensions::ApplicationSignificantTimeChange(UIKit.IUIApplicationDelegate,UIKit.UIApplication)",
			"UIKit.UIApplicationDelegate_Extensions::ChangedStatusBarFrame(UIKit.IUIApplicationDelegate,UIKit.UIApplication,CoreGraphics.CGRect)",
			"UIKit.UIApplicationDelegate_Extensions::ContinueUserActivity(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSUserActivity,UIKit.UIApplicationRestorationHandler)",
			"UIKit.UIApplicationDelegate_Extensions::DidChangeStatusBarOrientation(UIKit.IUIApplicationDelegate,UIKit.UIApplication,UIKit.UIInterfaceOrientation)",
			"UIKit.UIApplicationDelegate_Extensions::DidDecodeRestorableState(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSCoder)",
			"UIKit.UIApplicationDelegate_Extensions::DidDiscardSceneSessions(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSSet`1<UIKit.UISceneSession>)",
			"UIKit.UIApplicationDelegate_Extensions::DidEnterBackground(UIKit.IUIApplicationDelegate,UIKit.UIApplication)",
			"UIKit.UIApplicationDelegate_Extensions::DidFailToContinueUserActivity(UIKit.IUIApplicationDelegate,UIKit.UIApplication,System.String,Foundation.NSError)",
			"UIKit.UIApplicationDelegate_Extensions::DidReceiveRemoteNotification(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSDictionary,System.Action`1<UIKit.UIBackgroundFetchResult>)",
			"UIKit.UIApplicationDelegate_Extensions::DidRegisterUserNotificationSettings(UIKit.IUIApplicationDelegate,UIKit.UIApplication,UIKit.UIUserNotificationSettings)",
			"UIKit.UIApplicationDelegate_Extensions::FailedToRegisterForRemoteNotifications(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSError)",
			"UIKit.UIApplicationDelegate_Extensions::FinishedLaunching(UIKit.IUIApplicationDelegate,UIKit.UIApplication)",
			"UIKit.UIApplicationDelegate_Extensions::FinishedLaunching(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSDictionary)",
			"UIKit.UIApplicationDelegate_Extensions::GetConfiguration(UIKit.IUIApplicationDelegate,UIKit.UIApplication,UIKit.UISceneSession,UIKit.UISceneConnectionOptions)",
			"UIKit.UIApplicationDelegate_Extensions::GetHandlerForIntent(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Intents.INIntent)",
			"UIKit.UIApplicationDelegate_Extensions::GetSupportedInterfaceOrientations(UIKit.IUIApplicationDelegate,UIKit.UIApplication,UIKit.UIWindow)",
			"UIKit.UIApplicationDelegate_Extensions::GetViewController(UIKit.IUIApplicationDelegate,UIKit.UIApplication,System.String[],Foundation.NSCoder)",
			"UIKit.UIApplicationDelegate_Extensions::GetWindow(UIKit.IUIApplicationDelegate)",
			"UIKit.UIApplicationDelegate_Extensions::HandleAction(UIKit.IUIApplicationDelegate,UIKit.UIApplication,System.String,Foundation.NSDictionary,Foundation.NSDictionary,System.Action)",
			"UIKit.UIApplicationDelegate_Extensions::HandleAction(UIKit.IUIApplicationDelegate,UIKit.UIApplication,System.String,Foundation.NSDictionary,System.Action)",
			"UIKit.UIApplicationDelegate_Extensions::HandleAction(UIKit.IUIApplicationDelegate,UIKit.UIApplication,System.String,UIKit.UILocalNotification,Foundation.NSDictionary,System.Action)",
			"UIKit.UIApplicationDelegate_Extensions::HandleAction(UIKit.IUIApplicationDelegate,UIKit.UIApplication,System.String,UIKit.UILocalNotification,System.Action)",
			"UIKit.UIApplicationDelegate_Extensions::HandleEventsForBackgroundUrl(UIKit.IUIApplicationDelegate,UIKit.UIApplication,System.String,System.Action)",
			"UIKit.UIApplicationDelegate_Extensions::HandleIntent(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Intents.INIntent,System.Action`1<Intents.INIntentResponse>)",
			"UIKit.UIApplicationDelegate_Extensions::HandleOpenURL(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSUrl)",
			"UIKit.UIApplicationDelegate_Extensions::HandleWatchKitExtensionRequest(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSDictionary,System.Action`1<Foundation.NSDictionary>)",
			"UIKit.UIApplicationDelegate_Extensions::OnActivated(UIKit.IUIApplicationDelegate,UIKit.UIApplication)",
			"UIKit.UIApplicationDelegate_Extensions::OnResignActivation(UIKit.IUIApplicationDelegate,UIKit.UIApplication)",
			"UIKit.UIApplicationDelegate_Extensions::OpenUrl(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSUrl,Foundation.NSDictionary)",
			"UIKit.UIApplicationDelegate_Extensions::OpenUrl(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSUrl,System.String,Foundation.NSObject)",
			"UIKit.UIApplicationDelegate_Extensions::PerformActionForShortcutItem(UIKit.IUIApplicationDelegate,UIKit.UIApplication,UIKit.UIApplicationShortcutItem,UIKit.UIOperationHandler)",
			"UIKit.UIApplicationDelegate_Extensions::PerformFetch(UIKit.IUIApplicationDelegate,UIKit.UIApplication,System.Action`1<UIKit.UIBackgroundFetchResult>)",
			"UIKit.UIApplicationDelegate_Extensions::ProtectedDataDidBecomeAvailable(UIKit.IUIApplicationDelegate,UIKit.UIApplication)",
			"UIKit.UIApplicationDelegate_Extensions::ProtectedDataWillBecomeUnavailable(UIKit.IUIApplicationDelegate,UIKit.UIApplication)",
			"UIKit.UIApplicationDelegate_Extensions::ReceivedLocalNotification(UIKit.IUIApplicationDelegate,UIKit.UIApplication,UIKit.UILocalNotification)",
			"UIKit.UIApplicationDelegate_Extensions::ReceivedRemoteNotification(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSDictionary)",
			"UIKit.UIApplicationDelegate_Extensions::ReceiveMemoryWarning(UIKit.IUIApplicationDelegate,UIKit.UIApplication)",
			"UIKit.UIApplicationDelegate_Extensions::RegisteredForRemoteNotifications(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSData)",
			"UIKit.UIApplicationDelegate_Extensions::SetWindow(UIKit.IUIApplicationDelegate,UIKit.UIWindow)",
			"UIKit.UIApplicationDelegate_Extensions::ShouldAllowExtensionPointIdentifier(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSString)",
			"UIKit.UIApplicationDelegate_Extensions::ShouldAutomaticallyLocalizeKeyCommands(UIKit.IUIApplicationDelegate,UIKit.UIApplication)",
			"UIKit.UIApplicationDelegate_Extensions::ShouldRequestHealthAuthorization(UIKit.IUIApplicationDelegate,UIKit.UIApplication)",
			"UIKit.UIApplicationDelegate_Extensions::ShouldRestoreApplicationState(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSCoder)",
			"UIKit.UIApplicationDelegate_Extensions::ShouldRestoreSecureApplicationState(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSCoder)",
			"UIKit.UIApplicationDelegate_Extensions::ShouldSaveApplicationState(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSCoder)",
			"UIKit.UIApplicationDelegate_Extensions::ShouldSaveSecureApplicationState(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSCoder)",
			"UIKit.UIApplicationDelegate_Extensions::UserActivityUpdated(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSUserActivity)",
			"UIKit.UIApplicationDelegate_Extensions::UserDidAcceptCloudKitShare(UIKit.IUIApplicationDelegate,UIKit.UIApplication,CloudKit.CKShareMetadata)",
			"UIKit.UIApplicationDelegate_Extensions::WillChangeStatusBarFrame(UIKit.IUIApplicationDelegate,UIKit.UIApplication,CoreGraphics.CGRect)",
			"UIKit.UIApplicationDelegate_Extensions::WillChangeStatusBarOrientation(UIKit.IUIApplicationDelegate,UIKit.UIApplication,UIKit.UIInterfaceOrientation,System.Double)",
			"UIKit.UIApplicationDelegate_Extensions::WillContinueUserActivity(UIKit.IUIApplicationDelegate,UIKit.UIApplication,System.String)",
			"UIKit.UIApplicationDelegate_Extensions::WillEncodeRestorableState(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSCoder)",
			"UIKit.UIApplicationDelegate_Extensions::WillEnterForeground(UIKit.IUIApplicationDelegate,UIKit.UIApplication)",
			"UIKit.UIApplicationDelegate_Extensions::WillFinishLaunching(UIKit.IUIApplicationDelegate,UIKit.UIApplication,Foundation.NSDictionary)",
			"UIKit.UIApplicationDelegate_Extensions::WillTerminate(UIKit.IUIApplicationDelegate,UIKit.UIApplication)",
			"UIKit.UIApplicationShortcutIcon::Copy(Foundation.NSZone)",
			"UIKit.UIApplicationShortcutIcon::FromContact(Contacts.CNContact)",
			"UIKit.UIApplicationShortcutItem::.ctor(System.String,System.String,System.String,UIKit.UIApplicationShortcutIcon,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"UIKit.UIApplicationShortcutItem::Copy(Foundation.NSZone)",
			"UIKit.UIApplicationShortcutItem::MutableCopy(Foundation.NSZone)",
			"UIKit.UIAttachmentBehavior::.ctor(UIKit.IUIDynamicItem,CoreGraphics.CGPoint)",
			"UIKit.UIAttachmentBehavior::.ctor(UIKit.IUIDynamicItem,UIKit.IUIDynamicItem)",
			"UIKit.UIAttachmentBehavior::.ctor(UIKit.IUIDynamicItem,UIKit.UIOffset,CoreGraphics.CGPoint)",
			"UIKit.UIAttachmentBehavior::.ctor(UIKit.IUIDynamicItem,UIKit.UIOffset,UIKit.IUIDynamicItem,UIKit.UIOffset)",
			"UIKit.UIAttachmentBehavior::CreateFixedAttachment(UIKit.IUIDynamicItem,UIKit.IUIDynamicItem,CoreGraphics.CGPoint)",
			"UIKit.UIAttachmentBehavior::CreateLimitAttachment(UIKit.IUIDynamicItem,UIKit.UIOffset,UIKit.IUIDynamicItem,UIKit.UIOffset)",
			"UIKit.UIAttachmentBehavior::CreatePinAttachment(UIKit.IUIDynamicItem,UIKit.IUIDynamicItem,CoreGraphics.CGPoint)",
			"UIKit.UIAttachmentBehavior::CreateSlidingAttachment(UIKit.IUIDynamicItem,CoreGraphics.CGPoint,CoreGraphics.CGVector)",
			"UIKit.UIAttachmentBehavior::CreateSlidingAttachment(UIKit.IUIDynamicItem,UIKit.IUIDynamicItem,CoreGraphics.CGPoint,CoreGraphics.CGVector)",
			"UIKit.UIBackgroundConfiguration::.ctor(Foundation.NSCoder)",
			"UIKit.UIBackgroundConfiguration::Copy(Foundation.NSZone)",
			"UIKit.UIBackgroundConfiguration::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIBackgroundConfiguration::GetResolvedBackgroundColor(UIKit.UIColor)",
			"UIKit.UIBackgroundConfiguration::GetResolvedStrokeColor(UIKit.UIColor)",
			"UIKit.UIBackgroundConfiguration::GetUpdatedConfiguration(UIKit.IUIConfigurationState)",
			"UIKit.UIBackgroundConfiguration::set_BackgroundColor(UIKit.UIColor)",
			"UIKit.UIBackgroundConfiguration::set_CustomView(UIKit.UIView)",
			"UIKit.UIBackgroundConfiguration::set_Image(UIKit.UIImage)",
			"UIKit.UIBackgroundConfiguration::set_StrokeColor(UIKit.UIColor)",
			"UIKit.UIBackgroundConfiguration::set_VisualEffect(UIKit.UIVisualEffect)",
			"UIKit.UIBandSelectionInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UIBandSelectionInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UIBarAppearance::.ctor(Foundation.NSCoder)",
			"UIKit.UIBarAppearance::.ctor(UIKit.UIBarAppearance)",
			"UIKit.UIBarAppearance::Copy(Foundation.NSZone)",
			"UIKit.UIBarAppearance::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIBarAppearance::set_BackgroundColor(UIKit.UIColor)",
			"UIKit.UIBarAppearance::set_BackgroundEffect(UIKit.UIBlurEffect)",
			"UIKit.UIBarAppearance::set_BackgroundImage(UIKit.UIImage)",
			"UIKit.UIBarAppearance::set_ShadowColor(UIKit.UIColor)",
			"UIKit.UIBarAppearance::set_ShadowImage(UIKit.UIImage)",
			"UIKit.UIBarButtonItem/UIBarButtonItemAppearance::set_TintColor(UIKit.UIColor)",
			"UIKit.UIBarButtonItem/UIBarButtonItemAppearance::SetBackButtonBackgroundImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIBarMetrics)",
			"UIKit.UIBarButtonItem/UIBarButtonItemAppearance::SetBackgroundImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIBarButtonItemStyle,UIKit.UIBarMetrics)",
			"UIKit.UIBarButtonItem/UIBarButtonItemAppearance::SetBackgroundImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIBarMetrics)",
			"UIKit.UIBarButtonItem::.ctor(Foundation.NSCoder)",
			"UIKit.UIBarButtonItem::.ctor(System.String,UIKit.UIBarButtonItemStyle,Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIBarButtonItem::.ctor(System.String,UIKit.UIMenu)",
			"UIKit.UIBarButtonItem::.ctor(UIKit.UIAction)",
			"UIKit.UIBarButtonItem::.ctor(UIKit.UIBarButtonSystemItem,Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIBarButtonItem::.ctor(UIKit.UIBarButtonSystemItem,UIKit.UIAction)",
			"UIKit.UIBarButtonItem::.ctor(UIKit.UIBarButtonSystemItem,UIKit.UIMenu)",
			"UIKit.UIBarButtonItem::.ctor(UIKit.UIImage,UIKit.UIBarButtonItemStyle,Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIBarButtonItem::.ctor(UIKit.UIImage,UIKit.UIImage,UIKit.UIBarButtonItemStyle,Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIBarButtonItem::.ctor(UIKit.UIImage,UIKit.UIMenu)",
			"UIKit.UIBarButtonItem::.ctor(UIKit.UIView)",
			"UIKit.UIBarButtonItem::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIBarButtonItem::set_Action(ObjCRuntime.Selector)",
			"UIKit.UIBarButtonItem::set_CustomView(UIKit.UIView)",
			"UIKit.UIBarButtonItem::set_Image(UIKit.UIImage)",
			"UIKit.UIBarButtonItem::set_Menu(UIKit.UIMenu)",
			"UIKit.UIBarButtonItem::set_PossibleTitles(Foundation.NSSet)",
			"UIKit.UIBarButtonItem::set_PrimaryAction(UIKit.UIAction)",
			"UIKit.UIBarButtonItem::set_TintColor(UIKit.UIColor)",
			"UIKit.UIBarButtonItem::SetBackButtonBackgroundImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIBarMetrics)",
			"UIKit.UIBarButtonItem::SetBackgroundImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIBarButtonItemStyle,UIKit.UIBarMetrics)",
			"UIKit.UIBarButtonItem::SetBackgroundImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIBarMetrics)",
			"UIKit.UIBarButtonItemAppearance::.ctor(Foundation.NSCoder)",
			"UIKit.UIBarButtonItemAppearance::Copy(Foundation.NSZone)",
			"UIKit.UIBarButtonItemAppearance::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIBarButtonItemGroup::.ctor(Foundation.NSCoder)",
			"UIKit.UIBarButtonItemGroup::.ctor(UIKit.UIBarButtonItem[],UIKit.UIBarButtonItem)",
			"UIKit.UIBarButtonItemGroup::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIBarButtonItemGroup::set_RepresentativeItem(UIKit.UIBarButtonItem)",
			"UIKit.UIBarButtonItemStateAppearance::set_BackgroundImage(UIKit.UIImage)",
			"UIKit.UIBarButtonItemStateAppearance::set_TitleTextAttributes(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"UIKit.UIBarItem/UIBarItemAppearance::_SetTitleTextAttributes(Foundation.NSDictionary,UIKit.UIControlState)",
			"UIKit.UIBarItem::.ctor(Foundation.NSCoder)",
			"UIKit.UIBarItem::_SetTitleTextAttributes(Foundation.NSDictionary,UIKit.UIControlState)",
			"UIKit.UIBarItem::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIBarItem::set_AccessibilityAttributedHint(Foundation.NSAttributedString)",
			"UIKit.UIBarItem::set_AccessibilityAttributedLabel(Foundation.NSAttributedString)",
			"UIKit.UIBarItem::set_AccessibilityAttributedValue(Foundation.NSAttributedString)",
			"UIKit.UIBarItem::set_AccessibilityPath(UIKit.UIBezierPath)",
			"UIKit.UIBarItem::set_LandscapeImagePhone(UIKit.UIImage)",
			"UIKit.UIBarItem::set_LargeContentSizeImage(UIKit.UIImage)",
			"UIKit.UIBarPositioningDelegate_Extensions::GetPositionForBar(UIKit.IUIBarPositioningDelegate,UIKit.IUIBarPositioning)",
			"UIKit.UIBezierPath::.ctor(Foundation.NSCoder)",
			"UIKit.UIBezierPath::AppendPath(UIKit.UIBezierPath)",
			"UIKit.UIBezierPath::Copy(Foundation.NSZone)",
			"UIKit.UIBezierPath::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIBezierPath::FromPath(CoreGraphics.CGPath)",
			"UIKit.UIBezierPath::set_CGPath(CoreGraphics.CGPath)",
			"UIKit.UIBlurEffect::.ctor(Foundation.NSCoder)",
			"UIKit.UIButton/UIButtonAppearance::SetBackgroundImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UIButton/UIButtonAppearance::SetImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UIButton/UIButtonAppearance::SetPreferredSymbolConfiguration(UIKit.UIImageSymbolConfiguration,UIKit.UIControlState)",
			"UIKit.UIButton/UIButtonAppearance::SetTitleColor(UIKit.UIColor,UIKit.UIControlState)",
			"UIKit.UIButton/UIButtonAppearance::SetTitleShadowColor(UIKit.UIColor,UIKit.UIControlState)",
			"UIKit.UIButton::.ctor(CoreGraphics.CGRect,UIKit.UIAction)",
			"UIKit.UIButton::.ctor(Foundation.NSCoder)",
			"UIKit.UIButton::FromType(UIKit.UIButtonType,UIKit.UIAction)",
			"UIKit.UIButton::GetButton(UIKit.UIButtonConfiguration,UIKit.UIAction)",
			"UIKit.UIButton::GetSystemButton(UIKit.UIAction)",
			"UIKit.UIButton::GetSystemButton(UIKit.UIImage,Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIButton::set_Configuration(UIKit.UIButtonConfiguration)",
			"UIKit.UIButton::set_Menu(UIKit.UIMenu)",
			"UIKit.UIButton::SetAttributedTitle(Foundation.NSAttributedString,UIKit.UIControlState)",
			"UIKit.UIButton::SetBackgroundImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UIButton::SetImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UIButton::SetPreferredSymbolConfiguration(UIKit.UIImageSymbolConfiguration,UIKit.UIControlState)",
			"UIKit.UIButton::SetTitleColor(UIKit.UIColor,UIKit.UIControlState)",
			"UIKit.UIButton::SetTitleShadowColor(UIKit.UIColor,UIKit.UIControlState)",
			"UIKit.UIButtonConfiguration::.ctor(Foundation.NSCoder)",
			"UIKit.UIButtonConfiguration::Copy(Foundation.NSZone)",
			"UIKit.UIButtonConfiguration::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIButtonConfiguration::GetUpdatedConfiguration(UIKit.UIButton)",
			"UIKit.UIButtonConfiguration::set_AttributedSubtitle(Foundation.NSAttributedString)",
			"UIKit.UIButtonConfiguration::set_AttributedTitle(Foundation.NSAttributedString)",
			"UIKit.UIButtonConfiguration::set_Background(UIKit.UIBackgroundConfiguration)",
			"UIKit.UIButtonConfiguration::set_BaseBackgroundColor(UIKit.UIColor)",
			"UIKit.UIButtonConfiguration::set_BaseForegroundColor(UIKit.UIColor)",
			"UIKit.UIButtonConfiguration::set_Image(UIKit.UIImage)",
			"UIKit.UIButtonConfiguration::set_PreferredSymbolConfigurationForImage(UIKit.UIImageSymbolConfiguration)",
			"UIKit.UICellAccessory::.ctor(Foundation.NSCoder)",
			"UIKit.UICellAccessory::Copy(Foundation.NSZone)",
			"UIKit.UICellAccessory::EncodeTo(Foundation.NSCoder)",
			"UIKit.UICellAccessory::set_TintColor(UIKit.UIColor)",
			"UIKit.UICellAccessoryCheckmark::.ctor(Foundation.NSCoder)",
			"UIKit.UICellAccessoryCustomView::.ctor(Foundation.NSCoder)",
			"UIKit.UICellAccessoryCustomView::.ctor(UIKit.UIView,UIKit.UICellAccessoryPlacement)",
			"UIKit.UICellAccessoryDelete::.ctor(Foundation.NSCoder)",
			"UIKit.UICellAccessoryDelete::set_BackgroundColor(UIKit.UIColor)",
			"UIKit.UICellAccessoryDetail::.ctor(Foundation.NSCoder)",
			"UIKit.UICellAccessoryDisclosureIndicator::.ctor(Foundation.NSCoder)",
			"UIKit.UICellAccessoryInsert::.ctor(Foundation.NSCoder)",
			"UIKit.UICellAccessoryInsert::set_BackgroundColor(UIKit.UIColor)",
			"UIKit.UICellAccessoryLabel::.ctor(Foundation.NSCoder)",
			"UIKit.UICellAccessoryLabel::set_Font(UIKit.UIFont)",
			"UIKit.UICellAccessoryMultiselect::.ctor(Foundation.NSCoder)",
			"UIKit.UICellAccessoryMultiselect::set_BackgroundColor(UIKit.UIColor)",
			"UIKit.UICellAccessoryOutlineDisclosure::.ctor(Foundation.NSCoder)",
			"UIKit.UICellAccessoryReorder::.ctor(Foundation.NSCoder)",
			"UIKit.UICellConfigurationState::.ctor(Foundation.NSCoder)",
			"UIKit.UICellConfigurationState::.ctor(UIKit.UITraitCollection)",
			"UIKit.UICloudSharingController::.ctor(CloudKit.CKShare,CloudKit.CKContainer)",
			"UIKit.UICloudSharingController::.ctor(Foundation.NSCoder)",
			"UIKit.UICloudSharingController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UICloudSharingControllerDelegate_Extensions::DidSaveShare(UIKit.IUICloudSharingControllerDelegate,UIKit.UICloudSharingController)",
			"UIKit.UICloudSharingControllerDelegate_Extensions::DidStopSharing(UIKit.IUICloudSharingControllerDelegate,UIKit.UICloudSharingController)",
			"UIKit.UICloudSharingControllerDelegate_Extensions::GetItemThumbnailData(UIKit.IUICloudSharingControllerDelegate,UIKit.UICloudSharingController)",
			"UIKit.UICloudSharingControllerDelegate_Extensions::GetItemType(UIKit.IUICloudSharingControllerDelegate,UIKit.UICloudSharingController)",
			"UIKit.UICloudSharingControllerDelegateWrapper::FailedToSaveShare(UIKit.UICloudSharingController,Foundation.NSError)",
			"UIKit.UICloudSharingControllerDelegateWrapper::GetItemTitle(UIKit.UICloudSharingController)",
			"UIKit.UICollectionLayoutListConfiguration::Copy(Foundation.NSZone)",
			"UIKit.UICollectionLayoutListConfiguration::set_SeparatorConfiguration(UIKit.UIListSeparatorConfiguration)",
			"UIKit.UICollectionReusableView::.ctor(Foundation.NSCoder)",
			"UIKit.UICollectionReusableView::ApplyLayoutAttributes(UIKit.UICollectionViewLayoutAttributes)",
			"UIKit.UICollectionReusableView::DidTransition(UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayout)",
			"UIKit.UICollectionReusableView::PreferredLayoutAttributesFittingAttributes(UIKit.UICollectionViewLayoutAttributes)",
			"UIKit.UICollectionReusableView::WillTransition(UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayout)",
			"UIKit.UICollectionView::.ctor(CoreGraphics.CGRect,UIKit.UICollectionViewLayout)",
			"UIKit.UICollectionView::.ctor(Foundation.NSCoder)",
			"UIKit.UICollectionView::BeginInteractiveMovementForItem(Foundation.NSIndexPath)",
			"UIKit.UICollectionView::CellForItem(Foundation.NSIndexPath)",
			"UIKit.UICollectionView::DeleteSections(Foundation.NSIndexSet)",
			"UIKit.UICollectionView::DequeueConfiguredReusableCell(UIKit.UICollectionViewCellRegistration,Foundation.NSIndexPath,Foundation.NSObject)",
			"UIKit.UICollectionView::DequeueConfiguredReusableSupplementaryView(UIKit.UICollectionViewSupplementaryRegistration,Foundation.NSIndexPath)",
			"UIKit.UICollectionView::DequeueReusableCell(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionView::DequeueReusableSupplementaryView(Foundation.NSString,Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionView::DeselectItem(Foundation.NSIndexPath,System.Boolean)",
			"UIKit.UICollectionView::EncodeTo(Foundation.NSCoder)",
			"UIKit.UICollectionView::GetDataSourceIndexPath(Foundation.NSIndexPath)",
			"UIKit.UICollectionView::GetIndexPathsForVisibleSupplementaryElements(Foundation.NSString)",
			"UIKit.UICollectionView::GetLayoutAttributesForItem(Foundation.NSIndexPath)",
			"UIKit.UICollectionView::GetLayoutAttributesForSupplementaryElement(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionView::GetPresentationIndexPath(Foundation.NSIndexPath)",
			"UIKit.UICollectionView::GetSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionView::GetVisibleSupplementaryViews(Foundation.NSString)",
			"UIKit.UICollectionView::IndexPathForCell(UIKit.UICollectionViewCell)",
			"UIKit.UICollectionView::InsertSections(Foundation.NSIndexSet)",
			"UIKit.UICollectionView::MoveItem(Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UICollectionView::RegisterClassForCell(System.IntPtr,Foundation.NSString)",
			"UIKit.UICollectionView::RegisterClassForSupplementaryView(System.IntPtr,Foundation.NSString,Foundation.NSString)",
			"UIKit.UICollectionView::RegisterNibForCell(UIKit.UINib,Foundation.NSString)",
			"UIKit.UICollectionView::RegisterNibForSupplementaryView(UIKit.UINib,Foundation.NSString,Foundation.NSString)",
			"UIKit.UICollectionView::ReloadSections(Foundation.NSIndexSet)",
			"UIKit.UICollectionView::ScrollToItem(Foundation.NSIndexPath,UIKit.UICollectionViewScrollPosition,System.Boolean)",
			"UIKit.UICollectionView::SelectItem(Foundation.NSIndexPath,System.Boolean,UIKit.UICollectionViewScrollPosition)",
			"UIKit.UICollectionView::set_BackgroundView(UIKit.UIView)",
			"UIKit.UICollectionView::set_CollectionViewLayout(UIKit.UICollectionViewLayout)",
			"UIKit.UICollectionView::SetCollectionViewLayout(UIKit.UICollectionViewLayout,System.Boolean)",
			"UIKit.UICollectionView::SetCollectionViewLayout(UIKit.UICollectionViewLayout,System.Boolean,UIKit.UICompletionHandler)",
			"UIKit.UICollectionView::StartInteractiveTransition(UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayoutInteractiveTransitionCompletion)",
			"UIKit.UICollectionViewCell::.ctor(Foundation.NSCoder)",
			"UIKit.UICollectionViewCell::set_BackgroundConfiguration(UIKit.UIBackgroundConfiguration)",
			"UIKit.UICollectionViewCell::set_BackgroundView(UIKit.UIView)",
			"UIKit.UICollectionViewCell::set_ContentConfiguration(UIKit.IUIContentConfiguration)",
			"UIKit.UICollectionViewCell::set_SelectedBackgroundView(UIKit.UIView)",
			"UIKit.UICollectionViewCell::UpdateConfiguration(UIKit.UICellConfigurationState)",
			"UIKit.UICollectionViewCellRegistration::GetRegistration(UIKit.UINib,UIKit.UICollectionViewCellRegistrationConfigurationHandler)",
			"UIKit.UICollectionViewCompositionalLayout::.ctor(Foundation.NSCoder)",
			"UIKit.UICollectionViewCompositionalLayout::.ctor(UIKit.NSCollectionLayoutSection)",
			"UIKit.UICollectionViewCompositionalLayout::.ctor(UIKit.NSCollectionLayoutSection,UIKit.UICollectionViewCompositionalLayoutConfiguration)",
			"UIKit.UICollectionViewCompositionalLayout::.ctor(UIKit.UICollectionViewCompositionalLayoutSectionProvider,UIKit.UICollectionViewCompositionalLayoutConfiguration)",
			"UIKit.UICollectionViewCompositionalLayout::GetLayout(UIKit.UICollectionLayoutListConfiguration)",
			"UIKit.UICollectionViewCompositionalLayout::set_Configuration(UIKit.UICollectionViewCompositionalLayoutConfiguration)",
			"UIKit.UICollectionViewCompositionalLayoutConfiguration::Copy(Foundation.NSZone)",
			"UIKit.UICollectionViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UICollectionViewController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UICollectionViewController::.ctor(UIKit.UICollectionViewLayout)",
			"UIKit.UICollectionViewController::CanEditItem(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::CanFocusItem(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::CanMoveItem(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::CanPerformAction(UIKit.UICollectionView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)",
			"UIKit.UICollectionViewController::CellDisplayingEnded(UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::DecelerationEnded(UIKit.UIScrollView)",
			"UIKit.UICollectionViewController::DecelerationStarted(UIKit.UIScrollView)",
			"UIKit.UICollectionViewController::DidBeginMultipleSelectionInteraction(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::DidChangeAdjustedContentInset(UIKit.UIScrollView)",
			"UIKit.UICollectionViewController::DidEndMultipleSelectionInteraction(UIKit.UICollectionView)",
			"UIKit.UICollectionViewController::DidUpdateFocus(UIKit.UICollectionView,UIKit.UICollectionViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)",
			"UIKit.UICollectionViewController::DidZoom(UIKit.UIScrollView)",
			"UIKit.UICollectionViewController::DraggingEnded(UIKit.UIScrollView,System.Boolean)",
			"UIKit.UICollectionViewController::DraggingStarted(UIKit.UIScrollView)",
			"UIKit.UICollectionViewController::EncodeTo(Foundation.NSCoder)",
			"UIKit.UICollectionViewController::GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::GetContextMenuConfiguration(UIKit.UICollectionView,Foundation.NSIndexPath,CoreGraphics.CGPoint)",
			"UIKit.UICollectionViewController::GetIndexPath(UIKit.UICollectionView,System.String,System.IntPtr)",
			"UIKit.UICollectionViewController::GetIndexPathForPreferredFocusedView(UIKit.UICollectionView)",
			"UIKit.UICollectionViewController::GetIndexTitles(UIKit.UICollectionView)",
			"UIKit.UICollectionViewController::GetItemsCount(UIKit.UICollectionView,System.IntPtr)",
			"UIKit.UICollectionViewController::GetPreviewForDismissingContextMenu(UIKit.UICollectionView,UIKit.UIContextMenuConfiguration)",
			"UIKit.UICollectionViewController::GetPreviewForHighlightingContextMenu(UIKit.UICollectionView,UIKit.UIContextMenuConfiguration)",
			"UIKit.UICollectionViewController::GetSceneActivationConfigurationForItem(UIKit.UICollectionView,Foundation.NSIndexPath,CoreGraphics.CGPoint)",
			"UIKit.UICollectionViewController::GetSelectionFollowsFocusForItem(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::GetTargetContentOffset(UIKit.UICollectionView,CoreGraphics.CGPoint)",
			"UIKit.UICollectionViewController::GetTargetIndexPathForMove(UIKit.UICollectionView,Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::GetTargetIndexPathForMoveOfItemFromOriginalIndexPath(UIKit.UICollectionView,Foundation.NSIndexPath,Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::GetViewForSupplementaryElement(UIKit.UICollectionView,Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::ItemDeselected(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::ItemHighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::ItemSelected(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::ItemUnhighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::MoveItem(UIKit.UICollectionView,Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::NumberOfSections(UIKit.UICollectionView)",
			"UIKit.UICollectionViewController::PerformAction(UIKit.UICollectionView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)",
			"UIKit.UICollectionViewController::ScrollAnimationEnded(UIKit.UIScrollView)",
			"UIKit.UICollectionViewController::Scrolled(UIKit.UIScrollView)",
			"UIKit.UICollectionViewController::ScrolledToTop(UIKit.UIScrollView)",
			"UIKit.UICollectionViewController::set_CollectionView(UIKit.UICollectionView)",
			"UIKit.UICollectionViewController::ShouldBeginMultipleSelectionInteraction(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::ShouldDeselectItem(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::ShouldHighlightItem(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::ShouldScrollToTop(UIKit.UIScrollView)",
			"UIKit.UICollectionViewController::ShouldSelectItem(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::ShouldShowMenu(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::ShouldSpringLoadItem(UIKit.UICollectionView,Foundation.NSIndexPath,UIKit.IUISpringLoadedInteractionContext)",
			"UIKit.UICollectionViewController::ShouldUpdateFocus(UIKit.UICollectionView,UIKit.UICollectionViewFocusUpdateContext)",
			"UIKit.UICollectionViewController::SupplementaryViewDisplayingEnded(UIKit.UICollectionView,UIKit.UICollectionReusableView,Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::TransitionLayout(UIKit.UICollectionView,UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayout)",
			"UIKit.UICollectionViewController::ViewForZoomingInScrollView(UIKit.UIScrollView)",
			"UIKit.UICollectionViewController::WillDisplayCell(UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::WillDisplayContextMenu(UIKit.UICollectionView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)",
			"UIKit.UICollectionViewController::WillDisplaySupplementaryView(UIKit.UICollectionView,UIKit.UICollectionReusableView,System.String,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewController::WillEndContextMenuInteraction(UIKit.UICollectionView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)",
			"UIKit.UICollectionViewController::WillEndDragging(UIKit.UIScrollView,CoreGraphics.CGPoint,CoreGraphics.CGPoint&)",
			"UIKit.UICollectionViewController::WillPerformPreviewAction(UIKit.UICollectionView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)",
			"UIKit.UICollectionViewController::ZoomingEnded(UIKit.UIScrollView,UIKit.UIView,System.Runtime.InteropServices.NFloat)",
			"UIKit.UICollectionViewController::ZoomingStarted(UIKit.UIScrollView,UIKit.UIView)",
			"UIKit.UICollectionViewDataSource_Extensions::CanMoveItem(UIKit.IUICollectionViewDataSource,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDataSource_Extensions::GetIndexPath(UIKit.IUICollectionViewDataSource,UIKit.UICollectionView,System.String,System.IntPtr)",
			"UIKit.UICollectionViewDataSource_Extensions::GetIndexTitles(UIKit.IUICollectionViewDataSource,UIKit.UICollectionView)",
			"UIKit.UICollectionViewDataSource_Extensions::GetViewForSupplementaryElement(UIKit.IUICollectionViewDataSource,UIKit.UICollectionView,Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDataSource_Extensions::MoveItem(UIKit.IUICollectionViewDataSource,UIKit.UICollectionView,Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDataSource_Extensions::NumberOfSections(UIKit.IUICollectionViewDataSource,UIKit.UICollectionView)",
			"UIKit.UICollectionViewDataSourcePrefetching_Extensions::CancelPrefetching(UIKit.IUICollectionViewDataSourcePrefetching,UIKit.UICollectionView,Foundation.NSIndexPath[])",
			"UIKit.UICollectionViewDataSourcePrefetchingWrapper::PrefetchItems(UIKit.UICollectionView,Foundation.NSIndexPath[])",
			"UIKit.UICollectionViewDataSourceWrapper::GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDataSourceWrapper::GetItemsCount(UIKit.UICollectionView,System.IntPtr)",
			"UIKit.UICollectionViewDelegate_Extensions::CanEditItem(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::CanFocusItem(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::CanPerformAction(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)",
			"UIKit.UICollectionViewDelegate_Extensions::CellDisplayingEnded(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::DidBeginMultipleSelectionInteraction(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::DidEndMultipleSelectionInteraction(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView)",
			"UIKit.UICollectionViewDelegate_Extensions::DidUpdateFocus(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,UIKit.UICollectionViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)",
			"UIKit.UICollectionViewDelegate_Extensions::GetContextMenuConfiguration(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath,CoreGraphics.CGPoint)",
			"UIKit.UICollectionViewDelegate_Extensions::GetIndexPathForPreferredFocusedView(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView)",
			"UIKit.UICollectionViewDelegate_Extensions::GetPreviewForDismissingContextMenu(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,UIKit.UIContextMenuConfiguration)",
			"UIKit.UICollectionViewDelegate_Extensions::GetPreviewForHighlightingContextMenu(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,UIKit.UIContextMenuConfiguration)",
			"UIKit.UICollectionViewDelegate_Extensions::GetSceneActivationConfigurationForItem(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath,CoreGraphics.CGPoint)",
			"UIKit.UICollectionViewDelegate_Extensions::GetSelectionFollowsFocusForItem(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::GetTargetContentOffset(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,CoreGraphics.CGPoint)",
			"UIKit.UICollectionViewDelegate_Extensions::GetTargetIndexPathForMove(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::GetTargetIndexPathForMoveOfItemFromOriginalIndexPath(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath,Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::ItemDeselected(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::ItemHighlighted(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::ItemSelected(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::ItemUnhighlighted(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::PerformAction(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)",
			"UIKit.UICollectionViewDelegate_Extensions::ShouldBeginMultipleSelectionInteraction(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::ShouldDeselectItem(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::ShouldHighlightItem(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::ShouldSelectItem(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::ShouldShowMenu(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::ShouldSpringLoadItem(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath,UIKit.IUISpringLoadedInteractionContext)",
			"UIKit.UICollectionViewDelegate_Extensions::ShouldUpdateFocus(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,UIKit.UICollectionViewFocusUpdateContext)",
			"UIKit.UICollectionViewDelegate_Extensions::SupplementaryViewDisplayingEnded(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,UIKit.UICollectionReusableView,Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::TransitionLayout(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayout)",
			"UIKit.UICollectionViewDelegate_Extensions::WillDisplayCell(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::WillDisplayContextMenu(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)",
			"UIKit.UICollectionViewDelegate_Extensions::WillDisplaySupplementaryView(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,UIKit.UICollectionReusableView,System.String,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDelegate_Extensions::WillEndContextMenuInteraction(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)",
			"UIKit.UICollectionViewDelegate_Extensions::WillPerformPreviewAction(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)",
			"UIKit.UICollectionViewDelegateFlowLayout_Extensions::GetInsetForSection(UIKit.IUICollectionViewDelegateFlowLayout,UIKit.UICollectionView,UIKit.UICollectionViewLayout,System.IntPtr)",
			"UIKit.UICollectionViewDelegateFlowLayout_Extensions::GetMinimumInteritemSpacingForSection(UIKit.IUICollectionViewDelegateFlowLayout,UIKit.UICollectionView,UIKit.UICollectionViewLayout,System.IntPtr)",
			"UIKit.UICollectionViewDelegateFlowLayout_Extensions::GetMinimumLineSpacingForSection(UIKit.IUICollectionViewDelegateFlowLayout,UIKit.UICollectionView,UIKit.UICollectionViewLayout,System.IntPtr)",
			"UIKit.UICollectionViewDelegateFlowLayout_Extensions::GetReferenceSizeForFooter(UIKit.IUICollectionViewDelegateFlowLayout,UIKit.UICollectionView,UIKit.UICollectionViewLayout,System.IntPtr)",
			"UIKit.UICollectionViewDelegateFlowLayout_Extensions::GetReferenceSizeForHeader(UIKit.IUICollectionViewDelegateFlowLayout,UIKit.UICollectionView,UIKit.UICollectionViewLayout,System.IntPtr)",
			"UIKit.UICollectionViewDelegateFlowLayout_Extensions::GetSizeForItem(UIKit.IUICollectionViewDelegateFlowLayout,UIKit.UICollectionView,UIKit.UICollectionViewLayout,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDiffableDataSource`2::.ctor(UIKit.UICollectionView,UIKit.UICollectionViewDiffableDataSourceCellProvider)",
			"UIKit.UICollectionViewDiffableDataSource`2::ApplySnapshot(UIKit.NSDiffableDataSourceSectionSnapshot`1<ItemIdentifierType>,SectionIdentifierType,System.Boolean)",
			"UIKit.UICollectionViewDiffableDataSource`2::ApplySnapshot(UIKit.NSDiffableDataSourceSectionSnapshot`1<ItemIdentifierType>,SectionIdentifierType,System.Boolean,System.Action)",
			"UIKit.UICollectionViewDiffableDataSource`2::ApplySnapshot(UIKit.NSDiffableDataSourceSnapshot`2<SectionIdentifierType,ItemIdentifierType>,System.Boolean)",
			"UIKit.UICollectionViewDiffableDataSource`2::ApplySnapshot(UIKit.NSDiffableDataSourceSnapshot`2<SectionIdentifierType,ItemIdentifierType>,System.Boolean,System.Action)",
			"UIKit.UICollectionViewDiffableDataSource`2::ApplySnapshotUsingReloadData(UIKit.NSDiffableDataSourceSnapshot`2<SectionIdentifierType,ItemIdentifierType>)",
			"UIKit.UICollectionViewDiffableDataSource`2::ApplySnapshotUsingReloadData(UIKit.NSDiffableDataSourceSnapshot`2<SectionIdentifierType,ItemIdentifierType>,System.Action)",
			"UIKit.UICollectionViewDiffableDataSource`2::CanMoveItem(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDiffableDataSource`2::GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDiffableDataSource`2::GetIndex(SectionIdentifierType)",
			"UIKit.UICollectionViewDiffableDataSource`2::GetIndexPath(ItemIdentifierType)",
			"UIKit.UICollectionViewDiffableDataSource`2::GetIndexPath(UIKit.UICollectionView,System.String,System.IntPtr)",
			"UIKit.UICollectionViewDiffableDataSource`2::GetIndexTitles(UIKit.UICollectionView)",
			"UIKit.UICollectionViewDiffableDataSource`2::GetItemIdentifier(Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDiffableDataSource`2::GetItemsCount(UIKit.UICollectionView,System.IntPtr)",
			"UIKit.UICollectionViewDiffableDataSource`2::GetSnapshot(SectionIdentifierType)",
			"UIKit.UICollectionViewDiffableDataSource`2::GetViewForSupplementaryElement(UIKit.UICollectionView,Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDiffableDataSource`2::MoveItem(UIKit.UICollectionView,Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDiffableDataSource`2::NumberOfSections(UIKit.UICollectionView)",
			"UIKit.UICollectionViewDiffableDataSource`2::set_ReorderingHandlers(UIKit.UICollectionViewDiffableDataSourceReorderingHandlers`2<SectionIdentifierType,ItemIdentifierType>)",
			"UIKit.UICollectionViewDiffableDataSource`2::set_SectionSnapshotHandlers(UIKit.UICollectionViewDiffableDataSourceSectionSnapshotHandlers`1<ItemIdentifierType>)",
			"UIKit.UICollectionViewDiffableDataSourceReorderingHandlers`2::Copy(Foundation.NSZone)",
			"UIKit.UICollectionViewDiffableDataSourceSectionSnapshotHandlers`1::Copy(Foundation.NSZone)",
			"UIKit.UICollectionViewDragDelegate_Extensions::DragSessionAllowsMoveOperation(UIKit.IUICollectionViewDragDelegate,UIKit.UICollectionView,UIKit.IUIDragSession)",
			"UIKit.UICollectionViewDragDelegate_Extensions::DragSessionDidEnd(UIKit.IUICollectionViewDragDelegate,UIKit.UICollectionView,UIKit.IUIDragSession)",
			"UIKit.UICollectionViewDragDelegate_Extensions::DragSessionIsRestrictedToDraggingApplication(UIKit.IUICollectionViewDragDelegate,UIKit.UICollectionView,UIKit.IUIDragSession)",
			"UIKit.UICollectionViewDragDelegate_Extensions::DragSessionWillBegin(UIKit.IUICollectionViewDragDelegate,UIKit.UICollectionView,UIKit.IUIDragSession)",
			"UIKit.UICollectionViewDragDelegate_Extensions::GetDragPreviewParameters(UIKit.IUICollectionViewDragDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDragDelegate_Extensions::GetItemsForAddingToDragSession(UIKit.IUICollectionViewDragDelegate,UIKit.UICollectionView,UIKit.IUIDragSession,Foundation.NSIndexPath,CoreGraphics.CGPoint)",
			"UIKit.UICollectionViewDragDelegateWrapper::GetItemsForBeginningDragSession(UIKit.UICollectionView,UIKit.IUIDragSession,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDropCoordinatorWrapper::DropItemIntoItem(UIKit.UIDragItem,Foundation.NSIndexPath,CoreGraphics.CGRect)",
			"UIKit.UICollectionViewDropCoordinatorWrapper::DropItemToItem(UIKit.UIDragItem,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDropCoordinatorWrapper::DropItemToPlaceholder(UIKit.UIDragItem,UIKit.UICollectionViewDropPlaceholder)",
			"UIKit.UICollectionViewDropCoordinatorWrapper::DropItemToTarget(UIKit.UIDragItem,UIKit.UIDragPreviewTarget)",
			"UIKit.UICollectionViewDropDelegate_Extensions::CanHandleDropSession(UIKit.IUICollectionViewDropDelegate,UIKit.UICollectionView,UIKit.IUIDropSession)",
			"UIKit.UICollectionViewDropDelegate_Extensions::DropSessionDidEnd(UIKit.IUICollectionViewDropDelegate,UIKit.UICollectionView,UIKit.IUIDropSession)",
			"UIKit.UICollectionViewDropDelegate_Extensions::DropSessionDidEnter(UIKit.IUICollectionViewDropDelegate,UIKit.UICollectionView,UIKit.IUIDropSession)",
			"UIKit.UICollectionViewDropDelegate_Extensions::DropSessionDidExit(UIKit.IUICollectionViewDropDelegate,UIKit.UICollectionView,UIKit.IUIDropSession)",
			"UIKit.UICollectionViewDropDelegate_Extensions::DropSessionDidUpdate(UIKit.IUICollectionViewDropDelegate,UIKit.UICollectionView,UIKit.IUIDropSession,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDropDelegate_Extensions::GetDropPreviewParameters(UIKit.IUICollectionViewDropDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewDropDelegateWrapper::PerformDrop(UIKit.UICollectionView,UIKit.IUICollectionViewDropCoordinator)",
			"UIKit.UICollectionViewDropPlaceholder::.ctor(Foundation.NSIndexPath,System.String)",
			"UIKit.UICollectionViewFlowLayout::.ctor(Foundation.NSCoder)",
			"UIKit.UICollectionViewLayout::.ctor(Foundation.NSCoder)",
			"UIKit.UICollectionViewLayout::EncodeTo(Foundation.NSCoder)",
			"UIKit.UICollectionViewLayout::FinalLayoutAttributesForDisappearingDecorationElement(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayout::FinalLayoutAttributesForDisappearingItem(Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayout::FinalLayoutAttributesForDisappearingSupplementaryElement(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayout::GetIndexPathsToDeleteForDecorationViewOfKind(Foundation.NSString)",
			"UIKit.UICollectionViewLayout::GetIndexPathsToDeleteForSupplementaryView(Foundation.NSString)",
			"UIKit.UICollectionViewLayout::GetIndexPathsToInsertForDecorationView(Foundation.NSString)",
			"UIKit.UICollectionViewLayout::GetIndexPathsToInsertForSupplementaryView(Foundation.NSString)",
			"UIKit.UICollectionViewLayout::GetInvalidationContext(UIKit.UICollectionViewLayoutAttributes,UIKit.UICollectionViewLayoutAttributes)",
			"UIKit.UICollectionViewLayout::GetLayoutAttributesForInteractivelyMovingItem(Foundation.NSIndexPath,CoreGraphics.CGPoint)",
			"UIKit.UICollectionViewLayout::GetTargetIndexPathForInteractivelyMovingItem(Foundation.NSIndexPath,CoreGraphics.CGPoint)",
			"UIKit.UICollectionViewLayout::InitialLayoutAttributesForAppearingDecorationElement(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayout::InitialLayoutAttributesForAppearingItem(Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayout::InitialLayoutAttributesForAppearingSupplementaryElement(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayout::InvalidateLayout(UIKit.UICollectionViewLayoutInvalidationContext)",
			"UIKit.UICollectionViewLayout::LayoutAttributesForDecorationView(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayout::LayoutAttributesForItem(Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayout::LayoutAttributesForSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayout::PrepareForTransitionFromLayout(UIKit.UICollectionViewLayout)",
			"UIKit.UICollectionViewLayout::PrepareForTransitionToLayout(UIKit.UICollectionViewLayout)",
			"UIKit.UICollectionViewLayout::RegisterClassForDecorationView(System.IntPtr,Foundation.NSString)",
			"UIKit.UICollectionViewLayout::RegisterNibForDecorationView(UIKit.UINib,Foundation.NSString)",
			"UIKit.UICollectionViewLayout::ShouldInvalidateLayout(UIKit.UICollectionViewLayoutAttributes,UIKit.UICollectionViewLayoutAttributes)",
			"UIKit.UICollectionViewLayoutAttributes::Copy(Foundation.NSZone)",
			"UIKit.UICollectionViewLayoutAttributes::CreateForCell(Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayoutAttributes::CreateForDecorationView(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayoutAttributes::CreateForSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayoutAttributes::set_IndexPath(Foundation.NSIndexPath)",
			"UIKit.UICollectionViewLayoutInvalidationContext::InvalidateDecorationElements(Foundation.NSString,Foundation.NSIndexPath[])",
			"UIKit.UICollectionViewLayoutInvalidationContext::InvalidateSupplementaryElements(Foundation.NSString,Foundation.NSIndexPath[])",
			"UIKit.UICollectionViewListCell::.ctor(Foundation.NSCoder)",
			"UIKit.UICollectionViewPlaceholder::.ctor(Foundation.NSIndexPath,System.String)",
			"UIKit.UICollectionViewSourceWrapper::GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)",
			"UIKit.UICollectionViewSourceWrapper::GetItemsCount(UIKit.UICollectionView,System.IntPtr)",
			"UIKit.UICollectionViewSupplementaryRegistration::GetRegistration(UIKit.UINib,System.String,UIKit.UICollectionViewSupplementaryRegistrationConfigurationHandler)",
			"UIKit.UICollectionViewTransitionLayout::.ctor(Foundation.NSCoder)",
			"UIKit.UICollectionViewTransitionLayout::.ctor(UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayout)",
			"UIKit.UICollectionViewTransitionLayout::EncodeTo(Foundation.NSCoder)",
			"UIKit.UICollisionBehavior::AddBoundary(Foundation.NSObject,CoreGraphics.CGPoint,CoreGraphics.CGPoint)",
			"UIKit.UICollisionBehavior::AddBoundary(Foundation.NSObject,UIKit.UIBezierPath)",
			"UIKit.UICollisionBehavior::AddItem(UIKit.IUIDynamicItem)",
			"UIKit.UICollisionBehavior::GetBoundary(Foundation.NSObject)",
			"UIKit.UICollisionBehavior::RemoveBoundary(Foundation.NSObject)",
			"UIKit.UICollisionBehavior::RemoveItem(UIKit.IUIDynamicItem)",
			"UIKit.UICollisionBehaviorDelegate_Extensions::BeganBoundaryContact(UIKit.IUICollisionBehaviorDelegate,UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,Foundation.NSObject,CoreGraphics.CGPoint)",
			"UIKit.UICollisionBehaviorDelegate_Extensions::BeganContact(UIKit.IUICollisionBehaviorDelegate,UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,UIKit.IUIDynamicItem,CoreGraphics.CGPoint)",
			"UIKit.UICollisionBehaviorDelegate_Extensions::EndedBoundaryContact(UIKit.IUICollisionBehaviorDelegate,UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,Foundation.NSObject)",
			"UIKit.UICollisionBehaviorDelegate_Extensions::EndedContact(UIKit.IUICollisionBehaviorDelegate,UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,UIKit.IUIDynamicItem)",
			"UIKit.UIColor::.ctor(CoreGraphics.CGColor)",
			"UIKit.UIColor::.ctor(CoreImage.CIColor)",
			"UIKit.UIColor::.ctor(Foundation.NSCoder)",
			"UIKit.UIColor::.ctor(UIKit.UIImage)",
			"UIKit.UIColor::Copy(Foundation.NSZone)",
			"UIKit.UIColor::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIColor::FromCGColor(CoreGraphics.CGColor)",
			"UIKit.UIColor::FromCIColor(CoreImage.CIColor)",
			"UIKit.UIColor::FromName(System.String,Foundation.NSBundle,UIKit.UITraitCollection)",
			"UIKit.UIColor::FromPatternImage(UIKit.UIImage)",
			"UIKit.UIColor::GetObject(Foundation.NSData,System.String,Foundation.NSError&)",
			"UIKit.UIColor::GetResolvedColor(UIKit.UITraitCollection)",
			"UIKit.UIColorPickerViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UIColorPickerViewController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UIColorPickerViewController::set_SelectedColor(UIKit.UIColor)",
			"UIKit.UIColorPickerViewControllerDelegate_Extensions::DidFinish(UIKit.IUIColorPickerViewControllerDelegate,UIKit.UIColorPickerViewController)",
			"UIKit.UIColorPickerViewControllerDelegate_Extensions::DidSelectColor(UIKit.IUIColorPickerViewControllerDelegate,UIKit.UIColorPickerViewController)",
			"UIKit.UIColorPickerViewControllerDelegate_Extensions::DidSelectColor(UIKit.IUIColorPickerViewControllerDelegate,UIKit.UIColorPickerViewController,UIKit.UIColor,System.Boolean)",
			"UIKit.UIColorWell::.ctor(Foundation.NSCoder)",
			"UIKit.UIColorWell::set_SelectedColor(UIKit.UIColor)",
			"UIKit.UICommand::.ctor(Foundation.NSCoder)",
			"UIKit.UICommand::Create(System.String,UIKit.UIImage,ObjCRuntime.Selector,Foundation.NSObject)",
			"UIKit.UICommand::Create(System.String,UIKit.UIImage,ObjCRuntime.Selector,Foundation.NSObject,UIKit.UICommandAlternate[])",
			"UIKit.UICommand::set_Image(UIKit.UIImage)",
			"UIKit.UICommandAlternate::.ctor(Foundation.NSCoder)",
			"UIKit.UICommandAlternate::Copy(Foundation.NSZone)",
			"UIKit.UICommandAlternate::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIConfigurationStateWrapper::Copy(Foundation.NSZone)",
			"UIKit.UIConfigurationStateWrapper::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIConfigurationStateWrapper::set_TraitCollection(UIKit.UITraitCollection)",
			"UIKit.UIConfigurationStateWrapper::SetCustomState(Foundation.NSObject,System.String)",
			"UIKit.UIConfigurationStateWrapper::SetObject(Foundation.NSObject,System.String)",
			"UIKit.UIContentConfigurationWrapper::Copy(Foundation.NSZone)",
			"UIKit.UIContentConfigurationWrapper::GetUpdatedConfiguration(UIKit.IUIConfigurationState)",
			"UIKit.UIContentContainerWrapper::GetSizeForChildContentContainer(UIKit.IUIContentContainer,CoreGraphics.CGSize)",
			"UIKit.UIContentContainerWrapper::PreferredContentSizeDidChangeForChildContentContainer(UIKit.IUIContentContainer)",
			"UIKit.UIContentContainerWrapper::SystemLayoutFittingSizeDidChangeForChildContentContainer(UIKit.IUIContentContainer)",
			"UIKit.UIContentContainerWrapper::ViewWillTransitionToSize(CoreGraphics.CGSize,UIKit.IUIViewControllerTransitionCoordinator)",
			"UIKit.UIContentContainerWrapper::WillTransitionToTraitCollection(UIKit.UITraitCollection,UIKit.IUIViewControllerTransitionCoordinator)",
			"UIKit.UIContentSizeCategoryExtensions::Compare(UIKit.UIContentSizeCategory,UIKit.UIContentSizeCategory)",
			"UIKit.UIContentSizeCategoryExtensions::IsAccessibilityCategory(UIKit.UIContentSizeCategory)",
			"UIKit.UIContentViewWrapper::set_Configuration(UIKit.IUIContentConfiguration)",
			"UIKit.UIContextMenuConfiguration::Create(Foundation.INSCopying,UIKit.UIContextMenuContentPreviewProvider,UIKit.UIContextMenuActionProvider)",
			"UIKit.UIContextMenuInteraction::.ctor(UIKit.IUIContextMenuInteractionDelegate)",
			"UIKit.UIContextMenuInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UIContextMenuInteraction::GetLocation(UIKit.UIView)",
			"UIKit.UIContextMenuInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UIContextMenuInteractionDelegate_Extensions::GetPreviewForDismissingMenu(UIKit.IUIContextMenuInteractionDelegate,UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration)",
			"UIKit.UIContextMenuInteractionDelegate_Extensions::GetPreviewForHighlightingMenu(UIKit.IUIContextMenuInteractionDelegate,UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration)",
			"UIKit.UIContextMenuInteractionDelegate_Extensions::WillDisplayMenu(UIKit.IUIContextMenuInteractionDelegate,UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)",
			"UIKit.UIContextMenuInteractionDelegate_Extensions::WillEnd(UIKit.IUIContextMenuInteractionDelegate,UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)",
			"UIKit.UIContextMenuInteractionDelegate_Extensions::WillPerformPreviewAction(UIKit.IUIContextMenuInteractionDelegate,UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)",
			"UIKit.UIContextMenuInteractionDelegateWrapper::GetConfigurationForMenu(UIKit.UIContextMenuInteraction,CoreGraphics.CGPoint)",
			"UIKit.UIContextualAction::set_BackgroundColor(UIKit.UIColor)",
			"UIKit.UIContextualAction::set_Image(UIKit.UIImage)",
			"UIKit.UIControl::.ctor(CoreGraphics.CGRect,UIKit.UIAction)",
			"UIKit.UIControl::.ctor(Foundation.NSCoder)",
			"UIKit.UIControl::AddAction(UIKit.UIAction,UIKit.UIControlEvent)",
			"UIKit.UIControl::AddTarget(Foundation.NSObject,ObjCRuntime.Selector,UIKit.UIControlEvent)",
			"UIKit.UIControl::AddTarget(Foundation.NSObject,System.IntPtr,UIKit.UIControlEvent)",
			"UIKit.UIControl::BeginTracking(UIKit.UITouch,UIKit.UIEvent)",
			"UIKit.UIControl::CancelTracking(UIKit.UIEvent)",
			"UIKit.UIControl::ContinueTracking(UIKit.UITouch,UIKit.UIEvent)",
			"UIKit.UIControl::EndTracking(UIKit.UITouch,UIKit.UIEvent)",
			"UIKit.UIControl::GetActions(Foundation.NSObject,UIKit.UIControlEvent)",
			"UIKit.UIControl::GetConfigurationForMenu(UIKit.UIContextMenuInteraction,CoreGraphics.CGPoint)",
			"UIKit.UIControl::GetMenuAttachmentPoint(UIKit.UIContextMenuConfiguration)",
			"UIKit.UIControl::GetPreviewForDismissingMenu(UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration)",
			"UIKit.UIControl::GetPreviewForHighlightingMenu(UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration)",
			"UIKit.UIControl::RemoveAction(UIKit.UIAction,UIKit.UIControlEvent)",
			"UIKit.UIControl::RemoveTarget(Foundation.NSObject,ObjCRuntime.Selector,UIKit.UIControlEvent)",
			"UIKit.UIControl::RemoveTarget(Foundation.NSObject,System.IntPtr,UIKit.UIControlEvent)",
			"UIKit.UIControl::SendAction(ObjCRuntime.Selector,Foundation.NSObject,UIKit.UIEvent)",
			"UIKit.UIControl::SendAction(UIKit.UIAction)",
			"UIKit.UIControl::WillDisplayMenu(UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)",
			"UIKit.UIControl::WillEnd(UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)",
			"UIKit.UIControl::WillPerformPreviewAction(UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)",
			"UIKit.UICoordinateSpaceWrapper::ConvertPointFromCoordinateSpace(CoreGraphics.CGPoint,UIKit.IUICoordinateSpace)",
			"UIKit.UICoordinateSpaceWrapper::ConvertPointToCoordinateSpace(CoreGraphics.CGPoint,UIKit.IUICoordinateSpace)",
			"UIKit.UICoordinateSpaceWrapper::ConvertRectFromCoordinateSpace(CoreGraphics.CGRect,UIKit.IUICoordinateSpace)",
			"UIKit.UICoordinateSpaceWrapper::ConvertRectToCoordinateSpace(CoreGraphics.CGRect,UIKit.IUICoordinateSpace)",
			"UIKit.UICubicTimingParameters::.ctor(Foundation.NSCoder)",
			"UIKit.UICubicTimingParameters::Copy(Foundation.NSZone)",
			"UIKit.UICubicTimingParameters::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIDataSourceModelAssociationWrapper::GetIndexPath(System.String,UIKit.UIView)",
			"UIKit.UIDataSourceModelAssociationWrapper::GetModelIdentifier(Foundation.NSIndexPath,UIKit.UIView)",
			"UIKit.UIDataSourceTranslatingWrapper::GetDataSourceIndexPath(Foundation.NSIndexPath)",
			"UIKit.UIDataSourceTranslatingWrapper::GetPresentationIndexPath(Foundation.NSIndexPath)",
			"UIKit.UIDatePicker::.ctor(Foundation.NSCoder)",
			"UIKit.UIDatePicker::set_Calendar(Foundation.NSCalendar)",
			"UIKit.UIDatePicker::set_Date(Foundation.NSDate)",
			"UIKit.UIDatePicker::set_Locale(Foundation.NSLocale)",
			"UIKit.UIDatePicker::set_MaximumDate(Foundation.NSDate)",
			"UIKit.UIDatePicker::set_MinimumDate(Foundation.NSDate)",
			"UIKit.UIDatePicker::set_TimeZone(Foundation.NSTimeZone)",
			"UIKit.UIDatePicker::SetDate(Foundation.NSDate,System.Boolean)",
			"UIKit.UIDeferredMenuElement::.ctor(Foundation.NSCoder)",
			"UIKit.UIDocument::.ctor(Foundation.NSUrl)",
			"UIKit.UIDocument::AccommodatePresentedSubitemDeletion(Foundation.NSUrl,System.Action`1<Foundation.NSError>)",
			"UIKit.UIDocument::FinishedHandlingError(Foundation.NSError,System.Boolean)",
			"UIKit.UIDocument::GetFileAttributesToWrite(Foundation.NSUrl,UIKit.UIDocumentSaveOperation,Foundation.NSError&)",
			"UIKit.UIDocument::HandleError(Foundation.NSError,System.Boolean)",
			"UIKit.UIDocument::LoadFromContents(Foundation.NSObject,System.String,Foundation.NSError&)",
			"UIKit.UIDocument::PresentedItemChangedUbiquityAttributes(Foundation.NSSet`1<Foundation.NSString>)",
			"UIKit.UIDocument::PresentedItemGainedVersion(Foundation.NSFileVersion)",
			"UIKit.UIDocument::PresentedItemLostVersion(Foundation.NSFileVersion)",
			"UIKit.UIDocument::PresentedItemMoved(Foundation.NSUrl)",
			"UIKit.UIDocument::PresentedItemResolveConflictVersion(Foundation.NSFileVersion)",
			"UIKit.UIDocument::PresentedSubitemAppeared(Foundation.NSUrl)",
			"UIKit.UIDocument::PresentedSubitemChanged(Foundation.NSUrl)",
			"UIKit.UIDocument::PresentedSubitemGainedVersion(Foundation.NSUrl,Foundation.NSFileVersion)",
			"UIKit.UIDocument::PresentedSubitemLostVersion(Foundation.NSUrl,Foundation.NSFileVersion)",
			"UIKit.UIDocument::PresentedSubitemMoved(Foundation.NSUrl,Foundation.NSUrl)",
			"UIKit.UIDocument::PresentedSubitemResolvedConflictVersion(Foundation.NSUrl,Foundation.NSFileVersion)",
			"UIKit.UIDocument::Read(Foundation.NSUrl,Foundation.NSError&)",
			"UIKit.UIDocument::RestoreUserActivityState(Foundation.NSUserActivity)",
			"UIKit.UIDocument::RevertToContentsOfUrl(Foundation.NSUrl,UIKit.UIOperationHandler)",
			"UIKit.UIDocument::Save(Foundation.NSUrl,UIKit.UIDocumentSaveOperation,UIKit.UIOperationHandler)",
			"UIKit.UIDocument::set_FileModificationDate(Foundation.NSDate)",
			"UIKit.UIDocument::set_UndoManager(Foundation.NSUndoManager)",
			"UIKit.UIDocument::set_UserActivity(Foundation.NSUserActivity)",
			"UIKit.UIDocument::UpdateChangeCount(Foundation.NSObject,UIKit.UIDocumentSaveOperation)",
			"UIKit.UIDocument::UpdateUserActivityState(Foundation.NSUserActivity)",
			"UIKit.UIDocument::UserInteractionNoLongerPermittedForError(Foundation.NSError)",
			"UIKit.UIDocument::WriteContents(Foundation.NSObject,Foundation.NSDictionary,Foundation.NSUrl,UIKit.UIDocumentSaveOperation,Foundation.NSError&)",
			"UIKit.UIDocument::WriteContents(Foundation.NSObject,Foundation.NSUrl,UIKit.UIDocumentSaveOperation,Foundation.NSUrl,Foundation.NSError&)",
			"UIKit.UIDocumentBrowserAction::set_Image(UIKit.UIImage)",
			"UIKit.UIDocumentBrowserTransitionController::AnimateTransition(UIKit.IUIViewControllerContextTransitioning)",
			"UIKit.UIDocumentBrowserTransitionController::GetInterruptibleAnimator(UIKit.IUIViewControllerContextTransitioning)",
			"UIKit.UIDocumentBrowserTransitionController::set_LoadingProgress(Foundation.NSProgress)",
			"UIKit.UIDocumentBrowserTransitionController::TransitionDuration(UIKit.IUIViewControllerContextTransitioning)",
			"UIKit.UIDocumentBrowserViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UIDocumentBrowserViewController::_DeprecatedGetTransitionController(Foundation.NSUrl)",
			"UIKit.UIDocumentBrowserViewController::_NewGetTransitionController(Foundation.NSUrl)",
			"UIKit.UIDocumentBrowserViewController::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIDocumentBrowserViewController::ImportDocument(Foundation.NSUrl,Foundation.NSUrl,UIKit.UIDocumentBrowserImportMode,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"UIKit.UIDocumentBrowserViewController::RevealDocument(Foundation.NSUrl,System.Boolean,System.Action`2<Foundation.NSUrl,Foundation.NSError>)",
			"UIKit.UIDocumentBrowserViewControllerDelegate_Extensions::DidImportDocument(UIKit.IUIDocumentBrowserViewControllerDelegate,UIKit.UIDocumentBrowserViewController,Foundation.NSUrl,Foundation.NSUrl)",
			"UIKit.UIDocumentBrowserViewControllerDelegate_Extensions::DidPickDocumentsAtUrls(UIKit.IUIDocumentBrowserViewControllerDelegate,UIKit.UIDocumentBrowserViewController,Foundation.NSUrl[])",
			"UIKit.UIDocumentBrowserViewControllerDelegate_Extensions::DidPickDocumentUrls(UIKit.IUIDocumentBrowserViewControllerDelegate,UIKit.UIDocumentBrowserViewController,Foundation.NSUrl[])",
			"UIKit.UIDocumentBrowserViewControllerDelegate_Extensions::DidRequestDocumentCreation(UIKit.IUIDocumentBrowserViewControllerDelegate,UIKit.UIDocumentBrowserViewController,System.Action`2<Foundation.NSUrl,UIKit.UIDocumentBrowserImportMode>)",
			"UIKit.UIDocumentBrowserViewControllerDelegate_Extensions::FailedToImportDocument(UIKit.IUIDocumentBrowserViewControllerDelegate,UIKit.UIDocumentBrowserViewController,Foundation.NSUrl,Foundation.NSError)",
			"UIKit.UIDocumentBrowserViewControllerDelegate_Extensions::GetApplicationActivities(UIKit.IUIDocumentBrowserViewControllerDelegate,UIKit.UIDocumentBrowserViewController,Foundation.NSUrl[])",
			"UIKit.UIDocumentBrowserViewControllerDelegate_Extensions::WillPresent(UIKit.IUIDocumentBrowserViewControllerDelegate,UIKit.UIDocumentBrowserViewController,UIKit.UIActivityViewController)",
			"UIKit.UIDocumentInteractionController::FromUrl(Foundation.NSUrl)",
			"UIKit.UIDocumentInteractionController::PresentOpenInMenu(CoreGraphics.CGRect,UIKit.UIView,System.Boolean)",
			"UIKit.UIDocumentInteractionController::PresentOpenInMenu(UIKit.UIBarButtonItem,System.Boolean)",
			"UIKit.UIDocumentInteractionController::PresentOptionsMenu(CoreGraphics.CGRect,UIKit.UIView,System.Boolean)",
			"UIKit.UIDocumentInteractionController::PresentOptionsMenu(UIKit.UIBarButtonItem,System.Boolean)",
			"UIKit.UIDocumentInteractionController::set_Annotation(Foundation.NSObject)",
			"UIKit.UIDocumentInteractionController::set_Url(Foundation.NSUrl)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::CanPerformAction(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController,ObjCRuntime.Selector)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::DidDismissOpenInMenu(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::DidDismissOptionsMenu(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::DidEndPreview(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::DidEndSendingToApplication(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController,System.String)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::PerformAction(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController,ObjCRuntime.Selector)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::RectangleForPreview(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::ViewControllerForPreview(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::ViewForPreview(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::WillBeginPreview(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::WillBeginSendingToApplication(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController,System.String)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::WillPresentOpenInMenu(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController)",
			"UIKit.UIDocumentInteractionControllerDelegate_Extensions::WillPresentOptionsMenu(UIKit.IUIDocumentInteractionControllerDelegate,UIKit.UIDocumentInteractionController)",
			"UIKit.UIDocumentMenuDelegate_Extensions::WasCancelled(UIKit.IUIDocumentMenuDelegate,UIKit.UIDocumentMenuViewController)",
			"UIKit.UIDocumentMenuDelegateWrapper::DidPickDocumentPicker(UIKit.UIDocumentMenuViewController,UIKit.UIDocumentPickerViewController)",
			"UIKit.UIDocumentMenuViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UIDocumentMenuViewController::.ctor(Foundation.NSUrl,UIKit.UIDocumentPickerMode)",
			"UIKit.UIDocumentMenuViewController::AddOption(System.String,UIKit.UIImage,UIKit.UIDocumentMenuOrder,System.Action)",
			"UIKit.UIDocumentMenuViewController::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIDocumentPickerDelegate_Extensions::DidPickDocument(UIKit.IUIDocumentPickerDelegate,UIKit.UIDocumentPickerViewController,Foundation.NSUrl)",
			"UIKit.UIDocumentPickerDelegate_Extensions::DidPickDocument(UIKit.IUIDocumentPickerDelegate,UIKit.UIDocumentPickerViewController,Foundation.NSUrl[])",
			"UIKit.UIDocumentPickerDelegate_Extensions::WasCancelled(UIKit.IUIDocumentPickerDelegate,UIKit.UIDocumentPickerViewController)",
			"UIKit.UIDocumentPickerExtensionViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UIDocumentPickerExtensionViewController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UIDocumentPickerExtensionViewController::DismissGrantingAccess(Foundation.NSUrl)",
			"UIKit.UIDocumentPickerViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UIDocumentPickerViewController::.ctor(Foundation.NSUrl,UIKit.UIDocumentPickerMode)",
			"UIKit.UIDocumentPickerViewController::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIDocumentPickerViewController::set_DirectoryUrl(Foundation.NSUrl)",
			"UIKit.UIDragDropSessionExtensions/<>c__DisplayClass0_0`1::<LoadObjects>b__0(Foundation.INSItemProviderReading[])",
			"UIKit.UIDragDropSessionWrapper::LocationInView(UIKit.UIView)",
			"UIKit.UIDragInteraction::.ctor(UIKit.IUIDragInteractionDelegate)",
			"UIKit.UIDragInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UIDragInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UIDragInteractionDelegate_Extensions::GetItemsForAddingToSession(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.IUIDragSession,CoreGraphics.CGPoint)",
			"UIKit.UIDragInteractionDelegate_Extensions::GetPreviewForCancellingItem(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.UIDragItem,UIKit.UITargetedDragPreview)",
			"UIKit.UIDragInteractionDelegate_Extensions::GetPreviewForLiftingItem(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.UIDragItem,UIKit.IUIDragSession)",
			"UIKit.UIDragInteractionDelegate_Extensions::GetSessionForAddingItems(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.IUIDragSession[],CoreGraphics.CGPoint)",
			"UIKit.UIDragInteractionDelegate_Extensions::PrefersFullSizePreviews(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.IUIDragSession)",
			"UIKit.UIDragInteractionDelegate_Extensions::SessionAllowsMoveOperation(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.IUIDragSession)",
			"UIKit.UIDragInteractionDelegate_Extensions::SessionDidEnd(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.IUIDragSession,UIKit.UIDropOperation)",
			"UIKit.UIDragInteractionDelegate_Extensions::SessionDidMove(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.IUIDragSession)",
			"UIKit.UIDragInteractionDelegate_Extensions::SessionDidTransferItems(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.IUIDragSession)",
			"UIKit.UIDragInteractionDelegate_Extensions::SessionIsRestrictedToDraggingApplication(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.IUIDragSession)",
			"UIKit.UIDragInteractionDelegate_Extensions::SessionWillBegin(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.IUIDragSession)",
			"UIKit.UIDragInteractionDelegate_Extensions::SessionWillEnd(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.IUIDragSession,UIKit.UIDropOperation)",
			"UIKit.UIDragInteractionDelegate_Extensions::WillAddItems(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.IUIDragSession,UIKit.UIDragItem[],UIKit.UIDragInteraction)",
			"UIKit.UIDragInteractionDelegate_Extensions::WillAnimateCancel(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.UIDragItem,UIKit.IUIDragAnimating)",
			"UIKit.UIDragInteractionDelegate_Extensions::WillAnimateLift(UIKit.IUIDragInteractionDelegate,UIKit.UIDragInteraction,UIKit.IUIDragAnimating,UIKit.IUIDragSession)",
			"UIKit.UIDragInteractionDelegateWrapper::GetItemsForBeginningSession(UIKit.UIDragInteraction,UIKit.IUIDragSession)",
			"UIKit.UIDragItem::.ctor(Foundation.NSItemProvider)",
			"UIKit.UIDragItem::set_LocalObject(Foundation.NSObject)",
			"UIKit.UIDragPreview::.ctor(UIKit.UIView)",
			"UIKit.UIDragPreview::.ctor(UIKit.UIView,UIKit.UIDragPreviewParameters)",
			"UIKit.UIDragPreview::Copy(Foundation.NSZone)",
			"UIKit.UIDragPreview::GetPreview(Foundation.NSUrl)",
			"UIKit.UIDragPreview::GetPreview(Foundation.NSUrl,System.String)",
			"UIKit.UIDragPreviewParameters::Copy(Foundation.NSZone)",
			"UIKit.UIDragPreviewTarget::.ctor(UIKit.UIView,CoreGraphics.CGPoint)",
			"UIKit.UIDragPreviewTarget::.ctor(UIKit.UIView,CoreGraphics.CGPoint,CoreGraphics.CGAffineTransform)",
			"UIKit.UIDragPreviewTarget::Copy(Foundation.NSZone)",
			"UIKit.UIDragSessionWrapper::LocationInView(UIKit.UIView)",
			"UIKit.UIDragSessionWrapper::set_LocalContext(Foundation.NSObject)",
			"UIKit.UIDropInteraction::.ctor(UIKit.IUIDropInteractionDelegate)",
			"UIKit.UIDropInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UIDropInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UIDropInteractionDelegate_Extensions::CanHandleSession(UIKit.IUIDropInteractionDelegate,UIKit.UIDropInteraction,UIKit.IUIDropSession)",
			"UIKit.UIDropInteractionDelegate_Extensions::ConcludeDrop(UIKit.IUIDropInteractionDelegate,UIKit.UIDropInteraction,UIKit.IUIDropSession)",
			"UIKit.UIDropInteractionDelegate_Extensions::GetPreviewForDroppingItem(UIKit.IUIDropInteractionDelegate,UIKit.UIDropInteraction,UIKit.UIDragItem,UIKit.UITargetedDragPreview)",
			"UIKit.UIDropInteractionDelegate_Extensions::PerformDrop(UIKit.IUIDropInteractionDelegate,UIKit.UIDropInteraction,UIKit.IUIDropSession)",
			"UIKit.UIDropInteractionDelegate_Extensions::SessionDidEnd(UIKit.IUIDropInteractionDelegate,UIKit.UIDropInteraction,UIKit.IUIDropSession)",
			"UIKit.UIDropInteractionDelegate_Extensions::SessionDidEnter(UIKit.IUIDropInteractionDelegate,UIKit.UIDropInteraction,UIKit.IUIDropSession)",
			"UIKit.UIDropInteractionDelegate_Extensions::SessionDidExit(UIKit.IUIDropInteractionDelegate,UIKit.UIDropInteraction,UIKit.IUIDropSession)",
			"UIKit.UIDropInteractionDelegate_Extensions::SessionDidUpdate(UIKit.IUIDropInteractionDelegate,UIKit.UIDropInteraction,UIKit.IUIDropSession)",
			"UIKit.UIDropInteractionDelegate_Extensions::WillAnimateDrop(UIKit.IUIDropInteractionDelegate,UIKit.UIDropInteraction,UIKit.UIDragItem,UIKit.IUIDragAnimating)",
			"UIKit.UIDropProposal::Copy(Foundation.NSZone)",
			"UIKit.UIDropSessionWrapper::LocationInView(UIKit.UIView)",
			"UIKit.UIDynamicAnimator::.ctor(UIKit.UICollectionViewLayout)",
			"UIKit.UIDynamicAnimator::.ctor(UIKit.UIView)",
			"UIKit.UIDynamicAnimator::AddBehavior(UIKit.UIDynamicBehavior)",
			"UIKit.UIDynamicAnimator::GetLayoutAttributesForCell(Foundation.NSIndexPath)",
			"UIKit.UIDynamicAnimator::GetLayoutAttributesForDecorationView(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UIDynamicAnimator::GetLayoutAttributesForSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UIDynamicAnimator::RemoveBehavior(UIKit.UIDynamicBehavior)",
			"UIKit.UIDynamicAnimator::UpdateItemUsingCurrentState(UIKit.IUIDynamicItem)",
			"UIKit.UIDynamicAnimatorDelegate_Extensions::DidPause(UIKit.IUIDynamicAnimatorDelegate,UIKit.UIDynamicAnimator)",
			"UIKit.UIDynamicAnimatorDelegate_Extensions::WillResume(UIKit.IUIDynamicAnimatorDelegate,UIKit.UIDynamicAnimator)",
			"UIKit.UIDynamicBehavior::AddChildBehavior(UIKit.UIDynamicBehavior)",
			"UIKit.UIDynamicBehavior::RemoveChildBehavior(UIKit.UIDynamicBehavior)",
			"UIKit.UIDynamicBehavior::WillMoveToAnimator(UIKit.UIDynamicAnimator)",
			"UIKit.UIDynamicItem_Extensions::GetCollisionBoundingPath(UIKit.IUIDynamicItem)",
			"UIKit.UIDynamicItem_Extensions::GetCollisionBoundsType(UIKit.IUIDynamicItem)",
			"UIKit.UIDynamicItemBehavior::AddAngularVelocityForItem(System.Runtime.InteropServices.NFloat,UIKit.IUIDynamicItem)",
			"UIKit.UIDynamicItemBehavior::AddItem(UIKit.IUIDynamicItem)",
			"UIKit.UIDynamicItemBehavior::AddLinearVelocityForItem(CoreGraphics.CGPoint,UIKit.IUIDynamicItem)",
			"UIKit.UIDynamicItemBehavior::GetAngularVelocityForItem(UIKit.IUIDynamicItem)",
			"UIKit.UIDynamicItemBehavior::GetLinearVelocityForItem(UIKit.IUIDynamicItem)",
			"UIKit.UIDynamicItemBehavior::RemoveItem(UIKit.IUIDynamicItem)",
			"UIKit.UIEvent::GetCoalescedTouches(UIKit.UITouch)",
			"UIKit.UIEvent::GetPredictedTouches(UIKit.UITouch)",
			"UIKit.UIEvent::TouchesForGestureRecognizer(UIKit.UIGestureRecognizer)",
			"UIKit.UIEvent::TouchesForView(UIKit.UIView)",
			"UIKit.UIEvent::TouchesForWindow(UIKit.UIWindow)",
			"UIKit.UIEventAttribution::.ctor(System.Byte,Foundation.NSUrl,System.String,System.String)",
			"UIKit.UIEventAttribution::Copy(Foundation.NSZone)",
			"UIKit.UIEventAttributionView::.ctor(Foundation.NSCoder)",
			"UIKit.UIFieldBehavior::AddItem(UIKit.IUIDynamicItem)",
			"UIKit.UIFieldBehavior::RemoveItem(UIKit.IUIDynamicItem)",
			"UIKit.UIFieldBehavior::set_Region(UIKit.UIRegion)",
			"UIKit.UIFocusDebugger::CheckFocusability(UIKit.IUIFocusItem)",
			"UIKit.UIFocusDebugger::CheckFocusGroupTree(UIKit.IUIFocusEnvironment)",
			"UIKit.UIFocusDebugger::SimulateFocusUpdateRequest(UIKit.IUIFocusEnvironment)",
			"UIKit.UIFocusEffect::Copy(Foundation.NSZone)",
			"UIKit.UIFocusEnvironment_Extensions::GetFocusGroupIdentifier(UIKit.IUIFocusEnvironment)",
			"UIKit.UIFocusEnvironment_Extensions::GetPreferredFocusedView(UIKit.IUIFocusEnvironment)",
			"UIKit.UIFocusEnvironment_Extensions::GetSoundIdentifier(UIKit.IUIFocusEnvironment,UIKit.UIFocusUpdateContext)",
			"UIKit.UIFocusEnvironmentWrapper::DidUpdateFocus(UIKit.UIFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)",
			"UIKit.UIFocusEnvironmentWrapper::ShouldUpdateFocus(UIKit.UIFocusUpdateContext)",
			"UIKit.UIFocusGuide::.ctor(Foundation.NSCoder)",
			"UIKit.UIFocusHaloEffect::Create(UIKit.UIBezierPath)",
			"UIKit.UIFocusItem_Extensions::DidHintFocusMovement(UIKit.IUIFocusItem,UIKit.UIFocusMovementHint)",
			"UIKit.UIFocusItem_Extensions::GetFocusEffect(UIKit.IUIFocusItem)",
			"UIKit.UIFocusItem_Extensions::GetFocusGroupPriority(UIKit.IUIFocusItem)",
			"UIKit.UIFocusItem_Extensions::GetIsTransparentFocusItem(UIKit.IUIFocusItem)",
			"UIKit.UIFocusItemWrapper::DidUpdateFocus(UIKit.UIFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)",
			"UIKit.UIFocusItemWrapper::ShouldUpdateFocus(UIKit.UIFocusUpdateContext)",
			"UIKit.UIFocusMovementHint::Copy(Foundation.NSZone)",
			"UIKit.UIFocusSystem::Contains(UIKit.IUIFocusEnvironment,UIKit.IUIFocusEnvironment)",
			"UIKit.UIFocusSystem::Create(UIKit.IUIFocusEnvironment)",
			"UIKit.UIFocusSystem::RegisterUrl(Foundation.NSUrl,Foundation.NSString)",
			"UIKit.UIFocusSystem::RequestFocusUpdate(UIKit.IUIFocusEnvironment)",
			"UIKit.UIFont::.ctor(Foundation.NSCoder)",
			"UIKit.UIFont::_FromDescriptor(UIKit.UIFontDescriptor,System.Runtime.InteropServices.NFloat)",
			"UIKit.UIFont::_GetPreferredFontForTextStyle(Foundation.NSString)",
			"UIKit.UIFont::_GetPreferredFontForTextStyle(Foundation.NSString,UIKit.UITraitCollection)",
			"UIKit.UIFont::Copy(Foundation.NSZone)",
			"UIKit.UIFont::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIFont::op_Equality(UIKit.UIFont,UIKit.UIFont)",
			"UIKit.UIFontDescriptor::.ctor(Foundation.NSCoder)",
			"UIKit.UIFontDescriptor::.ctor(Foundation.NSDictionary)",
			"UIKit.UIFontDescriptor::Copy(Foundation.NSZone)",
			"UIKit.UIFontDescriptor::CreateWithAttributes(Foundation.NSDictionary)",
			"UIKit.UIFontDescriptor::CreateWithDesign(Foundation.NSString)",
			"UIKit.UIFontDescriptor::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIFontDescriptor::FromAttributes(Foundation.NSDictionary)",
			"UIKit.UIFontDescriptor::GetMatchingFontDescriptors(Foundation.NSSet)",
			"UIKit.UIFontDescriptor::GetObject(Foundation.NSString)",
			"UIKit.UIFontDescriptor::GetPreferredDescriptorForTextStyle(Foundation.NSString)",
			"UIKit.UIFontDescriptor::GetPreferredDescriptorForTextStyle(Foundation.NSString,UIKit.UITraitCollection)",
			"UIKit.UIFontFeature::ObjCRuntime.INativeObject.get_Handle()",
			"UIKit.UIFontMetrics::GetScaledFont(UIKit.UIFont)",
			"UIKit.UIFontMetrics::GetScaledFont(UIKit.UIFont,System.Runtime.InteropServices.NFloat)",
			"UIKit.UIFontMetrics::GetScaledFont(UIKit.UIFont,System.Runtime.InteropServices.NFloat,UIKit.UITraitCollection)",
			"UIKit.UIFontMetrics::GetScaledFont(UIKit.UIFont,UIKit.UITraitCollection)",
			"UIKit.UIFontMetrics::GetScaledValue(System.Runtime.InteropServices.NFloat,UIKit.UITraitCollection)",
			"UIKit.UIFontPickerViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UIFontPickerViewController::.ctor(UIKit.UIFontPickerViewControllerConfiguration)",
			"UIKit.UIFontPickerViewController::set_SelectedFontDescriptor(UIKit.UIFontDescriptor)",
			"UIKit.UIFontPickerViewControllerConfiguration::Copy(Foundation.NSZone)",
			"UIKit.UIFontPickerViewControllerConfiguration::set_FilteredLanguagesPredicate(Foundation.NSPredicate)",
			"UIKit.UIFontPickerViewControllerDelegate_Extensions::DidCancel(UIKit.IUIFontPickerViewControllerDelegate,UIKit.UIFontPickerViewController)",
			"UIKit.UIFontPickerViewControllerDelegate_Extensions::DidPickFont(UIKit.IUIFontPickerViewControllerDelegate,UIKit.UIFontPickerViewController)",
			"UIKit.UIGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIGestureRecognizer::.ctor(Foundation.NSObject,System.IntPtr)",
			"UIKit.UIGestureRecognizer::AddTarget(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIGestureRecognizer::AddTarget(Foundation.NSObject,System.IntPtr)",
			"UIKit.UIGestureRecognizer::CanBePreventedByGestureRecognizer(UIKit.UIGestureRecognizer)",
			"UIKit.UIGestureRecognizer::CanPreventGestureRecognizer(UIKit.UIGestureRecognizer)",
			"UIKit.UIGestureRecognizer::IgnorePress(UIKit.UIPress,UIKit.UIPressesEvent)",
			"UIKit.UIGestureRecognizer::IgnoreTouch(UIKit.UITouch,UIKit.UIEvent)",
			"UIKit.UIGestureRecognizer::LocationInView(UIKit.UIView)",
			"UIKit.UIGestureRecognizer::LocationOfTouch(System.IntPtr,UIKit.UIView)",
			"UIKit.UIGestureRecognizer::PressesBegan(Foundation.NSSet`1<UIKit.UIPress>,UIKit.UIPressesEvent)",
			"UIKit.UIGestureRecognizer::PressesCancelled(Foundation.NSSet`1<UIKit.UIPress>,UIKit.UIPressesEvent)",
			"UIKit.UIGestureRecognizer::PressesChanged(Foundation.NSSet`1<UIKit.UIPress>,UIKit.UIPressesEvent)",
			"UIKit.UIGestureRecognizer::PressesEnded(Foundation.NSSet`1<UIKit.UIPress>,UIKit.UIPressesEvent)",
			"UIKit.UIGestureRecognizer::RemoveTarget(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIGestureRecognizer::RemoveTarget(Foundation.NSObject,System.IntPtr)",
			"UIKit.UIGestureRecognizer::RequireGestureRecognizerToFail(UIKit.UIGestureRecognizer)",
			"UIKit.UIGestureRecognizer::ShouldBeRequiredToFailByGestureRecognizer(UIKit.UIGestureRecognizer)",
			"UIKit.UIGestureRecognizer::ShouldReceive(UIKit.UIEvent)",
			"UIKit.UIGestureRecognizer::ShouldRequireFailureOfGestureRecognizer(UIKit.UIGestureRecognizer)",
			"UIKit.UIGestureRecognizer::TouchesBegan(Foundation.NSSet,UIKit.UIEvent)",
			"UIKit.UIGestureRecognizer::TouchesCancelled(Foundation.NSSet,UIKit.UIEvent)",
			"UIKit.UIGestureRecognizer::TouchesEnded(Foundation.NSSet,UIKit.UIEvent)",
			"UIKit.UIGestureRecognizer::TouchesEstimatedPropertiesUpdated(Foundation.NSSet)",
			"UIKit.UIGestureRecognizer::TouchesMoved(Foundation.NSSet,UIKit.UIEvent)",
			"UIKit.UIGestureRecognizerDelegate_Extensions::ShouldBegin(UIKit.IUIGestureRecognizerDelegate,UIKit.UIGestureRecognizer)",
			"UIKit.UIGestureRecognizerDelegate_Extensions::ShouldBeRequiredToFailBy(UIKit.IUIGestureRecognizerDelegate,UIKit.UIGestureRecognizer,UIKit.UIGestureRecognizer)",
			"UIKit.UIGestureRecognizerDelegate_Extensions::ShouldReceiveEvent(UIKit.IUIGestureRecognizerDelegate,UIKit.UIGestureRecognizer,UIKit.UIEvent)",
			"UIKit.UIGestureRecognizerDelegate_Extensions::ShouldReceivePress(UIKit.IUIGestureRecognizerDelegate,UIKit.UIGestureRecognizer,UIKit.UIPress)",
			"UIKit.UIGestureRecognizerDelegate_Extensions::ShouldReceiveTouch(UIKit.IUIGestureRecognizerDelegate,UIKit.UIGestureRecognizer,UIKit.UITouch)",
			"UIKit.UIGestureRecognizerDelegate_Extensions::ShouldRecognizeSimultaneously(UIKit.IUIGestureRecognizerDelegate,UIKit.UIGestureRecognizer,UIKit.UIGestureRecognizer)",
			"UIKit.UIGestureRecognizerDelegate_Extensions::ShouldRequireFailureOf(UIKit.IUIGestureRecognizerDelegate,UIKit.UIGestureRecognizer,UIKit.UIGestureRecognizer)",
			"UIKit.UIGraphics::BeginPDFContext(Foundation.NSMutableData,CoreGraphics.CGRect,Foundation.NSDictionary)",
			"UIKit.UIGraphics::BeginPDFContext(System.String,CoreGraphics.CGRect,Foundation.NSDictionary)",
			"UIKit.UIGraphics::BeginPDFPage(CoreGraphics.CGRect,Foundation.NSDictionary)",
			"UIKit.UIGraphics::PushContext(CoreGraphics.CGContext)",
			"UIKit.UIGraphics::SetPDFContextURL(Foundation.NSUrl,CoreGraphics.CGRect)",
			"UIKit.UIGraphicsImageRenderer::.ctor(CoreGraphics.CGRect,UIKit.UIGraphicsImageRendererFormat)",
			"UIKit.UIGraphicsImageRenderer::.ctor(CoreGraphics.CGSize,UIKit.UIGraphicsImageRendererFormat)",
			"UIKit.UIGraphicsImageRendererFormat::GetFormat(UIKit.UITraitCollection)",
			"UIKit.UIGraphicsPdfRenderer::.ctor(CoreGraphics.CGRect,UIKit.UIGraphicsPdfRendererFormat)",
			"UIKit.UIGraphicsPdfRenderer::WritePdf(Foundation.NSUrl,System.Action`1<UIKit.UIGraphicsPdfRendererContext>,Foundation.NSError&)",
			"UIKit.UIGraphicsPdfRendererContext::BeginPage(CoreGraphics.CGRect,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"UIKit.UIGraphicsPdfRendererContext::SetUrl(Foundation.NSUrl,CoreGraphics.CGRect)",
			"UIKit.UIGraphicsPdfRendererFormat::set_DocumentInfo(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"UIKit.UIGraphicsRenderer::.ctor(CoreGraphics.CGRect,UIKit.UIGraphicsRendererFormat)",
			"UIKit.UIGraphicsRenderer::GetContext(UIKit.UIGraphicsRendererFormat)",
			"UIKit.UIGraphicsRenderer::PrepareContext(CoreGraphics.CGContext,UIKit.UIGraphicsRendererContext)",
			"UIKit.UIGraphicsRendererFormat::Copy(Foundation.NSZone)",
			"UIKit.UIGravityBehavior::AddItem(UIKit.IUIDynamicItem)",
			"UIKit.UIGravityBehavior::RemoveItem(UIKit.IUIDynamicItem)",
			"UIKit.UIGuidedAccessRestrictionDelegate_Extensions::GetDetailTextForGuidedAccessRestriction(UIKit.IUIGuidedAccessRestrictionDelegate,System.String)",
			"UIKit.UIHoverGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIImage::.ctor(CoreGraphics.CGImage)",
			"UIKit.UIImage::.ctor(CoreGraphics.CGImage,System.Runtime.InteropServices.NFloat,UIKit.UIImageOrientation)",
			"UIKit.UIImage::.ctor(CoreImage.CIImage)",
			"UIKit.UIImage::.ctor(CoreImage.CIImage,System.Runtime.InteropServices.NFloat,UIKit.UIImageOrientation)",
			"UIKit.UIImage::.ctor(Foundation.NSCoder)",
			"UIKit.UIImage::.ctor(Foundation.NSData)",
			"UIKit.UIImage::.ctor(Foundation.NSData,System.Runtime.InteropServices.NFloat)",
			"UIKit.UIImage::ApplyConfiguration(UIKit.UIImageConfiguration)",
			"UIKit.UIImage::ApplyConfiguration(UIKit.UIImageSymbolConfiguration)",
			"UIKit.UIImage::ApplyTintColor(UIKit.UIColor)",
			"UIKit.UIImage::ApplyTintColor(UIKit.UIColor,UIKit.UIImageRenderingMode)",
			"UIKit.UIImage::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIImage::FromBundle(System.String,Foundation.NSBundle,UIKit.UIImageConfiguration)",
			"UIKit.UIImage::FromBundle(System.String,Foundation.NSBundle,UIKit.UITraitCollection)",
			"UIKit.UIImage::FromImage(CoreGraphics.CGImage)",
			"UIKit.UIImage::FromImage(CoreGraphics.CGImage,System.Runtime.InteropServices.NFloat,UIKit.UIImageOrientation)",
			"UIKit.UIImage::FromImage(CoreImage.CIImage)",
			"UIKit.UIImage::FromImage(CoreImage.CIImage,System.Runtime.InteropServices.NFloat,UIKit.UIImageOrientation)",
			"UIKit.UIImage::GetObject(Foundation.NSData,System.String,Foundation.NSError&)",
			"UIKit.UIImage::GetSystemImage(System.String,UIKit.UIImageConfiguration)",
			"UIKit.UIImage::GetSystemImage(System.String,UIKit.UITraitCollection)",
			"UIKit.UIImage::LoadFromData(Foundation.NSData)",
			"UIKit.UIImage::LoadFromData(Foundation.NSData,System.Runtime.InteropServices.NFloat)",
			"UIKit.UIImage::set_AccessibilityAttributedHint(Foundation.NSAttributedString)",
			"UIKit.UIImage::set_AccessibilityAttributedLabel(Foundation.NSAttributedString)",
			"UIKit.UIImage::set_AccessibilityAttributedValue(Foundation.NSAttributedString)",
			"UIKit.UIImage::set_AccessibilityPath(UIKit.UIBezierPath)",
			"UIKit.UIImageAsset::.ctor(Foundation.NSCoder)",
			"UIKit.UIImageAsset::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIImageAsset::FromConfiguration(UIKit.UIImageConfiguration)",
			"UIKit.UIImageAsset::FromTraitCollection(UIKit.UITraitCollection)",
			"UIKit.UIImageAsset::RegisterImage(UIKit.UIImage,UIKit.UIImageConfiguration)",
			"UIKit.UIImageAsset::RegisterImage(UIKit.UIImage,UIKit.UITraitCollection)",
			"UIKit.UIImageAsset::UnregisterImage(UIKit.UIImageConfiguration)",
			"UIKit.UIImageAsset::UnregisterImageWithTraitCollection(UIKit.UITraitCollection)",
			"UIKit.UIImageConfiguration::.ctor(Foundation.NSCoder)",
			"UIKit.UIImageConfiguration::Copy(Foundation.NSZone)",
			"UIKit.UIImageConfiguration::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIImageConfiguration::GetConfiguration(UIKit.UIImageConfiguration)",
			"UIKit.UIImageConfiguration::GetConfiguration(UIKit.UITraitCollection)",
			"UIKit.UIImagePickerController::.ctor(Foundation.NSCoder)",
			"UIKit.UIImagePickerController::set_CameraOverlayView(UIKit.UIView)",
			"UIKit.UIImagePickerControllerDelegate_Extensions::Canceled(UIKit.IUIImagePickerControllerDelegate,UIKit.UIImagePickerController)",
			"UIKit.UIImagePickerControllerDelegate_Extensions::FinishedPickingMedia(UIKit.IUIImagePickerControllerDelegate,UIKit.UIImagePickerController,Foundation.NSDictionary)",
			"UIKit.UIImageSymbolConfiguration::.ctor(Foundation.NSCoder)",
			"UIKit.UIImageSymbolConfiguration::Create(UIKit.UIColor)",
			"UIKit.UIImageSymbolConfiguration::Create(UIKit.UIFont)",
			"UIKit.UIImageSymbolConfiguration::Create(UIKit.UIFont,UIKit.UIImageSymbolScale)",
			"UIKit.UIImageSymbolConfiguration::Create(UIKit.UIFontTextStyle)",
			"UIKit.UIImageSymbolConfiguration::Create(UIKit.UIFontTextStyle,UIKit.UIImageSymbolScale)",
			"UIKit.UIImageSymbolConfiguration::IsEqualTo(UIKit.UIImageSymbolConfiguration)",
			"UIKit.UIImageView::.ctor(Foundation.NSCoder)",
			"UIKit.UIImageView::.ctor(UIKit.UIImage)",
			"UIKit.UIImageView::.ctor(UIKit.UIImage,UIKit.UIImage)",
			"UIKit.UIImageView::set_HighlightedImage(UIKit.UIImage)",
			"UIKit.UIImageView::set_Image(UIKit.UIImage)",
			"UIKit.UIImageView::set_PreferredSymbolConfiguration(UIKit.UIImageSymbolConfiguration)",
			"UIKit.UIIndirectScribbleInteraction::.ctor(UIKit.IUIIndirectScribbleInteractionDelegate)",
			"UIKit.UIIndirectScribbleInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UIIndirectScribbleInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UIIndirectScribbleInteractionDelegate_Extensions::DidFinishWriting(UIKit.IUIIndirectScribbleInteractionDelegate,UIKit.UIIndirectScribbleInteraction,Foundation.NSObject)",
			"UIKit.UIIndirectScribbleInteractionDelegate_Extensions::ShouldDelayFocus(UIKit.IUIIndirectScribbleInteractionDelegate,UIKit.UIIndirectScribbleInteraction,Foundation.NSObject)",
			"UIKit.UIIndirectScribbleInteractionDelegate_Extensions::WillBeginWriting(UIKit.IUIIndirectScribbleInteractionDelegate,UIKit.UIIndirectScribbleInteraction,Foundation.NSObject)",
			"UIKit.UIIndirectScribbleInteractionDelegateWrapper::FocusElementIfNeeded(UIKit.UIIndirectScribbleInteraction,Foundation.NSObject,CoreGraphics.CGPoint,System.Action`1<UIKit.IUITextInput>)",
			"UIKit.UIIndirectScribbleInteractionDelegateWrapper::GetFrameForElement(UIKit.UIIndirectScribbleInteraction,Foundation.NSObject)",
			"UIKit.UIIndirectScribbleInteractionDelegateWrapper::IsElementFocused(UIKit.UIIndirectScribbleInteraction,Foundation.NSObject)",
			"UIKit.UIIndirectScribbleInteractionDelegateWrapper::RequestElements(UIKit.UIIndirectScribbleInteraction,CoreGraphics.CGRect,System.Action`1<Foundation.NSObject[]>)",
			"UIKit.UIInputView::.ctor(Foundation.NSCoder)",
			"UIKit.UIInputView::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIInputViewAudioFeedback_Extensions::GetEnableInputClicksWhenVisible(UIKit.IUIInputViewAudioFeedback)",
			"UIKit.UIInputViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UIInputViewController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UIInputViewController::HandleInputModeList(UIKit.UIView,UIKit.UIEvent)",
			"UIKit.UIInputViewController::SelectionDidChange(UIKit.IUITextInput)",
			"UIKit.UIInputViewController::SelectionWillChange(UIKit.IUITextInput)",
			"UIKit.UIInputViewController::set_InputView(UIKit.UIInputView)",
			"UIKit.UIInputViewController::TextDidChange(UIKit.IUITextInput)",
			"UIKit.UIInputViewController::TextWillChange(UIKit.IUITextInput)",
			"UIKit.UIInteractionWrapper::DidMoveToView(UIKit.UIView)",
			"UIKit.UIInteractionWrapper::WillMoveToView(UIKit.UIView)",
			"UIKit.UIInterpolatingMotionEffect::.ctor(Foundation.NSCoder)",
			"UIKit.UIInterpolatingMotionEffect::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIInterpolatingMotionEffect::set_MaximumRelativeValue(Foundation.NSObject)",
			"UIKit.UIInterpolatingMotionEffect::set_MinimumRelativeValue(Foundation.NSObject)",
			"UIKit.UIKey::.ctor(Foundation.NSCoder)",
			"UIKit.UIKey::Copy(Foundation.NSZone)",
			"UIKit.UIKey::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIKeyboardLayoutGuide::.ctor(Foundation.NSCoder)",
			"UIKit.UIKeyCommand::.ctor(Foundation.NSCoder)",
			"UIKit.UIKeyCommand::Create(Foundation.NSString,UIKit.UIKeyModifierFlags,ObjCRuntime.Selector)",
			"UIKit.UIKeyCommand::Create(Foundation.NSString,UIKit.UIKeyModifierFlags,ObjCRuntime.Selector,Foundation.NSString)",
			"UIKit.UIKeyCommand::Create(System.String,UIKit.UIImage,ObjCRuntime.Selector,System.String,UIKit.UIKeyModifierFlags,Foundation.NSObject)",
			"UIKit.UIKeyCommand::Create(System.String,UIKit.UIImage,ObjCRuntime.Selector,System.String,UIKit.UIKeyModifierFlags,Foundation.NSObject,UIKit.UICommandAlternate[])",
			"UIKit.UIKeyCommand::set_DiscoverabilityTitle(Foundation.NSString)",
			"UIKit.UIKeyCommand::set_Image(UIKit.UIImage)",
			"UIKit.UILabel/UILabelAppearance::set_Font(UIKit.UIFont)",
			"UIKit.UILabel/UILabelAppearance::set_HighlightedTextColor(UIKit.UIColor)",
			"UIKit.UILabel/UILabelAppearance::set_ShadowColor(UIKit.UIColor)",
			"UIKit.UILabel/UILabelAppearance::set_TextColor(UIKit.UIColor)",
			"UIKit.UILabel::.ctor(Foundation.NSCoder)",
			"UIKit.UILabel::set_AttributedText(Foundation.NSAttributedString)",
			"UIKit.UILabel::set_Font(UIKit.UIFont)",
			"UIKit.UILabel::set_HighlightedTextColor(UIKit.UIColor)",
			"UIKit.UILabel::set_ShadowColor(UIKit.UIColor)",
			"UIKit.UILabel::set_TextColor(UIKit.UIColor)",
			"UIKit.UILargeContentViewerInteraction::.ctor(UIKit.IUILargeContentViewerInteractionDelegate)",
			"UIKit.UILargeContentViewerInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UILargeContentViewerInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UILargeContentViewerInteractionDelegate_Extensions::DidEnd(UIKit.IUILargeContentViewerInteractionDelegate,UIKit.UILargeContentViewerInteraction,UIKit.IUILargeContentViewerItem,CoreGraphics.CGPoint)",
			"UIKit.UILargeContentViewerInteractionDelegate_Extensions::GetItem(UIKit.IUILargeContentViewerInteractionDelegate,UIKit.UILargeContentViewerInteraction,CoreGraphics.CGPoint)",
			"UIKit.UILargeContentViewerInteractionDelegate_Extensions::GetViewController(UIKit.IUILargeContentViewerInteractionDelegate,UIKit.UILargeContentViewerInteraction)",
			"UIKit.UILayoutGuide::.ctor(Foundation.NSCoder)",
			"UIKit.UILayoutGuide::EncodeTo(Foundation.NSCoder)",
			"UIKit.UILayoutGuide_UIConstraintBasedLayoutDebugging::GetConstraintsAffectingLayout(UIKit.UILayoutGuide,UIKit.UILayoutConstraintAxis)",
			"UIKit.UILayoutGuide_UIConstraintBasedLayoutDebugging::GetHasAmbiguousLayout(UIKit.UILayoutGuide)",
			"UIKit.UILexicon::Copy(Foundation.NSZone)",
			"UIKit.UILexiconEntry::Copy(Foundation.NSZone)",
			"UIKit.UIListContentConfiguration::.ctor(Foundation.NSCoder)",
			"UIKit.UIListContentConfiguration::Copy(Foundation.NSZone)",
			"UIKit.UIListContentConfiguration::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIListContentConfiguration::GetUpdatedConfiguration(UIKit.IUIConfigurationState)",
			"UIKit.UIListContentConfiguration::set_AttributedText(Foundation.NSAttributedString)",
			"UIKit.UIListContentConfiguration::set_Image(UIKit.UIImage)",
			"UIKit.UIListContentConfiguration::set_SecondaryAttributedText(Foundation.NSAttributedString)",
			"UIKit.UIListContentImageProperties::.ctor(Foundation.NSCoder)",
			"UIKit.UIListContentImageProperties::Copy(Foundation.NSZone)",
			"UIKit.UIListContentImageProperties::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIListContentImageProperties::GetResolvedTintColor(UIKit.UIColor)",
			"UIKit.UIListContentImageProperties::set_PreferredSymbolConfiguration(UIKit.UIImageSymbolConfiguration)",
			"UIKit.UIListContentImageProperties::set_TintColor(UIKit.UIColor)",
			"UIKit.UIListContentTextProperties::.ctor(Foundation.NSCoder)",
			"UIKit.UIListContentTextProperties::Copy(Foundation.NSZone)",
			"UIKit.UIListContentTextProperties::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIListContentTextProperties::set_Color(UIKit.UIColor)",
			"UIKit.UIListContentTextProperties::set_Font(UIKit.UIFont)",
			"UIKit.UIListContentView::.ctor(Foundation.NSCoder)",
			"UIKit.UIListContentView::.ctor(UIKit.UIListContentConfiguration)",
			"UIKit.UIListContentView::set_Configuration(UIKit.IUIContentConfiguration)",
			"UIKit.UIListContentView::set_ListContentConfiguration(UIKit.UIListContentConfiguration)",
			"UIKit.UIListSeparatorConfiguration::.ctor(Foundation.NSCoder)",
			"UIKit.UIListSeparatorConfiguration::Copy(Foundation.NSZone)",
			"UIKit.UIListSeparatorConfiguration::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIListSeparatorConfiguration::set_Color(UIKit.UIColor)",
			"UIKit.UIListSeparatorConfiguration::set_MultipleSelectionColor(UIKit.UIColor)",
			"UIKit.UIListSeparatorConfiguration::set_VisualEffect(UIKit.UIVisualEffect)",
			"UIKit.UILocalizedIndexedCollation::GetSectionForObject(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UILocalNotification::.ctor(Foundation.NSCoder)",
			"UIKit.UILocalNotification::Copy(Foundation.NSZone)",
			"UIKit.UILocalNotification::EncodeTo(Foundation.NSCoder)",
			"UIKit.UILocalNotification::set_FireDate(Foundation.NSDate)",
			"UIKit.UILocalNotification::set_Region(CoreLocation.CLRegion)",
			"UIKit.UILocalNotification::set_RepeatCalendar(Foundation.NSCalendar)",
			"UIKit.UILocalNotification::set_TimeZone(Foundation.NSTimeZone)",
			"UIKit.UILocalNotification::set_UserInfo(Foundation.NSDictionary)",
			"UIKit.UILongPressGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIManagedDocument::.ctor(Foundation.NSUrl)",
			"UIKit.UIManagedDocument::AdditionalContent(Foundation.NSUrl,Foundation.NSError&)",
			"UIKit.UIManagedDocument::ConfigurePersistentStoreCoordinator(Foundation.NSUrl,System.String,System.String,Foundation.NSDictionary,Foundation.NSError)",
			"UIKit.UIManagedDocument::ReadAdditionalContent(Foundation.NSUrl,Foundation.NSError&)",
			"UIKit.UIManagedDocument::set_PersistentStoreOptions(Foundation.NSDictionary)",
			"UIKit.UIManagedDocument::WriteAdditionalContent(Foundation.NSObject,Foundation.NSUrl,Foundation.NSUrl,Foundation.NSError&)",
			"UIKit.UIMenu::.ctor(Foundation.NSCoder)",
			"UIKit.UIMenu::Create(System.String,UIKit.UIImage,UIKit.UIMenuIdentifier,UIKit.UIMenuOptions,UIKit.UIMenuElement[])",
			"UIKit.UIMenuBuilderWrapper::GetCommand(ObjCRuntime.Selector,Foundation.NSObject)",
			"UIKit.UIMenuBuilderWrapper::InsertChildMenuAtEnd(UIKit.UIMenu,System.String)",
			"UIKit.UIMenuBuilderWrapper::InsertChildMenuAtStart(UIKit.UIMenu,System.String)",
			"UIKit.UIMenuBuilderWrapper::InsertSiblingMenuAfter(UIKit.UIMenu,System.String)",
			"UIKit.UIMenuBuilderWrapper::InsertSiblingMenuBefore(UIKit.UIMenu,System.String)",
			"UIKit.UIMenuBuilderWrapper::ReplaceMenu(System.String,UIKit.UIMenu)",
			"UIKit.UIMenuController::HideMenu(UIKit.UIView)",
			"UIKit.UIMenuController::SetTargetRect(CoreGraphics.CGRect,UIKit.UIView)",
			"UIKit.UIMenuController::ShowMenu(UIKit.UIView,CoreGraphics.CGRect)",
			"UIKit.UIMenuElement::.ctor(Foundation.NSCoder)",
			"UIKit.UIMenuElement::Copy(Foundation.NSZone)",
			"UIKit.UIMenuElement::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIMenuItem::set_Action(ObjCRuntime.Selector)",
			"UIKit.UIMotionEffect::.ctor(Foundation.NSCoder)",
			"UIKit.UIMotionEffect::Copy(Foundation.NSZone)",
			"UIKit.UIMotionEffect::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIMotionEffectGroup::.ctor(Foundation.NSCoder)",
			"UIKit.UIMutableApplicationShortcutItem::.ctor(System.String,System.String,System.String,UIKit.UIApplicationShortcutIcon,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"UIKit.UIMutableApplicationShortcutItem::set_Icon(UIKit.UIApplicationShortcutIcon)",
			"UIKit.UIMutableApplicationShortcutItem::set_TargetContentIdentifier(Foundation.NSObject)",
			"UIKit.UIMutableApplicationShortcutItem::set_UserInfo(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"UIKit.UIMutableUserNotificationAction::.ctor(Foundation.NSCoder)",
			"UIKit.UIMutableUserNotificationAction::set_Parameters(Foundation.NSDictionary)",
			"UIKit.UIMutableUserNotificationCategory::.ctor(Foundation.NSCoder)",
			"UIKit.UINavigationBar/UINavigationBarAppearance::set__LargeTitleTextAttributes(Foundation.NSDictionary)",
			"UIKit.UINavigationBar/UINavigationBarAppearance::set__TitleTextAttributes(Foundation.NSDictionary)",
			"UIKit.UINavigationBar/UINavigationBarAppearance::set_BackIndicatorImage(UIKit.UIImage)",
			"UIKit.UINavigationBar/UINavigationBarAppearance::set_BackIndicatorTransitionMaskImage(UIKit.UIImage)",
			"UIKit.UINavigationBar/UINavigationBarAppearance::set_BarTintColor(UIKit.UIColor)",
			"UIKit.UINavigationBar/UINavigationBarAppearance::set_CompactAppearance(UIKit.UINavigationBarAppearance)",
			"UIKit.UINavigationBar/UINavigationBarAppearance::set_CompactScrollEdgeAppearance(UIKit.UINavigationBarAppearance)",
			"UIKit.UINavigationBar/UINavigationBarAppearance::set_ScrollEdgeAppearance(UIKit.UINavigationBarAppearance)",
			"UIKit.UINavigationBar/UINavigationBarAppearance::set_ShadowImage(UIKit.UIImage)",
			"UIKit.UINavigationBar/UINavigationBarAppearance::set_StandardAppearance(UIKit.UINavigationBarAppearance)",
			"UIKit.UINavigationBar/UINavigationBarAppearance::SetBackgroundImage(UIKit.UIImage,UIKit.UIBarMetrics)",
			"UIKit.UINavigationBar/UINavigationBarAppearance::SetBackgroundImage(UIKit.UIImage,UIKit.UIBarPosition,UIKit.UIBarMetrics)",
			"UIKit.UINavigationBar::.ctor(Foundation.NSCoder)",
			"UIKit.UINavigationBar::EncodeTo(Foundation.NSCoder)",
			"UIKit.UINavigationBar::PushNavigationItem(UIKit.UINavigationItem,System.Boolean)",
			"UIKit.UINavigationBar::set__LargeTitleTextAttributes(Foundation.NSDictionary)",
			"UIKit.UINavigationBar::set__TitleTextAttributes(Foundation.NSDictionary)",
			"UIKit.UINavigationBar::set_BackIndicatorImage(UIKit.UIImage)",
			"UIKit.UINavigationBar::set_BackIndicatorTransitionMaskImage(UIKit.UIImage)",
			"UIKit.UINavigationBar::set_BarTintColor(UIKit.UIColor)",
			"UIKit.UINavigationBar::set_CompactAppearance(UIKit.UINavigationBarAppearance)",
			"UIKit.UINavigationBar::set_CompactScrollEdgeAppearance(UIKit.UINavigationBarAppearance)",
			"UIKit.UINavigationBar::set_ScrollEdgeAppearance(UIKit.UINavigationBarAppearance)",
			"UIKit.UINavigationBar::set_ShadowImage(UIKit.UIImage)",
			"UIKit.UINavigationBar::set_StandardAppearance(UIKit.UINavigationBarAppearance)",
			"UIKit.UINavigationBar::SetBackgroundImage(UIKit.UIImage,UIKit.UIBarMetrics)",
			"UIKit.UINavigationBar::SetBackgroundImage(UIKit.UIImage,UIKit.UIBarPosition,UIKit.UIBarMetrics)",
			"UIKit.UINavigationBarAppearance::.ctor(Foundation.NSCoder)",
			"UIKit.UINavigationBarAppearance::.ctor(UIKit.UIBarAppearance)",
			"UIKit.UINavigationBarAppearance::set_BackButtonAppearance(UIKit.UIBarButtonItemAppearance)",
			"UIKit.UINavigationBarAppearance::set_ButtonAppearance(UIKit.UIBarButtonItemAppearance)",
			"UIKit.UINavigationBarAppearance::set_DoneButtonAppearance(UIKit.UIBarButtonItemAppearance)",
			"UIKit.UINavigationBarAppearance::set_WeakLargeTitleTextAttributes(Foundation.NSDictionary)",
			"UIKit.UINavigationBarAppearance::set_WeakTitleTextAttributes(Foundation.NSDictionary)",
			"UIKit.UINavigationBarAppearance::SetBackIndicatorImage(UIKit.UIImage,UIKit.UIImage)",
			"UIKit.UINavigationBarDelegate_Extensions::DidPopItem(UIKit.IUINavigationBarDelegate,UIKit.UINavigationBar,UIKit.UINavigationItem)",
			"UIKit.UINavigationBarDelegate_Extensions::DidPushItem(UIKit.IUINavigationBarDelegate,UIKit.UINavigationBar,UIKit.UINavigationItem)",
			"UIKit.UINavigationBarDelegate_Extensions::ShouldPopItem(UIKit.IUINavigationBarDelegate,UIKit.UINavigationBar,UIKit.UINavigationItem)",
			"UIKit.UINavigationBarDelegate_Extensions::ShouldPushItem(UIKit.IUINavigationBarDelegate,UIKit.UINavigationBar,UIKit.UINavigationItem)",
			"UIKit.UINavigationController::.ctor(Foundation.NSCoder)",
			"UIKit.UINavigationController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UINavigationController::.ctor(UIKit.UIViewController)",
			"UIKit.UINavigationController::PopToViewController(UIKit.UIViewController,System.Boolean)",
			"UIKit.UINavigationController::PushViewController(UIKit.UIViewController,System.Boolean)",
			"UIKit.UINavigationController::ShowViewController(UIKit.UIViewController,Foundation.NSObject)",
			"UIKit.UINavigationControllerDelegate_Extensions::DidShowViewController(UIKit.IUINavigationControllerDelegate,UIKit.UINavigationController,UIKit.UIViewController,System.Boolean)",
			"UIKit.UINavigationControllerDelegate_Extensions::GetAnimationControllerForOperation(UIKit.IUINavigationControllerDelegate,UIKit.UINavigationController,UIKit.UINavigationControllerOperation,UIKit.UIViewController,UIKit.UIViewController)",
			"UIKit.UINavigationControllerDelegate_Extensions::GetInteractionControllerForAnimationController(UIKit.IUINavigationControllerDelegate,UIKit.UINavigationController,UIKit.IUIViewControllerAnimatedTransitioning)",
			"UIKit.UINavigationControllerDelegate_Extensions::GetPreferredInterfaceOrientation(UIKit.IUINavigationControllerDelegate,UIKit.UINavigationController)",
			"UIKit.UINavigationControllerDelegate_Extensions::SupportedInterfaceOrientations(UIKit.IUINavigationControllerDelegate,UIKit.UINavigationController)",
			"UIKit.UINavigationControllerDelegate_Extensions::WillShowViewController(UIKit.IUINavigationControllerDelegate,UIKit.UINavigationController,UIKit.UIViewController,System.Boolean)",
			"UIKit.UINavigationItem::.ctor(Foundation.NSCoder)",
			"UIKit.UINavigationItem::EncodeTo(Foundation.NSCoder)",
			"UIKit.UINavigationItem::set_BackBarButtonItem(UIKit.UIBarButtonItem)",
			"UIKit.UINavigationItem::set_CompactAppearance(UIKit.UINavigationBarAppearance)",
			"UIKit.UINavigationItem::set_CompactScrollEdgeAppearance(UIKit.UINavigationBarAppearance)",
			"UIKit.UINavigationItem::set_LeftBarButtonItem(UIKit.UIBarButtonItem)",
			"UIKit.UINavigationItem::set_RightBarButtonItem(UIKit.UIBarButtonItem)",
			"UIKit.UINavigationItem::set_ScrollEdgeAppearance(UIKit.UINavigationBarAppearance)",
			"UIKit.UINavigationItem::set_SearchController(UIKit.UISearchController)",
			"UIKit.UINavigationItem::set_StandardAppearance(UIKit.UINavigationBarAppearance)",
			"UIKit.UINavigationItem::set_TitleView(UIKit.UIView)",
			"UIKit.UINavigationItem::SetLeftBarButtonItem(UIKit.UIBarButtonItem,System.Boolean)",
			"UIKit.UINavigationItem::SetRightBarButtonItem(UIKit.UIBarButtonItem,System.Boolean)",
			"UIKit.UINib::FromData(Foundation.NSData,Foundation.NSBundle)",
			"UIKit.UINib::FromName(System.String,Foundation.NSBundle)",
			"UIKit.UINib::Instantiate(Foundation.NSObject,Foundation.NSDictionary)",
			"UIKit.UIPageControl/UIPageControlAppearance::set_CurrentPageIndicatorTintColor(UIKit.UIColor)",
			"UIKit.UIPageControl/UIPageControlAppearance::set_PageIndicatorTintColor(UIKit.UIColor)",
			"UIKit.UIPageControl::.ctor(Foundation.NSCoder)",
			"UIKit.UIPageControl::set_CurrentPageIndicatorTintColor(UIKit.UIColor)",
			"UIKit.UIPageControl::set_PageIndicatorTintColor(UIKit.UIColor)",
			"UIKit.UIPageControl::set_PreferredIndicatorImage(UIKit.UIImage)",
			"UIKit.UIPageControl::SetIndicatorImage(UIKit.UIImage,System.IntPtr)",
			"UIKit.UIPageViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UIPageViewController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UIPageViewController::.ctor(UIKit.UIPageViewControllerTransitionStyle,UIKit.UIPageViewControllerNavigationOrientation,Foundation.NSDictionary)",
			"UIKit.UIPageViewController::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIPageViewControllerDataSource_Extensions::GetPresentationCount(UIKit.IUIPageViewControllerDataSource,UIKit.UIPageViewController)",
			"UIKit.UIPageViewControllerDataSource_Extensions::GetPresentationIndex(UIKit.IUIPageViewControllerDataSource,UIKit.UIPageViewController)",
			"UIKit.UIPageViewControllerDataSourceWrapper::GetNextViewController(UIKit.UIPageViewController,UIKit.UIViewController)",
			"UIKit.UIPageViewControllerDataSourceWrapper::GetPreviousViewController(UIKit.UIPageViewController,UIKit.UIViewController)",
			"UIKit.UIPageViewControllerDelegate_Extensions::DidFinishAnimating(UIKit.IUIPageViewControllerDelegate,UIKit.UIPageViewController,System.Boolean,UIKit.UIViewController[],System.Boolean)",
			"UIKit.UIPageViewControllerDelegate_Extensions::GetPreferredInterfaceOrientationForPresentation(UIKit.IUIPageViewControllerDelegate,UIKit.UIPageViewController)",
			"UIKit.UIPageViewControllerDelegate_Extensions::GetSpineLocation(UIKit.IUIPageViewControllerDelegate,UIKit.UIPageViewController,UIKit.UIInterfaceOrientation)",
			"UIKit.UIPageViewControllerDelegate_Extensions::SupportedInterfaceOrientations(UIKit.IUIPageViewControllerDelegate,UIKit.UIPageViewController)",
			"UIKit.UIPageViewControllerDelegate_Extensions::WillTransition(UIKit.IUIPageViewControllerDelegate,UIKit.UIPageViewController,UIKit.UIViewController[])",
			"UIKit.UIPanGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIPanGestureRecognizer::SetTranslation(CoreGraphics.CGPoint,UIKit.UIView)",
			"UIKit.UIPanGestureRecognizer::TranslationInView(UIKit.UIView)",
			"UIKit.UIPanGestureRecognizer::VelocityInView(UIKit.UIView)",
			"UIKit.UIPasteboard::Contains(System.String[],Foundation.NSIndexSet)",
			"UIKit.UIPasteboard::DetectPatterns(Foundation.NSSet`1<Foundation.NSString>,Foundation.NSIndexSet,System.Action`2<Foundation.NSSet`1<Foundation.NSString>[],Foundation.NSError>)",
			"UIKit.UIPasteboard::DetectPatterns(Foundation.NSSet`1<Foundation.NSString>,System.Action`2<Foundation.NSSet`1<Foundation.NSString>,Foundation.NSError>)",
			"UIKit.UIPasteboard::DetectValues(Foundation.NSSet`1<Foundation.NSString>,Foundation.NSIndexSet,System.Action`2<Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>[],Foundation.NSError>)",
			"UIKit.UIPasteboard::DetectValues(Foundation.NSSet`1<Foundation.NSString>,System.Action`2<Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError>)",
			"UIKit.UIPasteboard::GetDataForPasteboardType(System.String,Foundation.NSIndexSet)",
			"UIKit.UIPasteboard::GetPasteBoardTypes(Foundation.NSIndexSet)",
			"UIKit.UIPasteboard::GetValuesForPasteboardType(System.String,Foundation.NSIndexSet)",
			"UIKit.UIPasteboard::set_Color(UIKit.UIColor)",
			"UIKit.UIPasteboard::set_Image(UIKit.UIImage)",
			"UIKit.UIPasteboard::set_Url(Foundation.NSUrl)",
			"UIKit.UIPasteboard::SetData(Foundation.NSData,System.String)",
			"UIKit.UIPasteboard::SetItemProviders(Foundation.NSItemProvider[],System.Boolean,Foundation.NSDate)",
			"UIKit.UIPasteboard::SetItems(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>[],Foundation.NSDictionary)",
			"UIKit.UIPasteboard::SetObjects(Foundation.INSItemProviderWriting[],System.Boolean,Foundation.NSDate)",
			"UIKit.UIPasteboard::SetValue(Foundation.NSObject,System.String)",
			"UIKit.UIPasteConfiguration::.ctor(Foundation.NSCoder)",
			"UIKit.UIPasteConfiguration::Copy(Foundation.NSZone)",
			"UIKit.UIPasteConfiguration::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIPasteConfigurationSupporting_Extensions::CanPaste(UIKit.IUIPasteConfigurationSupporting,Foundation.NSItemProvider[])",
			"UIKit.UIPasteConfigurationSupporting_Extensions::Paste(UIKit.IUIPasteConfigurationSupporting,Foundation.NSItemProvider[])",
			"UIKit.UIPasteConfigurationSupportingWrapper::set_PasteConfiguration(UIKit.UIPasteConfiguration)",
			"UIKit.UIPencilInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UIPencilInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UIPencilInteractionDelegate_Extensions::DidTap(UIKit.IUIPencilInteractionDelegate,UIKit.UIPencilInteraction)",
			"UIKit.UIPercentDrivenInteractiveTransition::set_TimingCurve(UIKit.IUITimingCurveProvider)",
			"UIKit.UIPercentDrivenInteractiveTransition::StartInteractiveTransition(UIKit.IUIViewControllerContextTransitioning)",
			"UIKit.UIPickerView::.ctor(Foundation.NSCoder)",
			"UIKit.UIPickerView::GetCell(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UIPickerView::RowsInSection(UIKit.UITableView,System.IntPtr)",
			"UIKit.UIPickerViewAccessibilityDelegate_Extensions::GetAccessibilityAttributedHint(UIKit.IUIPickerViewAccessibilityDelegate,UIKit.UIPickerView,System.IntPtr)",
			"UIKit.UIPickerViewAccessibilityDelegate_Extensions::GetAccessibilityAttributedLabel(UIKit.IUIPickerViewAccessibilityDelegate,UIKit.UIPickerView,System.IntPtr)",
			"UIKit.UIPickerViewAccessibilityDelegate_Extensions::GetAccessibilityAttributedUserInputLabels(UIKit.IUIPickerViewAccessibilityDelegate,UIKit.UIPickerView,System.IntPtr)",
			"UIKit.UIPickerViewAccessibilityDelegate_Extensions::GetAccessibilityHint(UIKit.IUIPickerViewAccessibilityDelegate,UIKit.UIPickerView,System.IntPtr)",
			"UIKit.UIPickerViewAccessibilityDelegate_Extensions::GetAccessibilityLabel(UIKit.IUIPickerViewAccessibilityDelegate,UIKit.UIPickerView,System.IntPtr)",
			"UIKit.UIPickerViewAccessibilityDelegate_Extensions::GetAccessibilityUserInputLabels(UIKit.IUIPickerViewAccessibilityDelegate,UIKit.UIPickerView,System.IntPtr)",
			"UIKit.UIPickerViewDataSourceWrapper::GetComponentCount(UIKit.UIPickerView)",
			"UIKit.UIPickerViewDataSourceWrapper::GetRowsInComponent(UIKit.UIPickerView,System.IntPtr)",
			"UIKit.UIPickerViewDelegate_Extensions::GetAttributedTitle(UIKit.IUIPickerViewDelegate,UIKit.UIPickerView,System.IntPtr,System.IntPtr)",
			"UIKit.UIPickerViewDelegate_Extensions::GetComponentWidth(UIKit.IUIPickerViewDelegate,UIKit.UIPickerView,System.IntPtr)",
			"UIKit.UIPickerViewDelegate_Extensions::GetRowHeight(UIKit.IUIPickerViewDelegate,UIKit.UIPickerView,System.IntPtr)",
			"UIKit.UIPickerViewDelegate_Extensions::GetTitle(UIKit.IUIPickerViewDelegate,UIKit.UIPickerView,System.IntPtr,System.IntPtr)",
			"UIKit.UIPickerViewDelegate_Extensions::GetView(UIKit.IUIPickerViewDelegate,UIKit.UIPickerView,System.IntPtr,System.IntPtr,UIKit.UIView)",
			"UIKit.UIPickerViewDelegate_Extensions::Selected(UIKit.IUIPickerViewDelegate,UIKit.UIPickerView,System.IntPtr,System.IntPtr)",
			"UIKit.UIPickerViewModelWrapper::GetComponentCount(UIKit.UIPickerView)",
			"UIKit.UIPickerViewModelWrapper::GetRowsInComponent(UIKit.UIPickerView,System.IntPtr)",
			"UIKit.UIPinchGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIPointerAccessory::Copy(Foundation.NSZone)",
			"UIKit.UIPointerAccessory::Create(UIKit.UIPointerShape,UIKit.UIPointerAccessoryPosition)",
			"UIKit.UIPointerEffect::Copy(Foundation.NSZone)",
			"UIKit.UIPointerEffect::Create(UIKit.UITargetedPreview)",
			"UIKit.UIPointerInteraction::.ctor(UIKit.IUIPointerInteractionDelegate)",
			"UIKit.UIPointerInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UIPointerInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UIPointerInteractionDelegate_Extensions::GetRegionForRequest(UIKit.IUIPointerInteractionDelegate,UIKit.UIPointerInteraction,UIKit.UIPointerRegionRequest,UIKit.UIPointerRegion)",
			"UIKit.UIPointerInteractionDelegate_Extensions::GetStyleForRegion(UIKit.IUIPointerInteractionDelegate,UIKit.UIPointerInteraction,UIKit.UIPointerRegion)",
			"UIKit.UIPointerInteractionDelegate_Extensions::WillEnterRegion(UIKit.IUIPointerInteractionDelegate,UIKit.UIPointerInteraction,UIKit.UIPointerRegion,UIKit.IUIPointerInteractionAnimating)",
			"UIKit.UIPointerInteractionDelegate_Extensions::WillExitRegion(UIKit.IUIPointerInteractionDelegate,UIKit.UIPointerInteraction,UIKit.UIPointerRegion,UIKit.IUIPointerInteractionAnimating)",
			"UIKit.UIPointerRegion::Copy(Foundation.NSZone)",
			"UIKit.UIPointerRegion::Create(CoreGraphics.CGRect,Foundation.NSObject)",
			"UIKit.UIPointerShape::Copy(Foundation.NSZone)",
			"UIKit.UIPointerShape::Create(UIKit.UIBezierPath)",
			"UIKit.UIPointerStyle::Copy(Foundation.NSZone)",
			"UIKit.UIPointerStyle::Create(UIKit.UIPointerEffect,UIKit.UIPointerShape)",
			"UIKit.UIPointerStyle::Create(UIKit.UIPointerShape,UIKit.UIAxis)",
			"UIKit.UIPopoverBackgroundView::.ctor(Foundation.NSCoder)",
			"UIKit.UIPopoverController::.ctor(UIKit.UIViewController)",
			"UIKit.UIPopoverController::PresentFromBarButtonItem(UIKit.UIBarButtonItem,UIKit.UIPopoverArrowDirection,System.Boolean)",
			"UIKit.UIPopoverController::PresentFromRect(CoreGraphics.CGRect,UIKit.UIView,UIKit.UIPopoverArrowDirection,System.Boolean)",
			"UIKit.UIPopoverController::set_BackgroundColor(UIKit.UIColor)",
			"UIKit.UIPopoverController::set_ContentViewController(UIKit.UIViewController)",
			"UIKit.UIPopoverController::SetContentViewController(UIKit.UIViewController,System.Boolean)",
			"UIKit.UIPopoverControllerDelegate_Extensions::DidDismiss(UIKit.IUIPopoverControllerDelegate,UIKit.UIPopoverController)",
			"UIKit.UIPopoverControllerDelegate_Extensions::ShouldDismiss(UIKit.IUIPopoverControllerDelegate,UIKit.UIPopoverController)",
			"UIKit.UIPopoverControllerDelegate_Extensions::WillReposition(UIKit.IUIPopoverControllerDelegate,UIKit.UIPopoverController,CoreGraphics.CGRect&,UIKit.UIView&)",
			"UIKit.UIPopoverPresentationController::.ctor(UIKit.UIViewController,UIKit.UIViewController)",
			"UIKit.UIPopoverPresentationController::set_BackgroundColor(UIKit.UIColor)",
			"UIKit.UIPopoverPresentationController::set_BarButtonItem(UIKit.UIBarButtonItem)",
			"UIKit.UIPopoverPresentationController::set_SourceView(UIKit.UIView)",
			"UIKit.UIPopoverPresentationControllerDelegate_Extensions::DidDismissPopover(UIKit.IUIPopoverPresentationControllerDelegate,UIKit.UIPopoverPresentationController)",
			"UIKit.UIPopoverPresentationControllerDelegate_Extensions::PrepareForPopoverPresentation(UIKit.IUIPopoverPresentationControllerDelegate,UIKit.UIPopoverPresentationController)",
			"UIKit.UIPopoverPresentationControllerDelegate_Extensions::ShouldDismissPopover(UIKit.IUIPopoverPresentationControllerDelegate,UIKit.UIPopoverPresentationController)",
			"UIKit.UIPopoverPresentationControllerDelegate_Extensions::WillRepositionPopover(UIKit.IUIPopoverPresentationControllerDelegate,UIKit.UIPopoverPresentationController,CoreGraphics.CGRect&,UIKit.UIView&)",
			"UIKit.UIPresentationController::.ctor(UIKit.UIViewController,UIKit.UIViewController)",
			"UIKit.UIPresentationController::AdaptivePresentationStyle(UIKit.UITraitCollection)",
			"UIKit.UIPresentationController::DidUpdateFocus(UIKit.UIFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)",
			"UIKit.UIPresentationController::GetSizeForChildContentContainer(UIKit.IUIContentContainer,CoreGraphics.CGSize)",
			"UIKit.UIPresentationController::GetSoundIdentifier(UIKit.UIFocusUpdateContext)",
			"UIKit.UIPresentationController::PreferredContentSizeDidChangeForChildContentContainer(UIKit.IUIContentContainer)",
			"UIKit.UIPresentationController::set_OverrideTraitCollection(UIKit.UITraitCollection)",
			"UIKit.UIPresentationController::ShouldUpdateFocus(UIKit.UIFocusUpdateContext)",
			"UIKit.UIPresentationController::SystemLayoutFittingSizeDidChangeForChildContentContainer(UIKit.IUIContentContainer)",
			"UIKit.UIPresentationController::TraitCollectionDidChange(UIKit.UITraitCollection)",
			"UIKit.UIPresentationController::ViewWillTransitionToSize(CoreGraphics.CGSize,UIKit.IUIViewControllerTransitionCoordinator)",
			"UIKit.UIPresentationController::WillTransitionToTraitCollection(UIKit.UITraitCollection,UIKit.IUIViewControllerTransitionCoordinator)",
			"UIKit.UIPressesEvent::GetPresses(UIKit.UIGestureRecognizer)",
			"UIKit.UIPreviewAction::Copy(Foundation.NSZone)",
			"UIKit.UIPreviewActionGroup::Copy(Foundation.NSZone)",
			"UIKit.UIPreviewInteraction::.ctor(UIKit.UIView)",
			"UIKit.UIPreviewInteraction::GetLocationInCoordinateSpace(UIKit.IUICoordinateSpace)",
			"UIKit.UIPreviewInteractionDelegate_Extensions::DidUpdateCommit(UIKit.IUIPreviewInteractionDelegate,UIKit.UIPreviewInteraction,System.Runtime.InteropServices.NFloat,System.Boolean)",
			"UIKit.UIPreviewInteractionDelegate_Extensions::ShouldBegin(UIKit.IUIPreviewInteractionDelegate,UIKit.UIPreviewInteraction)",
			"UIKit.UIPreviewInteractionDelegateWrapper::DidCancel(UIKit.UIPreviewInteraction)",
			"UIKit.UIPreviewInteractionDelegateWrapper::DidUpdatePreviewTransition(UIKit.UIPreviewInteraction,System.Runtime.InteropServices.NFloat,System.Boolean)",
			"UIKit.UIPreviewParameters::Copy(Foundation.NSZone)",
			"UIKit.UIPreviewParameters::set_BackgroundColor(UIKit.UIColor)",
			"UIKit.UIPreviewParameters::set_ShadowPath(UIKit.UIBezierPath)",
			"UIKit.UIPreviewParameters::set_VisiblePath(UIKit.UIBezierPath)",
			"UIKit.UIPreviewTarget::.ctor(UIKit.UIView,CoreGraphics.CGPoint)",
			"UIKit.UIPreviewTarget::.ctor(UIKit.UIView,CoreGraphics.CGPoint,CoreGraphics.CGAffineTransform)",
			"UIKit.UIPreviewTarget::Copy(Foundation.NSZone)",
			"UIKit.UIPrinter::FromUrl(Foundation.NSUrl)",
			"UIKit.UIPrinterDestination::.ctor(Foundation.NSCoder)",
			"UIKit.UIPrinterDestination::.ctor(Foundation.NSUrl)",
			"UIKit.UIPrinterDestination::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIPrinterDestination::set_TxtRecord(Foundation.NSData)",
			"UIKit.UIPrinterDestination::set_Url(Foundation.NSUrl)",
			"UIKit.UIPrinterPickerController::FromPrinter(UIKit.UIPrinter)",
			"UIKit.UIPrinterPickerController::PresentFromBarButtonItem(UIKit.UIBarButtonItem,System.Boolean,UIKit.UIPrinterPickerCompletionHandler)",
			"UIKit.UIPrinterPickerController::PresentFromRect(CoreGraphics.CGRect,UIKit.UIView,System.Boolean,UIKit.UIPrinterPickerCompletionHandler)",
			"UIKit.UIPrinterPickerControllerDelegate_Extensions::DidDismiss(UIKit.IUIPrinterPickerControllerDelegate,UIKit.UIPrinterPickerController)",
			"UIKit.UIPrinterPickerControllerDelegate_Extensions::DidPresent(UIKit.IUIPrinterPickerControllerDelegate,UIKit.UIPrinterPickerController)",
			"UIKit.UIPrinterPickerControllerDelegate_Extensions::DidSelectPrinter(UIKit.IUIPrinterPickerControllerDelegate,UIKit.UIPrinterPickerController)",
			"UIKit.UIPrinterPickerControllerDelegate_Extensions::GetParentViewController(UIKit.IUIPrinterPickerControllerDelegate,UIKit.UIPrinterPickerController)",
			"UIKit.UIPrinterPickerControllerDelegate_Extensions::ShouldShowPrinter(UIKit.IUIPrinterPickerControllerDelegate,UIKit.UIPrinterPickerController,UIKit.UIPrinter)",
			"UIKit.UIPrinterPickerControllerDelegate_Extensions::WillDismiss(UIKit.IUIPrinterPickerControllerDelegate,UIKit.UIPrinterPickerController)",
			"UIKit.UIPrinterPickerControllerDelegate_Extensions::WillPresent(UIKit.IUIPrinterPickerControllerDelegate,UIKit.UIPrinterPickerController)",
			"UIKit.UIPrintFormatter::Copy(Foundation.NSZone)",
			"UIKit.UIPrintInfo::.ctor(Foundation.NSCoder)",
			"UIKit.UIPrintInfo::Copy(Foundation.NSZone)",
			"UIKit.UIPrintInfo::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIPrintInfo::FromDictionary(Foundation.NSDictionary)",
			"UIKit.UIPrintInteractionController::CanPrint(Foundation.NSData)",
			"UIKit.UIPrintInteractionController::CanPrint(Foundation.NSUrl)",
			"UIKit.UIPrintInteractionController::PresentFromBarButtonItem(UIKit.UIBarButtonItem,System.Boolean,UIKit.UIPrintInteractionCompletionHandler)",
			"UIKit.UIPrintInteractionController::PresentFromRectInView(CoreGraphics.CGRect,UIKit.UIView,System.Boolean,UIKit.UIPrintInteractionCompletionHandler)",
			"UIKit.UIPrintInteractionController::PrintToPrinter(UIKit.UIPrinter,UIKit.UIPrintInteractionCompletionHandler)",
			"UIKit.UIPrintInteractionController::set_PrintFormatter(UIKit.UIPrintFormatter)",
			"UIKit.UIPrintInteractionController::set_PrintInfo(UIKit.UIPrintInfo)",
			"UIKit.UIPrintInteractionController::set_PrintingItem(Foundation.NSObject)",
			"UIKit.UIPrintInteractionController::set_PrintPageRenderer(UIKit.UIPrintPageRenderer)",
			"UIKit.UIPrintInteractionControllerDelegate_Extensions::ChooseCutterBehavior(UIKit.IUIPrintInteractionControllerDelegate,UIKit.UIPrintInteractionController,Foundation.NSNumber[])",
			"UIKit.UIPrintInteractionControllerDelegate_Extensions::ChoosePaper(UIKit.IUIPrintInteractionControllerDelegate,UIKit.UIPrintInteractionController,UIKit.UIPrintPaper[])",
			"UIKit.UIPrintInteractionControllerDelegate_Extensions::CutLengthForPaper(UIKit.IUIPrintInteractionControllerDelegate,UIKit.UIPrintInteractionController,UIKit.UIPrintPaper)",
			"UIKit.UIPrintInteractionControllerDelegate_Extensions::DidDismissPrinterOptions(UIKit.IUIPrintInteractionControllerDelegate,UIKit.UIPrintInteractionController)",
			"UIKit.UIPrintInteractionControllerDelegate_Extensions::DidFinishJob(UIKit.IUIPrintInteractionControllerDelegate,UIKit.UIPrintInteractionController)",
			"UIKit.UIPrintInteractionControllerDelegate_Extensions::DidPresentPrinterOptions(UIKit.IUIPrintInteractionControllerDelegate,UIKit.UIPrintInteractionController)",
			"UIKit.UIPrintInteractionControllerDelegate_Extensions::GetViewController(UIKit.IUIPrintInteractionControllerDelegate,UIKit.UIPrintInteractionController)",
			"UIKit.UIPrintInteractionControllerDelegate_Extensions::WillDismissPrinterOptions(UIKit.IUIPrintInteractionControllerDelegate,UIKit.UIPrintInteractionController)",
			"UIKit.UIPrintInteractionControllerDelegate_Extensions::WillPresentPrinterOptions(UIKit.IUIPrintInteractionControllerDelegate,UIKit.UIPrintInteractionController)",
			"UIKit.UIPrintInteractionControllerDelegate_Extensions::WillStartJob(UIKit.IUIPrintInteractionControllerDelegate,UIKit.UIPrintInteractionController)",
			"UIKit.UIPrintPageRenderer::AddPrintFormatter(UIKit.UIPrintFormatter,System.IntPtr)",
			"UIKit.UIPrintPageRenderer::DrawPrintFormatterForPage(UIKit.UIPrintFormatter,System.IntPtr)",
			"UIKit.UIPrintServiceExtension::GetPrinterDestinations(UIKit.UIPrintInfo)",
			"UIKit.UIProgressView/UIProgressViewAppearance::set_ProgressImage(UIKit.UIImage)",
			"UIKit.UIProgressView/UIProgressViewAppearance::set_ProgressTintColor(UIKit.UIColor)",
			"UIKit.UIProgressView/UIProgressViewAppearance::set_TrackImage(UIKit.UIImage)",
			"UIKit.UIProgressView/UIProgressViewAppearance::set_TrackTintColor(UIKit.UIColor)",
			"UIKit.UIProgressView::.ctor(Foundation.NSCoder)",
			"UIKit.UIProgressView::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIProgressView::set_ObservedProgress(Foundation.NSProgress)",
			"UIKit.UIProgressView::set_ProgressImage(UIKit.UIImage)",
			"UIKit.UIProgressView::set_ProgressTintColor(UIKit.UIColor)",
			"UIKit.UIProgressView::set_TrackImage(UIKit.UIImage)",
			"UIKit.UIProgressView::set_TrackTintColor(UIKit.UIColor)",
			"UIKit.UIPushBehavior::AddItem(UIKit.IUIDynamicItem)",
			"UIKit.UIPushBehavior::GetTargetOffsetFromCenter(UIKit.IUIDynamicItem)",
			"UIKit.UIPushBehavior::RemoveItem(UIKit.IUIDynamicItem)",
			"UIKit.UIPushBehavior::SetTargetOffset(UIKit.UIOffset,UIKit.IUIDynamicItem)",
			"UIKit.UIReferenceLibraryViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UIReferenceLibraryViewController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UIReferenceLibraryViewController::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIRefreshControl/UIRefreshControlAppearance::set_AttributedTitle(Foundation.NSAttributedString)",
			"UIKit.UIRefreshControl::.ctor(Foundation.NSCoder)",
			"UIKit.UIRefreshControl::set_AttributedTitle(Foundation.NSAttributedString)",
			"UIKit.UIRegion::.ctor(Foundation.NSCoder)",
			"UIKit.UIRegion::Copy(Foundation.NSZone)",
			"UIKit.UIRegion::Difference(UIKit.UIRegion)",
			"UIKit.UIRegion::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIRegion::Intersect(UIKit.UIRegion)",
			"UIKit.UIRegion::Union(UIKit.UIRegion)",
			"UIKit.UIResponder::BuildMenu(UIKit.IUIMenuBuilder)",
			"UIKit.UIResponder::CanPerform(ObjCRuntime.Selector,Foundation.NSObject)",
			"UIKit.UIResponder::CaptureTextFromCamera(Foundation.NSObject)",
			"UIKit.UIResponder::ClearTextInputContextIdentifier(Foundation.NSString)",
			"UIKit.UIResponder::Copy(Foundation.NSObject)",
			"UIKit.UIResponder::Cut(Foundation.NSObject)",
			"UIKit.UIResponder::DecreaseSize(Foundation.NSObject)",
			"UIKit.UIResponder::Delete(Foundation.NSObject)",
			"UIKit.UIResponder::GetTargetForAction(ObjCRuntime.Selector,Foundation.NSObject)",
			"UIKit.UIResponder::IncreaseSize(Foundation.NSObject)",
			"UIKit.UIResponder::MakeTextWritingDirectionLeftToRight(Foundation.NSObject)",
			"UIKit.UIResponder::MakeTextWritingDirectionRightToLeft(Foundation.NSObject)",
			"UIKit.UIResponder::MotionBegan(UIKit.UIEventSubtype,UIKit.UIEvent)",
			"UIKit.UIResponder::MotionCancelled(UIKit.UIEventSubtype,UIKit.UIEvent)",
			"UIKit.UIResponder::MotionEnded(UIKit.UIEventSubtype,UIKit.UIEvent)",
			"UIKit.UIResponder::Paste(Foundation.NSObject)",
			"UIKit.UIResponder::PasteAndGo(Foundation.NSObject)",
			"UIKit.UIResponder::PasteAndMatchStyle(Foundation.NSObject)",
			"UIKit.UIResponder::PasteAndSearch(Foundation.NSObject)",
			"UIKit.UIResponder::PressesBegan(Foundation.NSSet`1<UIKit.UIPress>,UIKit.UIPressesEvent)",
			"UIKit.UIResponder::PressesCancelled(Foundation.NSSet`1<UIKit.UIPress>,UIKit.UIPressesEvent)",
			"UIKit.UIResponder::PressesChanged(Foundation.NSSet`1<UIKit.UIPress>,UIKit.UIPressesEvent)",
			"UIKit.UIResponder::PressesEnded(Foundation.NSSet`1<UIKit.UIPress>,UIKit.UIPressesEvent)",
			"UIKit.UIResponder::Print(Foundation.NSObject)",
			"UIKit.UIResponder::RemoteControlReceived(UIKit.UIEvent)",
			"UIKit.UIResponder::RestoreUserActivityState(Foundation.NSUserActivity)",
			"UIKit.UIResponder::Select(Foundation.NSObject)",
			"UIKit.UIResponder::SelectAll(Foundation.NSObject)",
			"UIKit.UIResponder::set_ActivityItemsConfiguration(UIKit.IUIActivityItemsConfigurationReading)",
			"UIKit.UIResponder::set_PasteConfiguration(UIKit.UIPasteConfiguration)",
			"UIKit.UIResponder::set_TouchBar(AppKit.NSTouchBar)",
			"UIKit.UIResponder::set_UserActivity(Foundation.NSUserActivity)",
			"UIKit.UIResponder::ToggleBoldface(Foundation.NSObject)",
			"UIKit.UIResponder::ToggleItalics(Foundation.NSObject)",
			"UIKit.UIResponder::ToggleUnderline(Foundation.NSObject)",
			"UIKit.UIResponder::TouchesBegan(Foundation.NSSet,UIKit.UIEvent)",
			"UIKit.UIResponder::TouchesCancelled(Foundation.NSSet,UIKit.UIEvent)",
			"UIKit.UIResponder::TouchesEnded(Foundation.NSSet,UIKit.UIEvent)",
			"UIKit.UIResponder::TouchesEstimatedPropertiesUpdated(Foundation.NSSet)",
			"UIKit.UIResponder::TouchesMoved(Foundation.NSSet,UIKit.UIEvent)",
			"UIKit.UIResponder::UpdateUserActivityState(Foundation.NSUserActivity)",
			"UIKit.UIResponder::ValidateCommand(UIKit.UICommand)",
			"UIKit.UIResponderStandardEditActions_Extensions::Copy(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::Cut(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::DecreaseSize(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::Delete(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::IncreaseSize(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::MakeTextWritingDirectionLeftToRight(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::MakeTextWritingDirectionRightToLeft(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::Paste(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::PasteAndGo(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::PasteAndMatchStyle(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::PasteAndSearch(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::Print(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::Select(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::SelectAll(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::ToggleBoldface(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::ToggleItalics(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::ToggleUnderline(UIKit.IUIResponderStandardEditActions,Foundation.NSObject)",
			"UIKit.UIResponderStandardEditActions_Extensions::UpdateTextAttributes(UIKit.IUIResponderStandardEditActions,UIKit.UITextAttributesConversionHandler)",
			"UIKit.UIRotationGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIScene::.ctor(UIKit.UISceneSession,UIKit.UISceneConnectionOptions)",
			"UIKit.UIScene::OpenUrl(Foundation.NSUrl,UIKit.UISceneOpenExternalUrlOptions,System.Action`1<System.Boolean>)",
			"UIKit.UIScene::set_ActivationConditions(UIKit.UISceneActivationConditions)",
			"UIKit.UIScene::set_WeakDelegate(Foundation.NSObject)",
			"UIKit.UISceneActivationConditions::.ctor(Foundation.NSCoder)",
			"UIKit.UISceneActivationConditions::EncodeTo(Foundation.NSCoder)",
			"UIKit.UISceneActivationConditions::set_CanActivateForTargetContentIdentifierPredicate(Foundation.NSPredicate)",
			"UIKit.UISceneActivationConditions::set_PrefersToActivateForTargetContentIdentifierPredicate(Foundation.NSPredicate)",
			"UIKit.UISceneActivationRequestOptions::Copy(Foundation.NSZone)",
			"UIKit.UISceneActivationRequestOptions::set_RequestingScene(UIKit.UIScene)",
			"UIKit.UISceneConfiguration::.ctor(Foundation.NSCoder)",
			"UIKit.UISceneConfiguration::.ctor(System.String,UIKit.UIWindowSceneSessionRole)",
			"UIKit.UISceneConfiguration::Copy(Foundation.NSZone)",
			"UIKit.UISceneConfiguration::Create(System.String,UIKit.UIWindowSceneSessionRole)",
			"UIKit.UISceneConfiguration::EncodeTo(Foundation.NSCoder)",
			"UIKit.UISceneConfiguration::set_DelegateClass(ObjCRuntime.Class)",
			"UIKit.UISceneConfiguration::set_SceneClass(ObjCRuntime.Class)",
			"UIKit.UISceneConfiguration::set_Storyboard(UIKit.UIStoryboard)",
			"UIKit.UISceneDelegate_Extensions::ContinueUserActivity(UIKit.IUISceneDelegate,UIKit.UIScene,Foundation.NSUserActivity)",
			"UIKit.UISceneDelegate_Extensions::DidBecomeActive(UIKit.IUISceneDelegate,UIKit.UIScene)",
			"UIKit.UISceneDelegate_Extensions::DidDisconnect(UIKit.IUISceneDelegate,UIKit.UIScene)",
			"UIKit.UISceneDelegate_Extensions::DidEnterBackground(UIKit.IUISceneDelegate,UIKit.UIScene)",
			"UIKit.UISceneDelegate_Extensions::DidFailToContinueUserActivity(UIKit.IUISceneDelegate,UIKit.UIScene,System.String,Foundation.NSError)",
			"UIKit.UISceneDelegate_Extensions::DidUpdateUserActivity(UIKit.IUISceneDelegate,UIKit.UIScene,Foundation.NSUserActivity)",
			"UIKit.UISceneDelegate_Extensions::GetStateRestorationActivity(UIKit.IUISceneDelegate,UIKit.UIScene)",
			"UIKit.UISceneDelegate_Extensions::OpenUrlContexts(UIKit.IUISceneDelegate,UIKit.UIScene,Foundation.NSSet`1<UIKit.UIOpenUrlContext>)",
			"UIKit.UISceneDelegate_Extensions::RestoreInteractionState(UIKit.IUISceneDelegate,UIKit.UIScene,Foundation.NSUserActivity)",
			"UIKit.UISceneDelegate_Extensions::WillConnect(UIKit.IUISceneDelegate,UIKit.UIScene,UIKit.UISceneSession,UIKit.UISceneConnectionOptions)",
			"UIKit.UISceneDelegate_Extensions::WillContinueUserActivity(UIKit.IUISceneDelegate,UIKit.UIScene,System.String)",
			"UIKit.UISceneDelegate_Extensions::WillEnterForeground(UIKit.IUISceneDelegate,UIKit.UIScene)",
			"UIKit.UISceneDelegate_Extensions::WillResignActive(UIKit.IUISceneDelegate,UIKit.UIScene)",
			"UIKit.UISceneOpenExternalUrlOptions::set_EventAttribution(UIKit.UIEventAttribution)",
			"UIKit.UISceneSession::.ctor(Foundation.NSCoder)",
			"UIKit.UISceneSession::EncodeTo(Foundation.NSCoder)",
			"UIKit.UISceneSession::set_StateRestorationActivity(Foundation.NSUserActivity)",
			"UIKit.UISceneSession::set_UserInfo(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"UIKit.UIScreen::CreateDisplayLink(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIScreen::set_CurrentMode(UIKit.UIScreenMode)",
			"UIKit.UIScreen::TraitCollectionDidChange(UIKit.UITraitCollection)",
			"UIKit.UIScreenEdgePanGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UIScreenshotServiceDelegate_Extensions::GeneratePdfRepresentation(UIKit.IUIScreenshotServiceDelegate,UIKit.UIScreenshotService,UIKit.UIScreenshotServiceDelegatePdfHandler)",
			"UIKit.UIScribbleInteraction::.ctor(UIKit.IUIScribbleInteractionDelegate)",
			"UIKit.UIScribbleInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UIScribbleInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UIScribbleInteractionDelegate_Extensions::DidFinishWriting(UIKit.IUIScribbleInteractionDelegate,UIKit.UIScribbleInteraction)",
			"UIKit.UIScribbleInteractionDelegate_Extensions::ShouldBegin(UIKit.IUIScribbleInteractionDelegate,UIKit.UIScribbleInteraction,CoreGraphics.CGPoint)",
			"UIKit.UIScribbleInteractionDelegate_Extensions::ShouldDelayFocus(UIKit.IUIScribbleInteractionDelegate,UIKit.UIScribbleInteraction)",
			"UIKit.UIScribbleInteractionDelegate_Extensions::WillBeginWriting(UIKit.IUIScribbleInteractionDelegate,UIKit.UIScribbleInteraction)",
			"UIKit.UIScrollView::.ctor(Foundation.NSCoder)",
			"UIKit.UIScrollView::set_RefreshControl(UIKit.UIRefreshControl)",
			"UIKit.UIScrollView::TouchesShouldBegin(Foundation.NSSet,UIKit.UIEvent,UIKit.UIView)",
			"UIKit.UIScrollView::TouchesShouldCancelInContentView(UIKit.UIView)",
			"UIKit.UIScrollViewAccessibilityDelegate_Extensions::GetAccessibilityAttributedScrollStatus(UIKit.IUIScrollViewAccessibilityDelegate,UIKit.UIScrollView)",
			"UIKit.UIScrollViewAccessibilityDelegate_Extensions::GetAccessibilityScrollStatus(UIKit.IUIScrollViewAccessibilityDelegate,UIKit.UIScrollView)",
			"UIKit.UIScrollViewDelegate_Extensions::DecelerationEnded(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView)",
			"UIKit.UIScrollViewDelegate_Extensions::DecelerationStarted(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView)",
			"UIKit.UIScrollViewDelegate_Extensions::DidChangeAdjustedContentInset(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView)",
			"UIKit.UIScrollViewDelegate_Extensions::DidZoom(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView)",
			"UIKit.UIScrollViewDelegate_Extensions::DraggingEnded(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView,System.Boolean)",
			"UIKit.UIScrollViewDelegate_Extensions::DraggingStarted(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView)",
			"UIKit.UIScrollViewDelegate_Extensions::ScrollAnimationEnded(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView)",
			"UIKit.UIScrollViewDelegate_Extensions::Scrolled(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView)",
			"UIKit.UIScrollViewDelegate_Extensions::ScrolledToTop(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView)",
			"UIKit.UIScrollViewDelegate_Extensions::ShouldScrollToTop(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView)",
			"UIKit.UIScrollViewDelegate_Extensions::ViewForZoomingInScrollView(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView)",
			"UIKit.UIScrollViewDelegate_Extensions::WillEndDragging(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView,CoreGraphics.CGPoint,CoreGraphics.CGPoint&)",
			"UIKit.UIScrollViewDelegate_Extensions::ZoomingEnded(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView,UIKit.UIView,System.Runtime.InteropServices.NFloat)",
			"UIKit.UIScrollViewDelegate_Extensions::ZoomingStarted(UIKit.IUIScrollViewDelegate,UIKit.UIScrollView,UIKit.UIView)",
			"UIKit.UISearchBar/UISearchBarAppearance::_SetScopeBarButtonTitle(Foundation.NSDictionary,UIKit.UIControlState)",
			"UIKit.UISearchBar/UISearchBarAppearance::set_BackgroundImage(UIKit.UIImage)",
			"UIKit.UISearchBar/UISearchBarAppearance::set_BarTintColor(UIKit.UIColor)",
			"UIKit.UISearchBar/UISearchBarAppearance::set_ScopeBarBackgroundImage(UIKit.UIImage)",
			"UIKit.UISearchBar/UISearchBarAppearance::SetBackgroundImage(UIKit.UIImage,UIKit.UIBarPosition,UIKit.UIBarMetrics)",
			"UIKit.UISearchBar/UISearchBarAppearance::SetImageforSearchBarIcon(UIKit.UIImage,UIKit.UISearchBarIcon,UIKit.UIControlState)",
			"UIKit.UISearchBar/UISearchBarAppearance::SetScopeBarButtonBackgroundImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UISearchBar/UISearchBarAppearance::SetScopeBarButtonDividerImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIControlState)",
			"UIKit.UISearchBar/UISearchBarAppearance::SetSearchFieldBackgroundImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UISearchBar::.ctor(Foundation.NSCoder)",
			"UIKit.UISearchBar::_SetScopeBarButtonTitle(Foundation.NSDictionary,UIKit.UIControlState)",
			"UIKit.UISearchBar::EncodeTo(Foundation.NSCoder)",
			"UIKit.UISearchBar::set_BackgroundImage(UIKit.UIImage)",
			"UIKit.UISearchBar::set_BarTintColor(UIKit.UIColor)",
			"UIKit.UISearchBar::set_InputAccessoryView(UIKit.UIView)",
			"UIKit.UISearchBar::set_PasswordRules(UIKit.UITextInputPasswordRules)",
			"UIKit.UISearchBar::set_ScopeBarBackgroundImage(UIKit.UIImage)",
			"UIKit.UISearchBar::set_TextContentType(Foundation.NSString)",
			"UIKit.UISearchBar::SetBackgroundImage(UIKit.UIImage,UIKit.UIBarPosition,UIKit.UIBarMetrics)",
			"UIKit.UISearchBar::SetImageforSearchBarIcon(UIKit.UIImage,UIKit.UISearchBarIcon,UIKit.UIControlState)",
			"UIKit.UISearchBar::SetScopeBarButtonBackgroundImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UISearchBar::SetScopeBarButtonDividerImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIControlState)",
			"UIKit.UISearchBar::SetSearchFieldBackgroundImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UISearchBarDelegate_Extensions::BookmarkButtonClicked(UIKit.IUISearchBarDelegate,UIKit.UISearchBar)",
			"UIKit.UISearchBarDelegate_Extensions::CancelButtonClicked(UIKit.IUISearchBarDelegate,UIKit.UISearchBar)",
			"UIKit.UISearchBarDelegate_Extensions::ListButtonClicked(UIKit.IUISearchBarDelegate,UIKit.UISearchBar)",
			"UIKit.UISearchBarDelegate_Extensions::OnEditingStarted(UIKit.IUISearchBarDelegate,UIKit.UISearchBar)",
			"UIKit.UISearchBarDelegate_Extensions::OnEditingStopped(UIKit.IUISearchBarDelegate,UIKit.UISearchBar)",
			"UIKit.UISearchBarDelegate_Extensions::SearchButtonClicked(UIKit.IUISearchBarDelegate,UIKit.UISearchBar)",
			"UIKit.UISearchBarDelegate_Extensions::SelectedScopeButtonIndexChanged(UIKit.IUISearchBarDelegate,UIKit.UISearchBar,System.IntPtr)",
			"UIKit.UISearchBarDelegate_Extensions::ShouldBeginEditing(UIKit.IUISearchBarDelegate,UIKit.UISearchBar)",
			"UIKit.UISearchBarDelegate_Extensions::ShouldChangeTextInRange(UIKit.IUISearchBarDelegate,UIKit.UISearchBar,Foundation.NSRange,System.String)",
			"UIKit.UISearchBarDelegate_Extensions::ShouldEndEditing(UIKit.IUISearchBarDelegate,UIKit.UISearchBar)",
			"UIKit.UISearchBarDelegate_Extensions::TextChanged(UIKit.IUISearchBarDelegate,UIKit.UISearchBar,System.String)",
			"UIKit.UISearchContainerViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UISearchContainerViewController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UISearchContainerViewController::.ctor(UIKit.UISearchController)",
			"UIKit.UISearchController::.ctor(Foundation.NSCoder)",
			"UIKit.UISearchController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UISearchController::.ctor(UIKit.UIViewController)",
			"UIKit.UISearchController::AnimateTransition(UIKit.IUIViewControllerContextTransitioning)",
			"UIKit.UISearchController::GetAnimationControllerForDismissedController(UIKit.UIViewController)",
			"UIKit.UISearchController::GetAnimationControllerForPresentedController(UIKit.UIViewController,UIKit.UIViewController,UIKit.UIViewController)",
			"UIKit.UISearchController::GetInteractionControllerForDismissal(UIKit.IUIViewControllerAnimatedTransitioning)",
			"UIKit.UISearchController::GetInteractionControllerForPresentation(UIKit.IUIViewControllerAnimatedTransitioning)",
			"UIKit.UISearchController::GetInterruptibleAnimator(UIKit.IUIViewControllerContextTransitioning)",
			"UIKit.UISearchController::GetPresentationControllerForPresentedViewController(UIKit.UIViewController,UIKit.UIViewController,UIKit.UIViewController)",
			"UIKit.UISearchController::set_SearchControllerObservedScrollView(UIKit.UIScrollView)",
			"UIKit.UISearchController::TransitionDuration(UIKit.IUIViewControllerContextTransitioning)",
			"UIKit.UISearchControllerDelegate_Extensions::DidDismissSearchController(UIKit.IUISearchControllerDelegate,UIKit.UISearchController)",
			"UIKit.UISearchControllerDelegate_Extensions::DidPresentSearchController(UIKit.IUISearchControllerDelegate,UIKit.UISearchController)",
			"UIKit.UISearchControllerDelegate_Extensions::PresentSearchController(UIKit.IUISearchControllerDelegate,UIKit.UISearchController)",
			"UIKit.UISearchControllerDelegate_Extensions::WillDismissSearchController(UIKit.IUISearchControllerDelegate,UIKit.UISearchController)",
			"UIKit.UISearchControllerDelegate_Extensions::WillPresentSearchController(UIKit.IUISearchControllerDelegate,UIKit.UISearchController)",
			"UIKit.UISearchDisplayController::.ctor(UIKit.UISearchBar,UIKit.UIViewController)",
			"UIKit.UISearchDisplayDelegate_Extensions::DidBeginSearch(UIKit.IUISearchDisplayDelegate,UIKit.UISearchDisplayController)",
			"UIKit.UISearchDisplayDelegate_Extensions::DidEndSearch(UIKit.IUISearchDisplayDelegate,UIKit.UISearchDisplayController)",
			"UIKit.UISearchDisplayDelegate_Extensions::DidHideSearchResults(UIKit.IUISearchDisplayDelegate,UIKit.UISearchDisplayController,UIKit.UITableView)",
			"UIKit.UISearchDisplayDelegate_Extensions::DidLoadSearchResults(UIKit.IUISearchDisplayDelegate,UIKit.UISearchDisplayController,UIKit.UITableView)",
			"UIKit.UISearchDisplayDelegate_Extensions::DidShowSearchResults(UIKit.IUISearchDisplayDelegate,UIKit.UISearchDisplayController,UIKit.UITableView)",
			"UIKit.UISearchDisplayDelegate_Extensions::ShouldReloadForSearchScope(UIKit.IUISearchDisplayDelegate,UIKit.UISearchDisplayController,System.IntPtr)",
			"UIKit.UISearchDisplayDelegate_Extensions::ShouldReloadForSearchString(UIKit.IUISearchDisplayDelegate,UIKit.UISearchDisplayController,System.String)",
			"UIKit.UISearchDisplayDelegate_Extensions::WillBeginSearch(UIKit.IUISearchDisplayDelegate,UIKit.UISearchDisplayController)",
			"UIKit.UISearchDisplayDelegate_Extensions::WillEndSearch(UIKit.IUISearchDisplayDelegate,UIKit.UISearchDisplayController)",
			"UIKit.UISearchDisplayDelegate_Extensions::WillHideSearchResults(UIKit.IUISearchDisplayDelegate,UIKit.UISearchDisplayController,UIKit.UITableView)",
			"UIKit.UISearchDisplayDelegate_Extensions::WillShowSearchResults(UIKit.IUISearchDisplayDelegate,UIKit.UISearchDisplayController,UIKit.UITableView)",
			"UIKit.UISearchDisplayDelegate_Extensions::WillUnloadSearchResults(UIKit.IUISearchDisplayDelegate,UIKit.UISearchDisplayController,UIKit.UITableView)",
			"UIKit.UISearchResultsUpdating_Extensions::UpdateSearchResults(UIKit.IUISearchResultsUpdating,UIKit.UISearchController,UIKit.IUISearchSuggestion)",
			"UIKit.UISearchResultsUpdatingWrapper::UpdateSearchResultsForSearchController(UIKit.UISearchController)",
			"UIKit.UISearchSuggestion_Extensions::GetIconImage(UIKit.IUISearchSuggestion)",
			"UIKit.UISearchSuggestion_Extensions::GetLocalizedDescription(UIKit.IUISearchSuggestion)",
			"UIKit.UISearchSuggestionItem::.ctor(Foundation.NSString)",
			"UIKit.UISearchSuggestionItem::.ctor(Foundation.NSString,System.String)",
			"UIKit.UISearchSuggestionItem::.ctor(Foundation.NSString,System.String,UIKit.UIImage)",
			"UIKit.UISearchSuggestionItem::Create(Foundation.NSString)",
			"UIKit.UISearchSuggestionItem::Create(Foundation.NSString,System.String)",
			"UIKit.UISearchSuggestionItem::Create(Foundation.NSString,System.String,UIKit.UIImage)",
			"UIKit.UISearchTextField::.ctor(Foundation.NSCoder)",
			"UIKit.UISearchTextField::GetTokens(UIKit.UITextRange)",
			"UIKit.UISearchTextField::InsertToken(UIKit.UISearchToken,System.IntPtr)",
			"UIKit.UISearchTextField::ReplaceTextualPortion(UIKit.UITextRange,UIKit.UISearchToken,System.UIntPtr)",
			"UIKit.UISearchTextField::set_TokenBackgroundColor(UIKit.UIColor)",
			"UIKit.UISearchTextFieldDelegate_Extensions::GetItemProvider(UIKit.IUISearchTextFieldDelegate,UIKit.UISearchTextField,UIKit.UISearchToken)",
			"UIKit.UISearchTextFieldPasteItemWrapper::SetAttachmentResult(UIKit.NSTextAttachment)",
			"UIKit.UISearchTextFieldPasteItemWrapper::SetAttributedStringResult(Foundation.NSAttributedString)",
			"UIKit.UISearchTextFieldPasteItemWrapper::SetSearchTokenResult(UIKit.UISearchToken)",
			"UIKit.UISearchToken::Create(UIKit.UIImage,System.String)",
			"UIKit.UISearchToken::set_RepresentedObject(Foundation.NSObject)",
			"UIKit.UISegmentedControl/UISegmentedControlAppearance::_SetTitleTextAttributes(Foundation.NSDictionary,UIKit.UIControlState)",
			"UIKit.UISegmentedControl/UISegmentedControlAppearance::set_SelectedSegmentTintColor(UIKit.UIColor)",
			"UIKit.UISegmentedControl/UISegmentedControlAppearance::SetBackgroundImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIBarMetrics)",
			"UIKit.UISegmentedControl/UISegmentedControlAppearance::SetDividerImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIControlState,UIKit.UIBarMetrics)",
			"UIKit.UISegmentedControl::.ctor(Foundation.NSArray)",
			"UIKit.UISegmentedControl::.ctor(Foundation.NSCoder)",
			"UIKit.UISegmentedControl::_SetTitleTextAttributes(Foundation.NSDictionary,UIKit.UIControlState)",
			"UIKit.UISegmentedControl::InsertSegment(UIKit.UIAction,System.UIntPtr,System.Boolean)",
			"UIKit.UISegmentedControl::InsertSegment(UIKit.UIImage,System.IntPtr,System.Boolean)",
			"UIKit.UISegmentedControl::set_SelectedSegmentTintColor(UIKit.UIColor)",
			"UIKit.UISegmentedControl::SetAction(UIKit.UIAction,System.UIntPtr)",
			"UIKit.UISegmentedControl::SetBackgroundImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIBarMetrics)",
			"UIKit.UISegmentedControl::SetDividerImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIControlState,UIKit.UIBarMetrics)",
			"UIKit.UISegmentedControl::SetImage(UIKit.UIImage,System.IntPtr)",
			"UIKit.UISheetPresentationController::.ctor(UIKit.UIViewController,UIKit.UIViewController)",
			"UIKit.UISheetPresentationController::set_LargestUndimmedDetentIdentifier(UIKit.UISheetPresentationControllerDetentIdentifier)",
			"UIKit.UISheetPresentationController::set_SelectedDetentIdentifier(UIKit.UISheetPresentationControllerDetentIdentifier)",
			"UIKit.UISheetPresentationController::set_SourceView(UIKit.UIView)",
			"UIKit.UISheetPresentationControllerDelegate_Extensions::DidChangeSelectedDetentIdentifier(UIKit.IUISheetPresentationControllerDelegate,UIKit.UISheetPresentationController)",
			"UIKit.UISimpleTextPrintFormatter::.ctor(Foundation.NSAttributedString)",
			"UIKit.UISimpleTextPrintFormatter::set_AttributedText(Foundation.NSAttributedString)",
			"UIKit.UISimpleTextPrintFormatter::set_Color(UIKit.UIColor)",
			"UIKit.UISimpleTextPrintFormatter::set_Font(UIKit.UIFont)",
			"UIKit.UISlider/UISliderAppearance::set_MaximumTrackTintColor(UIKit.UIColor)",
			"UIKit.UISlider/UISliderAppearance::set_MaxValueImage(UIKit.UIImage)",
			"UIKit.UISlider/UISliderAppearance::set_MinimumTrackTintColor(UIKit.UIColor)",
			"UIKit.UISlider/UISliderAppearance::set_MinValueImage(UIKit.UIImage)",
			"UIKit.UISlider/UISliderAppearance::set_ThumbTintColor(UIKit.UIColor)",
			"UIKit.UISlider/UISliderAppearance::SetMaxTrackImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UISlider/UISliderAppearance::SetMinTrackImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UISlider/UISliderAppearance::SetThumbImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UISlider::.ctor(Foundation.NSCoder)",
			"UIKit.UISlider::set_MaximumTrackTintColor(UIKit.UIColor)",
			"UIKit.UISlider::set_MaxValueImage(UIKit.UIImage)",
			"UIKit.UISlider::set_MinimumTrackTintColor(UIKit.UIColor)",
			"UIKit.UISlider::set_MinValueImage(UIKit.UIImage)",
			"UIKit.UISlider::set_ThumbTintColor(UIKit.UIColor)",
			"UIKit.UISlider::SetMaxTrackImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UISlider::SetMinTrackImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UISlider::SetThumbImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UISnapBehavior::.ctor(UIKit.IUIDynamicItem,CoreGraphics.CGPoint)",
			"UIKit.UISplitViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UISplitViewController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UISplitViewController::SetViewController(UIKit.UIViewController,UIKit.UISplitViewControllerColumn)",
			"UIKit.UISplitViewController::ShowDetailViewController(UIKit.UIViewController,Foundation.NSObject)",
			"UIKit.UISplitViewController::ShowViewController(UIKit.UIViewController,Foundation.NSObject)",
			"UIKit.UISplitViewController_UIViewController::CollapseSecondaryViewController(UIKit.UIViewController,UIKit.UIViewController,UIKit.UISplitViewController)",
			"UIKit.UISplitViewController_UIViewController::GetSplitViewController(UIKit.UIViewController)",
			"UIKit.UISplitViewController_UIViewController::SeparateSecondaryViewControllerForSplitViewController(UIKit.UIViewController,UIKit.UISplitViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::CollapseSecondViewController(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UIViewController,UIKit.UIViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::DidCollapse(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::DidExpand(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::EventShowDetailViewController(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UIViewController,Foundation.NSObject)",
			"UIKit.UISplitViewControllerDelegate_Extensions::EventShowViewController(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UIViewController,Foundation.NSObject)",
			"UIKit.UISplitViewControllerDelegate_Extensions::GetDisplayModeForExpanding(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UISplitViewControllerDisplayMode)",
			"UIKit.UISplitViewControllerDelegate_Extensions::GetPreferredInterfaceOrientationForPresentation(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::GetPrimaryViewControllerForCollapsingSplitViewController(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::GetPrimaryViewControllerForExpandingSplitViewController(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::GetTargetDisplayModeForAction(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::GetTopColumnForCollapsing(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UISplitViewControllerColumn)",
			"UIKit.UISplitViewControllerDelegate_Extensions::InteractivePresentationGestureDidEnd(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::InteractivePresentationGestureWillBegin(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::SeparateSecondaryViewController(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UIViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::ShouldHideViewController(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UIViewController,UIKit.UIInterfaceOrientation)",
			"UIKit.UISplitViewControllerDelegate_Extensions::SupportedInterfaceOrientations(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::WillChangeDisplayMode(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UISplitViewControllerDisplayMode)",
			"UIKit.UISplitViewControllerDelegate_Extensions::WillHideColumn(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UISplitViewControllerColumn)",
			"UIKit.UISplitViewControllerDelegate_Extensions::WillHideViewController(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UIViewController,UIKit.UIBarButtonItem,UIKit.UIPopoverController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::WillPresentViewController(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UIPopoverController,UIKit.UIViewController)",
			"UIKit.UISplitViewControllerDelegate_Extensions::WillShowColumn(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UISplitViewControllerColumn)",
			"UIKit.UISplitViewControllerDelegate_Extensions::WillShowViewController(UIKit.IUISplitViewControllerDelegate,UIKit.UISplitViewController,UIKit.UIViewController,UIKit.UIBarButtonItem)",
			"UIKit.UISpringLoadedInteraction::.ctor(UIKit.IUISpringLoadedInteractionBehavior,UIKit.IUISpringLoadedInteractionEffect,System.Action`2<UIKit.UISpringLoadedInteraction,UIKit.IUISpringLoadedInteractionContext>)",
			"UIKit.UISpringLoadedInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UISpringLoadedInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UISpringLoadedInteractionBehavior_Extensions::InteractionDidFinish(UIKit.IUISpringLoadedInteractionBehavior,UIKit.UISpringLoadedInteraction)",
			"UIKit.UISpringLoadedInteractionBehaviorWrapper::ShouldAllowInteraction(UIKit.UISpringLoadedInteraction,UIKit.IUISpringLoadedInteractionContext)",
			"UIKit.UISpringLoadedInteractionContextWrapper::LocationInView(UIKit.UIView)",
			"UIKit.UISpringLoadedInteractionContextWrapper::set_TargetItem(Foundation.NSObject)",
			"UIKit.UISpringLoadedInteractionContextWrapper::set_TargetView(UIKit.UIView)",
			"UIKit.UISpringLoadedInteractionEffectWrapper::DidChange(UIKit.UISpringLoadedInteraction,UIKit.IUISpringLoadedInteractionContext)",
			"UIKit.UISpringTimingParameters::.ctor(Foundation.NSCoder)",
			"UIKit.UISpringTimingParameters::Copy(Foundation.NSZone)",
			"UIKit.UISpringTimingParameters::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIStackView::.ctor(Foundation.NSCoder)",
			"UIKit.UIStackView::AddArrangedSubview(UIKit.UIView)",
			"UIKit.UIStackView::GetCustomSpacing(UIKit.UIView)",
			"UIKit.UIStackView::InsertArrangedSubview(UIKit.UIView,System.UIntPtr)",
			"UIKit.UIStackView::RemoveArrangedSubview(UIKit.UIView)",
			"UIKit.UIStackView::SetCustomSpacing(System.Runtime.InteropServices.NFloat,UIKit.UIView)",
			"UIKit.UIStateRestoring_Extensions::ApplicationFinishedRestoringState(UIKit.IUIStateRestoring)",
			"UIKit.UIStateRestoring_Extensions::DecodeRestorableState(UIKit.IUIStateRestoring,Foundation.NSCoder)",
			"UIKit.UIStateRestoring_Extensions::EncodeRestorableState(UIKit.IUIStateRestoring,Foundation.NSCoder)",
			"UIKit.UIStateRestoring_Extensions::GetObjectRestorationClass(UIKit.IUIStateRestoring)",
			"UIKit.UIStateRestoring_Extensions::GetRestorationParent(UIKit.IUIStateRestoring)",
			"UIKit.UIStepper/UIStepperAppearance::SetBackgroundImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UIStepper/UIStepperAppearance::SetDecrementImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UIStepper/UIStepperAppearance::SetDividerImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIControlState)",
			"UIKit.UIStepper/UIStepperAppearance::SetIncrementImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UIStepper::.ctor(Foundation.NSCoder)",
			"UIKit.UIStepper::SetBackgroundImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UIStepper::SetDecrementImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UIStepper::SetDividerImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIControlState)",
			"UIKit.UIStepper::SetIncrementImage(UIKit.UIImage,UIKit.UIControlState)",
			"UIKit.UIStoryboard::FromName(System.String,Foundation.NSBundle)",
			"UIKit.UIStoryboardPopoverSegue::.ctor(System.String,UIKit.UIViewController,UIKit.UIViewController)",
			"UIKit.UIStoryboardSegue::.ctor(System.String,UIKit.UIViewController,UIKit.UIViewController)",
			"UIKit.UIStoryboardSegue::Create(System.String,UIKit.UIViewController,UIKit.UIViewController,System.Action)",
			"UIKit.UIStringDrawing::DrawString(Foundation.NSString,CoreGraphics.CGPoint,System.Runtime.InteropServices.NFloat,UIKit.UIFont,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&,UIKit.UILineBreakMode,UIKit.UIBaselineAdjustment)",
			"UIKit.UIStringDrawing::DrawString(Foundation.NSString,CoreGraphics.CGPoint,System.Runtime.InteropServices.NFloat,UIKit.UIFont,System.Runtime.InteropServices.NFloat,UIKit.UILineBreakMode,UIKit.UIBaselineAdjustment)",
			"UIKit.UIStringDrawing::DrawString(Foundation.NSString,CoreGraphics.CGPoint,System.Runtime.InteropServices.NFloat,UIKit.UIFont,UIKit.UILineBreakMode)",
			"UIKit.UIStringDrawing::DrawString(Foundation.NSString,CoreGraphics.CGPoint,UIKit.UIFont)",
			"UIKit.UIStringDrawing::DrawString(Foundation.NSString,CoreGraphics.CGRect,UIKit.UIFont)",
			"UIKit.UIStringDrawing::DrawString(Foundation.NSString,CoreGraphics.CGRect,UIKit.UIFont,UIKit.UILineBreakMode)",
			"UIKit.UIStringDrawing::DrawString(Foundation.NSString,CoreGraphics.CGRect,UIKit.UIFont,UIKit.UILineBreakMode,UIKit.UITextAlignment)",
			"UIKit.UIStringDrawing::StringSize(Foundation.NSString,UIKit.UIFont)",
			"UIKit.UIStringDrawing::StringSize(Foundation.NSString,UIKit.UIFont,CoreGraphics.CGSize)",
			"UIKit.UIStringDrawing::StringSize(Foundation.NSString,UIKit.UIFont,CoreGraphics.CGSize,UIKit.UILineBreakMode)",
			"UIKit.UIStringDrawing::StringSize(Foundation.NSString,UIKit.UIFont,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&,System.Runtime.InteropServices.NFloat,UIKit.UILineBreakMode)",
			"UIKit.UIStringDrawing::StringSize(Foundation.NSString,UIKit.UIFont,System.Runtime.InteropServices.NFloat,UIKit.UILineBreakMode)",
			"UIKit.UISwipeGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UISwitch/UISwitchAppearance::set_OffImage(UIKit.UIImage)",
			"UIKit.UISwitch/UISwitchAppearance::set_OnImage(UIKit.UIImage)",
			"UIKit.UISwitch/UISwitchAppearance::set_OnTintColor(UIKit.UIColor)",
			"UIKit.UISwitch/UISwitchAppearance::set_ThumbTintColor(UIKit.UIColor)",
			"UIKit.UISwitch::.ctor(Foundation.NSCoder)",
			"UIKit.UISwitch::EncodeTo(Foundation.NSCoder)",
			"UIKit.UISwitch::set_OffImage(UIKit.UIImage)",
			"UIKit.UISwitch::set_OnImage(UIKit.UIImage)",
			"UIKit.UISwitch::set_OnTintColor(UIKit.UIColor)",
			"UIKit.UISwitch::set_ThumbTintColor(UIKit.UIColor)",
			"UIKit.UITabBar/UITabBarAppearance::set_BackgroundImage(UIKit.UIImage)",
			"UIKit.UITabBar/UITabBarAppearance::set_BarTintColor(UIKit.UIColor)",
			"UIKit.UITabBar/UITabBarAppearance::set_ScrollEdgeAppearance(UIKit.UITabBarAppearance)",
			"UIKit.UITabBar/UITabBarAppearance::set_SelectedImageTintColor(UIKit.UIColor)",
			"UIKit.UITabBar/UITabBarAppearance::set_SelectionIndicatorImage(UIKit.UIImage)",
			"UIKit.UITabBar/UITabBarAppearance::set_ShadowImage(UIKit.UIImage)",
			"UIKit.UITabBar/UITabBarAppearance::set_StandardAppearance(UIKit.UITabBarAppearance)",
			"UIKit.UITabBar/UITabBarAppearance::set_UnselectedItemTintColor(UIKit.UIColor)",
			"UIKit.UITabBar::.ctor(Foundation.NSCoder)",
			"UIKit.UITabBar::set_BackgroundImage(UIKit.UIImage)",
			"UIKit.UITabBar::set_BarTintColor(UIKit.UIColor)",
			"UIKit.UITabBar::set_ScrollEdgeAppearance(UIKit.UITabBarAppearance)",
			"UIKit.UITabBar::set_SelectedImageTintColor(UIKit.UIColor)",
			"UIKit.UITabBar::set_SelectionIndicatorImage(UIKit.UIImage)",
			"UIKit.UITabBar::set_ShadowImage(UIKit.UIImage)",
			"UIKit.UITabBar::set_StandardAppearance(UIKit.UITabBarAppearance)",
			"UIKit.UITabBar::set_UnselectedItemTintColor(UIKit.UIColor)",
			"UIKit.UITabBarAppearance::.ctor(Foundation.NSCoder)",
			"UIKit.UITabBarAppearance::.ctor(UIKit.UIBarAppearance)",
			"UIKit.UITabBarAppearance::set_CompactInlineLayoutAppearance(UIKit.UITabBarItemAppearance)",
			"UIKit.UITabBarAppearance::set_InlineLayoutAppearance(UIKit.UITabBarItemAppearance)",
			"UIKit.UITabBarAppearance::set_SelectionIndicatorImage(UIKit.UIImage)",
			"UIKit.UITabBarAppearance::set_SelectionIndicatorTintColor(UIKit.UIColor)",
			"UIKit.UITabBarAppearance::set_StackedLayoutAppearance(UIKit.UITabBarItemAppearance)",
			"UIKit.UITabBarController::.ctor(Foundation.NSCoder)",
			"UIKit.UITabBarController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UITabBarController::DidBeginCustomizingItems(UIKit.UITabBar,UIKit.UITabBarItem[])",
			"UIKit.UITabBarController::DidEndCustomizingItems(UIKit.UITabBar,UIKit.UITabBarItem[],System.Boolean)",
			"UIKit.UITabBarController::ItemSelected(UIKit.UITabBar,UIKit.UITabBarItem)",
			"UIKit.UITabBarController::WillBeginCustomizingItems(UIKit.UITabBar,UIKit.UITabBarItem[])",
			"UIKit.UITabBarController::WillEndCustomizingItems(UIKit.UITabBar,UIKit.UITabBarItem[],System.Boolean)",
			"UIKit.UITabBarControllerDelegate_Extensions::FinishedCustomizingViewControllers(UIKit.IUITabBarControllerDelegate,UIKit.UITabBarController,UIKit.UIViewController[],System.Boolean)",
			"UIKit.UITabBarControllerDelegate_Extensions::GetAnimationControllerForTransition(UIKit.IUITabBarControllerDelegate,UIKit.UITabBarController,UIKit.UIViewController,UIKit.UIViewController)",
			"UIKit.UITabBarControllerDelegate_Extensions::GetInteractionControllerForAnimationController(UIKit.IUITabBarControllerDelegate,UIKit.UITabBarController,UIKit.IUIViewControllerAnimatedTransitioning)",
			"UIKit.UITabBarControllerDelegate_Extensions::GetPreferredInterfaceOrientation(UIKit.IUITabBarControllerDelegate,UIKit.UITabBarController)",
			"UIKit.UITabBarControllerDelegate_Extensions::OnCustomizingViewControllers(UIKit.IUITabBarControllerDelegate,UIKit.UITabBarController,UIKit.UIViewController[])",
			"UIKit.UITabBarControllerDelegate_Extensions::OnEndCustomizingViewControllers(UIKit.IUITabBarControllerDelegate,UIKit.UITabBarController,UIKit.UIViewController[],System.Boolean)",
			"UIKit.UITabBarControllerDelegate_Extensions::ShouldSelectViewController(UIKit.IUITabBarControllerDelegate,UIKit.UITabBarController,UIKit.UIViewController)",
			"UIKit.UITabBarControllerDelegate_Extensions::SupportedInterfaceOrientations(UIKit.IUITabBarControllerDelegate,UIKit.UITabBarController)",
			"UIKit.UITabBarControllerDelegate_Extensions::ViewControllerSelected(UIKit.IUITabBarControllerDelegate,UIKit.UITabBarController,UIKit.UIViewController)",
			"UIKit.UITabBarDelegate_Extensions::DidBeginCustomizingItems(UIKit.IUITabBarDelegate,UIKit.UITabBar,UIKit.UITabBarItem[])",
			"UIKit.UITabBarDelegate_Extensions::DidEndCustomizingItems(UIKit.IUITabBarDelegate,UIKit.UITabBar,UIKit.UITabBarItem[],System.Boolean)",
			"UIKit.UITabBarDelegate_Extensions::ItemSelected(UIKit.IUITabBarDelegate,UIKit.UITabBar,UIKit.UITabBarItem)",
			"UIKit.UITabBarDelegate_Extensions::WillBeginCustomizingItems(UIKit.IUITabBarDelegate,UIKit.UITabBar,UIKit.UITabBarItem[])",
			"UIKit.UITabBarDelegate_Extensions::WillEndCustomizingItems(UIKit.IUITabBarDelegate,UIKit.UITabBar,UIKit.UITabBarItem[],System.Boolean)",
			"UIKit.UITabBarItem/UITabBarItemAppearance::set_BadgeColor(UIKit.UIColor)",
			"UIKit.UITabBarItem/UITabBarItemAppearance::set_ScrollEdgeAppearance(UIKit.UITabBarAppearance)",
			"UIKit.UITabBarItem/UITabBarItemAppearance::set_StandardAppearance(UIKit.UITabBarAppearance)",
			"UIKit.UITabBarItem/UITabBarItemAppearance::SetBadgeTextAttributes(Foundation.NSDictionary,UIKit.UIControlState)",
			"UIKit.UITabBarItem::.ctor(Foundation.NSCoder)",
			"UIKit.UITabBarItem::.ctor(System.String,UIKit.UIImage,System.IntPtr)",
			"UIKit.UITabBarItem::.ctor(System.String,UIKit.UIImage,UIKit.UIImage)",
			"UIKit.UITabBarItem::EncodeTo(Foundation.NSCoder)",
			"UIKit.UITabBarItem::set_BadgeColor(UIKit.UIColor)",
			"UIKit.UITabBarItem::set_Image(UIKit.UIImage)",
			"UIKit.UITabBarItem::set_ScrollEdgeAppearance(UIKit.UITabBarAppearance)",
			"UIKit.UITabBarItem::set_SelectedImage(UIKit.UIImage)",
			"UIKit.UITabBarItem::set_StandardAppearance(UIKit.UITabBarAppearance)",
			"UIKit.UITabBarItem::SetBadgeTextAttributes(Foundation.NSDictionary,UIKit.UIControlState)",
			"UIKit.UITabBarItem::SetFinishedImages(UIKit.UIImage,UIKit.UIImage)",
			"UIKit.UITabBarItemAppearance::.ctor(Foundation.NSCoder)",
			"UIKit.UITabBarItemAppearance::Copy(Foundation.NSZone)",
			"UIKit.UITabBarItemAppearance::EncodeTo(Foundation.NSCoder)",
			"UIKit.UITabBarItemStateAppearance::set_BadgeBackgroundColor(UIKit.UIColor)",
			"UIKit.UITabBarItemStateAppearance::set_IconColor(UIKit.UIColor)",
			"UIKit.UITabBarItemStateAppearance::set_WeakBadgeTextAttributes(Foundation.NSDictionary)",
			"UIKit.UITabBarItemStateAppearance::set_WeakTitleTextAttributes(Foundation.NSDictionary)",
			"UIKit.UITableView/UITableViewAppearance::set_SectionIndexBackgroundColor(UIKit.UIColor)",
			"UIKit.UITableView/UITableViewAppearance::set_SectionIndexColor(UIKit.UIColor)",
			"UIKit.UITableView/UITableViewAppearance::set_SectionIndexTrackingBackgroundColor(UIKit.UIColor)",
			"UIKit.UITableView/UITableViewAppearance::set_SeparatorColor(UIKit.UIColor)",
			"UIKit.UITableView/UITableViewAppearance::set_SeparatorEffect(UIKit.UIVisualEffect)",
			"UIKit.UITableView::.ctor(Foundation.NSCoder)",
			"UIKit.UITableView::CellAt(Foundation.NSIndexPath)",
			"UIKit.UITableView::DeleteSections(Foundation.NSIndexSet,UIKit.UITableViewRowAnimation)",
			"UIKit.UITableView::DequeueReusableCell(Foundation.NSString)",
			"UIKit.UITableView::DequeueReusableCell(Foundation.NSString,Foundation.NSIndexPath)",
			"UIKit.UITableView::DequeueReusableHeaderFooterView(Foundation.NSString)",
			"UIKit.UITableView::DeselectRow(Foundation.NSIndexPath,System.Boolean)",
			"UIKit.UITableView::EncodeTo(Foundation.NSCoder)",
			"UIKit.UITableView::GetDataSourceIndexPath(Foundation.NSIndexPath)",
			"UIKit.UITableView::GetPresentationIndexPath(Foundation.NSIndexPath)",
			"UIKit.UITableView::IndexPathForCell(UIKit.UITableViewCell)",
			"UIKit.UITableView::InsertSections(Foundation.NSIndexSet,UIKit.UITableViewRowAnimation)",
			"UIKit.UITableView::MoveRow(Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UITableView::RectForRowAtIndexPath(Foundation.NSIndexPath)",
			"UIKit.UITableView::RegisterClassForCellReuse(System.IntPtr,Foundation.NSString)",
			"UIKit.UITableView::RegisterClassForHeaderFooterViewReuse(System.IntPtr,Foundation.NSString)",
			"UIKit.UITableView::RegisterNibForCellReuse(UIKit.UINib,Foundation.NSString)",
			"UIKit.UITableView::RegisterNibForHeaderFooterViewReuse(UIKit.UINib,Foundation.NSString)",
			"UIKit.UITableView::ReloadSections(Foundation.NSIndexSet,UIKit.UITableViewRowAnimation)",
			"UIKit.UITableView::ScrollToRow(Foundation.NSIndexPath,UIKit.UITableViewScrollPosition,System.Boolean)",
			"UIKit.UITableView::SelectRow(Foundation.NSIndexPath,System.Boolean,UIKit.UITableViewScrollPosition)",
			"UIKit.UITableView::set_BackgroundView(UIKit.UIView)",
			"UIKit.UITableView::set_SectionIndexBackgroundColor(UIKit.UIColor)",
			"UIKit.UITableView::set_SectionIndexColor(UIKit.UIColor)",
			"UIKit.UITableView::set_SectionIndexTrackingBackgroundColor(UIKit.UIColor)",
			"UIKit.UITableView::set_SeparatorColor(UIKit.UIColor)",
			"UIKit.UITableView::set_SeparatorEffect(UIKit.UIVisualEffect)",
			"UIKit.UITableView::set_TableFooterView(UIKit.UIView)",
			"UIKit.UITableView::set_TableHeaderView(UIKit.UIView)",
			"UIKit.UITableViewCell::.ctor(Foundation.NSCoder)",
			"UIKit.UITableViewCell::.ctor(UIKit.UITableViewCellStyle,Foundation.NSString)",
			"UIKit.UITableViewCell::EncodeTo(Foundation.NSCoder)",
			"UIKit.UITableViewCell::set_AccessoryView(UIKit.UIView)",
			"UIKit.UITableViewCell::set_BackgroundConfiguration(UIKit.UIBackgroundConfiguration)",
			"UIKit.UITableViewCell::set_BackgroundView(UIKit.UIView)",
			"UIKit.UITableViewCell::set_ContentConfiguration(UIKit.IUIContentConfiguration)",
			"UIKit.UITableViewCell::set_EditingAccessoryView(UIKit.UIView)",
			"UIKit.UITableViewCell::set_MultipleSelectionBackgroundView(UIKit.UIView)",
			"UIKit.UITableViewCell::set_SelectedBackgroundView(UIKit.UIView)",
			"UIKit.UITableViewCell::ShouldBegin(UIKit.UIGestureRecognizer)",
			"UIKit.UITableViewCell::ShouldBeRequiredToFailBy(UIKit.UIGestureRecognizer,UIKit.UIGestureRecognizer)",
			"UIKit.UITableViewCell::ShouldReceiveEvent(UIKit.UIGestureRecognizer,UIKit.UIEvent)",
			"UIKit.UITableViewCell::ShouldReceivePress(UIKit.UIGestureRecognizer,UIKit.UIPress)",
			"UIKit.UITableViewCell::ShouldReceiveTouch(UIKit.UIGestureRecognizer,UIKit.UITouch)",
			"UIKit.UITableViewCell::ShouldRecognizeSimultaneously(UIKit.UIGestureRecognizer,UIKit.UIGestureRecognizer)",
			"UIKit.UITableViewCell::ShouldRequireFailureOf(UIKit.UIGestureRecognizer,UIKit.UIGestureRecognizer)",
			"UIKit.UITableViewCell::UpdateConfiguration(UIKit.UICellConfigurationState)",
			"UIKit.UITableViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UITableViewController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UITableViewController::AccessoryButtonTapped(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::CanEditRow(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::CanFocusRow(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::CanMoveRow(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::CanPerformAction(UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)",
			"UIKit.UITableViewController::CellDisplayingEnded(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::CommitEditingStyle(UIKit.UITableView,UIKit.UITableViewCellEditingStyle,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::CustomizeMoveTarget(UIKit.UITableView,Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::DidBeginMultipleSelectionInteraction(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::DidEndEditing(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::DidEndMultipleSelectionInteraction(UIKit.UITableView)",
			"UIKit.UITableViewController::DidUpdateFocus(UIKit.UITableView,UIKit.UITableViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)",
			"UIKit.UITableViewController::EditActionsForRow(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::EditingStyleForRow(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::EstimatedHeight(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::EstimatedHeightForFooter(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewController::EstimatedHeightForHeader(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewController::FooterViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.IntPtr)",
			"UIKit.UITableViewController::GetCell(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::GetContextMenuConfiguration(UIKit.UITableView,Foundation.NSIndexPath,CoreGraphics.CGPoint)",
			"UIKit.UITableViewController::GetHeightForFooter(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewController::GetHeightForHeader(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewController::GetHeightForRow(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::GetIndexPathForPreferredFocusedView(UIKit.UITableView)",
			"UIKit.UITableViewController::GetLeadingSwipeActionsConfiguration(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::GetPreviewForDismissingContextMenu(UIKit.UITableView,UIKit.UIContextMenuConfiguration)",
			"UIKit.UITableViewController::GetPreviewForHighlightingContextMenu(UIKit.UITableView,UIKit.UIContextMenuConfiguration)",
			"UIKit.UITableViewController::GetSelectionFollowsFocusForRow(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::GetTrailingSwipeActionsConfiguration(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::GetViewForFooter(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewController::GetViewForHeader(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewController::HeaderViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.IntPtr)",
			"UIKit.UITableViewController::IndentationLevel(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::MoveRow(UIKit.UITableView,Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::NumberOfSections(UIKit.UITableView)",
			"UIKit.UITableViewController::PerformAction(UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)",
			"UIKit.UITableViewController::RowDeselected(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::RowHighlighted(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::RowSelected(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::RowsInSection(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewController::RowUnhighlighted(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::SectionFor(UIKit.UITableView,System.String,System.IntPtr)",
			"UIKit.UITableViewController::SectionIndexTitles(UIKit.UITableView)",
			"UIKit.UITableViewController::set_RefreshControl(UIKit.UIRefreshControl)",
			"UIKit.UITableViewController::set_TableView(UIKit.UITableView)",
			"UIKit.UITableViewController::ShouldBeginMultipleSelectionInteraction(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::ShouldHighlightRow(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::ShouldIndentWhileEditing(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::ShouldShowMenu(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::ShouldSpringLoadRow(UIKit.UITableView,Foundation.NSIndexPath,UIKit.IUISpringLoadedInteractionContext)",
			"UIKit.UITableViewController::ShouldUpdateFocus(UIKit.UITableView,UIKit.UITableViewFocusUpdateContext)",
			"UIKit.UITableViewController::TitleForDeleteConfirmation(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::TitleForFooter(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewController::TitleForHeader(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewController::WillBeginEditing(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::WillDeselectRow(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::WillDisplay(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)",
			"UIKit.UITableViewController::WillDisplayContextMenu(UIKit.UITableView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)",
			"UIKit.UITableViewController::WillDisplayFooterView(UIKit.UITableView,UIKit.UIView,System.IntPtr)",
			"UIKit.UITableViewController::WillDisplayHeaderView(UIKit.UITableView,UIKit.UIView,System.IntPtr)",
			"UIKit.UITableViewController::WillEndContextMenuInteraction(UIKit.UITableView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)",
			"UIKit.UITableViewController::WillPerformPreviewAction(UIKit.UITableView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)",
			"UIKit.UITableViewController::WillSelectRow(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDataSource_Extensions::CanEditRow(UIKit.IUITableViewDataSource,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDataSource_Extensions::CanMoveRow(UIKit.IUITableViewDataSource,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDataSource_Extensions::CommitEditingStyle(UIKit.IUITableViewDataSource,UIKit.UITableView,UIKit.UITableViewCellEditingStyle,Foundation.NSIndexPath)",
			"UIKit.UITableViewDataSource_Extensions::MoveRow(UIKit.IUITableViewDataSource,UIKit.UITableView,Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UITableViewDataSource_Extensions::NumberOfSections(UIKit.IUITableViewDataSource,UIKit.UITableView)",
			"UIKit.UITableViewDataSource_Extensions::SectionFor(UIKit.IUITableViewDataSource,UIKit.UITableView,System.String,System.IntPtr)",
			"UIKit.UITableViewDataSource_Extensions::SectionIndexTitles(UIKit.IUITableViewDataSource,UIKit.UITableView)",
			"UIKit.UITableViewDataSource_Extensions::TitleForFooter(UIKit.IUITableViewDataSource,UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewDataSource_Extensions::TitleForHeader(UIKit.IUITableViewDataSource,UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewDataSourcePrefetching_Extensions::CancelPrefetching(UIKit.IUITableViewDataSourcePrefetching,UIKit.UITableView,Foundation.NSIndexPath[])",
			"UIKit.UITableViewDataSourcePrefetchingWrapper::PrefetchRows(UIKit.UITableView,Foundation.NSIndexPath[])",
			"UIKit.UITableViewDataSourceWrapper::GetCell(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDataSourceWrapper::RowsInSection(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewDelegate_Extensions::AccessoryButtonTapped(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::CanFocusRow(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::CanPerformAction(UIKit.IUITableViewDelegate,UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)",
			"UIKit.UITableViewDelegate_Extensions::CellDisplayingEnded(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::CustomizeMoveTarget(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::DidBeginMultipleSelectionInteraction(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::DidEndEditing(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::DidEndMultipleSelectionInteraction(UIKit.IUITableViewDelegate,UIKit.UITableView)",
			"UIKit.UITableViewDelegate_Extensions::DidUpdateFocus(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UITableViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)",
			"UIKit.UITableViewDelegate_Extensions::EditActionsForRow(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::EditingStyleForRow(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::EstimatedHeight(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::EstimatedHeightForFooter(UIKit.IUITableViewDelegate,UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewDelegate_Extensions::EstimatedHeightForHeader(UIKit.IUITableViewDelegate,UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewDelegate_Extensions::FooterViewDisplayingEnded(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UIView,System.IntPtr)",
			"UIKit.UITableViewDelegate_Extensions::GetContextMenuConfiguration(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath,CoreGraphics.CGPoint)",
			"UIKit.UITableViewDelegate_Extensions::GetHeightForFooter(UIKit.IUITableViewDelegate,UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewDelegate_Extensions::GetHeightForHeader(UIKit.IUITableViewDelegate,UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewDelegate_Extensions::GetHeightForRow(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::GetIndexPathForPreferredFocusedView(UIKit.IUITableViewDelegate,UIKit.UITableView)",
			"UIKit.UITableViewDelegate_Extensions::GetLeadingSwipeActionsConfiguration(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::GetPreviewForDismissingContextMenu(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UIContextMenuConfiguration)",
			"UIKit.UITableViewDelegate_Extensions::GetPreviewForHighlightingContextMenu(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UIContextMenuConfiguration)",
			"UIKit.UITableViewDelegate_Extensions::GetSelectionFollowsFocusForRow(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::GetTrailingSwipeActionsConfiguration(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::GetViewForFooter(UIKit.IUITableViewDelegate,UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewDelegate_Extensions::GetViewForHeader(UIKit.IUITableViewDelegate,UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewDelegate_Extensions::HeaderViewDisplayingEnded(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UIView,System.IntPtr)",
			"UIKit.UITableViewDelegate_Extensions::IndentationLevel(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::PerformAction(UIKit.IUITableViewDelegate,UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)",
			"UIKit.UITableViewDelegate_Extensions::RowDeselected(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::RowHighlighted(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::RowSelected(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::RowUnhighlighted(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::ShouldBeginMultipleSelectionInteraction(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::ShouldHighlightRow(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::ShouldIndentWhileEditing(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::ShouldShowMenu(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::ShouldSpringLoadRow(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath,UIKit.IUISpringLoadedInteractionContext)",
			"UIKit.UITableViewDelegate_Extensions::ShouldUpdateFocus(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UITableViewFocusUpdateContext)",
			"UIKit.UITableViewDelegate_Extensions::TitleForDeleteConfirmation(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::WillBeginEditing(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::WillDeselectRow(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::WillDisplay(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)",
			"UIKit.UITableViewDelegate_Extensions::WillDisplayContextMenu(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)",
			"UIKit.UITableViewDelegate_Extensions::WillDisplayFooterView(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UIView,System.IntPtr)",
			"UIKit.UITableViewDelegate_Extensions::WillDisplayHeaderView(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UIView,System.IntPtr)",
			"UIKit.UITableViewDelegate_Extensions::WillEndContextMenuInteraction(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)",
			"UIKit.UITableViewDelegate_Extensions::WillPerformPreviewAction(UIKit.IUITableViewDelegate,UIKit.UITableView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)",
			"UIKit.UITableViewDelegate_Extensions::WillSelectRow(UIKit.IUITableViewDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDiffableDataSource`2::.ctor(UIKit.UITableView,UIKit.UITableViewDiffableDataSourceCellProvider)",
			"UIKit.UITableViewDiffableDataSource`2::ApplySnapshot(UIKit.NSDiffableDataSourceSnapshot`2<SectionIdentifierType,ItemIdentifierType>,System.Boolean)",
			"UIKit.UITableViewDiffableDataSource`2::ApplySnapshot(UIKit.NSDiffableDataSourceSnapshot`2<SectionIdentifierType,ItemIdentifierType>,System.Boolean,System.Action)",
			"UIKit.UITableViewDiffableDataSource`2::ApplySnapshotUsingReloadData(UIKit.NSDiffableDataSourceSnapshot`2<SectionIdentifierType,ItemIdentifierType>)",
			"UIKit.UITableViewDiffableDataSource`2::ApplySnapshotUsingReloadData(UIKit.NSDiffableDataSourceSnapshot`2<SectionIdentifierType,ItemIdentifierType>,System.Action)",
			"UIKit.UITableViewDiffableDataSource`2::CanEditRow(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDiffableDataSource`2::CanMoveRow(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDiffableDataSource`2::CommitEditingStyle(UIKit.UITableView,UIKit.UITableViewCellEditingStyle,Foundation.NSIndexPath)",
			"UIKit.UITableViewDiffableDataSource`2::GetCell(UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDiffableDataSource`2::GetIndex(SectionIdentifierType)",
			"UIKit.UITableViewDiffableDataSource`2::GetIndexPath(ItemIdentifierType)",
			"UIKit.UITableViewDiffableDataSource`2::GetItemIdentifier(Foundation.NSIndexPath)",
			"UIKit.UITableViewDiffableDataSource`2::MoveRow(UIKit.UITableView,Foundation.NSIndexPath,Foundation.NSIndexPath)",
			"UIKit.UITableViewDiffableDataSource`2::NumberOfSections(UIKit.UITableView)",
			"UIKit.UITableViewDiffableDataSource`2::RowsInSection(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewDiffableDataSource`2::SectionFor(UIKit.UITableView,System.String,System.IntPtr)",
			"UIKit.UITableViewDiffableDataSource`2::SectionIndexTitles(UIKit.UITableView)",
			"UIKit.UITableViewDiffableDataSource`2::TitleForFooter(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewDiffableDataSource`2::TitleForHeader(UIKit.UITableView,System.IntPtr)",
			"UIKit.UITableViewDragDelegate_Extensions::DragSessionAllowsMoveOperation(UIKit.IUITableViewDragDelegate,UIKit.UITableView,UIKit.IUIDragSession)",
			"UIKit.UITableViewDragDelegate_Extensions::DragSessionDidEnd(UIKit.IUITableViewDragDelegate,UIKit.UITableView,UIKit.IUIDragSession)",
			"UIKit.UITableViewDragDelegate_Extensions::DragSessionIsRestrictedToDraggingApplication(UIKit.IUITableViewDragDelegate,UIKit.UITableView,UIKit.IUIDragSession)",
			"UIKit.UITableViewDragDelegate_Extensions::DragSessionWillBegin(UIKit.IUITableViewDragDelegate,UIKit.UITableView,UIKit.IUIDragSession)",
			"UIKit.UITableViewDragDelegate_Extensions::GetDragPreviewParameters(UIKit.IUITableViewDragDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDragDelegate_Extensions::GetItemsForAddingToDragSession(UIKit.IUITableViewDragDelegate,UIKit.UITableView,UIKit.IUIDragSession,Foundation.NSIndexPath,CoreGraphics.CGPoint)",
			"UIKit.UITableViewDragDelegateWrapper::GetItemsForBeginningDragSession(UIKit.UITableView,UIKit.IUIDragSession,Foundation.NSIndexPath)",
			"UIKit.UITableViewDropCoordinatorWrapper::DropItemIntoRow(UIKit.UIDragItem,Foundation.NSIndexPath,CoreGraphics.CGRect)",
			"UIKit.UITableViewDropCoordinatorWrapper::DropItemToPlaceholder(UIKit.UIDragItem,UIKit.UITableViewDropPlaceholder)",
			"UIKit.UITableViewDropCoordinatorWrapper::DropItemToRow(UIKit.UIDragItem,Foundation.NSIndexPath)",
			"UIKit.UITableViewDropCoordinatorWrapper::DropItemToTarget(UIKit.UIDragItem,UIKit.UIDragPreviewTarget)",
			"UIKit.UITableViewDropDelegate_Extensions::CanHandleDropSession(UIKit.IUITableViewDropDelegate,UIKit.UITableView,UIKit.IUIDropSession)",
			"UIKit.UITableViewDropDelegate_Extensions::DropSessionDidEnd(UIKit.IUITableViewDropDelegate,UIKit.UITableView,UIKit.IUIDropSession)",
			"UIKit.UITableViewDropDelegate_Extensions::DropSessionDidEnter(UIKit.IUITableViewDropDelegate,UIKit.UITableView,UIKit.IUIDropSession)",
			"UIKit.UITableViewDropDelegate_Extensions::DropSessionDidExit(UIKit.IUITableViewDropDelegate,UIKit.UITableView,UIKit.IUIDropSession)",
			"UIKit.UITableViewDropDelegate_Extensions::DropSessionDidUpdate(UIKit.IUITableViewDropDelegate,UIKit.UITableView,UIKit.IUIDropSession,Foundation.NSIndexPath)",
			"UIKit.UITableViewDropDelegate_Extensions::GetDropPreviewParameters(UIKit.IUITableViewDropDelegate,UIKit.UITableView,Foundation.NSIndexPath)",
			"UIKit.UITableViewDropDelegateWrapper::PerformDrop(UIKit.UITableView,UIKit.IUITableViewDropCoordinator)",
			"UIKit.UITableViewDropPlaceholder::.ctor(Foundation.NSIndexPath,System.String,System.Runtime.InteropServices.NFloat)",
			"UIKit.UITableViewHeaderFooterView::.ctor(Foundation.NSCoder)",
			"UIKit.UITableViewHeaderFooterView::.ctor(Foundation.NSString)",
			"UIKit.UITableViewHeaderFooterView::EncodeTo(Foundation.NSCoder)",
			"UIKit.UITableViewHeaderFooterView::set_BackgroundConfiguration(UIKit.UIBackgroundConfiguration)",
			"UIKit.UITableViewHeaderFooterView::set_BackgroundView(UIKit.UIView)",
			"UIKit.UITableViewHeaderFooterView::set_ContentConfiguration(UIKit.IUIContentConfiguration)",
			"UIKit.UITableViewHeaderFooterView::UpdateConfiguration(UIKit.UIViewConfigurationState)",
			"UIKit.UITableViewPlaceholder::.ctor(Foundation.NSIndexPath,System.String,System.Runtime.InteropServices.NFloat)",
			"UIKit.UITableViewRowAction::Copy(Foundation.NSZone)",
			"UIKit.UITableViewRowAction::set_BackgroundColor(UIKit.UIColor)",
			"UIKit.UITableViewRowAction::set_BackgroundEffect(UIKit.UIVisualEffect)",
			"UIKit.UITapGestureRecognizer::.ctor(Foundation.NSObject,ObjCRuntime.Selector)",
			"UIKit.UITargetedDragPreview::.ctor(UIKit.UIView)",
			"UIKit.UITargetedDragPreview::.ctor(UIKit.UIView,UIKit.UIDragPreviewParameters)",
			"UIKit.UITargetedDragPreview::.ctor(UIKit.UIView,UIKit.UIDragPreviewParameters,UIKit.UIDragPreviewTarget)",
			"UIKit.UITargetedDragPreview::Copy(Foundation.NSZone)",
			"UIKit.UITargetedDragPreview::GetPreview(Foundation.NSUrl,System.String,UIKit.UIDragPreviewTarget)",
			"UIKit.UITargetedDragPreview::GetPreview(Foundation.NSUrl,UIKit.UIDragPreviewTarget)",
			"UIKit.UITargetedDragPreview::GetRetargetedPreview(UIKit.UIDragPreviewTarget)",
			"UIKit.UITargetedPreview::.ctor(UIKit.UIView)",
			"UIKit.UITargetedPreview::.ctor(UIKit.UIView,UIKit.UIPreviewParameters)",
			"UIKit.UITargetedPreview::.ctor(UIKit.UIView,UIKit.UIPreviewParameters,UIKit.UIPreviewTarget)",
			"UIKit.UITargetedPreview::Copy(Foundation.NSZone)",
			"UIKit.UITargetedPreview::GetRetargetedPreview(UIKit.UIPreviewTarget)",
			"UIKit.UITextDragDelegate_Extensions::DragSessionDidEnd(UIKit.IUITextDragDelegate,UIKit.IUITextDraggable,UIKit.IUIDragSession,UIKit.UIDropOperation)",
			"UIKit.UITextDragDelegate_Extensions::DragSessionWillBegin(UIKit.IUITextDragDelegate,UIKit.IUITextDraggable,UIKit.IUIDragSession)",
			"UIKit.UITextDragDelegate_Extensions::GetItemsForDrag(UIKit.IUITextDragDelegate,UIKit.IUITextDraggable,UIKit.IUITextDragRequest)",
			"UIKit.UITextDragDelegate_Extensions::GetPreviewForLiftingItem(UIKit.IUITextDragDelegate,UIKit.IUITextDraggable,UIKit.UIDragItem,UIKit.IUIDragSession)",
			"UIKit.UITextDragDelegate_Extensions::WillAnimateLift(UIKit.IUITextDragDelegate,UIKit.IUITextDraggable,UIKit.IUIDragAnimating,UIKit.IUIDragSession)",
			"UIKit.UITextDraggableWrapper::ComparePosition(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextDraggableWrapper::GetBaseWritingDirection(UIKit.UITextPosition,UIKit.UITextStorageDirection)",
			"UIKit.UITextDraggableWrapper::GetCaretRectForPosition(UIKit.UITextPosition)",
			"UIKit.UITextDraggableWrapper::GetCharacterRange(UIKit.UITextPosition,UIKit.UITextLayoutDirection)",
			"UIKit.UITextDraggableWrapper::GetClosestPositionToPoint(CoreGraphics.CGPoint,UIKit.UITextRange)",
			"UIKit.UITextDraggableWrapper::GetFirstRectForRange(UIKit.UITextRange)",
			"UIKit.UITextDraggableWrapper::GetOffsetFromPosition(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextDraggableWrapper::GetPosition(UIKit.UITextPosition,System.IntPtr)",
			"UIKit.UITextDraggableWrapper::GetPosition(UIKit.UITextPosition,UIKit.UITextLayoutDirection,System.IntPtr)",
			"UIKit.UITextDraggableWrapper::GetPositionWithinRange(UIKit.UITextRange,UIKit.UITextLayoutDirection)",
			"UIKit.UITextDraggableWrapper::GetSelectionRects(UIKit.UITextRange)",
			"UIKit.UITextDraggableWrapper::GetTextRange(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextDraggableWrapper::ReplaceText(UIKit.UITextRange,System.String)",
			"UIKit.UITextDraggableWrapper::set_MarkedTextStyle(Foundation.NSDictionary)",
			"UIKit.UITextDraggableWrapper::set_SelectedTextRange(UIKit.UITextRange)",
			"UIKit.UITextDraggableWrapper::set_TextDragDelegate(UIKit.IUITextDragDelegate)",
			"UIKit.UITextDraggableWrapper::set_WeakInputDelegate(Foundation.NSObject)",
			"UIKit.UITextDraggableWrapper::SetBaseWritingDirectionforRange(Foundation.NSWritingDirection,UIKit.UITextRange)",
			"UIKit.UITextDraggableWrapper::TextInRange(UIKit.UITextRange)",
			"UIKit.UITextDragPreviewRenderer::.ctor(UIKit.NSLayoutManager,Foundation.NSRange)",
			"UIKit.UITextDragPreviewRenderer::.ctor(UIKit.NSLayoutManager,Foundation.NSRange,System.Boolean)",
			"UIKit.UITextDropDelegate_Extensions::DropSessionDidEnd(UIKit.IUITextDropDelegate,UIKit.IUITextDroppable,UIKit.IUIDropSession)",
			"UIKit.UITextDropDelegate_Extensions::DropSessionDidEnter(UIKit.IUITextDropDelegate,UIKit.IUITextDroppable,UIKit.IUIDropSession)",
			"UIKit.UITextDropDelegate_Extensions::DropSessionDidExit(UIKit.IUITextDropDelegate,UIKit.IUITextDroppable,UIKit.IUIDropSession)",
			"UIKit.UITextDropDelegate_Extensions::DropSessionDidUpdate(UIKit.IUITextDropDelegate,UIKit.IUITextDroppable,UIKit.IUIDropSession)",
			"UIKit.UITextDropDelegate_Extensions::GetPreviewForDroppingAllItems(UIKit.IUITextDropDelegate,UIKit.IUITextDroppable,UIKit.UITargetedDragPreview)",
			"UIKit.UITextDropDelegate_Extensions::GetProposalForDrop(UIKit.IUITextDropDelegate,UIKit.IUITextDroppable,UIKit.IUITextDropRequest)",
			"UIKit.UITextDropDelegate_Extensions::WillBecomeEditable(UIKit.IUITextDropDelegate,UIKit.IUITextDroppable,UIKit.IUITextDropRequest)",
			"UIKit.UITextDropDelegate_Extensions::WillPerformDrop(UIKit.IUITextDropDelegate,UIKit.IUITextDroppable,UIKit.IUITextDropRequest)",
			"UIKit.UITextDroppableWrapper::ComparePosition(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextDroppableWrapper::GetBaseWritingDirection(UIKit.UITextPosition,UIKit.UITextStorageDirection)",
			"UIKit.UITextDroppableWrapper::GetCaretRectForPosition(UIKit.UITextPosition)",
			"UIKit.UITextDroppableWrapper::GetCharacterRange(UIKit.UITextPosition,UIKit.UITextLayoutDirection)",
			"UIKit.UITextDroppableWrapper::GetClosestPositionToPoint(CoreGraphics.CGPoint,UIKit.UITextRange)",
			"UIKit.UITextDroppableWrapper::GetFirstRectForRange(UIKit.UITextRange)",
			"UIKit.UITextDroppableWrapper::GetOffsetFromPosition(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextDroppableWrapper::GetPosition(UIKit.UITextPosition,System.IntPtr)",
			"UIKit.UITextDroppableWrapper::GetPosition(UIKit.UITextPosition,UIKit.UITextLayoutDirection,System.IntPtr)",
			"UIKit.UITextDroppableWrapper::GetPositionWithinRange(UIKit.UITextRange,UIKit.UITextLayoutDirection)",
			"UIKit.UITextDroppableWrapper::GetSelectionRects(UIKit.UITextRange)",
			"UIKit.UITextDroppableWrapper::GetTextRange(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextDroppableWrapper::ReplaceText(UIKit.UITextRange,System.String)",
			"UIKit.UITextDroppableWrapper::set_MarkedTextStyle(Foundation.NSDictionary)",
			"UIKit.UITextDroppableWrapper::set_PasteConfiguration(UIKit.UIPasteConfiguration)",
			"UIKit.UITextDroppableWrapper::set_PasteDelegate(UIKit.IUITextPasteDelegate)",
			"UIKit.UITextDroppableWrapper::set_SelectedTextRange(UIKit.UITextRange)",
			"UIKit.UITextDroppableWrapper::set_TextDropDelegate(UIKit.IUITextDropDelegate)",
			"UIKit.UITextDroppableWrapper::set_WeakInputDelegate(Foundation.NSObject)",
			"UIKit.UITextDroppableWrapper::SetBaseWritingDirectionforRange(Foundation.NSWritingDirection,UIKit.UITextRange)",
			"UIKit.UITextDroppableWrapper::TextInRange(UIKit.UITextRange)",
			"UIKit.UITextDropProposal::Copy(Foundation.NSZone)",
			"UIKit.UITextField::.ctor(Foundation.NSCoder)",
			"UIKit.UITextField::ComparePosition(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextField::GetBaseWritingDirection(UIKit.UITextPosition,UIKit.UITextStorageDirection)",
			"UIKit.UITextField::GetCaretRectForPosition(UIKit.UITextPosition)",
			"UIKit.UITextField::GetCharacterOffsetOfPosition(UIKit.UITextPosition,UIKit.UITextRange)",
			"UIKit.UITextField::GetCharacterRange(UIKit.UITextPosition,UIKit.UITextLayoutDirection)",
			"UIKit.UITextField::GetClosestPositionToPoint(CoreGraphics.CGPoint,UIKit.UITextRange)",
			"UIKit.UITextField::GetFirstRectForRange(UIKit.UITextRange)",
			"UIKit.UITextField::GetFrameForDictationResultPlaceholder(Foundation.NSObject)",
			"UIKit.UITextField::GetOffsetFromPosition(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextField::GetPosition(UIKit.UITextPosition,System.IntPtr)",
			"UIKit.UITextField::GetPosition(UIKit.UITextPosition,UIKit.UITextLayoutDirection,System.IntPtr)",
			"UIKit.UITextField::GetPosition(UIKit.UITextRange,System.IntPtr)",
			"UIKit.UITextField::GetPositionWithinRange(UIKit.UITextRange,UIKit.UITextLayoutDirection)",
			"UIKit.UITextField::GetSelectionRects(UIKit.UITextRange)",
			"UIKit.UITextField::GetTextRange(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextField::GetTextStyling(UIKit.UITextPosition,UIKit.UITextStorageDirection)",
			"UIKit.UITextField::InsertDictationResult(Foundation.NSArray)",
			"UIKit.UITextField::RemoveDictationResultPlaceholder(Foundation.NSObject,System.Boolean)",
			"UIKit.UITextField::RemoveTextPlaceholder(UIKit.UITextPlaceholder)",
			"UIKit.UITextField::ReplaceText(UIKit.UITextRange,System.String)",
			"UIKit.UITextField::set_AttributedPlaceholder(Foundation.NSAttributedString)",
			"UIKit.UITextField::set_AttributedText(Foundation.NSAttributedString)",
			"UIKit.UITextField::set_Background(UIKit.UIImage)",
			"UIKit.UITextField::set_DisabledBackground(UIKit.UIImage)",
			"UIKit.UITextField::set_Font(UIKit.UIFont)",
			"UIKit.UITextField::set_InputAccessoryView(UIKit.UIView)",
			"UIKit.UITextField::set_InputView(UIKit.UIView)",
			"UIKit.UITextField::set_InteractionState(Foundation.NSObject)",
			"UIKit.UITextField::set_LeftView(UIKit.UIView)",
			"UIKit.UITextField::set_MarkedTextStyle(Foundation.NSDictionary)",
			"UIKit.UITextField::set_PasswordRules(UIKit.UITextInputPasswordRules)",
			"UIKit.UITextField::set_PasteConfiguration(UIKit.UIPasteConfiguration)",
			"UIKit.UITextField::set_RightView(UIKit.UIView)",
			"UIKit.UITextField::set_SelectedTextRange(UIKit.UITextRange)",
			"UIKit.UITextField::set_TextColor(UIKit.UIColor)",
			"UIKit.UITextField::set_TextContentType(Foundation.NSString)",
			"UIKit.UITextField::set_TypingAttributes(Foundation.NSDictionary)",
			"UIKit.UITextField::set_WeakDefaultTextAttributes(Foundation.NSDictionary)",
			"UIKit.UITextField::SetAttributedMarkedText(Foundation.NSAttributedString,Foundation.NSRange)",
			"UIKit.UITextField::SetBaseWritingDirectionforRange(Foundation.NSWritingDirection,UIKit.UITextRange)",
			"UIKit.UITextField::ShouldChangeTextInRange(UIKit.UITextRange,System.String)",
			"UIKit.UITextField::TextInRange(UIKit.UITextRange)",
			"UIKit.UITextFieldDelegate_Extensions::DidChangeSelection(UIKit.IUITextFieldDelegate,UIKit.UITextField)",
			"UIKit.UITextFieldDelegate_Extensions::EditingEnded(UIKit.IUITextFieldDelegate,UIKit.UITextField)",
			"UIKit.UITextFieldDelegate_Extensions::EditingEnded(UIKit.IUITextFieldDelegate,UIKit.UITextField,UIKit.UITextFieldDidEndEditingReason)",
			"UIKit.UITextFieldDelegate_Extensions::EditingStarted(UIKit.IUITextFieldDelegate,UIKit.UITextField)",
			"UIKit.UITextFieldDelegate_Extensions::ShouldBeginEditing(UIKit.IUITextFieldDelegate,UIKit.UITextField)",
			"UIKit.UITextFieldDelegate_Extensions::ShouldChangeCharacters(UIKit.IUITextFieldDelegate,UIKit.UITextField,Foundation.NSRange,System.String)",
			"UIKit.UITextFieldDelegate_Extensions::ShouldClear(UIKit.IUITextFieldDelegate,UIKit.UITextField)",
			"UIKit.UITextFieldDelegate_Extensions::ShouldEndEditing(UIKit.IUITextFieldDelegate,UIKit.UITextField)",
			"UIKit.UITextFieldDelegate_Extensions::ShouldReturn(UIKit.IUITextFieldDelegate,UIKit.UITextField)",
			"UIKit.UITextFormattingCoordinator::.ctor(UIKit.UIWindowScene)",
			"UIKit.UITextFormattingCoordinator::DidCancel(UIKit.UIFontPickerViewController)",
			"UIKit.UITextFormattingCoordinator::DidPickFont(UIKit.UIFontPickerViewController)",
			"UIKit.UITextFormattingCoordinator::GetTextFormattingCoordinator(UIKit.UIWindowScene)",
			"UIKit.UITextFormattingCoordinator::SetSelectedAttributes(Foundation.NSDictionary,System.Boolean)",
			"UIKit.UITextFormattingCoordinator::ToggleFontPanel(Foundation.NSObject)",
			"UIKit.UITextInput_Extensions::BeginFloatingCursor(UIKit.IUITextInput,CoreGraphics.CGPoint)",
			"UIKit.UITextInput_Extensions::DictationRecognitionFailed(UIKit.IUITextInput)",
			"UIKit.UITextInput_Extensions::DictationRecordingDidEnd(UIKit.IUITextInput)",
			"UIKit.UITextInput_Extensions::EndFloatingCursor(UIKit.IUITextInput)",
			"UIKit.UITextInput_Extensions::GetCharacterOffsetOfPosition(UIKit.IUITextInput,UIKit.UITextPosition,UIKit.UITextRange)",
			"UIKit.UITextInput_Extensions::GetFrameForDictationResultPlaceholder(UIKit.IUITextInput,Foundation.NSObject)",
			"UIKit.UITextInput_Extensions::GetPosition(UIKit.IUITextInput,UIKit.UITextRange,System.IntPtr)",
			"UIKit.UITextInput_Extensions::GetSelectionAffinity(UIKit.IUITextInput)",
			"UIKit.UITextInput_Extensions::GetTextInputView(UIKit.IUITextInput)",
			"UIKit.UITextInput_Extensions::GetTextStyling(UIKit.IUITextInput,UIKit.UITextPosition,UIKit.UITextStorageDirection)",
			"UIKit.UITextInput_Extensions::InsertDictationResult(UIKit.IUITextInput,Foundation.NSArray)",
			"UIKit.UITextInput_Extensions::InsertDictationResultPlaceholder(UIKit.IUITextInput)",
			"UIKit.UITextInput_Extensions::InsertText(UIKit.IUITextInput,System.String,System.String[],UIKit.UITextAlternativeStyle)",
			"UIKit.UITextInput_Extensions::InsertTextPlaceholder(UIKit.IUITextInput,CoreGraphics.CGSize)",
			"UIKit.UITextInput_Extensions::RemoveDictationResultPlaceholder(UIKit.IUITextInput,Foundation.NSObject,System.Boolean)",
			"UIKit.UITextInput_Extensions::RemoveTextPlaceholder(UIKit.IUITextInput,UIKit.UITextPlaceholder)",
			"UIKit.UITextInput_Extensions::SetAttributedMarkedText(UIKit.IUITextInput,Foundation.NSAttributedString,Foundation.NSRange)",
			"UIKit.UITextInput_Extensions::SetSelectionAffinity(UIKit.IUITextInput,UIKit.UITextStorageDirection)",
			"UIKit.UITextInput_Extensions::ShouldChangeTextInRange(UIKit.IUITextInput,UIKit.UITextRange,System.String)",
			"UIKit.UITextInput_Extensions::UpdateFloatingCursor(UIKit.IUITextInput,CoreGraphics.CGPoint)",
			"UIKit.UITextInputDelegateWrapper::SelectionDidChange(UIKit.IUITextInput)",
			"UIKit.UITextInputDelegateWrapper::SelectionWillChange(UIKit.IUITextInput)",
			"UIKit.UITextInputDelegateWrapper::TextDidChange(UIKit.IUITextInput)",
			"UIKit.UITextInputDelegateWrapper::TextWillChange(UIKit.IUITextInput)",
			"UIKit.UITextInputMode::.ctor(Foundation.NSCoder)",
			"UIKit.UITextInputMode::EncodeTo(Foundation.NSCoder)",
			"UIKit.UITextInputPasswordRules::.ctor(Foundation.NSCoder)",
			"UIKit.UITextInputPasswordRules::Copy(Foundation.NSZone)",
			"UIKit.UITextInputPasswordRules::EncodeTo(Foundation.NSCoder)",
			"UIKit.UITextInputStringTokenizer::.ctor(UIKit.IUITextInput)",
			"UIKit.UITextInputStringTokenizer::GetPosition(UIKit.UITextPosition,UIKit.UITextGranularity,UIKit.UITextDirection)",
			"UIKit.UITextInputStringTokenizer::GetRangeEnclosingPosition(UIKit.UITextPosition,UIKit.UITextGranularity,UIKit.UITextDirection)",
			"UIKit.UITextInputStringTokenizer::ProbeDirection(UIKit.UITextPosition,UIKit.UITextGranularity,UIKit.UITextDirection)",
			"UIKit.UITextInputStringTokenizer::ProbeDirectionWithinTextUnit(UIKit.UITextPosition,UIKit.UITextGranularity,UIKit.UITextDirection)",
			"UIKit.UITextInputTokenizerWrapper::GetPosition(UIKit.UITextPosition,UIKit.UITextGranularity,UIKit.UITextDirection)",
			"UIKit.UITextInputTokenizerWrapper::GetRangeEnclosingPosition(UIKit.UITextPosition,UIKit.UITextGranularity,UIKit.UITextDirection)",
			"UIKit.UITextInputTokenizerWrapper::ProbeDirection(UIKit.UITextPosition,UIKit.UITextGranularity,UIKit.UITextDirection)",
			"UIKit.UITextInputTokenizerWrapper::ProbeDirectionWithinTextUnit(UIKit.UITextPosition,UIKit.UITextGranularity,UIKit.UITextDirection)",
			"UIKit.UITextInputTraits_Extensions::GetAutocapitalizationType(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::GetAutocorrectionType(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::GetEnablesReturnKeyAutomatically(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::GetKeyboardAppearance(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::GetKeyboardType(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::GetPasswordRules(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::GetReturnKeyType(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::GetSecureTextEntry(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::GetSmartDashesType(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::GetSmartInsertDeleteType(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::GetSmartQuotesType(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::GetSpellCheckingType(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::GetTextContentType(UIKit.IUITextInputTraits)",
			"UIKit.UITextInputTraits_Extensions::SetAutocapitalizationType(UIKit.IUITextInputTraits,UIKit.UITextAutocapitalizationType)",
			"UIKit.UITextInputTraits_Extensions::SetAutocorrectionType(UIKit.IUITextInputTraits,UIKit.UITextAutocorrectionType)",
			"UIKit.UITextInputTraits_Extensions::SetEnablesReturnKeyAutomatically(UIKit.IUITextInputTraits,System.Boolean)",
			"UIKit.UITextInputTraits_Extensions::SetKeyboardAppearance(UIKit.IUITextInputTraits,UIKit.UIKeyboardAppearance)",
			"UIKit.UITextInputTraits_Extensions::SetKeyboardType(UIKit.IUITextInputTraits,UIKit.UIKeyboardType)",
			"UIKit.UITextInputTraits_Extensions::SetPasswordRules(UIKit.IUITextInputTraits,UIKit.UITextInputPasswordRules)",
			"UIKit.UITextInputTraits_Extensions::SetReturnKeyType(UIKit.IUITextInputTraits,UIKit.UIReturnKeyType)",
			"UIKit.UITextInputTraits_Extensions::SetSecureTextEntry(UIKit.IUITextInputTraits,System.Boolean)",
			"UIKit.UITextInputTraits_Extensions::SetSmartDashesType(UIKit.IUITextInputTraits,UIKit.UITextSmartDashesType)",
			"UIKit.UITextInputTraits_Extensions::SetSmartInsertDeleteType(UIKit.IUITextInputTraits,UIKit.UITextSmartInsertDeleteType)",
			"UIKit.UITextInputTraits_Extensions::SetSmartQuotesType(UIKit.IUITextInputTraits,UIKit.UITextSmartQuotesType)",
			"UIKit.UITextInputTraits_Extensions::SetSpellCheckingType(UIKit.IUITextInputTraits,UIKit.UITextSpellCheckingType)",
			"UIKit.UITextInputTraits_Extensions::SetTextContentType(UIKit.IUITextInputTraits,Foundation.NSString)",
			"UIKit.UITextInputWrapper::ComparePosition(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextInputWrapper::GetBaseWritingDirection(UIKit.UITextPosition,UIKit.UITextStorageDirection)",
			"UIKit.UITextInputWrapper::GetCaretRectForPosition(UIKit.UITextPosition)",
			"UIKit.UITextInputWrapper::GetCharacterRange(UIKit.UITextPosition,UIKit.UITextLayoutDirection)",
			"UIKit.UITextInputWrapper::GetClosestPositionToPoint(CoreGraphics.CGPoint,UIKit.UITextRange)",
			"UIKit.UITextInputWrapper::GetFirstRectForRange(UIKit.UITextRange)",
			"UIKit.UITextInputWrapper::GetOffsetFromPosition(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextInputWrapper::GetPosition(UIKit.UITextPosition,System.IntPtr)",
			"UIKit.UITextInputWrapper::GetPosition(UIKit.UITextPosition,UIKit.UITextLayoutDirection,System.IntPtr)",
			"UIKit.UITextInputWrapper::GetPositionWithinRange(UIKit.UITextRange,UIKit.UITextLayoutDirection)",
			"UIKit.UITextInputWrapper::GetSelectionRects(UIKit.UITextRange)",
			"UIKit.UITextInputWrapper::GetTextRange(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextInputWrapper::ReplaceText(UIKit.UITextRange,System.String)",
			"UIKit.UITextInputWrapper::set_MarkedTextStyle(Foundation.NSDictionary)",
			"UIKit.UITextInputWrapper::set_SelectedTextRange(UIKit.UITextRange)",
			"UIKit.UITextInputWrapper::set_WeakInputDelegate(Foundation.NSObject)",
			"UIKit.UITextInputWrapper::SetBaseWritingDirectionforRange(Foundation.NSWritingDirection,UIKit.UITextRange)",
			"UIKit.UITextInputWrapper::TextInRange(UIKit.UITextRange)",
			"UIKit.UITextInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UITextInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UITextInteractionDelegate_Extensions::DidEnd(UIKit.IUITextInteractionDelegate,UIKit.UITextInteraction)",
			"UIKit.UITextInteractionDelegate_Extensions::ShouldBegin(UIKit.IUITextInteractionDelegate,UIKit.UITextInteraction,CoreGraphics.CGPoint)",
			"UIKit.UITextInteractionDelegate_Extensions::WillBegin(UIKit.IUITextInteractionDelegate,UIKit.UITextInteraction)",
			"UIKit.UITextPasteConfigurationSupportingWrapper::set_PasteConfiguration(UIKit.UIPasteConfiguration)",
			"UIKit.UITextPasteConfigurationSupportingWrapper::set_PasteDelegate(UIKit.IUITextPasteDelegate)",
			"UIKit.UITextPasteDelegate_Extensions::CombineItemAttributedStrings(UIKit.IUITextPasteDelegate,UIKit.IUITextPasteConfigurationSupporting,Foundation.NSAttributedString[],UIKit.UITextRange)",
			"UIKit.UITextPasteDelegate_Extensions::PerformPaste(UIKit.IUITextPasteDelegate,UIKit.IUITextPasteConfigurationSupporting,Foundation.NSAttributedString,UIKit.UITextRange)",
			"UIKit.UITextPasteDelegate_Extensions::ShouldAnimatePaste(UIKit.IUITextPasteDelegate,UIKit.IUITextPasteConfigurationSupporting,Foundation.NSAttributedString,UIKit.UITextRange)",
			"UIKit.UITextPasteDelegate_Extensions::TransformPasteItem(UIKit.IUITextPasteDelegate,UIKit.IUITextPasteConfigurationSupporting,UIKit.IUITextPasteItem)",
			"UIKit.UITextPasteItemWrapper::SetAttachmentResult(UIKit.NSTextAttachment)",
			"UIKit.UITextPasteItemWrapper::SetAttributedStringResult(Foundation.NSAttributedString)",
			"UIKit.UITextView::.ctor(CoreGraphics.CGRect,UIKit.NSTextContainer)",
			"UIKit.UITextView::.ctor(Foundation.NSCoder)",
			"UIKit.UITextView::ComparePosition(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextView::EncodeTo(Foundation.NSCoder)",
			"UIKit.UITextView::GetBaseWritingDirection(UIKit.UITextPosition,UIKit.UITextStorageDirection)",
			"UIKit.UITextView::GetCaretRectForPosition(UIKit.UITextPosition)",
			"UIKit.UITextView::GetCharacterOffsetOfPosition(UIKit.UITextPosition,UIKit.UITextRange)",
			"UIKit.UITextView::GetCharacterRange(UIKit.UITextPosition,UIKit.UITextLayoutDirection)",
			"UIKit.UITextView::GetClosestPositionToPoint(CoreGraphics.CGPoint,UIKit.UITextRange)",
			"UIKit.UITextView::GetFirstRectForRange(UIKit.UITextRange)",
			"UIKit.UITextView::GetFrameForDictationResultPlaceholder(Foundation.NSObject)",
			"UIKit.UITextView::GetOffsetFromPosition(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextView::GetPosition(UIKit.UITextPosition,System.IntPtr)",
			"UIKit.UITextView::GetPosition(UIKit.UITextPosition,UIKit.UITextLayoutDirection,System.IntPtr)",
			"UIKit.UITextView::GetPosition(UIKit.UITextRange,System.IntPtr)",
			"UIKit.UITextView::GetPositionWithinRange(UIKit.UITextRange,UIKit.UITextLayoutDirection)",
			"UIKit.UITextView::GetSelectionRects(UIKit.UITextRange)",
			"UIKit.UITextView::GetTextRange(UIKit.UITextPosition,UIKit.UITextPosition)",
			"UIKit.UITextView::GetTextStyling(UIKit.UITextPosition,UIKit.UITextStorageDirection)",
			"UIKit.UITextView::InsertDictationResult(Foundation.NSArray)",
			"UIKit.UITextView::RemoveDictationResultPlaceholder(Foundation.NSObject,System.Boolean)",
			"UIKit.UITextView::RemoveTextPlaceholder(UIKit.UITextPlaceholder)",
			"UIKit.UITextView::ReplaceText(UIKit.UITextRange,System.String)",
			"UIKit.UITextView::set_AttributedText(Foundation.NSAttributedString)",
			"UIKit.UITextView::set_Font(UIKit.UIFont)",
			"UIKit.UITextView::set_InputAccessoryView(UIKit.UIView)",
			"UIKit.UITextView::set_InputView(UIKit.UIView)",
			"UIKit.UITextView::set_InteractionState(Foundation.NSObject)",
			"UIKit.UITextView::set_MarkedTextStyle(Foundation.NSDictionary)",
			"UIKit.UITextView::set_PasswordRules(UIKit.UITextInputPasswordRules)",
			"UIKit.UITextView::set_PasteConfiguration(UIKit.UIPasteConfiguration)",
			"UIKit.UITextView::set_SelectedTextRange(UIKit.UITextRange)",
			"UIKit.UITextView::set_TextColor(UIKit.UIColor)",
			"UIKit.UITextView::set_TextContentType(Foundation.NSString)",
			"UIKit.UITextView::set_TypingAttributes(Foundation.NSDictionary)",
			"UIKit.UITextView::set_WeakLinkTextAttributes(Foundation.NSDictionary)",
			"UIKit.UITextView::SetAttributedMarkedText(Foundation.NSAttributedString,Foundation.NSRange)",
			"UIKit.UITextView::SetBaseWritingDirectionforRange(Foundation.NSWritingDirection,UIKit.UITextRange)",
			"UIKit.UITextView::ShouldChangeTextInRange(UIKit.UITextRange,System.String)",
			"UIKit.UITextView::TextInRange(UIKit.UITextRange)",
			"UIKit.UITextViewDelegate_Extensions::Changed(UIKit.IUITextViewDelegate,UIKit.UITextView)",
			"UIKit.UITextViewDelegate_Extensions::EditingEnded(UIKit.IUITextViewDelegate,UIKit.UITextView)",
			"UIKit.UITextViewDelegate_Extensions::EditingStarted(UIKit.IUITextViewDelegate,UIKit.UITextView)",
			"UIKit.UITextViewDelegate_Extensions::SelectionChanged(UIKit.IUITextViewDelegate,UIKit.UITextView)",
			"UIKit.UITextViewDelegate_Extensions::ShouldBeginEditing(UIKit.IUITextViewDelegate,UIKit.UITextView)",
			"UIKit.UITextViewDelegate_Extensions::ShouldChangeText(UIKit.IUITextViewDelegate,UIKit.UITextView,Foundation.NSRange,System.String)",
			"UIKit.UITextViewDelegate_Extensions::ShouldEndEditing(UIKit.IUITextViewDelegate,UIKit.UITextView)",
			"UIKit.UITextViewDelegate_Extensions::ShouldInteractWithTextAttachment(UIKit.IUITextViewDelegate,UIKit.UITextView,UIKit.NSTextAttachment,Foundation.NSRange)",
			"UIKit.UITextViewDelegate_Extensions::ShouldInteractWithTextAttachment(UIKit.IUITextViewDelegate,UIKit.UITextView,UIKit.NSTextAttachment,Foundation.NSRange,UIKit.UITextItemInteraction)",
			"UIKit.UITextViewDelegate_Extensions::ShouldInteractWithUrl(UIKit.IUITextViewDelegate,UIKit.UITextView,Foundation.NSUrl,Foundation.NSRange)",
			"UIKit.UITextViewDelegate_Extensions::ShouldInteractWithUrl(UIKit.IUITextViewDelegate,UIKit.UITextView,Foundation.NSUrl,Foundation.NSRange,UIKit.UITextItemInteraction)",
			"UIKit.UITimingCurveProviderWrapper::Copy(Foundation.NSZone)",
			"UIKit.UITimingCurveProviderWrapper::EncodeTo(Foundation.NSCoder)",
			"UIKit.UITitlebar::set_RepresentedUrl(Foundation.NSUrl)",
			"UIKit.UITitlebar::set_Toolbar(AppKit.NSToolbar)",
			"UIKit.UIToolbar/UIToolbarAppearance::set_BarTintColor(UIKit.UIColor)",
			"UIKit.UIToolbar/UIToolbarAppearance::set_CompactAppearance(UIKit.UIToolbarAppearance)",
			"UIKit.UIToolbar/UIToolbarAppearance::set_CompactScrollEdgeAppearance(UIKit.UIToolbarAppearance)",
			"UIKit.UIToolbar/UIToolbarAppearance::set_ScrollEdgeAppearance(UIKit.UIToolbarAppearance)",
			"UIKit.UIToolbar/UIToolbarAppearance::set_StandardAppearance(UIKit.UIToolbarAppearance)",
			"UIKit.UIToolbar/UIToolbarAppearance::SetBackgroundImage(UIKit.UIImage,UIKit.UIToolbarPosition,UIKit.UIBarMetrics)",
			"UIKit.UIToolbar/UIToolbarAppearance::SetShadowImage(UIKit.UIImage,UIKit.UIToolbarPosition)",
			"UIKit.UIToolbar::.ctor(Foundation.NSCoder)",
			"UIKit.UIToolbar::set_BarTintColor(UIKit.UIColor)",
			"UIKit.UIToolbar::set_CompactAppearance(UIKit.UIToolbarAppearance)",
			"UIKit.UIToolbar::set_CompactScrollEdgeAppearance(UIKit.UIToolbarAppearance)",
			"UIKit.UIToolbar::set_ScrollEdgeAppearance(UIKit.UIToolbarAppearance)",
			"UIKit.UIToolbar::set_StandardAppearance(UIKit.UIToolbarAppearance)",
			"UIKit.UIToolbar::SetBackgroundImage(UIKit.UIImage,UIKit.UIToolbarPosition,UIKit.UIBarMetrics)",
			"UIKit.UIToolbar::SetShadowImage(UIKit.UIImage,UIKit.UIToolbarPosition)",
			"UIKit.UIToolbarAppearance::.ctor(Foundation.NSCoder)",
			"UIKit.UIToolbarAppearance::.ctor(UIKit.UIBarAppearance)",
			"UIKit.UIToolbarAppearance::set_ButtonAppearance(UIKit.UIBarButtonItemAppearance)",
			"UIKit.UIToolbarAppearance::set_DoneButtonAppearance(UIKit.UIBarButtonItemAppearance)",
			"UIKit.UIToolTipInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UIToolTipInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UIToolTipInteractionDelegate_Extensions::GetConfiguration(UIKit.IUIToolTipInteractionDelegate,UIKit.UIToolTipInteraction,CoreGraphics.CGPoint)",
			"UIKit.UITouch::GetAzimuthAngle(UIKit.UIView)",
			"UIKit.UITouch::GetAzimuthUnitVector(UIKit.UIView)",
			"UIKit.UITouch::GetPreciseLocation(UIKit.UIView)",
			"UIKit.UITouch::GetPrecisePreviousLocation(UIKit.UIView)",
			"UIKit.UITouch::LocationInView(UIKit.UIView)",
			"UIKit.UITouch::PreviousLocationInView(UIKit.UIView)",
			"UIKit.UITrackingLayoutGuide::.ctor(Foundation.NSCoder)",
			"UIKit.UITraitCollection::.ctor(Foundation.NSCoder)",
			"UIKit.UITraitCollection::Contains(UIKit.UITraitCollection)",
			"UIKit.UITraitCollection::Copy(Foundation.NSZone)",
			"UIKit.UITraitCollection::EncodeTo(Foundation.NSCoder)",
			"UIKit.UITraitCollection::FromPreferredContentSizeCategory(Foundation.NSString)",
			"UIKit.UITraitCollection::HasDifferentColorAppearanceComparedTo(UIKit.UITraitCollection)",
			"UIKit.UITraitCollection::set_CurrentTraitCollection(UIKit.UITraitCollection)",
			"UIKit.UITraitEnvironmentWrapper::TraitCollectionDidChange(UIKit.UITraitCollection)",
			"UIKit.UIUserActivityRestoringWrapper::RestoreUserActivityState(Foundation.NSUserActivity)",
			"UIKit.UIUserNotificationAction::.ctor(Foundation.NSCoder)",
			"UIKit.UIUserNotificationAction::Copy(Foundation.NSZone)",
			"UIKit.UIUserNotificationAction::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIUserNotificationAction::MutableCopy(Foundation.NSZone)",
			"UIKit.UIUserNotificationCategory::.ctor(Foundation.NSCoder)",
			"UIKit.UIUserNotificationCategory::Copy(Foundation.NSZone)",
			"UIKit.UIUserNotificationCategory::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIUserNotificationCategory::MutableCopy(Foundation.NSZone)",
			"UIKit.UIUserNotificationSettings::.ctor(Foundation.NSCoder)",
			"UIKit.UIUserNotificationSettings::Copy(Foundation.NSZone)",
			"UIKit.UIUserNotificationSettings::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIUserNotificationSettings::GetSettingsForTypes(UIKit.UIUserNotificationType,Foundation.NSSet)",
			"UIKit.UIVibrancyEffect::.ctor(Foundation.NSCoder)",
			"UIKit.UIVibrancyEffect::FromBlurEffect(UIKit.UIBlurEffect)",
			"UIKit.UIVibrancyEffect::FromBlurEffect(UIKit.UIBlurEffect,UIKit.UIVibrancyEffectStyle)",
			"UIKit.UIVideo::SaveToPhotosAlbum(System.String,UIKit.UIVideo/SaveStatus)",
			"UIKit.UIVideoEditorController::.ctor(Foundation.NSCoder)",
			"UIKit.UIVideoEditorControllerDelegate_Extensions::Failed(UIKit.IUIVideoEditorControllerDelegate,UIKit.UIVideoEditorController,Foundation.NSError)",
			"UIKit.UIVideoEditorControllerDelegate_Extensions::UserCancelled(UIKit.IUIVideoEditorControllerDelegate,UIKit.UIVideoEditorController)",
			"UIKit.UIVideoEditorControllerDelegate_Extensions::VideoSaved(UIKit.IUIVideoEditorControllerDelegate,UIKit.UIVideoEditorController,System.String)",
			"UIKit.UIView/UIViewAppearance::set_BackgroundColor(UIKit.UIColor)",
			"UIKit.UIView/UIViewAppearance::set_TintColor(UIKit.UIColor)",
			"UIKit.UIView::.ctor(Foundation.NSCoder)",
			"UIKit.UIView::ActionForLayer(CoreAnimation.CALayer,System.String)",
			"UIKit.UIView::AddConstraint(UIKit.NSLayoutConstraint)",
			"UIKit.UIView::AddGestureRecognizer(UIKit.UIGestureRecognizer)",
			"UIKit.UIView::AddInteraction(UIKit.IUIInteraction)",
			"UIKit.UIView::AddLayoutGuide(UIKit.UILayoutGuide)",
			"UIKit.UIView::AddMotionEffect(UIKit.UIMotionEffect)",
			"UIKit.UIView::AddSubview(UIKit.UIView)",
			"UIKit.UIView::BringSubviewToFront(UIKit.UIView)",
			"UIKit.UIView::ConvertPointFromCoordinateSpace(CoreGraphics.CGPoint,UIKit.IUICoordinateSpace)",
			"UIKit.UIView::ConvertPointFromView(CoreGraphics.CGPoint,UIKit.UIView)",
			"UIKit.UIView::ConvertPointToCoordinateSpace(CoreGraphics.CGPoint,UIKit.IUICoordinateSpace)",
			"UIKit.UIView::ConvertPointToView(CoreGraphics.CGPoint,UIKit.UIView)",
			"UIKit.UIView::ConvertRectFromCoordinateSpace(CoreGraphics.CGRect,UIKit.IUICoordinateSpace)",
			"UIKit.UIView::ConvertRectFromView(CoreGraphics.CGRect,UIKit.UIView)",
			"UIKit.UIView::ConvertRectToCoordinateSpace(CoreGraphics.CGRect,UIKit.IUICoordinateSpace)",
			"UIKit.UIView::ConvertRectToView(CoreGraphics.CGRect,UIKit.UIView)",
			"UIKit.UIView::DecodeRestorableState(Foundation.NSCoder)",
			"UIKit.UIView::DidHintFocusMovement(UIKit.UIFocusMovementHint)",
			"UIKit.UIView::DidUpdateFocus(UIKit.UIFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)",
			"UIKit.UIView::DisplayLayer(CoreAnimation.CALayer)",
			"UIKit.UIView::DrawLayer(CoreAnimation.CALayer,CoreGraphics.CGContext)",
			"UIKit.UIView::DrawRect(CoreGraphics.CGRect,UIKit.UIViewPrintFormatter)",
			"UIKit.UIView::EncodeRestorableState(Foundation.NSCoder)",
			"UIKit.UIView::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIView::GestureRecognizerShouldBegin(UIKit.UIGestureRecognizer)",
			"UIKit.UIView::GetSoundIdentifier(UIKit.UIFocusUpdateContext)",
			"UIKit.UIView::HitTest(CoreGraphics.CGPoint,UIKit.UIEvent)",
			"UIKit.UIView::InsertSubview(UIKit.UIView,System.IntPtr)",
			"UIKit.UIView::InsertSubviewAbove(UIKit.UIView,UIKit.UIView)",
			"UIKit.UIView::InsertSubviewBelow(UIKit.UIView,UIKit.UIView)",
			"UIKit.UIView::IsDescendantOfView(UIKit.UIView)",
			"UIKit.UIView::LayoutSublayersOfLayer(CoreAnimation.CALayer)",
			"UIKit.UIView::PointInside(CoreGraphics.CGPoint,UIKit.UIEvent)",
			"UIKit.UIView::RemoveConstraint(UIKit.NSLayoutConstraint)",
			"UIKit.UIView::RemoveGestureRecognizer(UIKit.UIGestureRecognizer)",
			"UIKit.UIView::RemoveInteraction(UIKit.IUIInteraction)",
			"UIKit.UIView::RemoveLayoutGuide(UIKit.UILayoutGuide)",
			"UIKit.UIView::RemoveMotionEffect(UIKit.UIMotionEffect)",
			"UIKit.UIView::SendSubviewToBack(UIKit.UIView)",
			"UIKit.UIView::set_AccessibilityAttributedHint(Foundation.NSAttributedString)",
			"UIKit.UIView::set_AccessibilityAttributedLabel(Foundation.NSAttributedString)",
			"UIKit.UIView::set_AccessibilityAttributedValue(Foundation.NSAttributedString)",
			"UIKit.UIView::set_AccessibilityPath(UIKit.UIBezierPath)",
			"UIKit.UIView::set_BackgroundColor(UIKit.UIColor)",
			"UIKit.UIView::set_FocusEffect(UIKit.UIFocusEffect)",
			"UIKit.UIView::set_LargeContentImage(UIKit.UIImage)",
			"UIKit.UIView::set_MaskView(UIKit.UIView)",
			"UIKit.UIView::set_MaximumContentSizeCategory(UIKit.UIContentSizeCategory)",
			"UIKit.UIView::set_MinimumContentSizeCategory(UIKit.UIContentSizeCategory)",
			"UIKit.UIView::set_TintColor(UIKit.UIColor)",
			"UIKit.UIView::SetAnimationDelegate(Foundation.NSObject)",
			"UIKit.UIView::SetAnimationStartDate(Foundation.NSDate)",
			"UIKit.UIView::SetAnimationTransition(UIKit.UIViewAnimationTransition,UIKit.UIView,System.Boolean)",
			"UIKit.UIView::ShouldUpdateFocus(UIKit.UIFocusUpdateContext)",
			"UIKit.UIView::SubviewAdded(UIKit.UIView)",
			"UIKit.UIView::TraitCollectionDidChange(UIKit.UITraitCollection)",
			"UIKit.UIView::TransitionNotify(UIKit.UIView,System.Double,UIKit.UIViewAnimationOptions,System.Action,UIKit.UICompletionHandler)",
			"UIKit.UIView::TransitionNotify(UIKit.UIView,UIKit.UIView,System.Double,UIKit.UIViewAnimationOptions,UIKit.UICompletionHandler)",
			"UIKit.UIView::WillDrawLayer(CoreAnimation.CALayer)",
			"UIKit.UIView::WillMoveToSuperview(UIKit.UIView)",
			"UIKit.UIView::WillMoveToWindow(UIKit.UIWindow)",
			"UIKit.UIView::WillRemoveSubview(UIKit.UIView)",
			"UIKit.UIView_UITextField::EndEditing(UIKit.UIView,System.Boolean)",
			"UIKit.UIViewConfigurationState::.ctor(Foundation.NSCoder)",
			"UIKit.UIViewConfigurationState::.ctor(UIKit.UITraitCollection)",
			"UIKit.UIViewConfigurationState::Copy(Foundation.NSZone)",
			"UIKit.UIViewConfigurationState::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIViewConfigurationState::set_TraitCollection(UIKit.UITraitCollection)",
			"UIKit.UIViewConfigurationState::SetCustomState(Foundation.NSObject,System.String)",
			"UIKit.UIViewConfigurationState::SetObject(Foundation.NSObject,System.String)",
			"UIKit.UIViewController::.ctor(Foundation.NSCoder)",
			"UIKit.UIViewController::.ctor(System.String,Foundation.NSBundle)",
			"UIKit.UIViewController::AddChildViewController(UIKit.UIViewController)",
			"UIKit.UIViewController::AddKeyCommand(UIKit.UIKeyCommand)",
			"UIKit.UIViewController::BeginRequestWithExtensionContext(Foundation.NSExtensionContext)",
			"UIKit.UIViewController::CanPerformUnwind(ObjCRuntime.Selector,UIKit.UIViewController,Foundation.NSObject)",
			"UIKit.UIViewController::CanPerformUnwindDeprecated(ObjCRuntime.Selector,UIKit.UIViewController,Foundation.NSObject)",
			"UIKit.UIViewController::DecodeRestorableState(Foundation.NSCoder)",
			"UIKit.UIViewController::DidMoveToParentViewController(UIKit.UIViewController)",
			"UIKit.UIViewController::DidUpdateFocus(UIKit.UIFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)",
			"UIKit.UIViewController::EncodeRestorableState(Foundation.NSCoder)",
			"UIKit.UIViewController::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIViewController::GetAllowedChildViewControllersForUnwinding(UIKit.UIStoryboardUnwindSegueSource)",
			"UIKit.UIViewController::GetChildViewControllerContainingSegueSource(UIKit.UIStoryboardUnwindSegueSource)",
			"UIKit.UIViewController::GetOverrideTraitCollectionForChildViewController(UIKit.UIViewController)",
			"UIKit.UIViewController::GetSegueForUnwinding(UIKit.UIViewController,UIKit.UIViewController,System.String)",
			"UIKit.UIViewController::GetSizeForChildContentContainer(UIKit.IUIContentContainer,CoreGraphics.CGSize)",
			"UIKit.UIViewController::GetSoundIdentifier(UIKit.UIFocusUpdateContext)",
			"UIKit.UIViewController::GetTargetViewControllerForAction(ObjCRuntime.Selector,Foundation.NSObject)",
			"UIKit.UIViewController::GetViewControllerForUnwind(ObjCRuntime.Selector,UIKit.UIViewController,Foundation.NSObject)",
			"UIKit.UIViewController::PerformSegue(System.String,Foundation.NSObject)",
			"UIKit.UIViewController::PreferredContentSizeDidChangeForChildContentContainer(UIKit.IUIContentContainer)",
			"UIKit.UIViewController::PrepareForSegue(UIKit.UIStoryboardSegue,Foundation.NSObject)",
			"UIKit.UIViewController::PresentModalViewController(UIKit.UIViewController,System.Boolean)",
			"UIKit.UIViewController::PresentMoviePlayerViewController(MediaPlayer.MPMoviePlayerViewController)",
			"UIKit.UIViewController::PresentViewController(UIKit.UIViewController,System.Boolean,System.Action)",
			"UIKit.UIViewController::RegisterForPreviewingWithDelegate(UIKit.IUIViewControllerPreviewingDelegate,UIKit.UIView)",
			"UIKit.UIViewController::RemoveKeyCommand(UIKit.UIKeyCommand)",
			"UIKit.UIViewController::set_RestorationClass(ObjCRuntime.Class)",
			"UIKit.UIViewController::set_TabBarItem(UIKit.UITabBarItem)",
			"UIKit.UIViewController::set_TabBarObservedScrollView(UIKit.UIScrollView)",
			"UIKit.UIViewController::set_View(UIKit.UIView)",
			"UIKit.UIViewController::SetContentScrollView(UIKit.UIScrollView,UIKit.NSDirectionalRectEdge)",
			"UIKit.UIViewController::SetOverrideTraitCollection(UIKit.UITraitCollection,UIKit.UIViewController)",
			"UIKit.UIViewController::ShouldPerformSegue(System.String,Foundation.NSObject)",
			"UIKit.UIViewController::ShouldUpdateFocus(UIKit.UIFocusUpdateContext)",
			"UIKit.UIViewController::ShowDetailViewController(UIKit.UIViewController,Foundation.NSObject)",
			"UIKit.UIViewController::ShowViewController(UIKit.UIViewController,Foundation.NSObject)",
			"UIKit.UIViewController::SystemLayoutFittingSizeDidChangeForChildContentContainer(UIKit.IUIContentContainer)",
			"UIKit.UIViewController::TraitCollectionDidChange(UIKit.UITraitCollection)",
			"UIKit.UIViewController::Transition(UIKit.UIViewController,UIKit.UIViewController,System.Double,UIKit.UIViewAnimationOptions,System.Action,UIKit.UICompletionHandler)",
			"UIKit.UIViewController::UnregisterForPreviewingWithContext(UIKit.IUIViewControllerPreviewing)",
			"UIKit.UIViewController::Unwind(UIKit.UIStoryboardSegue,UIKit.UIViewController)",
			"UIKit.UIViewController::ViewWillTransitionToSize(CoreGraphics.CGSize,UIKit.IUIViewControllerTransitionCoordinator)",
			"UIKit.UIViewController::WillMoveToParentViewController(UIKit.UIViewController)",
			"UIKit.UIViewController::WillTransitionToTraitCollection(UIKit.UITraitCollection,UIKit.IUIViewControllerTransitionCoordinator)",
			"UIKit.UIViewControllerAnimatedTransitioning_Extensions::AnimationEnded(UIKit.IUIViewControllerAnimatedTransitioning,System.Boolean)",
			"UIKit.UIViewControllerAnimatedTransitioning_Extensions::GetInterruptibleAnimator(UIKit.IUIViewControllerAnimatedTransitioning,UIKit.IUIViewControllerContextTransitioning)",
			"UIKit.UIViewControllerAnimatedTransitioningWrapper::AnimateTransition(UIKit.IUIViewControllerContextTransitioning)",
			"UIKit.UIViewControllerAnimatedTransitioningWrapper::TransitionDuration(UIKit.IUIViewControllerContextTransitioning)",
			"UIKit.UIViewControllerContextTransitioningWrapper::GetFinalFrameForViewController(UIKit.UIViewController)",
			"UIKit.UIViewControllerContextTransitioningWrapper::GetInitialFrameForViewController(UIKit.UIViewController)",
			"UIKit.UIViewControllerContextTransitioningWrapper::GetViewControllerForKey(Foundation.NSString)",
			"UIKit.UIViewControllerContextTransitioningWrapper::GetViewFor(Foundation.NSString)",
			"UIKit.UIViewControllerInteractiveTransitioning_Extensions::GetCompletionCurve(UIKit.IUIViewControllerInteractiveTransitioning)",
			"UIKit.UIViewControllerInteractiveTransitioning_Extensions::GetCompletionSpeed(UIKit.IUIViewControllerInteractiveTransitioning)",
			"UIKit.UIViewControllerInteractiveTransitioning_Extensions::GetWantsInteractiveStart(UIKit.IUIViewControllerInteractiveTransitioning)",
			"UIKit.UIViewControllerInteractiveTransitioningWrapper::StartInteractiveTransition(UIKit.IUIViewControllerContextTransitioning)",
			"UIKit.UIViewControllerPreviewingDelegateWrapper::CommitViewController(UIKit.IUIViewControllerPreviewing,UIKit.UIViewController)",
			"UIKit.UIViewControllerPreviewingDelegateWrapper::GetViewControllerForPreview(UIKit.IUIViewControllerPreviewing,CoreGraphics.CGPoint)",
			"UIKit.UIViewControllerTransitionCoordinatorContextWrapper::GetTransitionViewControllerForKey(Foundation.NSString)",
			"UIKit.UIViewControllerTransitionCoordinatorContextWrapper::GetViewControllerForKey(Foundation.NSString)",
			"UIKit.UIViewControllerTransitionCoordinatorWrapper::AnimateAlongsideTransitionInView(UIKit.UIView,System.Action`1<UIKit.IUIViewControllerTransitionCoordinatorContext>,System.Action`1<UIKit.IUIViewControllerTransitionCoordinatorContext>)",
			"UIKit.UIViewControllerTransitionCoordinatorWrapper::GetTransitionViewControllerForKey(Foundation.NSString)",
			"UIKit.UIViewControllerTransitionCoordinatorWrapper::GetViewControllerForKey(Foundation.NSString)",
			"UIKit.UIViewControllerTransitioningDelegate_Extensions::GetAnimationControllerForDismissedController(UIKit.IUIViewControllerTransitioningDelegate,UIKit.UIViewController)",
			"UIKit.UIViewControllerTransitioningDelegate_Extensions::GetAnimationControllerForPresentedController(UIKit.IUIViewControllerTransitioningDelegate,UIKit.UIViewController,UIKit.UIViewController,UIKit.UIViewController)",
			"UIKit.UIViewControllerTransitioningDelegate_Extensions::GetInteractionControllerForDismissal(UIKit.IUIViewControllerTransitioningDelegate,UIKit.IUIViewControllerAnimatedTransitioning)",
			"UIKit.UIViewControllerTransitioningDelegate_Extensions::GetInteractionControllerForPresentation(UIKit.IUIViewControllerTransitioningDelegate,UIKit.IUIViewControllerAnimatedTransitioning)",
			"UIKit.UIViewControllerTransitioningDelegate_Extensions::GetPresentationControllerForPresentedViewController(UIKit.IUIViewControllerTransitioningDelegate,UIKit.UIViewController,UIKit.UIViewController,UIKit.UIViewController)",
			"UIKit.UIViewImplicitlyAnimating_Extensions::AddAnimations(UIKit.IUIViewImplicitlyAnimating,System.Action)",
			"UIKit.UIViewImplicitlyAnimating_Extensions::AddAnimations(UIKit.IUIViewImplicitlyAnimating,System.Action,System.Runtime.InteropServices.NFloat)",
			"UIKit.UIViewImplicitlyAnimating_Extensions::AddCompletion(UIKit.IUIViewImplicitlyAnimating,System.Action`1<UIKit.UIViewAnimatingPosition>)",
			"UIKit.UIViewImplicitlyAnimating_Extensions::ContinueAnimation(UIKit.IUIViewImplicitlyAnimating,UIKit.IUITimingCurveProvider,System.Runtime.InteropServices.NFloat)",
			"UIKit.UIViewPropertyAnimator::.ctor(System.Double,UIKit.IUITimingCurveProvider)",
			"UIKit.UIViewPropertyAnimator::ContinueAnimation(UIKit.IUITimingCurveProvider,System.Runtime.InteropServices.NFloat)",
			"UIKit.UIViewPropertyAnimator::Copy(Foundation.NSZone)",
			"UIKit.UIVisualEffect::.ctor(Foundation.NSCoder)",
			"UIKit.UIVisualEffect::Copy(Foundation.NSZone)",
			"UIKit.UIVisualEffect::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIVisualEffectView::.ctor(Foundation.NSCoder)",
			"UIKit.UIVisualEffectView::.ctor(UIKit.UIVisualEffect)",
			"UIKit.UIVisualEffectView::EncodeTo(Foundation.NSCoder)",
			"UIKit.UIVisualEffectView::set_Effect(UIKit.UIVisualEffect)",
			"UIKit.UIWebView::.ctor(Foundation.NSCoder)",
			"UIKit.UIWebView::DecelerationEnded(UIKit.UIScrollView)",
			"UIKit.UIWebView::DecelerationStarted(UIKit.UIScrollView)",
			"UIKit.UIWebView::DidChangeAdjustedContentInset(UIKit.UIScrollView)",
			"UIKit.UIWebView::DidZoom(UIKit.UIScrollView)",
			"UIKit.UIWebView::DraggingEnded(UIKit.UIScrollView,System.Boolean)",
			"UIKit.UIWebView::DraggingStarted(UIKit.UIScrollView)",
			"UIKit.UIWebView::LoadData(Foundation.NSData,System.String,System.String,Foundation.NSUrl)",
			"UIKit.UIWebView::LoadHtmlString(System.String,Foundation.NSUrl)",
			"UIKit.UIWebView::LoadRequest(Foundation.NSUrlRequest)",
			"UIKit.UIWebView::ScrollAnimationEnded(UIKit.UIScrollView)",
			"UIKit.UIWebView::Scrolled(UIKit.UIScrollView)",
			"UIKit.UIWebView::ScrolledToTop(UIKit.UIScrollView)",
			"UIKit.UIWebView::ShouldScrollToTop(UIKit.UIScrollView)",
			"UIKit.UIWebView::ViewForZoomingInScrollView(UIKit.UIScrollView)",
			"UIKit.UIWebView::WillEndDragging(UIKit.UIScrollView,CoreGraphics.CGPoint,CoreGraphics.CGPoint&)",
			"UIKit.UIWebView::ZoomingEnded(UIKit.UIScrollView,UIKit.UIView,System.Runtime.InteropServices.NFloat)",
			"UIKit.UIWebView::ZoomingStarted(UIKit.UIScrollView,UIKit.UIView)",
			"UIKit.UIWebViewDelegate_Extensions::LoadFailed(UIKit.IUIWebViewDelegate,UIKit.UIWebView,Foundation.NSError)",
			"UIKit.UIWebViewDelegate_Extensions::LoadingFinished(UIKit.IUIWebViewDelegate,UIKit.UIWebView)",
			"UIKit.UIWebViewDelegate_Extensions::LoadStarted(UIKit.IUIWebViewDelegate,UIKit.UIWebView)",
			"UIKit.UIWebViewDelegate_Extensions::ShouldStartLoad(UIKit.IUIWebViewDelegate,UIKit.UIWebView,Foundation.NSUrlRequest,UIKit.UIWebViewNavigationType)",
			"UIKit.UIWindow::.ctor(Foundation.NSCoder)",
			"UIKit.UIWindow::.ctor(UIKit.UIWindowScene)",
			"UIKit.UIWindow::ConvertPointFromWindow(CoreGraphics.CGPoint,UIKit.UIWindow)",
			"UIKit.UIWindow::ConvertPointToWindow(CoreGraphics.CGPoint,UIKit.UIWindow)",
			"UIKit.UIWindow::ConvertRectFromWindow(CoreGraphics.CGRect,UIKit.UIWindow)",
			"UIKit.UIWindow::ConvertRectToWindow(CoreGraphics.CGRect,UIKit.UIWindow)",
			"UIKit.UIWindow::SendEvent(UIKit.UIEvent)",
			"UIKit.UIWindow::set_RootViewController(UIKit.UIViewController)",
			"UIKit.UIWindow::set_Screen(UIKit.UIScreen)",
			"UIKit.UIWindowScene::.ctor(UIKit.UISceneSession,UIKit.UISceneConnectionOptions)",
			"UIKit.UIWindowSceneActivationAction::.ctor(Foundation.NSCoder)",
			"UIKit.UIWindowSceneActivationAction::Create(UIKit.UIActionIdentifier,UIKit.UIAction,UIKit.UIWindowSceneActivationActionConfigurationProvider)",
			"UIKit.UIWindowSceneActivationConfiguration::.ctor(Foundation.NSUserActivity)",
			"UIKit.UIWindowSceneActivationConfiguration::set_Options(UIKit.UIWindowSceneActivationRequestOptions)",
			"UIKit.UIWindowSceneActivationConfiguration::set_Preview(UIKit.UITargetedPreview)",
			"UIKit.UIWindowSceneActivationInteraction::DidMoveToView(UIKit.UIView)",
			"UIKit.UIWindowSceneActivationInteraction::WillMoveToView(UIKit.UIView)",
			"UIKit.UIWindowSceneDelegate_Extensions::DidUpdateCoordinateSpace(UIKit.IUIWindowSceneDelegate,UIKit.UIWindowScene,UIKit.IUICoordinateSpace,UIKit.UIInterfaceOrientation,UIKit.UITraitCollection)",
			"UIKit.UIWindowSceneDelegate_Extensions::GetWindow(UIKit.IUIWindowSceneDelegate)",
			"UIKit.UIWindowSceneDelegate_Extensions::PerformAction(UIKit.IUIWindowSceneDelegate,UIKit.UIWindowScene,UIKit.UIApplicationShortcutItem,System.Action`1<System.Boolean>)",
			"UIKit.UIWindowSceneDelegate_Extensions::SetWindow(UIKit.IUIWindowSceneDelegate,UIKit.UIWindow)",
			"UIKit.UIWindowSceneDelegate_Extensions::UserDidAcceptCloudKitShare(UIKit.IUIWindowSceneDelegate,UIKit.UIWindowScene,CloudKit.CKShareMetadata)",
			"UniformTypeIdentifiers.NSString_UTAdditions::AppendPathComponent(Foundation.NSString,System.String,UniformTypeIdentifiers.UTType)",
			"UniformTypeIdentifiers.NSString_UTAdditions::AppendPathExtension(Foundation.NSString,UniformTypeIdentifiers.UTType)",
			"UniformTypeIdentifiers.NSUrl_UTAdditions::AppendPathComponent(Foundation.NSUrl,System.String,UniformTypeIdentifiers.UTType)",
			"UniformTypeIdentifiers.NSUrl_UTAdditions::AppendPathExtension(Foundation.NSUrl,UniformTypeIdentifiers.UTType)",
			"UniformTypeIdentifiers.UTType::.ctor(Foundation.NSCoder)",
			"UniformTypeIdentifiers.UTType::ConformsTo(UniformTypeIdentifiers.UTType)",
			"UniformTypeIdentifiers.UTType::Copy(Foundation.NSZone)",
			"UniformTypeIdentifiers.UTType::CreateExportedType(System.String,UniformTypeIdentifiers.UTType)",
			"UniformTypeIdentifiers.UTType::CreateFromExtension(System.String,UniformTypeIdentifiers.UTType)",
			"UniformTypeIdentifiers.UTType::CreateFromMimeType(System.String,UniformTypeIdentifiers.UTType)",
			"UniformTypeIdentifiers.UTType::CreateImportedType(System.String,UniformTypeIdentifiers.UTType)",
			"UniformTypeIdentifiers.UTType::EncodeTo(Foundation.NSCoder)",
			"UniformTypeIdentifiers.UTType::GetType(System.String,Foundation.NSString,UniformTypeIdentifiers.UTType)",
			"UniformTypeIdentifiers.UTType::GetTypes(System.String,Foundation.NSString,UniformTypeIdentifiers.UTType)",
			"UniformTypeIdentifiers.UTType::IsSubtypeOf(UniformTypeIdentifiers.UTType)",
			"UniformTypeIdentifiers.UTType::IsSupertypeOf(UniformTypeIdentifiers.UTType)",
			"UserNotifications.UNCalendarNotificationTrigger::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNCalendarNotificationTrigger::CreateTrigger(Foundation.NSDateComponents,System.Boolean)",
			"UserNotifications.UNLocationNotificationTrigger::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNLocationNotificationTrigger::CreateTrigger(CoreLocation.CLRegion,System.Boolean)",
			"UserNotifications.UNMutableNotificationContent::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNMutableNotificationContent::set_Badge(Foundation.NSNumber)",
			"UserNotifications.UNMutableNotificationContent::set_Sound(UserNotifications.UNNotificationSound)",
			"UserNotifications.UNMutableNotificationContent::set_UserInfo(Foundation.NSDictionary)",
			"UserNotifications.UNNotification::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNNotification::Copy(Foundation.NSZone)",
			"UserNotifications.UNNotification::EncodeTo(Foundation.NSCoder)",
			"UserNotifications.UNNotificationAction::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNNotificationAction::Copy(Foundation.NSZone)",
			"UserNotifications.UNNotificationAction::EncodeTo(Foundation.NSCoder)",
			"UserNotifications.UNNotificationAction::FromIdentifier(System.String,System.String,UserNotifications.UNNotificationActionOptions,UserNotifications.UNNotificationActionIcon)",
			"UserNotifications.UNNotificationActionIcon::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNNotificationActionIcon::Copy(Foundation.NSZone)",
			"UserNotifications.UNNotificationActionIcon::EncodeTo(Foundation.NSCoder)",
			"UserNotifications.UNNotificationAttachment::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNNotificationAttachment::Copy(Foundation.NSZone)",
			"UserNotifications.UNNotificationAttachment::EncodeTo(Foundation.NSCoder)",
			"UserNotifications.UNNotificationAttachment::FromIdentifier(System.String,Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError&)",
			"UserNotifications.UNNotificationCategory::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNNotificationCategory::Copy(Foundation.NSZone)",
			"UserNotifications.UNNotificationCategory::EncodeTo(Foundation.NSCoder)",
			"UserNotifications.UNNotificationCategory::FromIdentifier(System.String,UserNotifications.UNNotificationAction[],System.String[],System.String,Foundation.NSString,UserNotifications.UNNotificationCategoryOptions)",
			"UserNotifications.UNNotificationContent::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNNotificationContent::Copy(Foundation.NSZone)",
			"UserNotifications.UNNotificationContent::EncodeTo(Foundation.NSCoder)",
			"UserNotifications.UNNotificationContent::MutableCopy(Foundation.NSZone)",
			"UserNotifications.UNNotificationContent::Update(UserNotifications.IUNNotificationContentProviding,Foundation.NSError&)",
			"UserNotifications.UNNotificationRequest::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNNotificationRequest::Copy(Foundation.NSZone)",
			"UserNotifications.UNNotificationRequest::EncodeTo(Foundation.NSCoder)",
			"UserNotifications.UNNotificationRequest::FromIdentifier(System.String,UserNotifications.UNNotificationContent,UserNotifications.UNNotificationTrigger)",
			"UserNotifications.UNNotificationResponse::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNNotificationResponse::Copy(Foundation.NSZone)",
			"UserNotifications.UNNotificationResponse::EncodeTo(Foundation.NSCoder)",
			"UserNotifications.UNNotificationServiceExtension::DidReceiveNotificationRequest(UserNotifications.UNNotificationRequest,System.Action`1<UserNotifications.UNNotificationContent>)",
			"UserNotifications.UNNotificationSettings::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNNotificationSettings::Copy(Foundation.NSZone)",
			"UserNotifications.UNNotificationSettings::EncodeTo(Foundation.NSCoder)",
			"UserNotifications.UNNotificationSound::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNNotificationSound::Copy(Foundation.NSZone)",
			"UserNotifications.UNNotificationSound::EncodeTo(Foundation.NSCoder)",
			"UserNotifications.UNNotificationTrigger::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNNotificationTrigger::Copy(Foundation.NSZone)",
			"UserNotifications.UNNotificationTrigger::EncodeTo(Foundation.NSCoder)",
			"UserNotifications.UNPushNotificationTrigger::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNTextInputNotificationAction::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNTextInputNotificationAction::FromIdentifier(System.String,System.String,UserNotifications.UNNotificationActionOptions,UserNotifications.UNNotificationActionIcon,System.String,System.String)",
			"UserNotifications.UNTextInputNotificationResponse::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNTimeIntervalNotificationTrigger::.ctor(Foundation.NSCoder)",
			"UserNotifications.UNUserNotificationCenter::AddNotificationRequest(UserNotifications.UNNotificationRequest,System.Action`1<Foundation.NSError>)",
			"UserNotifications.UNUserNotificationCenter::SetNotificationCategories(Foundation.NSSet`1<UserNotifications.UNNotificationCategory>)",
			"UserNotifications.UNUserNotificationCenterDelegate_Extensions::DidReceiveNotificationResponse(UserNotifications.IUNUserNotificationCenterDelegate,UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotificationResponse,System.Action)",
			"UserNotifications.UNUserNotificationCenterDelegate_Extensions::OpenSettings(UserNotifications.IUNUserNotificationCenterDelegate,UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotification)",
			"UserNotifications.UNUserNotificationCenterDelegate_Extensions::WillPresentNotification(UserNotifications.IUNUserNotificationCenterDelegate,UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotification,System.Action`1<UserNotifications.UNNotificationPresentationOptions>)",
			"UserNotificationsUI.NSExtensionContext_UNNotificationContentExtension::DismissNotificationContentExtension(Foundation.NSExtensionContext)",
			"UserNotificationsUI.NSExtensionContext_UNNotificationContentExtension::GetNotificationActions(Foundation.NSExtensionContext)",
			"UserNotificationsUI.NSExtensionContext_UNNotificationContentExtension::MediaPlayingPaused(Foundation.NSExtensionContext)",
			"UserNotificationsUI.NSExtensionContext_UNNotificationContentExtension::MediaPlayingStarted(Foundation.NSExtensionContext)",
			"UserNotificationsUI.NSExtensionContext_UNNotificationContentExtension::PerformNotificationDefaultAction(Foundation.NSExtensionContext)",
			"UserNotificationsUI.NSExtensionContext_UNNotificationContentExtension::SetNotificationActions(Foundation.NSExtensionContext,UserNotifications.UNNotificationAction[])",
			"UserNotificationsUI.UNNotificationContentExtension_Extensions::DidReceiveNotificationResponse(UserNotificationsUI.IUNNotificationContentExtension,UserNotifications.UNNotificationResponse,System.Action`1<UserNotificationsUI.UNNotificationContentExtensionResponseOption>)",
			"UserNotificationsUI.UNNotificationContentExtension_Extensions::GetMediaPlayPauseButtonFrame(UserNotificationsUI.IUNNotificationContentExtension)",
			"UserNotificationsUI.UNNotificationContentExtension_Extensions::GetMediaPlayPauseButtonTintColor(UserNotificationsUI.IUNNotificationContentExtension)",
			"UserNotificationsUI.UNNotificationContentExtension_Extensions::GetMediaPlayPauseButtonType(UserNotificationsUI.IUNNotificationContentExtension)",
			"UserNotificationsUI.UNNotificationContentExtension_Extensions::PauseMedia(UserNotificationsUI.IUNNotificationContentExtension)",
			"UserNotificationsUI.UNNotificationContentExtension_Extensions::PlayMedia(UserNotificationsUI.IUNNotificationContentExtension)",
			"UserNotificationsUI.UNNotificationContentExtensionWrapper::DidReceiveNotification(UserNotifications.UNNotification)",
			"VideoSubscriberAccount.VSAccountManager::CheckAccessStatus(Foundation.NSDictionary,System.Action`2<VideoSubscriberAccount.VSAccountAccessStatus,Foundation.NSError>)",
			"VideoSubscriberAccount.VSAccountManager::Enqueue(VideoSubscriberAccount.VSAccountMetadataRequest,System.Action`2<VideoSubscriberAccount.VSAccountMetadata,Foundation.NSError>)",
			"VideoSubscriberAccount.VSAccountManagerDelegate_Extensions::ShouldAuthenticateAccountProvider(VideoSubscriberAccount.IVSAccountManagerDelegate,VideoSubscriberAccount.VSAccountManager,System.String)",
			"VideoSubscriberAccount.VSAccountManagerDelegateWrapper::DismissViewController(VideoSubscriberAccount.VSAccountManager,UIKit.UIViewController)",
			"VideoSubscriberAccount.VSAccountManagerDelegateWrapper::PresentViewController(VideoSubscriberAccount.VSAccountManager,UIKit.UIViewController)",
			"VideoSubscriberAccount.VSSubscription::set_ExpirationDate(Foundation.NSDate)",
			"VideoSubscriberAccount.VSSubscriptionRegistrationCenter::SetCurrentSubscription(VideoSubscriberAccount.VSSubscription)",
			"VideoToolbox.VTCompressionSession::Create(System.Int32,System.Int32,CoreMedia.CMVideoCodecType,VideoToolbox.VTCompressionSession/VTCompressionOutputCallback,VideoToolbox.VTVideoEncoderSpecification,Foundation.NSDictionary,method System.Void *(System.IntPtr,System.IntPtr,VideoToolbox.VTStatus,VideoToolbox.VTEncodeInfoFlags,System.IntPtr))",
			"VideoToolbox.VTCompressionSession::EncodeFrame(CoreVideo.CVImageBuffer,CoreMedia.CMTime,CoreMedia.CMTime,Foundation.NSDictionary,System.IntPtr,VideoToolbox.VTEncodeInfoFlags&)",
			"VideoToolbox.VTCompressionSession::SetCompressionProperties(VideoToolbox.VTCompressionProperties)",
			"VideoToolbox.VTDecompressionSession::CanAcceptFormatDescriptor(CoreMedia.CMFormatDescription)",
			"VideoToolbox.VTDecompressionSession::Create(VideoToolbox.VTDecompressionSession/VTDecompressionOutputCallback,CoreMedia.CMVideoFormatDescription,VideoToolbox.VTVideoDecoderSpecification,Foundation.NSDictionary,method System.Void *(System.IntPtr,System.IntPtr,VideoToolbox.VTStatus,VideoToolbox.VTDecodeInfoFlags,System.IntPtr,CoreMedia.CMTime,CoreMedia.CMTime))",
			"VideoToolbox.VTDecompressionSession::DecodeFrame(CoreMedia.CMSampleBuffer,VideoToolbox.VTDecodeFrameFlags,System.IntPtr,VideoToolbox.VTDecodeInfoFlags&)",
			"VideoToolbox.VTDecompressionSession::SetDecompressionProperties(VideoToolbox.VTDecompressionProperties)",
			"VideoToolbox.VTFrameSilo::AddSampleBuffer(CoreMedia.CMSampleBuffer)",
			"VideoToolbox.VTFrameSilo::Create(Foundation.NSUrl,System.Nullable`1<CoreMedia.CMTimeRange>)",
			"VideoToolbox.VTMultiPassStorage::Create(Foundation.NSUrl,System.Nullable`1<CoreMedia.CMTimeRange>,Foundation.NSDictionary)",
			"VideoToolbox.VTSession::GetProperty(Foundation.NSString)",
			"VideoToolbox.VTSession::SetProperties(VideoToolbox.VTPropertyOptions)",
			"VideoToolbox.VTSession::SetProperty(Foundation.NSString,Foundation.NSObject)",
			"VideoToolbox.VTVideoEncoder::GetSupportedEncoderProperties(System.Int32,System.Int32,CoreMedia.CMVideoCodecType,Foundation.NSDictionary)",
			"Vision.VNBarcodeObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNCircle::.ctor(Foundation.NSCoder)",
			"Vision.VNCircle::Contains(Vision.VNPoint)",
			"Vision.VNCircle::Contains(Vision.VNPoint,System.Double)",
			"Vision.VNCircle::Copy(Foundation.NSZone)",
			"Vision.VNCircle::CreateUsingDiameter(Vision.VNPoint,System.Double)",
			"Vision.VNCircle::CreateUsingRadius(Vision.VNPoint,System.Double)",
			"Vision.VNCircle::EncodeTo(Foundation.NSCoder)",
			"Vision.VNCircle::InitWithCenterDiameter(Vision.VNPoint,System.Double)",
			"Vision.VNCircle::InitWithCenterRadius(Vision.VNPoint,System.Double)",
			"Vision.VNClassificationObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNContour::Copy(Foundation.NSZone)",
			"Vision.VNContoursObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNContoursObservation::GetContour(Foundation.NSIndexPath,Foundation.NSError&)",
			"Vision.VNCoreMLFeatureValueObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNCoreMLModel::FromMLModel(CoreML.MLModel,Foundation.NSError&)",
			"Vision.VNCoreMLModel::set_FeatureProvider(CoreML.IMLFeatureProvider)",
			"Vision.VNCoreMLRequest::.ctor(Vision.VNCoreMLModel)",
			"Vision.VNCoreMLRequest::.ctor(Vision.VNCoreMLModel,Vision.VNRequestCompletionHandler)",
			"Vision.VNDetectedObjectObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNDetectedPoint::.ctor(Foundation.NSCoder)",
			"Vision.VNFaceLandmarkRegion::.ctor(Foundation.NSCoder)",
			"Vision.VNFaceLandmarkRegion::Copy(Foundation.NSZone)",
			"Vision.VNFaceLandmarkRegion::EncodeTo(Foundation.NSCoder)",
			"Vision.VNFaceLandmarkRegion2D::.ctor(Foundation.NSCoder)",
			"Vision.VNFaceLandmarks::.ctor(Foundation.NSCoder)",
			"Vision.VNFaceLandmarks::Copy(Foundation.NSZone)",
			"Vision.VNFaceLandmarks::EncodeTo(Foundation.NSCoder)",
			"Vision.VNFaceLandmarks2D::.ctor(Foundation.NSCoder)",
			"Vision.VNFaceObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNFaceObservation::FromBoundingBox(Vision.VNFaceObservationRequestRevision,CoreGraphics.CGRect,System.Nullable`1<System.Runtime.InteropServices.NFloat>,System.Nullable`1<System.Runtime.InteropServices.NFloat>)",
			"Vision.VNFaceObservation::FromBoundingBox(Vision.VNFaceObservationRequestRevision,CoreGraphics.CGRect,System.Nullable`1<System.Runtime.InteropServices.NFloat>,System.Nullable`1<System.Runtime.InteropServices.NFloat>,System.Nullable`1<System.Runtime.InteropServices.NFloat>)",
			"Vision.VNFeaturePrintObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNFeaturePrintObservation::_ComputeDistance(System.IntPtr,Vision.VNFeaturePrintObservation,Foundation.NSError&)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(CoreGraphics.CGImage,Foundation.NSDictionary)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(CoreGraphics.CGImage,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(CoreImage.CIImage,Foundation.NSDictionary)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(CoreImage.CIImage,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSDictionary)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(Foundation.NSData,Foundation.NSDictionary)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(Foundation.NSData,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(Foundation.NSData,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(Foundation.NSData,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(Foundation.NSUrl,Foundation.NSDictionary)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(Foundation.NSUrl,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNGenerateOpticalFlowRequest::.ctor(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNGeometryUtils::CalculateArea(System.Double&,Vision.VNContour,System.Boolean,Foundation.NSError&)",
			"Vision.VNGeometryUtils::CalculatePerimeter(System.Double&,Vision.VNContour,Foundation.NSError&)",
			"Vision.VNGeometryUtils::CreateBoundingCircle(Vision.VNContour,Foundation.NSError&)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(CoreGraphics.CGImage,Foundation.NSDictionary)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(CoreGraphics.CGImage,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(CoreImage.CIImage,Foundation.NSDictionary)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(CoreImage.CIImage,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSDictionary)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(Foundation.NSData,Foundation.NSDictionary)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(Foundation.NSData,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(Foundation.NSData,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(Foundation.NSData,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(Foundation.NSUrl,Foundation.NSDictionary)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(Foundation.NSUrl,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNHomographicImageRegistrationRequest::.ctor(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNHorizonObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNHumanBodyPoseObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNHumanBodyPoseObservation::GetRecognizedPoint(Vision.VNHumanBodyPoseObservationJointName,Foundation.NSError&)",
			"Vision.VNHumanBodyPoseObservation::GetRecognizedPoints(Vision.VNHumanBodyPoseObservationJointsGroupName,Foundation.NSError&)",
			"Vision.VNHumanHandPoseObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNHumanHandPoseObservation::GetRecognizedPoint(Vision.VNHumanHandPoseObservationJointName,Foundation.NSError&)",
			"Vision.VNHumanHandPoseObservation::GetRecognizedPoints(Vision.VNHumanHandPoseObservationJointsGroupName,Foundation.NSError&)",
			"Vision.VNHumanObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNImageAlignmentObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNImageHomographicAlignmentObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNImageRegistrationRequest::.ctor(CoreGraphics.CGImage,Foundation.NSDictionary)",
			"Vision.VNImageRegistrationRequest::.ctor(CoreGraphics.CGImage,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNImageRegistrationRequest::.ctor(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNImageRegistrationRequest::.ctor(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNImageRegistrationRequest::.ctor(CoreImage.CIImage,Foundation.NSDictionary)",
			"Vision.VNImageRegistrationRequest::.ctor(CoreImage.CIImage,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNImageRegistrationRequest::.ctor(CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNImageRegistrationRequest::.ctor(CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNImageRegistrationRequest::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSDictionary)",
			"Vision.VNImageRegistrationRequest::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNImageRegistrationRequest::.ctor(CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNImageRegistrationRequest::.ctor(CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNImageRegistrationRequest::.ctor(Foundation.NSData,Foundation.NSDictionary)",
			"Vision.VNImageRegistrationRequest::.ctor(Foundation.NSData,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNImageRegistrationRequest::.ctor(Foundation.NSData,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNImageRegistrationRequest::.ctor(Foundation.NSData,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNImageRegistrationRequest::.ctor(Foundation.NSUrl,Foundation.NSDictionary)",
			"Vision.VNImageRegistrationRequest::.ctor(Foundation.NSUrl,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNImageRegistrationRequest::.ctor(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNImageRegistrationRequest::.ctor(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNImageRequestHandler::.ctor(CoreGraphics.CGImage,Foundation.NSDictionary)",
			"Vision.VNImageRequestHandler::.ctor(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNImageRequestHandler::.ctor(CoreImage.CIImage,Foundation.NSDictionary)",
			"Vision.VNImageRequestHandler::.ctor(CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNImageRequestHandler::.ctor(CoreMedia.CMSampleBuffer,Foundation.NSDictionary)",
			"Vision.VNImageRequestHandler::.ctor(CoreMedia.CMSampleBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNImageRequestHandler::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSDictionary)",
			"Vision.VNImageRequestHandler::.ctor(CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNImageRequestHandler::.ctor(Foundation.NSData,Foundation.NSDictionary)",
			"Vision.VNImageRequestHandler::.ctor(Foundation.NSData,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNImageRequestHandler::.ctor(Foundation.NSUrl,Foundation.NSDictionary)",
			"Vision.VNImageRequestHandler::.ctor(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNImageTranslationAlignmentObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNObservation::Copy(Foundation.NSZone)",
			"Vision.VNObservation::EncodeTo(Foundation.NSCoder)",
			"Vision.VNPixelBufferObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNPoint::.ctor(Foundation.NSCoder)",
			"Vision.VNPoint::Copy(Foundation.NSZone)",
			"Vision.VNPoint::Create(Vision.VNVector,Vision.VNPoint)",
			"Vision.VNPoint::EncodeTo(Foundation.NSCoder)",
			"Vision.VNPoint::GetDistanceToPoint(Vision.VNPoint)",
			"Vision.VNRecognizedObjectObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNRecognizedPoint::.ctor(Foundation.NSCoder)",
			"Vision.VNRecognizedPointsObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNRecognizedPointsObservation::GetRecognizedPoint(Foundation.NSString,Foundation.NSError&)",
			"Vision.VNRecognizedPointsObservation::GetRecognizedPoints(Foundation.NSString,Foundation.NSError&)",
			"Vision.VNRecognizedText::.ctor(Foundation.NSCoder)",
			"Vision.VNRecognizedText::Copy(Foundation.NSZone)",
			"Vision.VNRecognizedText::EncodeTo(Foundation.NSCoder)",
			"Vision.VNRecognizedTextObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNRectangleObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNRequest::Copy(Foundation.NSZone)",
			"Vision.VNSaliencyImageObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNSequenceRequestHandler::Perform(Vision.VNRequest[],CoreGraphics.CGImage,Foundation.NSError&)",
			"Vision.VNSequenceRequestHandler::Perform(Vision.VNRequest[],CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,Foundation.NSError&)",
			"Vision.VNSequenceRequestHandler::Perform(Vision.VNRequest[],CoreImage.CIImage,Foundation.NSError&)",
			"Vision.VNSequenceRequestHandler::Perform(Vision.VNRequest[],CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSError&)",
			"Vision.VNSequenceRequestHandler::Perform(Vision.VNRequest[],CoreMedia.CMSampleBuffer,Foundation.NSError&)",
			"Vision.VNSequenceRequestHandler::Perform(Vision.VNRequest[],CoreMedia.CMSampleBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSError&)",
			"Vision.VNSequenceRequestHandler::Perform(Vision.VNRequest[],CoreVideo.CVPixelBuffer,Foundation.NSError&)",
			"Vision.VNSequenceRequestHandler::Perform(Vision.VNRequest[],CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSError&)",
			"Vision.VNSequenceRequestHandler::Perform(Vision.VNRequest[],Foundation.NSData,Foundation.NSError&)",
			"Vision.VNSequenceRequestHandler::Perform(Vision.VNRequest[],Foundation.NSData,ImageIO.CGImagePropertyOrientation,Foundation.NSError&)",
			"Vision.VNSequenceRequestHandler::Perform(Vision.VNRequest[],Foundation.NSUrl,Foundation.NSError&)",
			"Vision.VNSequenceRequestHandler::Perform(Vision.VNRequest[],Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,Foundation.NSError&)",
			"Vision.VNTargetedImageRequest::.ctor(CoreGraphics.CGImage,Foundation.NSDictionary)",
			"Vision.VNTargetedImageRequest::.ctor(CoreGraphics.CGImage,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTargetedImageRequest::.ctor(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNTargetedImageRequest::.ctor(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTargetedImageRequest::.ctor(CoreImage.CIImage,Foundation.NSDictionary)",
			"Vision.VNTargetedImageRequest::.ctor(CoreImage.CIImage,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTargetedImageRequest::.ctor(CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNTargetedImageRequest::.ctor(CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTargetedImageRequest::.ctor(CoreMedia.CMSampleBuffer,Foundation.NSDictionary)",
			"Vision.VNTargetedImageRequest::.ctor(CoreMedia.CMSampleBuffer,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTargetedImageRequest::.ctor(CoreMedia.CMSampleBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNTargetedImageRequest::.ctor(CoreMedia.CMSampleBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTargetedImageRequest::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSDictionary)",
			"Vision.VNTargetedImageRequest::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTargetedImageRequest::.ctor(CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNTargetedImageRequest::.ctor(CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTargetedImageRequest::.ctor(Foundation.NSData,Foundation.NSDictionary)",
			"Vision.VNTargetedImageRequest::.ctor(Foundation.NSData,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTargetedImageRequest::.ctor(Foundation.NSData,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNTargetedImageRequest::.ctor(Foundation.NSData,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTargetedImageRequest::.ctor(Foundation.NSUrl,Foundation.NSDictionary)",
			"Vision.VNTargetedImageRequest::.ctor(Foundation.NSUrl,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTargetedImageRequest::.ctor(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNTargetedImageRequest::.ctor(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTextObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNTrackingRequest::set_InputObservation(Vision.VNDetectedObjectObservation)",
			"Vision.VNTrackObjectRequest::.ctor(Vision.VNDetectedObjectObservation)",
			"Vision.VNTrackObjectRequest::.ctor(Vision.VNDetectedObjectObservation,Vision.VNRequestCompletionHandler)",
			"Vision.VNTrackRectangleRequest::.ctor(Vision.VNRectangleObservation)",
			"Vision.VNTrackRectangleRequest::.ctor(Vision.VNRectangleObservation,Vision.VNRequestCompletionHandler)",
			"Vision.VNTrajectoryObservation::.ctor(Foundation.NSCoder)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(CoreGraphics.CGImage,Foundation.NSDictionary)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(CoreGraphics.CGImage,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(CoreGraphics.CGImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(CoreImage.CIImage,Foundation.NSDictionary)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(CoreImage.CIImage,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(CoreImage.CIImage,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSDictionary)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(CoreVideo.CVPixelBuffer,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(CoreVideo.CVPixelBuffer,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(Foundation.NSData,Foundation.NSDictionary)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(Foundation.NSData,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(Foundation.NSData,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(Foundation.NSData,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(Foundation.NSUrl,Foundation.NSDictionary)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(Foundation.NSUrl,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary)",
			"Vision.VNTranslationalImageRegistrationRequest::.ctor(Foundation.NSUrl,ImageIO.CGImagePropertyOrientation,Foundation.NSDictionary,Vision.VNRequestCompletionHandler)",
			"Vision.VNVector::.ctor(Foundation.NSCoder)",
			"Vision.VNVector::.ctor(Vision.VNPoint,Vision.VNPoint)",
			"Vision.VNVector::Copy(Foundation.NSZone)",
			"Vision.VNVector::CreateByAddingVector(Vision.VNVector,Vision.VNVector)",
			"Vision.VNVector::CreateByMultiplyingVector(Vision.VNVector,System.Double)",
			"Vision.VNVector::CreateBySubtractingVector(Vision.VNVector,Vision.VNVector)",
			"Vision.VNVector::CreateUnitVector(Vision.VNVector)",
			"Vision.VNVector::EncodeTo(Foundation.NSCoder)",
			"Vision.VNVector::GetDotProduct(Vision.VNVector,Vision.VNVector)",
			"Vision.VNVideoProcessor::.ctor(Foundation.NSUrl)",
			"Vision.VNVideoProcessor::AddRequest(Vision.VNRequest,Vision.VNVideoProcessorRequestProcessingOptions,Foundation.NSError&)",
			"Vision.VNVideoProcessor::RemoveRequest(Vision.VNRequest,Foundation.NSError&)",
			"Vision.VNVideoProcessorCadence::Copy(Foundation.NSZone)",
			"Vision.VNVideoProcessorRequestProcessingOptions::Copy(Foundation.NSZone)",
			"Vision.VNVideoProcessorRequestProcessingOptions::set_Cadence(Vision.VNVideoProcessorCadence)",
			"VisionKit.VNDocumentCameraViewController::.ctor(Foundation.NSCoder)",
			"VisionKit.VNDocumentCameraViewControllerDelegate_Extensions::DidCancel(VisionKit.IVNDocumentCameraViewControllerDelegate,VisionKit.VNDocumentCameraViewController)",
			"VisionKit.VNDocumentCameraViewControllerDelegate_Extensions::DidFail(VisionKit.IVNDocumentCameraViewControllerDelegate,VisionKit.VNDocumentCameraViewController,Foundation.NSError)",
			"VisionKit.VNDocumentCameraViewControllerDelegate_Extensions::DidFinish(VisionKit.IVNDocumentCameraViewControllerDelegate,VisionKit.VNDocumentCameraViewController,VisionKit.VNDocumentCameraScan)",
			"WatchConnectivity.WCSession::SendMessage(Foundation.NSData,WatchConnectivity.WCSessionReplyDataHandler,System.Action`1<Foundation.NSError>)",
			"WatchConnectivity.WCSession::SendMessage(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,WatchConnectivity.WCSessionReplyHandler,System.Action`1<Foundation.NSError>)",
			"WatchConnectivity.WCSession::TransferCurrentComplicationUserInfo(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"WatchConnectivity.WCSession::TransferFile(Foundation.NSUrl,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"WatchConnectivity.WCSession::TransferUserInfo(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"WatchConnectivity.WCSession::UpdateApplicationContext(Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&)",
			"WatchConnectivity.WCSessionDelegate_Extensions::DidFinishFileTransfer(WatchConnectivity.IWCSessionDelegate,WatchConnectivity.WCSession,WatchConnectivity.WCSessionFileTransfer,Foundation.NSError)",
			"WatchConnectivity.WCSessionDelegate_Extensions::DidFinishUserInfoTransfer(WatchConnectivity.IWCSessionDelegate,WatchConnectivity.WCSession,WatchConnectivity.WCSessionUserInfoTransfer,Foundation.NSError)",
			"WatchConnectivity.WCSessionDelegate_Extensions::DidReceiveApplicationContext(WatchConnectivity.IWCSessionDelegate,WatchConnectivity.WCSession,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"WatchConnectivity.WCSessionDelegate_Extensions::DidReceiveFile(WatchConnectivity.IWCSessionDelegate,WatchConnectivity.WCSession,WatchConnectivity.WCSessionFile)",
			"WatchConnectivity.WCSessionDelegate_Extensions::DidReceiveMessage(WatchConnectivity.IWCSessionDelegate,WatchConnectivity.WCSession,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"WatchConnectivity.WCSessionDelegate_Extensions::DidReceiveMessage(WatchConnectivity.IWCSessionDelegate,WatchConnectivity.WCSession,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,WatchConnectivity.WCSessionReplyHandler)",
			"WatchConnectivity.WCSessionDelegate_Extensions::DidReceiveMessageData(WatchConnectivity.IWCSessionDelegate,WatchConnectivity.WCSession,Foundation.NSData)",
			"WatchConnectivity.WCSessionDelegate_Extensions::DidReceiveMessageData(WatchConnectivity.IWCSessionDelegate,WatchConnectivity.WCSession,Foundation.NSData,WatchConnectivity.WCSessionReplyDataHandler)",
			"WatchConnectivity.WCSessionDelegate_Extensions::DidReceiveUserInfo(WatchConnectivity.IWCSessionDelegate,WatchConnectivity.WCSession,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>)",
			"WatchConnectivity.WCSessionDelegate_Extensions::SessionReachabilityDidChange(WatchConnectivity.IWCSessionDelegate,WatchConnectivity.WCSession)",
			"WatchConnectivity.WCSessionDelegate_Extensions::SessionWatchStateDidChange(WatchConnectivity.IWCSessionDelegate,WatchConnectivity.WCSession)",
			"WatchConnectivity.WCSessionDelegateWrapper::ActivationDidComplete(WatchConnectivity.WCSession,WatchConnectivity.WCSessionActivationState,Foundation.NSError)",
			"WatchConnectivity.WCSessionDelegateWrapper::DidBecomeInactive(WatchConnectivity.WCSession)",
			"WatchConnectivity.WCSessionDelegateWrapper::DidDeactivate(WatchConnectivity.WCSession)",
			"WatchConnectivity.WCSessionUserInfoTransfer::.ctor(Foundation.NSCoder)",
			"WatchConnectivity.WCSessionUserInfoTransfer::EncodeTo(Foundation.NSCoder)",
			"WebKit.DomDocument::AdoptNode(WebKit.DomNode)",
			"WebKit.DomDocument::CreateNodeIterator(WebKit.DomNode,System.UInt32,WebKit.IDomNodeFilter,System.Boolean)",
			"WebKit.DomDocument::GetComputedStyle(WebKit.DomElement,System.String)",
			"WebKit.DomDocument::GetMatchedCSSRules(WebKit.DomElement,System.String)",
			"WebKit.DomDocument::GetMatchedCSSRules(WebKit.DomElement,System.String,System.Boolean)",
			"WebKit.DomDocument::GetOverrideStyle(WebKit.DomElement,System.String)",
			"WebKit.DomDocument::ImportNode(WebKit.DomNode,System.Boolean)",
			"WebKit.DomDocument::set_body(WebKit.DomHtmlElement)",
			"WebKit.DomElement::Contains(WebKit.DomElement)",
			"WebKit.DomElement::RemoveAttributeNode(WebKit.DomAttr)",
			"WebKit.DomElement::SetAttributeNode(WebKit.DomAttr)",
			"WebKit.DomElement::SetAttributeNodeNS(WebKit.DomAttr)",
			"WebKit.DomEventListenerWrapper::HandleEvent(WebKit.DomEvent)",
			"WebKit.DomEventTargetWrapper::AddEventListener(System.String,WebKit.IDomEventListener,System.Boolean)",
			"WebKit.DomEventTargetWrapper::Copy(Foundation.NSZone)",
			"WebKit.DomEventTargetWrapper::DispatchEvent(WebKit.DomEvent)",
			"WebKit.DomEventTargetWrapper::RemoveEventListener(System.String,WebKit.IDomEventListener,System.Boolean)",
			"WebKit.DomHtmlInputElement::set_Files(WebKit.DomFileList)",
			"WebKit.DomHtmlOptionsCollection::Add(WebKit.DomHtmlOptionElement,System.UInt32)",
			"WebKit.DomHtmlSelectElement::Add(WebKit.DomHtmlElement,WebKit.DomHtmlElement)",
			"WebKit.DomHtmlTableElement::set_Caption(WebKit.DomHtmlTableCaptionElement)",
			"WebKit.DomHtmlTableElement::set_TFoot(WebKit.DomHtmlTableSectionElement)",
			"WebKit.DomHtmlTableElement::set_THead(WebKit.DomHtmlTableSectionElement)",
			"WebKit.DomImplementation::CreateDocument(System.String,System.String,WebKit.DomDocumentType)",
			"WebKit.DomKeyboardEvent::.ctor(System.String,System.Boolean,System.Boolean,WebKit.DomAbstractView,System.String,WebKit.DomKeyLocation,System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
			"WebKit.DomKeyboardEvent::.ctor(System.String,System.Boolean,System.Boolean,WebKit.DomAbstractView,System.String,WebKit.DomKeyLocation,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
			"WebKit.DomMouseEvent::.ctor(System.String,System.Boolean,System.Boolean,WebKit.DomAbstractView,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,WebKit.IDomEventTarget)",
			"WebKit.DomNamedNodeMap::SetNamedItem(WebKit.DomNode)",
			"WebKit.DomNamedNodeMap::SetNamedItemNS(WebKit.DomNode)",
			"WebKit.DomNode::AddEventListener(System.String,WebKit.IDomEventListener,System.Boolean)",
			"WebKit.DomNode::AppendChild(WebKit.DomNode)",
			"WebKit.DomNode::CompareDocumentPosition(WebKit.DomNode)",
			"WebKit.DomNode::Copy(Foundation.NSZone)",
			"WebKit.DomNode::DispatchEvent(WebKit.DomEvent)",
			"WebKit.DomNode::InsertBefore(WebKit.DomNode,WebKit.DomNode)",
			"WebKit.DomNode::IsEqualNode(WebKit.DomNode)",
			"WebKit.DomNode::IsSameNode(WebKit.DomNode)",
			"WebKit.DomNode::RemoveChild(WebKit.DomNode)",
			"WebKit.DomNode::RemoveEventListener(System.String,WebKit.IDomEventListener,System.Boolean)",
			"WebKit.DomNode::ReplaceChild(WebKit.DomNode,WebKit.DomNode)",
			"WebKit.DomNodeFilterWrapper::AcceptNode(WebKit.DomNode)",
			"WebKit.DomObject::Copy(Foundation.NSZone)",
			"WebKit.DomRange::CompareBoundaryPoints(WebKit.DomRangeCompareHow,WebKit.DomRange)",
			"WebKit.DomRange::CompareNode(WebKit.DomNode)",
			"WebKit.DomRange::ComparePoint(WebKit.DomNode,System.Int32)",
			"WebKit.DomRange::InsertNode(WebKit.DomNode)",
			"WebKit.DomRange::IntersectsNode(WebKit.DomNode)",
			"WebKit.DomRange::IsPointInRange(WebKit.DomNode,System.Int32)",
			"WebKit.DomRange::SelectNode(WebKit.DomNode)",
			"WebKit.DomRange::SelectNodeContents(WebKit.DomNode)",
			"WebKit.DomRange::SetEnd(WebKit.DomNode,System.Int32)",
			"WebKit.DomRange::SetEndAfter(WebKit.DomNode)",
			"WebKit.DomRange::SetEndBefore(WebKit.DomNode)",
			"WebKit.DomRange::SetStart(WebKit.DomNode,System.Int32)",
			"WebKit.DomRange::SetStartAfter(WebKit.DomNode)",
			"WebKit.DomRange::SetStartBefore(WebKit.DomNode)",
			"WebKit.DomRange::SurroundContents(WebKit.DomNode)",
			"WebKit.DomUIEvent::.ctor(System.String,System.Boolean,System.Boolean,WebKit.DomAbstractView,System.Int32)",
			"WebKit.DomWheelEvent::.ctor(System.Int32,System.Int32,WebKit.DomAbstractView,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
			"WebKit.WebArchive::.ctor(Foundation.NSCoder)",
			"WebKit.WebArchive::.ctor(Foundation.NSData)",
			"WebKit.WebArchive::.ctor(WebKit.WebResource,Foundation.NSArray,Foundation.NSArray)",
			"WebKit.WebArchive::Copy(Foundation.NSZone)",
			"WebKit.WebArchive::EncodeTo(Foundation.NSCoder)",
			"WebKit.WebBackForwardList::AddItem(WebKit.WebHistoryItem)",
			"WebKit.WebBackForwardList::ContainsItem(WebKit.WebHistoryItem)",
			"WebKit.WebBackForwardList::GoToItem(WebKit.WebHistoryItem)",
			"WebKit.WebDataSource::.ctor(Foundation.NSUrlRequest)",
			"WebKit.WebDataSource::AddSubresource(WebKit.WebResource)",
			"WebKit.WebDataSource::SubresourceForUrl(Foundation.NSUrl)",
			"WebKit.WebDocumentRepresentationWrapper::FinishedLoading(WebKit.WebDataSource)",
			"WebKit.WebDocumentRepresentationWrapper::ReceivedData(Foundation.NSData,WebKit.WebDataSource)",
			"WebKit.WebDocumentRepresentationWrapper::ReceivedError(Foundation.NSError,WebKit.WebDataSource)",
			"WebKit.WebDocumentRepresentationWrapper::SetDataSource(WebKit.WebDataSource)",
			"WebKit.WebDownloadDelegate_Extensions::OnDownloadWindowForSheet(WebKit.IWebDownloadDelegate,WebKit.WebDownload)",
			"WebKit.WebFrame::.ctor(System.String,WebKit.WebFrameView,WebKit.WebView)",
			"WebKit.WebFrame::LoadAlternateHtmlString(System.String,Foundation.NSUrl,Foundation.NSUrl)",
			"WebKit.WebFrame::LoadArchive(WebKit.WebArchive)",
			"WebKit.WebFrame::LoadData(Foundation.NSData,System.String,System.String,Foundation.NSUrl)",
			"WebKit.WebFrame::LoadHtmlString(Foundation.NSString,Foundation.NSUrl)",
			"WebKit.WebFrame::LoadRequest(Foundation.NSUrlRequest)",
			"WebKit.WebFrameLoadDelegate_Extensions::CanceledClientRedirect(WebKit.IWebFrameLoadDelegate,WebKit.WebView,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::ChangedLocationWithinPage(WebKit.IWebFrameLoadDelegate,WebKit.WebView,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::ClearedWindowObject(WebKit.IWebFrameLoadDelegate,WebKit.WebView,WebKit.WebScriptObject,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::CommitedLoad(WebKit.IWebFrameLoadDelegate,WebKit.WebView,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::DidCreateJavaScriptContext(WebKit.IWebFrameLoadDelegate,WebKit.WebView,JavaScriptCore.JSContext,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::FailedLoadWithError(WebKit.IWebFrameLoadDelegate,WebKit.WebView,Foundation.NSError,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::FailedProvisionalLoad(WebKit.IWebFrameLoadDelegate,WebKit.WebView,Foundation.NSError,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::FinishedLoad(WebKit.IWebFrameLoadDelegate,WebKit.WebView,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::ReceivedIcon(WebKit.IWebFrameLoadDelegate,WebKit.WebView,AppKit.NSImage,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::ReceivedServerRedirectForProvisionalLoad(WebKit.IWebFrameLoadDelegate,WebKit.WebView,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::ReceivedTitle(WebKit.IWebFrameLoadDelegate,WebKit.WebView,System.String,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::StartedProvisionalLoad(WebKit.IWebFrameLoadDelegate,WebKit.WebView,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::WillCloseFrame(WebKit.IWebFrameLoadDelegate,WebKit.WebView,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::WillPerformClientRedirect(WebKit.IWebFrameLoadDelegate,WebKit.WebView,Foundation.NSUrl,System.Double,Foundation.NSDate,WebKit.WebFrame)",
			"WebKit.WebFrameLoadDelegate_Extensions::WindowScriptObjectAvailable(WebKit.IWebFrameLoadDelegate,WebKit.WebView,WebKit.WebScriptObject)",
			"WebKit.WebFrameView::.ctor(Foundation.NSCoder)",
			"WebKit.WebFrameView::GetPrintOperation(AppKit.NSPrintInfo)",
			"WebKit.WebHistory::GetHistoryItemForUrl(Foundation.NSUrl)",
			"WebKit.WebHistory::GetOrderedItemsLastVisitedOnDay(Foundation.NSCalendarDate)",
			"WebKit.WebHistory::Load(Foundation.NSUrl,Foundation.NSError&)",
			"WebKit.WebHistory::Save(Foundation.NSUrl,Foundation.NSError&)",
			"WebKit.WebHistory::SetOptionalSharedHistory(WebKit.WebHistory)",
			"WebKit.WebHistoryItem::Copy(Foundation.NSZone)",
			"WebKit.WebPolicyDelegate::DecideDownload(Foundation.NSObject)",
			"WebKit.WebPolicyDelegate::DecideIgnore(Foundation.NSObject)",
			"WebKit.WebPolicyDelegate::DecideUse(Foundation.NSObject)",
			"WebKit.WebPolicyDelegate_Extensions::DecidePolicyForMimeType(WebKit.IWebPolicyDelegate,WebKit.WebView,System.String,Foundation.NSUrlRequest,WebKit.WebFrame,Foundation.NSObject)",
			"WebKit.WebPolicyDelegate_Extensions::DecidePolicyForNavigation(WebKit.IWebPolicyDelegate,WebKit.WebView,Foundation.NSDictionary,Foundation.NSUrlRequest,WebKit.WebFrame,Foundation.NSObject)",
			"WebKit.WebPolicyDelegate_Extensions::DecidePolicyForNewWindow(WebKit.IWebPolicyDelegate,WebKit.WebView,Foundation.NSDictionary,Foundation.NSUrlRequest,System.String,Foundation.NSObject)",
			"WebKit.WebPolicyDelegate_Extensions::UnableToImplementPolicy(WebKit.IWebPolicyDelegate,WebKit.WebView,Foundation.NSError,WebKit.WebFrame)",
			"WebKit.WebPreferences::.ctor(Foundation.NSCoder)",
			"WebKit.WebPreferences::EncodeTo(Foundation.NSCoder)",
			"WebKit.WebPreferences::set_UserStyleSheetLocation(Foundation.NSUrl)",
			"WebKit.WebResource::.ctor(Foundation.NSCoder)",
			"WebKit.WebResource::.ctor(Foundation.NSData,Foundation.NSUrl,System.String,System.String,System.String)",
			"WebKit.WebResource::Copy(Foundation.NSZone)",
			"WebKit.WebResource::EncodeTo(Foundation.NSCoder)",
			"WebKit.WebResourceLoadDelegate_Extensions::OnCancelledAuthenticationChallenge(WebKit.IWebResourceLoadDelegate,WebKit.WebView,Foundation.NSObject,Foundation.NSUrlAuthenticationChallenge,WebKit.WebDataSource)",
			"WebKit.WebResourceLoadDelegate_Extensions::OnFailedLoading(WebKit.IWebResourceLoadDelegate,WebKit.WebView,Foundation.NSObject,Foundation.NSError,WebKit.WebDataSource)",
			"WebKit.WebResourceLoadDelegate_Extensions::OnFinishedLoading(WebKit.IWebResourceLoadDelegate,WebKit.WebView,Foundation.NSObject,WebKit.WebDataSource)",
			"WebKit.WebResourceLoadDelegate_Extensions::OnIdentifierForInitialRequest(WebKit.IWebResourceLoadDelegate,WebKit.WebView,Foundation.NSUrlRequest,WebKit.WebDataSource)",
			"WebKit.WebResourceLoadDelegate_Extensions::OnPlugInFailed(WebKit.IWebResourceLoadDelegate,WebKit.WebView,Foundation.NSError,WebKit.WebDataSource)",
			"WebKit.WebResourceLoadDelegate_Extensions::OnReceivedAuthenticationChallenge(WebKit.IWebResourceLoadDelegate,WebKit.WebView,Foundation.NSObject,Foundation.NSUrlAuthenticationChallenge,WebKit.WebDataSource)",
			"WebKit.WebResourceLoadDelegate_Extensions::OnReceivedContentLength(WebKit.IWebResourceLoadDelegate,WebKit.WebView,Foundation.NSObject,System.IntPtr,WebKit.WebDataSource)",
			"WebKit.WebResourceLoadDelegate_Extensions::OnReceivedResponse(WebKit.IWebResourceLoadDelegate,WebKit.WebView,Foundation.NSObject,Foundation.NSUrlResponse,WebKit.WebDataSource)",
			"WebKit.WebResourceLoadDelegate_Extensions::OnSendRequest(WebKit.IWebResourceLoadDelegate,WebKit.WebView,Foundation.NSObject,Foundation.NSUrlRequest,Foundation.NSUrlResponse,WebKit.WebDataSource)",
			"WebKit.WebScriptObject::SetWebScriptValueAtIndex(System.Int32,Foundation.NSObject)",
			"WebKit.WebUIDelegate_Extensions::UIAreToolbarsVisible(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIClose(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UICreateModalDialog(WebKit.IWebUIDelegate,WebKit.WebView,Foundation.NSUrlRequest)",
			"WebKit.WebUIDelegate_Extensions::UICreateWebView(WebKit.IWebUIDelegate,WebKit.WebView,Foundation.NSUrlRequest)",
			"WebKit.WebUIDelegate_Extensions::UIDragSourceActionMask(WebKit.IWebUIDelegate,WebKit.WebView,CoreGraphics.CGPoint)",
			"WebKit.WebUIDelegate_Extensions::UIDrawFooterInRect(WebKit.IWebUIDelegate,WebKit.WebView,CoreGraphics.CGRect)",
			"WebKit.WebUIDelegate_Extensions::UIDrawHeaderInRect(WebKit.IWebUIDelegate,WebKit.WebView,CoreGraphics.CGRect)",
			"WebKit.WebUIDelegate_Extensions::UIFocus(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIGetContentRect(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIGetContextMenuItems(WebKit.IWebUIDelegate,WebKit.WebView,Foundation.NSDictionary,AppKit.NSMenuItem[])",
			"WebKit.WebUIDelegate_Extensions::UIGetDragDestinationActionMask(WebKit.IWebUIDelegate,WebKit.WebView,AppKit.INSDraggingInfo)",
			"WebKit.WebUIDelegate_Extensions::UIGetFirstResponder(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIGetFooterHeight(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIGetFrame(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIGetHeaderHeight(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIGetStatusText(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIIsResizable(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIIsStatusBarVisible(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIMakeFirstResponder(WebKit.IWebUIDelegate,WebKit.WebView,AppKit.NSResponder)",
			"WebKit.WebUIDelegate_Extensions::UIMouseDidMoveOverElement(WebKit.IWebUIDelegate,WebKit.WebView,Foundation.NSDictionary,AppKit.NSEventModifierMask)",
			"WebKit.WebUIDelegate_Extensions::UIPrintFrameView(WebKit.IWebUIDelegate,WebKit.WebView,WebKit.WebFrameView)",
			"WebKit.WebUIDelegate_Extensions::UIRunBeforeUnload(WebKit.IWebUIDelegate,WebKit.WebView,System.String,WebKit.WebFrame)",
			"WebKit.WebUIDelegate_Extensions::UIRunJavaScriptAlertPanel(WebKit.IWebUIDelegate,WebKit.WebView,System.String)",
			"WebKit.WebUIDelegate_Extensions::UIRunJavaScriptAlertPanelMessage(WebKit.IWebUIDelegate,WebKit.WebView,System.String,WebKit.WebFrame)",
			"WebKit.WebUIDelegate_Extensions::UIRunJavaScriptConfirmationPanel(WebKit.IWebUIDelegate,WebKit.WebView,System.String,WebKit.WebFrame)",
			"WebKit.WebUIDelegate_Extensions::UIRunJavaScriptConfirmPanel(WebKit.IWebUIDelegate,WebKit.WebView,System.String)",
			"WebKit.WebUIDelegate_Extensions::UIRunJavaScriptTextInputPanel(WebKit.IWebUIDelegate,WebKit.WebView,System.String,System.String)",
			"WebKit.WebUIDelegate_Extensions::UIRunJavaScriptTextInputPanelWithFrame(WebKit.IWebUIDelegate,WebKit.WebView,System.String,System.String,WebKit.WebFrame)",
			"WebKit.WebUIDelegate_Extensions::UIRunModal(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIRunOpenPanelForFileButton(WebKit.IWebUIDelegate,WebKit.WebView,WebKit.IWebOpenPanelResultListener)",
			"WebKit.WebUIDelegate_Extensions::UISetContentRect(WebKit.IWebUIDelegate,WebKit.WebView,CoreGraphics.CGRect)",
			"WebKit.WebUIDelegate_Extensions::UISetFrame(WebKit.IWebUIDelegate,WebKit.WebView,CoreGraphics.CGRect)",
			"WebKit.WebUIDelegate_Extensions::UISetResizable(WebKit.IWebUIDelegate,WebKit.WebView,System.Boolean)",
			"WebKit.WebUIDelegate_Extensions::UISetStatusBarVisible(WebKit.IWebUIDelegate,WebKit.WebView,System.Boolean)",
			"WebKit.WebUIDelegate_Extensions::UISetStatusText(WebKit.IWebUIDelegate,WebKit.WebView,System.String)",
			"WebKit.WebUIDelegate_Extensions::UISetToolbarsVisible(WebKit.IWebUIDelegate,WebKit.WebView,System.Boolean)",
			"WebKit.WebUIDelegate_Extensions::UIShouldPerformAction(WebKit.IWebUIDelegate,WebKit.WebView,ObjCRuntime.Selector,Foundation.NSObject)",
			"WebKit.WebUIDelegate_Extensions::UIShow(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIUnfocus(WebKit.IWebUIDelegate,WebKit.WebView)",
			"WebKit.WebUIDelegate_Extensions::UIValidateUserInterfaceItem(WebKit.IWebUIDelegate,WebKit.WebView,Foundation.NSObject,System.Boolean)",
			"WebKit.WebUIDelegate_Extensions::UIWillPerformDragDestination(WebKit.IWebUIDelegate,WebKit.WebView,WebKit.WebDragDestinationAction,AppKit.INSDraggingInfo)",
			"WebKit.WebUIDelegate_Extensions::UIWillPerformDragSource(WebKit.IWebUIDelegate,WebKit.WebView,WebKit.WebDragSourceAction,CoreGraphics.CGPoint,AppKit.NSPasteboard)",
			"WebKit.WebView::.ctor(Foundation.NSCoder)",
			"WebKit.WebView::AlignCenter(Foundation.NSObject)",
			"WebKit.WebView::AlignJustified(Foundation.NSObject)",
			"WebKit.WebView::AlignLeft(Foundation.NSObject)",
			"WebKit.WebView::AlignRight(Foundation.NSObject)",
			"WebKit.WebView::ApplyStyle(WebKit.DomCssStyleDeclaration)",
			"WebKit.WebView::ChangeAttributes(Foundation.NSObject)",
			"WebKit.WebView::ChangeColor(Foundation.NSObject)",
			"WebKit.WebView::ChangeDocumentBackgroundColor(Foundation.NSObject)",
			"WebKit.WebView::ChangeFont(Foundation.NSObject)",
			"WebKit.WebView::CheckSpelling(Foundation.NSObject)",
			"WebKit.WebView::CopyFont(Foundation.NSObject)",
			"WebKit.WebView::Cut(Foundation.NSObject)",
			"WebKit.WebView::DecideDownload(Foundation.NSObject)",
			"WebKit.WebView::DecideIgnore(Foundation.NSObject)",
			"WebKit.WebView::DecideUse(Foundation.NSObject)",
			"WebKit.WebView::Delete(Foundation.NSObject)",
			"WebKit.WebView::GoToBackForwardItem(WebKit.WebHistoryItem)",
			"WebKit.WebView::MakeTextLarger(Foundation.NSObject)",
			"WebKit.WebView::MakeTextSmaller(Foundation.NSObject)",
			"WebKit.WebView::MakeTextStandardSize(Foundation.NSObject)",
			"WebKit.WebView::MoveToBeginningOfSentence(Foundation.NSObject)",
			"WebKit.WebView::MoveToBeginningOfSentenceAndModifySelection(Foundation.NSObject)",
			"WebKit.WebView::MoveToEndOfSentence(Foundation.NSObject)",
			"WebKit.WebView::MoveToEndOfSentenceAndModifySelection(Foundation.NSObject)",
			"WebKit.WebView::Paste(Foundation.NSObject)",
			"WebKit.WebView::PasteAsPlainText(Foundation.NSObject)",
			"WebKit.WebView::PasteAsRichText(Foundation.NSObject)",
			"WebKit.WebView::PasteboardTypesForElement(Foundation.NSDictionary)",
			"WebKit.WebView::PasteFont(Foundation.NSObject)",
			"WebKit.WebView::PerformFindPanelAction(Foundation.NSObject)",
			"WebKit.WebView::Reload(Foundation.NSObject)",
			"WebKit.WebView::ReloadFromOrigin(Foundation.NSObject)",
			"WebKit.WebView::ReplaceSelectionWithArchive(WebKit.WebArchive)",
			"WebKit.WebView::SelectSentence(Foundation.NSObject)",
			"WebKit.WebView::set_HostWindow(AppKit.NSWindow)",
			"WebKit.WebView::set_Preferences(WebKit.WebPreferences)",
			"WebKit.WebView::set_TypingStyle(WebKit.DomCssStyleDeclaration)",
			"WebKit.WebView::SetSelectedDomRange(WebKit.DomRange,AppKit.NSSelectionAffinity)",
			"WebKit.WebView::ShowGuessPanel(Foundation.NSObject)",
			"WebKit.WebView::StartSpeaking(Foundation.NSObject)",
			"WebKit.WebView::StopSpeaking(Foundation.NSObject)",
			"WebKit.WebView::ToggleContinuousSpellChecking(Foundation.NSObject)",
			"WebKit.WebView::ToggleSmartInsertDelete(Foundation.NSObject)",
			"WebKit.WebView::UrlFromPasteboard(AppKit.NSPasteboard)",
			"WebKit.WebView::UrlTitleFromPasteboard(AppKit.NSPasteboard)",
			"WebKit.WebView::UserAgentForUrl(Foundation.NSUrl)",
			"WebKit.WebView::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"WebKit.WebView::WriteElement(Foundation.NSDictionary,Foundation.NSObject[],AppKit.NSPasteboard)",
			"WebKit.WebView::WriteSelection(Foundation.NSObject[],AppKit.NSPasteboard)",
			"WebKit.WKContentRuleListStore::FromUrl(Foundation.NSUrl)",
			"WebKit.WKDownloadDelegate_Extensions::DidFail(WebKit.IWKDownloadDelegate,WebKit.WKDownload,Foundation.NSError,Foundation.NSData)",
			"WebKit.WKDownloadDelegate_Extensions::DidFinish(WebKit.IWKDownloadDelegate,WebKit.WKDownload)",
			"WebKit.WKDownloadDelegate_Extensions::DidReceiveAuthenticationChallenge(WebKit.IWKDownloadDelegate,WebKit.WKDownload,Foundation.NSUrlAuthenticationChallenge,System.Action`2<Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential>)",
			"WebKit.WKDownloadDelegate_Extensions::WillPerformHttpRedirection(WebKit.IWKDownloadDelegate,WebKit.WKDownload,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action`1<WebKit.WKDownloadRedirectPolicy>)",
			"WebKit.WKDownloadDelegateWrapper::DecideDestination(WebKit.WKDownload,Foundation.NSUrlResponse,System.String,System.Action`1<Foundation.NSUrl>)",
			"WebKit.WKFindConfiguration::Copy(Foundation.NSZone)",
			"WebKit.WKFindResult::Copy(Foundation.NSZone)",
			"WebKit.WKFrameInfo::Copy(Foundation.NSZone)",
			"WebKit.WKHttpCookieStore::AddObserver(WebKit.IWKHttpCookieStoreObserver)",
			"WebKit.WKHttpCookieStore::DeleteCookie(Foundation.NSHttpCookie,System.Action)",
			"WebKit.WKHttpCookieStore::RemoveObserver(WebKit.IWKHttpCookieStoreObserver)",
			"WebKit.WKHttpCookieStore::SetCookie(Foundation.NSHttpCookie,System.Action)",
			"WebKit.WKHttpCookieStoreObserver_Extensions::CookiesDidChangeInCookieStore(WebKit.IWKHttpCookieStoreObserver,WebKit.WKHttpCookieStore)",
			"WebKit.WKNavigationDelegate_Extensions::ContentProcessDidTerminate(WebKit.IWKNavigationDelegate,WebKit.WKWebView)",
			"WebKit.WKNavigationDelegate_Extensions::DecidePolicy(WebKit.IWKNavigationDelegate,WebKit.WKWebView,WebKit.WKNavigationAction,System.Action`1<WebKit.WKNavigationActionPolicy>)",
			"WebKit.WKNavigationDelegate_Extensions::DecidePolicy(WebKit.IWKNavigationDelegate,WebKit.WKWebView,WebKit.WKNavigationAction,WebKit.WKWebpagePreferences,System.Action`2<WebKit.WKNavigationActionPolicy,WebKit.WKWebpagePreferences>)",
			"WebKit.WKNavigationDelegate_Extensions::DecidePolicy(WebKit.IWKNavigationDelegate,WebKit.WKWebView,WebKit.WKNavigationResponse,System.Action`1<WebKit.WKNavigationResponsePolicy>)",
			"WebKit.WKNavigationDelegate_Extensions::DidCommitNavigation(WebKit.IWKNavigationDelegate,WebKit.WKWebView,WebKit.WKNavigation)",
			"WebKit.WKNavigationDelegate_Extensions::DidFailNavigation(WebKit.IWKNavigationDelegate,WebKit.WKWebView,WebKit.WKNavigation,Foundation.NSError)",
			"WebKit.WKNavigationDelegate_Extensions::DidFailProvisionalNavigation(WebKit.IWKNavigationDelegate,WebKit.WKWebView,WebKit.WKNavigation,Foundation.NSError)",
			"WebKit.WKNavigationDelegate_Extensions::DidFinishNavigation(WebKit.IWKNavigationDelegate,WebKit.WKWebView,WebKit.WKNavigation)",
			"WebKit.WKNavigationDelegate_Extensions::DidReceiveAuthenticationChallenge(WebKit.IWKNavigationDelegate,WebKit.WKWebView,Foundation.NSUrlAuthenticationChallenge,System.Action`2<Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential>)",
			"WebKit.WKNavigationDelegate_Extensions::DidReceiveServerRedirectForProvisionalNavigation(WebKit.IWKNavigationDelegate,WebKit.WKWebView,WebKit.WKNavigation)",
			"WebKit.WKNavigationDelegate_Extensions::DidStartProvisionalNavigation(WebKit.IWKNavigationDelegate,WebKit.WKWebView,WebKit.WKNavigation)",
			"WebKit.WKNavigationDelegate_Extensions::NavigationActionDidBecomeDownload(WebKit.IWKNavigationDelegate,WebKit.WKWebView,WebKit.WKNavigationAction,WebKit.WKDownload)",
			"WebKit.WKNavigationDelegate_Extensions::NavigationResponseDidBecomeDownload(WebKit.IWKNavigationDelegate,WebKit.WKWebView,WebKit.WKNavigationResponse,WebKit.WKDownload)",
			"WebKit.WKNavigationDelegate_Extensions::ShouldAllowDeprecatedTls(WebKit.IWKNavigationDelegate,WebKit.WKWebView,Foundation.NSUrlAuthenticationChallenge,System.Action`1<System.Boolean>)",
			"WebKit.WKPdfConfiguration::Copy(Foundation.NSZone)",
			"WebKit.WKPreferences::.ctor(Foundation.NSCoder)",
			"WebKit.WKPreferences::EncodeTo(Foundation.NSCoder)",
			"WebKit.WKPreviewElementInfo::Copy(Foundation.NSZone)",
			"WebKit.WKProcessPool::.ctor(Foundation.NSCoder)",
			"WebKit.WKProcessPool::EncodeTo(Foundation.NSCoder)",
			"WebKit.WKScriptMessageHandlerWithReplyWrapper::DidReceiveScriptMessage(WebKit.WKUserContentController,WebKit.WKScriptMessage,System.Action`2<Foundation.NSObject,Foundation.NSString>)",
			"WebKit.WKScriptMessageHandlerWrapper::DidReceiveScriptMessage(WebKit.WKUserContentController,WebKit.WKScriptMessage)",
			"WebKit.WKSnapshotConfiguration::Copy(Foundation.NSZone)",
			"WebKit.WKSnapshotConfiguration::set_SnapshotWidth(Foundation.NSNumber)",
			"WebKit.WKUIDelegate_Extensions::CommitPreviewingViewController(WebKit.IWKUIDelegate,WebKit.WKWebView,UIKit.UIViewController)",
			"WebKit.WKUIDelegate_Extensions::ContextMenuDidEnd(WebKit.IWKUIDelegate,WebKit.WKWebView,WebKit.WKContextMenuElementInfo)",
			"WebKit.WKUIDelegate_Extensions::ContextMenuWillPresent(WebKit.IWKUIDelegate,WebKit.WKWebView,WebKit.WKContextMenuElementInfo)",
			"WebKit.WKUIDelegate_Extensions::CreateWebView(WebKit.IWKUIDelegate,WebKit.WKWebView,WebKit.WKWebViewConfiguration,WebKit.WKNavigationAction,WebKit.WKWindowFeatures)",
			"WebKit.WKUIDelegate_Extensions::DidClose(WebKit.IWKUIDelegate,WebKit.WKWebView)",
			"WebKit.WKUIDelegate_Extensions::GetPreviewingViewController(WebKit.IWKUIDelegate,WebKit.WKWebView,WebKit.WKPreviewElementInfo,WebKit.IWKPreviewActionItem[])",
			"WebKit.WKUIDelegate_Extensions::RequestDeviceOrientationAndMotionPermission(WebKit.IWKUIDelegate,WebKit.WKWebView,WebKit.WKSecurityOrigin,WebKit.WKFrameInfo,System.Action`1<WebKit.WKPermissionDecision>)",
			"WebKit.WKUIDelegate_Extensions::RequestMediaCapturePermission(WebKit.IWKUIDelegate,WebKit.WKWebView,WebKit.WKSecurityOrigin,WebKit.WKFrameInfo,WebKit.WKMediaCaptureType,System.Action`1<WebKit.WKPermissionDecision>)",
			"WebKit.WKUIDelegate_Extensions::RunJavaScriptAlertPanel(WebKit.IWKUIDelegate,WebKit.WKWebView,System.String,WebKit.WKFrameInfo,System.Action)",
			"WebKit.WKUIDelegate_Extensions::RunJavaScriptConfirmPanel(WebKit.IWKUIDelegate,WebKit.WKWebView,System.String,WebKit.WKFrameInfo,System.Action`1<System.Boolean>)",
			"WebKit.WKUIDelegate_Extensions::RunJavaScriptTextInputPanel(WebKit.IWKUIDelegate,WebKit.WKWebView,System.String,System.String,WebKit.WKFrameInfo,System.Action`1<System.String>)",
			"WebKit.WKUIDelegate_Extensions::RunOpenPanel(WebKit.IWKUIDelegate,WebKit.WKWebView,WebKit.WKOpenPanelParameters,WebKit.WKFrameInfo,System.Action`1<Foundation.NSUrl[]>)",
			"WebKit.WKUIDelegate_Extensions::SetContextMenuConfiguration(WebKit.IWKUIDelegate,WebKit.WKWebView,WebKit.WKContextMenuElementInfo,System.Action`1<UIKit.UIContextMenuConfiguration>)",
			"WebKit.WKUIDelegate_Extensions::ShouldPreviewElement(WebKit.IWKUIDelegate,WebKit.WKWebView,WebKit.WKPreviewElementInfo)",
			"WebKit.WKUIDelegate_Extensions::WillCommitContextMenu(WebKit.IWKUIDelegate,WebKit.WKWebView,WebKit.WKContextMenuElementInfo,UIKit.IUIContextMenuInteractionCommitAnimating)",
			"WebKit.WKUrlSchemeHandlerWrapper::StartUrlSchemeTask(WebKit.WKWebView,WebKit.IWKUrlSchemeTask)",
			"WebKit.WKUrlSchemeHandlerWrapper::StopUrlSchemeTask(WebKit.WKWebView,WebKit.IWKUrlSchemeTask)",
			"WebKit.WKUrlSchemeTaskWrapper::DidFailWithError(Foundation.NSError)",
			"WebKit.WKUrlSchemeTaskWrapper::DidReceiveData(Foundation.NSData)",
			"WebKit.WKUrlSchemeTaskWrapper::DidReceiveResponse(Foundation.NSUrlResponse)",
			"WebKit.WKUserContentController::.ctor(Foundation.NSCoder)",
			"WebKit.WKUserContentController::AddContentRuleList(WebKit.WKContentRuleList)",
			"WebKit.WKUserContentController::AddScriptMessageHandler(WebKit.IWKScriptMessageHandler,System.String)",
			"WebKit.WKUserContentController::AddScriptMessageHandler(WebKit.IWKScriptMessageHandler,WebKit.WKContentWorld,System.String)",
			"WebKit.WKUserContentController::AddScriptMessageHandler(WebKit.IWKScriptMessageHandlerWithReply,WebKit.WKContentWorld,System.String)",
			"WebKit.WKUserContentController::AddUserScript(WebKit.WKUserScript)",
			"WebKit.WKUserContentController::EncodeTo(Foundation.NSCoder)",
			"WebKit.WKUserContentController::RemoveAllScriptMessageHandlers(WebKit.WKContentWorld)",
			"WebKit.WKUserContentController::RemoveContentRuleList(WebKit.WKContentRuleList)",
			"WebKit.WKUserContentController::RemoveScriptMessageHandler(System.String,WebKit.WKContentWorld)",
			"WebKit.WKUserScript::.ctor(Foundation.NSString,WebKit.WKUserScriptInjectionTime,System.Boolean)",
			"WebKit.WKUserScript::.ctor(Foundation.NSString,WebKit.WKUserScriptInjectionTime,System.Boolean,WebKit.WKContentWorld)",
			"WebKit.WKUserScript::Copy(Foundation.NSZone)",
			"WebKit.WKWebsiteDataStore::.ctor(Foundation.NSCoder)",
			"WebKit.WKWebsiteDataStore::EncodeTo(Foundation.NSCoder)",
			"WebKit.WKWebsiteDataStore::FetchDataRecordsOfTypes(Foundation.NSSet`1<Foundation.NSString>,System.Action`1<Foundation.NSArray>)",
			"WebKit.WKWebsiteDataStore::RemoveDataOfTypes(Foundation.NSSet`1<Foundation.NSString>,Foundation.NSDate,System.Action)",
			"WebKit.WKWebsiteDataStore::RemoveDataOfTypes(Foundation.NSSet`1<Foundation.NSString>,WebKit.WKWebsiteDataRecord[],System.Action)",
			"WebKit.WKWebView::.ctor(CoreGraphics.CGRect,WebKit.WKWebViewConfiguration)",
			"WebKit.WKWebView::.ctor(Foundation.NSCoder)",
			"WebKit.WKWebView::CallAsyncJavaScript(System.String,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,WebKit.WKFrameInfo,WebKit.WKContentWorld,System.Action`2<Foundation.NSObject,Foundation.NSError>)",
			"WebKit.WKWebView::CreatePdf(WebKit.WKPdfConfiguration,System.Action`2<Foundation.NSData,Foundation.NSError>)",
			"WebKit.WKWebView::EvaluateJavaScript(Foundation.NSString,WebKit.WKJavascriptEvaluationResult)",
			"WebKit.WKWebView::EvaluateJavaScript(System.String,WebKit.WKFrameInfo,WebKit.WKContentWorld,System.Action`2<Foundation.NSObject,Foundation.NSError>)",
			"WebKit.WKWebView::Find(System.String,WebKit.WKFindConfiguration,System.Action`1<WebKit.WKFindResult>)",
			"WebKit.WKWebView::GetPrintOperation(AppKit.NSPrintInfo)",
			"WebKit.WKWebView::GoTo(WebKit.WKBackForwardListItem)",
			"WebKit.WKWebView::LoadData(Foundation.NSData,System.String,System.String,Foundation.NSUrl)",
			"WebKit.WKWebView::LoadFileRequest(Foundation.NSUrlRequest,Foundation.NSUrl)",
			"WebKit.WKWebView::LoadFileUrl(Foundation.NSUrl,Foundation.NSUrl)",
			"WebKit.WKWebView::LoadHtmlString(Foundation.NSString,Foundation.NSUrl)",
			"WebKit.WKWebView::LoadRequest(Foundation.NSUrlRequest)",
			"WebKit.WKWebView::LoadSimulatedRequest(Foundation.NSUrlRequest,Foundation.NSUrlResponse,Foundation.NSData)",
			"WebKit.WKWebView::LoadSimulatedRequest(Foundation.NSUrlRequest,System.String)",
			"WebKit.WKWebView::ResumeDownload(Foundation.NSData,System.Action`1<WebKit.WKDownload>)",
			"WebKit.WKWebView::set_InteractionState(Foundation.NSObject)",
			"WebKit.WKWebView::set_UnderPageBackgroundColor(AppKit.NSColor)",
			"WebKit.WKWebView::set_UnderPageBackgroundColor(UIKit.UIColor)",
			"WebKit.WKWebView::StartDownload(Foundation.NSUrlRequest,System.Action`1<WebKit.WKDownload>)",
			"WebKit.WKWebView::TakeSnapshot(WebKit.WKSnapshotConfiguration,System.Action`2<AppKit.NSImage,Foundation.NSError>)",
			"WebKit.WKWebView::TakeSnapshot(WebKit.WKSnapshotConfiguration,System.Action`2<UIKit.UIImage,Foundation.NSError>)",
			"WebKit.WKWebView::ValidateUserInterfaceItem(AppKit.INSValidatedUserInterfaceItem)",
			"WebKit.WKWebViewConfiguration::.ctor(Foundation.NSCoder)",
			"WebKit.WKWebViewConfiguration::Copy(Foundation.NSZone)",
			"WebKit.WKWebViewConfiguration::EncodeTo(Foundation.NSCoder)",
			"WebKit.WKWebViewConfiguration::set_DefaultWebpagePreferences(WebKit.WKWebpagePreferences)",
			"WebKit.WKWebViewConfiguration::set_Preferences(WebKit.WKPreferences)",
			"WebKit.WKWebViewConfiguration::set_ProcessPool(WebKit.WKProcessPool)",
			"WebKit.WKWebViewConfiguration::set_UserContentController(WebKit.WKUserContentController)",
			"WebKit.WKWebViewConfiguration::set_WebsiteDataStore(WebKit.WKWebsiteDataStore)",
			"WebKit.WKWebViewConfiguration::SetUrlSchemeHandler(WebKit.IWKUrlSchemeHandler,System.String)",
		};
	}
}
