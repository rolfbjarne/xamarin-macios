# Xamarin
#
# Template that contains the different steps required to run device
# tests. The template takes a number of parameters so that it can
# be configured for the different type of devices.
#
parameters:

- name: statusContext
  type: string
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices.

- name: testsLabels
  type: string
  default: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests' # default context, since we started dealing with iOS devices.

- name: disableProvisionatorCache
  type: boolean
  default: false

- name: clearProvisionatorCache
  type: boolean
  default: false

- name: useXamarinStorage
  type: boolean
  default: false  # xamarin-storage will disappear, so by default do not use it

- name: vsdropsPrefix
  type: string

# can depend on the pool, which is annoying, but we should keep it in mind
- name: keyringPass
  type: string

- name: devicePrefix
  type: string
  default: 'ios' # default context, since we started dealing with iOS devices.

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

steps:

- checkout: self
- checkout: maccore
  persistCredentials: true  # hugely important, else there are some scripts that check a single file from maccore that will fail

- bash: $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/automation/scripts/bash/clean-bot.sh
  displayName: 'Clean bot'
  env:
    BUILD_REVISION: 'jenkins'
  continueOnError: true

- bash: |
    security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASS login.keychain
  env:
    KEYCHAIN_PASS: ${{ parameters.keyringPass }}
  displayName: 'Remove security UI-prompt (http://stackoverflow.com/a/40039594/183422)'
  condition: succeededOrFailed() # we do not care about the previous process cleanup
  continueOnError: true

- bash: cd $(System.DefaultWorkingDirectory)/xamarin-macios/ && git clean -xdf
  displayName: 'Clean workspace'

# Run the pipeline script tests to ensure that we will have not have an unexpected behaviour.
- bash: make -C $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/automation/scripts run-tests
  displayName: 'Run pipeline script tests'

- pwsh : |
    Write-Host "IsMacOS: ${IsMacOS}"
    Write-Host "IsWindows: ${IsWindows}"
    Write-Host "IsLinux: ${IsLinux}"

    if ($IsMacOS -or $IsLinux) {
        Write-Host "HOSTNAME: $(hostname)"
    } else {
        Write-Host "COMPUTERNAME: ${env:COMPUTERNAME}"
    }

    gci env: | format-table -autosize -wrap
  displayName: 'Show Environment'

# Use a cmdlet to check if the space available in the devices root system is larger than 50 gb. If there is not
# enough space available it:
# 1. Set the status of the build to error. It is not a failure since no tests have been ran.
# 2. Set a comment stating the same as what was sent to the status.
# 3. Cancel the pipeline and do not execute any of the following steps.
- pwsh: |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/automation/scripts/
    Import-Module ./System.psm1
    Import-Module ./VSTS.psm1
    Import-Module ./GitHub.psm1
    if ( -not (Test-HDFreeSpace -Size 50)) {
      Set-GitHubStatus -Status "error" -Description "Not enough free space in the host." -Context "$Env:CONTEXT"
      New-GitHubComment -Header "Tests failed catastrophically on $Env:CONTEXT" -Emoji ":fire:" -Description "Not enough free space in the host."
      Stop-Pipeline
    } else {
      Set-GitHubStatus -Status "pending" -Description "Device tests on VSTS have been started." -Context "$Env:CONTEXT"
    }
  env:
    BUILD_REVISION: $(Build.SourceVersion)
    CONTEXT: ${{ parameters.statusContext }}
    GITHUB_TOKEN: $(GitHub.Token)
    ACCESSTOKEN: $(System.AccessToken)
  displayName: 'Check HD Free Space'
  timeoutInMinutes: 5
  condition: succeededOrFailed() # we do not care about the previous step

# if we got to this point, it means that we do have at least 50 Gb to run the test, should
# be more than enough, else the above script would have stopped the pipeline
- bash: |
    set -x
    set -e
    cd xamarin-macios
    ./configure --enable-xamarin
  displayName: 'Enable Xamarin'
  timeoutInMinutes: 1

# Add the required provisioning profiles to be able to execute the tests.
- bash: |
    set -x
    set -e
    rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*p12
    rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*mobileprovision
    ./maccore/tools/install-qa-provisioning-profiles.sh -v
  displayName: 'Add provisioning profiles'
  timeoutInMinutes: 30
  env:
    AUTH_TOKEN_GITHUB_COM: ${{ parameters.gitHubToken }}
    AUTH_TOKEN_LA_DEV_APPLE_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_LA_DISTR_APPLE_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_LA_MAC_INSTALLER_DISTR_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_2_P12: ${{ parameters.xqaCertPass }}
    LOGIN_KEYCHAIN_PASSWORD: ${{ parameters.keyringPass }}

# download the artifacts.json, which will use to find the URI of the built pkg to later be installed by provisionator
- task: DownloadPipelineArtifact@2
  displayName: Download artifacts.json
  inputs:
    patterns: '**/*.json'
    allowFailedBuilds: true
    path: $(Build.SourcesDirectory)/artifacts

- pwsh: |
    Dir $(Build.SourcesDirectory)/artifacts
    $json = Get-Content '$(Build.SourcesDirectory)/artifacts/pkg-info/artifacts.json' | Out-String | ConvertFrom-Json
    foreach ($i in $json) {
      if ($i.tag -like "xamarin-ios*" -and -not ($i.url -like "*notarized*")) {
        $url = $i.url
        Write-Host "##vso[task.setvariable variable=XI_PACKAGE;]$url"
        break
      }
    }
  displayName: 'Set iOS pkgs url'
  timeoutInMinutes: 5

- bash: |
    echo "Pkg uri is $XI_PACKAGE"
    make -C $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/ device-tests-provisioning.csx
  displayName: 'Generate Provisionator csx file'

# Executed ONLY if we want to clear the provisionator cache.
- bash: rm -rf "$TOOLS_DIR/provisionator"
  env:
    TOOLS_DIR: $(Agent.ToolsDirectory)
  displayName: 'Nuke Provisionator Tool Cache'
  condition: ${{ parameters.clearProvisionatorCache }}

# Use the provisionator to install the test dependencies. Those have been generated in the 'Generate Provisionator csx file' step.
- task: xamops.azdevex.provisionator-task.provisionator@1
  displayName: 'Provision dependencies'
  inputs:
    provisioning_script: $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/device-tests-provisioning.csx
    provisioning_extra_args: '-vvvv'
  timeoutInMinutes: 250

# remove any old processes that might have been left behind.
- pwsh : |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/automation/scripts/System.psm1
    Clear-XamarinProcesses
  displayName: 'Process cleanup'

# Increase mlaunch verbosity. Will step on the old setting present.
- pwsh : |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/automation/scripts/MLaunch.psm1
    Set-MLaunchVerbosity -Verbosity 10
  displayName: 'Make mlaunch verbose'
  condition: succeededOrFailed() # we do not care about the previous step

# Re-start the daemon used to find the devices in the bot.
- pwsh : |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/automation/scripts/MLaunch.psm1
    Optimize-DeviceDiscovery
  displayName: 'Fix device discovery (reset launchctl)'
  condition: succeededOrFailed() # making mlaunch verbose should be a non blocker

# Update the status to pending, that way the monitoring person knows that we started running the tests. Up to this
# point we were just setting up the agent.
- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/automation/scripts/GitHub.psm1
    Set-GitHubStatus -Status "pending" -Context "$Env:CONTEXT" -Description "Running device tests on $Env:CONTEXT"
  env:
    BUILD_REVISION: $(Build.SourceVersion)
    CONTEXT: ${{ parameters.statusContext }}
    GITHUB_TOKEN: $(GitHub.Token)
  displayName: Set pending GitHub status
  continueOnError: true
  condition: succeededOrFailed() # re-starting the daemon should not be an issue
  timeoutInMinutes: 5

# Run tests. If we are using xamarin-storage add a periodic command to be executed by xharness, else, since we are using vsdrops do nothing.
- bash: |
    set -x
    set -e

    cd $WORKING_DIR/xamarin-macios

    echo "Running tests on $AGENT_NAME"
    echo "##vso[task.setvariable variable=TESTS_BOT;isOutput=true]$AGENT_NAME"

    make -C builds download -j || true
    make -C builds downloads -j || true
    make -C builds .stamp-mono-ios-sdk-destdir -j || true
    EC=0
    MONO_ENV_OPTIONS=--trace=E:all make -C tests vsts-device-tests || EC=$?
    if [ $EC -eq 0 ]; then
      echo '##vso[task.setvariable variable=TESTS_JOBSTATUS;isOutput=true]Succeeded'
    else
      echo '##vso[task.setvariable variable=TESTS_JOBSTATUS;isOutput=true]Failed'
    fi
  env:
    WORKING_DIR: $(System.DefaultWorkingDirectory)
    TESTS_EXTRA_ARGUMENTS: ${{ parameters.testsLabels }}
    USE_XAMARIN_STORAGE: ${{ parameters.useXamarinStorage }}
    VSDROPS_URI: '${{ parameters.vsdropsPrefix }}/$(Build.BuildNumber)/$(Build.BuildId)/${{ parameters.devicePrefix }};/tests/' # uri used to create the vsdrops index using full uri
    USE_TCP_TUNNEL: 'true'
  displayName: 'Run tests'
  name: runTests # not to be confused with the displayName, this is used to later use the name of the step to access the output variables from an other job
  timeoutInMinutes: 600

# Upload TestSummary as an artifact.
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: TestSummary'
  inputs:
    targetPath: 'xamarin-macios/tests/TestSummary.md'
    artifactName: TestSummary-${{ parameters.devicePrefix }}
  continueOnError: true
  condition: succeededOrFailed()

- pwsh: |
    $summaryName = "TestSummary-$Env:PREFIX.md"
    $summaryPath = "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tests/TestSummary.md"
    Write-Host "##vso[task.addattachment type=Distributedtask.Core.Summary;name=$summaryName;]$summaryPath"
  displayName: Set TestSummary
  env:
    PREFIX: ${{ parameters.devicePrefix }}

# Archive files for the Html Report so that the report can be easily uploaded as artifacts of the build.
- task: ArchiveFiles@1
  displayName: 'Archive HtmlReport'
  inputs:
    rootFolder: 'xamarin-macios/jenkins-results'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
  continueOnError: true
  condition: succeededOrFailed()

# Create HtmlReport artifact. This serves two purposes:
# 1. It is the way we are going to share the HtmlReport with the publish_html job that is executed on a Windows machine.
# 2. Users can download this if they want.
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: HtmlReport'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
    artifactName: HtmlReport-${{ parameters.devicePrefix }}
  continueOnError: true
  condition: succeededOrFailed()

# Be nice and clean behind you
- pwsh: |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/automation/scripts/
    Import-Module ./System.psm1
    Clear-AfterTests
  displayName: 'Cleanup'
  continueOnError: true
  condition: always() # no matter what, includes cancellation
