<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!-- Version information -->
	<Import Project="Microsoft.$(_PlatformName).Sdk.Versions.props" />

	<!-- This contains the OS versions we support for target platform -->
	<Import Project="Microsoft.$(_PlatformName).Sdk.SupportedTargetPlatforms.props" />

	<Import Project="Xamarin.Shared.Sdk.TargetFrameworkInference.props" />

	<PropertyGroup>
		<!-- Set to true when using the Microsoft.<platform>.Sdk NuGet. This is used by pre-existing/shared targets to tweak behavior depending on build system -->
		<UsingAppleNETSdk>true</UsingAppleNETSdk>
		<!-- This is the location of the Microsoft.<platform>.Sdk NuGet (/usr/local/share/dotnet/sdk/<version>/Sdks/Microsoft.[iOS/tvOS/watchOS/macOS].Sdk) -->
		<_XamarinSdkRootDirectory>$([MSBuild]::NormalizePath('$(MSBuildThisFileDirectory)', '..'))\</_XamarinSdkRootDirectory>
		<_XamarinTaskAssembly Condition="'$(_PlatformName)' != 'macOS'">$(_XamarinSdkRootDirectory)\tools\msbuild\iOS\Xamarin.iOS.Tasks.dll</_XamarinTaskAssembly>
		<_XamarinTaskAssembly Condition="'$(_PlatformName)' == 'macOS'">$(_XamarinSdkRootDirectory)\tools\msbuild\macOS\Xamarin.Mac.Tasks.dll</_XamarinTaskAssembly>
		<SuppressTrimAnalysisWarnings Condition=" '$(SuppressTrimAnalysisWarnings)' == '' ">true</SuppressTrimAnalysisWarnings>
		<AfterMicrosoftNETSdkTargets>$(AfterMicrosoftNETSdkTargets);$(MSBuildThisFileDirectory)Microsoft.$(_PlatformName).Sdk.targets</AfterMicrosoftNETSdkTargets>

		<!-- _XamarinSdkRoot is used by the existing MSBuild targets files -->
		<_XamarinSdkRoot Condition="'$(_XamarinSdkRoot)' == ''">$(_XamarinSdkRootDirectory)</_XamarinSdkRoot>
		<!-- _XamarinSdkRootOnMac this should be passed to tasks that need to access the Xamarin Sdk dir on the Mac, this value will be overriden from Windows -->
		<_XamarinSdkRootOnMac>$(_XamarinSdkRoot)</_XamarinSdkRootOnMac>

		<!-- We don't need any dependency files -->
		<GenerateDependencyFile Condition="'$(GenerateDependencyFile)' == ''">false</GenerateDependencyFile>
	</PropertyGroup>

	<!-- Set the default RuntimeIdentifier if not already specified. -->
	<PropertyGroup Condition=" ('$(OutputType)' == 'Exe' Or '$(IsAppExtension)' == 'true') And '$(RuntimeIdentifier)' == '' And '$(RuntimeIdentifiers)' == '' ">
		<RuntimeIdentifier Condition="'$(_PlatformName)' == 'iOS'">iossimulator-x64</RuntimeIdentifier>
		<RuntimeIdentifier Condition="'$(_PlatformName)' == 'tvOS'">tvossimulator-x64</RuntimeIdentifier>
		<RuntimeIdentifier Condition="'$(_PlatformName)' == 'macOS'">osx-x64</RuntimeIdentifier>
		<RuntimeIdentifier Condition="'$(_PlatformName)' == 'MacCatalyst'">maccatalyst-x64</RuntimeIdentifier>
		<!--
			Workaround/hack:

			The Microsoft.NET.RuntimeIdentifierInference.targets file is loaded
			before this file, and executes some logic depending on whether the
			RuntimeIdentifier is set or not. Since RuntimeIdentifier isn't set at
			that point (we're setting it here), we need to replicate the logic in
			the Microsoft.NET.RuntimeIdentifierInference.targets file to make sure
			things work as expected.

			Ref: https://github.com/dotnet/runtime/issues/54406
		-->
		<SelfContained>true</SelfContained>
		<_RuntimeIdentifierUsesAppHost>false</_RuntimeIdentifierUsesAppHost>
		<UseAppHost>false</UseAppHost>
	</PropertyGroup>
</Project>
