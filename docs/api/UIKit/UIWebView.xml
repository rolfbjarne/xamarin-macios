<Documentation>
  <Docs DocId="T:UIKit.UIWebView">
    <summary>A <see cref="T:UIKit.UIView" /> that displays a web browser.</summary>
    <remarks>
      <para>
   The Xamarin API supports two styles of event notification: the Objective-C style that uses a delegate class or the C# style using event notifications.  
</para>
      <para>
   The C# style allows the user to add or remove event handlers at runtime by assigning to the events of properties of this class.    Event handlers can be anyone of a method, an anonymous methods or a lambda expression.  Using the C# style events or properties will override any manual settings to the Objective-C Delegate or WeakDelegate settings.
</para>
      <para>The Objective-C style requires the user to create a new class derived from <see cref="T:UIKit.UIWebViewDelegate" /> class and assign it to the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=UIKit%20Delegate&amp;scope=Xamarin" title="P:UIKit.Delegate">P:UIKit.Delegate</a></format> property.   Alternatively, for low-level control, by creating a class derived from <see cref="T:Foundation.NSObject" /> which has every entry point properly decorated with an [Export] attribute.   The instance of this object can then be assigned to the <see cref="P:UIKit.UIWebView.WeakDelegate" /> property.   
</para>
    </remarks>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Content_Controls/Web_View/Load_a_Web_Page">Load a Web Page</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Content_Controls/Web_View/Load_Local_Content">Load Local Content</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Content_Controls/Web_View/Load_Non-Web_Documents">Load Non-Web Documents</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIWebView_Class/index.html">Apple documentation for <c>UIWebView</c></related>
  </Docs>
</Documentation>