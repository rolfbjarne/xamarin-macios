# Main template that contains all the jobs that are required to run the device tests.
#
# The stage contains two different jobs
#
# tests: Runs the tests on a pool that contains devices that are capable to run them.
# publish_html: Because vsdrop is not supported on macOS we have an extra job that
#   will run on a pool with Windows devices that will publish the results on VSDrop to
#   be browsable.

parameters:

# string that is used to identify the status to be used to expose the result on GitHub
- name: statusContext
  type: string
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices.

# string that contains the extra labels to pass to xharness to select the tests to execute.
- name: testsLabels
  type: string
  default: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests' # default context, since we started dealing with iOS devices.

# name of the pool that contains the iOS devices
- name: testPool
  type: string
  default: ''

# demand that has to be matched by a bot to be able to run the tests.
- name: extraBotDemands
  type: object
  default: []

- name: useXamarinStorage
  type: boolean
  default: false

- name: vsdropsPrefix
  type: string

- name: stageName
  type: string

- name: displayName
  type: string

- name: keyringPass
  type: string

- name: testPrefix
  type: string

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

- name: makeTarget
  type: string
  default: 'vsts-device-tests' # target to be used to run the tests

- name: condition
  type: boolean
  default: true

- name: parseLabels
  type: boolean
  default: true

- name: testConfigurations
  type: object

- name: supportedPlatforms
  type: object

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

- name: XcodeChannel
  type: string

- name: macOSName
  type: string

stages:
- stage: ${{ parameters.stageName }}
  displayName: ${{ parameters.displayName }}
  dependsOn:
  # - build_packages
  # we need to have the pkgs built and the device sets to be ran, that is decided via the labels or type of build during the build_packages stage
  condition: and(succeeded(), ${{ parameters.condition }})

  jobs:
  - job: configure
    displayName: 'Configure build'
    pool:
      vmImage: windows-latest

    variables:
      isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
      isScheduled: $[eq(variables['Build.Reason'], 'Schedule')]
      BRANCH_NAME: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]

    steps:
    - template: ../common/configure.yml
      parameters: 
        repositoryAlias: ${{ parameters.repositoryAlias }}
        commit: ${{ parameters.commit }}
        uploadArtifacts: false
        testConfigurations: ${{ parameters.testConfigurations }}
        supportedPlatforms: ${{ parameters.supportedPlatforms }}

  - job: debugOutput
    dependsOn:
    - configure
    displayName: 'Debug output'
    timeoutInMinutes: 10
    pool:
      vmImage: ubuntu-latest
    variables:
      VAR_WHATEVER3: $[ convertToJson(dependencies) ]
      VAR_WHATEVER4: $[ convertToJson(dependencies.configure) ]
      VAR_WHATEVER9: $[ convertToJson(parameters) ]
      VAR_WHATEVER1: "World"
    steps:
    - bash: env | sort
      displayName: 'Dump env'
      name: DumpEnv
      env:
        ENV_WHATEVER3: $[ convertToJson(dependencies) ]
        ENV_WHATEVER4: $[ convertToJson(dependencies.configure) ]
        ENV_WHATEVER9: $[ convertToJson(parameters) ]
        ENV_WHATEVER1: "Hello"

  # - job: "tests"
  #   dependsOn:
  #   - configure
  #   displayName: 'Running tests:'
  #   timeoutInMinutes: 1000
  #   pool:
  #     name: $(AgentPoolComputed)
  #     demands:
  #     - Agent.OS -equals Darwin
  #     - macOS.Name -equals ${{ parameters.macOSName }}
  #     - XcodeChannel -equals ${{ parameters.XcodeChannel }}
  #     - ${{ each demand in parameters.extraBotDemands }}:
  #       - demand
  #     workspace:
  #       clean: all
  #   strategy:
  #     matrix: $[ dependencies.configure.outputs['test_matrix.TEST_MATRIX'] ]
  #   steps:
  #   - bash: env | sort
  #     displayName: 'Dump env'
  #     name: DumpEnv
