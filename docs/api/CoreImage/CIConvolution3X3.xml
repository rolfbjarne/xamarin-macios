<Documentation>
  <Docs DocId="T:CoreImage.CIConvolution3X3">
    <summary>A filter that performs a custom 3x3 matrix convolution.</summary>
    <remarks>
      <para>The following example shows this filter in use</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Create the CIImage from a file
CIImage heron = CIImage.FromCGImage (UIImage.FromFile ("heron.jpg").CGImage);

// Create a CIConvolution3X3 filter with the input image
var convolution_3X3 = new CIConvolution3X3 () {
	Image = heron,
	Weights = new CIVector (new float [] {
		0, -1, 0,
		-1, 5, -1,
		0, -1, 0}),
	Bias = 0,
};

// Get the altered image from the filter
var output = convolution_3X3.OutputImage;

// To render the results, we need to create a context, and then
// use one of the context rendering APIs, in this case, we render the
// result into a CoreGraphics image, which is merely a useful representation
//
var context = CIContext.FromOptions (null);

var cgimage = context.CreateCGImage (output, output.Extent);

// The above cgimage can be added to a screen view, for example, this
// would add it to a UIImageView on the screen:
myImageView.Image = UIImage.FromImage (cgimage);
        ]]></code>
      </example>
      <para>
        With the following image input:
      </para>
      <para>
        <img href="~/CoreImage/_images/heron.jpg" alt="Photograph of a heron." />
      </para>
      <para>
         Produces the following output:
      </para>
      <para>
        <img href="~/CoreImage/_images/convolution_3X3.png" alt="Result of applying the filter." />
      </para>
      <para>
      	"canon" Â© 2012 cuatrok77 hernandez, used under a Creative Commons Attribution-ShareAlike license: https://creativecommons.org/licenses/by-sa/3.0/ 
      </para>
    </remarks>
  </Docs>
</Documentation>