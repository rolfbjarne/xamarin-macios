<Documentation>
  <Docs DocId="T:UIKit.UITableViewDataSource">
    <summary>The data source for a <see cref="T:UIKit.UITableView" />. Xamarin.iOS developers should prefer to use <see cref="T:UIKit.UITableViewSource" /> instead of this class.</summary>
    <remarks>
      <para>Implementing <see cref="T:UIKit.UITableView" /> often requires subclasses of both <see cref="T:UIKit.UITableViewDataSource" /> and <see cref="T:UIKit.UITableViewDelegate" /> to provide data and behavior for the table view. Xamarin.iOS provides a single class - <see cref="T:UIKit.UITableViewSource" /> - so that only one class needs to be implemented.</para>
      <para>The <see cref="T:UIKit.UITableViewDataSource" /> class methods provide a table view with all the information it requires to display its data - such as informing it of the number of sections and rows, and what cell view to use for each row.</para>
      <para>The universally-important function of <see cref="T:UIKit.UITableViewDataSource" /> is to provide individual <see cref="T:UIKit.UITableViewCell" />s in response to calls to <see cref="M:UIKit.UITableViewDataSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" />. That call takes as arguments the <see cref="T:UIKit.UITableView" /> in question and an <see cref="T:Foundation.NSIndexPath" />. That <see cref="T:Foundation.NSIndexPath" /> is based, in turn, on calls to <see cref="M:UIKit.UITableViewDataSource.NumberOfSections(UIKit.UITableView)" /> and <see cref="M:UIKit.UITableViewDataSource.RowsInSection(UIKit.UITableView,System.nint)" />, so the application developer must, at a minimum, override these three functions. (The <see cref="T:UIKit.UITableView" /> additionally calls <see cref="M:UIKit.UITableViewDelegate.GetHeightForRow(UIKit.UITableView,Foundation.NSIndexPath)" /> and other layout-related methods for header and footer views and the application developer must override these as appropriate.)</para>
      <para>Static tables may return references to pre-allocated <see cref="T:UIKit.UITableViewCell" />s from calls to <see cref="M:UIKit.UITableViewDataSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" />. Dynamic tables should use the <see cref="T:UIKit.UITableView" />'s built-in cell reuse cache by calling <see cref="M:UIKit.UITableView.DequeueReusableCell(System.String,Foundation.NSIndexPath)" />. In iOS 6 and later, application developers should use <see cref="M:UIKit.UITableView.RegisterClassForCellReuse(System.Type,System.String)" /> or <see cref="M:UIKit.UITableView.RegisterNibForCellReuse(UIKit.UINib,System.String)" /> during initialization, in which case <see cref="M:UIKit.UITableView.DequeueReusableCell(System.String,Foundation.NSIndexPath)" /> will instantiate new <see cref="T:UIKit.UITableViewCell" />s as necessary. If application developers are targeting earlier iOS versions, their override of <see cref="M:UIKit.UITableViewDataSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" /> must check for an <see langword="null" /> return from <see cref="M:UIKit.UITableView.DequeueReusableCell(System.String,Foundation.NSIndexPath)" /> and instantiate a <see cref="T:UIKit.UITableViewCell" /> as necessary. </para>
    </remarks>
    
    
    
    
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/index.html">Apple documentation for <c>UITableViewDataSource</c></related>
  </Docs>
</Documentation>