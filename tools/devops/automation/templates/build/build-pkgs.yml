parameters:
- name: runTests
  type: boolean
  default: true

- name: runDeviceTests
  type: boolean
  default: true

- name: vsdropsPrefix
  type: string

- name: keyringPass
  type: string

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

- name: enableDotnet
  type: boolean
  default: false

- name: uploadBinlogs
  type: boolean
  default: true

- name: signAndNotarize
  type: boolean
  default: true

- name: skipESRP
  type: boolean
  default: false # only to be used when testing the CI and we do not need a signed pkg

steps:
- template: build.yml
  parameters:
    runDeviceTests: ${{ parameters.runDeviceTests }}
    vsdropsPrefix: ${{ parameters.vsdropsPrefix }}
    keyringPass: ${{ parameters.keyringPass }}
    gitHubToken: ${{ parameters.gitHubToken }}
    xqaCertPass: ${{ parameters.xqaCertPass }}
    enableDotnet: ${{ parameters.enableDotnet }}
    buildSteps:
      # build not signed .pkgs for the SDK
      - bash: |
          set -x
          set -e
          rm -Rf $(Build.SourcesDirectory)/package/*.pkg
          rm -Rf $(Build.SourcesDirectory)/package/notarized/*.pkg
          time make -C $(Build.SourcesDirectory)/xamarin-macios/ package
        name: packages
        displayName: 'Build Packages'
        condition: and(succeeded(), contains(variables['configuration.BuildPkgs'], 'True'))
        timeoutInMinutes: 180

      # build nugets
      - ${{ if eq(parameters.enableDotnet, true) }}:
        - template: build-nugets.yml


      - ${{ if eq(parameters.signAndNotarize, true) }}:
        # only sign an notarize in no PR executions
        - template: sign-and-notarized.yml
          parameters:
            enableDotnet: ${{ parameters.enableDotnet }}
            skipESRP: ${{ parameters.skipESRP }}
            keyringPass: ${{ parameters.keyringPass }}

      # publish nugets (must be done after signing)
      - ${{ if eq(parameters.enableDotnet, true) }}:
        - template: publish-nugets.yml

      - template: generate-workspace-info.yml@templates
        parameters:
          GitHubToken: $(GitHub.Token)
          ArtifactDirectory: $(Build.SourcesDirectory)/package-internal

      - bash: |
          var=$(make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops print-variable VARIABLE=IOS_NUGET_VERSION_FULL)
          IOS_NUGET_VERSION_FULL=${var#*=}
          IOS_NUGET_VERSION_FULL=$(echo $IOS_NUGET_VERSION_FULL | cut -d "+" -f1)

          var=$(make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops print-variable VARIABLE=TVOS_NUGET_VERSION_FULL)
          TVOS_NUGET_VERSION_FULL=${var#*=}
          TVOS_NUGET_VERSION_FULL=$(echo $TVOS_NUGET_VERSION_FULL | cut -d "+" -f1)

          var=$(make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops print-variable VARIABLE=MACOS_NUGET_VERSION_FULL)
          MACOS_NUGET_VERSION_FULL=${var#*=}
          MACOS_NUGET_VERSION_FULL=$(echo $MACOS_NUGET_VERSION_FULL | cut -d "+" -f1)

          var=$(make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops print-variable VARIABLE=MACCATALYST_NUGET_VERSION_FULL)
          MACCATALYST_NUGET_VERSION_FULL=${var#*=}
          MACCATALYST_NUGET_VERSION_FULL=$(echo $MACCATALYST_NUGET_VERSION_FULL | cut -d "+" -f1)
          WORKLOAD_DST="$(Build.SourcesDirectory)/package-internal/WorkloadRollback.json"

          echo "{" > $WORKLOAD_DST
          echo "\"microsoft.net.sdk.ios\": \"$IOS_NUGET_VERSION_FULL\"," >>  $WORKLOAD_DST
          echo "\"microsoft.net.sdk.tvos\": \"$TVOS_NUGET_VERSION_FULL\"," >> $WORKLOAD_DST
          echo "\"microsoft.net.sdk.macos\": \"$MACOS_NUGET_VERSION_FULL\"," >>  $WORKLOAD_DST
          echo "\"microsoft.net.sdk.maccatalyst\": \"$MACCATALYST_NUGET_VERSION_FULL\"" >> $WORKLOAD_DST
          echo "}" >>  $WORKLOAD_DST

          echo "Rollback file contents:" 
          echo "$(cat $WORKLOAD_DST)"
        name: workload_file
        displayName: 'Generate "WorkloadRollback.json'

      # upload each of the pkgs into the pipeline artifacts
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Build Artifacts'
        inputs:
          targetPath: $(Build.SourcesDirectory)/package
          artifactName: package
        continueOnError: true

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Build Internal Artifacts'
        inputs:
          targetPath: $(Build.SourcesDirectory)/package-internal
          artifactName: package-internal
        continueOnError: true

      # funny enough we need these profiles to build the mac tests
      - bash: |
          set -x
          set -e

          cd "$SOURCES_DIR/maccore/tools/"
          ./install-qa-provisioning-profiles.sh -v
        displayName: 'Add tests provisioning profiles'
        timeoutInMinutes: 30
        continueOnError: true # should not stop the build will result in test failures but we do want the pkg
        env:
          AUTH_TOKEN_GITHUB_COM: ${{ parameters.gitHubToken }}
          AUTH_TOKEN_LA_DEV_APPLE_P12: ${{ parameters.xqaCertPass }}
          AUTH_TOKEN_LA_DISTR_APPLE_P12: ${{ parameters.xqaCertPass }}
          AUTH_TOKEN_LA_MAC_INSTALLER_DISTR_P12: ${{ parameters.xqaCertPass }}
          AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_P12: ${{ parameters.xqaCertPass }}
          AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_2_P12: ${{ parameters.xqaCertPass }}
          SOURCES_DIR: $(Build.SourcesDirectory)

      - bash: |
          set -x
          set -e

          make -C $(Build.SourcesDirectory)/xamarin-macios/tests package-tests

        name: macTestPkg
        displayName: 'Package macOS tests'
        condition: and(succeeded(), contains(variables['configuration.RunMacTests'], 'True'))
        continueOnError: true # not a terrible blocking issue
        timeoutInMinutes: 60

      - task: PublishPipelineArtifact@1
        displayName: 'Publish macOS tests'
        inputs:
          targetPath: $(Build.SourcesDirectory)/xamarin-macios/tests/mac-test-package.7z
          artifactName: mac-test-package
        condition: and(succeeded(), contains(variables['configuration.RunMacTests'], 'True'))
        continueOnError: true

      - bash: |
          set -x
          set -e

          make -C $(Build.SourcesDirectory)/xamarin-macios/tools/mtouch package-introspection-dependencies.zip || RC=$?
          exit $RC
        displayName: 'Package introspection dependencies'
        continueOnError: true # not a terrible blocking issue
        timeoutInMinutes: 60

      - task: PublishPipelineArtifact@1
        displayName: 'Publish introspection dependencies'
        inputs:
          targetPath: $(Build.SourcesDirectory)/xamarin-macios/tools/mtouch/package-introspection-dependencies.zip
          artifactName: package-introspection-dependencies
        continueOnError: true

      - bash: |
          set -x
          set -e

          make -C $(Build.SourcesDirectory)/xamarin-macios/tests package-test-libraries.zip 
        name: introPkg
        displayName: 'Package test libraries dependencies'
        continueOnError: true # not a terrible blocking issue
        timeoutInMinutes: 60

      - task: PublishPipelineArtifact@1
        displayName: 'Publish test libraries dependencies'
        inputs:
          targetPath: $(Build.SourcesDirectory)/xamarin-macios/tests/package-test-libraries.zip 
          artifactName: package-test-libraries
        continueOnError: true

      - ${{ if eq(parameters.uploadBinlogs, true) }}:
        # Copy all the binlogs to a separate directory, keeping directory structure.
        - script: |
            set -x
            mkdir -p $(Build.ArtifactStagingDirectory)/all-binlogs
            rsync -av --prune-empty-dirs --include '*/' --include '*.binlog' --exclude '*' $(Build.SourcesDirectory)/xamarin-macios $(Build.ArtifactStagingDirectory)/all-binlogs
          displayName: Copy all binlogs
          continueOnError: true
          condition: succeededOrFailed()

        # Publish all the binlogs we collected in the previous step
        - task: PublishPipelineArtifact@1
          displayName: 'Publish Artifact: All binlogs'
          inputs:
            targetPath: $(Build.ArtifactStagingDirectory)/all-binlogs
            artifactName: all-binlogs-$(Build.BuildId)
          continueOnError: true
          condition: succeededOrFailed()
