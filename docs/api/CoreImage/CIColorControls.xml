<Documentation>
  <Docs DocId="T:CoreImage.CIColorControls">
    <summary>The CIColorControls CoreImage filter</summary>
    <remarks>
      <para>The following example shows this filter in use</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Load our Image from a file
CIImage flower = CIImage.FromCGImage (UIImage.FromFile ("flower.png").CGImage);

// Create the CIColorControls Filter
var colorCtrls = new CIColorControls ()
{
	Image = flower,
	Brightness = .5F, // Min: 0 Max: 2
	Saturation = 1.2F, // Min: -1 Max: 1
	Contrast = 3.1F // Min: 0 Max: 4
};
	
// Get the Resulting image from the filter
return colorCtrls.OutputImage;
	
// To render the results, we need to create a context, and then
// use one of the context rendering APIs, in this case, we render the
// result into a CoreGraphics image, which is merely a useful representation
//
var context = CIContext.FromOptions (null);

var cgimage = context.CreateCGImage (output, output.Extent);

// The above cgimage can be added to a screen view, for example, this
// would add it to a UIImageView on the screen:
myImageView.Image = UIImage.FromImage (cgimage);
        ]]></code>
      </example>
      <para>
		With the following source:
      </para>
      <para>
        <img href="~/CoreImage/_images/flower.png" alt="Photograph of a sunflower." />
      </para>
      <para>
         Produces the following output:
      </para>
      <para>
        <img href="~/CoreImage/_images/ColorControls.png" alt="Result of applying the filter." />
      </para>
      <para>
      	"Flower" Â© 2012 Milica Sekulic, used under a Creative Commons Attribution-ShareAlike license: https://creativecommons.org/licenses/by-sa/3.0/ 
      </para>
    </remarks>
  </Docs>
</Documentation>