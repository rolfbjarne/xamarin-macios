<Documentation>
  <Docs DocId="T:UIKit.UIFieldBehavior">
    <summary>A <see cref="T:UIKit.UIDynamicBehavior" /> that models a field, such as gravity, electricity, or turbulence.</summary>
    <remarks>
      <para>
        <see cref="T:UIKit.UIFieldBehavior" /> objects apply a force vector to one or more <see cref="T:UIKit.IUIDynamicItem" /> objects (such as <see cref="T:UIKit.UIView" /> objects). The vector depends on the type of field generated, as shown in the following:</para>
      <para>
        <img href="~/UIKit/_images/UIFieldBehavior.Gallery.png" alt="Screenshots showing the forces in the various fields" />
      </para>
      <para>A <see cref="T:UIKit.UIFieldBehavior" /> only applies to the <see cref="T:UIKit.IUIDynamicItem" /> objects in its <see cref="P:UIKit.UIFieldBehavior.Items" /> array. The following example creates a vortex field centered in the main screen. The field applies to each of the items in the <c>wanderers</c> array of <see cref="T:UIKit.UIView" /> objects. Once the <see cref="T:UIKit.UIFieldBehavior" /> is created and applied to the <see cref="T:UIKit.UIDynamicItemBehavior" /> objects associated with the views in <c>wanderers</c>, the behavior is added to the <see cref="T:UIKit.UIDynamicAnimator" />.</para>
      <example>
        <code lang="F#"><![CDATA[
let fieldBehavior = UIFieldBehavior.CreateVortexField()
fieldBehavior.Position <- new CGPoint(this.View.Frame.Left + this.View.Frame.Width / nfloat 2.0, this.View.Frame.Top + this.View.Frame.Height / nfloat 2.0)
fieldBehavior.MinimumRadius <- nfloat 5.0

let animator = new UIDynamicAnimator(this.View)

let wanderers = 
    seq { 20.0 .. 60.0 .. (Math.Floor(float frame.Height)) }
    |> Seq.map (fun y -> new CGRect(20.0, y, 20.0, 20.0))
    |> Seq.map (fun frame -> 
        let v = new UIView(frame)
        v.BackgroundColor <- UIColor.Red
        v
        ) |> Array.ofSeq
this.View.AddSubviews(wanderers)

wanderers 
|> Seq.map (fun w -> new UIDynamicItemBehavior([| w :> IUIDynamicItem|])) 
|> Seq.iter (fun itemBehavior ->
    itemBehavior.Density <- nfloat 0.01
    itemBehavior.Resistance <- nfloat 0.0
    itemBehavior.Friction <- nfloat 0.0
    itemBehavior.AllowsRotation <- true
    itemBehavior.Charge <- nfloat -1.0
    animator.AddBehavior(itemBehavior)
    )

wanderers |> Seq.iter fieldBehavior.AddItem

animator.AddBehavior(fieldBehavior)

]]></code>
      </example>
      <para>The vortex force vectors are shown here:</para>
      <para>
        <img href="~/UIKit/_images/UIFieldBehavior.CreateVortexField.png" alt="Image showing the specified field." />
      </para>
      <para>Developers may visualize the field with <c>PerformSelector(new ObjCRuntime.Selector("setDebugEnabled:"), Foundation.NSObject.FromObject(true))</c>.</para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIFieldBehavior_class/index.html">Apple documentation for <c>UIFieldBehavior</c></related>
  </Docs>
</Documentation>