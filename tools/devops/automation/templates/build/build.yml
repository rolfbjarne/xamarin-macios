parameters:
- name: runTests
  type: boolean
  default: true

- name: runDeviceTests
  type: boolean
  default: true

- name: vsdropsPrefix
  type: string

- name: keyringPass
  type: string

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

- name: enableDotnet
  type: boolean
  default: false

- name: enableAPIDiff
  type: boolean
  default: true

- name: uploadBinlogs
  type: boolean
  default: true

- name: signAndNotarize
  type: boolean
  default: true

- name: skipPackages
  type: boolean
  default: false 

- name: skipESRP
  type: boolean
  default: false # only to be used when testing the CI and we do not need a signed pkg

steps:
- checkout: self          # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout
  clean: true             # Executes: git clean -ffdx && git reset --hard HEAD
  submodules: recursive
  path: s/xamarin-macios


- ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
  - pwsh: |
      git config remote.origin.fetch '+refs/pull/*:refs/remotes/origin/pull/*'
      git fetch origin
      $branch="$(Build.SourceBranch)".Replace("merge", "head")
      $branch=$branch.Replace("refs", "origin")
      Write-Host "Checking out branch $branch"
      git checkout $branch
      $hash = git rev-parse HEAD
      Write-Host "##vso[task.setvariable variable=GIT_HASH;isOutput=true]$hash"
    name: fix_commit
    displayName: "Undo Github merge"
    workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-macios
- ${{ else }}:
  - pwsh: |
      $hash = git rev-parse HEAD
      Write-Host "##vso[task.setvariable variable=GIT_HASH;isOutput=true]$hash"
    name: fix_commit
    displayName: "Undo Github merge"
    workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-macios

- checkout: maccore
  clean: true
  persistCredentials: true  # hugely important, else there are some scripts that check a single file from maccore that will fail

- checkout: templates
  clean: true

- checkout: release-scripts
  clean: true

- pwsh: |
    # should we need sudo, no, but someone did something wrong in the images..
    sudo rm -Rf "$HOME/.git-credentials"
    git config --global credential.helper store
    Set-Content -Path "$HOME/.git-credentials" -Value "https://$(GitHub.Token):x-oauth-basic@github.com`n" -NoNewline

    # maccore is special, we use fetch there in some bash scripts, but VSTS uses https.. and some pools don't like the above.. :/
    cd $(System.DefaultWorkingDirectory)/maccore
    git remote remove origin
    git remote add origin https://$(GitHub.Token)@github.com/xamarin/maccore.git
    git remote # don't add -v else we see the pat
  displayName: 'Clean git mess from VSTS'

- template: ../common/setup.yml
  parameters:
    keyringPass: ${{ parameters.keyringPass }}

- template: install-certificates.yml@templates
  parameters:
    DeveloperIdApplication: $(developer-id-application)
    DeveloperIdInstaller: $(developer-id-installer)
    IphoneDeveloper: $(iphone-developer)
    MacDeveloper: $(mac-developer)
    HostedMacKeychainPassword: ${{ parameters.keyringPass }}

# the ddsign plugin needs this version or it will crash and will make the sign step fail
- task: UseDotNet@2
  inputs:
    packageType: sdk
    version: 3.x
  displayName: 'Install .NET Core SDK 3.x needed for ESRP'
  
- task: UseDotNet@2
  inputs:
    packageType: sdk
    version: 5.x
  displayName: 'Install .NET 5.x SDK'

- task: xamops.azdevex.provisionator-task.provisionator@2
  displayName: 'Provision Brew components'
  inputs:
    provisioning_script: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/provision-brew-packages.csx
    provisioning_extra_args: '-vvvv'
  timeoutInMinutes: 30
  enabled: true

- bash: |
    make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops build-provisioning.csx
  displayName: 'Generate provisionator files.'

- task: xamops.azdevex.provisionator-task.provisionator@1
  displayName: 'Provision Products & Frameworks'
  inputs:
    provisioning_script: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/build-provisioning.csx
    provisioning_extra_args: '-vvvv'
  timeoutInMinutes: 250

- bash: |
    set -x
    set -e
    $(Build.SourcesDirectory)/xamarin-macios/system-dependencies.sh --provision-simulators
  displayName: 'Provision simulators'

# Use the env variables that were set by the label parsing in the configure step
# print some useful logging to allow to know what is going on AND allow make some
# choices, there are labels that contradict each other (skip-package vs build-packages)
# we use warnings for those case we are not sure about.
- pwsh: |
    # we have a number of scripts that require to be executed from the top of the src, rather
    # than keeping track of the location of the script, we create two env vars that can be used to
    # get to the top
    $configVars = @{} # var name/value pair, later print twice, to process and debug

    $xamTop = "$(Build.SourcesDirectory)/xamarin-macios/"
    Write-Host "##vso[task.setvariable variable=XAM_TOP]$xamTop"

    $maccoreTop = "$(Build.SourcesDirectory)/maccore/"
    Write-Host "##vso[task.setvariable variable=MACCORE_TOP]$maccoreTop"

    $buildReason = "$(Build.Reason)"
    $buildSourceBranchName = "$(Build.SourceBranchName)"

    Write-Host "PrID in env is $Env:PR_ID"
    if (-not [string]::IsNullOrEmpty($Env:PR_ID)) {
      $configVars.Add("PR_ID", $Env:PR_ID)
    } else {
      $configVars.Add("PR_ID", "")
    }

    # decide if we are dealing with a PR or a re-triggered PR or a build from
    # a branch in origin

    if ($buildReason -eq "PullRequest" -or (($buildReason -eq "Manual" -or $buildReason -eq "IndividualCI") -and ($buildSourceBranchName -eq "merge")) ) {
      $configVars.Add("IsPR", "True")

      $configVars.Add("BuildPkgs", "True")

      # interesting case, we have build-pkg and skip-pkg... if that is the case, we build it, but we set a warning
      if ($Env:BuildPackage -eq "True" -and $Env:SkipPackages -eq "True") {
        Write-Host "##vso[task.logissue type=warning]'build-package' and 'skip-packages' are both present. Building packages in case of a doubt."
        $configVars.Add("BuildPkgs", "True")
      }

      # if we want to have device tests, we do need the pkgs so that we can fwd them to the device tests
      if ($Env:TriggerDeviceTests -eq "True") {
        $configVars.Add("BuildPkgs", "True")
        $configVars.Add("RunDeviceTests", "True")
      }

      if ($Env:SkipNugets -eq "True") {
        $configVars.Add("BuildNugets", "False")
      } else {
        $configVars.Add("BuildNugets", "True")
      }

      if ($Env:SkipSigning -eq "True") {
        $configVars.Add("SignPkgs", "False")
      } else {
        $configVars.Add("SignPkgs", "True")
      }

      if ($Env:SkipExternalTests -eq "True") {
        $configVars.Add("RunExternalTests", "False")
      } else {
        $configVars.Add("RunExternalTests", "True")
      }

      if ($Env:SkipPackagedXamarinMacTests -eq "True") {
        $configVars.Add("RunMacTests", "False")
      } else {
        $configVars.Add("RunMacTests", "True")
      }

      if ($Env:SkipPublicJenkins -eq "True") {
        $configVars.Add("SkipPublicJenkins", "True")
      } else {
        $configVars.Add("SkipPublicJenkins", "False")
      }

      $configVars.Add("RunSampleTests", $Env:RunSampleTests)
      $configVars.Add("RunInternalTests", $Env:RunInternalTests)

    } else {
      # set the defaults, all the things! o/
      $configVars.Add("IsPR", "False")

      # build pkg, nugets and sign them
      $configVars.Add("BuildPkgs", "True")
      $configVars.Add("BuildNugets", "True")
      $configVars.Add("SignPkgs", "True")

      # tests, run all of them, internal, external, mac but not sample tests
      $configVars.Add("RunInternalTests", "True")
      $configVars.Add("RunExternalTests", "True")
      $configVars.Add("RunMacTests", "True")
      $configVars.Add("RunSampleTests", "False")
      $configVars.Add("SkipPublicJenkins", "False")

      # if a developer decided to trigger one without device tests, allow it
      if ($Env:RUN_DEVICE_TESTS -eq "true") {
        $configVars.Add("RunDeviceTests", "True")
      } else {
        $configVars.Add("RunDeviceTests", "False")
      }
    }
    # write debugging and process of the vars
    foreach($key in $configVars.Keys) {
      Write-Host "$key='$($configVars[$key])'"
      Write-Host "##vso[task.setvariable variable=$key;isOutput=true]$($configVars[$key])"
    }

  name: configuration
  displayName: "Parse PR labels"
  timeoutInMinutes: 5
  env:
    RUN_DEVICE_TESTS: '${{ parameters.runDeviceTests }}'

- ${{ if contains(variables['Build.DefinitionName'], 'private') }}:
  - task: PowerShell@2
    displayName: Setup Private Feeds Credentials
    inputs:
      filePath: $(System.DefaultWorkingDirectory)/xamarin-macios/eng/common/SetupNugetSources.ps1
      arguments: -ConfigFile $(System.DefaultWorkingDirectory)/xamarin-macios/NuGet.config -Password $Env:Token
    env:
      Token: $(dn-bot-dnceng-artifact-feeds-rw)

  - bash: |
      set -x
      set -e
      ARGS="--azure-feed \"https://dotnetclimsrc.blob.core.windows.net/dotnet\" -FeedCredential $CREDENTIALS"
      echo "##vso[task.setvariable variable=DOTNET_INSTALL_EXTRA_ARGS]$ARGS"
    env:
      CREDENTIALS: $(dotnetclimsrc-read-sas-token)
    displayName: "Configure install extra args"
    timeoutInMinutes: 5

- bash: |
    set -x
    set -e

    CONFIGURE_FLAGS="--enable-xamarin"

    if [[ "$EnableDotNet" == "True" ]]; then
      echo "Enabling dotnet builds."
      CONFIGURE_FLAGS="$CONFIGURE_FLAGS --enable-dotnet"
    fi

    CONFIGURE_FLAGS="$CONFIGURE_FLAGS --enable-install-source"
    echo "Configuration falgs are '$CONFIGURE_FLAGS'"

    cd $(Build.SourcesDirectory)/xamarin-macios/
    ./configure $CONFIGURE_FLAGS
    echo $(cat $(Build.SourcesDirectory)/xamarin-macios/configure.inc)
  env:
    IsPR: $(configuration.IsPR)
    ${{ if eq(parameters.enableDotnet, true) }}:
      EnableDotNet: 'True'
  displayName: "Configure build"
  timeoutInMinutes: 5

# We'll need these profiles to build the hot restart prebuilt app during the build
# (it's built for device, and thus needs a certificate available so that the app can be signed).
# We do this again before running the tests further below.
- bash: |
    set -x
    set -e

    cd "$SOURCES_DIR/maccore/tools/"
    ./install-qa-provisioning-profiles.sh -v
  displayName: 'Add build provisioning profiles'
  timeoutInMinutes: 30
  continueOnError: true # should not stop the build
  env:
    AUTH_TOKEN_GITHUB_COM: ${{ parameters.gitHubToken }}
    AUTH_TOKEN_LA_DEV_APPLE_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_LA_DISTR_APPLE_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_LA_MAC_INSTALLER_DISTR_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_2_P12: ${{ parameters.xqaCertPass }}
    SOURCES_DIR: $(Build.SourcesDirectory)

# Actual build of the project
- bash: |
    set -x
    set -e
    echo "##vso[task.setvariable variable=TESTS_BOT;isOutput=true]$AGENT_NAME"
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ reset
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ all -j8
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ install -j8
  name: build
  displayName: 'Build'
  timeoutInMinutes: 180

# run ASAP so that we do not have any files that got generated confusing git 
- ${{ if eq(parameters.enableAPIDiff, true) }}:
  - template: api-diff.yml
    parameters:
      prID: variables['PrID']


- ${{ if ne(parameters.skipPackages, true) }}:
  # build not signed .pkgs for the SDK
  - bash: |
      set -x
      set -e
      rm -Rf $(Build.SourcesDirectory)/package/*.pkg
      rm -Rf $(Build.SourcesDirectory)/package/notarized/*.pkg
      time make -C $(Build.SourcesDirectory)/xamarin-macios/ package
    name: packages
    displayName: 'Build Packages'
    condition: and(succeeded(), contains(variables['configuration.BuildPkgs'], 'True'))
    timeoutInMinutes: 180

  # build nugets
  - ${{ if eq(parameters.enableDotnet, true) }}:
    - template: build-nugets.yml


- ${{ if eq(parameters.signAndNotarize, true) }}:
  # only sign an notarize in no PR executions
  - template: sign-and-notarized.yml
    parameters:
      enableDotnet: ${{ parameters.enableDotnet }}
      skipESRP: ${{ parameters.skipESRP }}
      keyringPass: ${{ parameters.keyringPass }}

# publish nugets (must be done after signing)
- ${{ if and(ne(parameters.skipPackages, true), eq(parameters.enableDotnet, true)) }}:
  - template: publish-nugets.yml

- ${{ if ne(parameters.skipPackages, true) }}:
  - template: generate-workspace-info.yml@templates
    parameters:
      GitHubToken: $(GitHub.Token)
      ArtifactDirectory: $(Build.SourcesDirectory)/package-internal

  - bash: |
      var=$(make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops print-variable VARIABLE=IOS_NUGET_VERSION_FULL)
      IOS_NUGET_VERSION_FULL=${var#*=}
      IOS_NUGET_VERSION_FULL=$(echo $IOS_NUGET_VERSION_FULL | cut -d "+" -f1)

      var=$(make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops print-variable VARIABLE=TVOS_NUGET_VERSION_FULL)
      TVOS_NUGET_VERSION_FULL=${var#*=}
      TVOS_NUGET_VERSION_FULL=$(echo $TVOS_NUGET_VERSION_FULL | cut -d "+" -f1)

      var=$(make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops print-variable VARIABLE=MACOS_NUGET_VERSION_FULL)
      MACOS_NUGET_VERSION_FULL=${var#*=}
      MACOS_NUGET_VERSION_FULL=$(echo $MACOS_NUGET_VERSION_FULL | cut -d "+" -f1)

      var=$(make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops print-variable VARIABLE=MACCATALYST_NUGET_VERSION_FULL)
      MACCATALYST_NUGET_VERSION_FULL=${var#*=}
      MACCATALYST_NUGET_VERSION_FULL=$(echo $MACCATALYST_NUGET_VERSION_FULL | cut -d "+" -f1)
      WORKLOAD_DST="$(Build.SourcesDirectory)/package-internal/WorkloadRollback.json"

      echo "{" > $WORKLOAD_DST
      echo "\"microsoft.net.sdk.ios\": \"$IOS_NUGET_VERSION_FULL\"," >>  $WORKLOAD_DST
      echo "\"microsoft.net.sdk.tvos\": \"$TVOS_NUGET_VERSION_FULL\"," >> $WORKLOAD_DST
      echo "\"microsoft.net.sdk.macos\": \"$MACOS_NUGET_VERSION_FULL\"," >>  $WORKLOAD_DST
      echo "\"microsoft.net.sdk.maccatalyst\": \"$MACCATALYST_NUGET_VERSION_FULL\"" >> $WORKLOAD_DST
      echo "}" >>  $WORKLOAD_DST

      echo "Rollback file contents:" 
      echo "$(cat $WORKLOAD_DST)"
    name: workload_file
    displayName: 'Generate "WorkloadRollback.json'

  # upload each of the pkgs into the pipeline artifacts
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Build Artifacts'
    inputs:
      targetPath: $(Build.SourcesDirectory)/package
      artifactName: package
    continueOnError: true

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Build Internal Artifacts'
    inputs:
      targetPath: $(Build.SourcesDirectory)/package-internal
      artifactName: package-internal
    continueOnError: true

  # funny enough we need these profiles to build the mac tests
  - bash: |
      set -x
      set -e

      cd "$SOURCES_DIR/maccore/tools/"
      ./install-qa-provisioning-profiles.sh -v
    displayName: 'Add tests provisioning profiles'
    timeoutInMinutes: 30
    continueOnError: true # should not stop the build will result in test failures but we do want the pkg
    env:
      AUTH_TOKEN_GITHUB_COM: ${{ parameters.gitHubToken }}
      AUTH_TOKEN_LA_DEV_APPLE_P12: ${{ parameters.xqaCertPass }}
      AUTH_TOKEN_LA_DISTR_APPLE_P12: ${{ parameters.xqaCertPass }}
      AUTH_TOKEN_LA_MAC_INSTALLER_DISTR_P12: ${{ parameters.xqaCertPass }}
      AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_P12: ${{ parameters.xqaCertPass }}
      AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_2_P12: ${{ parameters.xqaCertPass }}
      SOURCES_DIR: $(Build.SourcesDirectory)

  - bash: |
      set -x
      set -e

      make -C $(Build.SourcesDirectory)/xamarin-macios/tests package-tests

    name: macTestPkg
    displayName: 'Package macOS tests'
    condition: and(succeeded(), contains(variables['configuration.RunMacTests'], 'True'))
    continueOnError: true # not a terrible blocking issue
    timeoutInMinutes: 60

  - task: PublishPipelineArtifact@1
    displayName: 'Publish macOS tests'
    inputs:
      targetPath: $(Build.SourcesDirectory)/xamarin-macios/tests/mac-test-package.7z
      artifactName: mac-test-package
    condition: and(succeeded(), contains(variables['configuration.RunMacTests'], 'True'))
    continueOnError: true

  - bash: |
      set -x
      set -e

      make -C $(Build.SourcesDirectory)/xamarin-macios/tools/mtouch package-introspection-dependencies.zip || RC=$?
      exit $RC
    displayName: 'Package introspection dependencies'
    continueOnError: true # not a terrible blocking issue
    timeoutInMinutes: 60

  - task: PublishPipelineArtifact@1
    displayName: 'Publish introspection dependencies'
    inputs:
      targetPath: $(Build.SourcesDirectory)/xamarin-macios/tools/mtouch/package-introspection-dependencies.zip
      artifactName: package-introspection-dependencies
    continueOnError: true

  - bash: |
      set -x
      set -e

      make -C $(Build.SourcesDirectory)/xamarin-macios/tests package-test-libraries.zip 
    name: introPkg
    displayName: 'Package test libraries dependencies'
    continueOnError: true # not a terrible blocking issue
    timeoutInMinutes: 60

  - task: PublishPipelineArtifact@1
    displayName: 'Publish test libraries dependencies'
    inputs:
      targetPath: $(Build.SourcesDirectory)/xamarin-macios/tests/package-test-libraries.zip 
      artifactName: package-test-libraries
    continueOnError: true

- ${{ if eq(parameters.uploadBinlogs, true) }}:
  # Copy all the binlogs to a separate directory, keeping directory structure.
  - script: |
      set -x
      mkdir -p $(Build.ArtifactStagingDirectory)/all-binlogs
      rsync -av --prune-empty-dirs --include '*/' --include '*.binlog' --exclude '*' $(Build.SourcesDirectory)/xamarin-macios $(Build.ArtifactStagingDirectory)/all-binlogs
    displayName: Copy all binlogs
    continueOnError: true
    condition: succeededOrFailed()

  # Publish all the binlogs we collected in the previous step
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifact: All binlogs'
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)/all-binlogs
      artifactName: all-binlogs-$(Build.BuildId)
    continueOnError: true
    condition: succeededOrFailed()

# clean the bot after we use it
- template: ../common/teardown.yml
  parameters:
    keyringPass: ${{ parameters.keyringPass }}

# if we failed, write a comment and set the pipeline to failure. In this case, we do not want to hide the fact that we failed but we also want
# to write a comment.
- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\MaciosCI.psd1

    $githubComments = New-GitHubCommentsObject -Org "xamarin" -Repo "xamarin-macios" -Token $(GitHub.Token) -Hash $Env:GIT_HASH
    $githubComments.NewCommentFromMessage("Build failed", ":fire:", "Build failed for the job '$(System.JobDisplayName)'")
  condition: failed()
  displayName: 'Report build failure'
