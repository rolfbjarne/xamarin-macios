<!--
***********************************************************************************************
Xamarin.iOS.WatchApp.Common.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
  created a backup copy.  Incorrect changes to this file will make it
  impossible to load or build your projects from the command-line or the IDE.

This file imports the version- and platform-specific targets for the project importing
this file. This file also defines targets to produce an error if the specified targets
file does not exist, but the project is built anyway (command-line or IDE build).

Copyright (C) 2015-2016 Xamarin. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<UsingTask TaskName="Xamarin.iOS.Tasks.ResolveNativeWatchApp" AssemblyFile="Xamarin.iOS.Tasks.dll" />

	<Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).Before.targets" 
			Condition="Exists('$(MSBuildThisFileDirectory)$(MSBuildThisFileName).Before.targets')"/>
	
	<PropertyGroup>
		<IsWatchApp>True</IsWatchApp>
		<IsWatch2App>False</IsWatch2App>
	</PropertyGroup>

	<Import Project="$(MSBuildThisFileDirectory)Xamarin.iOS.Common.targets" />

	<Import Project="$(MSBuildThisFileDirectory)Xamarin.iOS.WatchApp.Common.props" 
			Condition="'$(_XamarinWatchAppCommonPropsHasBeenImported)' != 'true'" />

	<Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).Before.targets" 
			Condition="Exists('$(MSBuildThisFileDirectory)$(MSBuildThisFileName).Before.targets')"/>
	
	<!-- Override GetTargetPath, Build, and Rebuild -->
	<Target Name="GetBundleTargetPath" DependsOnTargets="_GetWatchAppBundlePath;$(GetTargetPathDependsOn)" Outputs="@(_WatchAppBundlePath)" />
	<Target Name="Build"   Condition="'$(_InvalidConfigurationWarning)' != 'true'" DependsOnTargets="_GetWatchAppBundlePath;$(BuildDependsOn)" Outputs="@(_WatchAppBundlePath)" />
	<Target Name="Rebuild" Condition="'$(_InvalidConfigurationWarning)' != 'true'" DependsOnTargets="_GetWatchAppBundlePath;$(RebuildDependsOn)" Outputs="@(_WatchAppBundlePath)" />

	<Target Name="_ResolveNativeWatchApp" DependsOnTargets="_DetectSdkLocations;_GenerateBundleName">
		<ResolveNativeWatchApp
			Condition="'$(IsMacEnabled)' == 'true'"
			SessionId="$(BuildSessionId)"
			SdkVersion="$(MtouchSdkVersion)"
			SdkIsSimulator="$(_SdkIsSimulator)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
			>
			<Output TaskParameter="NativeWatchApp" PropertyName="_NativeWatchApp" />
		</ResolveNativeWatchApp>
	</Target>

	<PropertyGroup>
		<_CompileToNativeDependsOn>
			$(_CompileToNativeDependsOn);
			_ResolveNativeWatchApp
		</_CompileToNativeDependsOn>
	</PropertyGroup>

	<Target Name="_CompileToNative" DependsOnTargets="$(_CompileToNativeDependsOn)" >
		<Ditto
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)'"
			ToolExe="$(DittoExe)"
			ToolPath="$(DittoPath)"
			Source="$(_NativeWatchApp)"
			Destination="$(_AppBundlePath)$(AssemblyName)"
		/>

		<!-- This task must always run, because Apple's toolchain determines if a watch app
			must be installed or not depending on the timestamp of the main executable (this means
			that if any other file is modified, we must at least touch the main executable as well).
		-->
		<Touch SessionId="$(BuildSessionId)" Condition="'$(IsMacEnabled)'" Files="$(_AppBundlePath)$(AssemblyName)"/>

		<MakeDir SessionId="$(BuildSessionId)" Condition="'$(IsMacEnabled)' == 'true'" Directories="$(_AppBundlePath)_WatchKitStub" />

		<Ditto
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)'"
			ToolExe="$(DittoExe)"
			ToolPath="$(DittoPath)"
			Source="$(_NativeWatchApp)"
			Destination="$(_AppBundlePath)_WatchKitStub\WK"
		/>

		<RemoveDir SessionId="$(BuildSessionId)" Condition="'$(IsMacEnabled)' == 'true'" Directories="$(AppBundleDir).dSYM" />
	</Target>

	<Target Name="CopyFilesToOutputDirectory" />
	<Target Name="CoreCompile" />
	<Target Name="CreateIpa"/>

	<Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).After.targets"
			Condition="Exists('$(MSBuildThisFileDirectory)$(MSBuildThisFileName).After.targets')"/>

</Project>
