parameters:
- name: gitHubToken
  type: string

steps:
- checkout: self          # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout
  clean: true             # Executes: git clean -ffdx && git reset --hard HEAD
  submodules: recursive
  path: s/xamarin-macios

- checkout: maccore
  clean: true
  persistCredentials: true  # hugely important, else there are some scripts that check a single file from maccore that will fail

- checkout: templates
  clean: true

- checkout: release-scripts
  clean: true

- pwsh: |
    # should we need sudo, no, but someone did something wrong in the images..
    sudo rm -Rf "$HOME/.git-credentials"
    git config --global credential.helper store
    Set-Content -Path "$HOME/.git-credentials" -Value "https://$(GitHub.Token):x-oauth-basic@github.com`n" -NoNewline

    # maccore is special, we use fetch there in some bash scripts, but VSTS uses https.. and some pools don't like the above.. :/
    cd $(System.DefaultWorkingDirectory)/maccore
    git remote remove origin
    git remote add origin https://$(GitHub.Token)@github.com/xamarin/maccore.git
    git remote # don't add -v else we see the pat
  displayName: 'Clean git mess from VSTS'

- powershell: |
    Write-Host "IsMacOS: ${IsMacOS}"
    Write-Host "IsWindows: ${IsWindows}"
    Write-Host "IsLinux: ${IsLinux}"

    if ($IsMacOS -or $IsLinux) {
        Write-Host "HOSTNAME: $(hostname)"
    } else {
        Write-Host "COMPUTERNAME: ${env:COMPUTERNAME}"
    }

    gci env: | format-table -autosize -wrap
  displayName: 'Show Environment'

- powershell: |
    Write-Host "Python version"
    python --version

    Write-Host "Python location"
    which python

    Write-Host "Python2 location"
    which python2

    Write-Host "Python3 location"
    which python3

    Write-Host "Pip3 version"
    pip3 -V
  displayName: 'Show Python information'

- bash: $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/automation/scripts/bash/clean-bot.sh
  displayName: 'Clean bot'
  env:
    BUILD_REVISION: 'jenkins'
  continueOnError: true
  timeoutInMinutes: 60

- template: agent-cleanser/v1.yml@templates   # Uninstalls mono, Xamarin.Mac (if installed) plus cleanses the Provisionator Xcode cache

- task: xamops.azdevex.provisionator-task.provisionator@2
  displayName: 'Provision Brew components'
  inputs:
    provisioning_script: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/provision-brew-packages.csx
    provisioning_extra_args: '-vvvv'
  timeoutInMinutes: 30
  enabled: true

# was the current xcode deleted (has happened due to a bug in the clean step)? then set the default so 
# that we can call make and generated the provisionator config files.
- bash: |
    XCODE_SELECT=$(xcode-select -p)
    if [[ -d $XCODE_SELECT ]]; then
      echo "Using Xcode in path $XCODE_SELECT"
    else
      echo "Setting Xcode to point to the default location."
      xcode-select -s "/Applications/Xcode.app/Contents/Developer"
    fi
  displayName: 'Ensure Xcode is selected.'

- bash: |
    make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops build-provisioning.csx
  displayName: 'Generate provisionator files.'

- task: xamops.azdevex.provisionator-task.provisionator@1
  displayName: 'Provision Products & Frameworks'
  inputs:
    provisioning_script: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/build-provisioning.csx
    provisioning_extra_args: '-vvvv'
  timeoutInMinutes: 250

- bash: |
    set -x
    set -e
    $(Build.SourcesDirectory)/xamarin-macios/system-dependencies.sh --provision-simulators
  displayName: 'Provision simulators'

- bash: |
    set -x
    sudo rm -Rf /Developer/MonoTouch
    sudo rm -Rf /Library/Frameworks/Xamarin.iOS.framework
    sudo rm -Rf /Library/Frameworks/Xamarin.Mac.framework
  displayName: 'Delete library folders'
  timeoutInMinutes: 5

- bash:
    set -x
    set -e
    rm -Rvf $(Build.SourcesDirectory)/package
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ git-clean-all
  displayName: 'Clear results directory'
  timeoutInMinutes: 5

# Use the env variables that were set by the label parsing in the configure step
# print some useful logging to allow to know what is going on AND allow make some
# choices, there are labels that contradict each other (skip-package vs build-packages)
# we use warnings for those case we are not sure about.
- pwsh: |
    # we have a number of scripts that require to be executed from the top of the src, rather
    # than keeping track of the location of the script, we create two env vars that can be used to
    # get to the top
    $configVars = @{} # var name/value pair, later print twice, to process and debug

    $xamTop = "$(Build.SourcesDirectory)/xamarin-macios/"
    Write-Host "##vso[task.setvariable variable=XAM_TOP]$xamTop"

    $maccoreTop = "$(Build.SourcesDirectory)/maccore/"
    Write-Host "##vso[task.setvariable variable=MACCORE_TOP]$maccoreTop"

    $buildReason = "$(Build.Reason)"
    $buildSourceBranchName = "$(Build.SourceBranchName)"

    Write-Host "PrID in env is $Env:PR_ID"
    if (-not [string]::IsNullOrEmpty($Env:PR_ID)) {
      $configVars.Add("PR_ID", $Env:PR_ID)
    } else {
      $configVars.Add("PR_ID", "")
    }

    # decide if we are dealing with a PR or a re-triggered PR or a build from
    # a branch in origin

    if ($buildReason -eq "PullRequest" -or (($buildReason -eq "Manual" -or $buildReason -eq "IndividualCI") -and ($buildSourceBranchName -eq "merge")) ) {
      $configVars.Add("IsPR", "True")
    } else {
      # set the defaults, all the things! o/
      $configVars.Add("IsPR", "False")
    }
    # write debugging and process of the vars
    foreach($key in $configVars.Keys) {
      Write-Host "$key='$($configVars[$key])'"
      Write-Host "##vso[task.setvariable variable=$key;isOutput=true]$($configVars[$key])"
    }

  name: configuration
  displayName: "Parse PR labels"
  timeoutInMinutes: 5
  env:
    RUN_DEVICE_TESTS: '${{ parameters.runDeviceTests }}'

- ${{ if contains(variables['Build.DefinitionName'], 'private') }}:
  - task: PowerShell@2
    displayName: Setup Private Feeds Credentials
    inputs:
      filePath: $(System.DefaultWorkingDirectory)/xamarin-macios/eng/common/SetupNugetSources.ps1
      arguments: -ConfigFile $(System.DefaultWorkingDirectory)/xamarin-macios/NuGet.config -Password $Env:Token
    env:
      Token: $(dn-bot-dnceng-artifact-feeds-rw)

  - bash: |
      set -x
      set -e
      ARGS="--azure-feed \"https://dotnetclimsrc.blob.core.windows.net/dotnet\" -FeedCredential $CREDENTIALS"
      echo "##vso[task.setvariable variable=DOTNET_INSTALL_EXTRA_ARGS]$ARGS"
    env:
      CREDENTIALS: $(dotnetclimsrc-read-sas-token)
    displayName: "Configure install extra args"
    timeoutInMinutes: 5

- bash: |
    set -x
    set -e

    if [[ "$IsPR" == "True" ]]; then
      echo "Xamarin private packages NOT configured. Building a PR."
      CONFIGURE_FLAGS=""
    else
      echo "Xamarin private packages configured."
      CONFIGURE_FLAGS="--enable-xamarin"
    fi

    CONFIGURE_FLAGS="$CONFIGURE_FLAGS --enable-install-source"
    echo "Configuration falgs are '$CONFIGURE_FLAGS'"

    cd $(Build.SourcesDirectory)/xamarin-macios/
    ./configure $CONFIGURE_FLAGS
    echo $(cat $(Build.SourcesDirectory)/xamarin-macios/configure.inc)
  env:
    IsPR: $(configuration.IsPR)
  displayName: "Configure build"
  timeoutInMinutes: 5

# Actual build of the project
- bash: |
    set -x
    set -e
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ reset
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ all -j8
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ install -j8
  displayName: 'Build'
  timeoutInMinutes: 45
