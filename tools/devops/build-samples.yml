# Xamarin
# Build samples

trigger:
  - sample-tester

variables:
  debug_filter: '^.*Debug.*$'
  release_filter: '^.*Release.*$'
  iphone_filter: '^iPhone$'
  iphonesimulator_filter: '^iPhoneSimulator$'
  mac_platform_filter: '^$'
  name_filter_af: '^[A-Fa-f].*$'
  name_filter_gr: '^[G-Rg-r].*$'
  name_filter_rest: '^[^A-Ra-r].*$'

jobs:
- job: macOS
  displayName: Build samples
  timeoutInMinutes: 360
  strategy:
    matrix:
      # We have rougly 900 tests, which take a while to build for device.
      # So in that case, we split them in 3 buckets of roughly 300 tests each,
      # based on the first letter of the project's filename.
      Debug|iPhone|A-F:
        TEST_PLATFORM_FILTER_EXPRESSION: $(iphone_filter)
        TEST_CONFIG_FILTER_EXPRESSION: $(debug_filter)
        TEST_NAME_FILTER_EXPRESSION: $(name_filter_af)
      Debug|iPhone|G-R:
        TEST_PLATFORM_FILTER_EXPRESSION: $(iphone_filter)
        TEST_CONFIG_FILTER_EXPRESSION: $(debug_filter)
        TEST_NAME_FILTER_EXPRESSION: $(name_filter_gr)
      Debug|iPhone|S-Z:
        TEST_PLATFORM_FILTER_EXPRESSION: $(iphone_filter)
        TEST_CONFIG_FILTER_EXPRESSION: $(debug_filter)
        TEST_NAME_FILTER_EXPRESSION: $(name_filter_rest)
      Debug|iPhoneSimulator:
        TEST_PLATFORM_FILTER_EXPRESSION: $(iphonesimulator_filter)
        TEST_CONFIG_FILTER_EXPRESSION: $(debug_filter)
      Release|iPhone|A-F:
        TEST_PLATFORM_FILTER_EXPRESSION: $(iphone_filter)
        TEST_CONFIG_FILTER_EXPRESSION: $(release_filter)
        TEST_NAME_FILTER_EXPRESSION: $(name_filter_af)
      Release|iPhone|G-R:
        TEST_PLATFORM_FILTER_EXPRESSION: $(iphone_filter)
        TEST_CONFIG_FILTER_EXPRESSION: $(release_filter)
        TEST_NAME_FILTER_EXPRESSION: $(name_filter_gr)
      Release|iPhone|S-Z:
        TEST_PLATFORM_FILTER_EXPRESSION: $(iphone_filter)
        TEST_CONFIG_FILTER_EXPRESSION: $(release_filter)
        TEST_NAME_FILTER_EXPRESSION: $(name_filter_rest)
      Release|iPhoneSimulator:
        TEST_PLATFORM_FILTER_EXPRESSION: $(iphonesimulator_filter)
        TEST_CONFIG_FILTER_EXPRESSION: $(release_filter)
      Debug|Mac:
        TEST_PLATFORM_FILTER_EXPRESSION: $(mac_platform_filter)
        TEST_CONFIG_FILTER_EXPRESSION: $(debug_filter)
      Release|Mac:
        TEST_PLATFORM_FILTER_EXPRESSION: $(mac_platform_filter)
        TEST_CONFIG_FILTER_EXPRESSION: $(release_filter)

  pool:
    vmImage: 'macOS-10.13'

  steps:
  - checkout: self
    persistCredentials: true

  - bash: |
      set -x
      set -e
      uname -a
      ls -la /Library/Frameworks/Xamarin.iOS.framework/Versions || true
      ls -la /Library/Frameworks/Xamarin.Mac.framework/Versions || true
      ls -lad /Applications/Xcode*
      xcode-select -p
      mono --version || true
      env | sort
      git config -l | sort
      AUTH=$(git config -l | grep AUTHORIZATION | sed 's/.*AUTHORIZATION: //')
      git config --global http.extraheader "AUTHORIZATION: $AUTH"
      git config -l | sort
    displayName: System Info

  - bash: |
      set -x
      set -e
      ./configure --enable-xamarin
      # the github auth we use only works with https, so change maccore's url to be https:// instead of git@
      make reset-maccore MACCORE_MODULE=$(grep ^MACCORE_MODULE mk/xamarin.mk | sed -e 's/.*:= //' -e 's_git@github.com:_https://github.com/_' -e 's/[.]git//') V=1
    displayName: Fetch maccore

  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: Provision XI/XM/Mono/Xcode/Objective-Sharpie
    inputs:
      provisioning_script: $(System.DefaultWorkingDirectory)/tools/devops/build-samples.csx

  - bash: |
      set -x
      set -e
      env | sort
      ls -lad /Applications/Xcode*
      xcode-select -p
    displayName: System Info post provisioning

  - bash: |
      set -x
      set -e
      echo 123456789 > ~/.mtouch-verbosity
      make -C tests test-system.config
      make -C tests/sampletester TESTS_USE_SYSTEM=1
    displayName: Run tests

  - task: PublishTestResults@2
    displayName: Publish test results
    condition: always()
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: '**/TestResult*.xml'
      testRunTitle: Sample tests (build)
      publishRunAttachments: true
      mergeTestResults: true

  - bash: "echo ##vso[task.setvariable variable=JobStatus;isOutput=true]$(Agent.JobStatus)"
    name: ExportedVariables
    displayName: Export status
    condition: always()

  - bash: env | sort
    displayName: Environment
    condition: always()

- job: AddGitHubComment
  dependsOn: macOS
  condition: always()
  pool:
    vmImage: 'macOS-10.13'
  variables:
    jobResultDebugiPhoneAF: $[dependencies.macOS.outputs['Debug|iPhone|A-F.ExportedVariables.JobStatus']]
    jobResultDebugiPhoneGR: $[dependencies.macOS.outputs['Debug|iPhone|G-R.ExportedVariables.JobStatus']]
    jobResultDebugiPhoneSZ: $[dependencies.macOS.outputs['Debug|iPhone|S-Z.ExportedVariables.JobStatus']]
    jobResultDebugiPhoneSimulator: $[dependencies.macOS.outputs['Debug|iPhoneSimulator.ExportedVariables.JobStatus']]
    jobResultReleaseiPhoneAF: $[dependencies.macOS.outputs['Release|iPhone|A-F.ExportedVariables.JobStatus']]
    jobResultReleaseiPhoneGR: $[dependencies.macOS.outputs['Release|iPhone|G-R.ExportedVariables.JobStatus']]
    jobResultReleaseiPhoneSZ: $[dependencies.macOS.outputs['Release|iPhone|S-Z.ExportedVariables.JobStatus']]
    jobResultReleaseiPhoneSimulator: $[dependencies.macOS.outputs['Release|iPhoneSimulator.ExportedVariables.JobStatus']]
    jobResultDebugMac: $[dependencies.macOS.outputs['Debug|Mac.ExportedVariables.JobStatus']]
    jobResultReleaseMac: $[dependencies.macOS.outputs['Release|Mac.ExportedVariables.JobStatus']]

  steps:
  - bash: |
      set -x
      set -e
      env | sort
      statuses="JOBRESULTDEBUGIPHONEAF JOBRESULTDEBUGIPHONEGR JOBRESULTDEBUGIPHONESZ JOBRESULTDEBUGIPHONESIMULATOR JOBRESULTRELEASEIPHONEAF JOBRESULTRELEASEIPHONEGR JOBRESULTRELEASEIPHONESZ JOBRESULTRELEASEIPHONESIMULATOR JOBRESULTDEBUGMAC JOBRESULTRELEASEMAC"
      EMOJI=
      for name in $statuses; do
        status=${!name}
        if ! [[ "$status" =~ Succeeded* ]]; then
          EMOJII="❌"
        elif [[ "$status" == "SucceededWithIssues" && "$EMOJII" == "" ]]; then
          EMOJII="⚠️"
        fi
      done
      if [[ "$EMOJII" == "" ]]; then
        EMOJII="✅"
      fi
      echo "$EMOJII Status for '$BUILD_DEFINITIONNAME': $AGENT_JOBSTATUS. [View results](${SYSTEM_COLLECTIONURI}/${SYSTEM_TEAMPROJECT}/_build/results?buildId=${BUILD_BUILDID})" > commit-comment.md
      ./jenkins/add-commit-comment.sh "--token=$(github-pat)" "--hash=$(Build.SourceVersion)" "--file=commit-comment.md"
      rm -f commit-comment.md
    displayName: Add GitHub comment with test results
    condition: always()
