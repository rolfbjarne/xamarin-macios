parameters:
- name: statusContext
  type: string
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices.

- name: testsLabels
  type: string
  default: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests' # default context, since we started dealing with iOS devices.

- name: useXamarinStorage
  type: boolean
  default: false  # xamarin-storage will disappear, so by default do not use it

- name: vsdropsPrefix
  type: string

- name: devicePrefix
  type: string
  default: 'ios' # default context, since we started dealing with iOS devices.

steps:

# remove any old processes that might have been left behind.
- pwsh : |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/automation/scripts/System.psm1
    Clear-XamarinProcesses
  displayName: 'Process cleanup'

# Increase mlaunch verbosity. Will step on the old setting present.
- pwsh : |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/automation/scripts/MLaunch.psm1
    Set-MLaunchVerbosity -Verbosity 10
  displayName: 'Make mlaunch verbose'
  condition: succeededOrFailed() # we do not care about the previous step

# Re-start the daemon used to find the devices in the bot.
- pwsh : |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/automation/scripts/MLaunch.psm1
    Optimize-DeviceDiscovery
  displayName: 'Fix device discovery (reset launchctl)'
  condition: succeededOrFailed() # making mlaunch verbose should be a non blocker

# Update the status to pending, that way the monitoring person knows that we started running the tests. Up to this
# point we were just setting up the agent.
- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/automation/scripts/GitHub.psm1
    Set-GitHubStatus -Status "pending" -Context "$Env:CONTEXT" -Description "Running device tests on $Env:CONTEXT"
  env:
    BUILD_REVISION: $(Build.SourceVersion)
    CONTEXT: ${{ parameters.statusContext }}
    GITHUB_TOKEN: $(GitHub.Token)
  displayName: Set pending GitHub status
  continueOnError: true
  condition: succeededOrFailed() # re-starting the daemon should not be an issue
  timeoutInMinutes: 5

# Run tests. If we are using xamarin-storage add a periodic command to be executed by xharness, else, since we are using vsdrops do nothing.
- bash: |
    set -x
    set -e

    cd $WORKING_DIR/xamarin-macios

    echo "Running tests on $AGENT_NAME"
    echo "##vso[task.setvariable variable=TESTS_BOT;isOutput=true]$AGENT_NAME"
    echo '##vso[task.setvariable variable=PROVISIONING_FAILED;isOutput=true]False'

    make -C builds download -j || true
    make -C builds downloads -j || true
    make -C builds .stamp-mono-ios-sdk-destdir -j || true
    EC=0
    MONO_ENV_OPTIONS=--trace=E:all make -C tests vsts-device-tests || EC=$?
    if [ $EC -eq 0 ]; then
      echo '##vso[task.setvariable variable=TESTS_JOBSTATUS;isOutput=true]Succeeded'
    else
      echo '##vso[task.setvariable variable=TESTS_JOBSTATUS;isOutput=true]Failed'
    fi
  env:
    WORKING_DIR: $(System.DefaultWorkingDirectory)
    TESTS_EXTRA_ARGUMENTS: ${{ parameters.testsLabels }}
    USE_XAMARIN_STORAGE: ${{ parameters.useXamarinStorage }}
    VSDROPS_URI: '${{ parameters.vsdropsPrefix }}/$(Build.BuildNumber)/$(Build.BuildId)/${{ parameters.devicePrefix }};/tests/' # uri used to create the vsdrops index using full uri
    USE_TCP_TUNNEL: 'true'
  displayName: 'Run tests'
  name: runTests # not to be confused with the displayName, this is used to later use the name of the step to access the output variables from an other job
  timeoutInMinutes: 600

# Upload TestSummary as an artifact.
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: TestSummary'
  inputs:
    targetPath: 'xamarin-macios/tests/TestSummary.md'
    artifactName: TestSummary-${{ parameters.devicePrefix }}
  continueOnError: true
  condition: succeededOrFailed()

- pwsh: |
    $summaryName = "TestSummary-$Env:PREFIX.md"
    $summaryPath = "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tests/TestSummary.md"
    if (Test-Path -Path $summaryPath -PathType Leaf) {
      Write-Host "##vso[task.addattachment type=Distributedtask.Core.Summary;name=$summaryName;]$summaryPath"
    }
  displayName: Set TestSummary
  env:
    PREFIX: ${{ parameters.devicePrefix }}

# Archive files for the Html Report so that the report can be easily uploaded as artifacts of the build.
- task: ArchiveFiles@1
  displayName: 'Archive HtmlReport'
  inputs:
    rootFolder: 'xamarin-macios/jenkins-results'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
  continueOnError: true
  condition: succeededOrFailed()

# Create HtmlReport artifact. This serves two purposes:
# 1. It is the way we are going to share the HtmlReport with the publish_html job that is executed on a Windows machine.
# 2. Users can download this if they want.
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: HtmlReport'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
    artifactName: HtmlReport-${{ parameters.devicePrefix }}
  continueOnError: true
  condition: succeededOrFailed()

# Be nice and clean behind you
- pwsh: |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/automation/scripts/
    Import-Module ./System.psm1
    Clear-AfterTests
  displayName: 'Cleanup'
  continueOnError: true
  condition: always() # no matter what, includes cancellation

