<Documentation>
  <Docs DocId="T:AddressBookUI.ABPeoplePickerNavigationController">
    <summary>A <see cref="T:UIKit.UINavigationController" /> that allows the application user to select a contact or contact information from an <see cref="T:AddressBook.ABAddressBook" />.</summary>
    <remarks>
      <para>In iOS 8 and later bringing up a people-picker navigtion controller does not require the app to have access to a user’s contacts, and the user will not be prompted to grant access. If the app does not itself have access to the user’s contacts, a temporary copy of the contact selected by the user will be returned to the app.</para>
      <para>
        <format type="text/html">
          <span>See a <a href="https://github.com/xamarin/monotouch-samples/tree/master/ios8/PeoplePicker">sample project</a> illustrating the use of a people-picker navigation controller.</span>
        </format>
      </para>
      <para>
	With the introduction of iOS 8.0, it is possible to filter the
	information displayed by setting one or more of the Predicate
	properties in this class.   
      </para>
      <para>
	The predicates are: <see cref="P:AddressBookUI.ABPeoplePickerNavigationController.PredicateForEnablingPerson" />,
	<see cref="P:AddressBookUI.ABPeoplePickerNavigationController.PredicateForSelectionOfPerson" />
	and <see cref="P:AddressBookUI.ABPeoplePickerNavigationController.PredicateForSelectionOfProperty" />.
      </para>
      <para>
	The predicates can use the various members in <see cref="T:AddressBookUI.ABPersonPredicateKey" /> as
	constants in the above predicates, or you can use the hardcoded strings shown below.
      </para>
      <para>
	Each one of these properties has either a native type (like a
	string), an array of elements or is a structured type that
	contains elements that you can access from the predicate
	expression.

      </para>
      <list type="table">
        <listheader>
          <term>Structured Type Name</term>
          <description>Property Contents</description>
          <description>
          </description>
        </listheader>
        <item>
          <term>LabeledValue</term>
          <description>'label' and 'value'.</description>
        </item>
        <item>
          <term>PhoneNumber</term>
          <description>'stringValue', 'countryCode', 'formattedStringValue' and 'normalizedStringValue'</description>
        </item>
        <item>
          <term>InstantMessageAddress</term>
          <description>'username' and 'service'</description>
        </item>
        <item>
          <term>SocialProfile</term>
          <description>'username' and 'service'</description>
        </item>
        <item>
          <term>PostalAddress</term>
          <description>'street' property, 'subLocality' property, 'city' property, 'subAdministrativeArea' property, 'state' property, 'postalCode' property, 'country/region' and 'ISOCountryCode'.</description>
        </item>
      </list>
      <list type="table">
        <listheader>
          <term>ABPersonPredicateKey</term>
          <description>String Name</description>
          <description>Key value</description>
        </listheader>
        <item>
          <term>NamePrefix</term>
          <description>"namePrefix"</description>
          <description>string</description>
        </item>
        <item>
          <term>GivenName</term>
          <description>"givenName"</description>
          <description>string</description>
        </item>
        <item>
          <term>MiddleName</term>
          <description>"middleName"</description>
          <description>string</description>
        </item>
        <item>
          <term>FamilyName</term>
          <description>"familyName"</description>
          <description>string</description>
        </item>
        <item>
          <term>NameSuffix</term>
          <description>"nameSuffix"</description>
          <description>string</description>
        </item>
        <item>
          <term>PreviousFamilyName</term>
          <description>"previousFamilyName"</description>
          <description>string</description>
        </item>
        <item>
          <term>Nickname</term>
          <description>"nickname"</description>
          <description>string</description>
        </item>
        <item>
          <term>PhoneticGivenName</term>
          <description>"phoneticGivenName"</description>
          <description>string</description>
        </item>
        <item>
          <term>PhoneticMiddleName</term>
          <description>"phoneticMiddleName"</description>
          <description>string</description>
        </item>
        <item>
          <term>PhoneticFamilyName</term>
          <description>"phoneticFamilyName"</description>
          <description>string</description>
        </item>
        <item>
          <term>OrganizationName</term>
          <description>"organizationName"</description>
          <description>string</description>
        </item>
        <item>
          <term>DepartmentName</term>
          <description>"departmentName"</description>
          <description>string</description>
        </item>
        <item>
          <term>JobTitle</term>
          <description>"jobTitle"</description>
          <description>string</description>
        </item>
        <item>
          <term>Birthday</term>
          <description>"birthday"</description>
          <description>NSDateComponents</description>
        </item>
        <item>
          <term>Note</term>
          <description>"note"</description>
          <description>string</description>
        </item>
        <item>
          <term>PhoneNumbers</term>
          <description>"phoneNumbers"</description>
          <description>Array of LabeledValue with PhoneNumber values</description>
        </item>
        <item>
          <term>EmailAddresses</term>
          <description>"emailAddresses"</description>
          <description>array of LabeledValue with string values</description>
        </item>
        <item>
          <term>UrlAddresses</term>
          <description>"urlAddresses"</description>
          <description>array of LabeledValue with string values</description>
        </item>
        <item>
          <term>Dates</term>
          <description>"dates"</description>
          <description>array of LabeledValue with NSDateComponents values</description>
        </item>
        <item>
          <term>InstantMessageAddresses</term>
          <description>"instantMessageAddresses"</description>
          <description>array of LabeledValue with InstantMessageAddress values</description>
        </item>
        <item>
          <term>RelatedNames</term>
          <description>"relatedNames"</description>
          <description>array of LabeledValue with string values</description>
        </item>
        <item>
          <term>SocialProfiles</term>
          <description>"socialProfiles"</description>
          <description>array of LabeledValue with SocialProfile values</description>
        </item>
        <item>
          <term>PostalAddresses</term>
          <description>"postalAddresses"</description>
          <description>array of LabeledValue with PostalAddress values</description>
        </item>
      </list>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[[Register ("CompatibleEmailPickerViewController")]
public class CompatibleEmailPickerViewController : UIViewController
{
    [Outlet]
    UILabel ResultLabel { get ; set; }

    public CompatibleEmailPickerViewController (IntPtr handle)
        : base (handle)
    {
    }

    [Export("showPicker:")]
    void ShowPicker(NSObject sender)
    {
        ABPeoplePickerNavigationController picker = new ABPeoplePickerNavigationController ();

	// Hook up to both events to support iOS 7 and iOS 8 idioms

	// Hooks up to the iOS 7 and lower idioms
        picker.SelectPerson += HandleSelectPerson;
        picker.PerformAction += HandlePerformAction;

	// Hook up to the new iOS 8 idioms and parameters
        picker.SelectPerson2 += HandleSelectPerson2;
        picker.PerformAction2 += HandlePerformAction2;

        picker.Cancelled += HandleCancelled;

        // The people picker will only display the person's name, 
	// image and email properties in ABPersonViewController.
        picker.DisplayedProperties.Add (ABPersonProperty.Email);

        // The people picker will enable selection 
	// of persons that have at least one email address.
        if(picker.RespondsToSelector(new Selector("setPredicateForEnablingPerson:")))
            picker.PredicateForEnablingPerson = NSPredicate.FromFormat ("emailAddresses.@count > 0");

        // The people picker will select a person that has exactly one email address and 
	// call peoplePickerNavigationController:didSelectPerson:,
        // otherwise the people picker will present an ABPersonViewController for the 
	// user to pick one of the email addresses.
        if(picker.RespondsToSelector(new Selector("setPredicateForSelectionOfPerson:")))
            picker.PredicateForSelectionOfPerson = NSPredicate.FromFormat ("emailAddresses.@count = 1");

        PresentViewController (picker, true, null);
    }

    // iOS7 and below
    void HandleSelectPerson (object sender, ABPeoplePickerSelectPersonEventArgs e)
    {
        var peoplePicker = (ABPeoplePickerNavigationController)sender;

        e.Continue = false;
        using (ABMultiValue<string> emails = e.Person.GetEmails ())
            e.Continue = emails.Count == 1;

        if (!e.Continue) {
            ResultLabel.Text = PersonFormatter.GetPickedEmail (e.Person);
            peoplePicker.DismissViewController (true, null);
        }
    }

    // iOS8+
    void HandleSelectPerson2 (object sender, ABPeoplePickerSelectPerson2EventArgs e)
    {
        ResultLabel.Text = PersonFormatter.GetPickedEmail (e.Person);
    }

    // iOS7 and below
    void HandlePerformAction (object sender, ABPeoplePickerPerformActionEventArgs e)
    {
        var peoplePicker = (ABPeoplePickerNavigationController)sender;

        ResultLabel.Text = PersonFormatter.GetPickedEmail (e.Person, e.Identifier);
        peoplePicker.DismissViewController (true, null);

        e.Continue = false;
    }

    // iOS8+
    void HandlePerformAction2 (object sender, ABPeoplePickerPerformAction2EventArgs e)
    {
        ResultLabel.Text = PersonFormatter.GetPickedEmail (e.Person, e.Identifier);
    }

    void HandleCancelled (object sender, EventArgs e)
    {
        var peoplePicker = (ABPeoplePickerNavigationController)sender;
        peoplePicker.DismissViewController (true, null);
    }
}]]></code>
      </example>.</remarks>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Shared_Resources/Contacts/Choose_a_Contact">Choose a Contact</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Shared_Resources/Contacts/Create_a_new_Contact">Create a New Contact</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Shared_Resources/Contacts/Find_a_Contact">Find a Contact</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/AddressBookUI/Reference/ABPeoplePickerNavigationController_Class/index.html">Apple documentation for <c>ABPeoplePickerNavigationController</c></related>
  </Docs>
</Documentation>