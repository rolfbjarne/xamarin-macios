// <auto-generated />

#nullable enable

using Foundation;
using ObjCBindings;
using ObjCRuntime;
using System;

namespace AVFoundation;

[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
public static partial class AVCaptureSystemPressureLevelExtensions
{

	static IntPtr[] values = new IntPtr [5];

	[Field ("AVCaptureSystemPressureLevelNominal", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureSystemPressureLevelNominal
	{
		get
		{
			fixed (IntPtr *storage = &values [0])
				return Dlfcn.CachePointer (Libraries.AVFoundation.Handle, "AVCaptureSystemPressureLevelNominal", storage);
		}
	}

	[Field ("AVCaptureSystemPressureLevelFair", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureSystemPressureLevelFair
	{
		get
		{
			fixed (IntPtr *storage = &values [1])
				return Dlfcn.CachePointer (Libraries.AVFoundation.Handle, "AVCaptureSystemPressureLevelFair", storage);
		}
	}

	[Field ("AVCaptureSystemPressureLevelSerious", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureSystemPressureLevelSerious
	{
		get
		{
			fixed (IntPtr *storage = &values [2])
				return Dlfcn.CachePointer (Libraries.AVFoundation.Handle, "AVCaptureSystemPressureLevelSerious", storage);
		}
	}

	[Field ("AVCaptureSystemPressureLevelCritical", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureSystemPressureLevelCritical
	{
		get
		{
			fixed (IntPtr *storage = &values [3])
				return Dlfcn.CachePointer (Libraries.AVFoundation.Handle, "AVCaptureSystemPressureLevelCritical", storage);
		}
	}

	[Field ("AVCaptureSystemPressureLevelShutdown", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureSystemPressureLevelShutdown
	{
		get
		{
			fixed (IntPtr *storage = &values [4])
				return Dlfcn.CachePointer (Libraries.AVFoundation.Handle, "AVCaptureSystemPressureLevelShutdown", storage);
		}
	}

	public static NSString? GetConstant (this AVCaptureSystemPressureLevel self)
	{
		IntPtr ptr = IntPtr.Zero;
		switch ((int) self)
		{
			case 0: // AVCaptureSystemPressureLevelNominal
				ptr = AVCaptureSystemPressureLevelNominal;
				break;
			case 1: // AVCaptureSystemPressureLevelFair
				ptr = AVCaptureSystemPressureLevelFair;
				break;
			case 2: // AVCaptureSystemPressureLevelSerious
				ptr = AVCaptureSystemPressureLevelSerious;
				break;
			case 3: // AVCaptureSystemPressureLevelCritical
				ptr = AVCaptureSystemPressureLevelCritical;
				break;
			case 4: // AVCaptureSystemPressureLevelShutdown
				ptr = AVCaptureSystemPressureLevelShutdown;
				break;
		}
		return (NSString?) Runtime.GetNSObject (ptr);
	}

	public static AVCaptureSystemPressureLevel GetValue (NSString constant)
	{
		if (constant is null)
			throw new ArgumentNullException (nameof (constant));
		if (constant.IsEqualTo (AVCaptureSystemPressureLevelNominal))
			return AVCaptureSystemPressureLevel.Nominal;
		if (constant.IsEqualTo (AVCaptureSystemPressureLevelFair))
			return AVCaptureSystemPressureLevel.Fair;
		if (constant.IsEqualTo (AVCaptureSystemPressureLevelSerious))
			return AVCaptureSystemPressureLevel.Serious;
		if (constant.IsEqualTo (AVCaptureSystemPressureLevelCritical))
			return AVCaptureSystemPressureLevel.Critical;
		if (constant.IsEqualTo (AVCaptureSystemPressureLevelShutdown))
			return AVCaptureSystemPressureLevel.Shutdown;
		throw new NotSupportedException ($"The constant {constant} has no associated enum value on this platform.");
	}

	internal static NSString?[]? ToConstantArray (this AVCaptureSystemPressureLevel[]? values)
	{
		if (values is null)
			return null;
		var rv = new global::System.Collections.Generic.List<NSString?> ();
		for (var i = 0; i < values.Length; i++) {
			var value = values [i];
			rv.Add (value.GetConstant ());
		}
		return rv.ToArray ();
	}

	internal static AVCaptureSystemPressureLevel[]? ToEnumArray (this NSString[]? values)
	{
		if (values is null)
			return null;
		var rv = new global::System.Collections.Generic.List<AVCaptureSystemPressureLevel> ();
		for (var i = 0; i < values.Length; i++) {
			var value = values [i];
			rv.Add (GetValue (value));
		}
		return rv.ToArray ();
	}
}
