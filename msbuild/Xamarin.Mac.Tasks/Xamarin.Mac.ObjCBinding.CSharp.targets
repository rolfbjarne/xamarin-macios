<!--
***********************************************************************************************
Xamarin.Mac.ObjcBinding.CSharp.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
  created a backup copy.  Incorrect changes to this file will make it
  impossible to load or build your projects from the command-line or the IDE.

This file imports the version- and platform-specific targets for the project importing
this file. This file also defines targets to produce an error if the specified targets
file does not exist, but the project is built anyway (command-line or IDE build).

Copyright (C) 2014 Xamarin Inc. All rights reserved.
***********************************************************************************************
-->

<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).Before.targets"
			Condition="Exists('$(MSBuildThisFileDirectory)$(MSBuildThisFileName).Before.targets')"/>
	
	<!-- This is used to set that we're a binding project. It must be set before including Xamarin.Shared.props -->
	<PropertyGroup>
		<IsBindingProject>true</IsBindingProject>
	</PropertyGroup>

	<!-- Due to IDE/template bugs, many bindings projects exist in the wild without correct TFI/TFV tags.
	In addition, System is not supported, so treat System as Modern or Full, depending on TFV being set.
	Microsoft.CSharp.targets gives TargetFrameworkVersion / TargetFrameworkIdentifier default values, so we _must_ do this _before_ 
	import Microsoft.CSharp.targets. However, we can't do most of Xamarin.Mac.ObjCBinding.CSharp.props before it. -->

	<Choose>
		<When Condition=" '$(UseXamMacFullFramework)' == '' And ( '$(TargetFrameworkVersion)' == 'v2.0' Or '$(TargetFrameworkVersion)' == '' ) And '$(_UsingXamarinSdk)' != 'true'">
			<PropertyGroup>
				<TargetFrameworkVersion>v2.0</TargetFrameworkVersion>
				<TargetFrameworkIdentifier>Xamarin.Mac</TargetFrameworkIdentifier>
			</PropertyGroup>
		</When>
		<When Condition="'$(_UsingXamarinSdk)' != 'true'">
			<PropertyGroup>
				<TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
				<UseXamMacFullFramework>true</UseXamMacFullFramework>
				<TargetFrameworkIdentifier></TargetFrameworkIdentifier>
			</PropertyGroup>
		</When>
	</Choose>

	<PropertyGroup>
		<!-- Enable nuget package conflict resolution -->
		<ResolveAssemblyConflicts>true</ResolveAssemblyConflicts>
	</PropertyGroup>

	<Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" Condition="'$(_UsingXamarinSdk)' != 'true'" />
	
	<Import Project="$(MSBuildThisFileDirectory)Xamarin.Mac.ObjCBinding.CSharp.props"/>

	<Import Project="$(MSBuildThisFileDirectory)Xamarin.Mac.ObjCBinding.Common.targets" />

	<Import Project="$(MSBuildThisFileDirectory)Xamarin.Shared.targets" />

	<Target Name="_PrepareNativeReferences" Condition="'$(DesignTimeBuild)' != 'true'">
		<PrepareNativeReferences
			Condition="'$(IsMacEnabled)' == 'true'"
			SessionId="$(BuildSessionId)"
			IntermediateOutputPath="$(IntermediateOutputPath)"
			NativeReferences="@(NativeReference)"
		>
			<Output ItemName="ManifestResourceWithNoCulture" TaskParameter="EmbeddedResources" Condition="'$(NoBindingEmbedding)' != 'true'"/>
			<Output ItemName="_NativeFramework" TaskParameter="NativeFrameworks" Condition="'$(NoBindingEmbedding)' != 'true'"/>
			<Output ItemName="Compile" TaskParameter="LinkWithAttributes" />
		</PrepareNativeReferences>
	</Target>

	<Target Name="_CollectNativeFrameworkResources" Returns="@(_NativeFrameworkResource)" DependsOnTargets="_PrepareNativeReferences">
		<CreateItem Include="@(_NativeFramework -> '%(Identity)\**\*.*')">
			<Output ItemName="_NativeFrameworkResource" TaskParameter="Include" />
		</CreateItem>
	</Target>

	<Target Name="_CompressFrameworks" Inputs="@(_NativeFrameworkResource)" Outputs="$(IntermediateOutputPath)%(_NativeFramework.Filename)%(_NativeFramework.Extension)" DependsOnTargets="_CollectNativeFrameworkResources">
		<Delete SessionId="$(BuildSessionId)" Condition="'$(IsMacEnabled)' == 'true'" Files="$(IntermediateOutputPath)%(_NativeFramework.Filename)%(_NativeFramework.Extension)" />

		<Zip
			Condition="'$(IsMacEnabled)' == 'true'"
			SessionId="$(BuildSessionId)"
			ToolExe="$(ZipExe)"
			ToolPath="$(ZipPath)"
			Recursive="true"
			Symlinks="true"
			Sources="%(_NativeFramework.Identity)"
			OutputFile="$(IntermediateOutputPath)%(_NativeFramework.Filename)%(_NativeFramework.Extension)"
			WorkingDirectory="%(_NativeFramework.FullPath)" >
		</Zip>

		<CreateItem Include="$(IntermediateOutputPath)%(_NativeFramework.Filename)%(_NativeFramework.Extension)">
			<Output TaskParameter="Include" ItemName="ManifestResourceWithNoCulture" />
		</CreateItem>
	</Target>

	<Target Name="_CollectGeneratedSources" DependsOnTargets="_CompressFrameworks;_GenerateBindings"
		Condition="'$(DesignTimeBuild)' != 'true'">
		
		<ReadLinesFromFile File="$(_GeneratedSourcesFileList)" >
			<Output TaskParameter="Lines" ItemName="GeneratedSources" />
		</ReadLinesFromFile>

		<CreateItem Include="@(ObjcBindingCoreSource)">
			<Output TaskParameter="Include" ItemName="Compile" />
		</CreateItem>

		<CreateItem Include="@(GeneratedSources)">
			<Output TaskParameter="Include" ItemName="Compile" />
		</CreateItem>

		<CreateItem Include="@(ObjcBindingNativeLibrary)">
			<Output TaskParameter="Include" ItemName="ManifestResourceWithNoCulture" />
		</CreateItem>
	</Target>

	<Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).After.targets"
			Condition="Exists('$(MSBuildThisFileDirectory)$(MSBuildThisFileName).After.targets')"/>
</Project>
