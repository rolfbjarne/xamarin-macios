{
	"version": "@VERSION@",
	"workloads": {
		"@PLATFORM_LOWERCASE@": {
			"description": ".NET SDK Workload for building @PLATFORM@ applications.",
			"packs": [
				"Microsoft.@PLATFORM@.Sdk",
				"Microsoft.@PLATFORM@.Sdk.NET6",
				"Microsoft.@PLATFORM@.Ref",
				"Microsoft.@PLATFORM@.Runtime.osx-arm64",
				"Microsoft.@PLATFORM@.Runtime.osx-x64",
				"Microsoft.@PLATFORM@.Templates"
			],
			"extends": [ 
				"microsoft-net-runtime-mono-tooling"
			]
		}
	},
	"packs": {
		"Microsoft.@PLATFORM@.Sdk": {
			"kind": "sdk",
			"version": "@VERSION@"
		},
		"Microsoft.@PLATFORM@.Sdk.NET6": {
			"kind": "sdk",
			"version": "@NET6_VERSION@",
			"alias-to": {
				"any": "Microsoft.@PLATFORM@.Sdk"
			}
		},
		// The ref and runtime packs use the .NET6 version, because when we load the .NET6 SDK pack, it says to use the ref and runtime pack versions from the workload (**FromWorkload**).
		// This could be solvable with aliases as well, except that aliases doesn't work in this scenario (https://github.com/dotnet/sdk/issues/26384).
		// For the .NET7 packs, we're stating the exact version to use in the KnownFrameworkReference item, so whatever we specify here is ignored.
		"Microsoft.@PLATFORM@.Ref": {
			"kind": "framework",
			"version": "@NET6_VERSION@"
		},
		"Microsoft.@PLATFORM@.Runtime.osx-arm64": {
			"kind": "framework",
			"version": "@NET6_VERSION@"
		},
		"Microsoft.@PLATFORM@.Runtime.osx-x64": {
			"kind": "framework",
			"version": "@NET6_VERSION@"
		},
		"Microsoft.@PLATFORM@.Templates": {
			"kind": "template",
			"version": "@NET6_VERSION@"
		}
	}
}
