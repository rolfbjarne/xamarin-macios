#!/usr/bin/env /Library/Frameworks/Mono.framework/Commands/csharp

// arguments are: <platform> <outputPath>

using System.IO;
using System.Xml;

var args = Environment.GetCommandLineArgs ();
var expectedArgumentCount = 6;
if (args.Length != expectedArgumentCount + 2 /* 2 default arguments (executable + script) + 'expectedArgumentCount' arguments we're interested in */) {
	// first arg is "/Library/Frameworks/Mono.framework/Versions/4.8.0/lib/mono/4.5/csharp.exe"
	// second arg the script itself
	// then comes the ones we care about
	Console.WriteLine ($"Need {expectedArgumentCount} arguments, got {args.Length - 2}");
	Environment.Exit (1);
	return;
}

var argumentIndex = 2;
var platform = args [argumentIndex++];
var version = args [argumentIndex++];
var net6Version = args [argumentIndex++];
var runtimeIdentifiers = args [argumentIndex++].Split (' ');
var outputPath = args [argumentIndex++];
var windowsPlatforms = args [argumentIndex++].Split (' ');
var hasWindows = Array.IndexOf (windowsPlatforms, platform) >= 0;

var platformLowerCase = platform.ToLowerInvariant ();

using (TextWriter writer = new StreamWriter (outputPath)) {
	writer.WriteLine ($"{{");
	writer.WriteLine ($"	\"version\": \"{version}\",");
	writer.WriteLine ($"	\"workloads\": {{");
	writer.WriteLine ($"		\"{platformLowerCase}\": {{");
	writer.WriteLine ($"			\"description\": \".NET SDK Workload for building {platform} applications.\",");
	writer.WriteLine ($"			\"packs\": [");
	writer.WriteLine ($"				\"Microsoft.{platform}.Sdk.NET7\",");
	if (hasWindows) {
		writer.WriteLine ($"				\"Microsoft.{platform}.Windows.Sdk.Aliased.NET7\",");
	}
	writer.WriteLine ($"				\"Microsoft.{platform}.Ref.NET7\",");
	foreach (var rid in runtimeIdentifiers) {
		writer.WriteLine ($"				\"Microsoft.{platform}.Runtime.{rid}.NET7\",");
	}
	writer.WriteLine ($"				\"Microsoft.{platform}.Templates.NET7\"");
	writer.WriteLine ($"			],");
	writer.WriteLine ($"			\"extends\": [");
	if (platform == "macOS") {
		writer.WriteLine ($"				\"microsoft-net-runtime-mono-tooling\"");
	} else {
		writer.WriteLine ($"				\"microsoft-net-runtime-{platformLowerCase}\"");
	}
	writer.WriteLine ($"			]");
	writer.WriteLine ($"		}},");
	writer.WriteLine ($"		\"{platformLowerCase}-net6\": {{");
	writer.WriteLine ($"			\"description\": \".NET SDK Workload for building .NET 6 {platform} applications.\",");
	writer.WriteLine ($"			\"packs\": [");
	writer.WriteLine ($"				\"Microsoft.{platform}.Sdk.NET6\",");
	if (hasWindows) {
		writer.WriteLine ($"				\"Microsoft.{platform}.Windows.Sdk.Aliased.NET6\",");
	}
	writer.WriteLine ($"				\"Microsoft.{platform}.Ref\",");
	foreach (var rid in runtimeIdentifiers) {
		writer.WriteLine ($"				\"Microsoft.{platform}.Runtime.{rid}\",");
	}
	writer.WriteLine ($"			],");
	writer.WriteLine ($"			\"extends\": [");
	if (platform == "macOS") {
		writer.WriteLine ($"				\"microsoft-net-runtime-mono-tooling-net6\"");
	} else {
		writer.WriteLine ($"				\"microsoft-net-runtime-{platformLowerCase}-net6\"");
	}
	writer.WriteLine ($"			]");
	writer.WriteLine ($"		}},");
	writer.WriteLine ($"	}},");
	writer.WriteLine ($"	\"packs\": {{");
	writer.WriteLine ($"		\"Microsoft.{platform}.Sdk.NET7\": {{");
	writer.WriteLine ($"			\"kind\": \"sdk\",");
	writer.WriteLine ($"			\"version\": \"{version}\",");
	writer.WriteLine ($"			\"alias-to\": {{");
	writer.WriteLine ($"				\"any\": \"Microsoft.{platform}.Sdk\"");
	writer.WriteLine ($"			}}");
	writer.WriteLine ($"		}},");
	writer.WriteLine ($"		\"Microsoft.{platform}.Sdk.NET6\": {{");
	writer.WriteLine ($"			\"kind\": \"sdk\",");
	writer.WriteLine ($"			\"version\": \"{net6Version}\",");
	writer.WriteLine ($"			\"alias-to\": {{");
	writer.WriteLine ($"				\"any\": \"Microsoft.{platform}.Sdk\"");
	writer.WriteLine ($"			}}");
	writer.WriteLine ($"		}},");
	if (hasWindows) {
		writer.WriteLine ($"		\"Microsoft.@PLATFORM@.Windows.Sdk.Aliased.NET7\": {{");
		writer.WriteLine ($"			\"kind\": \"sdk\",");
		writer.WriteLine ($"			\"version\": \"{version}\",");
		writer.WriteLine ($"			\"alias-to\": {{");
		writer.WriteLine ($"				\"win-x64\": \"Microsoft.{platform}.Windows.Sdk\",");
		writer.WriteLine ($"				\"win-x86\": \"Microsoft.{platform}.Windows.Sdk\",");
		writer.WriteLine ($"				\"win-arm64\": \"Microsoft.{platform}.Windows.Sdk\",");
		writer.WriteLine ($"			}}");
		writer.WriteLine ($"		}},");
		writer.WriteLine ($"		\"Microsoft.{platform}.Windows.Sdk.Aliased.NET6\": {{");
		writer.WriteLine ($"			\"kind\": \"sdk\",");
		writer.WriteLine ($"			\"version\": \"{net6Version}\",");
		writer.WriteLine ($"			\"alias-to\": {{");
		writer.WriteLine ($"				\"win-x64\": \"Microsoft.{platform}.Windows.Sdk\",");
		writer.WriteLine ($"				\"win-x86\": \"Microsoft.{platform}.Windows.Sdk\",");
		writer.WriteLine ($"				\"win-arm64\": \"Microsoft.{platform}.Windows.Sdk\",");
		writer.WriteLine ($"			}}");
		writer.WriteLine ($"		}},");
	}
	writer.WriteLine ($"		// The ref and runtime packs use the .NET6 version, because when we load the .NET6 SDK pack, it says to use the ref and runtime pack versions from the workload (**FromWorkload**).");
	writer.WriteLine ($"		// This could be solvable with aliases as well, except that aliases doesn't work in this scenario (https://github.com/dotnet/sdk/issues/26384).");
	writer.WriteLine ($"		// For the .NET7 packs, we're stating the exact version to use in the KnownFrameworkReference item, so whatever we specify here is ignored.");
	writer.WriteLine ($"		\"Microsoft.{platform}.Ref\": {{");
	writer.WriteLine ($"			\"kind\": \"framework\",");
	writer.WriteLine ($"			\"version\": \"{net6Version}\"");
	writer.WriteLine ($"		}},");
	writer.WriteLine ($"		\"Microsoft.{platform}.Ref.NET7\": {{");
	writer.WriteLine ($"			\"kind\": \"framework\",");
	writer.WriteLine ($"			\"version\": \"{version}\",");
	writer.WriteLine ($"			\"alias-to\": {{");
	writer.WriteLine ($"				\"any\": \"Microsoft.{platform}.Ref\",");
	writer.WriteLine ($"			}}");
	writer.WriteLine ($"		}},");
	foreach (var rid in runtimeIdentifiers) {
		writer.WriteLine ($"		\"Microsoft.{platform}.Runtime.{rid}\": {{");
		writer.WriteLine ($"			\"kind\": \"framework\",");
		writer.WriteLine ($"			\"version\": \"{net6Version}\"");
		writer.WriteLine ($"		}},");
	}
	foreach (var rid in runtimeIdentifiers) {
		writer.WriteLine ($"		\"Microsoft.{platform}.Runtime.{rid}.NET7\": {{");
		writer.WriteLine ($"			\"kind\": \"framework\",");
		writer.WriteLine ($"			\"version\": \"{version}\",");
		writer.WriteLine ($"			\"alias-to\": {{");
		writer.WriteLine ($"				\"any\": \"Microsoft.{platform}.Runtime.{rid}\",");
		writer.WriteLine ($"			}}");
		writer.WriteLine ($"		}},");
	}
	writer.WriteLine ($"		\"Microsoft.{platform}.Templates.NET7\": {{");
	writer.WriteLine ($"			\"kind\": \"template\",");
	writer.WriteLine ($"			\"version\": \"{version}\",");
		writer.WriteLine ($"			\"alias-to\": {{");
		writer.WriteLine ($"				\"any\": \"Microsoft.{platform}.Templates\",");
		writer.WriteLine ($"			}}");
	writer.WriteLine ($"		}}");
	writer.WriteLine ($"	}}");
	writer.WriteLine ($"}}");
}

Environment.Exit (0);
