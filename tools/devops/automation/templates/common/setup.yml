# Template that does all the boiler plate needed to build and execute tests on macOS bots

parameters:

- name: keyringPass
  type: string

steps:
- template: agent-cleanser/v1.yml@yaml-templates # Uninstalls mono, Xamarin.Mac (if installed) plus cleanses the Provisionator Xcode cache and kills processes at the end
  parameters:
    CleanseProcesses: true

- bash: cd $(System.DefaultWorkingDirectory)/xamarin-macios/ && git clean -xdf
  displayName: 'Clean workspace'

- bash: $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/automation/scripts/bash/clean-bot.sh
  displayName: 'Clean bot'
  env:
    BUILD_REVISION: 'jenkins'
  continueOnError: true
  timeoutInMinutes: 60

- powershell: |
    Write-Host "IsMacOS: ${IsMacOS}"
    Write-Host "IsWindows: ${IsWindows}"
    Write-Host "IsLinux: ${IsLinux}"

    if ($IsMacOS -or $IsLinux) {
        Write-Host "HOSTNAME: $(hostname)"
    } else {
        Write-Host "COMPUTERNAME: ${env:COMPUTERNAME}"
    }

    gci env: | format-table -autosize -wrap

    system_profiler SPSoftwareDataType SPHardwareDataType SPDeveloperToolsDataType
  displayName: 'Show Environment'

- powershell: |
    Write-Host "Python3 location"
    which python3

    Write-Host "Pip3 version"
    pip3 -V
  displayName: 'Show Python information'

- bash: |
    set -x
    sudo rm -Rf /Developer/MonoTouch
    sudo rm -Rf /Library/Frameworks/Xamarin.iOS.framework
    sudo rm -Rf /Library/Frameworks/Xamarin.Mac.framework
    ls -R /Library/Frameworks
  displayName: 'Delete library folders'
  timeoutInMinutes: 5

- bash:
    set -x
    set -e
    rm -Rvf $(Build.SourcesDirectory)/package
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ git-clean-all
  displayName: 'Clear results directory'
  timeoutInMinutes: 5
  continueOnError: true

- bash: |
    RC=0
    security set-key-partition-list -S apple-tool:,apple: -s -k $OSX_KEYCHAIN_PASS login.keychain || RC=$?
    if [ $RC -eq 0 ]; then
      echo "Security UI-prompt removed."
    else
      echo "Security UI-prompt could NOT be removed."
    fi
  env:
    OSX_KEYCHAIN_PASS: ${{ parameters.keyringPass }}
  displayName: 'Remove security UI-prompt (http://stackoverflow.com/a/40039594/183422)'
  continueOnError: true

# was the current xcode deleted (has happened due to a bug in the clean step)? then set the default so 
# that we can call make and generated the provisionator config files.
- bash: |
    XCODE_SELECT=$(xcode-select -p)
    if [[ -d $XCODE_SELECT ]]; then
      echo "Using Xcode in path $XCODE_SELECT"
    else
      echo "Setting Xcode to point to the default location."
      xcode-select -s "/Applications/Xcode.app/Contents/Developer"
    fi
  displayName: 'Ensure Xcode is selected.'

- pwsh: |
    # some steps expect this to be set to be able to get the correct nuget name
    Write-Host "##vso[task.setvariable variable=BRANCH_NAME]$Env:BRANCH_NAME"
  displayName: 'Set Jenkins variables'
  env:
    BRANCH_NAME: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
