<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets" />

	<!-- Default item includes (globs and implicit references) -->
	<Import Project="Xamarin.Shared.Sdk.DefaultItems.targets" />
	<Import Project="Xamarin.Shared.Sdk.TargetFrameworkInference.targets" />

	<PropertyGroup>
		<_TargetsDiriOS>$(XamarinSdkRootDirectory)\tools\msbuild\iOS</_TargetsDiriOS>
		<_TargetsDirtvOS>$(XamarinSdkRootDirectory)\tools\msbuild\TVOS</_TargetsDirtvOS>
		<_TargetsDirwatchOS>$(XamarinSdkRootDirectory)\tools\msbuild\WatchOS</_TargetsDirwatchOS>
		<_TargetsDirmacOS>$(XamarinSdkRootDirectory)\tools\msbuild</_TargetsDirmacOS>
		<_TargetsDir Condition="'$(_PlatformName)' == 'iOS'">$(_TargetsDiriOS)\</_TargetsDir>
		<_TargetsDir Condition="'$(_PlatformName)' == 'tvOS'">$(_TargetsDirtvOS)\</_TargetsDir>
		<_TargetsDir Condition="'$(_PlatformName)' == 'watchOS'">$(_TargetsDirwatchOS)\</_TargetsDir>
		<_TargetsDir Condition="'$(_PlatformName)' == 'macOS'">$(_TargetsDirmacOS)\</_TargetsDir>
	</PropertyGroup>

	<PropertyGroup>
		<_TaskAssemblyName Condition="'$(_PlatformName)' == 'iOS' Or '$(_PlatformName)' == 'tvOS' Or '$(_PlatformName)' == 'watchOS'">Xamarin.iOS.Tasks.dll</_TaskAssemblyName>
		<_TaskAssemblyName Condition="'$(_PlatformName)' == 'macOS'">Xamarin.Mac.Tasks.dll</_TaskAssemblyName>
	</PropertyGroup>
	<UsingTask TaskName="Xamarin.MacDev.Tasks.CompileExecutable" AssemblyFile="$(_TargetsDir)$(_TaskAssemblyName)" />
	<UsingTask TaskName="Xamarin.iOS.Tasks.Mlaunch" AssemblyFile="$(_TargetsDir)$(_TaskAssemblyName)" Condition=" '$(_PlatformName)' != 'macOS' " />

	<!-- Automatically supply project capabilities for IDE use -->
	<ItemGroup>
		<ProjectCapability Include="Apple" />
		<ProjectCapability Include="Mobile" />
	</ItemGroup>

	<PropertyGroup>
		<!-- Disable symbol stripping for now, since we're not generating the list of symbols to keep yet -->
		<MtouchNoSymbolStrip>true</MtouchNoSymbolStrip>
	</PropertyGroup>

	<!-- Big hack: disable app host verifications -->
	<Target Name="_CheckForUnsupportedAppHostUsage" />

	<!-- Compute a few values -->
	<PropertyGroup>
		<_Is32BitBuild Condition=" '(MtouchArch)' == 'x86' Or '$(MtouchArch)' == 'ARMv7' Or '$(MtouchArch)' == 'ARMv7s' Or '$(MtouchArch)' == 'ARMv7k' Or '$(MtouchArch)' == 'ARM64_32'">true</_Is32BitBuild>
		<_Is64BitBuild Condition=" '(_Is32BitBuild)' != 'true' ">true</_Is64BitBuild>
	</PropertyGroup>

	<!-- Override overridable targets -->
	<PropertyGroup>
		<BeforeComputeFilesToPublishTargets>_EarlyAppBundleTasks</BeforeComputeFilesToPublishTargets>
		<AfterComputeFilesToPublishTargets>_LateAppBundleTasks</AfterComputeFilesToPublishTargets>
		<BeforeILLinkTargets>_PreProcessAssemblies</BeforeILLinkTargets>
		<AfterILLinkTargets>_PostProcessAssemblies</AfterILLinkTargets>
		<BeforeMonoAOTCompilationTargets></BeforeMonoAOTCompilationTargets>
		<AfterMonoAOTCompilationTargets>_PostProcessAOTCompilation</AfterMonoAOTCompilationTargets>
		<BeforeGenerateSingleFileBundleTargets>_PreProcessNativeLinker</BeforeGenerateSingleFileBundleTargets>
		<AfterGenerateSingleFileBundleTargets>_PostProcessNativeLinker</AfterGenerateSingleFileBundleTargets>
		<!-- Codesign fails for unknown reasons for simulator builds -->
		<AfterPublishTargets Condition=" '$(_SdkIsSimulator)' == 'true' ">Codesign;CreateIpa;Archive</AfterPublishTargets>
	</PropertyGroup>

	<!-- Another big hack: inject our targets -->
	<Target Name="ComputeAndCopyFilesToPublishDirectory"
          DependsOnTargets="
          $(BeforeComputeFilesToPublishTargets);
          ComputeFilesToPublish;
          $(AfterComputeFilesToPublishTargets);
          CopyFilesToPublishDirectory">
	</Target>
	<Target Name="ComputeFilesToPublish"
          DependsOnTargets="
          	ComputeResolvedFilesToPublishList;
          	$(BeforeILLinkTargets);
            ILLink;
            $(AfterILLinkTargets);
            CreateReadyToRunImages;
            $(BeforeMonoAOTCompilationTargets);
            $(AfterMonoAOTCompilationTargets);
            GeneratePublishDependencyFile;
            $(BeforeGenerateSingleFileBundleTargets);
            GenerateSingleFileBundle;
            $(AfterGenerateSingleFileBundleTargets);">
  	</Target>
  	<PropertyGroup>
    <_CorePublishTargets>
    	$(_CorePublishTargets);
    	$(AfterPublishTargets);
    </_CorePublishTargets>

  	</PropertyGroup>
	<!-- Actual implementations for what we need to do -->

	<!-- Linker targets -->
	<Target Name="_PreProcessAssemblies" DependsOnTargets="_ComputeLinkerArguments;_ExtractNativeLibrariesFromBindingAssemblies;" />
	<PropertyGroup>
		<_AdditionalTaskAssemblyDirectory>$(XamarinSdkRootDirectory)tools/dotnet-linker/</_AdditionalTaskAssemblyDirectory>
		<_AdditionalTaskAssembly>$(_AdditionalTaskAssemblyDirectory)dotnet-linker.dll</_AdditionalTaskAssembly>
	</PropertyGroup>
	<ItemGroup>
		<_LinkerSubstitutions Include="$(_AdditionalTaskAssemblyDirectory)/substitute-32bits.xml" Condition=" '$(_Is32BitBuild)' == 'true' " />
		<_LinkerSubstitutions Include="$(_AdditionalTaskAssemblyDirectory)/substitute-64bits.xml" Condition=" '$(_Is64BitBuild)' == 'true' " />
	</ItemGroup>
	<Target Name="_ComputeLinkerSubstitutions">
		<PropertyGroup>
			<_LinkerSubstitutionsCommand>@(_LinkerSubstitutions -> '--substitutions %(FullPath)', '%0a')</_LinkerSubstitutionsCommand>
		</PropertyGroup>
	</Target>
	<Target Name="_SelectAssembliesToLink">
		<ItemGroup>
			<ResolvedFileToPublish Update="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.Filename)%(ResolvedFileToPublish.Extension)' == '$(_PlatformAssemblyName).dll'">
				<!-- This makes it so that the platform assembly isn't treated as a root assembly -->
				<IsTrimmable>true</IsTrimmable>
			</ResolvedFileToPublish>

			<_AssembliesToLink Include="@(ResolvedFileToPublish.Filename)" Condition="'$(MtouchLink)' == 'full' Or '$(MtouchLink)' == '' " />
			<!-- Can't link the platform assembly due to https://github.com/mono/linker/issues/1108 -->
			<!-- <_AssembliesToLink Include="$(_PlatformAssemblyName)" Condition="'$(MtouchLink)' == 'sdkonly' " /> -->
		</ItemGroup>
	</Target>
	<Target Name="_ComputeLinkerArguments" DependsOnTargets="_ComputeLinkerSubstitutions;_SelectAssembliesToLink;">
		<PropertyGroup>
			<!-- FIXME: using the _ExtraTrimmerArgs variable, it's used in Microsoft.NET.ILLink.targets, but we'll have to move to official MSBuild properties eventually -->

			<!-- link the core assemblies when using 'sdkonly' -->
			<!-- linksdk doesn't work because of https://github.com/mono/linker/issues/1107 -->
			<!-- <_ExtraTrimmerArgs Condition="'$(MtouchLink)' == 'sdkonly'">$(_ExtraTrimmerArgs) -c link</_ExtraTrimmerArgs> -->

			<!-- make the output verbose to see what the linker is doing. FIXME: make dependent upon verbosity level -->
			<_ExtraTrimmerArgs>$(_ExtraTrimmerArgs) --verbose</_ExtraTrimmerArgs>

			<!-- we don't want to ignore stuff we can't find -->
			<_ExtraTrimmerArgs>$(_ExtraTrimmerArgs) --skip-unresolved false</_ExtraTrimmerArgs>

			<!-- add any linker substitution files we might have -->
			<_ExtraTrimmerArgs>$(_ExtraTrimmerArgs) $(_LinkerSubstitutionsCommand)</_ExtraTrimmerArgs>

			<!-- due to https://github.com/mono/linker/issues/1108 we have to copy all assemblies :/ -->
			<_ExtraTrimmerArgs>$(_ExtraTrimmerArgs) -c copy</_ExtraTrimmerArgs>

			<!-- add our custom steps -->
			<_ExtraTrimmerArgs>$(_ExtraTrimmerArgs) --custom-step MonoTouch.Tuner.ProcessExportedFields,$(_AdditionalTaskAssembly)</_ExtraTrimmerArgs>

			<_CustomLinkerOptionsFile>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)custom-linker-options.txt'))</_CustomLinkerOptionsFile>
			<_CustomLinkerOptions>
				Platform=$(_PlatformName)
				PlatformAssembly=$(_PlatformAssemblyName).dll
				MtouchLink=$(MtouchLink)
			</_CustomLinkerOptions>
		</PropertyGroup>

		<SetEnvironmentVariable Name="CUSTOM_LINKER_OPTIONS_FILE" Value="$(_CustomLinkerOptionsFile)" />
		<WriteLinesToFile File="$(_CustomLinkerOptionsFile)" Lines="$(_CustomLinkerOptions)" Overwrite="true" />
	</Target>
	<Target Name="_ExtractNativeLibrariesFromBindingAssemblies">
	</Target>

	<PropertyGroup Condition=" '$(_PlatformName)' != 'macOS' ">
		<_EarlyAppBundleTasksDependsOn>
			$(_PlatforName);
			_CollectBundleResources;
			_OptimizePngImages;
			_OptimizePropertyLists;
			_OptimizeLocalizationFiles;
			_PackLibraryResources;
			_UnpackLibraryResources;
			_GenerateBundleName;
			_DetectAppManifest;
			_DetectSigningIdentity;
			_CopyResourcesToBundle;
			_CreateAssetPackManifest;
			_SmeltMetal;
			_ForgeMetal;
			_TemperMetal;
			_CompileCoreMLModels;
			_PrepareResourceRules;
			_CompileEntitlements;
			_CompileAppManifest;
			_GetNativeExecutableName;
			_ParseExtraMtouchArgs;
		</_EarlyAppBundleTasksDependsOn>
		<_LateAppBundleTasksDependsOn>
			_CompileITunesMetadata;
			_CollectITunesArtwork;
			_CopyITunesArtwork;
			_CreateDebugSettings;
			_CreateDebugConfiguration;
			_CreatePkgInfo;
			_CopyAppExtensionsToBundle;
			_CopyWatchOS1AppsToBundle;
			_CopyWatchOS2AppsToBundle;
			_ReadAppExtensionDebugSymbolProperties;
			_GenerateAppExtensionDebugSymbols;
			_PrepareDebugSymbolGeneration;
			_GenerateDebugSymbols;
			_ValidateAppBundle;
		</_LateAppBundleTasksDependsOn>
	</PropertyGroup>

	<PropertyGroup Condition=" '$(_PlatformName)' == 'macOS' ">
		<_EarlyAppBundleTasksDependsOn>
			_CollectBundleResources;
			_PackLibraryResources;
			_UnpackLibraryResources;
			_GenerateBundleName;
			_DetectSigningIdentity;
			_CopyContentToBundle;
			_SmeltMetal;
			_ForgeMetal;
			_TemperMetal;
			_CompileEntitlements;
			_CompileAppManifest;
		</_EarlyAppBundleTasksDependsOn>
		<_LateAppBundleTasksDependsOn>
			_CreatePkgInfo;
			_CopyAppExtensionsToBundle;
		</_LateAppBundleTasksDependsOn>
	</PropertyGroup>

	<!-- App bundle creation tasks -->
	<Target Name="_EarlyAppBundleTasks" DependsOnTargets="$(_EarlyAppBundleTasksDependsOn)" />
	<Target Name="_LateAppBundleTasks" DependsOnTargets="$(_LateAppBundleTasksDependsOn)" />

	<Target Name="_PostProcessAssemblies" DependsOnTargets="_GenerateRegistrarCode;_GeneratePInvokeWrapperCode;_CompilePInvokeWrappers" />
	<Target Name="_PreAOTCompile" DependsOnTargets="_SetVariables">
		<Copy SourceFiles="@(_AssembliesToAOT)" DestinationFolder="$(_AOTInputDirectory)" />
	</Target>
	<Target Name="_AOTCompile"
			Condition="'$(_SdkIsSimulator)' != 'true'"
			DependsOnTargets="_SetVariables;_PreAOTCompile;"
			Inputs="@(_AssembliesToAOT)"
			Outputs="@(_AssembliesToAOT->'$(_AOTOutputDirectory)%(Filename)%(Extension).s')">
		<Error Text="Files to AOT (which hasn't been implemented): @(_AssembliesToAOT) " />
	</Target>
	<Target Name="_PostProcessAOTCompilation" DependsOnTargets="_BuildMSymDirectories;_StripManagedAssemblies;_AOTCompile;">
	</Target>
	<Target Name="_PreProcessNativeLinker" DependsOnTargets="_SelectExecutableOutputMode;_CompileLauncher;_PostProcessAOTCompilation" />
	<Target Name="_PostProcessNativeLinker" DependsOnTargets="_ComputeOutputLocation;_CreateUserFrameworks;_BuildDSymDirectories;_StripNativeCode;"/>

	<Target Name="_GenerateRegistrarCode">
	</Target>

	<Target Name="_GeneratePInvokeWrapperCode">
	</Target>

	<Target Name="_CompilePInvokeWrappers">
	</Target>

	<Target Name="_BuildMSymDirectories">
	</Target>

	<Target Name="_StripManagedAssemblies">
	</Target>

	<Target Name="_SetVariables">
		<PropertyGroup>
			<_LibMonoName>libmono.a</_LibMonoName>
			<_MonoLibDir Condition="'%(DestinationSubPath)' == '$(_LibMonoName)'">@(RuntimePackAsset -> '%(RootDir)%(Directory)')</_MonoLibDir>

			<_AOTCompiler>$(_MonoLibDir)/cross/mono-aot-cross</_AOTCompiler>

			<_IntermediateNativeLibraryDir>$(IntermediateOutputPath)nativelibraries/</_IntermediateNativeLibraryDir>
			<_AOTInputDirectory>$(_IntermediateNativeLibraryDir)aot-input/</_AOTInputDirectory>
			<_AOTOutputDirectory>$(_IntermediateNativeLibraryDir)</_AOTOutputDirectory>
		</PropertyGroup>
		<ItemGroup>
			<_AssembliesToAOT Include="@(ResolvedFileToPublish)" Condition="'%(Extension)' == '.dll' Or '%(Extension)' == '.exe' ">
				<_AOTOutputDirectory>$(_IntermediateNativeLibraryDir)</_AOTOutputDirectory>
			</_AssembliesToAOT>

			<_NativeDynamicLibrary Include="@(ResolvedFileToPublish)" Condition="'%(Extension)' == '.dylib' And '%(RootDir)%(Directory)' == '$(_MonoLibDir)'" />
			<_NativeDynamicLibrary Update="@(_NativeDynamicLibrary)">
				<LibraryName>$([System.String]::new('%(Filename)').Substring(3))</LibraryName>
			</_NativeDynamicLibrary>
			<_NativeDynamicLibraryPathAll Include="@(_NativeDynamicLibrary -> '%(RootDir)%(Directory)')" />
			<_NativeDynamicLibraryPath Include="@(_NativeDynamicLibraryPathAll->Distinct ())" />
		</ItemGroup>
	</Target>

	<Target Name="_CompileLauncher" DependsOnTargets="_SetVariables;_UpdateDynamicLibraryId">
		<!-- FIXME: Use _NativeDynamicLibrary instead of _NativeDynamicLibraryFixed -->
		<CompileExecutable
			SessionId="$(BuildSessionId)"

			Architecture="$(MtouchArch)"
			AppBundlePath="$(_AppBundlePath)"
			AssemblyName="$(AssemblyName)"
			IsAppExtension="$(IsAppExtension)"
			IsDebug="$(MtouchDebug)"
			NativeDynamicLibraries="@(_NativeDynamicLibraryFixed)"
			OutputPath="$(_AppBundlePath)$(_AppBundleName)"
			ResolvedFileToPublish="@(ResolvedFileToPublish)"
			RuntimePackAsset="@(RuntimePackAsset)"
			SdkDevPath="$(_SdkDevPath)"
			SdkIsSimulator="$(_SdkIsSimulator)"
			SdkRoot="$(_SdkRoot)"
			SdkVersion="$(_SdkVersion)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
		/>
	</Target>

	<Target Name="_ComputeOutputLocation">
		<!-- Put .dll, .pdb, .exe and .dylib in the .app -->
		<ItemGroup>
			<ResolvedFileToPublish
				Update="@(ResolvedFileToPublish)"
				RelativePath="$([MSBuild]::MakeRelative($(MSBuildProjectDirectory)$(PublishDir),$(MSBuildProjectDirectory)$(_AppBundlePath)))\%(Filename)%(Extension)"
				Condition=" '%(Extension)' == '.dll' Or '%(Extension)' == '.pdb' Or '$(Extension)' == '.exe' Or '%(Extension)' == '.dylib'" />
			<Whatever Include="@(ResolvedFileToPublish)" />
			<Whatever2 Include="@(ResolvedFileToPublish)" Condition="'%(Extension)' == '.dylib'" />
		</ItemGroup>
	</Target>

	<!-- The .dylibs shipped with mono comes with the original identity:

	$ otool -l ~/.nuget/packages/microsoft.netcore.app.runtime.ios-x64/5.0.0-*/runtimes/ios-x64/native/libSystem.IO.Compression.Native.dylib | grep LC_ID_DYLIB -A 2
          cmd LC_ID_DYLIB
      cmdsize 184
         name /Users/runner/runners/2.165.2/work/1/s/artifacts/obj/native/netcoreapp5.0-iOS-Release-x64/System.IO.Compression.Native/libSystem.IO.Compression.Native.dylib (offset 24)

	This doesn't work after linking with these libraries, so this must be fixed to be @executable_path/. Eventually mono will ship dylibs we don't have to fix (https://github.com/dotnet/runtime/issues/34637).
	-->
	<Target Name="_UpdateDynamicLibraryId" DependsOnTargets="_SetVariables" Inputs="@(_NativeDynamicLibrary)" Outputs="@(_NativeDynamicLibrary -> '$(_IntermediateNativeLibraryDir)%(Filename)%(Extension)')">
		<!-- install_name_tool modifies the file in-place, so copy it first to a temporary directory before we fix it -->
		<Copy SourceFiles="%(_NativeDynamicLibrary.FullPath)" DestinationFolder="$(_IntermediateNativeLibraryDir)" />
		<Exec Command="install_name_tool -id @executable_path/%(_NativeDynamicLibrary.Filename)%(_NativeDynamicLibrary.Extension) $(_IntermediateNativeLibraryDir)%(_NativeDynamicLibrary.Filename)%(_NativeDynamicLibrary.Extension)" />
		<ItemGroup>
			<_NativeDynamicLibraryFixed Include="@(_NativeDynamicLibrary -> '$(_IntermediateNativeLibraryDir)%(Filename)%(Extension)')" />
			<_NativeDynamicLibraryPath Remove="@(_NativeDynamicLibrary -> '%(RootDir)%(Directory)')" />
			<_NativeDynamicLibraryPath Include="@(_NativeDynamicLibraryFixed -> '%(RootDir)%(Directory)')" />
			<ResolvedFileToPublish Remove="@(_NativeDynamicLibrary)" />
			<ResolvedFileToPublish Include="@(_NativeDynamicLibraryFixed)" />
		</ItemGroup>
	</Target>

	<Target Name="_CreateUserFrameworks">
	</Target>

	<Target Name="_BuildDSymDirectories">
	</Target>

	<Target Name="_StripNativeCode">
	</Target>

	<Target Name="_SelectExecutableOutputMode">
	</Target>

	<Target Name="Install" DependsOnTargets="_DetectSdkLocations;_GenerateBundleName">
		<Mlaunch
			SessionId="$(BuildSessionId)"
			AppBundlePath="$([System.IO.Path]::GetFullPath('$(_AppBundlePath)'))"
			DeviceName="$(_DeviceName)"
			InstallApp="$(_AppBundlePath)"
			SdkIsSimulator="$(_SdkIsSimulator)"
			SdkVersion="$(_SdkVersion)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
			ToolsDirectory="$(_XamarinSdkToolsDirectory)"
		/>
	</Target>

	<Target Name="Run" DependsOnTargets="_DetectSdkLocations;_GenerateBundleName">
		<PropertyGroup>
			<!-- capture output by default -->
			<_MlaunchCaptureOutput Condition=" '$(_MlaunchCaptureOutput)' == '' ">true</_MlaunchCaptureOutput>
			<!-- wait for exit by default -->
			<_MlaunchWaitForExit Condition=" '$(_MlaunchWaitForExit)' == '' ">true</_MlaunchWaitForExit>
			<!-- don't set standard output/error path, the task will by default write to stdout/stderr -->
		</PropertyGroup>
		<Mlaunch
			SessionId="$(BuildSessionId)"
			AppBundlePath="$([System.IO.Path]::GetFullPath('$(_AppBundlePath)'))"
			CaptureOutput="$(_MlaunchCaptureOutput)"
			DeviceName="$(_DeviceName)"
			LaunchApp="$(_AppBundlePath)"
			SdkIsSimulator="$(_SdkIsSimulator)"
			SdkVersion="$(_SdkVersion)"
			StandardErrorPath="$(_MlaunchStandardErrorPath)"
			StandardOutputPath="$(_MlaunchStandardOutputPath)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
			ToolsDirectory="$(_XamarinSdkToolsDirectory)"
			WaitForExit="$(_MlaunchWaitForExit)"
		/>
	</Target>

	<!-- Project types and how do we distinguish between them

									  OutputType   Custom variable
		==================================================================
		iOS Executable Project        Exe
		iOS App Extension Project     Library      IsAppExtension
		iOS Binding Project           Library      IsBindingProject
		iOS Class Library Project     Library

		tvOS Executable Project       Exe
		tvOS App Extension Project    Library      IsAppExtension
		tvOS Binding Project          Library      IsBindingProject
		tvOS Class Library Project    Library

		watchOS App Project           Library      IsWatchOSApp
		watchOS App Extension Project Library      IsAppExtension
		watchOS Binding Project       Library      IsBindingProject
		watchOS Class Library Project Library

		macOS Executable Project        Exe
		macOS App Extension Project     Library      IsAppExtension
		macOS Binding Project           Library      IsBindingProject
		macOS Class Library Project     Library

	-->

	<PropertyGroup>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Exe'">iOSExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">iOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">iOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Library'">iOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Exe'">tvOSExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">tvOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">tvOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Library'">tvOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS' And '$(IsWatchOSApp)' != ''">watchOSAppProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS' And '$(IsAppExtension)' != ''">watchOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS' And '$(IsBindingProject)' != ''">watchOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS'">watchOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Exe'">macOSExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">macOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">macOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Library'">macOSClassLibrary</_ProjectType>

		<_ProjectLanguage>$(Language)</_ProjectLanguage>
		<_ProjectLanguage Condition="'$(_ProjectLanguage)' == '' Or '$(_ProjectLanguage)' == 'C#' ">CSharp</_ProjectLanguage>
		<_ProjectLanguage Condition="'$(_ProjectLanguage)' == 'F#' ">FSharp</_ProjectLanguage>
	</PropertyGroup>

	<!-- Import existing targets -->

	<PropertyGroup>
		<_TargetsDiriOS>$(XamarinSdkRootDirectory)\tools\msbuild\iOS</_TargetsDiriOS>
		<_TargetsDirtvOS>$(XamarinSdkRootDirectory)\tools\msbuild\TVOS</_TargetsDirtvOS>
		<_TargetsDirwatchOS>$(XamarinSdkRootDirectory)\tools\msbuild\WatchOS</_TargetsDirwatchOS>
		<_TargetsDirmacOS>$(XamarinSdkRootDirectory)\tools\msbuild</_TargetsDirmacOS>
	</PropertyGroup>

	<Import Project="$(_TargetsDir)Xamarin.iOS.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'iOSExecutableProject' Or '$(_ProjectType)' == 'iOSClassLibrary' " />
	<Import Project="$(_TargetsDir)Xamarin.iOS.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'iOSAppExtensionProject' " />
	<Import Project="$(_TargetsDir)Xamarin.iOS.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'iOSBindingProject' " />

	<Import Project="$(_TargetsDir)Xamarin.TVOS.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'tvOSExecutableProject' Or '$(_ProjectType)' == 'tvOSClassLibrary' " />
	<Import Project="$(_TargetsDir)Xamarin.TVOS.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'tvOSAppExtensionProject' " />
	<Import Project="$(_TargetsDir)Xamarin.TVOS.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'tvOSBindingProject' " />

	<Import Project="$(_TargetsDir)Xamarin.WatchOS.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'watchOSClassLibrary' " />
	<Import Project="$(_TargetsDir)Xamarin.WatchOS.App.$(_ProjectLanguage).targets"          Condition="'$(_ProjectType)' == 'watchOSAppProject' " />
	<Import Project="$(_TargetsDir)Xamarin.WatchOS.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'watchOSAppExtensionProject' " />
	<Import Project="$(_TargetsDir)Xamarin.WatchOS.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'watchOSBindingProject' " />

	<Import Project="$(_TargetsDir)Xamarin.Mac.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'macOSExecutableProject' Or '$(_ProjectType)' == 'macOSClassLibrary' " />
	<Import Project="$(_TargetsDir)Xamarin.Mac.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'macOSAppExtensionProject' " />
	<Import Project="$(_TargetsDir)Xamarin.Mac.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'macOSBindingProject' " />


	<Target Name="_CompileToNative" /> <!-- sledge hammer approach -->
</Project>
