//
// SecCertificate Unit Tests
//
// Authors:
//	Sebastien Pouliot  <sebastien@xamarin.com>
//
// Copyright 2012 Xamarin Inc.
//

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

using CoreFoundation;
using Foundation;
using Security;
using ObjCRuntime;
using NUnit.Framework;

namespace MonoTouchFixtures.Security {

	[TestFixture]
	// we want the test to be available if we use the linker
	[Preserve (AllMembers = true)]
	public class CertificateTest {

		// CN=mail.google.com, O=Google Trust Services LLC, C=US
		static public byte [] mail_google_com = {
			0x30, 0x82, 0x04, 0x9c, 0x30, 0x82, 0x03, 0x84, 0xa0, 0x03, 0x02, 0x01,
			0x02, 0x02, 0x10, 0x1a, 0x62, 0xa6, 0xe1, 0x84, 0xa6, 0x41, 0x01, 0x09,
			0x47, 0xa4, 0xa7, 0x5b, 0xf3, 0xcc, 0x6f, 0x30, 0x0d, 0x06, 0x09, 0x2a,
			0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x46,
			0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55,
			0x53, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x19,
			0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x54, 0x72, 0x75, 0x73, 0x74,
			0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x4c, 0x4c,
			0x43, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0a,
			0x47, 0x54, 0x53, 0x20, 0x43, 0x41, 0x20, 0x31, 0x43, 0x33, 0x30, 0x1e,
			0x17, 0x0d, 0x32, 0x33, 0x31, 0x30, 0x32, 0x33, 0x31, 0x31, 0x32, 0x35,
			0x30, 0x34, 0x5a, 0x17, 0x0d, 0x32, 0x34, 0x30, 0x31, 0x31, 0x35, 0x31,
			0x31, 0x32, 0x35, 0x30, 0x33, 0x5a, 0x30, 0x1a, 0x31, 0x18, 0x30, 0x16,
			0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0f, 0x6d, 0x61, 0x69, 0x6c, 0x2e,
			0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x59,
			0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06,
			0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00,
			0x04, 0x6a, 0x2b, 0x52, 0xee, 0x9c, 0x81, 0xa0, 0x46, 0xfb, 0xe9, 0xcf,
			0x93, 0x67, 0x4b, 0xd7, 0x8f, 0x9b, 0x92, 0xd6, 0x42, 0xa6, 0xf6, 0xf2,
			0xab, 0xa4, 0x60, 0x35, 0x10, 0xfe, 0x6b, 0x34, 0x87, 0xb5, 0xd9, 0xd0,
			0xba, 0x49, 0xad, 0xc5, 0x76, 0x3a, 0xb4, 0xe9, 0x72, 0x81, 0xa1, 0xb2,
			0x43, 0x06, 0x4f, 0x59, 0x98, 0xf5, 0x67, 0x7c, 0xe6, 0xfc, 0x72, 0xcc,
			0x58, 0x22, 0x96, 0x1b, 0xfc, 0xa3, 0x82, 0x02, 0x7b, 0x30, 0x82, 0x02,
			0x77, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04,
			0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x13, 0x06, 0x03, 0x55, 0x1d, 0x25,
			0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,
			0x03, 0x01, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff,
			0x04, 0x02, 0x30, 0x00, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04,
			0x16, 0x04, 0x14, 0x3f, 0x4d, 0x83, 0xe5, 0xa9, 0xdd, 0x0e, 0x65, 0xff,
			0xd1, 0x21, 0x42, 0xdd, 0x8f, 0xb5, 0x0f, 0x65, 0x0b, 0xba, 0x27, 0x30,
			0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
			0x8a, 0x74, 0x7f, 0xaf, 0x85, 0xcd, 0xee, 0x95, 0xcd, 0x3d, 0x9c, 0xd0,
			0xe2, 0x46, 0x14, 0xf3, 0x71, 0x35, 0x1d, 0x27, 0x30, 0x6a, 0x06, 0x08,
			0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x5e, 0x30, 0x5c,
			0x30, 0x27, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01,
			0x86, 0x1b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x63, 0x73,
			0x70, 0x2e, 0x70, 0x6b, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x2f, 0x67,
			0x74, 0x73, 0x31, 0x63, 0x33, 0x30, 0x31, 0x06, 0x08, 0x2b, 0x06, 0x01,
			0x05, 0x05, 0x07, 0x30, 0x02, 0x86, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a,
			0x2f, 0x2f, 0x70, 0x6b, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x2f, 0x72,
			0x65, 0x70, 0x6f, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x67, 0x74,
			0x73, 0x31, 0x63, 0x33, 0x2e, 0x64, 0x65, 0x72, 0x30, 0x2c, 0x06, 0x03,
			0x55, 0x1d, 0x11, 0x04, 0x25, 0x30, 0x23, 0x82, 0x0f, 0x6d, 0x61, 0x69,
			0x6c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
			0x82, 0x10, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
			0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x21, 0x06, 0x03, 0x55, 0x1d,
			0x20, 0x04, 0x1a, 0x30, 0x18, 0x30, 0x08, 0x06, 0x06, 0x67, 0x81, 0x0c,
			0x01, 0x02, 0x01, 0x30, 0x0c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01,
			0xd6, 0x79, 0x02, 0x05, 0x03, 0x30, 0x3c, 0x06, 0x03, 0x55, 0x1d, 0x1f,
			0x04, 0x35, 0x30, 0x33, 0x30, 0x31, 0xa0, 0x2f, 0xa0, 0x2d, 0x86, 0x2b,
			0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x63, 0x72, 0x6c, 0x73, 0x2e,
			0x70, 0x6b, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x2f, 0x67, 0x74, 0x73,
			0x31, 0x63, 0x33, 0x2f, 0x7a, 0x64, 0x41, 0x54, 0x74, 0x30, 0x45, 0x78,
			0x5f, 0x46, 0x6b, 0x2e, 0x63, 0x72, 0x6c, 0x30, 0x82, 0x01, 0x05, 0x06,
			0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0xd6, 0x79, 0x02, 0x04, 0x02, 0x04,
			0x81, 0xf6, 0x04, 0x81, 0xf3, 0x00, 0xf1, 0x00, 0x77, 0x00, 0x48, 0xb0,
			0xe3, 0x6b, 0xda, 0xa6, 0x47, 0x34, 0x0f, 0xe5, 0x6a, 0x02, 0xfa, 0x9d,
			0x30, 0xeb, 0x1c, 0x52, 0x01, 0xcb, 0x56, 0xdd, 0x2c, 0x81, 0xd9, 0xbb,
			0xbf, 0xab, 0x39, 0xd8, 0x84, 0x73, 0x00, 0x00, 0x01, 0x8b, 0x5c, 0x7e,
			0xf1, 0x5d, 0x00, 0x00, 0x04, 0x03, 0x00, 0x48, 0x30, 0x46, 0x02, 0x21,
			0x00, 0xa9, 0xd2, 0x7a, 0xb9, 0x47, 0x8e, 0x18, 0x5a, 0x94, 0xfd, 0x5d,
			0x82, 0xa6, 0x0e, 0x80, 0x51, 0x70, 0xb9, 0xed, 0xed, 0x9a, 0x17, 0x13,
			0x69, 0xa0, 0xc8, 0x8d, 0x90, 0x22, 0x0c, 0xe1, 0x26, 0x02, 0x21, 0x00,
			0xf7, 0x03, 0xfa, 0xc5, 0x0e, 0xda, 0xa1, 0xf3, 0x69, 0x99, 0x0d, 0x28,
			0xa8, 0xbd, 0xfe, 0xb8, 0x4a, 0xa0, 0x9a, 0xbe, 0x88, 0x4c, 0xa7, 0x4b,
			0x58, 0x32, 0x16, 0x9d, 0x43, 0x09, 0xd0, 0xae, 0x00, 0x76, 0x00, 0x76,
			0xff, 0x88, 0x3f, 0x0a, 0xb6, 0xfb, 0x95, 0x51, 0xc2, 0x61, 0xcc, 0xf5,
			0x87, 0xba, 0x34, 0xb4, 0xa4, 0xcd, 0xbb, 0x29, 0xdc, 0x68, 0x42, 0x0a,
			0x9f, 0xe6, 0x67, 0x4c, 0x5a, 0x3a, 0x74, 0x00, 0x00, 0x01, 0x8b, 0x5c,
			0x7e, 0xf1, 0x65, 0x00, 0x00, 0x04, 0x03, 0x00, 0x47, 0x30, 0x45, 0x02,
			0x20, 0x39, 0x18, 0x32, 0xac, 0x45, 0x99, 0xe3, 0xea, 0xbf, 0x13, 0xa4,
			0xdc, 0xe7, 0x81, 0x66, 0x5c, 0x8b, 0x3b, 0x98, 0x89, 0x51, 0xbb, 0x3f,
			0x97, 0x1f, 0x9b, 0xf8, 0xdb, 0x1f, 0x83, 0xb1, 0xbc, 0x02, 0x21, 0x00,
			0xff, 0xbd, 0x37, 0x01, 0xfb, 0x0e, 0xe3, 0xbf, 0xe2, 0x88, 0x0c, 0x99,
			0xc2, 0x70, 0x1d, 0x29, 0x4f, 0x41, 0xc4, 0x53, 0x35, 0x18, 0x99, 0xbe,
			0xb5, 0x31, 0xa2, 0xa4, 0x56, 0x97, 0x2a, 0x15, 0x30, 0x0d, 0x06, 0x09,
			0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03,
			0x82, 0x01, 0x01, 0x00, 0x3e, 0xa5, 0xb5, 0xcd, 0x09, 0xa8, 0x78, 0x53,
			0x02, 0x35, 0x52, 0xb8, 0x6f, 0xd5, 0x5e, 0x62, 0x51, 0x68, 0x90, 0xec,
			0x0f, 0xd1, 0x94, 0xdb, 0xe3, 0x39, 0x37, 0x98, 0x37, 0x52, 0x01, 0x41,
			0xa0, 0xb5, 0xde, 0x6e, 0xb7, 0xc9, 0x14, 0xec, 0x4d, 0xfc, 0x7e, 0x35,
			0xd9, 0x11, 0xc6, 0xc6, 0xac, 0xc5, 0xf6, 0xad, 0x99, 0x9a, 0x3f, 0x1c,
			0xf6, 0xcc, 0x10, 0x46, 0xdf, 0x55, 0x96, 0x70, 0xd9, 0x0f, 0x03, 0x74,
			0xd1, 0xc7, 0xde, 0x89, 0xf8, 0x2f, 0x80, 0x00, 0x7e, 0x74, 0x35, 0x51,
			0xcf, 0x60, 0xfc, 0x3b, 0xa3, 0x4d, 0x75, 0x48, 0xfe, 0x9b, 0x53, 0x4b,
			0x62, 0x92, 0x85, 0x96, 0x2c, 0x91, 0xbf, 0x49, 0xbb, 0x30, 0xc9, 0x9f,
			0x1a, 0xd9, 0x5a, 0xaa, 0x88, 0x85, 0xb3, 0x0e, 0x44, 0x79, 0x68, 0xd1,
			0xc1, 0x68, 0xa8, 0x60, 0x3c, 0x1a, 0x1c, 0xb3, 0x3b, 0x74, 0x34, 0x38,
			0x5d, 0xc2, 0xc7, 0x63, 0x1e, 0xac, 0x67, 0xac, 0x4a, 0xeb, 0xb3, 0x5f,
			0x23, 0x77, 0x5a, 0xaa, 0xcb, 0xd4, 0x13, 0xb0, 0x3c, 0x86, 0x5e, 0x1f,
			0x2f, 0x8f, 0x95, 0x0f, 0xed, 0xfd, 0x9a, 0x53, 0x9f, 0x3e, 0x82, 0x3f,
			0xab, 0x3a, 0xb8, 0x71, 0xfc, 0x15, 0x05, 0xa6, 0x8f, 0x25, 0xc2, 0x03,
			0x27, 0x78, 0x96, 0x2e, 0x43, 0x7d, 0x28, 0x68, 0x65, 0xe5, 0xce, 0x2f,
			0xd5, 0x47, 0xd1, 0x76, 0x9f, 0xfc, 0x31, 0x75, 0x4e, 0xf8, 0xed, 0x25,
			0x20, 0x8e, 0xda, 0x8c, 0x0f, 0x83, 0xc3, 0x6b, 0x16, 0x0e, 0x68, 0x30,
			0xb2, 0x48, 0x6e, 0x0d, 0x2f, 0x30, 0xf8, 0x03, 0x1e, 0x84, 0x8b, 0x3f,
			0x72, 0x0d, 0x45, 0xfd, 0xe6, 0xe0, 0x72, 0xfe, 0x83, 0x78, 0x15, 0x02,
			0xd7, 0x3b, 0x80, 0xe0, 0x5e, 0xa3, 0xd0, 0x2a, 0x24, 0x80, 0x1a, 0xe8,
			0xab, 0xa3, 0x94, 0x3d, 0x18, 0x78, 0x66, 0xcb,  };

		// C=US, O=Google Trust Services LLC, CN=GTS Root R1
		public static byte [] gts_root_r1 = {
			0x30, 0x82, 0x05, 0x57, 0x30, 0x82, 0x03, 0x3f, 0xa0, 0x03, 0x02, 0x01,
			0x02, 0x02, 0x0d, 0x02, 0x03, 0xe5, 0x93, 0x6f, 0x31, 0xb0, 0x13, 0x49,
			0x88, 0x6b, 0xa2, 0x17, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
			0xf7, 0x0d, 0x01, 0x01, 0x0c, 0x05, 0x00, 0x30, 0x47, 0x31, 0x0b, 0x30,
			0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x22,
			0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x19, 0x47, 0x6f, 0x6f,
			0x67, 0x6c, 0x65, 0x20, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x53, 0x65,
			0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x4c, 0x4c, 0x43, 0x31, 0x14,
			0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0b, 0x47, 0x54, 0x53,
			0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x52, 0x31, 0x30, 0x1e, 0x17, 0x0d,
			0x31, 0x36, 0x30, 0x36, 0x32, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
			0x5a, 0x17, 0x0d, 0x33, 0x36, 0x30, 0x36, 0x32, 0x32, 0x30, 0x30, 0x30,
			0x30, 0x30, 0x30, 0x5a, 0x30, 0x47, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
			0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x22, 0x30, 0x20, 0x06,
			0x03, 0x55, 0x04, 0x0a, 0x13, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x20, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69,
			0x63, 0x65, 0x73, 0x20, 0x4c, 0x4c, 0x43, 0x31, 0x14, 0x30, 0x12, 0x06,
			0x03, 0x55, 0x04, 0x03, 0x13, 0x0b, 0x47, 0x54, 0x53, 0x20, 0x52, 0x6f,
			0x6f, 0x74, 0x20, 0x52, 0x31, 0x30, 0x82, 0x02, 0x22, 0x30, 0x0d, 0x06,
			0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00,
			0x03, 0x82, 0x02, 0x0f, 0x00, 0x30, 0x82, 0x02, 0x0a, 0x02, 0x82, 0x02,
			0x01, 0x00, 0xb6, 0x11, 0x02, 0x8b, 0x1e, 0xe3, 0xa1, 0x77, 0x9b, 0x3b,
			0xdc, 0xbf, 0x94, 0x3e, 0xb7, 0x95, 0xa7, 0x40, 0x3c, 0xa1, 0xfd, 0x82,
			0xf9, 0x7d, 0x32, 0x06, 0x82, 0x71, 0xf6, 0xf6, 0x8c, 0x7f, 0xfb, 0xe8,
			0xdb, 0xbc, 0x6a, 0x2e, 0x97, 0x97, 0xa3, 0x8c, 0x4b, 0xf9, 0x2b, 0xf6,
			0xb1, 0xf9, 0xce, 0x84, 0x1d, 0xb1, 0xf9, 0xc5, 0x97, 0xde, 0xef, 0xb9,
			0xf2, 0xa3, 0xe9, 0xbc, 0x12, 0x89, 0x5e, 0xa7, 0xaa, 0x52, 0xab, 0xf8,
			0x23, 0x27, 0xcb, 0xa4, 0xb1, 0x9c, 0x63, 0xdb, 0xd7, 0x99, 0x7e, 0xf0,
			0x0a, 0x5e, 0xeb, 0x68, 0xa6, 0xf4, 0xc6, 0x5a, 0x47, 0x0d, 0x4d, 0x10,
			0x33, 0xe3, 0x4e, 0xb1, 0x13, 0xa3, 0xc8, 0x18, 0x6c, 0x4b, 0xec, 0xfc,
			0x09, 0x90, 0xdf, 0x9d, 0x64, 0x29, 0x25, 0x23, 0x07, 0xa1, 0xb4, 0xd2,
			0x3d, 0x2e, 0x60, 0xe0, 0xcf, 0xd2, 0x09, 0x87, 0xbb, 0xcd, 0x48, 0xf0,
			0x4d, 0xc2, 0xc2, 0x7a, 0x88, 0x8a, 0xbb, 0xba, 0xcf, 0x59, 0x19, 0xd6,
			0xaf, 0x8f, 0xb0, 0x07, 0xb0, 0x9e, 0x31, 0xf1, 0x82, 0xc1, 0xc0, 0xdf,
			0x2e, 0xa6, 0x6d, 0x6c, 0x19, 0x0e, 0xb5, 0xd8, 0x7e, 0x26, 0x1a, 0x45,
			0x03, 0x3d, 0xb0, 0x79, 0xa4, 0x94, 0x28, 0xad, 0x0f, 0x7f, 0x26, 0xe5,
			0xa8, 0x08, 0xfe, 0x96, 0xe8, 0x3c, 0x68, 0x94, 0x53, 0xee, 0x83, 0x3a,
			0x88, 0x2b, 0x15, 0x96, 0x09, 0xb2, 0xe0, 0x7a, 0x8c, 0x2e, 0x75, 0xd6,
			0x9c, 0xeb, 0xa7, 0x56, 0x64, 0x8f, 0x96, 0x4f, 0x68, 0xae, 0x3d, 0x97,
			0xc2, 0x84, 0x8f, 0xc0, 0xbc, 0x40, 0xc0, 0x0b, 0x5c, 0xbd, 0xf6, 0x87,
			0xb3, 0x35, 0x6c, 0xac, 0x18, 0x50, 0x7f, 0x84, 0xe0, 0x4c, 0xcd, 0x92,
			0xd3, 0x20, 0xe9, 0x33, 0xbc, 0x52, 0x99, 0xaf, 0x32, 0xb5, 0x29, 0xb3,
			0x25, 0x2a, 0xb4, 0x48, 0xf9, 0x72, 0xe1, 0xca, 0x64, 0xf7, 0xe6, 0x82,
			0x10, 0x8d, 0xe8, 0x9d, 0xc2, 0x8a, 0x88, 0xfa, 0x38, 0x66, 0x8a, 0xfc,
			0x63, 0xf9, 0x01, 0xf9, 0x78, 0xfd, 0x7b, 0x5c, 0x77, 0xfa, 0x76, 0x87,
			0xfa, 0xec, 0xdf, 0xb1, 0x0e, 0x79, 0x95, 0x57, 0xb4, 0xbd, 0x26, 0xef,
			0xd6, 0x01, 0xd1, 0xeb, 0x16, 0x0a, 0xbb, 0x8e, 0x0b, 0xb5, 0xc5, 0xc5,
			0x8a, 0x55, 0xab, 0xd3, 0xac, 0xea, 0x91, 0x4b, 0x29, 0xcc, 0x19, 0xa4,
			0x32, 0x25, 0x4e, 0x2a, 0xf1, 0x65, 0x44, 0xd0, 0x02, 0xce, 0xaa, 0xce,
			0x49, 0xb4, 0xea, 0x9f, 0x7c, 0x83, 0xb0, 0x40, 0x7b, 0xe7, 0x43, 0xab,
			0xa7, 0x6c, 0xa3, 0x8f, 0x7d, 0x89, 0x81, 0xfa, 0x4c, 0xa5, 0xff, 0xd5,
			0x8e, 0xc3, 0xce, 0x4b, 0xe0, 0xb5, 0xd8, 0xb3, 0x8e, 0x45, 0xcf, 0x76,
			0xc0, 0xed, 0x40, 0x2b, 0xfd, 0x53, 0x0f, 0xb0, 0xa7, 0xd5, 0x3b, 0x0d,
			0xb1, 0x8a, 0xa2, 0x03, 0xde, 0x31, 0xad, 0xcc, 0x77, 0xea, 0x6f, 0x7b,
			0x3e, 0xd6, 0xdf, 0x91, 0x22, 0x12, 0xe6, 0xbe, 0xfa, 0xd8, 0x32, 0xfc,
			0x10, 0x63, 0x14, 0x51, 0x72, 0xde, 0x5d, 0xd6, 0x16, 0x93, 0xbd, 0x29,
			0x68, 0x33, 0xef, 0x3a, 0x66, 0xec, 0x07, 0x8a, 0x26, 0xdf, 0x13, 0xd7,
			0x57, 0x65, 0x78, 0x27, 0xde, 0x5e, 0x49, 0x14, 0x00, 0xa2, 0x00, 0x7f,
			0x9a, 0xa8, 0x21, 0xb6, 0xa9, 0xb1, 0x95, 0xb0, 0xa5, 0xb9, 0x0d, 0x16,
			0x11, 0xda, 0xc7, 0x6c, 0x48, 0x3c, 0x40, 0xe0, 0x7e, 0x0d, 0x5a, 0xcd,
			0x56, 0x3c, 0xd1, 0x97, 0x05, 0xb9, 0xcb, 0x4b, 0xed, 0x39, 0x4b, 0x9c,
			0xc4, 0x3f, 0xd2, 0x55, 0x13, 0x6e, 0x24, 0xb0, 0xd6, 0x71, 0xfa, 0xf4,
			0xc1, 0xba, 0xcc, 0xed, 0x1b, 0xf5, 0xfe, 0x81, 0x41, 0xd8, 0x00, 0x98,
			0x3d, 0x3a, 0xc8, 0xae, 0x7a, 0x98, 0x37, 0x18, 0x05, 0x95, 0x02, 0x03,
			0x01, 0x00, 0x01, 0xa3, 0x42, 0x30, 0x40, 0x30, 0x0e, 0x06, 0x03, 0x55,
			0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x86, 0x30,
			0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,
			0x03, 0x01, 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04,
			0x16, 0x04, 0x14, 0xe4, 0xaf, 0x2b, 0x26, 0x71, 0x1a, 0x2b, 0x48, 0x27,
			0x85, 0x2f, 0x52, 0x66, 0x2c, 0xef, 0xf0, 0x89, 0x13, 0x71, 0x3e, 0x30,
			0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0c,
			0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x9f, 0xaa, 0x42, 0x26, 0xdb,
			0x0b, 0x9b, 0xbe, 0xff, 0x1e, 0x96, 0x92, 0x2e, 0x3e, 0xa2, 0x65, 0x4a,
			0x6a, 0x98, 0xba, 0x22, 0xcb, 0x7d, 0xc1, 0x3a, 0xd8, 0x82, 0x0a, 0x06,
			0xc6, 0xf6, 0xa5, 0xde, 0xc0, 0x4e, 0x87, 0x66, 0x79, 0xa1, 0xf9, 0xa6,
			0x58, 0x9c, 0xaa, 0xf9, 0xb5, 0xe6, 0x60, 0xe7, 0xe0, 0xe8, 0xb1, 0x1e,
			0x42, 0x41, 0x33, 0x0b, 0x37, 0x3d, 0xce, 0x89, 0x70, 0x15, 0xca, 0xb5,
			0x24, 0xa8, 0xcf, 0x6b, 0xb5, 0xd2, 0x40, 0x21, 0x98, 0xcf, 0x22, 0x34,
			0xcf, 0x3b, 0xc5, 0x22, 0x84, 0xe0, 0xc5, 0x0e, 0x8a, 0x7c, 0x5d, 0x88,
			0xe4, 0x35, 0x24, 0xce, 0x9b, 0x3e, 0x1a, 0x54, 0x1e, 0x6e, 0xdb, 0xb2,
			0x87, 0xa7, 0xfc, 0xf3, 0xfa, 0x81, 0x55, 0x14, 0x62, 0x0a, 0x59, 0xa9,
			0x22, 0x05, 0x31, 0x3e, 0x82, 0xd6, 0xee, 0xdb, 0x57, 0x34, 0xbc, 0x33,
			0x95, 0xd3, 0x17, 0x1b, 0xe8, 0x27, 0xa2, 0x8b, 0x7b, 0x4e, 0x26, 0x1a,
			0x7a, 0x5a, 0x64, 0xb6, 0xd1, 0xac, 0x37, 0xf1, 0xfd, 0xa0, 0xf3, 0x38,
			0xec, 0x72, 0xf0, 0x11, 0x75, 0x9d, 0xcb, 0x34, 0x52, 0x8d, 0xe6, 0x76,
			0x6b, 0x17, 0xc6, 0xdf, 0x86, 0xab, 0x27, 0x8e, 0x49, 0x2b, 0x75, 0x66,
			0x81, 0x10, 0x21, 0xa6, 0xea, 0x3e, 0xf4, 0xae, 0x25, 0xff, 0x7c, 0x15,
			0xde, 0xce, 0x8c, 0x25, 0x3f, 0xca, 0x62, 0x70, 0x0a, 0xf7, 0x2f, 0x09,
			0x66, 0x07, 0xc8, 0x3f, 0x1c, 0xfc, 0xf0, 0xdb, 0x45, 0x30, 0xdf, 0x62,
			0x88, 0xc1, 0xb5, 0x0f, 0x9d, 0xc3, 0x9f, 0x4a, 0xde, 0x59, 0x59, 0x47,
			0xc5, 0x87, 0x22, 0x36, 0xe6, 0x82, 0xa7, 0xed, 0x0a, 0xb9, 0xe2, 0x07,
			0xa0, 0x8d, 0x7b, 0x7a, 0x4a, 0x3c, 0x71, 0xd2, 0xe2, 0x03, 0xa1, 0x1f,
			0x32, 0x07, 0xdd, 0x1b, 0xe4, 0x42, 0xce, 0x0c, 0x00, 0x45, 0x61, 0x80,
			0xb5, 0x0b, 0x20, 0x59, 0x29, 0x78, 0xbd, 0xf9, 0x55, 0xcb, 0x63, 0xc5,
			0x3c, 0x4c, 0xf4, 0xb6, 0xff, 0xdb, 0x6a, 0x5f, 0x31, 0x6b, 0x99, 0x9e,
			0x2c, 0xc1, 0x6b, 0x50, 0xa4, 0xd7, 0xe6, 0x18, 0x14, 0xbd, 0x85, 0x3f,
			0x67, 0xab, 0x46, 0x9f, 0xa0, 0xff, 0x42, 0xa7, 0x3a, 0x7f, 0x5c, 0xcb,
			0x5d, 0xb0, 0x70, 0x1d, 0x2b, 0x34, 0xf5, 0xd4, 0x76, 0x09, 0x0c, 0xeb,
			0x78, 0x4c, 0x59, 0x05, 0xf3, 0x33, 0x42, 0xc3, 0x61, 0x15, 0x10, 0x1b,
			0x77, 0x4d, 0xce, 0x22, 0x8c, 0xd4, 0x85, 0xf2, 0x45, 0x7d, 0xb7, 0x53,
			0xea, 0xef, 0x40, 0x5a, 0x94, 0x0a, 0x5c, 0x20, 0x5f, 0x4e, 0x40, 0x5d,
			0x62, 0x22, 0x76, 0xdf, 0xff, 0xce, 0x61, 0xbd, 0x8c, 0x23, 0x78, 0xd2,
			0x37, 0x02, 0xe0, 0x8e, 0xde, 0xd1, 0x11, 0x37, 0x89, 0xf6, 0xbf, 0xed,
			0x49, 0x07, 0x62, 0xae, 0x92, 0xec, 0x40, 0x1a, 0xaf, 0x14, 0x09, 0xd9,
			0xd0, 0x4e, 0xb2, 0xa2, 0xf7, 0xbe, 0xee, 0xee, 0xd8, 0xff, 0xdc, 0x1a,
			0x2d, 0xde, 0xb8, 0x36, 0x71, 0xe2, 0xfc, 0x79, 0xb7, 0x94, 0x25, 0xd1,
			0x48, 0x73, 0x5b, 0xa1, 0x35, 0xe7, 0xb3, 0x99, 0x67, 0x75, 0xc1, 0x19,
			0x3a, 0x2b, 0x47, 0x4e, 0xd3, 0x42, 0x8e, 0xfd, 0x31, 0xc8, 0x16, 0x66,
			0xda, 0xd2, 0x0c, 0x3c, 0xdb, 0xb3, 0x8e, 0xc9, 0xa1, 0x0d, 0x80, 0x0f,
			0x7b, 0x16, 0x77, 0x14, 0xbf, 0xff, 0xdb, 0x09, 0x94, 0xb2, 0x93, 0xbc,
			0x20, 0x58, 0x15, 0xe9, 0xdb, 0x71, 0x43, 0xf3, 0xde, 0x10, 0xc3, 0x00,
			0xdc, 0xa8, 0x2a, 0x95, 0xb6, 0xc2, 0xd6, 0x3f, 0x90, 0x6b, 0x76, 0xdb,
			0x6c, 0xfe, 0x8c, 0xbc, 0xf2, 0x70, 0x35, 0x0c, 0xdc, 0x99, 0x19, 0x35,
			0xdc, 0xd7, 0xc8, 0x46, 0x63, 0xd5, 0x36, 0x71, 0xae, 0x57, 0xfb, 0xb7,
			0x82, 0x6d, 0xdc,
		};

		// C=US, O=Google Trust Services LLC, CN=GTS CA 1C3
		public static byte [] gts_ca_1c3 = {
			0x30, 0x82, 0x05, 0x96, 0x30, 0x82, 0x03, 0x7e, 0xa0, 0x03, 0x02, 0x01,
			0x02, 0x02, 0x0d, 0x02, 0x03, 0xbc, 0x53, 0x59, 0x6b, 0x34, 0xc7, 0x18,
			0xf5, 0x01, 0x50, 0x66, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
			0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x47, 0x31, 0x0b, 0x30,
			0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x22,
			0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x19, 0x47, 0x6f, 0x6f,
			0x67, 0x6c, 0x65, 0x20, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x53, 0x65,
			0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x4c, 0x4c, 0x43, 0x31, 0x14,
			0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0b, 0x47, 0x54, 0x53,
			0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x52, 0x31, 0x30, 0x1e, 0x17, 0x0d,
			0x32, 0x30, 0x30, 0x38, 0x31, 0x33, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32,
			0x5a, 0x17, 0x0d, 0x32, 0x37, 0x30, 0x39, 0x33, 0x30, 0x30, 0x30, 0x30,
			0x30, 0x34, 0x32, 0x5a, 0x30, 0x46, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
			0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x22, 0x30, 0x20, 0x06,
			0x03, 0x55, 0x04, 0x0a, 0x13, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x20, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69,
			0x63, 0x65, 0x73, 0x20, 0x4c, 0x4c, 0x43, 0x31, 0x13, 0x30, 0x11, 0x06,
			0x03, 0x55, 0x04, 0x03, 0x13, 0x0a, 0x47, 0x54, 0x53, 0x20, 0x43, 0x41,
			0x20, 0x31, 0x43, 0x33, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09,
			0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03,
			0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01,
			0x00, 0xf5, 0x88, 0xdf, 0xe7, 0x62, 0x8c, 0x1e, 0x37, 0xf8, 0x37, 0x42,
			0x90, 0x7f, 0x6c, 0x87, 0xd0, 0xfb, 0x65, 0x82, 0x25, 0xfd, 0xe8, 0xcb,
			0x6b, 0xa4, 0xff, 0x6d, 0xe9, 0x5a, 0x23, 0xe2, 0x99, 0xf6, 0x1c, 0xe9,
			0x92, 0x03, 0x99, 0x13, 0x7c, 0x09, 0x0a, 0x8a, 0xfa, 0x42, 0xd6, 0x5e,
			0x56, 0x24, 0xaa, 0x7a, 0x33, 0x84, 0x1f, 0xd1, 0xe9, 0x69, 0xbb, 0xb9,
			0x74, 0xec, 0x57, 0x4c, 0x66, 0x68, 0x93, 0x77, 0x37, 0x55, 0x53, 0xfe,
			0x39, 0x10, 0x4d, 0xb7, 0x34, 0xbb, 0x5f, 0x25, 0x77, 0x37, 0x3b, 0x17,
			0x94, 0xea, 0x3c, 0xe5, 0x9d, 0xd5, 0xbc, 0xc3, 0xb4, 0x43, 0xeb, 0x2e,
			0xa7, 0x47, 0xef, 0xb0, 0x44, 0x11, 0x63, 0xd8, 0xb4, 0x41, 0x85, 0xdd,
			0x41, 0x30, 0x48, 0x93, 0x1b, 0xbf, 0xb7, 0xf6, 0xe0, 0x45, 0x02, 0x21,
			0xe0, 0x96, 0x42, 0x17, 0xcf, 0xd9, 0x2b, 0x65, 0x56, 0x34, 0x07, 0x26,
			0x04, 0x0d, 0xa8, 0xfd, 0x7d, 0xca, 0x2e, 0xef, 0xea, 0x48, 0x7c, 0x37,
			0x4d, 0x3f, 0x00, 0x9f, 0x83, 0xdf, 0xef, 0x75, 0x84, 0x2e, 0x79, 0x57,
			0x5c, 0xfc, 0x57, 0x6e, 0x1a, 0x96, 0xff, 0xfc, 0x8c, 0x9a, 0xa6, 0x99,
			0xbe, 0x25, 0xd9, 0x7f, 0x96, 0x2c, 0x06, 0xf7, 0x11, 0x2a, 0x02, 0x80,
			0x80, 0xeb, 0x63, 0x18, 0x3c, 0x50, 0x49, 0x87, 0xe5, 0x8a, 0xca, 0x5f,
			0x19, 0x2b, 0x59, 0x96, 0x81, 0x00, 0xa0, 0xfb, 0x51, 0xdb, 0xca, 0x77,
			0x0b, 0x0b, 0xc9, 0x96, 0x4f, 0xef, 0x70, 0x49, 0xc7, 0x5c, 0x6d, 0x20,
			0xfd, 0x99, 0xb4, 0xb4, 0xe2, 0xca, 0x2e, 0x77, 0xfd, 0x2d, 0xdc, 0x0b,
			0xb6, 0x6b, 0x13, 0x0c, 0x8c, 0x19, 0x2b, 0x17, 0x96, 0x98, 0xb9, 0xf0,
			0x8b, 0xf6, 0xa0, 0x27, 0xbb, 0xb6, 0xe3, 0x8d, 0x51, 0x8f, 0xbd, 0xae,
			0xc7, 0x9b, 0xb1, 0x89, 0x9d, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82,
			0x01, 0x80, 0x30, 0x82, 0x01, 0x7c, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d,
			0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x86, 0x30, 0x1d,
			0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b,
			0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01,
			0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13,
			0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02, 0x01,
			0x00, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14,
			0x8a, 0x74, 0x7f, 0xaf, 0x85, 0xcd, 0xee, 0x95, 0xcd, 0x3d, 0x9c, 0xd0,
			0xe2, 0x46, 0x14, 0xf3, 0x71, 0x35, 0x1d, 0x27, 0x30, 0x1f, 0x06, 0x03,
			0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xe4, 0xaf, 0x2b,
			0x26, 0x71, 0x1a, 0x2b, 0x48, 0x27, 0x85, 0x2f, 0x52, 0x66, 0x2c, 0xef,
			0xf0, 0x89, 0x13, 0x71, 0x3e, 0x30, 0x68, 0x06, 0x08, 0x2b, 0x06, 0x01,
			0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x5c, 0x30, 0x5a, 0x30, 0x26, 0x06,
			0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x1a, 0x68,
			0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x63, 0x73, 0x70, 0x2e, 0x70,
			0x6b, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x2f, 0x67, 0x74, 0x73, 0x72,
			0x31, 0x30, 0x30, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30,
			0x02, 0x86, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x70, 0x6b,
			0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f,
			0x63, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x67, 0x74, 0x73, 0x72, 0x31, 0x2e,
			0x64, 0x65, 0x72, 0x30, 0x34, 0x06, 0x03, 0x55, 0x1d, 0x1f, 0x04, 0x2d,
			0x30, 0x2b, 0x30, 0x29, 0xa0, 0x27, 0xa0, 0x25, 0x86, 0x23, 0x68, 0x74,
			0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x63, 0x72, 0x6c, 0x2e, 0x70, 0x6b, 0x69,
			0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x2f, 0x67, 0x74, 0x73, 0x72, 0x31, 0x2f,
			0x67, 0x74, 0x73, 0x72, 0x31, 0x2e, 0x63, 0x72, 0x6c, 0x30, 0x57, 0x06,
			0x03, 0x55, 0x1d, 0x20, 0x04, 0x50, 0x30, 0x4e, 0x30, 0x38, 0x06, 0x0a,
			0x2b, 0x06, 0x01, 0x04, 0x01, 0xd6, 0x79, 0x02, 0x05, 0x03, 0x30, 0x2a,
			0x30, 0x28, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x01,
			0x16, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x70, 0x6b,
			0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
			0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x30, 0x08, 0x06, 0x06, 0x67, 0x81,
			0x0c, 0x01, 0x02, 0x01, 0x30, 0x08, 0x06, 0x06, 0x67, 0x81, 0x0c, 0x01,
			0x02, 0x02, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
			0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x89, 0x7d,
			0xac, 0x20, 0x5c, 0x0c, 0x3c, 0xbe, 0x9a, 0xa8, 0x57, 0x95, 0x1b, 0xb4,
			0xae, 0xfa, 0xab, 0xa5, 0x72, 0x71, 0xb4, 0x36, 0x95, 0xfd, 0xdf, 0x40,
			0x11, 0x03, 0x4c, 0xc2, 0x46, 0x14, 0xbb, 0x14, 0x24, 0xab, 0xf0, 0x50,
			0x71, 0x22, 0xdb, 0xad, 0xc4, 0x6e, 0x7f, 0xcf, 0xf1, 0x6a, 0x6f, 0xc8,
			0x83, 0x1b, 0xd8, 0xce, 0x89, 0x5f, 0x87, 0x6c, 0x87, 0xb8, 0xa9, 0x0c,
			0xa3, 0x9b, 0xa1, 0x62, 0x94, 0x93, 0x95, 0xdf, 0x5b, 0xae, 0x66, 0x19,
			0x0b, 0x02, 0x96, 0x9e, 0xfc, 0xb5, 0xe7, 0x10, 0x69, 0x3e, 0x7a, 0xcb,
			0x46, 0x49, 0x5f, 0x46, 0xe1, 0x41, 0xb1, 0xd7, 0x98, 0x4d, 0x65, 0x34,
			0x00, 0x80, 0x1a, 0x3f, 0x4f, 0x9f, 0x6c, 0x7f, 0x49, 0x00, 0x81, 0x53,
			0x41, 0xa4, 0x92, 0x21, 0x82, 0x82, 0x1a, 0xf1, 0xa3, 0x44, 0x5b, 0x2a,
			0x50, 0x12, 0x13, 0x4d, 0xc1, 0x53, 0x36, 0xf3, 0x42, 0x08, 0xaf, 0x54,
			0xfa, 0x8e, 0x77, 0x53, 0x1b, 0x64, 0x38, 0x27, 0x17, 0x09, 0xbd, 0x58,
			0xc9, 0x1b, 0x7c, 0x39, 0x2d, 0x5b, 0xf3, 0xce, 0xd4, 0xed, 0x97, 0xdb,
			0x14, 0x03, 0xbf, 0x09, 0x53, 0x24, 0x1f, 0xc2, 0x0c, 0x04, 0x79, 0x98,
			0x26, 0xf2, 0x61, 0xf1, 0x53, 0x52, 0xfd, 0x42, 0x8c, 0x1b, 0x66, 0x2b,
			0x3f, 0x15, 0xa1, 0xbb, 0xff, 0xf6, 0x9b, 0xe3, 0x81, 0x9a, 0x01, 0x06,
			0x71, 0x89, 0x35, 0x28, 0x24, 0xdd, 0xe1, 0xbd, 0xeb, 0x19, 0x2d, 0xe1,
			0x48, 0xcb, 0x3d, 0x59, 0x83, 0x51, 0xb4, 0x74, 0xc6, 0x9d, 0x7c, 0xc6,
			0xb1, 0x86, 0x5b, 0xaf, 0xcc, 0x34, 0xc4, 0xd3, 0xcc, 0xd4, 0x81, 0x11,
			0x95, 0x00, 0xa1, 0xf4, 0x12, 0x22, 0x01, 0xfa, 0xb4, 0x83, 0x71, 0xaf,
			0x8c, 0xb7, 0x8c, 0x73, 0x24, 0xac, 0x37, 0x53, 0xc2, 0x00, 0x90, 0x3f,
			0x11, 0xfe, 0x5c, 0xed, 0x36, 0x94, 0x10, 0x3b, 0xbd, 0x29, 0xae, 0xe2,
			0xc7, 0x3a, 0x62, 0x3b, 0x6c, 0x63, 0xd9, 0x80, 0xbf, 0x59, 0x71, 0xac,
			0x63, 0x27, 0xb9, 0x4c, 0x17, 0xa0, 0xda, 0xf6, 0x73, 0x15, 0xbf, 0x2a,
			0xde, 0x8f, 0xf3, 0xa5, 0x6c, 0x32, 0x81, 0x33, 0x03, 0xd0, 0x86, 0x51,
			0x71, 0x99, 0x34, 0xba, 0x93, 0x8d, 0x5d, 0xb5, 0x51, 0x58, 0xf7, 0xb2,
			0x93, 0xe8, 0x01, 0xf6, 0x59, 0xbe, 0x71, 0x9b, 0xfd, 0x4d, 0x28, 0xce,
			0xcf, 0x6d, 0xc7, 0x16, 0xdc, 0xf7, 0xd1, 0xd6, 0x46, 0x9b, 0xa7, 0xca,
			0x6b, 0xe9, 0x77, 0x0f, 0xfd, 0xa0, 0xb6, 0x1b, 0x23, 0x83, 0x1d, 0x10,
			0x1a, 0xd9, 0x09, 0x00, 0x84, 0xe0, 0x44, 0xd3, 0xa2, 0x75, 0x23, 0xb3,
			0x34, 0x86, 0xf6, 0x20, 0xb0, 0xa4, 0x5e, 0x10, 0x1d, 0xe0, 0x52, 0x46,
			0x00, 0x9d, 0xb1, 0x0f, 0x1f, 0x21, 0x70, 0x51, 0xf5, 0x9a, 0xdd, 0x06,
			0xfc, 0x55, 0xf4, 0x2b, 0x0e, 0x33, 0x77, 0xc3, 0x4b, 0x42, 0xc2, 0xf1,
			0x77, 0x13, 0xfc, 0x73, 0x80, 0x94, 0xeb, 0x1f, 0xbb, 0x37, 0x3f, 0xce,
			0x02, 0x2a, 0x66, 0xb0, 0x73, 0x1d, 0x32, 0xa5, 0x32, 0x6c, 0x32, 0xb0,
			0x8e, 0xe0, 0xc4, 0x23, 0xff, 0x5b, 0x7d, 0x4d, 0x65, 0x70, 0xac, 0x2b,
			0x9b, 0x3d, 0xce, 0xdb, 0xe0, 0x6d, 0x8e, 0x32, 0x80, 0xbe, 0x96, 0x9f,
			0x92, 0x63, 0xbc, 0x97, 0xbb, 0x5d, 0xb9, 0xf4, 0xe1, 0x71, 0x5e, 0x2a,
			0xe4, 0xef, 0x03, 0x22, 0xb1, 0x8a, 0x65, 0x3a, 0x8f, 0xc0, 0x93, 0x65,
			0xd4, 0x85, 0xcd, 0x0f, 0x0f, 0x5b, 0x83, 0x59, 0x16, 0x47, 0x16, 0x2d,
			0x9c, 0x24, 0x3a, 0xc8, 0x80, 0xa6, 0x26, 0x14, 0x85, 0x9b, 0xf6, 0x37,
			0x9b, 0xac, 0x6f, 0xf9, 0xc5, 0xc3, 0x06, 0x51, 0xf3, 0xe2, 0x7f, 0xc5,
			0xb1, 0x10, 0xba, 0x51, 0xf4, 0xdd,
		};

		[DllImport (Constants.CoreFoundationLibrary)]
		extern static nint CFGetRetainCount (IntPtr handle);

		void CheckMailGoogleCom (SecCertificate cert, nint expectedRetainCount)
		{
			Assert.That (cert.Handle, Is.Not.EqualTo (IntPtr.Zero), "Handle");
			Assert.That (CFGetRetainCount (cert.Handle), Is.EqualTo (expectedRetainCount), "RetainCount");
			Assert.That (cert.SubjectSummary, Is.EqualTo ("mail.google.com"), "SubjectSummary");
			Assert.That ((nuint) (uint) mail_google_com.Length, Is.EqualTo (cert.DerData.Length), "DerData");
			if (TestRuntime.CheckXcodeVersion (8, 3)) {
				Assert.That (cert.GetCommonName (), Is.EqualTo ("mail.google.com"), "GetCommonName");
				Assert.That (cert.GetSerialNumber ().ToStableString (), Is.EqualTo ("<1a62a6e1 84a64101 0947a4a7 5bf3cc6f>"), "GetSerialNumber");

				var emailAddresses = cert.GetEmailAddresses ();
				Assert.IsTrue (emailAddresses is null || emailAddresses.Length == 0, "GetEmailAddresses");

				Assert.NotNull (cert.GetNormalizedIssuerSequence (), "GetNormalizedIssuerSequence");
				Assert.NotNull (cert.GetNormalizedSubjectSequence (), "GetNormalizedSubjectSequence");
#if !__MACCATALYST__
				Assert.NotNull (cert.GetPublicKey (), "GetPublicKey");
#endif
			}
			if (TestRuntime.CheckXcodeVersion (9, 0)) {
				NSError err;
				Assert.That (cert.GetSerialNumber (out err).ToStableString (), Is.EqualTo ("<1a62a6e1 84a64101 0947a4a7 5bf3cc6f>"), "GetSerialNumber/NSError");
				Assert.Null (err, "err");
			}
			if (TestRuntime.CheckXcodeVersion (10, 0)) {
				Assert.NotNull (cert.GetKey (), "GetKey");
			}
		}

		[Test]
		public void MailNSData ()
		{
			using (var data = NSData.FromArray (mail_google_com))
			using (var sc = new SecCertificate (data)) {
				CheckMailGoogleCom (sc, 1);
			}
		}

		[Test]
		public void MailRaw ()
		{
			using (var sc = new SecCertificate (mail_google_com)) {
				CheckMailGoogleCom (sc, 1);
			}
		}

		[Test]
		public void MailX1 ()
		{
			using (var cert = new X509Certificate (mail_google_com)) {
				/*
				 * This X509Certificate constructor will use SecCertificateCreateWithData() and
				 * store the SecCertificateRef in its Handle.
				 */
				Assert.That (cert.Handle, Is.Not.EqualTo (IntPtr.Zero), "Handle");
				Assert.That (CFGetRetainCount (cert.Handle), Is.EqualTo ((nint) 1), "RetainCount");
				using (var sc = new SecCertificate (cert)) {
#if NET
					// dotnet PAL layer does not return the same instance
					CheckMailGoogleCom (sc, 1); // so the new one is RC == 1
#else
					Assert.That (sc.Handle, Is.EqualTo (cert.Handle), "Same Handle");
					CheckMailGoogleCom (sc, 2); // same handle means another reference was added
#endif
					Assert.That (cert.ToString (true), Is.EqualTo (sc.ToX509Certificate ().ToString (true)), "X509Certificate");
				}
			}
		}

		[Test]
		[Ignore ("https://bugzilla.xamarin.com/show_bug.cgi?id=39952")]
		public void MailX2 ()
		{
			using (var cert = new X509Certificate2 (mail_google_com)) {
				/*
				 * FIXME: This X509Certificate2 constructor will use Mono.Security to parse the
				 *        certificate, but also call the base class'es .ctor with the byte array.
				 */
				Assert.That (cert.Handle, Is.Not.EqualTo (IntPtr.Zero), "Handle");
				Assert.That (CFGetRetainCount (cert.Handle), Is.EqualTo (1), "RetainCount");
				using (var sc = new SecCertificate (cert)) {
					Assert.That (sc.Handle, Is.EqualTo (cert.Handle), "Same Handle");
					CheckMailGoogleCom (sc, 2);
					Assert.That (cert.ToString (), Is.EqualTo (sc.ToX509Certificate2 ().ToString ()), "X509Certificate2");
				}
			}
		}

		[Test]
		public void GenerateKeyPairTest ()
		{
			SecKey private_key;
			SecKey public_key;
			var att = new SecPublicPrivateKeyAttrs ();
			att.Label = $"{CFBundle.GetMain ().Identifier}-{GetType ().FullName}-{Process.GetCurrentProcess ().Id}";
			att.IsPermanent = false;
			att.ApplicationTag = new NSData ();
			att.EffectiveKeySize = 1024;
			att.CanEncrypt = false;
			att.CanDecrypt = false;
			att.CanDerive = false;
			att.CanSign = false;
			att.CanVerify = false;
			att.CanUnwrap = false;

			try {
				Assert.That (SecKey.GenerateKeyPair (SecKeyType.RSA, 1024, att, out public_key, out private_key), Is.EqualTo (SecStatusCode.Success), "GenerateKeyPair");


				Assert.Throws<ArgumentException> (() => { SecKey.GenerateKeyPair (SecKeyType.Invalid, -1, null, out _, out _); }, "GenerateKeyPair - Invalid");
				Assert.That (SecKey.GenerateKeyPair (SecKeyType.RSA, -1, null, out _, out _), Is.EqualTo (SecStatusCode.Param), "GenerateKeyPair - Param issue, invalid RSA key size");
				Assert.That (SecKey.GenerateKeyPair (SecKeyType.RSA, 1024, null, out _, out _), Is.EqualTo (SecStatusCode.Success), "GenerateKeyPair - Null optional params, success");

#if IOS
				var att2 = new SecPublicPrivateKeyAttrs ();
				att2.Label = att.Label;
				att2.IsPermanent = false;
				att2.EffectiveKeySize = 1024;
				att2.CanEncrypt = true;
				att2.CanDecrypt = true;
				att2.CanDerive = true;
				att2.CanSign = true;
				att2.CanVerify = true;
				att2.CanUnwrap = true;
				Assert.That (SecKey.GenerateKeyPair (SecKeyType.RSA, 1024, att, att2, out public_key, out private_key), Is.EqualTo (SecStatusCode.Success), "GenerateKeyPair - iOS Only API");
#endif
				if (TestRuntime.CheckXcodeVersion (8, 0)) {
					using (var attrs = public_key.GetAttributes ()) {
						Assert.That (attrs.Count, Is.GreaterThan ((nuint) 0), "public/GetAttributes");
					}
					using (var attrs = private_key.GetAttributes ()) {
						Assert.That (attrs.Count, Is.GreaterThan ((nuint) 0), "private/GetAttributes");
					}
				}
			} finally {
				KeyTest.DeleteKeysWithLabel (att.Label);
			}
		}

		[Test]
		public void X2 ()
		{
			TestRuntime.AssertXcodeVersion (10, 0);
			using (var x1 = new SecCertificate (mail_google_com))
			using (var x2 = new SecCertificate2 (x1)) {
				Assert.That (x2.Certificate.GetCommonName (), Is.EqualTo (x1.GetCommonName ()), "CommonName");
			}
		}
	}
}
