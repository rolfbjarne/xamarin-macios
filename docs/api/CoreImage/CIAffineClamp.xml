<Documentation>
  <Docs DocId="T:CoreImage.CIAffineClamp">
    <summary>A <see cref="T:CoreImage.CIAffineFilter" /> that extends the border pixels to the post-transform boundaries.</summary>
    <remarks>
      <para>The following example shows this filter in use</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Create the CIImage from a file
CIImage flower = CIImage.FromCGImage (UIImage.FromFile ("flower.png").CGImage);

// Scale the image to make it more interesting
flower = new CILanczosScaleTransform {
	Image = flower,
	Scale = .2f
}.OutputImage;

// Create a CIAffineClamp filter with the input image
var affine_clamp = new CIAffineClamp () {
	Image = flower
};

// Get the clamped image from the filter
var output = new CICrop () { 
	Image = affine_clamp.OutputImage,
	Rectangle = new CIVector (0, 0, 300, 200) 
}.OutputImage;

// To render the results, we need to create a context, and then
// use one of the context rendering APIs, in this case, we render the
// result into a CoreGraphics image, which is merely a useful representation
//
var context = CIContext.FromOptions (null);

var cgimage = context.CreateCGImage (output, output.Extent);

// The above cgimage can be added to a screen view, for example, this
// would add it to a UIImageView on the screen:
myImageView.Image = UIImage.FromImage (cgimage);
		]]></code>
      </example>
      <para>
			With the following source:
		</para>
      <para>
        <img href="~/CoreImage/_images/flower.png" alt="Photograph of a sunflower." />
      </para>
      <para>
			 Produces the following output:
		</para>
      <para>
        <img href="~/CoreImage/_images/affine_clamp.png" alt="Result of applying the filter." />
      </para>
      <para>
			"Flower" Â© 2012 Milica Sekulic, used under a Creative Commons Attribution-ShareAlike license: https://creativecommons.org/licenses/by-sa/3.0/ 
		</para>
    </remarks>
  </Docs>
</Documentation>