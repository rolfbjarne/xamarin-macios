# Xamarin
#
# Template that contains the different steps required to run device
# tests. The template takes a number of parameters so that it can
# be configured for the different type of devices.
#
parameters:

- name: statusContext
  type: string
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices.

- name: testsLabels
  type: string
  default: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests' # default context, since we started dealing with iOS devices.

- name: disableProvisionatorCache
  type: boolean
  default: false

- name: clearProvisionatorCache
  type: boolean
  default: false

- name: useXamarinStorage
  type: boolean
  default: false  # xamarin-storage will disappear, so by default do not use it

- name: vsdropsPrefix
  type: string

# can depend on the pool, which is annoying, but we should keep it in mind
- name: keyringPass
  type: string

- name: devicePrefix
  type: string
  default: 'ios' # default context, since we started dealing with iOS devices.

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

steps:

- checkout: self
  path: s/xamarin-macios
- checkout: maccore
  persistCredentials: true  # hugely important, else there are some scripts that check a single file from maccore that will fail

- bash: $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/automation/scripts/bash/clean-bot.sh
  displayName: 'Clean bot'
  env:
    BUILD_REVISION: 'jenkins'
  continueOnError: true
  timeoutInMinutes: 60

- bash: cd $(System.DefaultWorkingDirectory)/xamarin-macios/ && git clean -xdf
  displayName: 'Clean workspace'

- pwsh : |
    Write-Host "IsMacOS: ${IsMacOS}"
    Write-Host "IsWindows: ${IsWindows}"
    Write-Host "IsLinux: ${IsLinux}"

    if ($IsMacOS -or $IsLinux) {
        Write-Host "HOSTNAME: $(hostname)"
    } else {
        Write-Host "COMPUTERNAME: ${env:COMPUTERNAME}"
    }

    gci env: | format-table -autosize -wrap
  displayName: 'Show Environment'

# Use a cmdlet to check if the space available in the devices root system is larger than 50 gb. If there is not
# enough space available it:
# 1. Set the status of the build to error. It is not a failure since no tests have been ran.
# 2. Set a comment stating the same as what was sent to the status.
# 3. Cancel the pipeline and do not execute any of the following steps.
- pwsh: |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/automation/scripts/
    Import-Module ./System.psm1
    Import-Module ./VSTS.psm1
    Import-Module ./GitHub.psm1
    if ( -not (Test-HDFreeSpace -Size 20)) {
      Set-GitHubStatus -Status "error" -Description "Not enough free space in the host." -Context "$Env:CONTEXT"
      New-GitHubComment -Header "Tests failed catastrophically on $Env:CONTEXT" -Emoji ":fire:" -Description "Not enough free space in the host."
      Stop-Pipeline
    } else {
      Set-GitHubStatus -Status "pending" -Description "Device tests on VSTS have been started." -Context "$Env:CONTEXT"
    }
  env:
    BUILD_REVISION: $(Build.SourceVersion)
    CONTEXT: ${{ parameters.statusContext }}
    GITHUB_TOKEN: $(GitHub.Token)
    ACCESSTOKEN: $(System.AccessToken)
  displayName: 'Check HD Free Space'
  timeoutInMinutes: 5
  condition: succeededOrFailed() # we do not care about the previous step

# if we got to this point, it means that we do have at least 50 Gb to run the test, should
# be more than enough, else the above script would have stopped the pipeline
- bash: |
    set -x
    set -e
    cd xamarin-macios
    ./configure --enable-xamarin
  displayName: 'Enable Xamarin'
  timeoutInMinutes: 1

# Add the required provisioning profiles to be able to execute the tests.
- bash: |
    set -x
    set -e
    rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*p12
    rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*mobileprovision
    ./maccore/tools/install-qa-provisioning-profiles.sh -v
  displayName: 'Add provisioning profiles'
  timeoutInMinutes: 30
  env:
    AUTH_TOKEN_GITHUB_COM: ${{ parameters.gitHubToken }}
    AUTH_TOKEN_LA_DEV_APPLE_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_LA_DISTR_APPLE_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_LA_MAC_INSTALLER_DISTR_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_2_P12: ${{ parameters.xqaCertPass }}

# download the artifacts.json, which will use to find the URI of the built pkg to later be installed by provisionator
- task: DownloadPipelineArtifact@2
  displayName: Download artifacts.json
  inputs:
    patterns: '**/*.json'
    allowFailedBuilds: true
    path: $(Build.SourcesDirectory)/artifacts

- pwsh: |
    Dir $(Build.SourcesDirectory)/artifacts
    $json = Get-Content '$(Build.SourcesDirectory)/artifacts/pkg-info/artifacts.json' | Out-String | ConvertFrom-Json
    foreach ($i in $json) {
      if ($i.tag -like "xamarin-ios*" -and -not ($i.url -like "*notarized*")) {
        $url = $i.url
        Write-Host "##vso[task.setvariable variable=XI_PACKAGE;]$url"
        break
      }
    }
  displayName: 'Set iOS pkgs url'
  timeoutInMinutes: 5

- bash: |
    echo "Pkg uri is $XI_PACKAGE"
    make -C $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/ device-tests-provisioning.csx
  displayName: 'Generate Provisionator csx file'

# Executed ONLY if we want to clear the provisionator cache.
- bash: rm -rf "$TOOLS_DIR/provisionator"
  env:
    TOOLS_DIR: $(Agent.ToolsDirectory)
  displayName: 'Nuke Provisionator Tool Cache'
  condition: ${{ parameters.clearProvisionatorCache }}

# Use the provisionator to install the test dependencies. Those have been generated in the 'Generate Provisionator csx file' step.
- task: xamops.azdevex.provisionator-task.provisionator@1
  displayName: 'Provision dependencies'
  inputs:
    provisioning_script: $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/device-tests-provisioning.csx
    provisioning_extra_args: '-vvvv'
  timeoutInMinutes: 250

# only execute it on failure setting the variable later pass as part of the parameters
- pwsh: |
    Write-Host "##vso[task.setvariable variable=provisioningSuccess;]False"
  displayName: 'Set provisioning as failure'
  condition: failed()

- ${{ if eq(variables['botProvisioningSuccess'], 'False') }}:
  - bash: |
      set -x
      set -e

      echo "##vso[task.setvariable variable=TESTS_BOT;isOutput=true]$AGENT_NAME"
      echo '##vso[task.setvariable variable=TESTS_JOBSTATUS;isOutput=true]Failed'
      echo '##vso[task.setvariable variable=PROVISIONING_FAILED;isOutput=true]True'
    displayName: 'Set result variables'
    name: runTests # Same name, why? because we want to be able to have single dep in the main stage template
- ${{ else }}:
  - template: run-tests.yml 
    parameters:
      statusContext: ${{ parameters.statusContext }}
      testsLabels: ${{ parameters.testsLabels }}
      useXamarinStorage: ${{ parameters.useXamarinStorage }}
      vsdropsPrefix: ${{ parameters.vsdropsPrefix }}
      devicePrefix: ${{ parameters.devicePrefix }}
