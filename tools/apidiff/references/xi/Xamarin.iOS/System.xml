<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="System" version="2.0.5.0">
    <attributes>
      <attribute name="System.CLSCompliantAttribute">
        <properties>
          <property name="IsCompliant" value="True" />
        </properties>
      </attribute>
      <attribute name="System.Diagnostics.DebuggableAttribute">
        <properties>
          <property name="IsJITTrackingEnabled" value="IgnoreSymbolStoreSequencePoints" />
          <property name="IsJITOptimizerDisabled" value="IgnoreSymbolStoreSequencePoints" />
          <property name="DebuggingFlags" value="IgnoreSymbolStoreSequencePoints" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyCompanyAttribute">
        <properties>
          <property name="Company" value="Mono development team" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyCopyrightAttribute">
        <properties>
          <property name="Copyright" value="(c) Various Mono authors" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyDefaultAliasAttribute">
        <properties>
          <property name="DefaultAlias" value="System.dll" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyDelaySignAttribute">
        <properties>
          <property name="DelaySign" value="True" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyDescriptionAttribute">
        <properties>
          <property name="Description" value="System.dll" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyFileVersionAttribute">
        <properties>
          <property name="Version" value="4.0.50524.0" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyInformationalVersionAttribute">
        <properties>
          <property name="InformationalVersion" value="4.0.50524.0" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyKeyFileAttribute">
        <properties>
          <property name="KeyFile" value="../silverlight.pub" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyProductAttribute">
        <properties>
          <property name="Product" value="Mono Common Language Infrastructure" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyTitleAttribute">
        <properties>
          <property name="Title" value="System.dll" />
        </properties>
      </attribute>
      <attribute name="System.Resources.NeutralResourcesLanguageAttribute">
        <properties>
          <property name="CultureName" value="en-US" />
        </properties>
      </attribute>
      <attribute name="System.Resources.SatelliteContractVersionAttribute">
        <properties>
          <property name="Version" value="2.0.5.0" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
        <properties>
          <property name="CompilationRelaxations" value="8" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
      <attribute name="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
        <properties>
          <property name="AssemblyName" value="System.ComponentModel.DataAnnotations, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
        <properties>
          <property name="AssemblyName" value="System.Net.Http, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
        <properties>
          <property name="AssemblyName" value="Mono.Btls.Interface, PublicKey=002400000480000094000000060200000024000052534131000400000100010079159977d2d03a8e6bea7a2e74e8d1afcc93e8851974952bb480a12c9134474d04062447c37e0e68c080536fcf3c3fbe2ff9c979ce998475e506e8ce82dd5b0f350dc10e93bf2eeecf874b24770c5081dbea7447fddafa277b22de47d6ffea449674a4f9fccf84d15069089380284dbdd35f46cdff12a1bd78e4ef0065d016df" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
        <properties>
          <property name="AssemblyName" value="Mono.Security, PublicKey=002400000480000094000000060200000024000052534131000400000100010079159977d2d03a8e6bea7a2e74e8d1afcc93e8851974952bb480a12c9134474d04062447c37e0e68c080536fcf3c3fbe2ff9c979ce998475e506e8ce82dd5b0f350dc10e93bf2eeecf874b24770c5081dbea7447fddafa277b22de47d6ffea449674a4f9fccf84d15069089380284dbdd35f46cdff12a1bd78e4ef0065d016df" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
        <properties>
          <property name="AssemblyName" value="monotouch, PublicKey=0024000004800000940000000602000000240000525341310004000011000000438ac2a5acfbf16cbd2b2b47a62762f273df9cb2795ceccdf77d10bf508e69e7a362ea7a45455bbf3ac955e1f2e2814f144e5d817efc4c6502cc012df310783348304e3ae38573c6d658c234025821fda87a0be8a0d504df564e2c93b2b878925f42503e9d54dfef9f9586d9e6f38a305769587b1de01f6c0410328b2c9733db" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
        <properties>
          <property name="AssemblyName" value="Xamarin.iOS, PublicKey=0024000004800000940000000602000000240000525341310004000011000000438ac2a5acfbf16cbd2b2b47a62762f273df9cb2795ceccdf77d10bf508e69e7a362ea7a45455bbf3ac955e1f2e2814f144e5d817efc4c6502cc012df310783348304e3ae38573c6d658c234025821fda87a0be8a0d504df564e2c93b2b878925f42503e9d54dfef9f9586d9e6f38a305769587b1de01f6c0410328b2c9733db" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
        <properties>
          <property name="AssemblyName" value="Xamarin.WatchOS, PublicKey=0024000004800000940000000602000000240000525341310004000011000000438ac2a5acfbf16cbd2b2b47a62762f273df9cb2795ceccdf77d10bf508e69e7a362ea7a45455bbf3ac955e1f2e2814f144e5d817efc4c6502cc012df310783348304e3ae38573c6d658c234025821fda87a0be8a0d504df564e2c93b2b878925f42503e9d54dfef9f9586d9e6f38a305769587b1de01f6c0410328b2c9733db" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
        <properties>
          <property name="AssemblyName" value="Xamarin.TVOS, PublicKey=0024000004800000940000000602000000240000525341310004000011000000438ac2a5acfbf16cbd2b2b47a62762f273df9cb2795ceccdf77d10bf508e69e7a362ea7a45455bbf3ac955e1f2e2814f144e5d817efc4c6502cc012df310783348304e3ae38573c6d658c234025821fda87a0be8a0d504df564e2c93b2b878925f42503e9d54dfef9f9586d9e6f38a305769587b1de01f6c0410328b2c9733db" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
        <properties>
          <property name="WrapNonExceptionThrows" value="True" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
        <properties>
          <property name="Value" value="False" />
        </properties>
      </attribute>
    </attributes>
    <namespaces>
      <namespace name="Microsoft.Win32.SafeHandles">
        <classes>
          <class name="SafeProcessHandle" type="class" base="Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Security.SuppressUnmanagedCodeSecurityAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.IntPtr, System.Boolean)" attrib="22662">
                <parameters>
                  <parameter name="existingHandle" position="0" attrib="0" type="System.IntPtr" />
                  <parameter name="ownsHandle" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="ReleaseHandle()" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="SafeX509ChainHandle" type="class" base="Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <methods>
              <method name="ReleaseHandle()" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <attributes />
                <parameters />
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System">
        <classes>
          <class name="FileStyleUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="FtpStyleUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="GenericUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.GenericUriParserOptions)" attrib="6278">
                <parameters>
                  <parameter name="options" position="0" attrib="0" type="System.GenericUriParserOptions" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="GenericUriParserOptions" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AllowEmptyAuthority" attrib="32854" fieldtype="System.GenericUriParserOptions" value="2" />
              <field name="Default" attrib="32854" fieldtype="System.GenericUriParserOptions" value="0" />
              <field name="DontCompressPath" attrib="32854" fieldtype="System.GenericUriParserOptions" value="128" />
              <field name="DontConvertPathBackslashes" attrib="32854" fieldtype="System.GenericUriParserOptions" value="64" />
              <field name="DontUnescapePathDotsAndSlashes" attrib="32854" fieldtype="System.GenericUriParserOptions" value="256" />
              <field name="GenericAuthority" attrib="32854" fieldtype="System.GenericUriParserOptions" value="1" />
              <field name="Idn" attrib="32854" fieldtype="System.GenericUriParserOptions" value="512" />
              <field name="IriParsing" attrib="32854" fieldtype="System.GenericUriParserOptions" value="1024" />
              <field name="NoFragment" attrib="32854" fieldtype="System.GenericUriParserOptions" value="32" />
              <field name="NoPort" attrib="32854" fieldtype="System.GenericUriParserOptions" value="8" />
              <field name="NoQuery" attrib="32854" fieldtype="System.GenericUriParserOptions" value="16" />
              <field name="NoUserInfo" attrib="32854" fieldtype="System.GenericUriParserOptions" value="4" />
            </fields>
          </class>
          <class name="GopherStyleUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="HttpStyleUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="LdapStyleUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="NetPipeStyleUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="NetTcpStyleUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="NewsStyleUriParser" type="class" base="System.UriParser" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="Uri" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.TypeConverterAttribute">
                <properties>
                  <property name="ConverterTypeName" value="System.UriTypeConverter" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <fields>
              <field name="SchemeDelimiter" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeFile" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeFtp" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeGopher" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeHttp" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeHttps" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeMailto" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeNetPipe" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeNetTcp" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeNews" attrib="54" fieldtype="System.String" />
              <field name="UriSchemeNntp" attrib="54" fieldtype="System.String" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="uriString" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Boolean)" attrib="6278">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The constructor has been deprecated. Please use new Uri(string). The dontEscape parameter is deprecated and is always false. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="uriString" position="0" attrib="0" type="System.String" />
                  <parameter name="dontEscape" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.UriKind)" attrib="6278">
                <parameters>
                  <parameter name="uriString" position="0" attrib="0" type="System.String" />
                  <parameter name="uriKind" position="1" attrib="0" type="System.UriKind" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Uri, System.String)" attrib="6278">
                <parameters>
                  <parameter name="baseUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="relativeUri" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Uri, System.Uri)" attrib="6278">
                <parameters>
                  <parameter name="baseUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="relativeUri" position="1" attrib="0" type="System.Uri" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Uri, System.String, System.Boolean)" attrib="6278">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The constructor has been deprecated. Please new Uri(Uri, string). The dontEscape parameter is deprecated and is always false. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="baseUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="relativeUri" position="1" attrib="0" type="System.String" />
                  <parameter name="dontEscape" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AbsolutePath" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_AbsolutePath()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AbsoluteUri" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_AbsoluteUri()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Authority" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Authority()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DnsSafeHost" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DnsSafeHost()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Fragment" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Fragment()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Host" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Host()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HostNameType" attrib="0" ptype="System.UriHostNameType">
                <methods>
                  <method name="get_HostNameType()" attrib="2182" returntype="System.UriHostNameType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IdnHost" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_IdnHost()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsAbsoluteUri" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsAbsoluteUri()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsDefaultPort" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsDefaultPort()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsFile" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsFile()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsLoopback" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLoopback()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsUnc" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsUnc()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LocalPath" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_LocalPath()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OriginalString" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_OriginalString()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PathAndQuery" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_PathAndQuery()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Port" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Port()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Query" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Query()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Scheme" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Scheme()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Segments" attrib="0" ptype="System.String[]">
                <methods>
                  <method name="get_Segments()" attrib="2182" returntype="System.String[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserEscaped" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UserEscaped()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserInfo" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_UserInfo()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Canonicalize()" attrib="452" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="CheckHostName(System.String)" attrib="150" static="true" returntype="System.UriHostNameType">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CheckSchemeName(System.String)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="schemeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CheckSecurity()" attrib="452" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Compare(System.Uri, System.Uri, System.UriComponents, System.UriFormat, System.StringComparison)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="uri1" position="0" attrib="0" type="System.Uri" />
                  <parameter name="uri2" position="1" attrib="0" type="System.Uri" />
                  <parameter name="partsToCompare" position="2" attrib="0" type="System.UriComponents" />
                  <parameter name="compareFormat" position="3" attrib="0" type="System.UriFormat" />
                  <parameter name="comparisonType" position="4" attrib="0" type="System.StringComparison" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="16582" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="comparand" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Escape()" attrib="452" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="EscapeDataString(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="stringToEscape" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="EscapeString(System.String)" attrib="148" static="true" returntype="System.String">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The method has been deprecated. Please use GetComponents() or static EscapeUriString() to escape a Uri component or a string. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="str" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="EscapeUriString(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="stringToEscape" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="FromHex(System.Char)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="digit" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="GetComponents(System.UriComponents, System.UriFormat)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="components" position="0" attrib="0" type="System.UriComponents" />
                  <parameter name="format" position="1" attrib="0" type="System.UriFormat" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="16582" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="GetLeftPart(System.UriPartial)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="part" position="0" attrib="0" type="System.UriPartial" />
                </parameters>
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16516" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="HexEscape(System.Char)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="character" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="HexUnescape(System.String, System.Int32&amp;)" attrib="150" static="true" returntype="System.Char">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" direction="ref" />
                </parameters>
              </method>
              <method name="IsBadFileSystemCharacter(System.Char)" attrib="452" virtual="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="character" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="IsBaseOf(System.Uri)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="IsExcludedCharacter(System.Char)" attrib="148" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="character" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="IsHexDigit(System.Char)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="character" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="IsHexEncoding(System.String, System.Int32)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IsReservedCharacter(System.Char)" attrib="452" virtual="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="character" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="IsWellFormedOriginalString()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="IsWellFormedUriString(System.String, System.UriKind)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="uriString" position="0" attrib="0" type="System.String" />
                  <parameter name="uriKind" position="1" attrib="0" type="System.UriKind" />
                </parameters>
              </method>
              <method name="MakeRelative(System.Uri)" attrib="134" returntype="System.String">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The method has been deprecated. Please use MakeRelativeUri(Uri uri). http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="toUri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="MakeRelativeUri(System.Uri)" attrib="134" returntype="System.Uri">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="Parse()" attrib="452" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="ToString()" attrib="16582" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="TryCreate(System.String, System.UriKind, out System.Uri&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="uriString" position="0" attrib="0" type="System.String" />
                  <parameter name="uriKind" position="1" attrib="0" type="System.UriKind" />
                  <parameter name="result" position="2" attrib="2" type="System.Uri" direction="out" />
                </parameters>
              </method>
              <method name="TryCreate(System.Uri, System.String, out System.Uri&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="baseUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="relativeUri" position="1" attrib="0" type="System.String" />
                  <parameter name="result" position="2" attrib="2" type="System.Uri" direction="out" />
                </parameters>
              </method>
              <method name="TryCreate(System.Uri, System.Uri, out System.Uri&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="baseUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="relativeUri" position="1" attrib="0" type="System.Uri" />
                  <parameter name="result" position="2" attrib="2" type="System.Uri" direction="out" />
                </parameters>
              </method>
              <method name="Unescape(System.String)" attrib="452" virtual="true" returntype="System.String">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The method has been deprecated. Please use GetComponents() or static UnescapeDataString() to unescape a Uri component or a string. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="path" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UnescapeDataString(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="stringToUnescape" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="op_Equality(System.Uri, System.Uri)" attrib="18582" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="uri1" position="0" attrib="0" type="System.Uri" />
                  <parameter name="uri2" position="1" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="op_Inequality(System.Uri, System.Uri)" attrib="18582" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="uri1" position="0" attrib="0" type="System.Uri" />
                  <parameter name="uri2" position="1" attrib="0" type="System.Uri" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UriBuilder" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Uri)" attrib="6278">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="schemeName" position="0" attrib="0" type="System.String" />
                  <parameter name="hostName" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="scheme" position="0" attrib="0" type="System.String" />
                  <parameter name="host" position="1" attrib="0" type="System.String" />
                  <parameter name="portNumber" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.Int32, System.String)" attrib="6278">
                <parameters>
                  <parameter name="scheme" position="0" attrib="0" type="System.String" />
                  <parameter name="host" position="1" attrib="0" type="System.String" />
                  <parameter name="port" position="2" attrib="0" type="System.Int32" />
                  <parameter name="pathValue" position="3" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.Int32, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="scheme" position="0" attrib="0" type="System.String" />
                  <parameter name="host" position="1" attrib="0" type="System.String" />
                  <parameter name="port" position="2" attrib="0" type="System.Int32" />
                  <parameter name="path" position="3" attrib="0" type="System.String" />
                  <parameter name="extraValue" position="4" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Fragment" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Fragment()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Fragment(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Host" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Host()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Host(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Password" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Password()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Password(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Path" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Path()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Path(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Port" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Port()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Port(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Query" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Query()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Query(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Scheme" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Scheme()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Scheme(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Uri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_Uri()" attrib="2182" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_UserName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_UserName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="rparam" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="UriComponents" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AbsoluteUri" attrib="32854" fieldtype="System.UriComponents" value="127" />
              <field name="Fragment" attrib="32854" fieldtype="System.UriComponents" value="64" />
              <field name="Host" attrib="32854" fieldtype="System.UriComponents" value="4" />
              <field name="HostAndPort" attrib="32854" fieldtype="System.UriComponents" value="132" />
              <field name="HttpRequestUrl" attrib="32854" fieldtype="System.UriComponents" value="61" />
              <field name="KeepDelimiter" attrib="32854" fieldtype="System.UriComponents" value="1073741824" />
              <field name="NormalizedHost" attrib="32854" fieldtype="System.UriComponents" value="256" />
              <field name="Path" attrib="32854" fieldtype="System.UriComponents" value="16" />
              <field name="PathAndQuery" attrib="32854" fieldtype="System.UriComponents" value="48" />
              <field name="Port" attrib="32854" fieldtype="System.UriComponents" value="8" />
              <field name="Query" attrib="32854" fieldtype="System.UriComponents" value="32" />
              <field name="Scheme" attrib="32854" fieldtype="System.UriComponents" value="1" />
              <field name="SchemeAndServer" attrib="32854" fieldtype="System.UriComponents" value="13" />
              <field name="SerializationInfoString" attrib="32854" fieldtype="System.UriComponents" value="-2147483648" />
              <field name="StrongAuthority" attrib="32854" fieldtype="System.UriComponents" value="134" />
              <field name="StrongPort" attrib="32854" fieldtype="System.UriComponents" value="128" />
              <field name="UserInfo" attrib="32854" fieldtype="System.UriComponents" value="2" />
            </fields>
          </class>
          <class name="UriFormat" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="SafeUnescaped" attrib="32854" fieldtype="System.UriFormat" value="3" />
              <field name="Unescaped" attrib="32854" fieldtype="System.UriFormat" value="2" />
              <field name="UriEscaped" attrib="32854" fieldtype="System.UriFormat" value="1" />
            </fields>
          </class>
          <class name="UriFormatException" type="class" base="System.FormatException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="textString" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="textString" position="0" attrib="0" type="System.String" />
                  <parameter name="e" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="UriHostNameType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Basic" attrib="32854" fieldtype="System.UriHostNameType" value="1" />
              <field name="Dns" attrib="32854" fieldtype="System.UriHostNameType" value="2" />
              <field name="IPv4" attrib="32854" fieldtype="System.UriHostNameType" value="3" />
              <field name="IPv6" attrib="32854" fieldtype="System.UriHostNameType" value="4" />
              <field name="Unknown" attrib="32854" fieldtype="System.UriHostNameType" value="0" />
            </fields>
          </class>
          <class name="UriIdnScope" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="All" attrib="32854" fieldtype="System.UriIdnScope" value="2" />
              <field name="AllExceptIntranet" attrib="32854" fieldtype="System.UriIdnScope" value="1" />
              <field name="None" attrib="32854" fieldtype="System.UriIdnScope" value="0" />
            </fields>
          </class>
          <class name="UriKind" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Absolute" attrib="32854" fieldtype="System.UriKind" value="1" />
              <field name="Relative" attrib="32854" fieldtype="System.UriKind" value="2" />
              <field name="RelativeOrAbsolute" attrib="32854" fieldtype="System.UriKind" value="0" />
            </fields>
          </class>
          <class name="UriParser" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetComponents(System.Uri, System.UriComponents, System.UriFormat)" attrib="452" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="components" position="1" attrib="0" type="System.UriComponents" />
                  <parameter name="format" position="2" attrib="0" type="System.UriFormat" />
                </parameters>
              </method>
              <method name="InitializeAndValidate(System.Uri, out System.UriFormatException&amp;)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="parsingError" position="1" attrib="2" type="System.UriFormatException" direction="out" />
                </parameters>
              </method>
              <method name="IsBaseOf(System.Uri, System.Uri)" attrib="452" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="baseUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="relativeUri" position="1" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="IsKnownScheme(System.String)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="schemeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsWellFormedOriginalString(System.Uri)" attrib="452" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="OnNewUri()" attrib="452" virtual="true" returntype="System.UriParser">
                <parameters />
              </method>
              <method name="OnRegister(System.String, System.Int32)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="schemeName" position="0" attrib="0" type="System.String" />
                  <parameter name="defaultPort" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Register(System.UriParser, System.String, System.Int32)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="uriParser" position="0" attrib="0" type="System.UriParser" />
                  <parameter name="schemeName" position="1" attrib="0" type="System.String" />
                  <parameter name="defaultPort" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Resolve(System.Uri, System.Uri, out System.UriFormatException&amp;)" attrib="452" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="baseUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="relativeUri" position="1" attrib="0" type="System.Uri" />
                  <parameter name="parsingError" position="2" attrib="2" type="System.UriFormatException" direction="out" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UriPartial" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Authority" attrib="32854" fieldtype="System.UriPartial" value="1" />
              <field name="Path" attrib="32854" fieldtype="System.UriPartial" value="2" />
              <field name="Query" attrib="32854" fieldtype="System.UriPartial" value="3" />
              <field name="Scheme" attrib="32854" fieldtype="System.UriPartial" value="0" />
            </fields>
          </class>
          <class name="UriTypeConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.CodeDom.Compiler">
        <classes>
          <class name="GeneratedCodeAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="Inherited" value="False" />
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="tool" position="0" attrib="0" type="System.String" />
                  <parameter name="version" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Tool" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Tool()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Version" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Version()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IndentedTextWriter" type="class" base="System.IO.TextWriter" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <fields>
              <field name="DefaultTabString" attrib="32854" fieldtype="System.String" value="    " />
            </fields>
            <constructors>
              <constructor name=".ctor(System.IO.TextWriter)" attrib="6278">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.TextWriter, System.String)" attrib="6278">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                  <parameter name="tabString" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Encoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_Encoding()" attrib="2246" virtual="true" is-override="true" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Indent" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Indent()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Indent(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="InnerWriter" attrib="0" ptype="System.IO.TextWriter">
                <methods>
                  <method name="get_InnerWriter()" attrib="2182" returntype="System.IO.TextWriter">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NewLine" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_NewLine()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_NewLine(System.String)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Flush()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="OutputTabs()" attrib="452" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Write(System.Boolean)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Write(System.Char)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="Write(System.Char[])" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Char[]" />
                </parameters>
              </method>
              <method name="Write(System.Double)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Double" />
                </parameters>
              </method>
              <method name="Write(System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Write(System.Int64)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="Write(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Write(System.Single)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Single" />
                </parameters>
              </method>
              <method name="Write(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="s" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Write(System.String, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="arg0" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Write(System.String, System.Object[])" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="arg" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Write(System.Char[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Char[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Write(System.String, System.Object, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="arg0" position="1" attrib="0" type="System.Object" />
                  <parameter name="arg1" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteLine()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="WriteLine(System.Boolean)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="WriteLine(System.Char)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="WriteLine(System.Char[])" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Char[]" />
                </parameters>
              </method>
              <method name="WriteLine(System.Double)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Double" />
                </parameters>
              </method>
              <method name="WriteLine(System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="WriteLine(System.Int64)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="WriteLine(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteLine(System.Single)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Single" />
                </parameters>
              </method>
              <method name="WriteLine(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="s" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.UInt32)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.UInt32" />
                </parameters>
              </method>
              <method name="WriteLine(System.String, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="arg0" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteLine(System.String, System.Object[])" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="arg" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="WriteLine(System.Char[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Char[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="WriteLine(System.String, System.Object, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="arg0" position="1" attrib="0" type="System.Object" />
                  <parameter name="arg1" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteLineNoTabs(System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="s" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Collections.Concurrent">
        <classes>
          <class name="BlockingCollection`1" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Count = {Count}, Type = {_collection}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Collections.Concurrent.BlockingCollectionDebugView`1" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.IDisposable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.Concurrent.IProducerConsumerCollection`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Concurrent.IProducerConsumerCollection`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="boundedCapacity" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Concurrent.IProducerConsumerCollection`1[T], System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Concurrent.IProducerConsumerCollection`1[T]" />
                  <parameter name="boundedCapacity" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="BoundedCapacity" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_BoundedCapacity()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsAddingCompleted" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsAddingCompleted()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsCompleted" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsCompleted()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(T)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="Add(T, System.Threading.CancellationToken)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                  <parameter name="cancellationToken" position="1" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="AddToAny(System.Collections.Concurrent.BlockingCollection`1[T][], T)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="collections" position="0" attrib="0" type="System.Collections.Concurrent.BlockingCollection`1[T][]" />
                  <parameter name="item" position="1" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="AddToAny(System.Collections.Concurrent.BlockingCollection`1[T][], T, System.Threading.CancellationToken)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="collections" position="0" attrib="0" type="System.Collections.Concurrent.BlockingCollection`1[T][]" />
                  <parameter name="item" position="1" attrib="0" type="T" />
                  <parameter name="cancellationToken" position="2" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="CompleteAdding()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="CopyTo(T[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetConsumingEnumerable()" attrib="134" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <parameters />
              </method>
              <method name="GetConsumingEnumerable(System.Threading.CancellationToken)" attrib="134" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.IteratorStateMachineAttribute" />
                </attributes>
                <parameters>
                  <parameter name="cancellationToken" position="0" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="Take()" attrib="134" returntype="T">
                <parameters />
              </method>
              <method name="Take(System.Threading.CancellationToken)" attrib="134" returntype="T">
                <parameters>
                  <parameter name="cancellationToken" position="0" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="TakeFromAny(System.Collections.Concurrent.BlockingCollection`1[T][], out T&amp;)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="collections" position="0" attrib="0" type="System.Collections.Concurrent.BlockingCollection`1[T][]" />
                  <parameter name="item" position="1" attrib="2" type="T" direction="out" />
                </parameters>
              </method>
              <method name="TakeFromAny(System.Collections.Concurrent.BlockingCollection`1[T][], out T&amp;, System.Threading.CancellationToken)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="collections" position="0" attrib="0" type="System.Collections.Concurrent.BlockingCollection`1[T][]" />
                  <parameter name="item" position="1" attrib="2" type="T" direction="out" />
                  <parameter name="cancellationToken" position="2" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="ToArray()" attrib="134" returntype="T[]">
                <parameters />
              </method>
              <method name="TryAdd(T)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="TryAdd(T, System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                  <parameter name="millisecondsTimeout" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="TryAdd(T, System.TimeSpan)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                  <parameter name="timeout" position="1" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="TryAdd(T, System.Int32, System.Threading.CancellationToken)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                  <parameter name="millisecondsTimeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="cancellationToken" position="2" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="TryAddToAny(System.Collections.Concurrent.BlockingCollection`1[T][], T)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="collections" position="0" attrib="0" type="System.Collections.Concurrent.BlockingCollection`1[T][]" />
                  <parameter name="item" position="1" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="TryAddToAny(System.Collections.Concurrent.BlockingCollection`1[T][], T, System.Int32)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="collections" position="0" attrib="0" type="System.Collections.Concurrent.BlockingCollection`1[T][]" />
                  <parameter name="item" position="1" attrib="0" type="T" />
                  <parameter name="millisecondsTimeout" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="TryAddToAny(System.Collections.Concurrent.BlockingCollection`1[T][], T, System.TimeSpan)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="collections" position="0" attrib="0" type="System.Collections.Concurrent.BlockingCollection`1[T][]" />
                  <parameter name="item" position="1" attrib="0" type="T" />
                  <parameter name="timeout" position="2" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="TryAddToAny(System.Collections.Concurrent.BlockingCollection`1[T][], T, System.Int32, System.Threading.CancellationToken)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="collections" position="0" attrib="0" type="System.Collections.Concurrent.BlockingCollection`1[T][]" />
                  <parameter name="item" position="1" attrib="0" type="T" />
                  <parameter name="millisecondsTimeout" position="2" attrib="0" type="System.Int32" />
                  <parameter name="cancellationToken" position="3" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="TryTake(out T&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="2" type="T" direction="out" />
                </parameters>
              </method>
              <method name="TryTake(out T&amp;, System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="2" type="T" direction="out" />
                  <parameter name="millisecondsTimeout" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="TryTake(out T&amp;, System.TimeSpan)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="2" type="T" direction="out" />
                  <parameter name="timeout" position="1" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="TryTake(out T&amp;, System.Int32, System.Threading.CancellationToken)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="2" type="T" direction="out" />
                  <parameter name="millisecondsTimeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="cancellationToken" position="2" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="TryTakeFromAny(System.Collections.Concurrent.BlockingCollection`1[T][], out T&amp;)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="collections" position="0" attrib="0" type="System.Collections.Concurrent.BlockingCollection`1[T][]" />
                  <parameter name="item" position="1" attrib="2" type="T" direction="out" />
                </parameters>
              </method>
              <method name="TryTakeFromAny(System.Collections.Concurrent.BlockingCollection`1[T][], out T&amp;, System.Int32)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="collections" position="0" attrib="0" type="System.Collections.Concurrent.BlockingCollection`1[T][]" />
                  <parameter name="item" position="1" attrib="2" type="T" direction="out" />
                  <parameter name="millisecondsTimeout" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="TryTakeFromAny(System.Collections.Concurrent.BlockingCollection`1[T][], out T&amp;, System.TimeSpan)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="collections" position="0" attrib="0" type="System.Collections.Concurrent.BlockingCollection`1[T][]" />
                  <parameter name="item" position="1" attrib="2" type="T" direction="out" />
                  <parameter name="timeout" position="2" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="TryTakeFromAny(System.Collections.Concurrent.BlockingCollection`1[T][], out T&amp;, System.Int32, System.Threading.CancellationToken)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="collections" position="0" attrib="0" type="System.Collections.Concurrent.BlockingCollection`1[T][]" />
                  <parameter name="item" position="1" attrib="2" type="T" direction="out" />
                  <parameter name="millisecondsTimeout" position="2" attrib="0" type="System.Int32" />
                  <parameter name="cancellationToken" position="3" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ConcurrentBag`1" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Count = {Count}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Collections.Concurrent.IProducerConsumerCollectionDebugView`1" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Concurrent.IProducerConsumerCollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsEmpty" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsEmpty()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(T)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="Clear()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="CopyTo(T[], System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.Generic.IEnumerator`1[T]">
                <parameters />
              </method>
              <method name="ToArray()" attrib="486" virtual="true" returntype="T[]">
                <parameters />
              </method>
              <method name="TryPeek(out T&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="result" position="0" attrib="2" type="T" direction="out" />
                </parameters>
              </method>
              <method name="TryTake(out T&amp;)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="result" position="0" attrib="2" type="T" direction="out" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Collections.Generic">
        <classes>
          <class name="ISet`1" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <methods>
              <method name="Add(T)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="ExceptWith(System.Collections.Generic.IEnumerable`1[T])" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IntersectWith(System.Collections.Generic.IEnumerable`1[T])" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IsProperSubsetOf(System.Collections.Generic.IEnumerable`1[T])" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IsProperSupersetOf(System.Collections.Generic.IEnumerable`1[T])" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IsSubsetOf(System.Collections.Generic.IEnumerable`1[T])" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IsSupersetOf(System.Collections.Generic.IEnumerable`1[T])" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="Overlaps(System.Collections.Generic.IEnumerable`1[T])" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="SetEquals(System.Collections.Generic.IEnumerable`1[T])" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="SymmetricExceptWith(System.Collections.Generic.IEnumerable`1[T])" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="UnionWith(System.Collections.Generic.IEnumerable`1[T])" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="LinkedListNode`1" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(T)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="List" attrib="0" ptype="System.Collections.Generic.LinkedList`1[T]">
                <methods>
                  <method name="get_List()" attrib="2182" returntype="System.Collections.Generic.LinkedList`1[T]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Next" attrib="0" ptype="System.Collections.Generic.LinkedListNode`1[T]">
                <methods>
                  <method name="get_Next()" attrib="2182" returntype="System.Collections.Generic.LinkedListNode`1[T]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Previous" attrib="0" ptype="System.Collections.Generic.LinkedListNode`1[T]">
                <methods>
                  <method name="get_Previous()" attrib="2182" returntype="System.Collections.Generic.LinkedListNode`1[T]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="T">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="T">
                    <parameters />
                  </method>
                  <method name="set_Value(T)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="LinkedList`1" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Count = {Count}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Collections.Generic.ICollectionDebugView`1" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Runtime.Serialization.IDeserializationCallback" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="First" attrib="0" ptype="System.Collections.Generic.LinkedListNode`1[T]">
                <methods>
                  <method name="get_First()" attrib="2182" returntype="System.Collections.Generic.LinkedListNode`1[T]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Last" attrib="0" ptype="System.Collections.Generic.LinkedListNode`1[T]">
                <methods>
                  <method name="get_Last()" attrib="2182" returntype="System.Collections.Generic.LinkedListNode`1[T]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddAfter(System.Collections.Generic.LinkedListNode`1[T], System.Collections.Generic.LinkedListNode`1[T])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1[T]" />
                  <parameter name="newNode" position="1" attrib="0" type="System.Collections.Generic.LinkedListNode`1[T]" />
                </parameters>
              </method>
              <method name="AddAfter(System.Collections.Generic.LinkedListNode`1[T], T)" attrib="134" returntype="System.Collections.Generic.LinkedListNode`1[T]">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1[T]" />
                  <parameter name="value" position="1" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="AddBefore(System.Collections.Generic.LinkedListNode`1[T], System.Collections.Generic.LinkedListNode`1[T])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1[T]" />
                  <parameter name="newNode" position="1" attrib="0" type="System.Collections.Generic.LinkedListNode`1[T]" />
                </parameters>
              </method>
              <method name="AddBefore(System.Collections.Generic.LinkedListNode`1[T], T)" attrib="134" returntype="System.Collections.Generic.LinkedListNode`1[T]">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1[T]" />
                  <parameter name="value" position="1" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="AddFirst(System.Collections.Generic.LinkedListNode`1[T])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1[T]" />
                </parameters>
              </method>
              <method name="AddFirst(T)" attrib="134" returntype="System.Collections.Generic.LinkedListNode`1[T]">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="AddLast(System.Collections.Generic.LinkedListNode`1[T])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1[T]" />
                </parameters>
              </method>
              <method name="AddLast(T)" attrib="134" returntype="System.Collections.Generic.LinkedListNode`1[T]">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(T)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="CopyTo(T[], System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Find(T)" attrib="134" returntype="System.Collections.Generic.LinkedListNode`1[T]">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="FindLast(T)" attrib="134" returntype="System.Collections.Generic.LinkedListNode`1[T]">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Generic.LinkedList`1+Enumerator[T]">
                <parameters />
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="OnDeserialization(System.Object)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Remove(System.Collections.Generic.LinkedListNode`1[T])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Collections.Generic.LinkedListNode`1[T]" />
                </parameters>
              </method>
              <method name="Remove(T)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="RemoveFirst()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="RemoveLast()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="Enumerator" type="struct" base="System.ValueType" sealed="true" serializable="true" charset="Ansi" layout="Sequential">
                <interfaces>
                  <interface name="System.Collections.Generic.IEnumerator`1[T]" />
                  <interface name="System.Collections.IEnumerator" />
                  <interface name="System.IDisposable" />
                  <interface name="System.Runtime.Serialization.IDeserializationCallback" />
                  <interface name="System.Runtime.Serialization.ISerializable" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Current" attrib="0" ptype="T">
                    <methods>
                      <method name="get_Current()" attrib="2534" virtual="true" returntype="T">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                    <parameters />
                  </method>
                  <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="Queue`1" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Count = {Count}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Collections.Generic.QueueDebugView`1" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Clear()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(T)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="CopyTo(T[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Dequeue()" attrib="134" returntype="T">
                <parameters />
              </method>
              <method name="Enqueue(T)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Generic.Queue`1+Enumerator[T]">
                <parameters />
              </method>
              <method name="Peek()" attrib="134" returntype="T">
                <parameters />
              </method>
              <method name="ToArray()" attrib="134" returntype="T[]">
                <parameters />
              </method>
              <method name="TrimExcess()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="TryDequeue(out T&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="result" position="0" attrib="2" type="T" direction="out" />
                </parameters>
              </method>
              <method name="TryPeek(out T&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="result" position="0" attrib="2" type="T" direction="out" />
                </parameters>
              </method>
            </methods>
            <classes>
              <class name="Enumerator" type="struct" base="System.ValueType" sealed="true" serializable="true" charset="Ansi" layout="Sequential">
                <interfaces>
                  <interface name="System.Collections.Generic.IEnumerator`1[T]" />
                  <interface name="System.Collections.IEnumerator" />
                  <interface name="System.IDisposable" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Current" attrib="0" ptype="T">
                    <methods>
                      <method name="get_Current()" attrib="2534" virtual="true" returntype="T">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                    <parameters />
                  </method>
                  <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="SortedDictionary`2" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Count = {Count}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Collections.Generic.IDictionaryDebugView`2" />
                </properties>
              </attribute>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]" />
              <interface name="System.Collections.Generic.IDictionary`2[TKey,TValue]" />
              <interface name="System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]" />
              <interface name="System.Collections.Generic.IReadOnlyDictionary`2[TKey,TValue]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IDictionary" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="TKey" attributes="0" />
              <generic-parameter name="TValue" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IComparer`1[TKey])" attrib="6278">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IDictionary`2[TKey,TValue])" attrib="6278">
                <parameters>
                  <parameter name="dictionary" position="0" attrib="0" type="System.Collections.Generic.IDictionary`2[TKey,TValue]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IDictionary`2[TKey,TValue], System.Collections.Generic.IComparer`1[TKey])" attrib="6278">
                <parameters>
                  <parameter name="dictionary" position="0" attrib="0" type="System.Collections.Generic.IDictionary`2[TKey,TValue]" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Comparer" attrib="0" ptype="System.Collections.Generic.IComparer`1[TKey]">
                <methods>
                  <method name="get_Comparer()" attrib="2182" returntype="System.Collections.Generic.IComparer`1[TKey]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="TValue" params="TKey">
                <methods>
                  <method name="get_Item(TKey)" attrib="2534" virtual="true" returntype="TValue">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="TKey" />
                    </parameters>
                  </method>
                  <method name="set_Item(TKey, TValue)" attrib="2534" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="TKey" />
                      <parameter name="value" position="1" attrib="0" type="TValue" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Keys" attrib="0" ptype="System.Collections.Generic.SortedDictionary`2+KeyCollection[TKey,TValue]">
                <methods>
                  <method name="get_Keys()" attrib="2182" returntype="System.Collections.Generic.SortedDictionary`2+KeyCollection[TKey,TValue]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Values" attrib="0" ptype="System.Collections.Generic.SortedDictionary`2+ValueCollection[TKey,TValue]">
                <methods>
                  <method name="get_Values()" attrib="2182" returntype="System.Collections.Generic.SortedDictionary`2+ValueCollection[TKey,TValue]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(TKey, TValue)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                  <parameter name="value" position="1" attrib="0" type="TValue" />
                </parameters>
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="ContainsKey(TKey)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                </parameters>
              </method>
              <method name="ContainsValue(TValue)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="TValue" />
                </parameters>
              </method>
              <method name="CopyTo(System.Collections.Generic.KeyValuePair`2[TKey,TValue][], System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Collections.Generic.KeyValuePair`2[TKey,TValue][]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Generic.SortedDictionary`2+Enumerator[TKey,TValue]">
                <parameters />
              </method>
              <method name="Remove(TKey)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                </parameters>
              </method>
              <method name="TryGetValue(TKey, out TValue&amp;)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                  <parameter name="value" position="1" attrib="2" type="TValue" direction="out" />
                </parameters>
              </method>
            </methods>
            <classes>
              <class name="Enumerator" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
                <interfaces>
                  <interface name="System.Collections.Generic.IEnumerator`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]" />
                  <interface name="System.Collections.IDictionaryEnumerator" />
                  <interface name="System.Collections.IEnumerator" />
                  <interface name="System.IDisposable" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TValue" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Current" attrib="0" ptype="System.Collections.Generic.KeyValuePair`2[TKey,TValue]">
                    <methods>
                      <method name="get_Current()" attrib="2534" virtual="true" returntype="System.Collections.Generic.KeyValuePair`2[TKey,TValue]">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                    <parameters />
                  </method>
                  <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="KeyCollection" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                    <properties>
                      <property name="Value" value="Count = {Count}" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="System.Collections.Generic.DictionaryKeyCollectionDebugView`2" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.Generic.ICollection`1[TKey]" />
                  <interface name="System.Collections.Generic.IEnumerable`1[TKey]" />
                  <interface name="System.Collections.Generic.IReadOnlyCollection`1[TKey]" />
                  <interface name="System.Collections.ICollection" />
                  <interface name="System.Collections.IEnumerable" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TValue" attributes="0" />
                </generic-parameters>
                <constructors>
                  <constructor name=".ctor(System.Collections.Generic.SortedDictionary`2[TKey,TValue])" attrib="6278">
                    <parameters>
                      <parameter name="dictionary" position="0" attrib="0" type="System.Collections.Generic.SortedDictionary`2[TKey,TValue]" />
                    </parameters>
                  </constructor>
                </constructors>
                <properties>
                  <property name="Count" attrib="0" ptype="System.Int32">
                    <methods>
                      <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="CopyTo(TKey[], System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="array" position="0" attrib="0" type="TKey[]" />
                      <parameter name="index" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator[TKey,TValue]">
                    <parameters />
                  </method>
                </methods>
                <classes>
                  <class name="Enumerator" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
                    <interfaces>
                      <interface name="System.Collections.Generic.IEnumerator`1[TKey]" />
                      <interface name="System.Collections.IEnumerator" />
                      <interface name="System.IDisposable" />
                    </interfaces>
                    <generic-parameters>
                      <generic-parameter name="TKey" attributes="0" />
                      <generic-parameter name="TValue" attributes="0" />
                    </generic-parameters>
                    <properties>
                      <property name="Current" attrib="0" ptype="TKey">
                        <methods>
                          <method name="get_Current()" attrib="2534" virtual="true" returntype="TKey">
                            <parameters />
                          </method>
                        </methods>
                      </property>
                    </properties>
                    <methods>
                      <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                        <parameters />
                      </method>
                      <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                        <parameters />
                      </method>
                    </methods>
                  </class>
                </classes>
              </class>
              <class name="ValueCollection" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                    <properties>
                      <property name="Value" value="Count = {Count}" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="System.Collections.Generic.DictionaryValueCollectionDebugView`2" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.Generic.ICollection`1[TValue]" />
                  <interface name="System.Collections.Generic.IEnumerable`1[TValue]" />
                  <interface name="System.Collections.Generic.IReadOnlyCollection`1[TValue]" />
                  <interface name="System.Collections.ICollection" />
                  <interface name="System.Collections.IEnumerable" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TValue" attributes="0" />
                </generic-parameters>
                <constructors>
                  <constructor name=".ctor(System.Collections.Generic.SortedDictionary`2[TKey,TValue])" attrib="6278">
                    <parameters>
                      <parameter name="dictionary" position="0" attrib="0" type="System.Collections.Generic.SortedDictionary`2[TKey,TValue]" />
                    </parameters>
                  </constructor>
                </constructors>
                <properties>
                  <property name="Count" attrib="0" ptype="System.Int32">
                    <methods>
                      <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="CopyTo(TValue[], System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="array" position="0" attrib="0" type="TValue[]" />
                      <parameter name="index" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator[TKey,TValue]">
                    <parameters />
                  </method>
                </methods>
                <classes>
                  <class name="Enumerator" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
                    <interfaces>
                      <interface name="System.Collections.Generic.IEnumerator`1[TValue]" />
                      <interface name="System.Collections.IEnumerator" />
                      <interface name="System.IDisposable" />
                    </interfaces>
                    <generic-parameters>
                      <generic-parameter name="TKey" attributes="0" />
                      <generic-parameter name="TValue" attributes="0" />
                    </generic-parameters>
                    <properties>
                      <property name="Current" attrib="0" ptype="TValue">
                        <methods>
                          <method name="get_Current()" attrib="2534" virtual="true" returntype="TValue">
                            <parameters />
                          </method>
                        </methods>
                      </property>
                    </properties>
                    <methods>
                      <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                        <parameters />
                      </method>
                      <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                        <parameters />
                      </method>
                    </methods>
                  </class>
                </classes>
              </class>
            </classes>
          </class>
          <class name="SortedList`2" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Count = {Count}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Collections.Generic.IDictionaryDebugView`2" />
                </properties>
              </attribute>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]" />
              <interface name="System.Collections.Generic.IDictionary`2[TKey,TValue]" />
              <interface name="System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]" />
              <interface name="System.Collections.Generic.IReadOnlyDictionary`2[TKey,TValue]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IDictionary" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="TKey" attributes="0" />
              <generic-parameter name="TValue" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IComparer`1[TKey])" attrib="6278">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IDictionary`2[TKey,TValue])" attrib="6278">
                <parameters>
                  <parameter name="dictionary" position="0" attrib="0" type="System.Collections.Generic.IDictionary`2[TKey,TValue]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IDictionary`2[TKey,TValue], System.Collections.Generic.IComparer`1[TKey])" attrib="6278">
                <parameters>
                  <parameter name="dictionary" position="0" attrib="0" type="System.Collections.Generic.IDictionary`2[TKey,TValue]" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Collections.Generic.IComparer`1[TKey])" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Capacity" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Capacity()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Capacity(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Comparer" attrib="0" ptype="System.Collections.Generic.IComparer`1[TKey]">
                <methods>
                  <method name="get_Comparer()" attrib="2182" returntype="System.Collections.Generic.IComparer`1[TKey]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="TValue" params="TKey">
                <methods>
                  <method name="get_Item(TKey)" attrib="2534" virtual="true" returntype="TValue">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="TKey" />
                    </parameters>
                  </method>
                  <method name="set_Item(TKey, TValue)" attrib="2534" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="TKey" />
                      <parameter name="value" position="1" attrib="0" type="TValue" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Keys" attrib="0" ptype="System.Collections.Generic.IList`1[TKey]">
                <methods>
                  <method name="get_Keys()" attrib="2182" returntype="System.Collections.Generic.IList`1[TKey]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Values" attrib="0" ptype="System.Collections.Generic.IList`1[TValue]">
                <methods>
                  <method name="get_Values()" attrib="2182" returntype="System.Collections.Generic.IList`1[TValue]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(TKey, TValue)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                  <parameter name="value" position="1" attrib="0" type="TValue" />
                </parameters>
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="ContainsKey(TKey)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                </parameters>
              </method>
              <method name="ContainsValue(TValue)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="TValue" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Generic.IEnumerator`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]">
                <parameters />
              </method>
              <method name="IndexOfKey(TKey)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                </parameters>
              </method>
              <method name="IndexOfValue(TValue)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="TValue" />
                </parameters>
              </method>
              <method name="Remove(TKey)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="TrimExcess()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="TryGetValue(TKey, out TValue&amp;)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                  <parameter name="value" position="1" attrib="2" type="TValue" direction="out" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SortedSet`1" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Count = {Count}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Collections.Generic.ICollectionDebugView`1" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.Generic.ISet`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Runtime.Serialization.IDeserializationCallback" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IComparer`1[T])" attrib="6278">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IComparer`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T], System.Collections.Generic.IComparer`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.Generic.IComparer`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Comparer" attrib="0" ptype="System.Collections.Generic.IComparer`1[T]">
                <methods>
                  <method name="get_Comparer()" attrib="2182" returntype="System.Collections.Generic.IComparer`1[T]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Max" attrib="0" ptype="T">
                <methods>
                  <method name="get_Max()" attrib="2182" returntype="T">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Min" attrib="0" ptype="T">
                <methods>
                  <method name="get_Min()" attrib="2182" returntype="T">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(T)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="Clear()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(T)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="CopyTo(T[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
              </method>
              <method name="CopyTo(T[], System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CopyTo(T[], System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CreateSetComparer()" attrib="150" static="true" returntype="System.Collections.Generic.IEqualityComparer`1[System.Collections.Generic.SortedSet`1[T]]">
                <parameters />
              </method>
              <method name="CreateSetComparer(System.Collections.Generic.IEqualityComparer`1[T])" attrib="150" static="true" returntype="System.Collections.Generic.IEqualityComparer`1[System.Collections.Generic.SortedSet`1[T]]">
                <parameters>
                  <parameter name="memberEqualityComparer" position="0" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[T]" />
                </parameters>
              </method>
              <method name="ExceptWith(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Generic.SortedSet`1+Enumerator[T]">
                <parameters />
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="GetViewBetween(T, T)" attrib="454" virtual="true" returntype="System.Collections.Generic.SortedSet`1[T]">
                <parameters>
                  <parameter name="lowerValue" position="0" attrib="0" type="T" />
                  <parameter name="upperValue" position="1" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="IntersectWith(System.Collections.Generic.IEnumerable`1[T])" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IsProperSubsetOf(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IsProperSupersetOf(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IsSubsetOf(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IsSupersetOf(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="OnDeserialization(System.Object)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Overlaps(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="Remove(T)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="RemoveWhere(System.Predicate`1[T])" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[T]" />
                </parameters>
              </method>
              <method name="Reverse()" attrib="134" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.IteratorStateMachineAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="SetEquals(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="SymmetricExceptWith(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="TryGetValue(T, out T&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="equalValue" position="0" attrib="0" type="T" />
                  <parameter name="actualValue" position="1" attrib="2" type="T" direction="out" />
                </parameters>
              </method>
              <method name="UnionWith(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
            </methods>
            <classes>
              <class name="Enumerator" type="struct" base="System.ValueType" sealed="true" serializable="true" charset="Ansi" layout="Sequential">
                <interfaces>
                  <interface name="System.Collections.Generic.IEnumerator`1[T]" />
                  <interface name="System.Collections.IEnumerator" />
                  <interface name="System.IDisposable" />
                  <interface name="System.Runtime.Serialization.IDeserializationCallback" />
                  <interface name="System.Runtime.Serialization.ISerializable" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Current" attrib="0" ptype="T">
                    <methods>
                      <method name="get_Current()" attrib="2534" virtual="true" returntype="T">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                    <parameters />
                  </method>
                  <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="Stack`1" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Count = {Count}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Collections.Generic.StackDebugView`1" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Clear()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(T)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="CopyTo(T[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Generic.Stack`1+Enumerator[T]">
                <parameters />
              </method>
              <method name="Peek()" attrib="134" returntype="T">
                <parameters />
              </method>
              <method name="Pop()" attrib="134" returntype="T">
                <parameters />
              </method>
              <method name="Push(T)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="ToArray()" attrib="134" returntype="T[]">
                <parameters />
              </method>
              <method name="TrimExcess()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="TryPeek(out T&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="result" position="0" attrib="2" type="T" direction="out" />
                </parameters>
              </method>
              <method name="TryPop(out T&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="result" position="0" attrib="2" type="T" direction="out" />
                </parameters>
              </method>
            </methods>
            <classes>
              <class name="Enumerator" type="struct" base="System.ValueType" sealed="true" serializable="true" charset="Ansi" layout="Sequential">
                <interfaces>
                  <interface name="System.Collections.Generic.IEnumerator`1[T]" />
                  <interface name="System.Collections.IEnumerator" />
                  <interface name="System.IDisposable" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Current" attrib="0" ptype="T">
                    <methods>
                      <method name="get_Current()" attrib="2534" virtual="true" returntype="T">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                    <parameters />
                  </method>
                  <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </class>
            </classes>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Collections.ObjectModel">
        <classes>
          <class name="ObservableCollection`1" type="class" base="System.Collections.ObjectModel.Collection`1[T]" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IList`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyList`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
              <interface name="System.Collections.Specialized.INotifyCollectionChanged" />
              <interface name="System.ComponentModel.INotifyPropertyChanged" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.List`1[T])" attrib="6278">
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="System.Collections.Generic.List`1[T]" />
                </parameters>
              </constructor>
            </constructors>
            <events>
              <event name="CollectionChanged" attrib="0" eventtype="System.Collections.Specialized.NotifyCollectionChangedEventHandler" />
              <event name="PropertyChanged" attrib="0" eventtype="System.ComponentModel.PropertyChangedEventHandler" />
            </events>
            <methods>
              <method name="BlockReentrancy()" attrib="132" returntype="System.IDisposable">
                <parameters />
              </method>
              <method name="CheckReentrancy()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="ClearItems()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="InsertItem(System.Int32, T)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="Move(System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="oldIndex" position="0" attrib="0" type="System.Int32" />
                  <parameter name="newIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="MoveItem(System.Int32, System.Int32)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="oldIndex" position="0" attrib="0" type="System.Int32" />
                  <parameter name="newIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
                </parameters>
              </method>
              <method name="OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.ComponentModel.PropertyChangedEventArgs" />
                </parameters>
              </method>
              <method name="RemoveItem(System.Int32)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SetItem(System.Int32, T)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="T" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ReadOnlyObservableCollection`1" type="class" base="System.Collections.ObjectModel.ReadOnlyCollection`1[T]" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IList`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyList`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
              <interface name="System.Collections.Specialized.INotifyCollectionChanged" />
              <interface name="System.ComponentModel.INotifyPropertyChanged" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Collections.ObjectModel.ObservableCollection`1[T])" attrib="6278">
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="System.Collections.ObjectModel.ObservableCollection`1[T]" />
                </parameters>
              </constructor>
            </constructors>
            <events>
              <event name="CollectionChanged" attrib="0" eventtype="System.Collections.Specialized.NotifyCollectionChangedEventHandler" />
              <event name="PropertyChanged" attrib="0" eventtype="System.ComponentModel.PropertyChangedEventHandler" />
            </events>
            <methods>
              <method name="OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="args" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
                </parameters>
              </method>
              <method name="OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="args" position="0" attrib="0" type="System.ComponentModel.PropertyChangedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Collections.Specialized">
        <classes>
          <class name="BitVector32" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Collections.Specialized.BitVector32)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Collections.Specialized.BitVector32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="data" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Data" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Data()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Int32" params="System.Collections.Specialized.BitVector32+Section">
                <methods>
                  <method name="get_Item(System.Collections.Specialized.BitVector32+Section)" attrib="2182" returntype="System.Int32">
                    <parameters>
                      <parameter name="section" position="0" attrib="0" type="System.Collections.Specialized.BitVector32+Section" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Collections.Specialized.BitVector32+Section, System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="section" position="0" attrib="0" type="System.Collections.Specialized.BitVector32+Section" />
                      <parameter name="value" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Boolean" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Boolean">
                    <parameters>
                      <parameter name="bit" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="bit" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateMask()" attrib="150" static="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="CreateMask(System.Int32)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="previous" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CreateSection(System.Int16)" attrib="150" static="true" returntype="System.Collections.Specialized.BitVector32+Section">
                <parameters>
                  <parameter name="maxValue" position="0" attrib="0" type="System.Int16" />
                </parameters>
              </method>
              <method name="CreateSection(System.Int16, System.Collections.Specialized.BitVector32+Section)" attrib="150" static="true" returntype="System.Collections.Specialized.BitVector32+Section">
                <parameters>
                  <parameter name="maxValue" position="0" attrib="0" type="System.Int16" />
                  <parameter name="previous" position="1" attrib="0" type="System.Collections.Specialized.BitVector32+Section" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="o" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="ToString(System.Collections.Specialized.BitVector32)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Collections.Specialized.BitVector32" />
                </parameters>
              </method>
            </methods>
            <classes>
              <class name="Section" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
                <properties>
                  <property name="Mask" attrib="0" ptype="System.Int16">
                    <methods>
                      <method name="get_Mask()" attrib="2182" returntype="System.Int16">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="Offset" attrib="0" ptype="System.Int16">
                    <methods>
                      <method name="get_Offset()" attrib="2182" returntype="System.Int16">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Equals(System.Collections.Specialized.BitVector32+Section)" attrib="134" returntype="System.Boolean">
                    <parameters>
                      <parameter name="obj" position="0" attrib="0" type="System.Collections.Specialized.BitVector32+Section" />
                    </parameters>
                  </method>
                  <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters>
                      <parameter name="o" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                  <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="ToString(System.Collections.Specialized.BitVector32+Section)" attrib="150" static="true" returntype="System.String">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Collections.Specialized.BitVector32+Section" />
                    </parameters>
                  </method>
                  <method name="op_Equality(System.Collections.Specialized.BitVector32+Section, System.Collections.Specialized.BitVector32+Section)" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters>
                      <parameter name="a" position="0" attrib="0" type="System.Collections.Specialized.BitVector32+Section" />
                      <parameter name="b" position="1" attrib="0" type="System.Collections.Specialized.BitVector32+Section" />
                    </parameters>
                  </method>
                  <method name="op_Inequality(System.Collections.Specialized.BitVector32+Section, System.Collections.Specialized.BitVector32+Section)" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters>
                      <parameter name="a" position="0" attrib="0" type="System.Collections.Specialized.BitVector32+Section" />
                      <parameter name="b" position="1" attrib="0" type="System.Collections.Specialized.BitVector32+Section" />
                    </parameters>
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="CollectionsUtil" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CreateCaseInsensitiveHashtable()" attrib="150" static="true" returntype="System.Collections.Hashtable">
                <parameters />
              </method>
              <method name="CreateCaseInsensitiveHashtable(System.Collections.IDictionary)" attrib="150" static="true" returntype="System.Collections.Hashtable">
                <parameters>
                  <parameter name="d" position="0" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="CreateCaseInsensitiveHashtable(System.Int32)" attrib="150" static="true" returntype="System.Collections.Hashtable">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CreateCaseInsensitiveSortedList()" attrib="150" static="true" returntype="System.Collections.SortedList">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="HybridDictionary" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IDictionary" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="caseInsensitive" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="initialSize" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="initialSize" position="0" attrib="0" type="System.Int32" />
                  <parameter name="caseInsensitive" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsFixedSize" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsFixedSize()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Object" params="System.Object">
                <methods>
                  <method name="get_Item(System.Object)" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Object, System.Object)" attrib="2534" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.Object" />
                      <parameter name="value" position="1" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Keys" attrib="0" ptype="System.Collections.ICollection">
                <methods>
                  <method name="get_Keys()" attrib="2534" virtual="true" returntype="System.Collections.ICollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Values" attrib="0" ptype="System.Collections.ICollection">
                <methods>
                  <method name="get_Values()" attrib="2534" virtual="true" returntype="System.Collections.ICollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Object, System.Object)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.Object)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IDictionaryEnumerator">
                <parameters />
              </method>
              <method name="Remove(System.Object)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="INotifyCollectionChanged" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <events>
              <event name="CollectionChanged" attrib="0" eventtype="System.Collections.Specialized.NotifyCollectionChangedEventHandler" />
            </events>
          </class>
          <class name="IOrderedDictionary" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IDictionary" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <properties>
              <property name="Item" attrib="0" ptype="System.Object" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="3526" abstract="true" virtual="true" returntype="System.Object">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, System.Object)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetEnumerator()" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.IDictionaryEnumerator">
                <parameters />
              </method>
              <method name="Insert(System.Int32, System.Object, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="key" position="1" attrib="0" type="System.Object" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ListDictionary" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IDictionary" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.IComparer)" attrib="6278">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsFixedSize" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsFixedSize()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Object" params="System.Object">
                <methods>
                  <method name="get_Item(System.Object)" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Object, System.Object)" attrib="2534" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.Object" />
                      <parameter name="value" position="1" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Keys" attrib="0" ptype="System.Collections.ICollection">
                <methods>
                  <method name="get_Keys()" attrib="2534" virtual="true" returntype="System.Collections.ICollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Values" attrib="0" ptype="System.Collections.ICollection">
                <methods>
                  <method name="get_Values()" attrib="2534" virtual="true" returntype="System.Collections.ICollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Object, System.Object)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.Object)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IDictionaryEnumerator">
                <parameters />
              </method>
              <method name="Remove(System.Object)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NameObjectCollectionBase" type="class" base="System.Object" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Runtime.Serialization.IDeserializationCallback" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.IEqualityComparer)" attrib="6276">
                <parameters>
                  <parameter name="equalityComparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6276">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.IHashCodeProvider, System.Collections.IComparer)" attrib="6276">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Please use NameObjectCollectionBase(IEqualityComparer) instead." />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="hashProvider" position="0" attrib="0" type="System.Collections.IHashCodeProvider" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Collections.IEqualityComparer)" attrib="6276">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                  <parameter name="equalityComparer" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Collections.IHashCodeProvider, System.Collections.IComparer)" attrib="6276">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Please use NameObjectCollectionBase(Int32, IEqualityComparer) instead." />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                  <parameter name="hashProvider" position="1" attrib="0" type="System.Collections.IHashCodeProvider" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2180" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IsReadOnly(System.Boolean)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Keys" attrib="0" ptype="System.Collections.Specialized.NameObjectCollectionBase+KeysCollection">
                <methods>
                  <method name="get_Keys()" attrib="2502" virtual="true" returntype="System.Collections.Specialized.NameObjectCollectionBase+KeysCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="BaseAdd(System.String, System.Object)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BaseClear()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="BaseGet(System.Int32)" attrib="132" returntype="System.Object">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="BaseGet(System.String)" attrib="132" returntype="System.Object">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="BaseGetAllKeys()" attrib="132" returntype="System.String[]">
                <parameters />
              </method>
              <method name="BaseGetAllValues()" attrib="132" returntype="System.Object[]">
                <parameters />
              </method>
              <method name="BaseGetAllValues(System.Type)" attrib="132" returntype="System.Object[]">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="BaseGetKey(System.Int32)" attrib="132" returntype="System.String">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="BaseHasKeys()" attrib="132" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="BaseRemove(System.String)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="BaseRemoveAt(System.Int32)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="BaseSet(System.Int32, System.Object)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BaseSet(System.String, System.Object)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="454" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16838" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="OnDeserialization(System.Object)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
            <classes>
              <class name="KeysCollection" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Reflection.DefaultMemberAttribute">
                    <properties>
                      <property name="MemberName" value="Item" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.ICollection" />
                  <interface name="System.Collections.IEnumerable" />
                </interfaces>
                <properties>
                  <property name="Count" attrib="0" ptype="System.Int32">
                    <methods>
                      <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="Item" attrib="0" ptype="System.String" params="System.Int32">
                    <methods>
                      <method name="get_Item(System.Int32)" attrib="2182" returntype="System.String">
                        <parameters>
                          <parameter name="index" position="0" attrib="0" type="System.Int32" />
                        </parameters>
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Get(System.Int32)" attrib="454" virtual="true" returntype="System.String">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IEnumerator">
                    <parameters />
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="NameValueCollection" type="class" base="System.Collections.Specialized.NameObjectCollectionBase" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Runtime.Serialization.IDeserializationCallback" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.IEqualityComparer)" attrib="6278">
                <parameters>
                  <parameter name="equalityComparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Specialized.NameValueCollection)" attrib="6278">
                <parameters>
                  <parameter name="col" position="0" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.IHashCodeProvider, System.Collections.IComparer)" attrib="6278">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Please use NameValueCollection(IEqualityComparer) instead." />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="hashProvider" position="0" attrib="0" type="System.Collections.IHashCodeProvider" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Collections.IEqualityComparer)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                  <parameter name="equalityComparer" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Collections.Specialized.NameValueCollection)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                  <parameter name="col" position="1" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Collections.IHashCodeProvider, System.Collections.IComparer)" attrib="6278">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Please use NameValueCollection(Int32, IEqualityComparer) instead." />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                  <parameter name="hashProvider" position="1" attrib="0" type="System.Collections.IHashCodeProvider" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AllKeys" attrib="0" ptype="System.String[]">
                <methods>
                  <method name="get_AllKeys()" attrib="2502" virtual="true" returntype="System.String[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.String" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.String">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.String" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2182" returntype="System.String">
                    <parameters>
                      <parameter name="name" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.String, System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="name" position="0" attrib="0" type="System.String" />
                      <parameter name="value" position="1" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Collections.Specialized.NameValueCollection)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="c" position="0" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </method>
              <method name="Add(System.String, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Clear()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="CopyTo(System.Array, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="dest" position="0" attrib="0" type="System.Array" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Get(System.Int32)" attrib="454" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Get(System.String)" attrib="454" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetKey(System.Int32)" attrib="454" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetValues(System.Int32)" attrib="454" virtual="true" returntype="System.String[]">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetValues(System.String)" attrib="454" virtual="true" returntype="System.String[]">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="HasKeys()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="InvalidateCachedArrays()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="Remove(System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Set(System.String, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NotifyCollectionChangedAction" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Add" attrib="32854" fieldtype="System.Collections.Specialized.NotifyCollectionChangedAction" value="0" />
              <field name="Move" attrib="32854" fieldtype="System.Collections.Specialized.NotifyCollectionChangedAction" value="3" />
              <field name="Remove" attrib="32854" fieldtype="System.Collections.Specialized.NotifyCollectionChangedAction" value="1" />
              <field name="Replace" attrib="32854" fieldtype="System.Collections.Specialized.NotifyCollectionChangedAction" value="2" />
              <field name="Reset" attrib="32854" fieldtype="System.Collections.Specialized.NotifyCollectionChangedAction" value="4" />
            </fields>
          </class>
          <class name="NotifyCollectionChangedEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Collections.Specialized.NotifyCollectionChangedAction)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedAction" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedAction" />
                  <parameter name="changedItems" position="1" attrib="0" type="System.Collections.IList" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedAction" />
                  <parameter name="changedItem" position="1" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Collections.IList)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedAction" />
                  <parameter name="newItems" position="1" attrib="0" type="System.Collections.IList" />
                  <parameter name="oldItems" position="2" attrib="0" type="System.Collections.IList" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedAction" />
                  <parameter name="changedItems" position="1" attrib="0" type="System.Collections.IList" />
                  <parameter name="startingIndex" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedAction" />
                  <parameter name="changedItem" position="1" attrib="0" type="System.Object" />
                  <parameter name="index" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedAction" />
                  <parameter name="newItem" position="1" attrib="0" type="System.Object" />
                  <parameter name="oldItem" position="2" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Collections.IList, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedAction" />
                  <parameter name="newItems" position="1" attrib="0" type="System.Collections.IList" />
                  <parameter name="oldItems" position="2" attrib="0" type="System.Collections.IList" />
                  <parameter name="startingIndex" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Int32, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedAction" />
                  <parameter name="changedItems" position="1" attrib="0" type="System.Collections.IList" />
                  <parameter name="index" position="2" attrib="0" type="System.Int32" />
                  <parameter name="oldIndex" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Int32, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedAction" />
                  <parameter name="changedItem" position="1" attrib="0" type="System.Object" />
                  <parameter name="index" position="2" attrib="0" type="System.Int32" />
                  <parameter name="oldIndex" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Object, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedAction" />
                  <parameter name="newItem" position="1" attrib="0" type="System.Object" />
                  <parameter name="oldItem" position="2" attrib="0" type="System.Object" />
                  <parameter name="index" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Action" attrib="0" ptype="System.Collections.Specialized.NotifyCollectionChangedAction">
                <methods>
                  <method name="get_Action()" attrib="2182" returntype="System.Collections.Specialized.NotifyCollectionChangedAction">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NewItems" attrib="0" ptype="System.Collections.IList">
                <methods>
                  <method name="get_NewItems()" attrib="2182" returntype="System.Collections.IList">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NewStartingIndex" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_NewStartingIndex()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OldItems" attrib="0" ptype="System.Collections.IList">
                <methods>
                  <method name="get_OldItems()" attrib="2182" returntype="System.Collections.IList">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OldStartingIndex" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_OldStartingIndex()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="NotifyCollectionChangedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="OrderedDictionary" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IDictionary" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.Specialized.IOrderedDictionary" />
              <interface name="System.Runtime.Serialization.IDeserializationCallback" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.IEqualityComparer)" attrib="6278">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Collections.IEqualityComparer)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Object" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, System.Object)" attrib="2534" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Object" params="System.Object">
                <methods>
                  <method name="get_Item(System.Object)" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Object, System.Object)" attrib="2534" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.Object" />
                      <parameter name="value" position="1" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Keys" attrib="0" ptype="System.Collections.ICollection">
                <methods>
                  <method name="get_Keys()" attrib="2534" virtual="true" returntype="System.Collections.ICollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Values" attrib="0" ptype="System.Collections.ICollection">
                <methods>
                  <method name="get_Values()" attrib="2534" virtual="true" returntype="System.Collections.ICollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Object, System.Object)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AsReadOnly()" attrib="134" returntype="System.Collections.Specialized.OrderedDictionary">
                <parameters />
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.Object)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="454" virtual="true" returntype="System.Collections.IDictionaryEnumerator">
                <parameters />
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16838" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="Insert(System.Int32, System.Object, System.Object)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="key" position="1" attrib="0" type="System.Object" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="OnDeserialization(System.Object)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Remove(System.Object)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="StringCollection" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.String" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.String">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.String)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AddRange(System.String[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String[]" />
                </parameters>
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CopyTo(System.String[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.String[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Specialized.StringEnumerator">
                <parameters />
              </method>
              <method name="IndexOf(System.String)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Insert(System.Int32, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Remove(System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="StringDictionary" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
                <properties>
                  <property name="SerializerTypeName" value="System.Diagnostics.Design.StringDictionaryCodeDomSerializer, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                  <property name="SerializerBaseTypeName" value="System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                </properties>
              </attribute>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.String" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2502" virtual="true" returntype="System.String">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.String, System.String)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.String" />
                      <parameter name="value" position="1" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Keys" attrib="0" ptype="System.Collections.ICollection">
                <methods>
                  <method name="get_Keys()" attrib="2502" virtual="true" returntype="System.Collections.ICollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_SyncRoot()" attrib="2502" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Values" attrib="0" ptype="System.Collections.ICollection">
                <methods>
                  <method name="get_Values()" attrib="2502" virtual="true" returntype="System.Collections.ICollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.String, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Clear()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="ContainsKey(System.String)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ContainsValue(System.String)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CopyTo(System.Array, System.Int32)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="454" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
              <method name="Remove(System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="StringEnumerator" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <properties>
              <property name="Current" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Current()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="MoveNext()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="Reset()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.ComponentModel">
        <classes>
          <class name="AddingNewEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="newObject" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="NewObject" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_NewObject()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                  <method name="set_NewObject(System.Object)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="AddingNewEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.AddingNewEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.AddingNewEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.AddingNewEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.AddingNewEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AmbientValueAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Byte)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Byte" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Char)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Char" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Double)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Double" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int16)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int16" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int64)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Single)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Single" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.String)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Value" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ArrayConverter" type="class" base="System.ComponentModel.CollectionConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="2" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AsyncCompletedEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API supports the .NET Framework infrastructure and is not intended to be used directly from your code." />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Exception, System.Boolean, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="error" position="0" attrib="0" type="System.Exception" />
                  <parameter name="cancelled" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="userState" position="2" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Cancelled" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_Cancelled()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Error" attrib="0" ptype="System.Exception">
                <attributes />
                <methods>
                  <method name="get_Error()" attrib="2182" returntype="System.Exception">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserState" attrib="0" ptype="System.Object">
                <attributes />
                <methods>
                  <method name="get_UserState()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="RaiseExceptionIfNecessary()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="AsyncCompletedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.AsyncCompletedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.AsyncCompletedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.AsyncCompletedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.AsyncCompletedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AsyncOperation" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="SynchronizationContext" attrib="0" ptype="System.Threading.SynchronizationContext">
                <methods>
                  <method name="get_SynchronizationContext()" attrib="2182" returntype="System.Threading.SynchronizationContext">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserSuppliedState" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_UserSuppliedState()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="OperationCompleted()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Post(System.Threading.SendOrPostCallback, System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="d" position="0" attrib="0" type="System.Threading.SendOrPostCallback" />
                  <parameter name="arg" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="PostOperationCompleted(System.Threading.SendOrPostCallback, System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="d" position="0" attrib="0" type="System.Threading.SendOrPostCallback" />
                  <parameter name="arg" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="~AsyncOperation()" attrib="196" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="AsyncOperationManager" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="SynchronizationContext" attrib="0" ptype="System.Threading.SynchronizationContext">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_SynchronizationContext()" attrib="2198" static="true" returntype="System.Threading.SynchronizationContext">
                    <parameters />
                  </method>
                  <method name="set_SynchronizationContext(System.Threading.SynchronizationContext)" attrib="18582" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Threading.SynchronizationContext" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateOperation(System.Object)" attrib="150" static="true" returntype="System.ComponentModel.AsyncOperation">
                <parameters>
                  <parameter name="userSuppliedState" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AttributeCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <fields>
              <field name="Empty" attrib="54" fieldtype="System.ComponentModel.AttributeCollection" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Attribute[])" attrib="6278">
                <parameters>
                  <parameter name="attributes" position="0" attrib="0" type="System.Attribute[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Attributes" attrib="0" ptype="System.Attribute[]">
                <methods>
                  <method name="get_Attributes()" attrib="2500" virtual="true" returntype="System.Attribute[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Attribute" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2502" virtual="true" returntype="System.Attribute">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Attribute" params="System.Type">
                <methods>
                  <method name="get_Item(System.Type)" attrib="2502" virtual="true" returntype="System.Attribute">
                    <parameters>
                      <parameter name="attributeType" position="0" attrib="0" type="System.Type" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Contains(System.Attribute)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="attribute" position="0" attrib="0" type="System.Attribute" />
                </parameters>
              </method>
              <method name="Contains(System.Attribute[])" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="attributes" position="0" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="FromExisting(System.ComponentModel.AttributeCollection, System.Attribute[])" attrib="150" static="true" returntype="System.ComponentModel.AttributeCollection">
                <parameters>
                  <parameter name="existing" position="0" attrib="0" type="System.ComponentModel.AttributeCollection" />
                  <parameter name="newAttributes" position="1" attrib="0" type="System.Attribute[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="GetDefaultAttribute(System.Type)" attrib="132" returntype="System.Attribute">
                <parameters>
                  <parameter name="attributeType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
              <method name="Matches(System.Attribute)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="attribute" position="0" attrib="0" type="System.Attribute" />
                </parameters>
              </method>
              <method name="Matches(System.Attribute[])" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="attributes" position="0" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AttributeProviderAttribute" type="class" base="System.Attribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Property" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                  <parameter name="propertyName" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="PropertyName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_PropertyName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="BackgroundWorker" type="class" base="System.ComponentModel.Component" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.DefaultEventAttribute">
                <properties>
                  <property name="Name" value="DoWork" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ComponentModel.IComponent" />
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="CancellationPending" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_CancellationPending()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsBusy" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_IsBusy()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WorkerReportsProgress" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_WorkerReportsProgress()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_WorkerReportsProgress(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="WorkerSupportsCancellation" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_WorkerSupportsCancellation()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_WorkerSupportsCancellation(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="DoWork" attrib="0" eventtype="System.ComponentModel.DoWorkEventHandler">
                <attributes />
              </event>
              <event name="ProgressChanged" attrib="0" eventtype="System.ComponentModel.ProgressChangedEventHandler">
                <attributes />
              </event>
              <event name="RunWorkerCompleted" attrib="0" eventtype="System.ComponentModel.RunWorkerCompletedEventHandler">
                <attributes />
              </event>
            </events>
            <methods>
              <method name="CancelAsync()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="OnDoWork(System.ComponentModel.DoWorkEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.ComponentModel.DoWorkEventArgs" />
                </parameters>
              </method>
              <method name="OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.ComponentModel.ProgressChangedEventArgs" />
                </parameters>
              </method>
              <method name="OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.ComponentModel.RunWorkerCompletedEventArgs" />
                </parameters>
              </method>
              <method name="ReportProgress(System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="percentProgress" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ReportProgress(System.Int32, System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="percentProgress" position="0" attrib="0" type="System.Int32" />
                  <parameter name="userState" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="RunWorkerAsync()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="RunWorkerAsync(System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="argument" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="BaseNumberConverter" type="class" base="System.ComponentModel.TypeConverter" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="t" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="BindableAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.BindableAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.BindableAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.BindableAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="bindable" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.BindableSupport)" attrib="6278">
                <parameters>
                  <parameter name="flags" position="0" attrib="0" type="System.ComponentModel.BindableSupport" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Boolean, System.ComponentModel.BindingDirection)" attrib="6278">
                <parameters>
                  <parameter name="bindable" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="direction" position="1" attrib="0" type="System.ComponentModel.BindingDirection" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.BindableSupport, System.ComponentModel.BindingDirection)" attrib="6278">
                <parameters>
                  <parameter name="flags" position="0" attrib="0" type="System.ComponentModel.BindableSupport" />
                  <parameter name="direction" position="1" attrib="0" type="System.ComponentModel.BindingDirection" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Bindable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Bindable()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Direction" attrib="0" ptype="System.ComponentModel.BindingDirection">
                <methods>
                  <method name="get_Direction()" attrib="2182" returntype="System.ComponentModel.BindingDirection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="BindableSupport" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Default" attrib="32854" fieldtype="System.ComponentModel.BindableSupport" value="2" />
              <field name="No" attrib="32854" fieldtype="System.ComponentModel.BindableSupport" value="0" />
              <field name="Yes" attrib="32854" fieldtype="System.ComponentModel.BindableSupport" value="1" />
            </fields>
          </class>
          <class name="BindingDirection" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="OneWay" attrib="32854" fieldtype="System.ComponentModel.BindingDirection" value="0" />
              <field name="TwoWay" attrib="32854" fieldtype="System.ComponentModel.BindingDirection" value="1" />
            </fields>
          </class>
          <class name="BindingList`1" type="class" base="System.Collections.ObjectModel.Collection`1[T]" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IList`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyList`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
              <interface name="System.ComponentModel.IBindingList" />
              <interface name="System.ComponentModel.ICancelAddNew" />
              <interface name="System.ComponentModel.IRaiseItemChangedEvents" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IList`1[T])" attrib="6278">
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="System.Collections.Generic.IList`1[T]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AllowEdit" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowEdit()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AllowEdit(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="AllowNew" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowNew()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AllowNew(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="AllowRemove" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowRemove()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AllowRemove(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsSortedCore" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSortedCore()" attrib="2500" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RaiseListChangedEvents" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_RaiseListChangedEvents()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_RaiseListChangedEvents(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SortDirectionCore" attrib="0" ptype="System.ComponentModel.ListSortDirection">
                <methods>
                  <method name="get_SortDirectionCore()" attrib="2500" virtual="true" returntype="System.ComponentModel.ListSortDirection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SortPropertyCore" attrib="0" ptype="System.ComponentModel.PropertyDescriptor">
                <methods>
                  <method name="get_SortPropertyCore()" attrib="2500" virtual="true" returntype="System.ComponentModel.PropertyDescriptor">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsChangeNotificationCore" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsChangeNotificationCore()" attrib="2500" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsSearchingCore" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsSearchingCore()" attrib="2500" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsSortingCore" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsSortingCore()" attrib="2500" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="AddingNew" attrib="0" eventtype="System.ComponentModel.AddingNewEventHandler" />
              <event name="ListChanged" attrib="0" eventtype="System.ComponentModel.ListChangedEventHandler" />
            </events>
            <methods>
              <method name="AddNew()" attrib="134" returntype="T">
                <parameters />
              </method>
              <method name="AddNewCore()" attrib="452" virtual="true" returntype="System.Object">
                <parameters />
              </method>
              <method name="ApplySortCore(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="prop" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                  <parameter name="direction" position="1" attrib="0" type="System.ComponentModel.ListSortDirection" />
                </parameters>
              </method>
              <method name="CancelNew(System.Int32)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="itemIndex" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ClearItems()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="EndNew(System.Int32)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="itemIndex" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="FindCore(System.ComponentModel.PropertyDescriptor, System.Object)" attrib="452" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="prop" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                  <parameter name="key" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="InsertItem(System.Int32, T)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="OnAddingNew(System.ComponentModel.AddingNewEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.ComponentModel.AddingNewEventArgs" />
                </parameters>
              </method>
              <method name="OnListChanged(System.ComponentModel.ListChangedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.ComponentModel.ListChangedEventArgs" />
                </parameters>
              </method>
              <method name="RemoveItem(System.Int32)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="RemoveSortCore()" attrib="452" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="ResetBindings()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="ResetItem(System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="position" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SetItem(System.Int32, T)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="T" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="BooleanConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.TypeConverter+StandardValuesCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="BrowsableAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.BrowsableAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.BrowsableAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.BrowsableAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="browsable" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Browsable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Browsable()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ByteConverter" type="class" base="System.ComponentModel.BaseNumberConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="CancelEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="cancel" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Cancel" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Cancel()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Cancel(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="CancelEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.CancelEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.CancelEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.CancelEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.CancelEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CategoryAttribute" type="class" base="System.Attribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="category" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Action" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_Action()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Appearance" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_Appearance()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Asynchronous" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_Asynchronous()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Behavior" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_Behavior()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Category" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Category()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Data" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_Data()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Default" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_Default()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Design" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_Design()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DragDrop" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_DragDrop()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Focus" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_Focus()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Format" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_Format()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Key" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_Key()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Layout" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_Layout()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Mouse" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_Mouse()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WindowStyle" attrib="0" ptype="System.ComponentModel.CategoryAttribute">
                <methods>
                  <method name="get_WindowStyle()" attrib="2198" static="true" returntype="System.ComponentModel.CategoryAttribute">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="GetLocalizedString(System.String)" attrib="452" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="CharConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CollectionChangeAction" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Add" attrib="32854" fieldtype="System.ComponentModel.CollectionChangeAction" value="1" />
              <field name="Refresh" attrib="32854" fieldtype="System.ComponentModel.CollectionChangeAction" value="3" />
              <field name="Remove" attrib="32854" fieldtype="System.ComponentModel.CollectionChangeAction" value="2" />
            </fields>
          </class>
          <class name="CollectionChangeEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.ComponentModel.CollectionChangeAction, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.ComponentModel.CollectionChangeAction" />
                  <parameter name="element" position="1" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Action" attrib="0" ptype="System.ComponentModel.CollectionChangeAction">
                <methods>
                  <method name="get_Action()" attrib="2502" virtual="true" returntype="System.ComponentModel.CollectionChangeAction">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Element" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Element()" attrib="2502" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="CollectionChangeEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.CollectionChangeEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.CollectionChangeEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.CollectionChangeEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.CollectionChangeEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CollectionConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="2" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ComplexBindingPropertiesAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.ComplexBindingPropertiesAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="dataSource" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="dataSource" position="0" attrib="0" type="System.String" />
                  <parameter name="dataMember" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="DataMember" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DataMember()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DataSource" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DataSource()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="Component" type="class" base="System.MarshalByRefObject" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.DesignerCategoryAttribute">
                <properties>
                  <property name="Category" value="Component" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.ClassInterfaceAttribute">
                <properties>
                  <property name="Value" value="AutoDispatch" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ComponentModel.IComponent" />
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="CanRaiseEvents" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanRaiseEvents()" attrib="2500" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Container" attrib="0" ptype="System.ComponentModel.IContainer">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Container()" attrib="2182" returntype="System.ComponentModel.IContainer">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DesignMode" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_DesignMode()" attrib="2180" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Events" attrib="0" ptype="System.ComponentModel.EventHandlerList">
                <methods>
                  <method name="get_Events()" attrib="2180" returntype="System.ComponentModel.EventHandlerList">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Site" attrib="0" ptype="System.ComponentModel.ISite">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Site()" attrib="2502" virtual="true" returntype="System.ComponentModel.ISite">
                    <parameters />
                  </method>
                  <method name="set_Site(System.ComponentModel.ISite)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.ISite" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="Disposed" attrib="0" eventtype="System.EventHandler">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
              </event>
            </events>
            <methods>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetService(System.Type)" attrib="452" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="service" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="~Component()" attrib="196" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ComponentCollection" type="class" base="System.Collections.ReadOnlyCollectionBase" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.ComponentModel.IComponent[])" attrib="6278">
                <parameters>
                  <parameter name="components" position="0" attrib="0" type="System.ComponentModel.IComponent[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Item" attrib="0" ptype="System.ComponentModel.IComponent" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2502" virtual="true" returntype="System.ComponentModel.IComponent">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.ComponentModel.IComponent" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2502" virtual="true" returntype="System.ComponentModel.IComponent">
                    <parameters>
                      <parameter name="name" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyTo(System.ComponentModel.IComponent[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.ComponentModel.IComponent[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ComponentConverter" type="class" base="System.ComponentModel.ReferenceConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="2" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ComponentEditor" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="EditComponent(System.Object)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EditComponent(System.ComponentModel.ITypeDescriptorContext, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="component" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ComponentResourceManager" type="class" base="System.Resources.ResourceManager" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="t" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyResources(System.Object, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="objectName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ApplyResources(System.Object, System.String, System.Globalization.CultureInfo)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="objectName" position="1" attrib="0" type="System.String" />
                  <parameter name="culture" position="2" attrib="0" type="System.Globalization.CultureInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Container" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.IContainer" />
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Components" attrib="0" ptype="System.ComponentModel.ComponentCollection">
                <methods>
                  <method name="get_Components()" attrib="2502" virtual="true" returntype="System.ComponentModel.ComponentCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.ComponentModel.IComponent)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                </parameters>
              </method>
              <method name="Add(System.ComponentModel.IComponent, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CreateSite(System.ComponentModel.IComponent, System.String)" attrib="452" virtual="true" returntype="System.ComponentModel.ISite">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetService(System.Type)" attrib="452" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="service" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Remove(System.ComponentModel.IComponent)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                </parameters>
              </method>
              <method name="RemoveWithoutUnsiting(System.ComponentModel.IComponent)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                </parameters>
              </method>
              <method name="ValidateName(System.ComponentModel.IComponent, System.String)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="~Container()" attrib="196" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ContainerFilterService" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="FilterComponents(System.ComponentModel.ComponentCollection)" attrib="454" virtual="true" returntype="System.ComponentModel.ComponentCollection">
                <parameters>
                  <parameter name="components" position="0" attrib="0" type="System.ComponentModel.ComponentCollection" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CultureInfoConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetCultureName(System.Globalization.CultureInfo)" attrib="452" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="culture" position="0" attrib="0" type="System.Globalization.CultureInfo" />
                </parameters>
              </method>
              <method name="GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.TypeConverter+StandardValuesCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CustomTypeDescriptor" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.ICustomTypeDescriptor" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.ComponentModel.ICustomTypeDescriptor)" attrib="6276">
                <parameters>
                  <parameter name="parent" position="0" attrib="0" type="System.ComponentModel.ICustomTypeDescriptor" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetAttributes()" attrib="454" virtual="true" returntype="System.ComponentModel.AttributeCollection">
                <parameters />
              </method>
              <method name="GetClassName()" attrib="454" virtual="true" returntype="System.String">
                <parameters />
              </method>
              <method name="GetComponentName()" attrib="454" virtual="true" returntype="System.String">
                <parameters />
              </method>
              <method name="GetConverter()" attrib="454" virtual="true" returntype="System.ComponentModel.TypeConverter">
                <parameters />
              </method>
              <method name="GetDefaultEvent()" attrib="454" virtual="true" returntype="System.ComponentModel.EventDescriptor">
                <parameters />
              </method>
              <method name="GetDefaultProperty()" attrib="454" virtual="true" returntype="System.ComponentModel.PropertyDescriptor">
                <parameters />
              </method>
              <method name="GetEditor(System.Type)" attrib="454" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="editorBaseType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetEvents()" attrib="454" virtual="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters />
              </method>
              <method name="GetEvents(System.Attribute[])" attrib="454" virtual="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters>
                  <parameter name="attributes" position="0" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetProperties()" attrib="454" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters />
              </method>
              <method name="GetProperties(System.Attribute[])" attrib="454" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="attributes" position="0" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetPropertyOwner(System.ComponentModel.PropertyDescriptor)" attrib="454" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="pd" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DataErrorsChangedEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="propertyName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="PropertyName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_PropertyName()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="DataObjectAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="DataObject" attrib="54" fieldtype="System.ComponentModel.DataObjectAttribute" />
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.DataObjectAttribute" />
              <field name="NonDataObject" attrib="54" fieldtype="System.ComponentModel.DataObjectAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="isDataObject" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsDataObject" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsDataObject()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DataObjectFieldAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Property" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="primaryKey" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Boolean, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="primaryKey" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="isIdentity" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Boolean, System.Boolean, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="primaryKey" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="isIdentity" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="isNullable" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Boolean, System.Boolean, System.Boolean, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="primaryKey" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="isIdentity" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="isNullable" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="length" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsIdentity" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsIdentity()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsNullable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsNullable()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Length()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PrimaryKey" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_PrimaryKey()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DataObjectMethodAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.ComponentModel.DataObjectMethodType)" attrib="6278">
                <parameters>
                  <parameter name="methodType" position="0" attrib="0" type="System.ComponentModel.DataObjectMethodType" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.DataObjectMethodType, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="methodType" position="0" attrib="0" type="System.ComponentModel.DataObjectMethodType" />
                  <parameter name="isDefault" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsDefault" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsDefault()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MethodType" attrib="0" ptype="System.ComponentModel.DataObjectMethodType">
                <methods>
                  <method name="get_MethodType()" attrib="2182" returntype="System.ComponentModel.DataObjectMethodType">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="Match(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DataObjectMethodType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Delete" attrib="32854" fieldtype="System.ComponentModel.DataObjectMethodType" value="4" />
              <field name="Fill" attrib="32854" fieldtype="System.ComponentModel.DataObjectMethodType" value="0" />
              <field name="Insert" attrib="32854" fieldtype="System.ComponentModel.DataObjectMethodType" value="3" />
              <field name="Select" attrib="32854" fieldtype="System.ComponentModel.DataObjectMethodType" value="1" />
              <field name="Update" attrib="32854" fieldtype="System.ComponentModel.DataObjectMethodType" value="2" />
            </fields>
          </class>
          <class name="DateTimeConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DateTimeOffsetConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DecimalConverter" type="class" base="System.ComponentModel.BaseNumberConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DefaultBindingPropertyAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.DefaultBindingPropertyAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DefaultEventAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.DefaultEventAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DefaultPropertyAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.DefaultPropertyAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DefaultValueAttribute" type="class" base="System.Attribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Byte)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Byte" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Char)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Char" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Double)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Double" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int16)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int16" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int64)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Single)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Single" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.String)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Value" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Value()" attrib="2502" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="SetValue(System.Object)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DescriptionAttribute" type="class" base="System.Attribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.DescriptionAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="description" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Description" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Description()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DescriptionValue" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DescriptionValue()" attrib="2180" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_DescriptionValue(System.String)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DesignOnlyAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.DesignOnlyAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.DesignOnlyAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.DesignOnlyAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="isDesignOnly" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsDesignOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsDesignOnly()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DesignTimeVisibleAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Interface, Class" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.DesignTimeVisibleAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.DesignTimeVisibleAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.DesignTimeVisibleAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="visible" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Visible" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Visible()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DesignerAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Interface, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="designerTypeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="designerType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="designerTypeName" position="0" attrib="0" type="System.String" />
                  <parameter name="designerBaseTypeName" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Type)" attrib="6278">
                <parameters>
                  <parameter name="designerTypeName" position="0" attrib="0" type="System.String" />
                  <parameter name="designerBaseType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.Type)" attrib="6278">
                <parameters>
                  <parameter name="designerType" position="0" attrib="0" type="System.Type" />
                  <parameter name="designerBaseType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="DesignerBaseTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DesignerBaseTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DesignerTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DesignerTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TypeId" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_TypeId()" attrib="2246" virtual="true" is-override="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DesignerCategoryAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Component" attrib="54" fieldtype="System.ComponentModel.DesignerCategoryAttribute" />
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.DesignerCategoryAttribute" />
              <field name="Form" attrib="54" fieldtype="System.ComponentModel.DesignerCategoryAttribute" />
              <field name="Generic" attrib="54" fieldtype="System.ComponentModel.DesignerCategoryAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="category" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Category" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Category()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TypeId" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_TypeId()" attrib="2246" virtual="true" is-override="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DesignerSerializationVisibility" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Content" attrib="32854" fieldtype="System.ComponentModel.DesignerSerializationVisibility" value="2" />
              <field name="Hidden" attrib="32854" fieldtype="System.ComponentModel.DesignerSerializationVisibility" value="0" />
              <field name="Visible" attrib="32854" fieldtype="System.ComponentModel.DesignerSerializationVisibility" value="1" />
            </fields>
          </class>
          <class name="DesignerSerializationVisibilityAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Event, Field, Property, Method" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Content" attrib="54" fieldtype="System.ComponentModel.DesignerSerializationVisibilityAttribute" />
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.DesignerSerializationVisibilityAttribute" />
              <field name="Hidden" attrib="54" fieldtype="System.ComponentModel.DesignerSerializationVisibilityAttribute" />
              <field name="Visible" attrib="54" fieldtype="System.ComponentModel.DesignerSerializationVisibilityAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.ComponentModel.DesignerSerializationVisibility)" attrib="6278">
                <parameters>
                  <parameter name="visibility" position="0" attrib="0" type="System.ComponentModel.DesignerSerializationVisibility" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Visibility" attrib="0" ptype="System.ComponentModel.DesignerSerializationVisibility">
                <methods>
                  <method name="get_Visibility()" attrib="2182" returntype="System.ComponentModel.DesignerSerializationVisibility">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DisplayNameAttribute" type="class" base="System.Attribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Event, Property, Method, Class" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.DisplayNameAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="displayName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="DisplayName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DisplayName()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DisplayNameValue" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DisplayNameValue()" attrib="2180" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_DisplayNameValue(System.String)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DoWorkEventArgs" type="class" base="System.ComponentModel.CancelEventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="argument" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Argument" attrib="0" ptype="System.Object">
                <attributes />
                <methods>
                  <method name="get_Argument()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Result" attrib="0" ptype="System.Object">
                <attributes />
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                  <method name="set_Result(System.Object)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="DoWorkEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.DoWorkEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.DoWorkEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.DoWorkEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.DoWorkEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DoubleConverter" type="class" base="System.ComponentModel.BaseNumberConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="EditorAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                  <parameter name="baseTypeName" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Type)" attrib="6278">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                  <parameter name="baseType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="baseType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="EditorBaseTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_EditorBaseTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EditorTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_EditorTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TypeId" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_TypeId()" attrib="2246" virtual="true" is-override="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="EditorBrowsableAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Delegate, Interface, Event, Field, Property, Method, Constructor, Enum, Struct, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.ComponentModel.EditorBrowsableState)" attrib="6278">
                <parameters>
                  <parameter name="state" position="0" attrib="0" type="System.ComponentModel.EditorBrowsableState" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="State" attrib="0" ptype="System.ComponentModel.EditorBrowsableState">
                <methods>
                  <method name="get_State()" attrib="2182" returntype="System.ComponentModel.EditorBrowsableState">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="EditorBrowsableState" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Advanced" attrib="32854" fieldtype="System.ComponentModel.EditorBrowsableState" value="2" />
              <field name="Always" attrib="32854" fieldtype="System.ComponentModel.EditorBrowsableState" value="0" />
              <field name="Never" attrib="32854" fieldtype="System.ComponentModel.EditorBrowsableState" value="1" />
            </fields>
          </class>
          <class name="EnumConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Comparer" attrib="0" ptype="System.Collections.IComparer">
                <methods>
                  <method name="get_Comparer()" attrib="2500" virtual="true" returntype="System.Collections.IComparer">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EnumType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_EnumType()" attrib="2180" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Values" attrib="0" ptype="System.ComponentModel.TypeConverter+StandardValuesCollection">
                <methods>
                  <method name="get_Values()" attrib="2180" returntype="System.ComponentModel.TypeConverter+StandardValuesCollection">
                    <parameters />
                  </method>
                  <method name="set_Values(System.ComponentModel.TypeConverter+StandardValuesCollection)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.TypeConverter+StandardValuesCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.TypeConverter+StandardValuesCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="EventDescriptor" type="class" base="System.ComponentModel.MemberDescriptor" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.ComponentModel.MemberDescriptor)" attrib="6276">
                <parameters>
                  <parameter name="descr" position="0" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.MemberDescriptor, System.Attribute[])" attrib="6276">
                <parameters>
                  <parameter name="descr" position="0" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                  <parameter name="attrs" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Attribute[])" attrib="6276">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="attrs" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ComponentType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ComponentType()" attrib="3526" abstract="true" virtual="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EventType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_EventType()" attrib="3526" abstract="true" virtual="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsMulticast" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsMulticast()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddEventHandler(System.Object, System.Delegate)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="value" position="1" attrib="0" type="System.Delegate" />
                </parameters>
              </method>
              <method name="RemoveEventHandler(System.Object, System.Delegate)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="value" position="1" attrib="0" type="System.Delegate" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="EventDescriptorCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <fields>
              <field name="Empty" attrib="54" fieldtype="System.ComponentModel.EventDescriptorCollection" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.ComponentModel.EventDescriptor[])" attrib="6278">
                <parameters>
                  <parameter name="events" position="0" attrib="0" type="System.ComponentModel.EventDescriptor[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.EventDescriptor[], System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="events" position="0" attrib="0" type="System.ComponentModel.EventDescriptor[]" />
                  <parameter name="readOnly" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.ComponentModel.EventDescriptor" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2502" virtual="true" returntype="System.ComponentModel.EventDescriptor">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.ComponentModel.EventDescriptor" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2502" virtual="true" returntype="System.ComponentModel.EventDescriptor">
                    <parameters>
                      <parameter name="name" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.ComponentModel.EventDescriptor)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.EventDescriptor" />
                </parameters>
              </method>
              <method name="Clear()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.ComponentModel.EventDescriptor)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.EventDescriptor" />
                </parameters>
              </method>
              <method name="Find(System.String, System.Boolean)" attrib="454" virtual="true" returntype="System.ComponentModel.EventDescriptor">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="ignoreCase" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
              <method name="IndexOf(System.ComponentModel.EventDescriptor)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.EventDescriptor" />
                </parameters>
              </method>
              <method name="Insert(System.Int32, System.ComponentModel.EventDescriptor)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="value" position="1" attrib="0" type="System.ComponentModel.EventDescriptor" />
                </parameters>
              </method>
              <method name="InternalSort(System.Collections.IComparer)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="sorter" position="0" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="InternalSort(System.String[])" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="names" position="0" attrib="0" type="System.String[]" />
                </parameters>
              </method>
              <method name="Remove(System.ComponentModel.EventDescriptor)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.EventDescriptor" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Sort()" attrib="454" virtual="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters />
              </method>
              <method name="Sort(System.Collections.IComparer)" attrib="454" virtual="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Sort(System.String[])" attrib="454" virtual="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters>
                  <parameter name="names" position="0" attrib="0" type="System.String[]" />
                </parameters>
              </method>
              <method name="Sort(System.String[], System.Collections.IComparer)" attrib="454" virtual="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters>
                  <parameter name="names" position="0" attrib="0" type="System.String[]" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="EventHandlerList" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Item" attrib="0" ptype="System.Delegate" params="System.Object">
                <methods>
                  <method name="get_Item(System.Object)" attrib="2182" returntype="System.Delegate">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Object, System.Delegate)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.Object" />
                      <parameter name="value" position="1" attrib="0" type="System.Delegate" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddHandler(System.Object, System.Delegate)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                  <parameter name="value" position="1" attrib="0" type="System.Delegate" />
                </parameters>
              </method>
              <method name="AddHandlers(System.ComponentModel.EventHandlerList)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="listToAddFrom" position="0" attrib="0" type="System.ComponentModel.EventHandlerList" />
                </parameters>
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="RemoveHandler(System.Object, System.Delegate)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                  <parameter name="value" position="1" attrib="0" type="System.Delegate" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ExpandableObjectConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="2" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ExtenderProvidedPropertyAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="ExtenderProperty" attrib="0" ptype="System.ComponentModel.PropertyDescriptor">
                <methods>
                  <method name="get_ExtenderProperty()" attrib="2182" returntype="System.ComponentModel.PropertyDescriptor">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Provider" attrib="0" ptype="System.ComponentModel.IExtenderProvider">
                <methods>
                  <method name="get_Provider()" attrib="2182" returntype="System.ComponentModel.IExtenderProvider">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReceiverType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReceiverType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="GuidConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="HandledEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="defaultHandledValue" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Handled" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Handled()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Handled(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="HandledEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.HandledEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.HandledEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.HandledEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.HandledEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IBindingList" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <properties>
              <property name="AllowEdit" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowEdit()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AllowNew" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowNew()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AllowRemove" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowRemove()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSorted" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSorted()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SortDirection" attrib="0" ptype="System.ComponentModel.ListSortDirection">
                <methods>
                  <method name="get_SortDirection()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.ListSortDirection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SortProperty" attrib="0" ptype="System.ComponentModel.PropertyDescriptor">
                <methods>
                  <method name="get_SortProperty()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.PropertyDescriptor">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsChangeNotification" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsChangeNotification()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsSearching" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsSearching()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsSorting" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsSorting()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="ListChanged" attrib="0" eventtype="System.ComponentModel.ListChangedEventHandler" />
            </events>
            <methods>
              <method name="AddIndex(System.ComponentModel.PropertyDescriptor)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="property" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                </parameters>
              </method>
              <method name="AddNew()" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters />
              </method>
              <method name="ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="property" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                  <parameter name="direction" position="1" attrib="0" type="System.ComponentModel.ListSortDirection" />
                </parameters>
              </method>
              <method name="Find(System.ComponentModel.PropertyDescriptor, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="property" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                  <parameter name="key" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="RemoveIndex(System.ComponentModel.PropertyDescriptor)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="property" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                </parameters>
              </method>
              <method name="RemoveSort()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="IBindingListView" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
              <interface name="System.ComponentModel.IBindingList" />
            </interfaces>
            <properties>
              <property name="Filter" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Filter()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Filter(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SortDescriptions" attrib="0" ptype="System.ComponentModel.ListSortDescriptionCollection">
                <methods>
                  <method name="get_SortDescriptions()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.ListSortDescriptionCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsAdvancedSorting" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsAdvancedSorting()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsFiltering" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsFiltering()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ApplySort(System.ComponentModel.ListSortDescriptionCollection)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sorts" position="0" attrib="0" type="System.ComponentModel.ListSortDescriptionCollection" />
                </parameters>
              </method>
              <method name="RemoveFilter()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ICancelAddNew" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="CancelNew(System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="itemIndex" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="EndNew(System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="itemIndex" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IChangeTracking" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="IsChanged" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsChanged()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AcceptChanges()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="IComNativeDescriptorHandler" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ObsoleteAttribute">
                <properties>
                  <property name="Message" value="This interface has been deprecated. Add a TypeDescriptionProvider to handle type TypeDescriptor.ComObjectType instead.  http://go.microsoft.com/fwlink/?linkid=14202" />
                </properties>
              </attribute>
            </attributes>
            <methods>
              <method name="GetAttributes(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.AttributeCollection">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetClassName(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetConverter(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.TypeConverter">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetDefaultEvent(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.EventDescriptor">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetDefaultProperty(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.PropertyDescriptor">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetEditor(System.Object, System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="baseEditorType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetEvents(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetEvents(System.Object, System.Attribute[])" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetName(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetProperties(System.Object, System.Attribute[])" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetPropertyValue(System.Object, System.Int32, System.Boolean&amp;)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="dispid" position="1" attrib="0" type="System.Int32" />
                  <parameter name="success" position="2" attrib="0" type="System.Boolean" direction="ref" />
                </parameters>
              </method>
              <method name="GetPropertyValue(System.Object, System.String, System.Boolean&amp;)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="propertyName" position="1" attrib="0" type="System.String" />
                  <parameter name="success" position="2" attrib="0" type="System.Boolean" direction="ref" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IComponent" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
                <properties>
                  <property name="Reloadable" value="True" />
                  <property name="SerializerTypeName" value="System.ComponentModel.Design.Serialization.RootCodeDomSerializer, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                  <property name="SerializerBaseTypeName" value="System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                </properties>
              </attribute>
              <attribute name="System.ComponentModel.DesignerAttribute">
                <properties>
                  <property name="DesignerBaseTypeName" value="System.ComponentModel.Design.IDesigner" />
                  <property name="DesignerTypeName" value="System.ComponentModel.Design.ComponentDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                </properties>
              </attribute>
              <attribute name="System.ComponentModel.DesignerAttribute">
                <properties>
                  <property name="DesignerBaseTypeName" value="System.ComponentModel.Design.IRootDesigner" />
                  <property name="DesignerTypeName" value="System.Windows.Forms.Design.ComponentDocumentDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                </properties>
              </attribute>
              <attribute name="System.ComponentModel.TypeConverterAttribute">
                <properties>
                  <property name="ConverterTypeName" value="System.ComponentModel.ComponentConverter" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <properties>
              <property name="Site" attrib="0" ptype="System.ComponentModel.ISite">
                <methods>
                  <method name="get_Site()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.ISite">
                    <parameters />
                  </method>
                  <method name="set_Site(System.ComponentModel.ISite)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.ISite" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="Disposed" attrib="0" eventtype="System.EventHandler" />
            </events>
          </class>
          <class name="IContainer" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <properties>
              <property name="Components" attrib="0" ptype="System.ComponentModel.ComponentCollection">
                <methods>
                  <method name="get_Components()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.ComponentCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.ComponentModel.IComponent)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                </parameters>
              </method>
              <method name="Add(System.ComponentModel.IComponent, System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Remove(System.ComponentModel.IComponent)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ICustomTypeDescriptor" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetAttributes()" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.AttributeCollection">
                <parameters />
              </method>
              <method name="GetClassName()" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters />
              </method>
              <method name="GetComponentName()" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters />
              </method>
              <method name="GetConverter()" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.TypeConverter">
                <parameters />
              </method>
              <method name="GetDefaultEvent()" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.EventDescriptor">
                <parameters />
              </method>
              <method name="GetDefaultProperty()" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.PropertyDescriptor">
                <parameters />
              </method>
              <method name="GetEditor(System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="editorBaseType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetEvents()" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters />
              </method>
              <method name="GetEvents(System.Attribute[])" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters>
                  <parameter name="attributes" position="0" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetProperties()" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters />
              </method>
              <method name="GetProperties(System.Attribute[])" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="attributes" position="0" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetPropertyOwner(System.ComponentModel.PropertyDescriptor)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="pd" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IDataErrorInfo" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Error" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Error()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.String" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters>
                      <parameter name="columnName" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IEditableObject" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="BeginEdit()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="CancelEdit()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="EndEdit()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="IExtenderProvider" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="CanExtend(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="extendee" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IIntellisenseBuilder" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Show(System.String, System.String, System.String&amp;)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="language" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                  <parameter name="newValue" position="2" attrib="0" type="System.String" direction="ref" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IListSource" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.EditorAttribute">
                <properties>
                  <property name="EditorBaseTypeName" value="System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                  <property name="EditorTypeName" value="System.Windows.Forms.Design.DataSourceListEditor, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                </properties>
              </attribute>
              <attribute name="System.ComponentModel.MergablePropertyAttribute">
                <properties>
                  <property name="AllowMerge" value="False" />
                </properties>
              </attribute>
              <attribute name="System.ComponentModel.TypeConverterAttribute">
                <properties>
                  <property name="ConverterTypeName" value="System.Windows.Forms.Design.DataSourceConverter, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="ContainsListCollection" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_ContainsListCollection()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetList()" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.IList">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="INestedContainer" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.IContainer" />
              <interface name="System.IDisposable" />
            </interfaces>
            <properties>
              <property name="Owner" attrib="0" ptype="System.ComponentModel.IComponent">
                <methods>
                  <method name="get_Owner()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.IComponent">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="INestedSite" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.ISite" />
              <interface name="System.IServiceProvider" />
            </interfaces>
            <properties>
              <property name="FullName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FullName()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="INotifyDataErrorInfo" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="HasErrors" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasErrors()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="ErrorsChanged" attrib="0" eventtype="System.EventHandler`1[System.ComponentModel.DataErrorsChangedEventArgs]" />
            </events>
            <methods>
              <method name="GetErrors(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.IEnumerable">
                <parameters>
                  <parameter name="propertyName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="INotifyPropertyChanged" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <events>
              <event name="PropertyChanged" attrib="0" eventtype="System.ComponentModel.PropertyChangedEventHandler" />
            </events>
          </class>
          <class name="INotifyPropertyChanging" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <events>
              <event name="PropertyChanging" attrib="0" eventtype="System.ComponentModel.PropertyChangingEventHandler" />
            </events>
          </class>
          <class name="IRaiseItemChangedEvents" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="RaisesItemChangedEvents" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_RaisesItemChangedEvents()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IRevertibleChangeTracking" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.IChangeTracking" />
            </interfaces>
            <methods>
              <method name="RejectChanges()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ISite" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IServiceProvider" />
            </interfaces>
            <properties>
              <property name="Component" attrib="0" ptype="System.ComponentModel.IComponent">
                <methods>
                  <method name="get_Component()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.IComponent">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Container" attrib="0" ptype="System.ComponentModel.IContainer">
                <methods>
                  <method name="get_Container()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.IContainer">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DesignMode" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_DesignMode()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Name(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ISupportInitialize" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes />
            <methods>
              <method name="BeginInit()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="EndInit()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ISupportInitializeNotification" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.ISupportInitialize" />
            </interfaces>
            <properties>
              <property name="IsInitialized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsInitialized()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="Initialized" attrib="0" eventtype="System.EventHandler" />
            </events>
          </class>
          <class name="ISynchronizeInvoke" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="InvokeRequired" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_InvokeRequired()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="BeginInvoke(System.Delegate, System.Object[])" attrib="17862" abstract="true" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Delegate" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Delegate, System.Object[])" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Delegate" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITypeDescriptorContext" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IServiceProvider" />
            </interfaces>
            <properties>
              <property name="Container" attrib="0" ptype="System.ComponentModel.IContainer">
                <methods>
                  <method name="get_Container()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.IContainer">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Instance" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Instance()" attrib="3526" abstract="true" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PropertyDescriptor" attrib="0" ptype="System.ComponentModel.PropertyDescriptor">
                <methods>
                  <method name="get_PropertyDescriptor()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.PropertyDescriptor">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="OnComponentChanged()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="OnComponentChanging()" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ITypedList" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetItemProperties(System.ComponentModel.PropertyDescriptor[])" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="listAccessors" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor[]" />
                </parameters>
              </method>
              <method name="GetListName(System.ComponentModel.PropertyDescriptor[])" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="listAccessors" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ImmutableObjectAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.ImmutableObjectAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.ImmutableObjectAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.ImmutableObjectAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="immutable" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Immutable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Immutable()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="InheritanceAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Event, Field, Property" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.InheritanceAttribute" />
              <field name="Inherited" attrib="54" fieldtype="System.ComponentModel.InheritanceAttribute" />
              <field name="InheritedReadOnly" attrib="54" fieldtype="System.ComponentModel.InheritanceAttribute" />
              <field name="NotInherited" attrib="54" fieldtype="System.ComponentModel.InheritanceAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.ComponentModel.InheritanceLevel)" attrib="6278">
                <parameters>
                  <parameter name="inheritanceLevel" position="0" attrib="0" type="System.ComponentModel.InheritanceLevel" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="InheritanceLevel" attrib="0" ptype="System.ComponentModel.InheritanceLevel">
                <methods>
                  <method name="get_InheritanceLevel()" attrib="2182" returntype="System.ComponentModel.InheritanceLevel">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="InheritanceLevel" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Inherited" attrib="32854" fieldtype="System.ComponentModel.InheritanceLevel" value="1" />
              <field name="InheritedReadOnly" attrib="32854" fieldtype="System.ComponentModel.InheritanceLevel" value="2" />
              <field name="NotInherited" attrib="32854" fieldtype="System.ComponentModel.InheritanceLevel" value="3" />
            </fields>
          </class>
          <class name="InitializationEventAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="eventName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="EventName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_EventName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="InstallerTypeAttribute" type="class" base="System.Attribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="installerType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="InstallerType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_InstallerType()" attrib="2502" virtual="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="InstanceCreationEditor" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Text" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Text()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="instanceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Int16Converter" type="class" base="System.ComponentModel.BaseNumberConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="Int32Converter" type="class" base="System.ComponentModel.BaseNumberConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="Int64Converter" type="class" base="System.ComponentModel.BaseNumberConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="InvalidAsynchronousStateException" type="class" base="System.ArgumentException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="InvalidEnumArgumentException" type="class" base="System.ArgumentException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Int32, System.Type)" attrib="6278">
                <parameters>
                  <parameter name="argumentName" position="0" attrib="0" type="System.String" />
                  <parameter name="invalidValue" position="1" attrib="0" type="System.Int32" />
                  <parameter name="enumClass" position="2" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="LicFileLicenseProvider" type="class" base="System.ComponentModel.LicenseProvider" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetKey(System.Type)" attrib="452" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetLicense(System.ComponentModel.LicenseContext, System.Type, System.Object, System.Boolean)" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.License">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.LicenseContext" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                  <parameter name="instance" position="2" attrib="0" type="System.Object" />
                  <parameter name="allowExceptions" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="IsKeyValid(System.String, System.Type)" attrib="452" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="License" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="LicenseKey" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_LicenseKey()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Dispose()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="LicenseContext" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IServiceProvider" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="UsageMode" attrib="0" ptype="System.ComponentModel.LicenseUsageMode">
                <methods>
                  <method name="get_UsageMode()" attrib="2502" virtual="true" returntype="System.ComponentModel.LicenseUsageMode">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetSavedLicenseKey(System.Type, System.Reflection.Assembly)" attrib="454" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="resourceAssembly" position="1" attrib="0" type="System.Reflection.Assembly" />
                </parameters>
              </method>
              <method name="GetService(System.Type)" attrib="454" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="SetSavedLicenseKey(System.Type, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="key" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="LicenseException" type="class" base="System.SystemException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.Object, System.String)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.Object, System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="innerException" position="3" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="LicensedType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_LicensedType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16582" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="LicenseManager" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="CurrentContext" attrib="0" ptype="System.ComponentModel.LicenseContext">
                <methods>
                  <method name="get_CurrentContext()" attrib="2198" static="true" returntype="System.ComponentModel.LicenseContext">
                    <parameters />
                  </method>
                  <method name="set_CurrentContext(System.ComponentModel.LicenseContext)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.LicenseContext" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UsageMode" attrib="0" ptype="System.ComponentModel.LicenseUsageMode">
                <methods>
                  <method name="get_UsageMode()" attrib="2198" static="true" returntype="System.ComponentModel.LicenseUsageMode">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateWithContext(System.Type, System.ComponentModel.LicenseContext)" attrib="150" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="creationContext" position="1" attrib="0" type="System.ComponentModel.LicenseContext" />
                </parameters>
              </method>
              <method name="CreateWithContext(System.Type, System.ComponentModel.LicenseContext, System.Object[])" attrib="150" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="creationContext" position="1" attrib="0" type="System.ComponentModel.LicenseContext" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
              <method name="IsLicensed(System.Type)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="IsValid(System.Type)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="IsValid(System.Type, System.Object, out System.ComponentModel.License&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                  <parameter name="license" position="2" attrib="2" type="System.ComponentModel.License" direction="out" />
                </parameters>
              </method>
              <method name="LockContext(System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="contextUser" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="UnlockContext(System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="contextUser" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Validate(System.Type)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Validate(System.Type, System.Object)" attrib="150" static="true" returntype="System.ComponentModel.License">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="LicenseProvider" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetLicense(System.ComponentModel.LicenseContext, System.Type, System.Object, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.License">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.LicenseContext" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                  <parameter name="instance" position="2" attrib="0" type="System.Object" />
                  <parameter name="allowExceptions" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="LicenseProviderAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.LicenseProviderAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="LicenseProvider" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_LicenseProvider()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TypeId" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_TypeId()" attrib="2246" virtual="true" is-override="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="LicenseUsageMode" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Designtime" attrib="32854" fieldtype="System.ComponentModel.LicenseUsageMode" value="1" />
              <field name="Runtime" attrib="32854" fieldtype="System.ComponentModel.LicenseUsageMode" value="0" />
            </fields>
          </class>
          <class name="ListBindableAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.ListBindableAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.ListBindableAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.ListBindableAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="listBindable" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.BindableSupport)" attrib="6278">
                <parameters>
                  <parameter name="flags" position="0" attrib="0" type="System.ComponentModel.BindableSupport" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ListBindable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_ListBindable()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ListChangedEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.ComponentModel.ListChangedType, System.ComponentModel.PropertyDescriptor)" attrib="6278">
                <parameters>
                  <parameter name="listChangedType" position="0" attrib="0" type="System.ComponentModel.ListChangedType" />
                  <parameter name="propDesc" position="1" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.ListChangedType, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="listChangedType" position="0" attrib="0" type="System.ComponentModel.ListChangedType" />
                  <parameter name="newIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.ListChangedType, System.Int32, System.ComponentModel.PropertyDescriptor)" attrib="6278">
                <parameters>
                  <parameter name="listChangedType" position="0" attrib="0" type="System.ComponentModel.ListChangedType" />
                  <parameter name="newIndex" position="1" attrib="0" type="System.Int32" />
                  <parameter name="propDesc" position="2" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.ListChangedType, System.Int32, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="listChangedType" position="0" attrib="0" type="System.ComponentModel.ListChangedType" />
                  <parameter name="newIndex" position="1" attrib="0" type="System.Int32" />
                  <parameter name="oldIndex" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ListChangedType" attrib="0" ptype="System.ComponentModel.ListChangedType">
                <methods>
                  <method name="get_ListChangedType()" attrib="2182" returntype="System.ComponentModel.ListChangedType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NewIndex" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_NewIndex()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OldIndex" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_OldIndex()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PropertyDescriptor" attrib="0" ptype="System.ComponentModel.PropertyDescriptor">
                <methods>
                  <method name="get_PropertyDescriptor()" attrib="2182" returntype="System.ComponentModel.PropertyDescriptor">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ListChangedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.ListChangedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.ListChangedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.ListChangedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.ListChangedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ListChangedType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="ItemAdded" attrib="32854" fieldtype="System.ComponentModel.ListChangedType" value="1" />
              <field name="ItemChanged" attrib="32854" fieldtype="System.ComponentModel.ListChangedType" value="4" />
              <field name="ItemDeleted" attrib="32854" fieldtype="System.ComponentModel.ListChangedType" value="2" />
              <field name="ItemMoved" attrib="32854" fieldtype="System.ComponentModel.ListChangedType" value="3" />
              <field name="PropertyDescriptorAdded" attrib="32854" fieldtype="System.ComponentModel.ListChangedType" value="5" />
              <field name="PropertyDescriptorChanged" attrib="32854" fieldtype="System.ComponentModel.ListChangedType" value="7" />
              <field name="PropertyDescriptorDeleted" attrib="32854" fieldtype="System.ComponentModel.ListChangedType" value="6" />
              <field name="Reset" attrib="32854" fieldtype="System.ComponentModel.ListChangedType" value="0" />
            </fields>
          </class>
          <class name="ListSortDescription" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)" attrib="6278">
                <parameters>
                  <parameter name="property" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                  <parameter name="direction" position="1" attrib="0" type="System.ComponentModel.ListSortDirection" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="PropertyDescriptor" attrib="0" ptype="System.ComponentModel.PropertyDescriptor">
                <methods>
                  <method name="get_PropertyDescriptor()" attrib="2182" returntype="System.ComponentModel.PropertyDescriptor">
                    <parameters />
                  </method>
                  <method name="set_PropertyDescriptor(System.ComponentModel.PropertyDescriptor)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SortDirection" attrib="0" ptype="System.ComponentModel.ListSortDirection">
                <methods>
                  <method name="get_SortDirection()" attrib="2182" returntype="System.ComponentModel.ListSortDirection">
                    <parameters />
                  </method>
                  <method name="set_SortDirection(System.ComponentModel.ListSortDirection)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.ListSortDirection" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ListSortDescriptionCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.ComponentModel.ListSortDescription[])" attrib="6278">
                <parameters>
                  <parameter name="sorts" position="0" attrib="0" type="System.ComponentModel.ListSortDescription[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.ComponentModel.ListSortDescription" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.ComponentModel.ListSortDescription">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, System.ComponentModel.ListSortDescription)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="System.ComponentModel.ListSortDescription" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Contains(System.Object)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IndexOf(System.Object)" attrib="486" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ListSortDirection" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Ascending" attrib="32854" fieldtype="System.ComponentModel.ListSortDirection" value="0" />
              <field name="Descending" attrib="32854" fieldtype="System.ComponentModel.ListSortDirection" value="1" />
            </fields>
          </class>
          <class name="LocalizableAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.LocalizableAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.LocalizableAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.LocalizableAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="isLocalizable" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsLocalizable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLocalizable()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="LookupBindingPropertiesAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.LookupBindingPropertiesAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="dataSource" position="0" attrib="0" type="System.String" />
                  <parameter name="displayMember" position="1" attrib="0" type="System.String" />
                  <parameter name="valueMember" position="2" attrib="0" type="System.String" />
                  <parameter name="lookupMember" position="3" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="DataSource" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DataSource()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DisplayMember" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DisplayMember()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LookupMember" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_LookupMember()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ValueMember" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ValueMember()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="MarshalByValueComponent" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.DesignerAttribute">
                <properties>
                  <property name="DesignerBaseTypeName" value="System.ComponentModel.Design.IRootDesigner" />
                  <property name="DesignerTypeName" value="System.Windows.Forms.Design.ComponentDocumentDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                </properties>
              </attribute>
              <attribute name="System.ComponentModel.DesignerCategoryAttribute">
                <properties>
                  <property name="Category" value="Component" />
                </properties>
              </attribute>
              <attribute name="System.ComponentModel.TypeConverterAttribute">
                <properties>
                  <property name="ConverterTypeName" value="System.ComponentModel.ComponentConverter" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ComponentModel.IComponent" />
              <interface name="System.IDisposable" />
              <interface name="System.IServiceProvider" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Container" attrib="0" ptype="System.ComponentModel.IContainer">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Container()" attrib="2502" virtual="true" returntype="System.ComponentModel.IContainer">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DesignMode" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_DesignMode()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Events" attrib="0" ptype="System.ComponentModel.EventHandlerList">
                <methods>
                  <method name="get_Events()" attrib="2180" returntype="System.ComponentModel.EventHandlerList">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Site" attrib="0" ptype="System.ComponentModel.ISite">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Site()" attrib="2502" virtual="true" returntype="System.ComponentModel.ISite">
                    <parameters />
                  </method>
                  <method name="set_Site(System.ComponentModel.ISite)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.ISite" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="Disposed" attrib="0" eventtype="System.EventHandler" />
            </events>
            <methods>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetService(System.Type)" attrib="454" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="service" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="~MarshalByValueComponent()" attrib="196" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="MaskedTextProvider" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ICloneable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="mask" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="mask" position="0" attrib="0" type="System.String" />
                  <parameter name="restrictToAscii" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Globalization.CultureInfo)" attrib="6278">
                <parameters>
                  <parameter name="mask" position="0" attrib="0" type="System.String" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Char, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="mask" position="0" attrib="0" type="System.String" />
                  <parameter name="passwordChar" position="1" attrib="0" type="System.Char" />
                  <parameter name="allowPromptAsInput" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Globalization.CultureInfo, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="mask" position="0" attrib="0" type="System.String" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="restrictToAscii" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Globalization.CultureInfo, System.Char, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="mask" position="0" attrib="0" type="System.String" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="passwordChar" position="2" attrib="0" type="System.Char" />
                  <parameter name="allowPromptAsInput" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Globalization.CultureInfo, System.Boolean, System.Char, System.Char, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="mask" position="0" attrib="0" type="System.String" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="allowPromptAsInput" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="promptChar" position="3" attrib="0" type="System.Char" />
                  <parameter name="passwordChar" position="4" attrib="0" type="System.Char" />
                  <parameter name="restrictToAscii" position="5" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AllowPromptAsInput" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowPromptAsInput()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AsciiOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AsciiOnly()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AssignedEditPositionCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_AssignedEditPositionCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AvailableEditPositionCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_AvailableEditPositionCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Culture" attrib="0" ptype="System.Globalization.CultureInfo">
                <methods>
                  <method name="get_Culture()" attrib="2182" returntype="System.Globalization.CultureInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DefaultPasswordChar" attrib="0" ptype="System.Char">
                <methods>
                  <method name="get_DefaultPasswordChar()" attrib="2198" static="true" returntype="System.Char">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EditPositionCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_EditPositionCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EditPositions" attrib="0" ptype="System.Collections.IEnumerator">
                <methods>
                  <method name="get_EditPositions()" attrib="2182" returntype="System.Collections.IEnumerator">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IncludeLiterals" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IncludeLiterals()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IncludeLiterals(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IncludePrompt" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IncludePrompt()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IncludePrompt(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="InvalidIndex" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InvalidIndex()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsPassword" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsPassword()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IsPassword(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Char" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Char">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="LastAssignedPosition" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_LastAssignedPosition()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Length()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Mask" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Mask()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MaskCompleted" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_MaskCompleted()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MaskFull" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_MaskFull()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PasswordChar" attrib="0" ptype="System.Char">
                <methods>
                  <method name="get_PasswordChar()" attrib="2182" returntype="System.Char">
                    <parameters />
                  </method>
                  <method name="set_PasswordChar(System.Char)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Char" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PromptChar" attrib="0" ptype="System.Char">
                <methods>
                  <method name="get_PromptChar()" attrib="2182" returntype="System.Char">
                    <parameters />
                  </method>
                  <method name="set_PromptChar(System.Char)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Char" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ResetOnPrompt" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_ResetOnPrompt()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_ResetOnPrompt(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ResetOnSpace" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_ResetOnSpace()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_ResetOnSpace(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SkipLiterals" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SkipLiterals()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_SkipLiterals(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Char)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="Add(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Add(System.Char, out System.Int32&amp;, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.Char" />
                  <parameter name="testPosition" position="1" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="resultHint" position="2" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="Add(System.String, out System.Int32&amp;, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="testPosition" position="1" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="resultHint" position="2" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="Clear()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Clear(out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="resultHint" position="0" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="Clone()" attrib="486" virtual="true" returntype="System.Object">
                <parameters />
              </method>
              <method name="FindAssignedEditPositionFrom(System.Int32, System.Boolean)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="position" position="0" attrib="0" type="System.Int32" />
                  <parameter name="direction" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="FindAssignedEditPositionInRange(System.Int32, System.Int32, System.Boolean)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="startPosition" position="0" attrib="0" type="System.Int32" />
                  <parameter name="endPosition" position="1" attrib="0" type="System.Int32" />
                  <parameter name="direction" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="FindEditPositionFrom(System.Int32, System.Boolean)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="position" position="0" attrib="0" type="System.Int32" />
                  <parameter name="direction" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="FindEditPositionInRange(System.Int32, System.Int32, System.Boolean)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="startPosition" position="0" attrib="0" type="System.Int32" />
                  <parameter name="endPosition" position="1" attrib="0" type="System.Int32" />
                  <parameter name="direction" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="FindNonEditPositionFrom(System.Int32, System.Boolean)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="position" position="0" attrib="0" type="System.Int32" />
                  <parameter name="direction" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="FindNonEditPositionInRange(System.Int32, System.Int32, System.Boolean)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="startPosition" position="0" attrib="0" type="System.Int32" />
                  <parameter name="endPosition" position="1" attrib="0" type="System.Int32" />
                  <parameter name="direction" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="FindUnassignedEditPositionFrom(System.Int32, System.Boolean)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="position" position="0" attrib="0" type="System.Int32" />
                  <parameter name="direction" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="FindUnassignedEditPositionInRange(System.Int32, System.Int32, System.Boolean)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="startPosition" position="0" attrib="0" type="System.Int32" />
                  <parameter name="endPosition" position="1" attrib="0" type="System.Int32" />
                  <parameter name="direction" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="hint" position="0" attrib="0" type="System.ComponentModel.MaskedTextResultHint" />
                </parameters>
              </method>
              <method name="InsertAt(System.Char, System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.Char" />
                  <parameter name="position" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="InsertAt(System.String, System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="position" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="InsertAt(System.Char, System.Int32, out System.Int32&amp;, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.Char" />
                  <parameter name="position" position="1" attrib="0" type="System.Int32" />
                  <parameter name="testPosition" position="2" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="resultHint" position="3" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="InsertAt(System.String, System.Int32, out System.Int32&amp;, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="position" position="1" attrib="0" type="System.Int32" />
                  <parameter name="testPosition" position="2" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="resultHint" position="3" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="IsAvailablePosition(System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="position" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IsEditPosition(System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="position" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IsValidInputChar(System.Char)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="c" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="IsValidMaskChar(System.Char)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="c" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="IsValidPasswordChar(System.Char)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="c" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="Remove()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="Remove(out System.Int32&amp;, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="testPosition" position="0" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="resultHint" position="1" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="position" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32, System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="startPosition" position="0" attrib="0" type="System.Int32" />
                  <parameter name="endPosition" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32, System.Int32, out System.Int32&amp;, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="startPosition" position="0" attrib="0" type="System.Int32" />
                  <parameter name="endPosition" position="1" attrib="0" type="System.Int32" />
                  <parameter name="testPosition" position="2" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="resultHint" position="3" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="Replace(System.Char, System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.Char" />
                  <parameter name="position" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="position" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Replace(System.Char, System.Int32, out System.Int32&amp;, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.Char" />
                  <parameter name="position" position="1" attrib="0" type="System.Int32" />
                  <parameter name="testPosition" position="2" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="resultHint" position="3" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.Int32, out System.Int32&amp;, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="position" position="1" attrib="0" type="System.Int32" />
                  <parameter name="testPosition" position="2" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="resultHint" position="3" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="Replace(System.Char, System.Int32, System.Int32, out System.Int32&amp;, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.Char" />
                  <parameter name="startPosition" position="1" attrib="0" type="System.Int32" />
                  <parameter name="endPosition" position="2" attrib="0" type="System.Int32" />
                  <parameter name="testPosition" position="3" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="resultHint" position="4" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.Int32, System.Int32, out System.Int32&amp;, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="startPosition" position="1" attrib="0" type="System.Int32" />
                  <parameter name="endPosition" position="2" attrib="0" type="System.Int32" />
                  <parameter name="testPosition" position="3" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="resultHint" position="4" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="Set(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Set(System.String, out System.Int32&amp;, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="testPosition" position="1" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="resultHint" position="2" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="ToDisplayString()" attrib="134" returntype="System.String">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="ToString(System.Boolean)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="ignorePasswordChar" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="ToString(System.Boolean, System.Boolean)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="includePrompt" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="includeLiterals" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="ToString(System.Int32, System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="startPosition" position="0" attrib="0" type="System.Int32" />
                  <parameter name="length" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ToString(System.Boolean, System.Int32, System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="ignorePasswordChar" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="startPosition" position="1" attrib="0" type="System.Int32" />
                  <parameter name="length" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ToString(System.Boolean, System.Boolean, System.Int32, System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="includePrompt" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="includeLiterals" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="startPosition" position="2" attrib="0" type="System.Int32" />
                  <parameter name="length" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ToString(System.Boolean, System.Boolean, System.Boolean, System.Int32, System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="ignorePasswordChar" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="includePrompt" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="includeLiterals" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="startPosition" position="3" attrib="0" type="System.Int32" />
                  <parameter name="length" position="4" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="VerifyChar(System.Char, System.Int32, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.Char" />
                  <parameter name="position" position="1" attrib="0" type="System.Int32" />
                  <parameter name="hint" position="2" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
              <method name="VerifyEscapeChar(System.Char, System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.Char" />
                  <parameter name="position" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="VerifyString(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="VerifyString(System.String, out System.Int32&amp;, out System.ComponentModel.MaskedTextResultHint&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="testPosition" position="1" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="resultHint" position="2" attrib="2" type="System.ComponentModel.MaskedTextResultHint" direction="out" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MaskedTextResultHint" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AlphanumericCharacterExpected" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="-2" />
              <field name="AsciiCharacterExpected" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="-1" />
              <field name="CharacterEscaped" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="1" />
              <field name="DigitExpected" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="-3" />
              <field name="InvalidInput" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="-51" />
              <field name="LetterExpected" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="-4" />
              <field name="NoEffect" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="2" />
              <field name="NonEditPosition" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="-54" />
              <field name="PositionOutOfRange" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="-55" />
              <field name="PromptCharNotAllowed" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="-52" />
              <field name="SideEffect" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="3" />
              <field name="SignedDigitExpected" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="-5" />
              <field name="Success" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="4" />
              <field name="UnavailableEditPosition" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="-53" />
              <field name="Unknown" attrib="32854" fieldtype="System.ComponentModel.MaskedTextResultHint" value="0" />
            </fields>
          </class>
          <class name="MemberDescriptor" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.ComponentModel.MemberDescriptor)" attrib="6276">
                <parameters>
                  <parameter name="descr" position="0" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6276">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.MemberDescriptor, System.Attribute[])" attrib="6276">
                <parameters>
                  <parameter name="oldMemberDescriptor" position="0" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                  <parameter name="newAttributes" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Attribute[])" attrib="6276">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="attributes" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AttributeArray" attrib="0" ptype="System.Attribute[]">
                <methods>
                  <method name="get_AttributeArray()" attrib="2500" virtual="true" returntype="System.Attribute[]">
                    <parameters />
                  </method>
                  <method name="set_AttributeArray(System.Attribute[])" attrib="2500" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Attribute[]" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Attributes" attrib="0" ptype="System.ComponentModel.AttributeCollection">
                <methods>
                  <method name="get_Attributes()" attrib="2502" virtual="true" returntype="System.ComponentModel.AttributeCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Category" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Category()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Description" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Description()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DesignTimeOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_DesignTimeOnly()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DisplayName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DisplayName()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsBrowsable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsBrowsable()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NameHashCode" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_NameHashCode()" attrib="2500" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateAttributeCollection()" attrib="452" virtual="true" returntype="System.ComponentModel.AttributeCollection">
                <parameters />
              </method>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="FillAttributes(System.Collections.IList)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="attributeList" position="0" attrib="0" type="System.Collections.IList" />
                </parameters>
              </method>
              <method name="FindMethod(System.Type, System.String, System.Type[], System.Type)" attrib="148" static="true" returntype="System.Reflection.MethodInfo">
                <parameters>
                  <parameter name="componentClass" position="0" attrib="0" type="System.Type" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Type[]" />
                  <parameter name="returnType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="FindMethod(System.Type, System.String, System.Type[], System.Type, System.Boolean)" attrib="148" static="true" returntype="System.Reflection.MethodInfo">
                <parameters>
                  <parameter name="componentClass" position="0" attrib="0" type="System.Type" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Type[]" />
                  <parameter name="returnType" position="3" attrib="0" type="System.Type" />
                  <parameter name="publicOnly" position="4" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="GetInvocationTarget(System.Type, System.Object)" attrib="452" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetInvokee(System.Type, System.Object)" attrib="148" static="true" returntype="System.Object">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This method has been deprecated. Use GetInvocationTarget instead.  http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="componentClass" position="0" attrib="0" type="System.Type" />
                  <parameter name="component" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetSite(System.Object)" attrib="148" static="true" returntype="System.ComponentModel.ISite">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MergablePropertyAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.MergablePropertyAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.MergablePropertyAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.MergablePropertyAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="allowMerge" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AllowMerge" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowMerge()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="MultilineStringConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="2" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NestedContainer" type="class" base="System.ComponentModel.Container" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.IContainer" />
              <interface name="System.ComponentModel.INestedContainer" />
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.ComponentModel.IComponent)" attrib="6278">
                <parameters>
                  <parameter name="owner" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Owner" attrib="0" ptype="System.ComponentModel.IComponent">
                <methods>
                  <method name="get_Owner()" attrib="2534" virtual="true" returntype="System.ComponentModel.IComponent">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OwnerName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_OwnerName()" attrib="2500" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateSite(System.ComponentModel.IComponent, System.String)" attrib="196" virtual="true" is-override="true" returntype="System.ComponentModel.ISite">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetService(System.Type)" attrib="196" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="service" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NotifyParentPropertyAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Property" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.NotifyParentPropertyAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.NotifyParentPropertyAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.NotifyParentPropertyAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="notifyParent" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="NotifyParent" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_NotifyParent()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="NullableConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="NullableType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_NullableType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UnderlyingType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_UnderlyingType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UnderlyingTypeConverter" attrib="0" ptype="System.ComponentModel.TypeConverter">
                <methods>
                  <method name="get_UnderlyingTypeConverter()" attrib="2182" returntype="System.ComponentModel.TypeConverter">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="propertyValues" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="2" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.TypeConverter+StandardValuesCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ParenthesizePropertyNameAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.ParenthesizePropertyNameAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="needParenthesis" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="NeedParenthesis" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_NeedParenthesis()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="o" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="PasswordPropertyTextAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.PasswordPropertyTextAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.PasswordPropertyTextAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.PasswordPropertyTextAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="password" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Password" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Password()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="o" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ProgressChangedEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Int32, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="progressPercentage" position="0" attrib="0" type="System.Int32" />
                  <parameter name="userState" position="1" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ProgressPercentage" attrib="0" ptype="System.Int32">
                <attributes />
                <methods>
                  <method name="get_ProgressPercentage()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserState" attrib="0" ptype="System.Object">
                <attributes />
                <methods>
                  <method name="get_UserState()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ProgressChangedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.ProgressChangedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.ProgressChangedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.ProgressChangedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.ProgressChangedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PropertyChangedEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="propertyName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="PropertyName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_PropertyName()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="PropertyChangedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.PropertyChangedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.PropertyChangedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.PropertyChangedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.PropertyChangedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PropertyChangingEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="propertyName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="PropertyName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_PropertyName()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="PropertyChangingEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.PropertyChangingEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.PropertyChangingEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.PropertyChangingEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.PropertyChangingEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PropertyDescriptor" type="class" base="System.ComponentModel.MemberDescriptor" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.ComponentModel.MemberDescriptor)" attrib="6276">
                <parameters>
                  <parameter name="descr" position="0" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.MemberDescriptor, System.Attribute[])" attrib="6276">
                <parameters>
                  <parameter name="descr" position="0" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                  <parameter name="attrs" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Attribute[])" attrib="6276">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="attrs" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ComponentType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ComponentType()" attrib="3526" abstract="true" virtual="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Converter" attrib="0" ptype="System.ComponentModel.TypeConverter">
                <methods>
                  <method name="get_Converter()" attrib="2502" virtual="true" returntype="System.ComponentModel.TypeConverter">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsLocalizable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLocalizable()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PropertyType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_PropertyType()" attrib="3526" abstract="true" virtual="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SerializationVisibility" attrib="0" ptype="System.ComponentModel.DesignerSerializationVisibility">
                <methods>
                  <method name="get_SerializationVisibility()" attrib="2182" returntype="System.ComponentModel.DesignerSerializationVisibility">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsChangeEvents" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsChangeEvents()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddValueChanged(System.Object, System.EventHandler)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="handler" position="1" attrib="0" type="System.EventHandler" />
                </parameters>
              </method>
              <method name="CanResetValue(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CreateInstance(System.Type)" attrib="132" returntype="System.Object">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="FillAttributes(System.Collections.IList)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="attributeList" position="0" attrib="0" type="System.Collections.IList" />
                </parameters>
              </method>
              <method name="GetChildProperties()" attrib="134" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters />
              </method>
              <method name="GetChildProperties(System.Attribute[])" attrib="134" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="filter" position="0" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetChildProperties(System.Object)" attrib="134" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetChildProperties(System.Object, System.Attribute[])" attrib="454" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                  <parameter name="filter" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetEditor(System.Type)" attrib="454" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="editorBaseType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="GetInvocationTarget(System.Type, System.Object)" attrib="196" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetTypeFromName(System.String)" attrib="132" returntype="System.Type">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetValue(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetValueChangedHandler(System.Object)" attrib="133" returntype="System.EventHandler">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="OnValueChanged(System.Object, System.EventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.EventArgs" />
                </parameters>
              </method>
              <method name="RemoveValueChanged(System.Object, System.EventHandler)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="handler" position="1" attrib="0" type="System.EventHandler" />
                </parameters>
              </method>
              <method name="ResetValue(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SetValue(System.Object, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ShouldSerializeValue(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PropertyDescriptorCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IDictionary" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <fields>
              <field name="Empty" attrib="54" fieldtype="System.ComponentModel.PropertyDescriptorCollection" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.ComponentModel.PropertyDescriptor[])" attrib="6278">
                <parameters>
                  <parameter name="properties" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.PropertyDescriptor[], System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="properties" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor[]" />
                  <parameter name="readOnly" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.ComponentModel.PropertyDescriptor" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2502" virtual="true" returntype="System.ComponentModel.PropertyDescriptor">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.ComponentModel.PropertyDescriptor" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2502" virtual="true" returntype="System.ComponentModel.PropertyDescriptor">
                    <parameters>
                      <parameter name="name" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.ComponentModel.PropertyDescriptor)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                </parameters>
              </method>
              <method name="Clear()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.ComponentModel.PropertyDescriptor)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                </parameters>
              </method>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Find(System.String, System.Boolean)" attrib="454" virtual="true" returntype="System.ComponentModel.PropertyDescriptor">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="ignoreCase" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="454" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
              <method name="IndexOf(System.ComponentModel.PropertyDescriptor)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                </parameters>
              </method>
              <method name="Insert(System.Int32, System.ComponentModel.PropertyDescriptor)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="value" position="1" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                </parameters>
              </method>
              <method name="InternalSort(System.Collections.IComparer)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="sorter" position="0" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="InternalSort(System.String[])" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="names" position="0" attrib="0" type="System.String[]" />
                </parameters>
              </method>
              <method name="Remove(System.ComponentModel.PropertyDescriptor)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Sort()" attrib="454" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters />
              </method>
              <method name="Sort(System.Collections.IComparer)" attrib="454" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Sort(System.String[])" attrib="454" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="names" position="0" attrib="0" type="System.String[]" />
                </parameters>
              </method>
              <method name="Sort(System.String[], System.Collections.IComparer)" attrib="454" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="names" position="0" attrib="0" type="System.String[]" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PropertyTabAttribute" type="class" base="System.Attribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="tabClassName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="tabClass" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.ComponentModel.PropertyTabScope)" attrib="6278">
                <parameters>
                  <parameter name="tabClassName" position="0" attrib="0" type="System.String" />
                  <parameter name="tabScope" position="1" attrib="0" type="System.ComponentModel.PropertyTabScope" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.ComponentModel.PropertyTabScope)" attrib="6278">
                <parameters>
                  <parameter name="tabClass" position="0" attrib="0" type="System.Type" />
                  <parameter name="tabScope" position="1" attrib="0" type="System.ComponentModel.PropertyTabScope" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="TabClassNames" attrib="0" ptype="System.String[]">
                <methods>
                  <method name="get_TabClassNames()" attrib="2180" returntype="System.String[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TabClasses" attrib="0" ptype="System.Type[]">
                <methods>
                  <method name="get_TabClasses()" attrib="2182" returntype="System.Type[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TabScopes" attrib="0" ptype="System.ComponentModel.PropertyTabScope[]">
                <methods>
                  <method name="get_TabScopes()" attrib="2182" returntype="System.ComponentModel.PropertyTabScope[]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.ComponentModel.PropertyTabAttribute)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.ComponentModel.PropertyTabAttribute" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="InitializeArrays(System.String[], System.ComponentModel.PropertyTabScope[])" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="tabClassNames" position="0" attrib="0" type="System.String[]" />
                  <parameter name="tabScopes" position="1" attrib="0" type="System.ComponentModel.PropertyTabScope[]" />
                </parameters>
              </method>
              <method name="InitializeArrays(System.Type[], System.ComponentModel.PropertyTabScope[])" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="tabClasses" position="0" attrib="0" type="System.Type[]" />
                  <parameter name="tabScopes" position="1" attrib="0" type="System.ComponentModel.PropertyTabScope[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PropertyTabScope" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Component" attrib="32854" fieldtype="System.ComponentModel.PropertyTabScope" value="3" />
              <field name="Document" attrib="32854" fieldtype="System.ComponentModel.PropertyTabScope" value="2" />
              <field name="Global" attrib="32854" fieldtype="System.ComponentModel.PropertyTabScope" value="1" />
              <field name="Static" attrib="32854" fieldtype="System.ComponentModel.PropertyTabScope" value="0" />
            </fields>
          </class>
          <class name="ProvidePropertyAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="propertyName" position="0" attrib="0" type="System.String" />
                  <parameter name="receiverTypeName" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Type)" attrib="6278">
                <parameters>
                  <parameter name="propertyName" position="0" attrib="0" type="System.String" />
                  <parameter name="receiverType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="PropertyName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_PropertyName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReceiverTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ReceiverTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TypeId" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_TypeId()" attrib="2246" virtual="true" is-override="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ReadOnlyAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.ReadOnlyAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.ReadOnlyAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.ReadOnlyAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="isReadOnly" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="RecommendedAsConfigurableAttribute" type="class" base="System.Attribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Property" />
                </properties>
              </attribute>
              <attribute name="System.ObsoleteAttribute">
                <properties>
                  <property name="Message" value="Use System.ComponentModel.SettingsBindableAttribute instead to work with the new settings model." />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.RecommendedAsConfigurableAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.RecommendedAsConfigurableAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.RecommendedAsConfigurableAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="recommendedAsConfigurable" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="RecommendedAsConfigurable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_RecommendedAsConfigurable()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ReferenceConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.TypeConverter+StandardValuesCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="IsValueAllowed(System.ComponentModel.ITypeDescriptorContext, System.Object)" attrib="452" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="RefreshEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="componentChanged" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="typeChanged" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ComponentChanged" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_ComponentChanged()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TypeChanged" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_TypeChanged()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="RefreshEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.ComponentModel.RefreshEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.ComponentModel.RefreshEventArgs" />
                  <parameter name="callback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.ComponentModel.RefreshEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.ComponentModel.RefreshEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="RefreshProperties" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="All" attrib="32854" fieldtype="System.ComponentModel.RefreshProperties" value="1" />
              <field name="None" attrib="32854" fieldtype="System.ComponentModel.RefreshProperties" value="0" />
              <field name="Repaint" attrib="32854" fieldtype="System.ComponentModel.RefreshProperties" value="2" />
            </fields>
          </class>
          <class name="RefreshPropertiesAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="All" attrib="54" fieldtype="System.ComponentModel.RefreshPropertiesAttribute" />
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.RefreshPropertiesAttribute" />
              <field name="Repaint" attrib="54" fieldtype="System.ComponentModel.RefreshPropertiesAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.ComponentModel.RefreshProperties)" attrib="6278">
                <parameters>
                  <parameter name="refresh" position="0" attrib="0" type="System.ComponentModel.RefreshProperties" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="RefreshProperties" attrib="0" ptype="System.ComponentModel.RefreshProperties">
                <methods>
                  <method name="get_RefreshProperties()" attrib="2182" returntype="System.ComponentModel.RefreshProperties">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="RunInstallerAttribute" type="class" base="System.Attribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.RunInstallerAttribute" />
              <field name="No" attrib="54" fieldtype="System.ComponentModel.RunInstallerAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.RunInstallerAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="runInstaller" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="RunInstaller" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_RunInstaller()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="RunWorkerCompletedEventArgs" type="class" base="System.ComponentModel.AsyncCompletedEventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Object, System.Exception, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.Object" />
                  <parameter name="error" position="1" attrib="0" type="System.Exception" />
                  <parameter name="cancelled" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Result" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserState" attrib="0" ptype="System.Object">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_UserState()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="RunWorkerCompletedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.RunWorkerCompletedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.RunWorkerCompletedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.RunWorkerCompletedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.RunWorkerCompletedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SByteConverter" type="class" base="System.ComponentModel.BaseNumberConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="SettingsBindableAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Property" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="No" attrib="54" fieldtype="System.ComponentModel.SettingsBindableAttribute" />
              <field name="Yes" attrib="54" fieldtype="System.ComponentModel.SettingsBindableAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="bindable" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Bindable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Bindable()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="SingleConverter" type="class" base="System.ComponentModel.BaseNumberConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="StringConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SyntaxCheck" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="CheckMachineName(System.String)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CheckPath(System.String)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CheckRootedPath(System.String)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TimeSpanConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ToolboxItemAttribute" type="class" base="System.Attribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.ToolboxItemAttribute" />
              <field name="None" attrib="54" fieldtype="System.ComponentModel.ToolboxItemAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="defaultType" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="toolboxItemTypeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="toolboxItemType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ToolboxItemType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ToolboxItemType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ToolboxItemTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ToolboxItemTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ToolboxItemFilterAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="filterString" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.ComponentModel.ToolboxItemFilterType)" attrib="6278">
                <parameters>
                  <parameter name="filterString" position="0" attrib="0" type="System.String" />
                  <parameter name="filterType" position="1" attrib="0" type="System.ComponentModel.ToolboxItemFilterType" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="FilterString" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FilterString()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FilterType" attrib="0" ptype="System.ComponentModel.ToolboxItemFilterType">
                <methods>
                  <method name="get_FilterType()" attrib="2182" returntype="System.ComponentModel.ToolboxItemFilterType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TypeId" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_TypeId()" attrib="2246" virtual="true" is-override="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="Match(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ToolboxItemFilterType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Allow" attrib="32854" fieldtype="System.ComponentModel.ToolboxItemFilterType" value="0" />
              <field name="Custom" attrib="32854" fieldtype="System.ComponentModel.ToolboxItemFilterType" value="1" />
              <field name="Prevent" attrib="32854" fieldtype="System.ComponentModel.ToolboxItemFilterType" value="2" />
              <field name="Require" attrib="32854" fieldtype="System.ComponentModel.ToolboxItemFilterType" value="3" />
            </fields>
          </class>
          <class name="TypeConverter" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.Type)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="sourceType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertTo(System.Type)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="destinationType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.Object)" attrib="134" returntype="System.Object">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="454" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertFromInvariantString(System.String)" attrib="134" returntype="System.Object">
                <parameters>
                  <parameter name="text" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String)" attrib="134" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="text" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ConvertFromString(System.String)" attrib="134" returntype="System.Object">
                <parameters>
                  <parameter name="text" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String)" attrib="134" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="text" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String)" attrib="134" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="text" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ConvertTo(System.Object, System.Type)" attrib="134" returntype="System.Object">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="454" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertToInvariantString(System.Object)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertToString(System.Object)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CreateInstance(System.Collections.IDictionary)" attrib="134" returntype="System.Object">
                <parameters>
                  <parameter name="propertyValues" position="0" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)" attrib="454" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="propertyValues" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="GetConvertFromException(System.Object)" attrib="132" returntype="System.Exception">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetConvertToException(System.Object, System.Type)" attrib="132" returntype="System.Exception">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetCreateInstanceSupported()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetProperties(System.Object)" attrib="134" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object)" attrib="134" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])" attrib="454" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="2" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetPropertiesSupported()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValues()" attrib="134" returntype="System.Collections.ICollection">
                <parameters />
              </method>
              <method name="GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" attrib="454" virtual="true" returntype="System.ComponentModel.TypeConverter+StandardValuesCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesExclusive()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesSupported()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="IsValid(System.Object)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String[])" attrib="132" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="props" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptorCollection" />
                  <parameter name="names" position="1" attrib="0" type="System.String[]" />
                </parameters>
              </method>
            </methods>
            <classes>
              <class name="SimplePropertyDescriptor" type="class" base="System.ComponentModel.PropertyDescriptor" abstract="true" charset="Ansi" layout="Auto">
                <constructors>
                  <constructor name=".ctor(System.Type, System.String, System.Type)" attrib="6276">
                    <parameters>
                      <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                      <parameter name="name" position="1" attrib="0" type="System.String" />
                      <parameter name="propertyType" position="2" attrib="0" type="System.Type" />
                    </parameters>
                  </constructor>
                  <constructor name=".ctor(System.Type, System.String, System.Type, System.Attribute[])" attrib="6276">
                    <parameters>
                      <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                      <parameter name="name" position="1" attrib="0" type="System.String" />
                      <parameter name="propertyType" position="2" attrib="0" type="System.Type" />
                      <parameter name="attributes" position="3" attrib="0" type="System.Attribute[]" />
                    </parameters>
                  </constructor>
                </constructors>
                <properties>
                  <property name="ComponentType" attrib="0" ptype="System.Type">
                    <methods>
                      <method name="get_ComponentType()" attrib="2246" virtual="true" is-override="true" returntype="System.Type">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                    <methods>
                      <method name="get_IsReadOnly()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="PropertyType" attrib="0" ptype="System.Type">
                    <methods>
                      <method name="get_PropertyType()" attrib="2246" virtual="true" is-override="true" returntype="System.Type">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="CanResetValue(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters>
                      <parameter name="component" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                  <method name="ResetValue(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="component" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                  <method name="ShouldSerializeValue(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters>
                      <parameter name="component" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </class>
              <class name="StandardValuesCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Reflection.DefaultMemberAttribute">
                    <properties>
                      <property name="MemberName" value="Item" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.ICollection" />
                  <interface name="System.Collections.IEnumerable" />
                </interfaces>
                <constructors>
                  <constructor name=".ctor(System.Collections.ICollection)" attrib="6278">
                    <parameters>
                      <parameter name="values" position="0" attrib="0" type="System.Collections.ICollection" />
                    </parameters>
                  </constructor>
                </constructors>
                <properties>
                  <property name="Count" attrib="0" ptype="System.Int32">
                    <methods>
                      <method name="get_Count()" attrib="2182" returntype="System.Int32">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="Item" attrib="0" ptype="System.Object" params="System.Int32">
                    <methods>
                      <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Object">
                        <parameters>
                          <parameter name="index" position="0" attrib="0" type="System.Int32" />
                        </parameters>
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="CopyTo(System.Array, System.Int32)" attrib="134" returntype="System.Void">
                    <parameters>
                      <parameter name="array" position="0" attrib="0" type="System.Array" />
                      <parameter name="index" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="GetEnumerator()" attrib="134" returntype="System.Collections.IEnumerator">
                    <parameters />
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="TypeConverterAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.TypeConverterAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ConverterTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ConverterTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TypeDescriptionProvider" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.ComponentModel.TypeDescriptionProvider)" attrib="6276">
                <parameters>
                  <parameter name="parent" position="0" attrib="0" type="System.ComponentModel.TypeDescriptionProvider" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="CreateInstance(System.IServiceProvider, System.Type, System.Type[], System.Object[])" attrib="454" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.IServiceProvider" />
                  <parameter name="objectType" position="1" attrib="0" type="System.Type" />
                  <parameter name="argTypes" position="2" attrib="0" type="System.Type[]" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
              <method name="GetCache(System.Object)" attrib="454" virtual="true" returntype="System.Collections.IDictionary">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetExtendedTypeDescriptor(System.Object)" attrib="454" virtual="true" returntype="System.ComponentModel.ICustomTypeDescriptor">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetExtenderProviders(System.Object)" attrib="453" virtual="true" returntype="System.ComponentModel.IExtenderProvider[]">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetFullComponentName(System.Object)" attrib="454" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetReflectionType(System.Object)" attrib="134" returntype="System.Type">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetReflectionType(System.Type)" attrib="134" returntype="System.Type">
                <parameters>
                  <parameter name="objectType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetReflectionType(System.Type, System.Object)" attrib="454" virtual="true" returntype="System.Type">
                <parameters>
                  <parameter name="objectType" position="0" attrib="0" type="System.Type" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetRuntimeType(System.Type)" attrib="454" virtual="true" returntype="System.Type">
                <parameters>
                  <parameter name="reflectionType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetTypeDescriptor(System.Object)" attrib="134" returntype="System.ComponentModel.ICustomTypeDescriptor">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetTypeDescriptor(System.Type)" attrib="134" returntype="System.ComponentModel.ICustomTypeDescriptor">
                <parameters>
                  <parameter name="objectType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetTypeDescriptor(System.Type, System.Object)" attrib="454" virtual="true" returntype="System.ComponentModel.ICustomTypeDescriptor">
                <parameters>
                  <parameter name="objectType" position="0" attrib="0" type="System.Type" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="IsSupportedType(System.Type)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TypeDescriptionProviderAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="TypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="TypeDescriptor" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="ComNativeDescriptorHandler" attrib="0" ptype="System.ComponentModel.IComNativeDescriptorHandler">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This property has been deprecated.  Use a type description provider to supply type information for COM types instead.  http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_ComNativeDescriptorHandler()" attrib="18582" static="true" returntype="System.ComponentModel.IComNativeDescriptorHandler">
                    <parameters />
                  </method>
                  <method name="set_ComNativeDescriptorHandler(System.ComponentModel.IComNativeDescriptorHandler)" attrib="18582" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.IComNativeDescriptorHandler" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ComObjectType" attrib="0" ptype="System.Type">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_ComObjectType()" attrib="2198" static="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InterfaceType" attrib="0" ptype="System.Type">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_InterfaceType()" attrib="2198" static="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="Refreshed" attrib="0" eventtype="System.ComponentModel.RefreshEventHandler" />
            </events>
            <methods>
              <method name="AddAttributes(System.Object, System.Attribute[])" attrib="16534" static="true" returntype="System.ComponentModel.TypeDescriptionProvider">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="1" attrib="0" type="System.Attribute[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AddAttributes(System.Type, System.Attribute[])" attrib="16534" static="true" returntype="System.ComponentModel.TypeDescriptionProvider">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="attributes" position="1" attrib="0" type="System.Attribute[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AddEditorTable(System.Type, System.Collections.Hashtable)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="editorBaseType" position="0" attrib="0" type="System.Type" />
                  <parameter name="table" position="1" attrib="0" type="System.Collections.Hashtable" />
                </parameters>
              </method>
              <method name="AddProvider(System.ComponentModel.TypeDescriptionProvider, System.Object)" attrib="16534" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.ComponentModel.TypeDescriptionProvider" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AddProvider(System.ComponentModel.TypeDescriptionProvider, System.Type)" attrib="16534" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.ComponentModel.TypeDescriptionProvider" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider, System.Object)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.ComponentModel.TypeDescriptionProvider" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider, System.Type)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.ComponentModel.TypeDescriptionProvider" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CreateAssociation(System.Object, System.Object)" attrib="16534" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="primary" position="0" attrib="0" type="System.Object" />
                  <parameter name="secondary" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CreateDesigner(System.ComponentModel.IComponent, System.Type)" attrib="150" static="true" returntype="System.ComponentModel.Design.IDesigner">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                  <parameter name="designerBaseType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CreateEvent(System.Type, System.ComponentModel.EventDescriptor, System.Attribute[])" attrib="16534" static="true" returntype="System.ComponentModel.EventDescriptor">
                <parameters>
                  <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                  <parameter name="oldEventDescriptor" position="1" attrib="0" type="System.ComponentModel.EventDescriptor" />
                  <parameter name="attributes" position="2" attrib="0" type="System.Attribute[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="CreateEvent(System.Type, System.String, System.Type, System.Attribute[])" attrib="16534" static="true" returntype="System.ComponentModel.EventDescriptor">
                <parameters>
                  <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                  <parameter name="type" position="2" attrib="0" type="System.Type" />
                  <parameter name="attributes" position="3" attrib="0" type="System.Attribute[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="CreateInstance(System.IServiceProvider, System.Type, System.Type[], System.Object[])" attrib="150" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.IServiceProvider" />
                  <parameter name="objectType" position="1" attrib="0" type="System.Type" />
                  <parameter name="argTypes" position="2" attrib="0" type="System.Type[]" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
              <method name="CreateProperty(System.Type, System.ComponentModel.PropertyDescriptor, System.Attribute[])" attrib="16534" static="true" returntype="System.ComponentModel.PropertyDescriptor">
                <parameters>
                  <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                  <parameter name="oldPropertyDescriptor" position="1" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                  <parameter name="attributes" position="2" attrib="0" type="System.Attribute[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="CreateProperty(System.Type, System.String, System.Type, System.Attribute[])" attrib="16534" static="true" returntype="System.ComponentModel.PropertyDescriptor">
                <parameters>
                  <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                  <parameter name="type" position="2" attrib="0" type="System.Type" />
                  <parameter name="attributes" position="3" attrib="0" type="System.Attribute[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="GetAssociation(System.Type, System.Object)" attrib="150" static="true" returntype="System.Object">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="primary" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetAttributes(System.Object)" attrib="150" static="true" returntype="System.ComponentModel.AttributeCollection">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetAttributes(System.Type)" attrib="150" static="true" returntype="System.ComponentModel.AttributeCollection">
                <parameters>
                  <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetAttributes(System.Object, System.Boolean)" attrib="150" static="true" returntype="System.ComponentModel.AttributeCollection">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="noCustomTypeDesc" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetClassName(System.Object)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetClassName(System.Type)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetClassName(System.Object, System.Boolean)" attrib="150" static="true" returntype="System.String">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="noCustomTypeDesc" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetComponentName(System.Object)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetComponentName(System.Object, System.Boolean)" attrib="150" static="true" returntype="System.String">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="noCustomTypeDesc" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetConverter(System.Object)" attrib="150" static="true" returntype="System.ComponentModel.TypeConverter">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetConverter(System.Type)" attrib="150" static="true" returntype="System.ComponentModel.TypeConverter">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetConverter(System.Object, System.Boolean)" attrib="150" static="true" returntype="System.ComponentModel.TypeConverter">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="noCustomTypeDesc" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetDefaultEvent(System.Object)" attrib="150" static="true" returntype="System.ComponentModel.EventDescriptor">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetDefaultEvent(System.Type)" attrib="150" static="true" returntype="System.ComponentModel.EventDescriptor">
                <parameters>
                  <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetDefaultEvent(System.Object, System.Boolean)" attrib="150" static="true" returntype="System.ComponentModel.EventDescriptor">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="noCustomTypeDesc" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetDefaultProperty(System.Object)" attrib="150" static="true" returntype="System.ComponentModel.PropertyDescriptor">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetDefaultProperty(System.Type)" attrib="150" static="true" returntype="System.ComponentModel.PropertyDescriptor">
                <parameters>
                  <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetDefaultProperty(System.Object, System.Boolean)" attrib="150" static="true" returntype="System.ComponentModel.PropertyDescriptor">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="noCustomTypeDesc" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetEditor(System.Object, System.Type)" attrib="150" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="editorBaseType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetEditor(System.Type, System.Type)" attrib="150" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="editorBaseType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetEditor(System.Object, System.Type, System.Boolean)" attrib="150" static="true" returntype="System.Object">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="editorBaseType" position="1" attrib="0" type="System.Type" />
                  <parameter name="noCustomTypeDesc" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetEvents(System.Object)" attrib="150" static="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetEvents(System.Type)" attrib="150" static="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters>
                  <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetEvents(System.Object, System.Attribute[])" attrib="150" static="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetEvents(System.Object, System.Boolean)" attrib="150" static="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="noCustomTypeDesc" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetEvents(System.Type, System.Attribute[])" attrib="150" static="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <parameters>
                  <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                  <parameter name="attributes" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetEvents(System.Object, System.Attribute[], System.Boolean)" attrib="150" static="true" returntype="System.ComponentModel.EventDescriptorCollection">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="1" attrib="0" type="System.Attribute[]" />
                  <parameter name="noCustomTypeDesc" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetFullComponentName(System.Object)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetProperties(System.Object)" attrib="150" static="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetProperties(System.Type)" attrib="150" static="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetProperties(System.Object, System.Attribute[])" attrib="150" static="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetProperties(System.Object, System.Boolean)" attrib="150" static="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="noCustomTypeDesc" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetProperties(System.Type, System.Attribute[])" attrib="150" static="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="componentType" position="0" attrib="0" type="System.Type" />
                  <parameter name="attributes" position="1" attrib="0" type="System.Attribute[]" />
                </parameters>
              </method>
              <method name="GetProperties(System.Object, System.Attribute[], System.Boolean)" attrib="150" static="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="attributes" position="1" attrib="0" type="System.Attribute[]" />
                  <parameter name="noCustomTypeDesc" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetProvider(System.Object)" attrib="150" static="true" returntype="System.ComponentModel.TypeDescriptionProvider">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetProvider(System.Type)" attrib="150" static="true" returntype="System.ComponentModel.TypeDescriptionProvider">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetReflectionType(System.Object)" attrib="150" static="true" returntype="System.Type">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetReflectionType(System.Type)" attrib="150" static="true" returntype="System.Type">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Refresh(System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Refresh(System.Reflection.Assembly)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                </parameters>
              </method>
              <method name="Refresh(System.Reflection.Module)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="module" position="0" attrib="0" type="System.Reflection.Module" />
                </parameters>
              </method>
              <method name="Refresh(System.Type)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="RemoveAssociation(System.Object, System.Object)" attrib="16534" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="primary" position="0" attrib="0" type="System.Object" />
                  <parameter name="secondary" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="RemoveAssociations(System.Object)" attrib="16534" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="primary" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="RemoveProvider(System.ComponentModel.TypeDescriptionProvider, System.Object)" attrib="16534" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.ComponentModel.TypeDescriptionProvider" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="RemoveProvider(System.ComponentModel.TypeDescriptionProvider, System.Type)" attrib="16534" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.ComponentModel.TypeDescriptionProvider" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider, System.Object)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.ComponentModel.TypeDescriptionProvider" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider, System.Type)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.ComponentModel.TypeDescriptionProvider" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="SortDescriptorArray(System.Collections.IList)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="infos" position="0" attrib="0" type="System.Collections.IList" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TypeListConverter" type="class" base="System.ComponentModel.TypeConverter" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Type[])" attrib="6276">
                <parameters>
                  <parameter name="types" position="0" attrib="0" type="System.Type[]" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="sourceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.ComponentModel.TypeConverter+StandardValuesCollection">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
              <method name="GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UInt16Converter" type="class" base="System.ComponentModel.BaseNumberConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="UInt32Converter" type="class" base="System.ComponentModel.BaseNumberConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="UInt64Converter" type="class" base="System.ComponentModel.BaseNumberConverter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="WarningException" type="class" base="System.SystemException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="helpUrl" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="helpUrl" position="1" attrib="0" type="System.String" />
                  <parameter name="helpTopic" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="HelpTopic" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_HelpTopic()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HelpUrl" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_HelpUrl()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16582" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Win32Exception" type="class" base="System.Runtime.InteropServices.ExternalException" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Security.SuppressUnmanagedCodeSecurityAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="22662">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="22662">
                <parameters>
                  <parameter name="error" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="22662">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.String)" attrib="22662">
                <parameters>
                  <parameter name="error" position="0" attrib="0" type="System.Int32" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="22662">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="NativeErrorCode" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_NativeErrorCode()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16582" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.ComponentModel.Design">
        <classes>
          <class name="ActiveDesignerEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.ComponentModel.Design.IDesignerHost, System.ComponentModel.Design.IDesignerHost)" attrib="6278">
                <parameters>
                  <parameter name="oldDesigner" position="0" attrib="0" type="System.ComponentModel.Design.IDesignerHost" />
                  <parameter name="newDesigner" position="1" attrib="0" type="System.ComponentModel.Design.IDesignerHost" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="NewDesigner" attrib="0" ptype="System.ComponentModel.Design.IDesignerHost">
                <methods>
                  <method name="get_NewDesigner()" attrib="2182" returntype="System.ComponentModel.Design.IDesignerHost">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OldDesigner" attrib="0" ptype="System.ComponentModel.Design.IDesignerHost">
                <methods>
                  <method name="get_OldDesigner()" attrib="2182" returntype="System.ComponentModel.Design.IDesignerHost">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ActiveDesignerEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.Design.ActiveDesignerEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.ActiveDesignerEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.Design.ActiveDesignerEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.ActiveDesignerEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CheckoutException" type="class" base="System.Runtime.InteropServices.ExternalException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <fields>
              <field name="Canceled" attrib="54" fieldtype="System.ComponentModel.Design.CheckoutException" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="errorCode" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="CommandID" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Guid, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="menuGroup" position="0" attrib="0" type="System.Guid" />
                  <parameter name="commandID" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Guid" attrib="0" ptype="System.Guid">
                <methods>
                  <method name="get_Guid()" attrib="2502" virtual="true" returntype="System.Guid">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ID" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ID()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ComponentChangedEventArgs" type="class" base="System.EventArgs" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Object, System.ComponentModel.MemberDescriptor, System.Object, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="member" position="1" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                  <parameter name="oldValue" position="2" attrib="0" type="System.Object" />
                  <parameter name="newValue" position="3" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Component" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Component()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Member" attrib="0" ptype="System.ComponentModel.MemberDescriptor">
                <methods>
                  <method name="get_Member()" attrib="2182" returntype="System.ComponentModel.MemberDescriptor">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NewValue" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_NewValue()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OldValue" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_OldValue()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ComponentChangedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.Design.ComponentChangedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.ComponentChangedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.Design.ComponentChangedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.ComponentChangedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ComponentChangingEventArgs" type="class" base="System.EventArgs" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Object, System.ComponentModel.MemberDescriptor)" attrib="6278">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="member" position="1" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Component" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Component()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Member" attrib="0" ptype="System.ComponentModel.MemberDescriptor">
                <methods>
                  <method name="get_Member()" attrib="2182" returntype="System.ComponentModel.MemberDescriptor">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ComponentChangingEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.Design.ComponentChangingEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.ComponentChangingEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.Design.ComponentChangingEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.ComponentChangingEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ComponentEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.ComponentModel.IComponent)" attrib="6278">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Component" attrib="0" ptype="System.ComponentModel.IComponent">
                <methods>
                  <method name="get_Component()" attrib="2502" virtual="true" returntype="System.ComponentModel.IComponent">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ComponentEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.Design.ComponentEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.ComponentEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.Design.ComponentEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.ComponentEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ComponentRenameEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Object, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="oldName" position="1" attrib="0" type="System.String" />
                  <parameter name="newName" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Component" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Component()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NewName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_NewName()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OldName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_OldName()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ComponentRenameEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.Design.ComponentRenameEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.ComponentRenameEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.Design.ComponentRenameEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.ComponentRenameEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DesignerCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Collections.IList)" attrib="6278">
                <parameters>
                  <parameter name="designers" position="0" attrib="0" type="System.Collections.IList" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.ComponentModel.Design.IDesignerHost[])" attrib="6278">
                <parameters>
                  <parameter name="designers" position="0" attrib="0" type="System.ComponentModel.Design.IDesignerHost[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.ComponentModel.Design.IDesignerHost" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2502" virtual="true" returntype="System.ComponentModel.Design.IDesignerHost">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DesignerEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.ComponentModel.Design.IDesignerHost)" attrib="6278">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.ComponentModel.Design.IDesignerHost" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Designer" attrib="0" ptype="System.ComponentModel.Design.IDesignerHost">
                <methods>
                  <method name="get_Designer()" attrib="2182" returntype="System.ComponentModel.Design.IDesignerHost">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="DesignerEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.Design.DesignerEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.DesignerEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.Design.DesignerEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.DesignerEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DesignerOptionService" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.Design.IDesignerOptionService" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Options" attrib="0" ptype="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection">
                <methods>
                  <method name="get_Options()" attrib="2182" returntype="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection, System.String, System.Object)" attrib="132" returntype="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection">
                <parameters>
                  <parameter name="parent" position="0" attrib="0" type="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="options" position="0" attrib="0" type="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection" />
                </parameters>
              </method>
              <method name="ShowDialog(System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection, System.Object)" attrib="452" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="options" position="0" attrib="0" type="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection" />
                  <parameter name="optionObject" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
            <classes>
              <class name="DesignerOptionCollection" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.ComponentModel.EditorAttribute">
                    <properties>
                      <property name="EditorBaseTypeName" value="System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                      <property name="EditorTypeName" value="" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.TypeConverterAttribute">
                    <properties>
                      <property name="ConverterTypeName" value="System.ComponentModel.Design.DesignerOptionService/DesignerOptionConverter" />
                    </properties>
                  </attribute>
                  <attribute name="System.Reflection.DefaultMemberAttribute">
                    <properties>
                      <property name="MemberName" value="Item" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.ICollection" />
                  <interface name="System.Collections.IEnumerable" />
                  <interface name="System.Collections.IList" />
                </interfaces>
                <properties>
                  <property name="Count" attrib="0" ptype="System.Int32">
                    <methods>
                      <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="Item" attrib="0" ptype="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection" params="System.Int32">
                    <methods>
                      <method name="get_Item(System.Int32)" attrib="2182" returntype="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection">
                        <parameters>
                          <parameter name="index" position="0" attrib="0" type="System.Int32" />
                        </parameters>
                      </method>
                    </methods>
                  </property>
                  <property name="Item" attrib="0" ptype="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection" params="System.String">
                    <methods>
                      <method name="get_Item(System.String)" attrib="2182" returntype="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection">
                        <parameters>
                          <parameter name="name" position="0" attrib="0" type="System.String" />
                        </parameters>
                      </method>
                    </methods>
                  </property>
                  <property name="Name" attrib="0" ptype="System.String">
                    <methods>
                      <method name="get_Name()" attrib="2182" returntype="System.String">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="Parent" attrib="0" ptype="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection">
                    <methods>
                      <method name="get_Parent()" attrib="2182" returntype="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="Properties" attrib="0" ptype="System.ComponentModel.PropertyDescriptorCollection">
                    <methods>
                      <method name="get_Properties()" attrib="2182" returntype="System.ComponentModel.PropertyDescriptorCollection">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="array" position="0" attrib="0" type="System.Array" />
                      <parameter name="index" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IEnumerator">
                    <parameters />
                  </method>
                  <method name="IndexOf(System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection)" attrib="134" returntype="System.Int32">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection" />
                    </parameters>
                  </method>
                  <method name="ShowDialog()" attrib="134" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="DesignerTransaction" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6276">
                <parameters>
                  <parameter name="description" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Canceled" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Canceled()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Committed" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Committed()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Description" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Description()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Cancel()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Commit()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="OnCancel()" attrib="1476" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="OnCommit()" attrib="1476" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="~DesignerTransaction()" attrib="196" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DesignerTransactionCloseEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This constructor is obsolete. Use DesignerTransactionCloseEventArgs(bool, bool) instead.  http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="commit" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Boolean, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="commit" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="lastTransaction" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="LastTransaction" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_LastTransaction()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TransactionCommitted" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_TransactionCommitted()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="DesignerTransactionCloseEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.Design.DesignerTransactionCloseEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.Design.DesignerTransactionCloseEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DesignerVerb" type="class" base="System.ComponentModel.Design.MenuCommand" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String, System.EventHandler)" attrib="6278">
                <parameters>
                  <parameter name="text" position="0" attrib="0" type="System.String" />
                  <parameter name="handler" position="1" attrib="0" type="System.EventHandler" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.EventHandler, System.ComponentModel.Design.CommandID)" attrib="6278">
                <parameters>
                  <parameter name="text" position="0" attrib="0" type="System.String" />
                  <parameter name="handler" position="1" attrib="0" type="System.EventHandler" />
                  <parameter name="startCommandID" position="2" attrib="0" type="System.ComponentModel.Design.CommandID" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Description" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Description()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Description(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Text" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Text()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DesignerVerbCollection" type="class" base="System.Collections.CollectionBase" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.ComponentModel.Design.DesignerVerb[])" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.Design.DesignerVerb[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Item" attrib="0" ptype="System.ComponentModel.Design.DesignerVerb" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.ComponentModel.Design.DesignerVerb">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, System.ComponentModel.Design.DesignerVerb)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="System.ComponentModel.Design.DesignerVerb" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.ComponentModel.Design.DesignerVerb)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.Design.DesignerVerb" />
                </parameters>
              </method>
              <method name="AddRange(System.ComponentModel.Design.DesignerVerbCollection)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.Design.DesignerVerbCollection" />
                </parameters>
              </method>
              <method name="AddRange(System.ComponentModel.Design.DesignerVerb[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.Design.DesignerVerb[]" />
                </parameters>
              </method>
              <method name="Contains(System.ComponentModel.Design.DesignerVerb)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.Design.DesignerVerb" />
                </parameters>
              </method>
              <method name="CopyTo(System.ComponentModel.Design.DesignerVerb[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.ComponentModel.Design.DesignerVerb[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IndexOf(System.ComponentModel.Design.DesignerVerb)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.Design.DesignerVerb" />
                </parameters>
              </method>
              <method name="Insert(System.Int32, System.ComponentModel.Design.DesignerVerb)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="value" position="1" attrib="0" type="System.ComponentModel.Design.DesignerVerb" />
                </parameters>
              </method>
              <method name="OnClear()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="OnInsert(System.Int32, System.Object)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="OnRemove(System.Int32, System.Object)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="OnSet(System.Int32, System.Object, System.Object)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="oldValue" position="1" attrib="0" type="System.Object" />
                  <parameter name="newValue" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="OnValidate(System.Object)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Remove(System.ComponentModel.Design.DesignerVerb)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.ComponentModel.Design.DesignerVerb" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DesigntimeLicenseContext" type="class" base="System.ComponentModel.LicenseContext" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IServiceProvider" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="UsageMode" attrib="0" ptype="System.ComponentModel.LicenseUsageMode">
                <methods>
                  <method name="get_UsageMode()" attrib="2246" virtual="true" is-override="true" returntype="System.ComponentModel.LicenseUsageMode">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetSavedLicenseKey(System.Type, System.Reflection.Assembly)" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="resourceAssembly" position="1" attrib="0" type="System.Reflection.Assembly" />
                </parameters>
              </method>
              <method name="SetSavedLicenseKey(System.Type, System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="key" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DesigntimeLicenseContextSerializer" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <methods>
              <method name="Serialize(System.IO.Stream, System.String, System.ComponentModel.Design.DesigntimeLicenseContext)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="o" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="cryptoKey" position="1" attrib="0" type="System.String" />
                  <parameter name="context" position="2" attrib="0" type="System.ComponentModel.Design.DesigntimeLicenseContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="HelpContextType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Ambient" attrib="32854" fieldtype="System.ComponentModel.Design.HelpContextType" value="0" />
              <field name="Selection" attrib="32854" fieldtype="System.ComponentModel.Design.HelpContextType" value="2" />
              <field name="ToolWindowSelection" attrib="32854" fieldtype="System.ComponentModel.Design.HelpContextType" value="3" />
              <field name="Window" attrib="32854" fieldtype="System.ComponentModel.Design.HelpContextType" value="1" />
            </fields>
          </class>
          <class name="HelpKeywordAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Default" attrib="54" fieldtype="System.ComponentModel.Design.HelpKeywordAttribute" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="keyword" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="t" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="HelpKeyword" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_HelpKeyword()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsDefaultAttribute()" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="HelpKeywordType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="F1Keyword" attrib="32854" fieldtype="System.ComponentModel.Design.HelpKeywordType" value="0" />
              <field name="FilterKeyword" attrib="32854" fieldtype="System.ComponentModel.Design.HelpKeywordType" value="2" />
              <field name="GeneralKeyword" attrib="32854" fieldtype="System.ComponentModel.Design.HelpKeywordType" value="1" />
            </fields>
          </class>
          <class name="IComponentChangeService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <events>
              <event name="ComponentAdded" attrib="0" eventtype="System.ComponentModel.Design.ComponentEventHandler" />
              <event name="ComponentAdding" attrib="0" eventtype="System.ComponentModel.Design.ComponentEventHandler" />
              <event name="ComponentChanged" attrib="0" eventtype="System.ComponentModel.Design.ComponentChangedEventHandler" />
              <event name="ComponentChanging" attrib="0" eventtype="System.ComponentModel.Design.ComponentChangingEventHandler" />
              <event name="ComponentRemoved" attrib="0" eventtype="System.ComponentModel.Design.ComponentEventHandler" />
              <event name="ComponentRemoving" attrib="0" eventtype="System.ComponentModel.Design.ComponentEventHandler" />
              <event name="ComponentRename" attrib="0" eventtype="System.ComponentModel.Design.ComponentRenameEventHandler" />
            </events>
            <methods>
              <method name="OnComponentChanged(System.Object, System.ComponentModel.MemberDescriptor, System.Object, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="member" position="1" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                  <parameter name="oldValue" position="2" attrib="0" type="System.Object" />
                  <parameter name="newValue" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="OnComponentChanging(System.Object, System.ComponentModel.MemberDescriptor)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                  <parameter name="member" position="1" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IComponentDiscoveryService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetComponentTypes(System.ComponentModel.Design.IDesignerHost, System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.ICollection">
                <parameters>
                  <parameter name="designerHost" position="0" attrib="0" type="System.ComponentModel.Design.IDesignerHost" />
                  <parameter name="baseType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IComponentInitializer" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="InitializeExistingComponent(System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="defaultValues" position="0" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="InitializeNewComponent(System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="defaultValues" position="0" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IDesigner" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <properties>
              <property name="Component" attrib="0" ptype="System.ComponentModel.IComponent">
                <methods>
                  <method name="get_Component()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.IComponent">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Verbs" attrib="0" ptype="System.ComponentModel.Design.DesignerVerbCollection">
                <methods>
                  <method name="get_Verbs()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.Design.DesignerVerbCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="DoDefaultAction()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Initialize(System.ComponentModel.IComponent)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IDesignerEventService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="ActiveDesigner" attrib="0" ptype="System.ComponentModel.Design.IDesignerHost">
                <methods>
                  <method name="get_ActiveDesigner()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.Design.IDesignerHost">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Designers" attrib="0" ptype="System.ComponentModel.Design.DesignerCollection">
                <methods>
                  <method name="get_Designers()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.Design.DesignerCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="ActiveDesignerChanged" attrib="0" eventtype="System.ComponentModel.Design.ActiveDesignerEventHandler" />
              <event name="DesignerCreated" attrib="0" eventtype="System.ComponentModel.Design.DesignerEventHandler" />
              <event name="DesignerDisposed" attrib="0" eventtype="System.ComponentModel.Design.DesignerEventHandler" />
              <event name="SelectionChanged" attrib="0" eventtype="System.EventHandler" />
            </events>
          </class>
          <class name="IDesignerFilter" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="PostFilterAttributes(System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="attributes" position="0" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="PostFilterEvents(System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="events" position="0" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="PostFilterProperties(System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="properties" position="0" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="PreFilterAttributes(System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="attributes" position="0" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="PreFilterEvents(System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="events" position="0" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="PreFilterProperties(System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="properties" position="0" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IDesignerHost" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ComponentModel.Design.IServiceContainer" />
              <interface name="System.IServiceProvider" />
            </interfaces>
            <properties>
              <property name="Container" attrib="0" ptype="System.ComponentModel.IContainer">
                <methods>
                  <method name="get_Container()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.IContainer">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InTransaction" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_InTransaction()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Loading" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Loading()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RootComponent" attrib="0" ptype="System.ComponentModel.IComponent">
                <methods>
                  <method name="get_RootComponent()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.IComponent">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RootComponentClassName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_RootComponentClassName()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TransactionDescription" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TransactionDescription()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="Activated" attrib="0" eventtype="System.EventHandler" />
              <event name="Deactivated" attrib="0" eventtype="System.EventHandler" />
              <event name="LoadComplete" attrib="0" eventtype="System.EventHandler" />
              <event name="TransactionClosed" attrib="0" eventtype="System.ComponentModel.Design.DesignerTransactionCloseEventHandler" />
              <event name="TransactionClosing" attrib="0" eventtype="System.ComponentModel.Design.DesignerTransactionCloseEventHandler" />
              <event name="TransactionOpened" attrib="0" eventtype="System.EventHandler" />
              <event name="TransactionOpening" attrib="0" eventtype="System.EventHandler" />
            </events>
            <methods>
              <method name="Activate()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="CreateComponent(System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.IComponent">
                <parameters>
                  <parameter name="componentClass" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CreateComponent(System.Type, System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.IComponent">
                <parameters>
                  <parameter name="componentClass" position="0" attrib="0" type="System.Type" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CreateTransaction()" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.Design.DesignerTransaction">
                <parameters />
              </method>
              <method name="CreateTransaction(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.Design.DesignerTransaction">
                <parameters>
                  <parameter name="description" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DestroyComponent(System.ComponentModel.IComponent)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                </parameters>
              </method>
              <method name="GetDesigner(System.ComponentModel.IComponent)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.Design.IDesigner">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                </parameters>
              </method>
              <method name="GetType(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Type">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IDesignerHostTransactionState" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="IsClosingTransaction" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsClosingTransaction()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IDesignerOptionService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetOptionValue(System.String, System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="pageName" position="0" attrib="0" type="System.String" />
                  <parameter name="valueName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SetOptionValue(System.String, System.String, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="pageName" position="0" attrib="0" type="System.String" />
                  <parameter name="valueName" position="1" attrib="0" type="System.String" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IDictionaryService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetKey(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetValue(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SetValue(System.Object, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Object" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IEventBindingService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <methods>
              <method name="CreateUniqueMethodName(System.ComponentModel.IComponent, System.ComponentModel.EventDescriptor)" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.EventDescriptor" />
                </parameters>
              </method>
              <method name="GetCompatibleMethods(System.ComponentModel.EventDescriptor)" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.ICollection">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.ComponentModel.EventDescriptor" />
                </parameters>
              </method>
              <method name="GetEvent(System.ComponentModel.PropertyDescriptor)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.EventDescriptor">
                <parameters>
                  <parameter name="property" position="0" attrib="0" type="System.ComponentModel.PropertyDescriptor" />
                </parameters>
              </method>
              <method name="GetEventProperties(System.ComponentModel.EventDescriptorCollection)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                <parameters>
                  <parameter name="events" position="0" attrib="0" type="System.ComponentModel.EventDescriptorCollection" />
                </parameters>
              </method>
              <method name="GetEventProperty(System.ComponentModel.EventDescriptor)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.PropertyDescriptor">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.ComponentModel.EventDescriptor" />
                </parameters>
              </method>
              <method name="ShowCode()" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="ShowCode(System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="lineNumber" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ShowCode(System.ComponentModel.IComponent, System.ComponentModel.EventDescriptor)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.EventDescriptor" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IExtenderListService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetExtenderProviders()" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.IExtenderProvider[]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="IExtenderProviderService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="AddExtenderProvider(System.ComponentModel.IExtenderProvider)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.ComponentModel.IExtenderProvider" />
                </parameters>
              </method>
              <method name="RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.ComponentModel.IExtenderProvider" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IHelpService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="AddContextAttribute(System.String, System.String, System.ComponentModel.Design.HelpKeywordType)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                  <parameter name="keywordType" position="2" attrib="0" type="System.ComponentModel.Design.HelpKeywordType" />
                </parameters>
              </method>
              <method name="ClearContextAttributes()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="CreateLocalContext(System.ComponentModel.Design.HelpContextType)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.Design.IHelpService">
                <parameters>
                  <parameter name="contextType" position="0" attrib="0" type="System.ComponentModel.Design.HelpContextType" />
                </parameters>
              </method>
              <method name="RemoveContextAttribute(System.String, System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="RemoveLocalContext(System.ComponentModel.Design.IHelpService)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="localContext" position="0" attrib="0" type="System.ComponentModel.Design.IHelpService" />
                </parameters>
              </method>
              <method name="ShowHelpFromKeyword(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="helpKeyword" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ShowHelpFromUrl(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="helpUrl" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IInheritanceService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="AddInheritedComponents(System.ComponentModel.IComponent, System.ComponentModel.IContainer)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                  <parameter name="container" position="1" attrib="0" type="System.ComponentModel.IContainer" />
                </parameters>
              </method>
              <method name="GetInheritanceAttribute(System.ComponentModel.IComponent)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.InheritanceAttribute">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IMenuCommandService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Verbs" attrib="0" ptype="System.ComponentModel.Design.DesignerVerbCollection">
                <methods>
                  <method name="get_Verbs()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.Design.DesignerVerbCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddCommand(System.ComponentModel.Design.MenuCommand)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="command" position="0" attrib="0" type="System.ComponentModel.Design.MenuCommand" />
                </parameters>
              </method>
              <method name="AddVerb(System.ComponentModel.Design.DesignerVerb)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="verb" position="0" attrib="0" type="System.ComponentModel.Design.DesignerVerb" />
                </parameters>
              </method>
              <method name="FindCommand(System.ComponentModel.Design.CommandID)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.Design.MenuCommand">
                <parameters>
                  <parameter name="commandID" position="0" attrib="0" type="System.ComponentModel.Design.CommandID" />
                </parameters>
              </method>
              <method name="GlobalInvoke(System.ComponentModel.Design.CommandID)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="commandID" position="0" attrib="0" type="System.ComponentModel.Design.CommandID" />
                </parameters>
              </method>
              <method name="RemoveCommand(System.ComponentModel.Design.MenuCommand)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="command" position="0" attrib="0" type="System.ComponentModel.Design.MenuCommand" />
                </parameters>
              </method>
              <method name="RemoveVerb(System.ComponentModel.Design.DesignerVerb)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="verb" position="0" attrib="0" type="System.ComponentModel.Design.DesignerVerb" />
                </parameters>
              </method>
              <method name="ShowContextMenu(System.ComponentModel.Design.CommandID, System.Int32, System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="menuID" position="0" attrib="0" type="System.ComponentModel.Design.CommandID" />
                  <parameter name="x" position="1" attrib="0" type="System.Int32" />
                  <parameter name="y" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IReferenceService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetComponent(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.IComponent">
                <parameters>
                  <parameter name="reference" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetName(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="reference" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetReference(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetReferences()" attrib="1478" abstract="true" virtual="true" returntype="System.Object[]">
                <parameters />
              </method>
              <method name="GetReferences(System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.Object[]">
                <parameters>
                  <parameter name="baseType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IResourceService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetResourceReader(System.Globalization.CultureInfo)" attrib="1478" abstract="true" virtual="true" returntype="System.Resources.IResourceReader">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Globalization.CultureInfo" />
                </parameters>
              </method>
              <method name="GetResourceWriter(System.Globalization.CultureInfo)" attrib="1478" abstract="true" virtual="true" returntype="System.Resources.IResourceWriter">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Globalization.CultureInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IRootDesigner" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ComponentModel.Design.IDesigner" />
              <interface name="System.IDisposable" />
            </interfaces>
            <properties>
              <property name="SupportedTechnologies" attrib="0" ptype="System.ComponentModel.Design.ViewTechnology[]">
                <methods>
                  <method name="get_SupportedTechnologies()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.Design.ViewTechnology[]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetView(System.ComponentModel.Design.ViewTechnology)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="technology" position="0" attrib="0" type="System.ComponentModel.Design.ViewTechnology" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ISelectionService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="PrimarySelection" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_PrimarySelection()" attrib="3526" abstract="true" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SelectionCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_SelectionCount()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="SelectionChanged" attrib="0" eventtype="System.EventHandler" />
              <event name="SelectionChanging" attrib="0" eventtype="System.EventHandler" />
            </events>
            <methods>
              <method name="GetComponentSelected(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetSelectedComponents()" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.ICollection">
                <parameters />
              </method>
              <method name="SetSelectedComponents(System.Collections.ICollection)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="components" position="0" attrib="0" type="System.Collections.ICollection" />
                </parameters>
              </method>
              <method name="SetSelectedComponents(System.Collections.ICollection, System.ComponentModel.Design.SelectionTypes)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="components" position="0" attrib="0" type="System.Collections.ICollection" />
                  <parameter name="selectionType" position="1" attrib="0" type="System.ComponentModel.Design.SelectionTypes" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IServiceContainer" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IServiceProvider" />
            </interfaces>
            <methods>
              <method name="AddService(System.Type, System.ComponentModel.Design.ServiceCreatorCallback)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                  <parameter name="callback" position="1" attrib="0" type="System.ComponentModel.Design.ServiceCreatorCallback" />
                </parameters>
              </method>
              <method name="AddService(System.Type, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                  <parameter name="serviceInstance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AddService(System.Type, System.ComponentModel.Design.ServiceCreatorCallback, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                  <parameter name="callback" position="1" attrib="0" type="System.ComponentModel.Design.ServiceCreatorCallback" />
                  <parameter name="promote" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="AddService(System.Type, System.Object, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                  <parameter name="serviceInstance" position="1" attrib="0" type="System.Object" />
                  <parameter name="promote" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="RemoveService(System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="RemoveService(System.Type, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                  <parameter name="promote" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITreeDesigner" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.Design.IDesigner" />
              <interface name="System.IDisposable" />
            </interfaces>
            <properties>
              <property name="Children" attrib="0" ptype="System.Collections.ICollection">
                <methods>
                  <method name="get_Children()" attrib="3526" abstract="true" virtual="true" returntype="System.Collections.ICollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Parent" attrib="0" ptype="System.ComponentModel.Design.IDesigner">
                <methods>
                  <method name="get_Parent()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.Design.IDesigner">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ITypeDescriptorFilterService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="FilterAttributes(System.ComponentModel.IComponent, System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                  <parameter name="attributes" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="FilterEvents(System.ComponentModel.IComponent, System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                  <parameter name="events" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="FilterProperties(System.ComponentModel.IComponent, System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="component" position="0" attrib="0" type="System.ComponentModel.IComponent" />
                  <parameter name="properties" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITypeDiscoveryService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetTypes(System.Type, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.ICollection">
                <parameters>
                  <parameter name="baseType" position="0" attrib="0" type="System.Type" />
                  <parameter name="excludeGlobalTypes" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITypeResolutionService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetAssembly(System.Reflection.AssemblyName)" attrib="1478" abstract="true" virtual="true" returntype="System.Reflection.Assembly">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.Reflection.AssemblyName" />
                </parameters>
              </method>
              <method name="GetAssembly(System.Reflection.AssemblyName, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Reflection.Assembly">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.Reflection.AssemblyName" />
                  <parameter name="throwOnError" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetPathOfAssembly(System.Reflection.AssemblyName)" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.Reflection.AssemblyName" />
                </parameters>
              </method>
              <method name="GetType(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Type">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetType(System.String, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Type">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="throwOnError" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetType(System.String, System.Boolean, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Type">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="throwOnError" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="ignoreCase" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="ReferenceAssembly(System.Reflection.AssemblyName)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.Reflection.AssemblyName" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MenuCommand" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.EventHandler, System.ComponentModel.Design.CommandID)" attrib="6278">
                <parameters>
                  <parameter name="handler" position="0" attrib="0" type="System.EventHandler" />
                  <parameter name="command" position="1" attrib="0" type="System.ComponentModel.Design.CommandID" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Checked" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Checked()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Checked(System.Boolean)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CommandID" attrib="0" ptype="System.ComponentModel.Design.CommandID">
                <methods>
                  <method name="get_CommandID()" attrib="2502" virtual="true" returntype="System.ComponentModel.Design.CommandID">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Enabled" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Enabled()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Enabled(System.Boolean)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="OleStatus" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_OleStatus()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Properties" attrib="0" ptype="System.Collections.IDictionary">
                <methods>
                  <method name="get_Properties()" attrib="2502" virtual="true" returntype="System.Collections.IDictionary">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Supported" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Supported()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Supported(System.Boolean)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Visible" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Visible()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Visible(System.Boolean)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="CommandChanged" attrib="0" eventtype="System.EventHandler" />
            </events>
            <methods>
              <method name="Invoke()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Invoke(System.Object)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="arg" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="OnCommandChanged(System.EventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.EventArgs" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="SelectionTypes" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Add" attrib="32854" fieldtype="System.ComponentModel.Design.SelectionTypes" value="64" />
              <field name="Auto" attrib="32854" fieldtype="System.ComponentModel.Design.SelectionTypes" value="1" />
              <field name="Click" attrib="32854" fieldtype="System.ComponentModel.Design.SelectionTypes" value="16">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This value has been deprecated. Use SelectionTypes.Primary instead.  http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="MouseDown" attrib="32854" fieldtype="System.ComponentModel.Design.SelectionTypes" value="4">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This value has been deprecated.  It is no longer supported. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="MouseUp" attrib="32854" fieldtype="System.ComponentModel.Design.SelectionTypes" value="8">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This value has been deprecated.  It is no longer supported. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="Normal" attrib="32854" fieldtype="System.ComponentModel.Design.SelectionTypes" value="1">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This value has been deprecated. Use SelectionTypes.Auto instead.  http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="Primary" attrib="32854" fieldtype="System.ComponentModel.Design.SelectionTypes" value="16" />
              <field name="Remove" attrib="32854" fieldtype="System.ComponentModel.Design.SelectionTypes" value="128" />
              <field name="Replace" attrib="32854" fieldtype="System.ComponentModel.Design.SelectionTypes" value="2" />
              <field name="Toggle" attrib="32854" fieldtype="System.ComponentModel.Design.SelectionTypes" value="32" />
              <field name="Valid" attrib="32854" fieldtype="System.ComponentModel.Design.SelectionTypes" value="31">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This value has been deprecated. Use Enum class methods to determine valid values, or use a type converter. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
            </fields>
          </class>
          <class name="ServiceContainer" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.Design.IServiceContainer" />
              <interface name="System.IDisposable" />
              <interface name="System.IServiceProvider" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.IServiceProvider)" attrib="6278">
                <parameters>
                  <parameter name="parentProvider" position="0" attrib="0" type="System.IServiceProvider" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="DefaultServices" attrib="0" ptype="System.Type[]">
                <methods>
                  <method name="get_DefaultServices()" attrib="2500" virtual="true" returntype="System.Type[]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddService(System.Type, System.ComponentModel.Design.ServiceCreatorCallback)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                  <parameter name="callback" position="1" attrib="0" type="System.ComponentModel.Design.ServiceCreatorCallback" />
                </parameters>
              </method>
              <method name="AddService(System.Type, System.Object)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                  <parameter name="serviceInstance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AddService(System.Type, System.ComponentModel.Design.ServiceCreatorCallback, System.Boolean)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                  <parameter name="callback" position="1" attrib="0" type="System.ComponentModel.Design.ServiceCreatorCallback" />
                  <parameter name="promote" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="AddService(System.Type, System.Object, System.Boolean)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                  <parameter name="serviceInstance" position="1" attrib="0" type="System.Object" />
                  <parameter name="promote" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetService(System.Type)" attrib="454" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="RemoveService(System.Type)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="RemoveService(System.Type, System.Boolean)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serviceType" position="0" attrib="0" type="System.Type" />
                  <parameter name="promote" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ServiceCreatorCallback" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.ComponentModel.Design.IServiceContainer, System.Type, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="container" position="0" attrib="0" type="System.ComponentModel.Design.IServiceContainer" />
                  <parameter name="serviceType" position="1" attrib="0" type="System.Type" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.ComponentModel.Design.IServiceContainer, System.Type)" attrib="454" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="container" position="0" attrib="0" type="System.ComponentModel.Design.IServiceContainer" />
                  <parameter name="serviceType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="StandardCommands" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="AlignBottom" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="AlignHorizontalCenters" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="AlignLeft" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="AlignRight" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="AlignToGrid" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="AlignTop" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="AlignVerticalCenters" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="ArrangeBottom" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="ArrangeIcons" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="ArrangeRight" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="BringForward" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="BringToFront" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="CenterHorizontally" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="CenterVertically" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="Copy" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="Cut" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="Delete" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="DocumentOutline" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="F1Help" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="Group" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="HorizSpaceConcatenate" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="HorizSpaceDecrease" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="HorizSpaceIncrease" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="HorizSpaceMakeEqual" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="LineupIcons" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="LockControls" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="MultiLevelRedo" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="MultiLevelUndo" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="Paste" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="Properties" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="PropertiesWindow" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="Redo" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="Replace" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="SelectAll" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="SendBackward" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="SendToBack" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="ShowGrid" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="ShowLargeIcons" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="SizeToControl" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="SizeToControlHeight" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="SizeToControlWidth" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="SizeToFit" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="SizeToGrid" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="SnapToGrid" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="TabOrder" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="Undo" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="Ungroup" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="VerbFirst" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="VerbLast" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="VertSpaceConcatenate" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="VertSpaceDecrease" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="VertSpaceIncrease" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="VertSpaceMakeEqual" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="ViewCode" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
              <field name="ViewGrid" attrib="54" fieldtype="System.ComponentModel.Design.CommandID" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="StandardToolWindows" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="ObjectBrowser" attrib="54" fieldtype="System.Guid" />
              <field name="OutputWindow" attrib="54" fieldtype="System.Guid" />
              <field name="ProjectExplorer" attrib="54" fieldtype="System.Guid" />
              <field name="PropertyBrowser" attrib="54" fieldtype="System.Guid" />
              <field name="RelatedLinks" attrib="54" fieldtype="System.Guid" />
              <field name="ServerExplorer" attrib="54" fieldtype="System.Guid" />
              <field name="TaskList" attrib="54" fieldtype="System.Guid" />
              <field name="Toolbox" attrib="54" fieldtype="System.Guid" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="TypeDescriptionProviderService" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetProvider(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.TypeDescriptionProvider">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetProvider(System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.TypeDescriptionProvider">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ViewTechnology" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Default" attrib="32854" fieldtype="System.ComponentModel.Design.ViewTechnology" value="2" />
              <field name="Passthrough" attrib="32854" fieldtype="System.ComponentModel.Design.ViewTechnology" value="0">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This value has been deprecated. Use ViewTechnology.Default instead.  http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="WindowsForms" attrib="32854" fieldtype="System.ComponentModel.Design.ViewTechnology" value="1">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This value has been deprecated. Use ViewTechnology.Default instead.  http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="System.ComponentModel.Design.Serialization">
        <classes>
          <class name="ComponentSerializationService" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CreateStore()" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.Design.Serialization.SerializationStore">
                <parameters />
              </method>
              <method name="Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.ICollection">
                <parameters>
                  <parameter name="store" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.SerializationStore" />
                </parameters>
              </method>
              <method name="Deserialize(System.ComponentModel.Design.Serialization.SerializationStore, System.ComponentModel.IContainer)" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.ICollection">
                <parameters>
                  <parameter name="store" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.SerializationStore" />
                  <parameter name="container" position="1" attrib="0" type="System.ComponentModel.IContainer" />
                </parameters>
              </method>
              <method name="DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore, System.ComponentModel.IContainer)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="store" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.SerializationStore" />
                  <parameter name="container" position="1" attrib="0" type="System.ComponentModel.IContainer" />
                </parameters>
              </method>
              <method name="DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore, System.ComponentModel.IContainer, System.Boolean)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="store" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.SerializationStore" />
                  <parameter name="container" position="1" attrib="0" type="System.ComponentModel.IContainer" />
                  <parameter name="validateRecycledTypes" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore, System.ComponentModel.IContainer, System.Boolean, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="store" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.SerializationStore" />
                  <parameter name="container" position="1" attrib="0" type="System.ComponentModel.IContainer" />
                  <parameter name="validateRecycledTypes" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="applyDefaults" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="LoadStore(System.IO.Stream)" attrib="1478" abstract="true" virtual="true" returntype="System.ComponentModel.Design.Serialization.SerializationStore">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                </parameters>
              </method>
              <method name="Serialize(System.ComponentModel.Design.Serialization.SerializationStore, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="store" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.SerializationStore" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="store" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.SerializationStore" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore, System.Object, System.ComponentModel.MemberDescriptor)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="store" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.SerializationStore" />
                  <parameter name="owningObject" position="1" attrib="0" type="System.Object" />
                  <parameter name="member" position="2" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                </parameters>
              </method>
              <method name="SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore, System.Object, System.ComponentModel.MemberDescriptor)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="store" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.SerializationStore" />
                  <parameter name="owningObject" position="1" attrib="0" type="System.Object" />
                  <parameter name="member" position="2" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ContextStack" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Current" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Current()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Object" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Object">
                    <parameters>
                      <parameter name="level" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Object" params="System.Type">
                <methods>
                  <method name="get_Item(System.Type)" attrib="2182" returntype="System.Object">
                    <parameters>
                      <parameter name="type" position="0" attrib="0" type="System.Type" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Append(System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Pop()" attrib="134" returntype="System.Object">
                <parameters />
              </method>
              <method name="Push(System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DefaultSerializationProviderAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="providerTypeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="providerType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ProviderTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ProviderTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="DesignerLoader" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Loading" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Loading()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />
                </parameters>
              </method>
              <method name="Dispose()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Flush()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DesignerSerializerAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Interface, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="serializerTypeName" position="0" attrib="0" type="System.String" />
                  <parameter name="baseSerializerTypeName" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Type)" attrib="6278">
                <parameters>
                  <parameter name="serializerTypeName" position="0" attrib="0" type="System.String" />
                  <parameter name="baseSerializerType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.Type)" attrib="6278">
                <parameters>
                  <parameter name="serializerType" position="0" attrib="0" type="System.Type" />
                  <parameter name="baseSerializerType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="SerializerBaseTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SerializerBaseTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SerializerTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SerializerTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TypeId" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_TypeId()" attrib="2246" virtual="true" is-override="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IDesignerLoaderHost" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.Design.IDesignerHost" />
              <interface name="System.ComponentModel.Design.IServiceContainer" />
              <interface name="System.IServiceProvider" />
            </interfaces>
            <methods>
              <method name="EndLoad(System.String, System.Boolean, System.Collections.ICollection)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="baseClassName" position="0" attrib="0" type="System.String" />
                  <parameter name="successful" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="errorCollection" position="2" attrib="0" type="System.Collections.ICollection" />
                </parameters>
              </method>
              <method name="Reload()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="IDesignerLoaderHost2" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.Design.IDesignerHost" />
              <interface name="System.ComponentModel.Design.IServiceContainer" />
              <interface name="System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />
              <interface name="System.IServiceProvider" />
            </interfaces>
            <properties>
              <property name="CanReloadWithErrors" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanReloadWithErrors()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_CanReloadWithErrors(System.Boolean)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IgnoreErrorsDuringReload" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IgnoreErrorsDuringReload()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IgnoreErrorsDuringReload(System.Boolean)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IDesignerLoaderService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="AddLoadDependency()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="DependentLoadComplete(System.Boolean, System.Collections.ICollection)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="successful" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="errorCollection" position="1" attrib="0" type="System.Collections.ICollection" />
                </parameters>
              </method>
              <method name="Reload()" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="IDesignerSerializationManager" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IServiceProvider" />
            </interfaces>
            <properties>
              <property name="Context" attrib="0" ptype="System.ComponentModel.Design.Serialization.ContextStack">
                <methods>
                  <method name="get_Context()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.Design.Serialization.ContextStack">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Properties" attrib="0" ptype="System.ComponentModel.PropertyDescriptorCollection">
                <methods>
                  <method name="get_Properties()" attrib="3526" abstract="true" virtual="true" returntype="System.ComponentModel.PropertyDescriptorCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="ResolveName" attrib="0" eventtype="System.ComponentModel.Design.Serialization.ResolveNameEventHandler" />
              <event name="SerializationComplete" attrib="0" eventtype="System.EventHandler" />
            </events>
            <methods>
              <method name="AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />
                </parameters>
              </method>
              <method name="CreateInstance(System.Type, System.Collections.ICollection, System.String, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Collections.ICollection" />
                  <parameter name="name" position="2" attrib="0" type="System.String" />
                  <parameter name="addToContainer" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetInstance(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetName(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetSerializer(System.Type, System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="objectType" position="0" attrib="0" type="System.Type" />
                  <parameter name="serializerType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetType(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Type">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />
                </parameters>
              </method>
              <method name="ReportError(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="errorInformation" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SetName(System.Object, System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IDesignerSerializationProvider" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager, System.Object, System.Type, System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="manager" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
                  <parameter name="currentSerializer" position="1" attrib="0" type="System.Object" />
                  <parameter name="objectType" position="2" attrib="0" type="System.Type" />
                  <parameter name="serializerType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IDesignerSerializationService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="Deserialize(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.ICollection">
                <parameters>
                  <parameter name="serializationData" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Serialize(System.Collections.ICollection)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="objects" position="0" attrib="0" type="System.Collections.ICollection" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="INameCreationService" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="CreateName(System.ComponentModel.IContainer, System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="container" position="0" attrib="0" type="System.ComponentModel.IContainer" />
                  <parameter name="dataType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="IsValidName(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ValidateName(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="InstanceDescriptor" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Reflection.MemberInfo, System.Collections.ICollection)" attrib="6278">
                <parameters>
                  <parameter name="member" position="0" attrib="0" type="System.Reflection.MemberInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Collections.ICollection" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Reflection.MemberInfo, System.Collections.ICollection, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="member" position="0" attrib="0" type="System.Reflection.MemberInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Collections.ICollection" />
                  <parameter name="isComplete" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Arguments" attrib="0" ptype="System.Collections.ICollection">
                <methods>
                  <method name="get_Arguments()" attrib="2182" returntype="System.Collections.ICollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsComplete" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsComplete()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MemberInfo" attrib="0" ptype="System.Reflection.MemberInfo">
                <methods>
                  <method name="get_MemberInfo()" attrib="2182" returntype="System.Reflection.MemberInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Invoke()" attrib="134" returntype="System.Object">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="MemberRelationship" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
            <fields>
              <field name="Empty" attrib="54" fieldtype="System.ComponentModel.Design.Serialization.MemberRelationship" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Object, System.ComponentModel.MemberDescriptor)" attrib="6278">
                <parameters>
                  <parameter name="owner" position="0" attrib="0" type="System.Object" />
                  <parameter name="member" position="1" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsEmpty" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsEmpty()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Member" attrib="0" ptype="System.ComponentModel.MemberDescriptor">
                <methods>
                  <method name="get_Member()" attrib="2182" returntype="System.ComponentModel.MemberDescriptor">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Owner" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Owner()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship, System.ComponentModel.Design.Serialization.MemberRelationship)" attrib="2198" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                  <parameter name="right" position="1" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                </parameters>
              </method>
              <method name="op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship, System.ComponentModel.Design.Serialization.MemberRelationship)" attrib="2198" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                  <parameter name="right" position="1" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MemberRelationshipService" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Item" attrib="0" ptype="System.ComponentModel.Design.Serialization.MemberRelationship" params="System.ComponentModel.Design.Serialization.MemberRelationship">
                <methods>
                  <method name="get_Item(System.ComponentModel.Design.Serialization.MemberRelationship)" attrib="2182" returntype="System.ComponentModel.Design.Serialization.MemberRelationship">
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.ComponentModel.Design.Serialization.MemberRelationship, System.ComponentModel.Design.Serialization.MemberRelationship)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                      <parameter name="value" position="1" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.ComponentModel.Design.Serialization.MemberRelationship" params="System.Object, System.ComponentModel.MemberDescriptor">
                <methods>
                  <method name="get_Item(System.Object, System.ComponentModel.MemberDescriptor)" attrib="2182" returntype="System.ComponentModel.Design.Serialization.MemberRelationship">
                    <parameters>
                      <parameter name="sourceOwner" position="0" attrib="0" type="System.Object" />
                      <parameter name="sourceMember" position="1" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Object, System.ComponentModel.MemberDescriptor, System.ComponentModel.Design.Serialization.MemberRelationship)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="sourceOwner" position="0" attrib="0" type="System.Object" />
                      <parameter name="sourceMember" position="1" attrib="0" type="System.ComponentModel.MemberDescriptor" />
                      <parameter name="value" position="2" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)" attrib="452" virtual="true" returntype="System.ComponentModel.Design.Serialization.MemberRelationship">
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                </parameters>
              </method>
              <method name="SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship, System.ComponentModel.Design.Serialization.MemberRelationship)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                  <parameter name="relationship" position="1" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                </parameters>
              </method>
              <method name="SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship, System.ComponentModel.Design.Serialization.MemberRelationship)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                  <parameter name="relationship" position="1" attrib="0" type="System.ComponentModel.Design.Serialization.MemberRelationship" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ResolveNameEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                  <method name="set_Value(System.Object)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ResolveNameEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.Design.Serialization.ResolveNameEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="RootDesignerSerializerAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Interface, Class" />
                </properties>
              </attribute>
              <attribute name="System.ObsoleteAttribute">
                <properties>
                  <property name="Message" value="This attribute has been deprecated. Use DesignerSerializerAttribute instead.  For example, to specify a root designer for CodeDom, use DesignerSerializerAttribute(...,typeof(TypeCodeDomSerializer)).  http://go.microsoft.com/fwlink/?linkid=14202" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String, System.String, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="serializerTypeName" position="0" attrib="0" type="System.String" />
                  <parameter name="baseSerializerTypeName" position="1" attrib="0" type="System.String" />
                  <parameter name="reloadable" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Type, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="serializerTypeName" position="0" attrib="0" type="System.String" />
                  <parameter name="baseSerializerType" position="1" attrib="0" type="System.Type" />
                  <parameter name="reloadable" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.Type, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="serializerType" position="0" attrib="0" type="System.Type" />
                  <parameter name="baseSerializerType" position="1" attrib="0" type="System.Type" />
                  <parameter name="reloadable" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Reloadable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Reloadable()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SerializerBaseTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SerializerBaseTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SerializerTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SerializerTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TypeId" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_TypeId()" attrib="2246" virtual="true" is-override="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="SerializationStore" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Errors" attrib="0" ptype="System.Collections.ICollection">
                <methods>
                  <method name="get_Errors()" attrib="3526" abstract="true" virtual="true" returntype="System.Collections.ICollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Save(System.IO.Stream)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Diagnostics">
        <classes>
          <class name="BooleanSwitch" type="class" base="System.Diagnostics.Switch" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.SwitchLevelAttribute" />
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="displayName" position="0" attrib="0" type="System.String" />
                  <parameter name="description" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="displayName" position="0" attrib="0" type="System.String" />
                  <parameter name="description" position="1" attrib="0" type="System.String" />
                  <parameter name="defaultSwitchValue" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Enabled" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Enabled()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Enabled(System.Boolean)" attrib="18566" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="OnValueChanged()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="CorrelationManager" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <properties>
              <property name="ActivityId" attrib="0" ptype="System.Guid">
                <methods>
                  <method name="get_ActivityId()" attrib="2182" returntype="System.Guid">
                    <parameters />
                  </method>
                  <method name="set_ActivityId(System.Guid)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Guid" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="LogicalOperationStack" attrib="0" ptype="System.Collections.Stack">
                <methods>
                  <method name="get_LogicalOperationStack()" attrib="2182" returntype="System.Collections.Stack">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="StartLogicalOperation()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="StartLogicalOperation(System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="operationId" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="StopLogicalOperation()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DataReceivedEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="Data" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Data()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="DataReceivedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Diagnostics.DataReceivedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Diagnostics.DataReceivedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Diagnostics.DataReceivedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Diagnostics.DataReceivedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Debug" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="AutoFlush" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AutoFlush()" attrib="18582" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AutoFlush(System.Boolean)" attrib="18582" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IndentLevel" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_IndentLevel()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_IndentLevel(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IndentSize" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_IndentSize()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_IndentSize(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Listeners" attrib="0" ptype="System.Diagnostics.TraceListenerCollection">
                <methods>
                  <method name="get_Listeners()" attrib="18582" static="true" returntype="System.Diagnostics.TraceListenerCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Assert(System.Boolean)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Assert(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Assert(System.Boolean, System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="detailMessage" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Assert(System.Boolean, System.String, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="detailMessageFormat" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Close()" attrib="16534" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Fail(System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Fail(System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="detailMessage" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Flush()" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Indent()" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Print(System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Print(System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Unindent()" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Write(System.Object)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Write(System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Write(System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="category" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Write(System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="category" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteIf(System.Boolean, System.Object)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteIf(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteIf(System.Boolean, System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                  <parameter name="category" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteIf(System.Boolean, System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="category" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.Object)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteLine(System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="category" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="WriteLine(System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="category" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLineIf(System.Boolean, System.Object)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteLineIf(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLineIf(System.Boolean, System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                  <parameter name="category" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLineIf(System.Boolean, System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="DEBUG" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="category" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DefaultTraceListener" type="class" base="System.Diagnostics.TraceListener" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="AssertUiEnabled" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_AssertUiEnabled()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AssertUiEnabled(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="LogFileName" attrib="0" ptype="System.String">
                <attributes />
                <methods>
                  <method name="get_LogFileName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_LogFileName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Fail(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Fail(System.String, System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="detailMessage" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Write(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DelimitedListTraceListener" type="class" base="System.Diagnostics.TextWriterTraceListener" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.IO.Stream)" attrib="6278">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.TextWriter)" attrib="6278">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.String)" attrib="6278">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.TextWriter, System.String)" attrib="6278">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Delimiter" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Delimiter()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Delimiter(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetSupportedAttributes()" attrib="197" virtual="true" is-override="true" returntype="System.String[]">
                <parameters />
              </method>
              <method name="TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="eventCache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="eventType" position="2" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="3" attrib="0" type="System.Int32" />
                  <parameter name="data" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object[])" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="eventCache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="eventType" position="2" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="3" attrib="0" type="System.Int32" />
                  <parameter name="data" position="4" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="eventCache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="eventType" position="2" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="3" attrib="0" type="System.Int32" />
                  <parameter name="message" position="4" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[])" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="eventCache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="eventType" position="2" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="3" attrib="0" type="System.Int32" />
                  <parameter name="format" position="4" attrib="0" type="System.String" />
                  <parameter name="args" position="5" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
            </methods>
          </class>
          <class name="EventTypeFilter" type="class" base="System.Diagnostics.TraceFilter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Diagnostics.SourceLevels)" attrib="6278">
                <parameters>
                  <parameter name="level" position="0" attrib="0" type="System.Diagnostics.SourceLevels" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="EventType" attrib="0" ptype="System.Diagnostics.SourceLevels">
                <methods>
                  <method name="get_EventType()" attrib="2182" returntype="System.Diagnostics.SourceLevels">
                    <parameters />
                  </method>
                  <method name="set_EventType(System.Diagnostics.SourceLevels)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Diagnostics.SourceLevels" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[], System.Object, System.Object[])" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="cache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="eventType" position="2" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="3" attrib="0" type="System.Int32" />
                  <parameter name="formatOrMessage" position="4" attrib="0" type="System.String" />
                  <parameter name="args" position="5" attrib="0" type="System.Object[]" />
                  <parameter name="data1" position="6" attrib="0" type="System.Object" />
                  <parameter name="data" position="7" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FileVersionInfo" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Comments" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Comments()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CompanyName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_CompanyName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FileBuildPart" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_FileBuildPart()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FileDescription" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FileDescription()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FileMajorPart" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_FileMajorPart()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FileMinorPart" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_FileMinorPart()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FileName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FileName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FilePrivatePart" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_FilePrivatePart()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FileVersion" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FileVersion()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InternalName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_InternalName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsDebug" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsDebug()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsPatched" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsPatched()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsPreRelease" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsPreRelease()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsPrivateBuild" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsPrivateBuild()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSpecialBuild" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSpecialBuild()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Language" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Language()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LegalCopyright" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_LegalCopyright()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LegalTrademarks" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_LegalTrademarks()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OriginalFilename" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_OriginalFilename()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PrivateBuild" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_PrivateBuild()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProductBuildPart" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ProductBuildPart()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProductMajorPart" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ProductMajorPart()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProductMinorPart" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ProductMinorPart()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProductName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ProductName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProductPrivatePart" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ProductPrivatePart()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProductVersion" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ProductVersion()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SpecialBuild" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SpecialBuild()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetVersionInfo(System.String)" attrib="150" static="true" returntype="System.Diagnostics.FileVersionInfo">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="MonitoringDescriptionAttribute" type="class" base="System.ComponentModel.DescriptionAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="description" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Description" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Description()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="Process" type="class" base="System.ComponentModel.Component" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.DefaultEventAttribute">
                <properties>
                  <property name="Name" value="Exited" />
                </properties>
              </attribute>
              <attribute name="System.ComponentModel.DefaultPropertyAttribute">
                <properties>
                  <property name="Name" value="StartInfo" />
                </properties>
              </attribute>
              <attribute name="System.ComponentModel.DesignerAttribute">
                <properties>
                  <property name="DesignerTypeName" value="System.Diagnostics.Design.ProcessDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.ComponentModel.IComponent" />
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="BasePriority" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_BasePriority()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EnableRaisingEvents" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_EnableRaisingEvents()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_EnableRaisingEvents(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExitCode" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_ExitCode()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExitTime" attrib="0" ptype="System.DateTime">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_ExitTime()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Handle" attrib="0" ptype="System.IntPtr">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_Handle()" attrib="2182" returntype="System.IntPtr">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HandleCount" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_HandleCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HasExited" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_HasExited()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Id" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_Id()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MachineName" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_MachineName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MainModule" attrib="0" ptype="System.Diagnostics.ProcessModule">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_MainModule()" attrib="2182" returntype="System.Diagnostics.ProcessModule">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MainWindowHandle" attrib="0" ptype="System.IntPtr">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_MainWindowHandle()" attrib="2182" returntype="System.IntPtr">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MainWindowTitle" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_MainWindowTitle()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MaxWorkingSet" attrib="0" ptype="System.IntPtr">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_MaxWorkingSet()" attrib="2182" returntype="System.IntPtr">
                    <parameters />
                  </method>
                  <method name="set_MaxWorkingSet(System.IntPtr)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.IntPtr" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MinWorkingSet" attrib="0" ptype="System.IntPtr">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_MinWorkingSet()" attrib="2182" returntype="System.IntPtr">
                    <parameters />
                  </method>
                  <method name="set_MinWorkingSet(System.IntPtr)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.IntPtr" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Modules" attrib="0" ptype="System.Diagnostics.ProcessModuleCollection">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_Modules()" attrib="2182" returntype="System.Diagnostics.ProcessModuleCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NonpagedSystemMemorySize" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use NonpagedSystemMemorySize64" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_NonpagedSystemMemorySize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NonpagedSystemMemorySize64" attrib="0" ptype="System.Int64">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_NonpagedSystemMemorySize64()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PagedMemorySize" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use PagedMemorySize64" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PagedMemorySize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PagedMemorySize64" attrib="0" ptype="System.Int64">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PagedMemorySize64()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PagedSystemMemorySize" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use PagedSystemMemorySize64" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PagedSystemMemorySize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PagedSystemMemorySize64" attrib="0" ptype="System.Int64">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PagedSystemMemorySize64()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PeakPagedMemorySize" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use PeakPagedMemorySize64" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PeakPagedMemorySize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PeakPagedMemorySize64" attrib="0" ptype="System.Int64">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PeakPagedMemorySize64()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PeakVirtualMemorySize" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use PeakVirtualMemorySize64" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PeakVirtualMemorySize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PeakVirtualMemorySize64" attrib="0" ptype="System.Int64">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PeakVirtualMemorySize64()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PeakWorkingSet" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use PeakWorkingSet64" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PeakWorkingSet()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PeakWorkingSet64" attrib="0" ptype="System.Int64">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PeakWorkingSet64()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PriorityBoostEnabled" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_PriorityBoostEnabled()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_PriorityBoostEnabled(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PriorityClass" attrib="0" ptype="System.Diagnostics.ProcessPriorityClass">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_PriorityClass()" attrib="2182" returntype="System.Diagnostics.ProcessPriorityClass">
                    <parameters />
                  </method>
                  <method name="set_PriorityClass(System.Diagnostics.ProcessPriorityClass)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Diagnostics.ProcessPriorityClass" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PrivateMemorySize" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use PrivateMemorySize64" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PrivateMemorySize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PrivateMemorySize64" attrib="0" ptype="System.Int64">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PrivateMemorySize64()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PrivilegedProcessorTime" attrib="0" ptype="System.TimeSpan">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_PrivilegedProcessorTime()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProcessName" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_ProcessName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProcessorAffinity" attrib="0" ptype="System.IntPtr">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_ProcessorAffinity()" attrib="2182" returntype="System.IntPtr">
                    <parameters />
                  </method>
                  <method name="set_ProcessorAffinity(System.IntPtr)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.IntPtr" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Responding" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_Responding()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SafeHandle" attrib="0" ptype="Microsoft.Win32.SafeHandles.SafeProcessHandle">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_SafeHandle()" attrib="2182" returntype="Microsoft.Win32.SafeHandles.SafeProcessHandle">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SessionId" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_SessionId()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StandardError" attrib="0" ptype="System.IO.StreamReader">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_StandardError()" attrib="2182" returntype="System.IO.StreamReader">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StandardInput" attrib="0" ptype="System.IO.StreamWriter">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_StandardInput()" attrib="2182" returntype="System.IO.StreamWriter">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StandardOutput" attrib="0" ptype="System.IO.StreamReader">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_StandardOutput()" attrib="2182" returntype="System.IO.StreamReader">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StartInfo" attrib="0" ptype="System.Diagnostics.ProcessStartInfo">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Content" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_StartInfo()" attrib="2182" returntype="System.Diagnostics.ProcessStartInfo">
                    <parameters />
                  </method>
                  <method name="set_StartInfo(System.Diagnostics.ProcessStartInfo)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Diagnostics.ProcessStartInfo" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="StartTime" attrib="0" ptype="System.DateTime">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_StartTime()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SynchronizingObject" attrib="0" ptype="System.ComponentModel.ISynchronizeInvoke">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="null" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_SynchronizingObject()" attrib="2182" returntype="System.ComponentModel.ISynchronizeInvoke">
                    <parameters />
                  </method>
                  <method name="set_SynchronizingObject(System.ComponentModel.ISynchronizeInvoke)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.ISynchronizeInvoke" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Threads" attrib="0" ptype="System.Diagnostics.ProcessThreadCollection">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_Threads()" attrib="2182" returntype="System.Diagnostics.ProcessThreadCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TotalProcessorTime" attrib="0" ptype="System.TimeSpan">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_TotalProcessorTime()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserProcessorTime" attrib="0" ptype="System.TimeSpan">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_UserProcessorTime()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="VirtualMemorySize" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use VirtualMemorySize64" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_VirtualMemorySize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="VirtualMemorySize64" attrib="0" ptype="System.Int64">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_VirtualMemorySize64()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WorkingSet" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use WorkingSet64" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_WorkingSet()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WorkingSet64" attrib="0" ptype="System.Int64">
                <attributes>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_WorkingSet64()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="ErrorDataReceived" attrib="0" eventtype="System.Diagnostics.DataReceivedEventHandler">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
              </event>
              <event name="Exited" attrib="0" eventtype="System.EventHandler">
                <attributes>
                  <attribute name="System.ComponentModel.CategoryAttribute" />
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
              </event>
              <event name="OutputDataReceived" attrib="0" eventtype="System.Diagnostics.DataReceivedEventHandler">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
              </event>
            </events>
            <methods>
              <method name="BeginErrorReadLine()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="BeginOutputReadLine()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="CancelErrorRead()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="CancelOutputRead()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Close()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="CloseMainWindow()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="EnterDebugMode()" attrib="150" static="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="GetCurrentProcess()" attrib="150" static="true" returntype="System.Diagnostics.Process">
                <parameters />
              </method>
              <method name="GetProcessById(System.Int32)" attrib="150" static="true" returntype="System.Diagnostics.Process">
                <parameters>
                  <parameter name="processId" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetProcessById(System.Int32, System.String)" attrib="150" static="true" returntype="System.Diagnostics.Process">
                <attributes />
                <parameters>
                  <parameter name="processId" position="0" attrib="0" type="System.Int32" />
                  <parameter name="machineName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetProcesses()" attrib="150" static="true" returntype="System.Diagnostics.Process[]">
                <parameters />
              </method>
              <method name="GetProcesses(System.String)" attrib="150" static="true" returntype="System.Diagnostics.Process[]">
                <attributes />
                <parameters>
                  <parameter name="machineName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetProcessesByName(System.String)" attrib="150" static="true" returntype="System.Diagnostics.Process[]">
                <parameters>
                  <parameter name="processName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetProcessesByName(System.String, System.String)" attrib="150" static="true" returntype="System.Diagnostics.Process[]">
                <parameters>
                  <parameter name="processName" position="0" attrib="0" type="System.String" />
                  <parameter name="machineName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Kill()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="LeaveDebugMode()" attrib="150" static="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="OnExited()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="Refresh()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Start()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="Start(System.Diagnostics.ProcessStartInfo)" attrib="150" static="true" returntype="System.Diagnostics.Process">
                <parameters>
                  <parameter name="startInfo" position="0" attrib="0" type="System.Diagnostics.ProcessStartInfo" />
                </parameters>
              </method>
              <method name="Start(System.String)" attrib="150" static="true" returntype="System.Diagnostics.Process">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Start(System.String, System.String)" attrib="150" static="true" returntype="System.Diagnostics.Process">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="arguments" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Start(System.String, System.String, System.Security.SecureString, System.String)" attrib="150" static="true" returntype="System.Diagnostics.Process">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="userName" position="1" attrib="0" type="System.String" />
                  <parameter name="password" position="2" attrib="0" type="System.Security.SecureString" />
                  <parameter name="domain" position="3" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Start(System.String, System.String, System.String, System.Security.SecureString, System.String)" attrib="150" static="true" returntype="System.Diagnostics.Process">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="arguments" position="1" attrib="0" type="System.String" />
                  <parameter name="userName" position="2" attrib="0" type="System.String" />
                  <parameter name="password" position="3" attrib="0" type="System.Security.SecureString" />
                  <parameter name="domain" position="4" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="WaitForExit()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="WaitForExit(System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="milliseconds" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="WaitForInputIdle()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="WaitForInputIdle(System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="milliseconds" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ProcessModule" type="class" base="System.ComponentModel.Component" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.DesignerAttribute">
                <properties>
                  <property name="DesignerTypeName" value="System.Diagnostics.Design.ProcessModuleDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ComponentModel.IComponent" />
              <interface name="System.IDisposable" />
            </interfaces>
            <properties>
              <property name="BaseAddress" attrib="0" ptype="System.IntPtr">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_BaseAddress()" attrib="2182" returntype="System.IntPtr">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EntryPointAddress" attrib="0" ptype="System.IntPtr">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_EntryPointAddress()" attrib="2182" returntype="System.IntPtr">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FileName" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_FileName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FileVersionInfo" attrib="0" ptype="System.Diagnostics.FileVersionInfo">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_FileVersionInfo()" attrib="2182" returntype="System.Diagnostics.FileVersionInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ModuleMemorySize" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_ModuleMemorySize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ModuleName" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_ModuleName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ProcessModuleCollection" type="class" base="System.Collections.ReadOnlyCollectionBase" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Diagnostics.ProcessModule[])" attrib="6278">
                <parameters>
                  <parameter name="processModules" position="0" attrib="0" type="System.Diagnostics.ProcessModule[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Capacity" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Capacity()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Capacity(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Diagnostics.ProcessModule" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Diagnostics.ProcessModule">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Diagnostics.ProcessModule)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessModule" />
                </parameters>
              </method>
              <method name="AddRange(System.Collections.Generic.IEnumerable`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="AsReadOnly()" attrib="134" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Diagnostics.ProcessModule]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="BinarySearch(System.Diagnostics.ProcessModule)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessModule" />
                </parameters>
              </method>
              <method name="BinarySearch(System.Diagnostics.ProcessModule, System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessModule" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="BinarySearch(System.Int32, System.Int32, System.Diagnostics.ProcessModule, System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                  <parameter name="item" position="2" attrib="0" type="System.Diagnostics.ProcessModule" />
                  <parameter name="comparer" position="3" attrib="0" type="System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="Clear()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Contains(System.Diagnostics.ProcessModule)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="module" position="0" attrib="0" type="System.Diagnostics.ProcessModule" />
                </parameters>
              </method>
              <method name="ConvertAll(System.Converter`2[System.Diagnostics.ProcessModule,TOutput])" attrib="134" returntype="System.Collections.Generic.List`1[TOutput]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="converter" position="0" attrib="0" type="System.Converter`2[System.Diagnostics.ProcessModule,TOutput]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOutput" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CopyTo(System.Diagnostics.ProcessModule[])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Diagnostics.ProcessModule[]" />
                </parameters>
              </method>
              <method name="CopyTo(System.Diagnostics.ProcessModule[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Diagnostics.ProcessModule[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CopyTo(System.Int32, System.Diagnostics.ProcessModule[], System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="array" position="1" attrib="0" type="System.Diagnostics.ProcessModule[]" />
                  <parameter name="arrayIndex" position="2" attrib="0" type="System.Int32" />
                  <parameter name="count" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Exists(System.Predicate`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="Find(System.Predicate`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Diagnostics.ProcessModule">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="FindAll(System.Predicate`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Collections.Generic.List`1[System.Diagnostics.ProcessModule]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="FindIndex(System.Predicate`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="FindIndex(System.Int32, System.Predicate`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="startIndex" position="0" attrib="0" type="System.Int32" />
                  <parameter name="match" position="1" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="FindIndex(System.Int32, System.Int32, System.Predicate`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="startIndex" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                  <parameter name="match" position="2" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="FindLast(System.Predicate`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Diagnostics.ProcessModule">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="FindLastIndex(System.Predicate`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="FindLastIndex(System.Int32, System.Predicate`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="startIndex" position="0" attrib="0" type="System.Int32" />
                  <parameter name="match" position="1" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="FindLastIndex(System.Int32, System.Int32, System.Predicate`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="startIndex" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                  <parameter name="match" position="2" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="ForEach(System.Action`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Action`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="GetRange(System.Int32, System.Int32)" attrib="134" returntype="System.Collections.Generic.List`1[System.Diagnostics.ProcessModule]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IndexOf(System.Diagnostics.ProcessModule)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="module" position="0" attrib="0" type="System.Diagnostics.ProcessModule" />
                </parameters>
              </method>
              <method name="IndexOf(System.Diagnostics.ProcessModule, System.Int32)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessModule" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IndexOf(System.Diagnostics.ProcessModule, System.Int32, System.Int32)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessModule" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Insert(System.Int32, System.Diagnostics.ProcessModule)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="System.Diagnostics.ProcessModule" />
                </parameters>
              </method>
              <method name="InsertRange(System.Int32, System.Collections.Generic.IEnumerable`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="collection" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="LastIndexOf(System.Diagnostics.ProcessModule)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessModule" />
                </parameters>
              </method>
              <method name="LastIndexOf(System.Diagnostics.ProcessModule, System.Int32)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessModule" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="LastIndexOf(System.Diagnostics.ProcessModule, System.Int32, System.Int32)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessModule" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Remove(System.Diagnostics.ProcessModule)" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessModule" />
                </parameters>
              </method>
              <method name="RemoveAll(System.Predicate`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="RemoveRange(System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Reverse()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Reverse(System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Sort()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Sort(System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="Sort(System.Comparison`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="comparison" position="0" attrib="0" type="System.Comparison`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
              <method name="ToArray()" attrib="134" returntype="System.Diagnostics.ProcessModule[]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="TrimExcess()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="TrueForAll(System.Predicate`1[System.Diagnostics.ProcessModule])" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessModule]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ProcessPriorityClass" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AboveNormal" attrib="32854" fieldtype="System.Diagnostics.ProcessPriorityClass" value="32768" />
              <field name="BelowNormal" attrib="32854" fieldtype="System.Diagnostics.ProcessPriorityClass" value="16384" />
              <field name="High" attrib="32854" fieldtype="System.Diagnostics.ProcessPriorityClass" value="128" />
              <field name="Idle" attrib="32854" fieldtype="System.Diagnostics.ProcessPriorityClass" value="64" />
              <field name="Normal" attrib="32854" fieldtype="System.Diagnostics.ProcessPriorityClass" value="32" />
              <field name="RealTime" attrib="32854" fieldtype="System.Diagnostics.ProcessPriorityClass" value="256" />
            </fields>
          </class>
          <class name="ProcessStartInfo" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Sequential">
            <attributes>
              <attribute name="System.ComponentModel.TypeConverterAttribute">
                <properties>
                  <property name="ConverterTypeName" value="System.ComponentModel.ExpandableObjectConverter" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="arguments" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Arguments" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.SettingsBindableAttribute">
                    <properties>
                      <property name="Bindable" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.TypeConverterAttribute">
                    <properties>
                      <property name="ConverterTypeName" value="System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_Arguments()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Arguments(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CreateNoWindow" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_CreateNoWindow()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_CreateNoWindow(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Domain" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Domain()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Domain(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Environment" attrib="0" ptype="System.Collections.Generic.IDictionary`2[System.String,System.String]">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="null" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Environment()" attrib="2182" returntype="System.Collections.Generic.IDictionary`2[System.String,System.String]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EnvironmentVariables" attrib="0" ptype="System.Collections.Specialized.StringDictionary">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="null" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Content" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.EditorAttribute">
                    <properties>
                      <property name="EditorBaseTypeName" value="System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                      <property name="EditorTypeName" value="System.Diagnostics.Design.StringDictionaryEditor, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_EnvironmentVariables()" attrib="2182" returntype="System.Collections.Specialized.StringDictionary">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ErrorDialog" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_ErrorDialog()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_ErrorDialog(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ErrorDialogParentHandle" attrib="0" ptype="System.IntPtr">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_ErrorDialogParentHandle()" attrib="2182" returntype="System.IntPtr">
                    <parameters />
                  </method>
                  <method name="set_ErrorDialogParentHandle(System.IntPtr)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.IntPtr" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="FileName" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.EditorAttribute">
                    <properties>
                      <property name="EditorBaseTypeName" value="System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                      <property name="EditorTypeName" value="System.Diagnostics.Design.StartFileNameEditor, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.SettingsBindableAttribute">
                    <properties>
                      <property name="Bindable" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.TypeConverterAttribute">
                    <properties>
                      <property name="ConverterTypeName" value="System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_FileName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_FileName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="LoadUserProfile" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_LoadUserProfile()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_LoadUserProfile(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Password" attrib="0" ptype="System.Security.SecureString">
                <methods>
                  <method name="get_Password()" attrib="2182" returntype="System.Security.SecureString">
                    <parameters />
                  </method>
                  <method name="set_Password(System.Security.SecureString)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.SecureString" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PasswordInClearText" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_PasswordInClearText()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_PasswordInClearText(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RedirectStandardError" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_RedirectStandardError()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_RedirectStandardError(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RedirectStandardInput" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_RedirectStandardInput()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_RedirectStandardInput(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RedirectStandardOutput" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_RedirectStandardOutput()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_RedirectStandardOutput(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="StandardErrorEncoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_StandardErrorEncoding()" attrib="2182" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                  <method name="set_StandardErrorEncoding(System.Text.Encoding)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Text.Encoding" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="StandardOutputEncoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_StandardOutputEncoding()" attrib="2182" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                  <method name="set_StandardOutputEncoding(System.Text.Encoding)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Text.Encoding" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UseShellExecute" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_UseShellExecute()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseShellExecute(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UserName" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_UserName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_UserName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Verb" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.TypeConverterAttribute">
                    <properties>
                      <property name="ConverterTypeName" value="System.Diagnostics.Design.VerbConverter, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_Verb()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Verb(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Verbs" attrib="0" ptype="System.String[]">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DesignerSerializationVisibilityAttribute">
                    <properties>
                      <property name="Visibility" value="Hidden" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Verbs()" attrib="2182" returntype="System.String[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WindowStyle" attrib="0" ptype="System.Diagnostics.ProcessWindowStyle">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="Normal" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_WindowStyle()" attrib="2182" returntype="System.Diagnostics.ProcessWindowStyle">
                    <parameters />
                  </method>
                  <method name="set_WindowStyle(System.Diagnostics.ProcessWindowStyle)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Diagnostics.ProcessWindowStyle" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="WorkingDirectory" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.EditorAttribute">
                    <properties>
                      <property name="EditorBaseTypeName" value="System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                      <property name="EditorTypeName" value="System.Diagnostics.Design.WorkingDirectoryEditor, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.NotifyParentPropertyAttribute">
                    <properties>
                      <property name="NotifyParent" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.SettingsBindableAttribute">
                    <properties>
                      <property name="Bindable" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.TypeConverterAttribute">
                    <properties>
                      <property name="ConverterTypeName" value="System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_WorkingDirectory()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_WorkingDirectory(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ProcessThread" type="class" base="System.ComponentModel.Component" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.DesignerAttribute">
                <properties>
                  <property name="DesignerTypeName" value="System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ComponentModel.IComponent" />
              <interface name="System.IDisposable" />
            </interfaces>
            <properties>
              <property name="BasePriority" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_BasePriority()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CurrentPriority" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_CurrentPriority()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Id" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_Id()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IdealProcessor" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="set_IdealProcessor(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PriorityBoostEnabled" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_PriorityBoostEnabled()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_PriorityBoostEnabled(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PriorityLevel" attrib="0" ptype="System.Diagnostics.ThreadPriorityLevel">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_PriorityLevel()" attrib="2182" returntype="System.Diagnostics.ThreadPriorityLevel">
                    <parameters />
                  </method>
                  <method name="set_PriorityLevel(System.Diagnostics.ThreadPriorityLevel)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Diagnostics.ThreadPriorityLevel" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PrivilegedProcessorTime" attrib="0" ptype="System.TimeSpan">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_PrivilegedProcessorTime()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProcessorAffinity" attrib="0" ptype="System.IntPtr">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="set_ProcessorAffinity(System.IntPtr)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.IntPtr" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="StartAddress" attrib="0" ptype="System.IntPtr">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_StartAddress()" attrib="2182" returntype="System.IntPtr">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StartTime" attrib="0" ptype="System.DateTime">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_StartTime()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ThreadState" attrib="0" ptype="System.Diagnostics.ThreadState">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_ThreadState()" attrib="2182" returntype="System.Diagnostics.ThreadState">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TotalProcessorTime" attrib="0" ptype="System.TimeSpan">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_TotalProcessorTime()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserProcessorTime" attrib="0" ptype="System.TimeSpan">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_UserProcessorTime()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WaitReason" attrib="0" ptype="System.Diagnostics.ThreadWaitReason">
                <attributes>
                  <attribute name="System.Diagnostics.MonitoringDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_WaitReason()" attrib="2182" returntype="System.Diagnostics.ThreadWaitReason">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ResetIdealProcessor()" attrib="134" returntype="System.Void">
                <attributes />
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ProcessThreadCollection" type="class" base="System.Collections.ReadOnlyCollectionBase" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Diagnostics.ProcessThread[])" attrib="6278">
                <parameters>
                  <parameter name="processThreads" position="0" attrib="0" type="System.Diagnostics.ProcessThread[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Capacity" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Capacity()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Capacity(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Diagnostics.ProcessThread" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Diagnostics.ProcessThread">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Diagnostics.ProcessThread)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="thread" position="0" attrib="0" type="System.Diagnostics.ProcessThread" />
                </parameters>
              </method>
              <method name="AddRange(System.Collections.Generic.IEnumerable`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="AsReadOnly()" attrib="134" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Diagnostics.ProcessThread]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="BinarySearch(System.Diagnostics.ProcessThread)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessThread" />
                </parameters>
              </method>
              <method name="BinarySearch(System.Diagnostics.ProcessThread, System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessThread" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="BinarySearch(System.Int32, System.Int32, System.Diagnostics.ProcessThread, System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                  <parameter name="item" position="2" attrib="0" type="System.Diagnostics.ProcessThread" />
                  <parameter name="comparer" position="3" attrib="0" type="System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="Clear()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Contains(System.Diagnostics.ProcessThread)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="thread" position="0" attrib="0" type="System.Diagnostics.ProcessThread" />
                </parameters>
              </method>
              <method name="ConvertAll(System.Converter`2[System.Diagnostics.ProcessThread,TOutput])" attrib="134" returntype="System.Collections.Generic.List`1[TOutput]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="converter" position="0" attrib="0" type="System.Converter`2[System.Diagnostics.ProcessThread,TOutput]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOutput" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CopyTo(System.Diagnostics.ProcessThread[])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Diagnostics.ProcessThread[]" />
                </parameters>
              </method>
              <method name="CopyTo(System.Diagnostics.ProcessThread[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Diagnostics.ProcessThread[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CopyTo(System.Int32, System.Diagnostics.ProcessThread[], System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="array" position="1" attrib="0" type="System.Diagnostics.ProcessThread[]" />
                  <parameter name="arrayIndex" position="2" attrib="0" type="System.Int32" />
                  <parameter name="count" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Exists(System.Predicate`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="Find(System.Predicate`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Diagnostics.ProcessThread">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="FindAll(System.Predicate`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Collections.Generic.List`1[System.Diagnostics.ProcessThread]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="FindIndex(System.Predicate`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="FindIndex(System.Int32, System.Predicate`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="startIndex" position="0" attrib="0" type="System.Int32" />
                  <parameter name="match" position="1" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="FindIndex(System.Int32, System.Int32, System.Predicate`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="startIndex" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                  <parameter name="match" position="2" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="FindLast(System.Predicate`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Diagnostics.ProcessThread">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="FindLastIndex(System.Predicate`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="FindLastIndex(System.Int32, System.Predicate`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="startIndex" position="0" attrib="0" type="System.Int32" />
                  <parameter name="match" position="1" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="FindLastIndex(System.Int32, System.Int32, System.Predicate`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="startIndex" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                  <parameter name="match" position="2" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="ForEach(System.Action`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Action`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="GetRange(System.Int32, System.Int32)" attrib="134" returntype="System.Collections.Generic.List`1[System.Diagnostics.ProcessThread]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IndexOf(System.Diagnostics.ProcessThread)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="thread" position="0" attrib="0" type="System.Diagnostics.ProcessThread" />
                </parameters>
              </method>
              <method name="IndexOf(System.Diagnostics.ProcessThread, System.Int32)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessThread" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IndexOf(System.Diagnostics.ProcessThread, System.Int32, System.Int32)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessThread" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Insert(System.Int32, System.Diagnostics.ProcessThread)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="thread" position="1" attrib="0" type="System.Diagnostics.ProcessThread" />
                </parameters>
              </method>
              <method name="InsertRange(System.Int32, System.Collections.Generic.IEnumerable`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="collection" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="LastIndexOf(System.Diagnostics.ProcessThread)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessThread" />
                </parameters>
              </method>
              <method name="LastIndexOf(System.Diagnostics.ProcessThread, System.Int32)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessThread" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="LastIndexOf(System.Diagnostics.ProcessThread, System.Int32, System.Int32)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.Diagnostics.ProcessThread" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Remove(System.Diagnostics.ProcessThread)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="thread" position="0" attrib="0" type="System.Diagnostics.ProcessThread" />
                </parameters>
              </method>
              <method name="RemoveAll(System.Predicate`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="RemoveRange(System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Reverse()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Reverse(System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Sort()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Sort(System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="Sort(System.Comparison`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="comparison" position="0" attrib="0" type="System.Comparison`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
              <method name="ToArray()" attrib="134" returntype="System.Diagnostics.ProcessThread[]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="TrimExcess()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="TrueForAll(System.Predicate`1[System.Diagnostics.ProcessThread])" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer available" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[System.Diagnostics.ProcessThread]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ProcessWindowStyle" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Hidden" attrib="32854" fieldtype="System.Diagnostics.ProcessWindowStyle" value="1" />
              <field name="Maximized" attrib="32854" fieldtype="System.Diagnostics.ProcessWindowStyle" value="3" />
              <field name="Minimized" attrib="32854" fieldtype="System.Diagnostics.ProcessWindowStyle" value="2" />
              <field name="Normal" attrib="32854" fieldtype="System.Diagnostics.ProcessWindowStyle" value="0" />
            </fields>
          </class>
          <class name="SourceFilter" type="class" base="System.Diagnostics.TraceFilter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Source" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Source()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Source(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[], System.Object, System.Object[])" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="cache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="eventType" position="2" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="3" attrib="0" type="System.Int32" />
                  <parameter name="formatOrMessage" position="4" attrib="0" type="System.String" />
                  <parameter name="args" position="5" attrib="0" type="System.Object[]" />
                  <parameter name="data1" position="6" attrib="0" type="System.Object" />
                  <parameter name="data" position="7" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SourceLevels" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="ActivityTracing" attrib="32854" fieldtype="System.Diagnostics.SourceLevels" value="65280">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="All" attrib="32854" fieldtype="System.Diagnostics.SourceLevels" value="-1" />
              <field name="Critical" attrib="32854" fieldtype="System.Diagnostics.SourceLevels" value="1" />
              <field name="Error" attrib="32854" fieldtype="System.Diagnostics.SourceLevels" value="3" />
              <field name="Information" attrib="32854" fieldtype="System.Diagnostics.SourceLevels" value="15" />
              <field name="Off" attrib="32854" fieldtype="System.Diagnostics.SourceLevels" value="0" />
              <field name="Verbose" attrib="32854" fieldtype="System.Diagnostics.SourceLevels" value="31" />
              <field name="Warning" attrib="32854" fieldtype="System.Diagnostics.SourceLevels" value="7" />
            </fields>
          </class>
          <class name="SourceSwitch" type="class" base="System.Diagnostics.Switch" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="displayName" position="0" attrib="0" type="System.String" />
                  <parameter name="defaultSwitchValue" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Level" attrib="0" ptype="System.Diagnostics.SourceLevels">
                <methods>
                  <method name="get_Level()" attrib="2182" returntype="System.Diagnostics.SourceLevels">
                    <parameters />
                  </method>
                  <method name="set_Level(System.Diagnostics.SourceLevels)" attrib="18566" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Diagnostics.SourceLevels" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="OnValueChanged()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="ShouldTrace(System.Diagnostics.TraceEventType)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="eventType" position="0" attrib="0" type="System.Diagnostics.TraceEventType" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Stopwatch" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="Frequency" attrib="54" fieldtype="System.Int64" />
              <field name="IsHighResolution" attrib="54" fieldtype="System.Boolean" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Elapsed" attrib="0" ptype="System.TimeSpan">
                <methods>
                  <method name="get_Elapsed()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ElapsedMilliseconds" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ElapsedMilliseconds()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ElapsedTicks" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ElapsedTicks()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsRunning" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsRunning()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetTimestamp()" attrib="150" static="true" returntype="System.Int64">
                <parameters />
              </method>
              <method name="Reset()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Restart()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Start()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="StartNew()" attrib="150" static="true" returntype="System.Diagnostics.Stopwatch">
                <parameters />
              </method>
              <method name="Stop()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="Switch" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String, System.String)" attrib="6276">
                <parameters>
                  <parameter name="displayName" position="0" attrib="0" type="System.String" />
                  <parameter name="description" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.String)" attrib="6276">
                <parameters>
                  <parameter name="displayName" position="0" attrib="0" type="System.String" />
                  <parameter name="description" position="1" attrib="0" type="System.String" />
                  <parameter name="defaultSwitchValue" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Attributes" attrib="0" ptype="System.Collections.Specialized.StringDictionary">
                <attributes>
                  <attribute name="System.Xml.Serialization.XmlIgnoreAttribute" />
                </attributes>
                <methods>
                  <method name="get_Attributes()" attrib="2182" returntype="System.Collections.Specialized.StringDictionary">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Description" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Description()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DisplayName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DisplayName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SwitchSetting" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_SwitchSetting()" attrib="2180" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_SwitchSetting(System.Int32)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Value()" attrib="2180" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Value(System.String)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetSupportedAttributes()" attrib="453" virtual="true" returntype="System.String[]">
                <parameters />
              </method>
              <method name="OnSwitchSettingChanged()" attrib="452" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="OnValueChanged()" attrib="452" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="SwitchAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Event, Property, Method, Constructor, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String, System.Type)" attrib="6278">
                <parameters>
                  <parameter name="switchName" position="0" attrib="0" type="System.String" />
                  <parameter name="switchType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="SwitchDescription" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SwitchDescription()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_SwitchDescription(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SwitchName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SwitchName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_SwitchName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SwitchType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_SwitchType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                  <method name="set_SwitchType(System.Type)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Type" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetAll(System.Reflection.Assembly)" attrib="150" static="true" returntype="System.Diagnostics.SwitchAttribute[]">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SwitchLevelAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="switchLevelType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="SwitchLevelType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_SwitchLevelType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                  <method name="set_SwitchLevelType(System.Type)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Type" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="TextWriterTraceListener" type="class" base="System.Diagnostics.TraceListener" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.IO.Stream)" attrib="6278">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.TextWriter)" attrib="6278">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.String)" attrib="6278">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.TextWriter, System.String)" attrib="6278">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Writer" attrib="0" ptype="System.IO.TextWriter">
                <methods>
                  <method name="get_Writer()" attrib="2182" returntype="System.IO.TextWriter">
                    <parameters />
                  </method>
                  <method name="set_Writer(System.IO.TextWriter)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.IO.TextWriter" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Flush()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Write(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ThreadPriorityLevel" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AboveNormal" attrib="32854" fieldtype="System.Diagnostics.ThreadPriorityLevel" value="1" />
              <field name="BelowNormal" attrib="32854" fieldtype="System.Diagnostics.ThreadPriorityLevel" value="-1" />
              <field name="Highest" attrib="32854" fieldtype="System.Diagnostics.ThreadPriorityLevel" value="2" />
              <field name="Idle" attrib="32854" fieldtype="System.Diagnostics.ThreadPriorityLevel" value="-15" />
              <field name="Lowest" attrib="32854" fieldtype="System.Diagnostics.ThreadPriorityLevel" value="-2" />
              <field name="Normal" attrib="32854" fieldtype="System.Diagnostics.ThreadPriorityLevel" value="0" />
              <field name="TimeCritical" attrib="32854" fieldtype="System.Diagnostics.ThreadPriorityLevel" value="15" />
            </fields>
          </class>
          <class name="ThreadState" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Initialized" attrib="32854" fieldtype="System.Diagnostics.ThreadState" value="0" />
              <field name="Ready" attrib="32854" fieldtype="System.Diagnostics.ThreadState" value="1" />
              <field name="Running" attrib="32854" fieldtype="System.Diagnostics.ThreadState" value="2" />
              <field name="Standby" attrib="32854" fieldtype="System.Diagnostics.ThreadState" value="3" />
              <field name="Terminated" attrib="32854" fieldtype="System.Diagnostics.ThreadState" value="4" />
              <field name="Transition" attrib="32854" fieldtype="System.Diagnostics.ThreadState" value="6" />
              <field name="Unknown" attrib="32854" fieldtype="System.Diagnostics.ThreadState" value="7" />
              <field name="Wait" attrib="32854" fieldtype="System.Diagnostics.ThreadState" value="5" />
            </fields>
          </class>
          <class name="ThreadWaitReason" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="EventPairHigh" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="7" />
              <field name="EventPairLow" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="8" />
              <field name="ExecutionDelay" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="4" />
              <field name="Executive" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="0" />
              <field name="FreePage" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="1" />
              <field name="LpcReceive" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="9" />
              <field name="LpcReply" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="10" />
              <field name="PageIn" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="2" />
              <field name="PageOut" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="12" />
              <field name="Suspended" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="5" />
              <field name="SystemAllocation" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="3" />
              <field name="Unknown" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="13" />
              <field name="UserRequest" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="6" />
              <field name="VirtualMemory" attrib="32854" fieldtype="System.Diagnostics.ThreadWaitReason" value="11" />
            </fields>
          </class>
          <class name="Trace" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="AutoFlush" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AutoFlush()" attrib="18582" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AutoFlush(System.Boolean)" attrib="18582" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CorrelationManager" attrib="0" ptype="System.Diagnostics.CorrelationManager">
                <methods>
                  <method name="get_CorrelationManager()" attrib="18582" static="true" returntype="System.Diagnostics.CorrelationManager">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IndentLevel" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_IndentLevel()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_IndentLevel(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IndentSize" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_IndentSize()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_IndentSize(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Listeners" attrib="0" ptype="System.Diagnostics.TraceListenerCollection">
                <methods>
                  <method name="get_Listeners()" attrib="18582" static="true" returntype="System.Diagnostics.TraceListenerCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UseGlobalLock" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UseGlobalLock()" attrib="18582" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseGlobalLock(System.Boolean)" attrib="18582" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Assert(System.Boolean)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Assert(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Assert(System.Boolean, System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="detailMessage" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Close()" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Fail(System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Fail(System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="detailMessage" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Flush()" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Indent()" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Refresh()" attrib="150" static="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="TraceError(System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="TraceError(System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="TraceInformation(System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="TraceInformation(System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="TraceWarning(System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="TraceWarning(System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Unindent()" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Write(System.Object)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Write(System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Write(System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="category" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Write(System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="category" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteIf(System.Boolean, System.Object)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteIf(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteIf(System.Boolean, System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                  <parameter name="category" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteIf(System.Boolean, System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="category" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.Object)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteLine(System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="category" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="category" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLineIf(System.Boolean, System.Object)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteLineIf(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLineIf(System.Boolean, System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                  <parameter name="category" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLineIf(System.Boolean, System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="category" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TraceEventCache" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Callstack" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Callstack()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DateTime" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_DateTime()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LogicalOperationStack" attrib="0" ptype="System.Collections.Stack">
                <methods>
                  <method name="get_LogicalOperationStack()" attrib="2182" returntype="System.Collections.Stack">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProcessId" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ProcessId()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ThreadId" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ThreadId()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Timestamp" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Timestamp()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="TraceEventType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Critical" attrib="32854" fieldtype="System.Diagnostics.TraceEventType" value="1" />
              <field name="Error" attrib="32854" fieldtype="System.Diagnostics.TraceEventType" value="2" />
              <field name="Information" attrib="32854" fieldtype="System.Diagnostics.TraceEventType" value="8" />
              <field name="Resume" attrib="32854" fieldtype="System.Diagnostics.TraceEventType" value="2048">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="Start" attrib="32854" fieldtype="System.Diagnostics.TraceEventType" value="256">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="Stop" attrib="32854" fieldtype="System.Diagnostics.TraceEventType" value="512">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="Suspend" attrib="32854" fieldtype="System.Diagnostics.TraceEventType" value="1024">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="Transfer" attrib="32854" fieldtype="System.Diagnostics.TraceEventType" value="4096">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Advanced" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="Verbose" attrib="32854" fieldtype="System.Diagnostics.TraceEventType" value="16" />
              <field name="Warning" attrib="32854" fieldtype="System.Diagnostics.TraceEventType" value="4" />
            </fields>
          </class>
          <class name="TraceFilter" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[], System.Object, System.Object[])" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="cache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="eventType" position="2" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="3" attrib="0" type="System.Int32" />
                  <parameter name="formatOrMessage" position="4" attrib="0" type="System.String" />
                  <parameter name="args" position="5" attrib="0" type="System.Object[]" />
                  <parameter name="data1" position="6" attrib="0" type="System.Object" />
                  <parameter name="data" position="7" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TraceLevel" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Error" attrib="32854" fieldtype="System.Diagnostics.TraceLevel" value="1" />
              <field name="Info" attrib="32854" fieldtype="System.Diagnostics.TraceLevel" value="3" />
              <field name="Off" attrib="32854" fieldtype="System.Diagnostics.TraceLevel" value="0" />
              <field name="Verbose" attrib="32854" fieldtype="System.Diagnostics.TraceLevel" value="4" />
              <field name="Warning" attrib="32854" fieldtype="System.Diagnostics.TraceLevel" value="2" />
            </fields>
          </class>
          <class name="TraceListener" type="class" base="System.MarshalByRefObject" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6276">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Attributes" attrib="0" ptype="System.Collections.Specialized.StringDictionary">
                <methods>
                  <method name="get_Attributes()" attrib="2182" returntype="System.Collections.Specialized.StringDictionary">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Filter" attrib="0" ptype="System.Diagnostics.TraceFilter">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Filter()" attrib="2182" returntype="System.Diagnostics.TraceFilter">
                    <parameters />
                  </method>
                  <method name="set_Filter(System.Diagnostics.TraceFilter)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Diagnostics.TraceFilter" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IndentLevel" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_IndentLevel()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_IndentLevel(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IndentSize" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_IndentSize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_IndentSize(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsThreadSafe" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsThreadSafe()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Name(System.String)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="NeedIndent" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_NeedIndent()" attrib="2180" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_NeedIndent(System.Boolean)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TraceOutputOptions" attrib="0" ptype="System.Diagnostics.TraceOptions">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_TraceOutputOptions()" attrib="2182" returntype="System.Diagnostics.TraceOptions">
                    <parameters />
                  </method>
                  <method name="set_TraceOutputOptions(System.Diagnostics.TraceOptions)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Diagnostics.TraceOptions" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Fail(System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Fail(System.String, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="detailMessage" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Flush()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="GetSupportedAttributes()" attrib="453" virtual="true" returntype="System.String[]">
                <parameters />
              </method>
              <method name="TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object)" attrib="454" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="eventCache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="eventType" position="2" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="3" attrib="0" type="System.Int32" />
                  <parameter name="data" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object[])" attrib="454" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="eventCache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="eventType" position="2" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="3" attrib="0" type="System.Int32" />
                  <parameter name="data" position="4" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32)" attrib="454" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="eventCache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="eventType" position="2" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="eventCache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="eventType" position="2" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="3" attrib="0" type="System.Int32" />
                  <parameter name="message" position="4" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[])" attrib="454" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="eventCache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="eventType" position="2" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="3" attrib="0" type="System.Int32" />
                  <parameter name="format" position="4" attrib="0" type="System.String" />
                  <parameter name="args" position="5" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="TraceTransfer(System.Diagnostics.TraceEventCache, System.String, System.Int32, System.String, System.Guid)" attrib="454" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="eventCache" position="0" attrib="0" type="System.Diagnostics.TraceEventCache" />
                  <parameter name="source" position="1" attrib="0" type="System.String" />
                  <parameter name="id" position="2" attrib="0" type="System.Int32" />
                  <parameter name="message" position="3" attrib="0" type="System.String" />
                  <parameter name="relatedActivityId" position="4" attrib="0" type="System.Guid" />
                </parameters>
              </method>
              <method name="Write(System.Object)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="o" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Write(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Write(System.Object, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="o" position="0" attrib="0" type="System.Object" />
                  <parameter name="category" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Write(System.String, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="category" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteIndent()" attrib="452" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="WriteLine(System.Object)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="o" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteLine(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.Object, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="o" position="0" attrib="0" type="System.Object" />
                  <parameter name="category" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.String, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="category" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TraceListenerCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Diagnostics.TraceListener" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Diagnostics.TraceListener">
                    <parameters>
                      <parameter name="i" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, System.Diagnostics.TraceListener)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="i" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="System.Diagnostics.TraceListener" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Diagnostics.TraceListener" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2182" returntype="System.Diagnostics.TraceListener">
                    <parameters>
                      <parameter name="name" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Diagnostics.TraceListener)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="listener" position="0" attrib="0" type="System.Diagnostics.TraceListener" />
                </parameters>
              </method>
              <method name="AddRange(System.Diagnostics.TraceListenerCollection)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Diagnostics.TraceListenerCollection" />
                </parameters>
              </method>
              <method name="AddRange(System.Diagnostics.TraceListener[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Diagnostics.TraceListener[]" />
                </parameters>
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.Diagnostics.TraceListener)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="listener" position="0" attrib="0" type="System.Diagnostics.TraceListener" />
                </parameters>
              </method>
              <method name="CopyTo(System.Diagnostics.TraceListener[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="listeners" position="0" attrib="0" type="System.Diagnostics.TraceListener[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
              <method name="IndexOf(System.Diagnostics.TraceListener)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="listener" position="0" attrib="0" type="System.Diagnostics.TraceListener" />
                </parameters>
              </method>
              <method name="Insert(System.Int32, System.Diagnostics.TraceListener)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="listener" position="1" attrib="0" type="System.Diagnostics.TraceListener" />
                </parameters>
              </method>
              <method name="Remove(System.Diagnostics.TraceListener)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="listener" position="0" attrib="0" type="System.Diagnostics.TraceListener" />
                </parameters>
              </method>
              <method name="Remove(System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TraceOptions" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Callstack" attrib="32854" fieldtype="System.Diagnostics.TraceOptions" value="32" />
              <field name="DateTime" attrib="32854" fieldtype="System.Diagnostics.TraceOptions" value="2" />
              <field name="LogicalOperationStack" attrib="32854" fieldtype="System.Diagnostics.TraceOptions" value="1" />
              <field name="None" attrib="32854" fieldtype="System.Diagnostics.TraceOptions" value="0" />
              <field name="ProcessId" attrib="32854" fieldtype="System.Diagnostics.TraceOptions" value="8" />
              <field name="ThreadId" attrib="32854" fieldtype="System.Diagnostics.TraceOptions" value="16" />
              <field name="Timestamp" attrib="32854" fieldtype="System.Diagnostics.TraceOptions" value="4" />
            </fields>
          </class>
          <class name="TraceSource" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Diagnostics.SourceLevels)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="defaultLevel" position="1" attrib="0" type="System.Diagnostics.SourceLevels" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Attributes" attrib="0" ptype="System.Collections.Specialized.StringDictionary">
                <methods>
                  <method name="get_Attributes()" attrib="2182" returntype="System.Collections.Specialized.StringDictionary">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Listeners" attrib="0" ptype="System.Diagnostics.TraceListenerCollection">
                <methods>
                  <method name="get_Listeners()" attrib="18566" returntype="System.Diagnostics.TraceListenerCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Switch" attrib="0" ptype="System.Diagnostics.SourceSwitch">
                <methods>
                  <method name="get_Switch()" attrib="2182" returntype="System.Diagnostics.SourceSwitch">
                    <parameters />
                  </method>
                  <method name="set_Switch(System.Diagnostics.SourceSwitch)" attrib="18566" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Diagnostics.SourceSwitch" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="16518" returntype="System.Void">
                <parameters />
              </method>
              <method name="Flush()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="GetSupportedAttributes()" attrib="453" virtual="true" returntype="System.String[]">
                <parameters />
              </method>
              <method name="TraceData(System.Diagnostics.TraceEventType, System.Int32, System.Object)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="eventType" position="0" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="1" attrib="0" type="System.Int32" />
                  <parameter name="data" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="TraceData(System.Diagnostics.TraceEventType, System.Int32, System.Object[])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="eventType" position="0" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="1" attrib="0" type="System.Int32" />
                  <parameter name="data" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="TraceEvent(System.Diagnostics.TraceEventType, System.Int32)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="eventType" position="0" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="TraceEvent(System.Diagnostics.TraceEventType, System.Int32, System.String)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="eventType" position="0" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="1" attrib="0" type="System.Int32" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="TraceEvent(System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="eventType" position="0" attrib="0" type="System.Diagnostics.TraceEventType" />
                  <parameter name="id" position="1" attrib="0" type="System.Int32" />
                  <parameter name="format" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="TraceInformation(System.String)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="TraceInformation(System.String, System.Object[])" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="TraceTransfer(System.Int32, System.String, System.Guid)" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Diagnostics.ConditionalAttribute">
                    <properties>
                      <property name="ConditionString" value="TRACE" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="id" position="0" attrib="0" type="System.Int32" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="relatedActivityId" position="2" attrib="0" type="System.Guid" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TraceSwitch" type="class" base="System.Diagnostics.Switch" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.SwitchLevelAttribute" />
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="displayName" position="0" attrib="0" type="System.String" />
                  <parameter name="description" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="displayName" position="0" attrib="0" type="System.String" />
                  <parameter name="description" position="1" attrib="0" type="System.String" />
                  <parameter name="defaultSwitchValue" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Level" attrib="0" ptype="System.Diagnostics.TraceLevel">
                <methods>
                  <method name="get_Level()" attrib="2182" returntype="System.Diagnostics.TraceLevel">
                    <parameters />
                  </method>
                  <method name="set_Level(System.Diagnostics.TraceLevel)" attrib="18566" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Diagnostics.TraceLevel" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TraceError" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_TraceError()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TraceInfo" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_TraceInfo()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TraceVerbose" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_TraceVerbose()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TraceWarning" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_TraceWarning()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="OnSwitchSettingChanged()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="OnValueChanged()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Diagnostics.CodeAnalysis">
        <classes>
          <class name="ExcludeFromCodeCoverageAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="Inherited" value="False" />
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Event, Property, Method, Constructor, Struct, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
        </classes>
      </namespace>
      <namespace name="System.IO">
        <classes>
          <class name="ErrorEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="exception" position="0" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetException()" attrib="454" virtual="true" returntype="System.Exception">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ErrorEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.IO.ErrorEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.IO.ErrorEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.IO.ErrorEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.IO.ErrorEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FileSystemEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.IO.WatcherChangeTypes, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="changeType" position="0" attrib="0" type="System.IO.WatcherChangeTypes" />
                  <parameter name="directory" position="1" attrib="0" type="System.String" />
                  <parameter name="name" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ChangeType" attrib="0" ptype="System.IO.WatcherChangeTypes">
                <methods>
                  <method name="get_ChangeType()" attrib="2182" returntype="System.IO.WatcherChangeTypes">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FullPath" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FullPath()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="FileSystemEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.IO.FileSystemEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.IO.FileSystemEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.IO.FileSystemEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.IO.FileSystemEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FileSystemWatcher" type="class" base="System.ComponentModel.Component" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ComponentModel.IComponent" />
              <interface name="System.ComponentModel.ISupportInitialize" />
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="path" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="path" position="0" attrib="0" type="System.String" />
                  <parameter name="filter" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="EnableRaisingEvents" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_EnableRaisingEvents()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_EnableRaisingEvents(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Filter" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Filter()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Filter(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IncludeSubdirectories" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IncludeSubdirectories()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IncludeSubdirectories(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="InternalBufferSize" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InternalBufferSize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_InternalBufferSize(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="NotifyFilter" attrib="0" ptype="System.IO.NotifyFilters">
                <methods>
                  <method name="get_NotifyFilter()" attrib="2182" returntype="System.IO.NotifyFilters">
                    <parameters />
                  </method>
                  <method name="set_NotifyFilter(System.IO.NotifyFilters)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.IO.NotifyFilters" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Path" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Path()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Path(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Site" attrib="0" ptype="System.ComponentModel.ISite">
                <methods>
                  <method name="get_Site()" attrib="2246" virtual="true" is-override="true" returntype="System.ComponentModel.ISite">
                    <parameters />
                  </method>
                  <method name="set_Site(System.ComponentModel.ISite)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.ISite" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SynchronizingObject" attrib="0" ptype="System.ComponentModel.ISynchronizeInvoke">
                <methods>
                  <method name="get_SynchronizingObject()" attrib="2182" returntype="System.ComponentModel.ISynchronizeInvoke">
                    <parameters />
                  </method>
                  <method name="set_SynchronizingObject(System.ComponentModel.ISynchronizeInvoke)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.ISynchronizeInvoke" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="Changed" attrib="0" eventtype="System.IO.FileSystemEventHandler" />
              <event name="Created" attrib="0" eventtype="System.IO.FileSystemEventHandler" />
              <event name="Deleted" attrib="0" eventtype="System.IO.FileSystemEventHandler" />
              <event name="Error" attrib="0" eventtype="System.IO.ErrorEventHandler" />
              <event name="Renamed" attrib="0" eventtype="System.IO.RenamedEventHandler" />
            </events>
            <methods>
              <method name="BeginInit()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="EndInit()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="OnChanged(System.IO.FileSystemEventArgs)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.IO.FileSystemEventArgs" />
                </parameters>
              </method>
              <method name="OnCreated(System.IO.FileSystemEventArgs)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.IO.FileSystemEventArgs" />
                </parameters>
              </method>
              <method name="OnDeleted(System.IO.FileSystemEventArgs)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.IO.FileSystemEventArgs" />
                </parameters>
              </method>
              <method name="OnError(System.IO.ErrorEventArgs)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.IO.ErrorEventArgs" />
                </parameters>
              </method>
              <method name="OnRenamed(System.IO.RenamedEventArgs)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.IO.RenamedEventArgs" />
                </parameters>
              </method>
              <method name="WaitForChanged(System.IO.WatcherChangeTypes)" attrib="134" returntype="System.IO.WaitForChangedResult">
                <parameters>
                  <parameter name="changeType" position="0" attrib="0" type="System.IO.WatcherChangeTypes" />
                </parameters>
              </method>
              <method name="WaitForChanged(System.IO.WatcherChangeTypes, System.Int32)" attrib="134" returntype="System.IO.WaitForChangedResult">
                <parameters>
                  <parameter name="changeType" position="0" attrib="0" type="System.IO.WatcherChangeTypes" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IODescriptionAttribute" type="class" base="System.ComponentModel.DescriptionAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="description" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Description" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Description()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="InternalBufferOverflowException" type="class" base="System.SystemException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="inner" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="InvalidDataException" type="class" base="System.SystemException" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="NotifyFilters" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Attributes" attrib="32854" fieldtype="System.IO.NotifyFilters" value="4" />
              <field name="CreationTime" attrib="32854" fieldtype="System.IO.NotifyFilters" value="64" />
              <field name="DirectoryName" attrib="32854" fieldtype="System.IO.NotifyFilters" value="2" />
              <field name="FileName" attrib="32854" fieldtype="System.IO.NotifyFilters" value="1" />
              <field name="LastAccess" attrib="32854" fieldtype="System.IO.NotifyFilters" value="32" />
              <field name="LastWrite" attrib="32854" fieldtype="System.IO.NotifyFilters" value="16" />
              <field name="Security" attrib="32854" fieldtype="System.IO.NotifyFilters" value="256" />
              <field name="Size" attrib="32854" fieldtype="System.IO.NotifyFilters" value="8" />
            </fields>
          </class>
          <class name="RenamedEventArgs" type="class" base="System.IO.FileSystemEventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.IO.WatcherChangeTypes, System.String, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="changeType" position="0" attrib="0" type="System.IO.WatcherChangeTypes" />
                  <parameter name="directory" position="1" attrib="0" type="System.String" />
                  <parameter name="name" position="2" attrib="0" type="System.String" />
                  <parameter name="oldName" position="3" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="OldFullPath" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_OldFullPath()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OldName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_OldName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="RenamedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.IO.RenamedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.IO.RenamedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.IO.RenamedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.IO.RenamedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="WaitForChangedResult" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
            <properties>
              <property name="ChangeType" attrib="0" ptype="System.IO.WatcherChangeTypes">
                <methods>
                  <method name="get_ChangeType()" attrib="2182" returntype="System.IO.WatcherChangeTypes">
                    <parameters />
                  </method>
                  <method name="set_ChangeType(System.IO.WatcherChangeTypes)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.IO.WatcherChangeTypes" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Name(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="OldName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_OldName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_OldName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TimedOut" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_TimedOut()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_TimedOut(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="WatcherChangeTypes" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="All" attrib="32854" fieldtype="System.IO.WatcherChangeTypes" value="15" />
              <field name="Changed" attrib="32854" fieldtype="System.IO.WatcherChangeTypes" value="4" />
              <field name="Created" attrib="32854" fieldtype="System.IO.WatcherChangeTypes" value="1" />
              <field name="Deleted" attrib="32854" fieldtype="System.IO.WatcherChangeTypes" value="2" />
              <field name="Renamed" attrib="32854" fieldtype="System.IO.WatcherChangeTypes" value="8" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="System.IO.Compression">
        <classes>
          <class name="CompressionLevel" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Fastest" attrib="32854" fieldtype="System.IO.Compression.CompressionLevel" value="1" />
              <field name="NoCompression" attrib="32854" fieldtype="System.IO.Compression.CompressionLevel" value="2" />
              <field name="Optimal" attrib="32854" fieldtype="System.IO.Compression.CompressionLevel" value="0" />
            </fields>
          </class>
          <class name="CompressionMode" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Compress" attrib="32854" fieldtype="System.IO.Compression.CompressionMode" value="1" />
              <field name="Decompress" attrib="32854" fieldtype="System.IO.Compression.CompressionMode" value="0" />
            </fields>
          </class>
          <class name="DeflateStream" type="class" base="System.IO.Stream" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.IO.Stream, System.IO.Compression.CompressionLevel)" attrib="6278">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="compressionLevel" position="1" attrib="0" type="System.IO.Compression.CompressionLevel" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.IO.Compression.CompressionMode)" attrib="6278">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="mode" position="1" attrib="0" type="System.IO.Compression.CompressionMode" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.IO.Compression.CompressionLevel, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="compressionLevel" position="1" attrib="0" type="System.IO.Compression.CompressionLevel" />
                  <parameter name="leaveOpen" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.IO.Compression.CompressionMode, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="mode" position="1" attrib="0" type="System.IO.Compression.CompressionMode" />
                  <parameter name="leaveOpen" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="BaseStream" attrib="0" ptype="System.IO.Stream">
                <methods>
                  <method name="get_BaseStream()" attrib="2182" returntype="System.IO.Stream">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanRead" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanRead()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanSeek" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanSeek()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanWrite" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanWrite()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Length()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Position" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Position()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_Position(System.Int64)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="asyncCallback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="asyncCallback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="EndRead(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndWrite(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Flush()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Read(System.Byte[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Seek(System.Int64, System.IO.SeekOrigin)" attrib="198" virtual="true" is-override="true" returntype="System.Int64">
                <parameters>
                  <parameter name="offset" position="0" attrib="0" type="System.Int64" />
                  <parameter name="origin" position="1" attrib="0" type="System.IO.SeekOrigin" />
                </parameters>
              </method>
              <method name="SetLength(System.Int64)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="Write(System.Byte[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="GZipStream" type="class" base="System.IO.Stream" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.IO.Stream, System.IO.Compression.CompressionLevel)" attrib="6278">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="compressionLevel" position="1" attrib="0" type="System.IO.Compression.CompressionLevel" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.IO.Compression.CompressionMode)" attrib="6278">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="mode" position="1" attrib="0" type="System.IO.Compression.CompressionMode" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.IO.Compression.CompressionLevel, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="compressionLevel" position="1" attrib="0" type="System.IO.Compression.CompressionLevel" />
                  <parameter name="leaveOpen" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.IO.Compression.CompressionMode, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="mode" position="1" attrib="0" type="System.IO.Compression.CompressionMode" />
                  <parameter name="leaveOpen" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="BaseStream" attrib="0" ptype="System.IO.Stream">
                <methods>
                  <method name="get_BaseStream()" attrib="2182" returntype="System.IO.Stream">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanRead" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanRead()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanSeek" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanSeek()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanWrite" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanWrite()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Length()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Position" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Position()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_Position(System.Int64)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="asyncCallback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="asyncCallback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)" attrib="198" virtual="true" is-override="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="destination" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="bufferSize" position="1" attrib="0" type="System.Int32" />
                  <parameter name="cancellationToken" position="2" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="EndRead(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndWrite(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Flush()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="FlushAsync(System.Threading.CancellationToken)" attrib="198" virtual="true" is-override="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="cancellationToken" position="0" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="Read(System.Byte[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)" attrib="198" virtual="true" is-override="true" returntype="System.Threading.Tasks.Task`1[System.Int32]">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="cancellationToken" position="3" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="ReadByte()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="Seek(System.Int64, System.IO.SeekOrigin)" attrib="198" virtual="true" is-override="true" returntype="System.Int64">
                <parameters>
                  <parameter name="offset" position="0" attrib="0" type="System.Int64" />
                  <parameter name="origin" position="1" attrib="0" type="System.IO.SeekOrigin" />
                </parameters>
              </method>
              <method name="SetLength(System.Int64)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="Write(System.Byte[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)" attrib="198" virtual="true" is-override="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="cancellationToken" position="3" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Net">
        <classes>
          <class name="AuthenticationManager" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <properties>
              <property name="CredentialPolicy" attrib="0" ptype="System.Net.ICredentialPolicy">
                <methods>
                  <method name="get_CredentialPolicy()" attrib="2198" static="true" returntype="System.Net.ICredentialPolicy">
                    <parameters />
                  </method>
                  <method name="set_CredentialPolicy(System.Net.ICredentialPolicy)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.ICredentialPolicy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CustomTargetNameDictionary" attrib="0" ptype="System.Collections.Specialized.StringDictionary">
                <attributes />
                <methods>
                  <method name="get_CustomTargetNameDictionary()" attrib="2198" static="true" returntype="System.Collections.Specialized.StringDictionary">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RegisteredModules" attrib="0" ptype="System.Collections.IEnumerator">
                <methods>
                  <method name="get_RegisteredModules()" attrib="2198" static="true" returntype="System.Collections.IEnumerator">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Authenticate(System.String, System.Net.WebRequest, System.Net.ICredentials)" attrib="150" static="true" returntype="System.Net.Authorization">
                <parameters>
                  <parameter name="challenge" position="0" attrib="0" type="System.String" />
                  <parameter name="request" position="1" attrib="0" type="System.Net.WebRequest" />
                  <parameter name="credentials" position="2" attrib="0" type="System.Net.ICredentials" />
                </parameters>
              </method>
              <method name="PreAuthenticate(System.Net.WebRequest, System.Net.ICredentials)" attrib="150" static="true" returntype="System.Net.Authorization">
                <parameters>
                  <parameter name="request" position="0" attrib="0" type="System.Net.WebRequest" />
                  <parameter name="credentials" position="1" attrib="0" type="System.Net.ICredentials" />
                </parameters>
              </method>
              <method name="Register(System.Net.IAuthenticationModule)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="authenticationModule" position="0" attrib="0" type="System.Net.IAuthenticationModule" />
                </parameters>
              </method>
              <method name="Unregister(System.Net.IAuthenticationModule)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="authenticationModule" position="0" attrib="0" type="System.Net.IAuthenticationModule" />
                </parameters>
              </method>
              <method name="Unregister(System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="authenticationScheme" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AuthenticationSchemeSelector" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Net.HttpListenerRequest, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="httpRequest" position="0" attrib="0" type="System.Net.HttpListenerRequest" />
                  <parameter name="callback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Net.AuthenticationSchemes">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Net.HttpListenerRequest)" attrib="454" virtual="true" returntype="System.Net.AuthenticationSchemes">
                <parameters>
                  <parameter name="httpRequest" position="0" attrib="0" type="System.Net.HttpListenerRequest" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AuthenticationSchemes" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Anonymous" attrib="32854" fieldtype="System.Net.AuthenticationSchemes" value="32768" />
              <field name="Basic" attrib="32854" fieldtype="System.Net.AuthenticationSchemes" value="8" />
              <field name="Digest" attrib="32854" fieldtype="System.Net.AuthenticationSchemes" value="1" />
              <field name="IntegratedWindowsAuthentication" attrib="32854" fieldtype="System.Net.AuthenticationSchemes" value="6" />
              <field name="Negotiate" attrib="32854" fieldtype="System.Net.AuthenticationSchemes" value="2" />
              <field name="None" attrib="32854" fieldtype="System.Net.AuthenticationSchemes" value="0" />
              <field name="Ntlm" attrib="32854" fieldtype="System.Net.AuthenticationSchemes" value="4" />
            </fields>
          </class>
          <class name="Authorization" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="token" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="token" position="0" attrib="0" type="System.String" />
                  <parameter name="finished" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Boolean, System.String)" attrib="6278">
                <parameters>
                  <parameter name="token" position="0" attrib="0" type="System.String" />
                  <parameter name="finished" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="connectionGroupId" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Complete" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Complete()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ConnectionGroupId" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ConnectionGroupId()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Message" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Message()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MutuallyAuthenticated" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_MutuallyAuthenticated()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_MutuallyAuthenticated(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ProtectionRealm" attrib="0" ptype="System.String[]">
                <methods>
                  <method name="get_ProtectionRealm()" attrib="2182" returntype="System.String[]">
                    <parameters />
                  </method>
                  <method name="set_ProtectionRealm(System.String[])" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String[]" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="BindIPEndPoint" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Net.ServicePoint, System.Net.IPEndPoint, System.Int32, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="servicePoint" position="0" attrib="0" type="System.Net.ServicePoint" />
                  <parameter name="remoteEndPoint" position="1" attrib="0" type="System.Net.IPEndPoint" />
                  <parameter name="retryCount" position="2" attrib="0" type="System.Int32" />
                  <parameter name="callback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Net.IPEndPoint">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Net.ServicePoint, System.Net.IPEndPoint, System.Int32)" attrib="454" virtual="true" returntype="System.Net.IPEndPoint">
                <parameters>
                  <parameter name="servicePoint" position="0" attrib="0" type="System.Net.ServicePoint" />
                  <parameter name="remoteEndPoint" position="1" attrib="0" type="System.Net.IPEndPoint" />
                  <parameter name="retryCount" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CipherSuitesCallback" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ObsoleteAttribute">
                <properties>
                  <property name="Message" value="This API is no longer supported." />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Net.SecurityProtocolType, System.Collections.Generic.IEnumerable`1[System.String], System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="protocol" position="0" attrib="0" type="System.Net.SecurityProtocolType" />
                  <parameter name="allCiphers" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.String]" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[System.String]">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Net.SecurityProtocolType, System.Collections.Generic.IEnumerable`1[System.String])" attrib="454" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[System.String]">
                <parameters>
                  <parameter name="protocol" position="0" attrib="0" type="System.Net.SecurityProtocolType" />
                  <parameter name="allCiphers" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.String]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Cookie" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                  <parameter name="path" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                  <parameter name="path" position="2" attrib="0" type="System.String" />
                  <parameter name="domain" position="3" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Comment" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Comment()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Comment(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CommentUri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_CommentUri()" attrib="2182" returntype="System.Uri">
                    <parameters />
                  </method>
                  <method name="set_CommentUri(System.Uri)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Uri" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Discard" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Discard()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Discard(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Domain" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Domain()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Domain(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Expired" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Expired()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Expired(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Expires" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_Expires()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                  <method name="set_Expires(System.DateTime)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.DateTime" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="HttpOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HttpOnly()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_HttpOnly(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Name(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Path" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Path()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Path(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Port" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Port()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Port(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Secure" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Secure()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Secure(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TimeStamp" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_TimeStamp()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Value(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Version" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Version()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Version(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="comparand" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="CookieCollection" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Net.Cookie" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Net.Cookie">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Net.Cookie" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2182" returntype="System.Net.Cookie">
                    <parameters>
                      <parameter name="name" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Net.Cookie)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="cookie" position="0" attrib="0" type="System.Net.Cookie" />
                </parameters>
              </method>
              <method name="Add(System.Net.CookieCollection)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="cookies" position="0" attrib="0" type="System.Net.CookieCollection" />
                </parameters>
              </method>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CopyTo(System.Net.Cookie[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Net.Cookie[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="CookieContainer" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="DefaultCookieLengthLimit" attrib="32854" fieldtype="System.Int32" value="4096" />
              <field name="DefaultCookieLimit" attrib="32854" fieldtype="System.Int32" value="300" />
              <field name="DefaultPerDomainCookieLimit" attrib="32854" fieldtype="System.Int32" value="20" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Int32, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                  <parameter name="perDomainCapacity" position="1" attrib="0" type="System.Int32" />
                  <parameter name="maxCookieSize" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Capacity" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Capacity()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Capacity(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MaxCookieSize" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_MaxCookieSize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_MaxCookieSize(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PerDomainCapacity" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_PerDomainCapacity()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_PerDomainCapacity(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Net.Cookie)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="cookie" position="0" attrib="0" type="System.Net.Cookie" />
                </parameters>
              </method>
              <method name="Add(System.Net.CookieCollection)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="cookies" position="0" attrib="0" type="System.Net.CookieCollection" />
                </parameters>
              </method>
              <method name="Add(System.Uri, System.Net.Cookie)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="cookie" position="1" attrib="0" type="System.Net.Cookie" />
                </parameters>
              </method>
              <method name="Add(System.Uri, System.Net.CookieCollection)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="cookies" position="1" attrib="0" type="System.Net.CookieCollection" />
                </parameters>
              </method>
              <method name="GetCookieHeader(System.Uri)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="GetCookies(System.Uri)" attrib="134" returntype="System.Net.CookieCollection">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="SetCookies(System.Uri, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="cookieHeader" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CookieException" type="class" base="System.FormatException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16582" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CredentialCache" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Net.ICredentials" />
              <interface name="System.Net.ICredentialsByHost" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="DefaultCredentials" attrib="0" ptype="System.Net.ICredentials">
                <methods>
                  <method name="get_DefaultCredentials()" attrib="2198" static="true" returntype="System.Net.ICredentials">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DefaultNetworkCredentials" attrib="0" ptype="System.Net.NetworkCredential">
                <methods>
                  <method name="get_DefaultNetworkCredentials()" attrib="2198" static="true" returntype="System.Net.NetworkCredential">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Uri, System.String, System.Net.NetworkCredential)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="uriPrefix" position="0" attrib="0" type="System.Uri" />
                  <parameter name="authType" position="1" attrib="0" type="System.String" />
                  <parameter name="cred" position="2" attrib="0" type="System.Net.NetworkCredential" />
                </parameters>
              </method>
              <method name="Add(System.String, System.Int32, System.String, System.Net.NetworkCredential)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                  <parameter name="authenticationType" position="2" attrib="0" type="System.String" />
                  <parameter name="credential" position="3" attrib="0" type="System.Net.NetworkCredential" />
                </parameters>
              </method>
              <method name="GetCredential(System.Uri, System.String)" attrib="486" virtual="true" returntype="System.Net.NetworkCredential">
                <parameters>
                  <parameter name="uriPrefix" position="0" attrib="0" type="System.Uri" />
                  <parameter name="authType" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetCredential(System.String, System.Int32, System.String)" attrib="486" virtual="true" returntype="System.Net.NetworkCredential">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                  <parameter name="authenticationType" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
              <method name="Remove(System.Uri, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="uriPrefix" position="0" attrib="0" type="System.Uri" />
                  <parameter name="authType" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Remove(System.String, System.Int32, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                  <parameter name="authenticationType" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DecompressionMethods" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Deflate" attrib="32854" fieldtype="System.Net.DecompressionMethods" value="2" />
              <field name="GZip" attrib="32854" fieldtype="System.Net.DecompressionMethods" value="1" />
              <field name="None" attrib="32854" fieldtype="System.Net.DecompressionMethods" value="0" />
            </fields>
          </class>
          <class name="Dns" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="BeginGetHostAddresses(System.String, System.AsyncCallback, System.Object)" attrib="150" static="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                  <parameter name="requestCallback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginGetHostByName(System.String, System.AsyncCallback, System.Object)" attrib="150" static="true" returntype="System.IAsyncResult">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use BeginGetHostEntry instead" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="hostName" position="0" attrib="0" type="System.String" />
                  <parameter name="requestCallback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="stateObject" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginGetHostEntry(System.Net.IPAddress, System.AsyncCallback, System.Object)" attrib="150" static="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="requestCallback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="stateObject" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginGetHostEntry(System.String, System.AsyncCallback, System.Object)" attrib="150" static="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                  <parameter name="requestCallback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="stateObject" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginResolve(System.String, System.AsyncCallback, System.Object)" attrib="150" static="true" returntype="System.IAsyncResult">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use BeginGetHostEntry instead" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="hostName" position="0" attrib="0" type="System.String" />
                  <parameter name="requestCallback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="stateObject" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndGetHostAddresses(System.IAsyncResult)" attrib="150" static="true" returntype="System.Net.IPAddress[]">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndGetHostByName(System.IAsyncResult)" attrib="150" static="true" returntype="System.Net.IPHostEntry">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use EndGetHostEntry instead" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndGetHostEntry(System.IAsyncResult)" attrib="150" static="true" returntype="System.Net.IPHostEntry">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndResolve(System.IAsyncResult)" attrib="150" static="true" returntype="System.Net.IPHostEntry">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use EndGetHostEntry instead" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="GetHostAddresses(System.String)" attrib="150" static="true" returntype="System.Net.IPAddress[]">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetHostAddressesAsync(System.String)" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[System.Net.IPAddress[]]">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetHostByAddress(System.Net.IPAddress)" attrib="150" static="true" returntype="System.Net.IPHostEntry">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use GetHostEntry instead" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
              <method name="GetHostByAddress(System.String)" attrib="150" static="true" returntype="System.Net.IPHostEntry">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use GetHostEntry instead" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetHostByName(System.String)" attrib="150" static="true" returntype="System.Net.IPHostEntry">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use GetHostEntry instead" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="hostName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetHostEntry(System.Net.IPAddress)" attrib="150" static="true" returntype="System.Net.IPHostEntry">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
              <method name="GetHostEntry(System.String)" attrib="150" static="true" returntype="System.Net.IPHostEntry">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetHostEntryAsync(System.Net.IPAddress)" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[System.Net.IPHostEntry]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
              <method name="GetHostEntryAsync(System.String)" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[System.Net.IPHostEntry]">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetHostName()" attrib="150" static="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Resolve(System.String)" attrib="150" static="true" returntype="System.Net.IPHostEntry">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use GetHostEntry instead" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="hostName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DnsEndPoint" type="class" base="System.Net.EndPoint" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Int32, System.Net.Sockets.AddressFamily)" attrib="6278">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                  <parameter name="addressFamily" position="2" attrib="0" type="System.Net.Sockets.AddressFamily" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AddressFamily" attrib="0" ptype="System.Net.Sockets.AddressFamily">
                <methods>
                  <method name="get_AddressFamily()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.Sockets.AddressFamily">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Host" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Host()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Port" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Port()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="comparand" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DownloadDataCompletedEventArgs" type="class" base="System.ComponentModel.AsyncCompletedEventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="Result" attrib="0" ptype="System.Byte[]">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.Byte[]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="DownloadDataCompletedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.DownloadDataCompletedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.DownloadDataCompletedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.DownloadDataCompletedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.DownloadDataCompletedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DownloadProgressChangedEventArgs" type="class" base="System.ComponentModel.ProgressChangedEventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="BytesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_BytesReceived()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TotalBytesToReceive" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_TotalBytesToReceive()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="DownloadProgressChangedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.DownloadProgressChangedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.DownloadProgressChangedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.DownloadProgressChangedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.DownloadProgressChangedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DownloadStringCompletedEventArgs" type="class" base="System.ComponentModel.AsyncCompletedEventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="Result" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="DownloadStringCompletedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.DownloadStringCompletedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.DownloadStringCompletedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.DownloadStringCompletedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.DownloadStringCompletedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="EndPoint" type="class" base="System.Object" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="AddressFamily" attrib="0" ptype="System.Net.Sockets.AddressFamily">
                <methods>
                  <method name="get_AddressFamily()" attrib="2502" virtual="true" returntype="System.Net.Sockets.AddressFamily">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Create(System.Net.SocketAddress)" attrib="454" virtual="true" returntype="System.Net.EndPoint">
                <parameters>
                  <parameter name="socketAddress" position="0" attrib="0" type="System.Net.SocketAddress" />
                </parameters>
              </method>
              <method name="Serialize()" attrib="454" virtual="true" returntype="System.Net.SocketAddress">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="EndpointPermission" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Hostname" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Hostname()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Port" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Port()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Transport" attrib="0" ptype="System.Net.TransportType">
                <methods>
                  <method name="get_Transport()" attrib="2182" returntype="System.Net.TransportType">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="FileWebRequest" type="class" base="System.Net.WebRequest" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Serialization is obsoleted for this type. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ConnectionGroupName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ConnectionGroupName()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ConnectionGroupName(System.String)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentLength" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ContentLength()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_ContentLength(System.Int64)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ContentType()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ContentType(System.String)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Credentials" attrib="0" ptype="System.Net.ICredentials">
                <methods>
                  <method name="get_Credentials()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.ICredentials">
                    <parameters />
                  </method>
                  <method name="set_Credentials(System.Net.ICredentials)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.ICredentials" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Net.WebHeaderCollection">
                <methods>
                  <method name="get_Headers()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Method" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Method()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Method(System.String)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PreAuthenticate" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_PreAuthenticate()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_PreAuthenticate(System.Boolean)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Proxy" attrib="0" ptype="System.Net.IWebProxy">
                <methods>
                  <method name="get_Proxy()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.IWebProxy">
                    <parameters />
                  </method>
                  <method name="set_Proxy(System.Net.IWebProxy)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IWebProxy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RequestUri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_RequestUri()" attrib="2246" virtual="true" is-override="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Timeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Timeout()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Timeout(System.Int32)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UseDefaultCredentials" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UseDefaultCredentials()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseDefaultCredentials(System.Boolean)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Abort()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="BeginGetRequestStream(System.AsyncCallback, System.Object)" attrib="16582" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginGetResponse(System.AsyncCallback, System.Object)" attrib="16582" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndGetRequestStream(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.IO.Stream">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndGetResponse(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Net.WebResponse">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16580" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="GetRequestStream()" attrib="198" virtual="true" is-override="true" returntype="System.IO.Stream">
                <parameters />
              </method>
              <method name="GetResponse()" attrib="198" virtual="true" is-override="true" returntype="System.Net.WebResponse">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="FileWebResponse" type="class" base="System.Net.WebResponse" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Serialization is obsoleted for this type. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ContentLength" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ContentLength()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContentType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ContentType()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Net.WebHeaderCollection">
                <methods>
                  <method name="get_Headers()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ResponseUri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_ResponseUri()" attrib="2246" virtual="true" is-override="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsHeaders" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsHeaders()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16580" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="GetResponseStream()" attrib="198" virtual="true" is-override="true" returntype="System.IO.Stream">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="FtpStatusCode" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AccountNeeded" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="532" />
              <field name="ActionAbortedLocalProcessingError" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="451" />
              <field name="ActionAbortedUnknownPageType" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="551" />
              <field name="ActionNotTakenFileUnavailable" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="550" />
              <field name="ActionNotTakenFileUnavailableOrBusy" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="450" />
              <field name="ActionNotTakenFilenameNotAllowed" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="553" />
              <field name="ActionNotTakenInsufficientSpace" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="452" />
              <field name="ArgumentSyntaxError" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="501" />
              <field name="BadCommandSequence" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="503" />
              <field name="CantOpenData" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="425" />
              <field name="ClosingControl" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="221" />
              <field name="ClosingData" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="226" />
              <field name="CommandExtraneous" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="202" />
              <field name="CommandNotImplemented" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="502" />
              <field name="CommandOK" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="200" />
              <field name="CommandSyntaxError" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="500" />
              <field name="ConnectionClosed" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="426" />
              <field name="DataAlreadyOpen" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="125" />
              <field name="DirectoryStatus" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="212" />
              <field name="EnteringPassive" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="227" />
              <field name="FileActionAborted" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="552" />
              <field name="FileActionOK" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="250" />
              <field name="FileCommandPending" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="350" />
              <field name="FileStatus" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="213" />
              <field name="LoggedInProceed" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="230" />
              <field name="NeedLoginAccount" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="332" />
              <field name="NotLoggedIn" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="530" />
              <field name="OpeningData" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="150" />
              <field name="PathnameCreated" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="257" />
              <field name="RestartMarker" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="110" />
              <field name="SendPasswordCommand" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="331" />
              <field name="SendUserCommand" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="220" />
              <field name="ServerWantsSecureSession" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="234" />
              <field name="ServiceNotAvailable" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="421" />
              <field name="ServiceTemporarilyNotAvailable" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="120" />
              <field name="SystemType" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="215" />
              <field name="Undefined" attrib="32854" fieldtype="System.Net.FtpStatusCode" value="0" />
            </fields>
          </class>
          <class name="FtpWebRequest" type="class" base="System.Net.WebRequest" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <properties>
              <property name="ClientCertificates" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509CertificateCollection">
                <attributes />
                <methods>
                  <method name="get_ClientCertificates()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509CertificateCollection">
                    <parameters />
                  </method>
                  <method name="set_ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ConnectionGroupName" attrib="0" ptype="System.String">
                <attributes />
                <methods>
                  <method name="get_ConnectionGroupName()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ConnectionGroupName(System.String)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentLength" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ContentLength()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_ContentLength(System.Int64)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentOffset" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ContentOffset()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_ContentOffset(System.Int64)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ContentType()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ContentType(System.String)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Credentials" attrib="0" ptype="System.Net.ICredentials">
                <methods>
                  <method name="get_Credentials()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.ICredentials">
                    <parameters />
                  </method>
                  <method name="set_Credentials(System.Net.ICredentials)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.ICredentials" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="EnableSsl" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_EnableSsl()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_EnableSsl(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Net.WebHeaderCollection">
                <attributes />
                <methods>
                  <method name="get_Headers()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                  <method name="set_Headers(System.Net.WebHeaderCollection)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.WebHeaderCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="KeepAlive" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_KeepAlive()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_KeepAlive(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Method" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Method()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Method(System.String)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PreAuthenticate" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_PreAuthenticate()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_PreAuthenticate(System.Boolean)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Proxy" attrib="0" ptype="System.Net.IWebProxy">
                <methods>
                  <method name="get_Proxy()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.IWebProxy">
                    <parameters />
                  </method>
                  <method name="set_Proxy(System.Net.IWebProxy)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IWebProxy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReadWriteTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ReadWriteTimeout()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ReadWriteTimeout(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RenameTo" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_RenameTo()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_RenameTo(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RequestUri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_RequestUri()" attrib="2246" virtual="true" is-override="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ServicePoint" attrib="0" ptype="System.Net.ServicePoint">
                <methods>
                  <method name="get_ServicePoint()" attrib="2182" returntype="System.Net.ServicePoint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Timeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Timeout()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Timeout(System.Int32)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UseBinary" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UseBinary()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseBinary(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UseDefaultCredentials" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_UseDefaultCredentials()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseDefaultCredentials(System.Boolean)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UsePassive" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UsePassive()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UsePassive(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Abort()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="BeginGetRequestStream(System.AsyncCallback, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginGetResponse(System.AsyncCallback, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndGetRequestStream(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.IO.Stream">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndGetResponse(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Net.WebResponse">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="GetRequestStream()" attrib="198" virtual="true" is-override="true" returntype="System.IO.Stream">
                <parameters />
              </method>
              <method name="GetResponse()" attrib="198" virtual="true" is-override="true" returntype="System.Net.WebResponse">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="FtpWebResponse" type="class" base="System.Net.WebResponse" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <properties>
              <property name="BannerMessage" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_BannerMessage()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContentLength" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ContentLength()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExitMessage" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ExitMessage()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Net.WebHeaderCollection">
                <methods>
                  <method name="get_Headers()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LastModified" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_LastModified()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ResponseUri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_ResponseUri()" attrib="2246" virtual="true" is-override="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StatusCode" attrib="0" ptype="System.Net.FtpStatusCode">
                <methods>
                  <method name="get_StatusCode()" attrib="2182" returntype="System.Net.FtpStatusCode">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StatusDescription" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_StatusDescription()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsHeaders" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsHeaders()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WelcomeMessage" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_WelcomeMessage()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="GetResponseStream()" attrib="198" virtual="true" is-override="true" returntype="System.IO.Stream">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="GlobalProxySelection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ObsoleteAttribute">
                <properties>
                  <property name="Message" value="This class has been deprecated. Please use WebRequest.DefaultWebProxy instead to access and set the global default proxy. Use 'null' instead of GetEmptyWebProxy. http://go.microsoft.com/fwlink/?linkid=14202" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Select" attrib="0" ptype="System.Net.IWebProxy">
                <methods>
                  <method name="get_Select()" attrib="2198" static="true" returntype="System.Net.IWebProxy">
                    <parameters />
                  </method>
                  <method name="set_Select(System.Net.IWebProxy)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IWebProxy" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetEmptyWebProxy()" attrib="150" static="true" returntype="System.Net.IWebProxy">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="HttpContinueDelegate" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Int32, System.Net.WebHeaderCollection, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="StatusCode" position="0" attrib="0" type="System.Int32" />
                  <parameter name="httpHeaders" position="1" attrib="0" type="System.Net.WebHeaderCollection" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Int32, System.Net.WebHeaderCollection)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="StatusCode" position="0" attrib="0" type="System.Int32" />
                  <parameter name="httpHeaders" position="1" attrib="0" type="System.Net.WebHeaderCollection" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="HttpListener" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="AuthenticationSchemeSelectorDelegate" attrib="0" ptype="System.Net.AuthenticationSchemeSelector">
                <methods>
                  <method name="get_AuthenticationSchemeSelectorDelegate()" attrib="2182" returntype="System.Net.AuthenticationSchemeSelector">
                    <parameters />
                  </method>
                  <method name="set_AuthenticationSchemeSelectorDelegate(System.Net.AuthenticationSchemeSelector)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.AuthenticationSchemeSelector" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="AuthenticationSchemes" attrib="0" ptype="System.Net.AuthenticationSchemes">
                <methods>
                  <method name="get_AuthenticationSchemes()" attrib="2182" returntype="System.Net.AuthenticationSchemes">
                    <parameters />
                  </method>
                  <method name="set_AuthenticationSchemes(System.Net.AuthenticationSchemes)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.AuthenticationSchemes" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="DefaultServiceNames" attrib="0" ptype="System.Security.Authentication.ExtendedProtection.ServiceNameCollection">
                <methods>
                  <method name="get_DefaultServiceNames()" attrib="2182" returntype="System.Security.Authentication.ExtendedProtection.ServiceNameCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExtendedProtectionPolicy" attrib="0" ptype="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy">
                <attributes />
                <methods>
                  <method name="get_ExtendedProtectionPolicy()" attrib="2182" returntype="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy">
                    <parameters />
                  </method>
                  <method name="set_ExtendedProtectionPolicy(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExtendedProtectionSelectorDelegate" attrib="0" ptype="System.Net.HttpListener+ExtendedProtectionSelector">
                <methods>
                  <method name="get_ExtendedProtectionSelectorDelegate()" attrib="2182" returntype="System.Net.HttpListener+ExtendedProtectionSelector">
                    <parameters />
                  </method>
                  <method name="set_ExtendedProtectionSelectorDelegate(System.Net.HttpListener+ExtendedProtectionSelector)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.HttpListener+ExtendedProtectionSelector" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IgnoreWriteExceptions" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IgnoreWriteExceptions()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IgnoreWriteExceptions(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsListening" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsListening()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSupported" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSupported()" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Prefixes" attrib="0" ptype="System.Net.HttpListenerPrefixCollection">
                <methods>
                  <method name="get_Prefixes()" attrib="2182" returntype="System.Net.HttpListenerPrefixCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Realm" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Realm()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Realm(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TimeoutManager" attrib="0" ptype="System.Net.HttpListenerTimeoutManager">
                <attributes />
                <methods>
                  <method name="get_TimeoutManager()" attrib="2182" returntype="System.Net.HttpListenerTimeoutManager">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UnsafeConnectionNtlmAuthentication" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_UnsafeConnectionNtlmAuthentication()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UnsafeConnectionNtlmAuthentication(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Abort()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="BeginGetContext(System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Close()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="EndGetContext(System.IAsyncResult)" attrib="134" returntype="System.Net.HttpListenerContext">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="GetContext()" attrib="134" returntype="System.Net.HttpListenerContext">
                <parameters />
              </method>
              <method name="GetContextAsync()" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.HttpListenerContext]">
                <parameters />
              </method>
              <method name="Start()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Stop()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="ExtendedProtectionSelector" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
                <interfaces>
                  <interface name="System.ICloneable" />
                  <interface name="System.Runtime.Serialization.ISerializable" />
                </interfaces>
                <constructors>
                  <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                    <parameters>
                      <parameter name="object" position="0" attrib="0" type="System.Object" />
                      <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                    </parameters>
                  </constructor>
                </constructors>
                <methods>
                  <method name="BeginInvoke(System.Net.HttpListenerRequest, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                    <parameters>
                      <parameter name="request" position="0" attrib="0" type="System.Net.HttpListenerRequest" />
                      <parameter name="callback" position="1" attrib="0" type="System.AsyncCallback" />
                      <parameter name="object" position="2" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                  <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy">
                    <parameters>
                      <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                    </parameters>
                  </method>
                  <method name="Invoke(System.Net.HttpListenerRequest)" attrib="454" virtual="true" returntype="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy">
                    <parameters>
                      <parameter name="request" position="0" attrib="0" type="System.Net.HttpListenerRequest" />
                    </parameters>
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="HttpListenerBasicIdentity" type="class" base="System.Security.Principal.GenericIdentity" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Security.Principal.IIdentity" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="username" position="0" attrib="0" type="System.String" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Password" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Password()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="HttpListenerContext" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Request" attrib="0" ptype="System.Net.HttpListenerRequest">
                <methods>
                  <method name="get_Request()" attrib="2182" returntype="System.Net.HttpListenerRequest">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Response" attrib="0" ptype="System.Net.HttpListenerResponse">
                <methods>
                  <method name="get_Response()" attrib="2182" returntype="System.Net.HttpListenerResponse">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="User" attrib="0" ptype="System.Security.Principal.IPrincipal">
                <methods>
                  <method name="get_User()" attrib="2182" returntype="System.Security.Principal.IPrincipal">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AcceptWebSocketAsync(System.String)" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.WebSockets.HttpListenerWebSocketContext]">
                <attributes />
                <parameters>
                  <parameter name="subProtocol" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AcceptWebSocketAsync(System.String, System.TimeSpan)" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.WebSockets.HttpListenerWebSocketContext]">
                <attributes />
                <parameters>
                  <parameter name="subProtocol" position="0" attrib="0" type="System.String" />
                  <parameter name="keepAliveInterval" position="1" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="AcceptWebSocketAsync(System.String, System.Int32, System.TimeSpan)" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.WebSockets.HttpListenerWebSocketContext]">
                <attributes />
                <parameters>
                  <parameter name="subProtocol" position="0" attrib="0" type="System.String" />
                  <parameter name="receiveBufferSize" position="1" attrib="0" type="System.Int32" />
                  <parameter name="keepAliveInterval" position="2" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="AcceptWebSocketAsync(System.String, System.Int32, System.TimeSpan, System.ArraySegment`1[System.Byte])" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.WebSockets.HttpListenerWebSocketContext]">
                <attributes />
                <parameters>
                  <parameter name="subProtocol" position="0" attrib="0" type="System.String" />
                  <parameter name="receiveBufferSize" position="1" attrib="0" type="System.Int32" />
                  <parameter name="keepAliveInterval" position="2" attrib="0" type="System.TimeSpan" />
                  <parameter name="internalBuffer" position="3" attrib="0" type="System.ArraySegment`1[System.Byte]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="HttpListenerException" type="class" base="System.ComponentModel.Win32Exception" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="errorCode" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.String)" attrib="6278">
                <parameters>
                  <parameter name="errorCode" position="0" attrib="0" type="System.Int32" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ErrorCode" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ErrorCode()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="HttpListenerPrefixCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[System.String]" />
              <interface name="System.Collections.Generic.IEnumerable`1[System.String]" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.String)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="uriPrefix" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.String)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="uriPrefix" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CopyTo(System.Array, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CopyTo(System.String[], System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.String[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.Generic.IEnumerator`1[System.String]">
                <parameters />
              </method>
              <method name="Remove(System.String)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="uriPrefix" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="HttpListenerRequest" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="AcceptTypes" attrib="0" ptype="System.String[]">
                <methods>
                  <method name="get_AcceptTypes()" attrib="2182" returntype="System.String[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ClientCertificateError" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ClientCertificateError()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContentEncoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_ContentEncoding()" attrib="2182" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContentLength64" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ContentLength64()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContentType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ContentType()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Cookies" attrib="0" ptype="System.Net.CookieCollection">
                <methods>
                  <method name="get_Cookies()" attrib="2182" returntype="System.Net.CookieCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HasEntityBody" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasEntityBody()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Collections.Specialized.NameValueCollection">
                <methods>
                  <method name="get_Headers()" attrib="2182" returntype="System.Collections.Specialized.NameValueCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HttpMethod" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_HttpMethod()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InputStream" attrib="0" ptype="System.IO.Stream">
                <methods>
                  <method name="get_InputStream()" attrib="2182" returntype="System.IO.Stream">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsAuthenticated" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_IsAuthenticated()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsLocal" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLocal()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSecureConnection" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSecureConnection()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWebSocketRequest" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_IsWebSocketRequest()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="KeepAlive" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_KeepAlive()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LocalEndPoint" attrib="0" ptype="System.Net.IPEndPoint">
                <methods>
                  <method name="get_LocalEndPoint()" attrib="2182" returntype="System.Net.IPEndPoint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProtocolVersion" attrib="0" ptype="System.Version">
                <methods>
                  <method name="get_ProtocolVersion()" attrib="2182" returntype="System.Version">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="QueryString" attrib="0" ptype="System.Collections.Specialized.NameValueCollection">
                <methods>
                  <method name="get_QueryString()" attrib="2182" returntype="System.Collections.Specialized.NameValueCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RawUrl" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_RawUrl()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RemoteEndPoint" attrib="0" ptype="System.Net.IPEndPoint">
                <methods>
                  <method name="get_RemoteEndPoint()" attrib="2182" returntype="System.Net.IPEndPoint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RequestTraceIdentifier" attrib="0" ptype="System.Guid">
                <attributes />
                <methods>
                  <method name="get_RequestTraceIdentifier()" attrib="2182" returntype="System.Guid">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ServiceName" attrib="0" ptype="System.String">
                <attributes />
                <methods>
                  <method name="get_ServiceName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TransportContext" attrib="0" ptype="System.Net.TransportContext">
                <methods>
                  <method name="get_TransportContext()" attrib="2182" returntype="System.Net.TransportContext">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Url" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_Url()" attrib="2182" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UrlReferrer" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_UrlReferrer()" attrib="2182" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserAgent" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_UserAgent()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserHostAddress" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_UserHostAddress()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserHostName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_UserHostName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UserLanguages" attrib="0" ptype="System.String[]">
                <methods>
                  <method name="get_UserLanguages()" attrib="2182" returntype="System.String[]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="BeginGetClientCertificate(System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="requestCallback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndGetClientCertificate(System.IAsyncResult)" attrib="134" returntype="System.Security.Cryptography.X509Certificates.X509Certificate2">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="GetClientCertificate()" attrib="134" returntype="System.Security.Cryptography.X509Certificates.X509Certificate2">
                <parameters />
              </method>
              <method name="GetClientCertificateAsync()" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Security.Cryptography.X509Certificates.X509Certificate2]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="HttpListenerResponse" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <properties>
              <property name="ContentEncoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_ContentEncoding()" attrib="2182" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                  <method name="set_ContentEncoding(System.Text.Encoding)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Text.Encoding" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentLength64" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ContentLength64()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_ContentLength64(System.Int64)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ContentType()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ContentType(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Cookies" attrib="0" ptype="System.Net.CookieCollection">
                <methods>
                  <method name="get_Cookies()" attrib="2182" returntype="System.Net.CookieCollection">
                    <parameters />
                  </method>
                  <method name="set_Cookies(System.Net.CookieCollection)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.CookieCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Net.WebHeaderCollection">
                <methods>
                  <method name="get_Headers()" attrib="2182" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                  <method name="set_Headers(System.Net.WebHeaderCollection)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.WebHeaderCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="KeepAlive" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_KeepAlive()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_KeepAlive(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="OutputStream" attrib="0" ptype="System.IO.Stream">
                <methods>
                  <method name="get_OutputStream()" attrib="2182" returntype="System.IO.Stream">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProtocolVersion" attrib="0" ptype="System.Version">
                <methods>
                  <method name="get_ProtocolVersion()" attrib="2182" returntype="System.Version">
                    <parameters />
                  </method>
                  <method name="set_ProtocolVersion(System.Version)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Version" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RedirectLocation" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_RedirectLocation()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_RedirectLocation(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SendChunked" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SendChunked()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_SendChunked(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="StatusCode" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_StatusCode()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_StatusCode(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="StatusDescription" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_StatusDescription()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_StatusDescription(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Abort()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="AddHeader(System.String, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AppendCookie(System.Net.Cookie)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="cookie" position="0" attrib="0" type="System.Net.Cookie" />
                </parameters>
              </method>
              <method name="AppendHeader(System.String, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Close()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Close(System.Byte[], System.Boolean)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="responseEntity" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="willBlock" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="CopyFrom(System.Net.HttpListenerResponse)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="templateResponse" position="0" attrib="0" type="System.Net.HttpListenerResponse" />
                </parameters>
              </method>
              <method name="Redirect(System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="url" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SetCookie(System.Net.Cookie)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="cookie" position="0" attrib="0" type="System.Net.Cookie" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="HttpListenerTimeoutManager" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="DrainEntityBody" attrib="0" ptype="System.TimeSpan">
                <attributes />
                <methods>
                  <method name="get_DrainEntityBody()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                  <method name="set_DrainEntityBody(System.TimeSpan)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.TimeSpan" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="EntityBody" attrib="0" ptype="System.TimeSpan">
                <attributes />
                <methods>
                  <method name="get_EntityBody()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                  <method name="set_EntityBody(System.TimeSpan)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.TimeSpan" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="HeaderWait" attrib="0" ptype="System.TimeSpan">
                <attributes />
                <methods>
                  <method name="get_HeaderWait()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                  <method name="set_HeaderWait(System.TimeSpan)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.TimeSpan" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IdleConnection" attrib="0" ptype="System.TimeSpan">
                <attributes />
                <methods>
                  <method name="get_IdleConnection()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                  <method name="set_IdleConnection(System.TimeSpan)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.TimeSpan" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MinSendBytesPerSecond" attrib="0" ptype="System.Int64">
                <attributes />
                <methods>
                  <method name="get_MinSendBytesPerSecond()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_MinSendBytesPerSecond(System.Int64)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RequestQueue" attrib="0" ptype="System.TimeSpan">
                <attributes />
                <methods>
                  <method name="get_RequestQueue()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                  <method name="set_RequestQueue(System.TimeSpan)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.TimeSpan" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="HttpRequestHeader" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Accept" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="20" />
              <field name="AcceptCharset" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="21" />
              <field name="AcceptEncoding" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="22" />
              <field name="AcceptLanguage" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="23" />
              <field name="Allow" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="10" />
              <field name="Authorization" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="24" />
              <field name="CacheControl" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="0" />
              <field name="Connection" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="1" />
              <field name="ContentEncoding" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="13" />
              <field name="ContentLanguage" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="14" />
              <field name="ContentLength" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="11" />
              <field name="ContentLocation" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="15" />
              <field name="ContentMd5" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="16" />
              <field name="ContentRange" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="17" />
              <field name="ContentType" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="12" />
              <field name="Cookie" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="25" />
              <field name="Date" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="2" />
              <field name="Expect" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="26" />
              <field name="Expires" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="18" />
              <field name="From" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="27" />
              <field name="Host" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="28" />
              <field name="IfMatch" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="29" />
              <field name="IfModifiedSince" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="30" />
              <field name="IfNoneMatch" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="31" />
              <field name="IfRange" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="32" />
              <field name="IfUnmodifiedSince" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="33" />
              <field name="KeepAlive" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="3" />
              <field name="LastModified" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="19" />
              <field name="MaxForwards" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="34" />
              <field name="Pragma" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="4" />
              <field name="ProxyAuthorization" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="35" />
              <field name="Range" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="37" />
              <field name="Referer" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="36" />
              <field name="Te" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="38" />
              <field name="Trailer" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="5" />
              <field name="TransferEncoding" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="6" />
              <field name="Translate" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="39" />
              <field name="Upgrade" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="7" />
              <field name="UserAgent" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="40" />
              <field name="Via" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="8" />
              <field name="Warning" attrib="32854" fieldtype="System.Net.HttpRequestHeader" value="9" />
            </fields>
          </class>
          <class name="HttpResponseHeader" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AcceptRanges" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="20" />
              <field name="Age" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="21" />
              <field name="Allow" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="10" />
              <field name="CacheControl" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="0" />
              <field name="Connection" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="1" />
              <field name="ContentEncoding" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="13" />
              <field name="ContentLanguage" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="14" />
              <field name="ContentLength" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="11" />
              <field name="ContentLocation" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="15" />
              <field name="ContentMd5" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="16" />
              <field name="ContentRange" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="17" />
              <field name="ContentType" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="12" />
              <field name="Date" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="2" />
              <field name="ETag" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="22" />
              <field name="Expires" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="18" />
              <field name="KeepAlive" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="3" />
              <field name="LastModified" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="19" />
              <field name="Location" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="23" />
              <field name="Pragma" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="4" />
              <field name="ProxyAuthenticate" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="24" />
              <field name="RetryAfter" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="25" />
              <field name="Server" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="26" />
              <field name="SetCookie" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="27" />
              <field name="Trailer" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="5" />
              <field name="TransferEncoding" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="6" />
              <field name="Upgrade" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="7" />
              <field name="Vary" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="28" />
              <field name="Via" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="8" />
              <field name="Warning" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="9" />
              <field name="WwwAuthenticate" attrib="32854" fieldtype="System.Net.HttpResponseHeader" value="29" />
            </fields>
          </class>
          <class name="HttpStatusCode" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Accepted" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="202" />
              <field name="Ambiguous" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="300" />
              <field name="BadGateway" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="502" />
              <field name="BadRequest" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="400" />
              <field name="Conflict" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="409" />
              <field name="Continue" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="100" />
              <field name="Created" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="201" />
              <field name="ExpectationFailed" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="417" />
              <field name="Forbidden" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="403" />
              <field name="Found" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="302" />
              <field name="GatewayTimeout" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="504" />
              <field name="Gone" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="410" />
              <field name="HttpVersionNotSupported" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="505" />
              <field name="InternalServerError" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="500" />
              <field name="LengthRequired" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="411" />
              <field name="MethodNotAllowed" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="405" />
              <field name="Moved" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="301" />
              <field name="MovedPermanently" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="301" />
              <field name="MultipleChoices" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="300" />
              <field name="NoContent" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="204" />
              <field name="NonAuthoritativeInformation" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="203" />
              <field name="NotAcceptable" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="406" />
              <field name="NotFound" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="404" />
              <field name="NotImplemented" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="501" />
              <field name="NotModified" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="304" />
              <field name="OK" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="200" />
              <field name="PartialContent" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="206" />
              <field name="PaymentRequired" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="402" />
              <field name="PreconditionFailed" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="412" />
              <field name="ProxyAuthenticationRequired" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="407" />
              <field name="Redirect" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="302" />
              <field name="RedirectKeepVerb" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="307" />
              <field name="RedirectMethod" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="303" />
              <field name="RequestEntityTooLarge" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="413" />
              <field name="RequestTimeout" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="408" />
              <field name="RequestUriTooLong" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="414" />
              <field name="RequestedRangeNotSatisfiable" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="416" />
              <field name="ResetContent" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="205" />
              <field name="SeeOther" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="303" />
              <field name="ServiceUnavailable" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="503" />
              <field name="SwitchingProtocols" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="101" />
              <field name="TemporaryRedirect" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="307" />
              <field name="Unauthorized" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="401" />
              <field name="UnsupportedMediaType" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="415" />
              <field name="Unused" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="306" />
              <field name="UpgradeRequired" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="426" />
              <field name="UseProxy" attrib="32854" fieldtype="System.Net.HttpStatusCode" value="305" />
            </fields>
          </class>
          <class name="HttpVersion" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="Version10" attrib="54" fieldtype="System.Version" />
              <field name="Version11" attrib="54" fieldtype="System.Version" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="HttpWebRequest" type="class" base="System.Net.WebRequest" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Uri)" attrib="6278">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Serialization is obsoleted for this type" />
                      <property name="IsError" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Accept" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Accept()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Accept(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Address" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_Address()" attrib="2182" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AllowAutoRedirect" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowAutoRedirect()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AllowAutoRedirect(System.Boolean)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="AllowReadStreamBuffering" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowReadStreamBuffering()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AllowReadStreamBuffering(System.Boolean)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="AllowWriteStreamBuffering" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowWriteStreamBuffering()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AllowWriteStreamBuffering(System.Boolean)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="AutomaticDecompression" attrib="0" ptype="System.Net.DecompressionMethods">
                <methods>
                  <method name="get_AutomaticDecompression()" attrib="2182" returntype="System.Net.DecompressionMethods">
                    <parameters />
                  </method>
                  <method name="set_AutomaticDecompression(System.Net.DecompressionMethods)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.DecompressionMethods" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ClientCertificates" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509CertificateCollection">
                <methods>
                  <method name="get_ClientCertificates()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509CertificateCollection">
                    <parameters />
                  </method>
                  <method name="set_ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Connection" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Connection()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Connection(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ConnectionGroupName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ConnectionGroupName()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ConnectionGroupName(System.String)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentLength" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ContentLength()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_ContentLength(System.Int64)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ContentType()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ContentType(System.String)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContinueDelegate" attrib="0" ptype="System.Net.HttpContinueDelegate">
                <methods>
                  <method name="get_ContinueDelegate()" attrib="2182" returntype="System.Net.HttpContinueDelegate">
                    <parameters />
                  </method>
                  <method name="set_ContinueDelegate(System.Net.HttpContinueDelegate)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.HttpContinueDelegate" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContinueTimeout" attrib="0" ptype="System.Int32">
                <attributes />
                <methods>
                  <method name="get_ContinueTimeout()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ContinueTimeout(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CookieContainer" attrib="0" ptype="System.Net.CookieContainer">
                <methods>
                  <method name="get_CookieContainer()" attrib="2502" virtual="true" returntype="System.Net.CookieContainer">
                    <parameters />
                  </method>
                  <method name="set_CookieContainer(System.Net.CookieContainer)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.CookieContainer" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Credentials" attrib="0" ptype="System.Net.ICredentials">
                <methods>
                  <method name="get_Credentials()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.ICredentials">
                    <parameters />
                  </method>
                  <method name="set_Credentials(System.Net.ICredentials)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.ICredentials" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Date" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_Date()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                  <method name="set_Date(System.DateTime)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.DateTime" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="DefaultMaximumErrorResponseLength" attrib="0" ptype="System.Int32">
                <attributes />
                <methods>
                  <method name="get_DefaultMaximumErrorResponseLength()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_DefaultMaximumErrorResponseLength(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="DefaultMaximumResponseHeadersLength" attrib="0" ptype="System.Int32">
                <attributes />
                <methods>
                  <method name="get_DefaultMaximumResponseHeadersLength()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_DefaultMaximumResponseHeadersLength(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Expect" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Expect()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Expect(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="HaveResponse" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HaveResponse()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Net.WebHeaderCollection">
                <methods>
                  <method name="get_Headers()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                  <method name="set_Headers(System.Net.WebHeaderCollection)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.WebHeaderCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Host" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Host()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Host(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IfModifiedSince" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_IfModifiedSince()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                  <method name="set_IfModifiedSince(System.DateTime)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.DateTime" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="KeepAlive" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_KeepAlive()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_KeepAlive(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MaximumAutomaticRedirections" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_MaximumAutomaticRedirections()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_MaximumAutomaticRedirections(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MaximumResponseHeadersLength" attrib="0" ptype="System.Int32">
                <attributes />
                <methods>
                  <method name="get_MaximumResponseHeadersLength()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_MaximumResponseHeadersLength(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MediaType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_MediaType()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_MediaType(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Method" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Method()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Method(System.String)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Pipelined" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Pipelined()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Pipelined(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PreAuthenticate" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_PreAuthenticate()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_PreAuthenticate(System.Boolean)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ProtocolVersion" attrib="0" ptype="System.Version">
                <methods>
                  <method name="get_ProtocolVersion()" attrib="2182" returntype="System.Version">
                    <parameters />
                  </method>
                  <method name="set_ProtocolVersion(System.Version)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Version" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Proxy" attrib="0" ptype="System.Net.IWebProxy">
                <methods>
                  <method name="get_Proxy()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.IWebProxy">
                    <parameters />
                  </method>
                  <method name="set_Proxy(System.Net.IWebProxy)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IWebProxy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReadWriteTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ReadWriteTimeout()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ReadWriteTimeout(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Referer" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Referer()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Referer(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RequestUri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_RequestUri()" attrib="2246" virtual="true" is-override="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SendChunked" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SendChunked()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_SendChunked(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ServerCertificateValidationCallback" attrib="0" ptype="System.Net.Security.RemoteCertificateValidationCallback">
                <methods>
                  <method name="get_ServerCertificateValidationCallback()" attrib="2182" returntype="System.Net.Security.RemoteCertificateValidationCallback">
                    <parameters />
                  </method>
                  <method name="set_ServerCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Security.RemoteCertificateValidationCallback" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ServicePoint" attrib="0" ptype="System.Net.ServicePoint">
                <methods>
                  <method name="get_ServicePoint()" attrib="2182" returntype="System.Net.ServicePoint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsCookieContainer" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsCookieContainer()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Timeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Timeout()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Timeout(System.Int32)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TransferEncoding" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TransferEncoding()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_TransferEncoding(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UnsafeAuthenticatedConnectionSharing" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UnsafeAuthenticatedConnectionSharing()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UnsafeAuthenticatedConnectionSharing(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UseDefaultCredentials" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UseDefaultCredentials()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseDefaultCredentials(System.Boolean)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UserAgent" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_UserAgent()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_UserAgent(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Abort()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="AddRange(System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="range" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="AddRange(System.Int64)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="range" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="AddRange(System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.Int32" />
                  <parameter name="to" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="AddRange(System.Int64, System.Int64)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.Int64" />
                  <parameter name="to" position="1" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="AddRange(System.String, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rangeSpecifier" position="0" attrib="0" type="System.String" />
                  <parameter name="range" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="AddRange(System.String, System.Int64)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rangeSpecifier" position="0" attrib="0" type="System.String" />
                  <parameter name="range" position="1" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="AddRange(System.String, System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rangeSpecifier" position="0" attrib="0" type="System.String" />
                  <parameter name="from" position="1" attrib="0" type="System.Int32" />
                  <parameter name="to" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="AddRange(System.String, System.Int64, System.Int64)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rangeSpecifier" position="0" attrib="0" type="System.String" />
                  <parameter name="from" position="1" attrib="0" type="System.Int64" />
                  <parameter name="to" position="2" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="BeginGetRequestStream(System.AsyncCallback, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginGetResponse(System.AsyncCallback, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndGetRequestStream(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.IO.Stream">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndGetRequestStream(System.IAsyncResult, out System.Net.TransportContext&amp;)" attrib="134" returntype="System.IO.Stream">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                  <parameter name="context" position="1" attrib="2" type="System.Net.TransportContext" direction="out" />
                </parameters>
              </method>
              <method name="EndGetResponse(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Net.WebResponse">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="GetRequestStream()" attrib="198" virtual="true" is-override="true" returntype="System.IO.Stream">
                <parameters />
              </method>
              <method name="GetRequestStream(out System.Net.TransportContext&amp;)" attrib="134" returntype="System.IO.Stream">
                <attributes />
                <parameters>
                  <parameter name="context" position="0" attrib="2" type="System.Net.TransportContext" direction="out" />
                </parameters>
              </method>
              <method name="GetResponse()" attrib="198" virtual="true" is-override="true" returntype="System.Net.WebResponse">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="HttpWebResponse" type="class" base="System.Net.WebResponse" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Serialization is obsoleted for this type" />
                      <property name="IsError" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CharacterSet" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_CharacterSet()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContentEncoding" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ContentEncoding()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContentLength" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ContentLength()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContentType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ContentType()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Cookies" attrib="0" ptype="System.Net.CookieCollection">
                <methods>
                  <method name="get_Cookies()" attrib="2502" virtual="true" returntype="System.Net.CookieCollection">
                    <parameters />
                  </method>
                  <method name="set_Cookies(System.Net.CookieCollection)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.CookieCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Net.WebHeaderCollection">
                <methods>
                  <method name="get_Headers()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsMutuallyAuthenticated" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_IsMutuallyAuthenticated()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LastModified" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_LastModified()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Method" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Method()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProtocolVersion" attrib="0" ptype="System.Version">
                <methods>
                  <method name="get_ProtocolVersion()" attrib="2182" returntype="System.Version">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ResponseUri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_ResponseUri()" attrib="2246" virtual="true" is-override="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Server" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Server()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StatusCode" attrib="0" ptype="System.Net.HttpStatusCode">
                <methods>
                  <method name="get_StatusCode()" attrib="2502" virtual="true" returntype="System.Net.HttpStatusCode">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StatusDescription" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_StatusDescription()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsHeaders" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsHeaders()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="GetResponseHeader(System.String)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="headerName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetResponseStream()" attrib="198" virtual="true" is-override="true" returntype="System.IO.Stream">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="IAuthenticationModule" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="AuthenticationType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_AuthenticationType()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanPreAuthenticate" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanPreAuthenticate()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Authenticate(System.String, System.Net.WebRequest, System.Net.ICredentials)" attrib="1478" abstract="true" virtual="true" returntype="System.Net.Authorization">
                <parameters>
                  <parameter name="challenge" position="0" attrib="0" type="System.String" />
                  <parameter name="request" position="1" attrib="0" type="System.Net.WebRequest" />
                  <parameter name="credentials" position="2" attrib="0" type="System.Net.ICredentials" />
                </parameters>
              </method>
              <method name="PreAuthenticate(System.Net.WebRequest, System.Net.ICredentials)" attrib="1478" abstract="true" virtual="true" returntype="System.Net.Authorization">
                <parameters>
                  <parameter name="request" position="0" attrib="0" type="System.Net.WebRequest" />
                  <parameter name="credentials" position="1" attrib="0" type="System.Net.ICredentials" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ICertificatePolicy" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="CheckValidationResult(System.Net.ServicePoint, System.Security.Cryptography.X509Certificates.X509Certificate, System.Net.WebRequest, System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="srvPoint" position="0" attrib="0" type="System.Net.ServicePoint" />
                  <parameter name="certificate" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                  <parameter name="request" position="2" attrib="0" type="System.Net.WebRequest" />
                  <parameter name="certificateProblem" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ICredentialPolicy" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="ShouldSendCredential(System.Uri, System.Net.WebRequest, System.Net.NetworkCredential, System.Net.IAuthenticationModule)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="challengeUri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="request" position="1" attrib="0" type="System.Net.WebRequest" />
                  <parameter name="credential" position="2" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="authenticationModule" position="3" attrib="0" type="System.Net.IAuthenticationModule" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ICredentials" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetCredential(System.Uri, System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkCredential">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="authType" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ICredentialsByHost" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetCredential(System.String, System.Int32, System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkCredential">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                  <parameter name="authenticationType" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IPAddress" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="Any" attrib="54" fieldtype="System.Net.IPAddress" />
              <field name="Broadcast" attrib="54" fieldtype="System.Net.IPAddress" />
              <field name="IPv6Any" attrib="54" fieldtype="System.Net.IPAddress" />
              <field name="IPv6Loopback" attrib="54" fieldtype="System.Net.IPAddress" />
              <field name="IPv6None" attrib="54" fieldtype="System.Net.IPAddress" />
              <field name="Loopback" attrib="54" fieldtype="System.Net.IPAddress" />
              <field name="None" attrib="54" fieldtype="System.Net.IPAddress" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Byte[])" attrib="6278">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int64)" attrib="6278">
                <parameters>
                  <parameter name="newAddress" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Byte[], System.Int64)" attrib="6278">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="scopeid" position="1" attrib="0" type="System.Int64" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Address" attrib="0" ptype="System.Int64">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This property has been deprecated. It is address family dependent. Please use IPAddress.Equals method to perform comparisons. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Address()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_Address(System.Int64)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="AddressFamily" attrib="0" ptype="System.Net.Sockets.AddressFamily">
                <methods>
                  <method name="get_AddressFamily()" attrib="2182" returntype="System.Net.Sockets.AddressFamily">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsIPv4MappedToIPv6" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsIPv4MappedToIPv6()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsIPv6LinkLocal" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsIPv6LinkLocal()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsIPv6Multicast" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsIPv6Multicast()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsIPv6SiteLocal" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsIPv6SiteLocal()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsIPv6Teredo" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsIPv6Teredo()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ScopeId" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ScopeId()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_ScopeId(System.Int64)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="comparand" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetAddressBytes()" attrib="134" returntype="System.Byte[]">
                <parameters />
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="HostToNetworkOrder(System.Int16)" attrib="150" static="true" returntype="System.Int16">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.Int16" />
                </parameters>
              </method>
              <method name="HostToNetworkOrder(System.Int32)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="HostToNetworkOrder(System.Int64)" attrib="150" static="true" returntype="System.Int64">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="IsLoopback(System.Net.IPAddress)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
              <method name="MapToIPv4()" attrib="134" returntype="System.Net.IPAddress">
                <parameters />
              </method>
              <method name="MapToIPv6()" attrib="134" returntype="System.Net.IPAddress">
                <parameters />
              </method>
              <method name="NetworkToHostOrder(System.Int16)" attrib="150" static="true" returntype="System.Int16">
                <parameters>
                  <parameter name="network" position="0" attrib="0" type="System.Int16" />
                </parameters>
              </method>
              <method name="NetworkToHostOrder(System.Int32)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="network" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="NetworkToHostOrder(System.Int64)" attrib="150" static="true" returntype="System.Int64">
                <parameters>
                  <parameter name="network" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="Parse(System.String)" attrib="150" static="true" returntype="System.Net.IPAddress">
                <parameters>
                  <parameter name="ipString" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="TryParse(System.String, out System.Net.IPAddress&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="ipString" position="0" attrib="0" type="System.String" />
                  <parameter name="address" position="1" attrib="2" type="System.Net.IPAddress" direction="out" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IPEndPoint" type="class" base="System.Net.EndPoint" serializable="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="MaxPort" attrib="32854" fieldtype="System.Int32" value="65535" />
              <field name="MinPort" attrib="32854" fieldtype="System.Int32" value="0" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Int64, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Int64" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.IPAddress, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Address" attrib="0" ptype="System.Net.IPAddress">
                <methods>
                  <method name="get_Address()" attrib="2182" returntype="System.Net.IPAddress">
                    <parameters />
                  </method>
                  <method name="set_Address(System.Net.IPAddress)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IPAddress" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="AddressFamily" attrib="0" ptype="System.Net.Sockets.AddressFamily">
                <methods>
                  <method name="get_AddressFamily()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.Sockets.AddressFamily">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Port" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Port()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Port(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Create(System.Net.SocketAddress)" attrib="198" virtual="true" is-override="true" returntype="System.Net.EndPoint">
                <parameters>
                  <parameter name="socketAddress" position="0" attrib="0" type="System.Net.SocketAddress" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="comparand" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="Serialize()" attrib="198" virtual="true" is-override="true" returntype="System.Net.SocketAddress">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="IPHostEntry" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="AddressList" attrib="0" ptype="System.Net.IPAddress[]">
                <methods>
                  <method name="get_AddressList()" attrib="2182" returntype="System.Net.IPAddress[]">
                    <parameters />
                  </method>
                  <method name="set_AddressList(System.Net.IPAddress[])" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IPAddress[]" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Aliases" attrib="0" ptype="System.String[]">
                <methods>
                  <method name="get_Aliases()" attrib="2182" returntype="System.String[]">
                    <parameters />
                  </method>
                  <method name="set_Aliases(System.String[])" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String[]" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="HostName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_HostName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_HostName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IWebProxy" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Credentials" attrib="0" ptype="System.Net.ICredentials">
                <methods>
                  <method name="get_Credentials()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.ICredentials">
                    <parameters />
                  </method>
                  <method name="set_Credentials(System.Net.ICredentials)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.ICredentials" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetProxy(System.Uri)" attrib="1478" abstract="true" virtual="true" returntype="System.Uri">
                <parameters>
                  <parameter name="destination" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="IsBypassed(System.Uri)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IWebProxyScript" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="Close()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Load(System.Uri, System.String, System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="scriptLocation" position="0" attrib="0" type="System.Uri" />
                  <parameter name="script" position="1" attrib="0" type="System.String" />
                  <parameter name="helperType" position="2" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Run(System.String, System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="url" position="0" attrib="0" type="System.String" />
                  <parameter name="host" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IWebRequestCreate" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="Create(System.Uri)" attrib="1478" abstract="true" virtual="true" returntype="System.Net.WebRequest">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NetworkAccess" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Accept" attrib="32854" fieldtype="System.Net.NetworkAccess" value="128" />
              <field name="Connect" attrib="32854" fieldtype="System.Net.NetworkAccess" value="64" />
            </fields>
          </class>
          <class name="NetworkCredential" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Net.ICredentials" />
              <interface name="System.Net.ICredentialsByHost" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String, System.Security.SecureString)" attrib="6278">
                <parameters>
                  <parameter name="userName" position="0" attrib="0" type="System.String" />
                  <parameter name="password" position="1" attrib="0" type="System.Security.SecureString" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="userName" position="0" attrib="0" type="System.String" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Security.SecureString, System.String)" attrib="6278">
                <parameters>
                  <parameter name="userName" position="0" attrib="0" type="System.String" />
                  <parameter name="password" position="1" attrib="0" type="System.Security.SecureString" />
                  <parameter name="domain" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="userName" position="0" attrib="0" type="System.String" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                  <parameter name="domain" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Domain" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Domain()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Domain(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Password" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Password()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Password(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SecurePassword" attrib="0" ptype="System.Security.SecureString">
                <methods>
                  <method name="get_SecurePassword()" attrib="2182" returntype="System.Security.SecureString">
                    <parameters />
                  </method>
                  <method name="set_SecurePassword(System.Security.SecureString)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.SecureString" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UserName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_UserName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_UserName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetCredential(System.Uri, System.String)" attrib="486" virtual="true" returntype="System.Net.NetworkCredential">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="authType" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetCredential(System.String, System.Int32, System.String)" attrib="486" virtual="true" returntype="System.Net.NetworkCredential">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                  <parameter name="authenticationType" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="OpenReadCompletedEventArgs" type="class" base="System.ComponentModel.AsyncCompletedEventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="Result" attrib="0" ptype="System.IO.Stream">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.IO.Stream">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="OpenReadCompletedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.OpenReadCompletedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.OpenReadCompletedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.OpenReadCompletedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.OpenReadCompletedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="OpenWriteCompletedEventArgs" type="class" base="System.ComponentModel.AsyncCompletedEventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="Result" attrib="0" ptype="System.IO.Stream">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.IO.Stream">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="OpenWriteCompletedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.OpenWriteCompletedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.OpenWriteCompletedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.OpenWriteCompletedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.OpenWriteCompletedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ProtocolViolationException" type="class" base="System.InvalidOperationException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16582" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SecurityProtocolType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Ssl3" attrib="32854" fieldtype="System.Net.SecurityProtocolType" value="48" />
              <field name="SystemDefault" attrib="32854" fieldtype="System.Net.SecurityProtocolType" value="0" />
              <field name="Tls" attrib="32854" fieldtype="System.Net.SecurityProtocolType" value="192" />
              <field name="Tls11" attrib="32854" fieldtype="System.Net.SecurityProtocolType" value="768" />
              <field name="Tls12" attrib="32854" fieldtype="System.Net.SecurityProtocolType" value="3072" />
            </fields>
          </class>
          <class name="ServicePoint" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <properties>
              <property name="Address" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_Address()" attrib="2182" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="BindIPEndPointDelegate" attrib="0" ptype="System.Net.BindIPEndPoint">
                <methods>
                  <method name="get_BindIPEndPointDelegate()" attrib="2182" returntype="System.Net.BindIPEndPoint">
                    <parameters />
                  </method>
                  <method name="set_BindIPEndPointDelegate(System.Net.BindIPEndPoint)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.BindIPEndPoint" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Certificate" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Certificate">
                <methods>
                  <method name="get_Certificate()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509Certificate">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ClientCertificate" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Certificate">
                <methods>
                  <method name="get_ClientCertificate()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509Certificate">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ConnectionLeaseTimeout" attrib="0" ptype="System.Int32">
                <attributes />
                <methods>
                  <method name="get_ConnectionLeaseTimeout()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ConnectionLeaseTimeout(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ConnectionLimit" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ConnectionLimit()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ConnectionLimit(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ConnectionName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ConnectionName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CurrentConnections" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_CurrentConnections()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Expect100Continue" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Expect100Continue()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Expect100Continue(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IdleSince" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_IdleSince()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MaxIdleTime" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_MaxIdleTime()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_MaxIdleTime(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ProtocolVersion" attrib="0" ptype="System.Version">
                <methods>
                  <method name="get_ProtocolVersion()" attrib="2502" virtual="true" returntype="System.Version">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReceiveBufferSize" attrib="0" ptype="System.Int32">
                <attributes />
                <methods>
                  <method name="get_ReceiveBufferSize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ReceiveBufferSize(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SupportsPipelining" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsPipelining()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UseNagleAlgorithm" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UseNagleAlgorithm()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseNagleAlgorithm(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CloseConnectionGroup(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="connectionGroupName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SetTcpKeepAlive(System.Boolean, System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="enabled" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="keepAliveTime" position="1" attrib="0" type="System.Int32" />
                  <parameter name="keepAliveInterval" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ServicePointManager" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="DefaultNonPersistentConnectionLimit" attrib="32854" fieldtype="System.Int32" value="4" />
              <field name="DefaultPersistentConnectionLimit" attrib="32854" fieldtype="System.Int32" value="10" />
            </fields>
            <properties>
              <property name="CertificatePolicy" attrib="0" ptype="System.Net.ICertificatePolicy">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use ServerCertificateValidationCallback instead" />
                      <property name="IsError" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_CertificatePolicy()" attrib="2198" static="true" returntype="System.Net.ICertificatePolicy">
                    <parameters />
                  </method>
                  <method name="set_CertificatePolicy(System.Net.ICertificatePolicy)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.ICertificatePolicy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CheckCertificateRevocationList" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_CheckCertificateRevocationList()" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_CheckCertificateRevocationList(System.Boolean)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ClientCipherSuitesCallback" attrib="0" ptype="System.Net.CipherSuitesCallback">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer supported." />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_ClientCipherSuitesCallback()" attrib="2198" static="true" returntype="System.Net.CipherSuitesCallback">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_ClientCipherSuitesCallback(System.Net.CipherSuitesCallback)" attrib="2198" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.CipherSuitesCallback" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="DefaultConnectionLimit" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_DefaultConnectionLimit()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_DefaultConnectionLimit(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="DnsRefreshTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_DnsRefreshTimeout()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_DnsRefreshTimeout(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="EnableDnsRoundRobin" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_EnableDnsRoundRobin()" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_EnableDnsRoundRobin(System.Boolean)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="EncryptionPolicy" attrib="0" ptype="System.Net.Security.EncryptionPolicy">
                <attributes />
                <methods>
                  <method name="get_EncryptionPolicy()" attrib="2198" static="true" returntype="System.Net.Security.EncryptionPolicy">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Expect100Continue" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Expect100Continue()" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Expect100Continue(System.Boolean)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MaxServicePointIdleTime" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_MaxServicePointIdleTime()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_MaxServicePointIdleTime(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MaxServicePoints" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_MaxServicePoints()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_MaxServicePoints(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReusePort" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_ReusePort()" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_ReusePort(System.Boolean)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SecurityProtocol" attrib="0" ptype="System.Net.SecurityProtocolType">
                <methods>
                  <method name="get_SecurityProtocol()" attrib="2198" static="true" returntype="System.Net.SecurityProtocolType">
                    <parameters />
                  </method>
                  <method name="set_SecurityProtocol(System.Net.SecurityProtocolType)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.SecurityProtocolType" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ServerCertificateValidationCallback" attrib="0" ptype="System.Net.Security.RemoteCertificateValidationCallback">
                <methods>
                  <method name="get_ServerCertificateValidationCallback()" attrib="2198" static="true" returntype="System.Net.Security.RemoteCertificateValidationCallback">
                    <parameters />
                  </method>
                  <method name="set_ServerCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Security.RemoteCertificateValidationCallback" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ServerCipherSuitesCallback" attrib="0" ptype="System.Net.CipherSuitesCallback">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API is no longer supported." />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_ServerCipherSuitesCallback()" attrib="2198" static="true" returntype="System.Net.CipherSuitesCallback">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_ServerCipherSuitesCallback(System.Net.CipherSuitesCallback)" attrib="2198" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.CipherSuitesCallback" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UseNagleAlgorithm" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UseNagleAlgorithm()" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseNagleAlgorithm(System.Boolean)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="FindServicePoint(System.Uri)" attrib="150" static="true" returntype="System.Net.ServicePoint">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="FindServicePoint(System.String, System.Net.IWebProxy)" attrib="150" static="true" returntype="System.Net.ServicePoint">
                <parameters>
                  <parameter name="uriString" position="0" attrib="0" type="System.String" />
                  <parameter name="proxy" position="1" attrib="0" type="System.Net.IWebProxy" />
                </parameters>
              </method>
              <method name="FindServicePoint(System.Uri, System.Net.IWebProxy)" attrib="150" static="true" returntype="System.Net.ServicePoint">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="proxy" position="1" attrib="0" type="System.Net.IWebProxy" />
                </parameters>
              </method>
              <method name="SetTcpKeepAlive(System.Boolean, System.Int32, System.Int32)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="enabled" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="keepAliveTime" position="1" attrib="0" type="System.Int32" />
                  <parameter name="keepAliveInterval" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SocketAddress" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Net.Sockets.AddressFamily)" attrib="6278">
                <parameters>
                  <parameter name="family" position="0" attrib="0" type="System.Net.Sockets.AddressFamily" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Sockets.AddressFamily, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="family" position="0" attrib="0" type="System.Net.Sockets.AddressFamily" />
                  <parameter name="size" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Family" attrib="0" ptype="System.Net.Sockets.AddressFamily">
                <methods>
                  <method name="get_Family()" attrib="2182" returntype="System.Net.Sockets.AddressFamily">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Byte" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Byte">
                    <parameters>
                      <parameter name="offset" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, System.Byte)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="offset" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="System.Byte" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Size" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Size()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="comparand" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="SocketPermission" type="class" base="System.Security.CodeAccessPermission" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Security.IPermission" />
              <interface name="System.Security.ISecurityEncodable" />
              <interface name="System.Security.IStackWalk" />
              <interface name="System.Security.Permissions.IUnrestrictedPermission" />
            </interfaces>
            <fields>
              <field name="AllPorts" attrib="32854" fieldtype="System.Int32" value="-1" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Security.Permissions.PermissionState)" attrib="6278">
                <parameters>
                  <parameter name="state" position="0" attrib="0" type="System.Security.Permissions.PermissionState" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.NetworkAccess, System.Net.TransportType, System.String, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="access" position="0" attrib="0" type="System.Net.NetworkAccess" />
                  <parameter name="transport" position="1" attrib="0" type="System.Net.TransportType" />
                  <parameter name="hostName" position="2" attrib="0" type="System.String" />
                  <parameter name="portNumber" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AcceptList" attrib="0" ptype="System.Collections.IEnumerator">
                <methods>
                  <method name="get_AcceptList()" attrib="2182" returntype="System.Collections.IEnumerator">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ConnectList" attrib="0" ptype="System.Collections.IEnumerator">
                <methods>
                  <method name="get_ConnectList()" attrib="2182" returntype="System.Collections.IEnumerator">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddPermission(System.Net.NetworkAccess, System.Net.TransportType, System.String, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="access" position="0" attrib="0" type="System.Net.NetworkAccess" />
                  <parameter name="transport" position="1" attrib="0" type="System.Net.TransportType" />
                  <parameter name="hostName" position="2" attrib="0" type="System.String" />
                  <parameter name="portNumber" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Copy()" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters />
              </method>
              <method name="FromXml(System.Security.SecurityElement)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="securityElement" position="0" attrib="0" type="System.Security.SecurityElement" />
                </parameters>
              </method>
              <method name="Intersect(System.Security.IPermission)" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Security.IPermission" />
                </parameters>
              </method>
              <method name="IsSubsetOf(System.Security.IPermission)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Security.IPermission" />
                </parameters>
              </method>
              <method name="IsUnrestricted()" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="ToXml()" attrib="198" virtual="true" is-override="true" returntype="System.Security.SecurityElement">
                <parameters />
              </method>
              <method name="Union(System.Security.IPermission)" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Security.IPermission" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SocketPermissionAttribute" type="class" base="System.Security.Permissions.CodeAccessSecurityAttribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method, Constructor, Struct, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Security.Permissions.SecurityAction)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Security.Permissions.SecurityAction" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Access" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Access()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Access(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Host" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Host()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Host(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Port" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Port()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Port(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Transport" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Transport()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Transport(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreatePermission()" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TransportContext" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)" attrib="1478" abstract="true" virtual="true" returntype="System.Security.Authentication.ExtendedProtection.ChannelBinding">
                <parameters>
                  <parameter name="kind" position="0" attrib="0" type="System.Security.Authentication.ExtendedProtection.ChannelBindingKind" />
                </parameters>
              </method>
              <method name="GetTlsTokenBindings()" attrib="454" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[System.Security.Authentication.ExtendedProtection.TokenBinding]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TransportType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="All" attrib="32854" fieldtype="System.Net.TransportType" value="3" />
              <field name="ConnectionOriented" attrib="32854" fieldtype="System.Net.TransportType" value="2" />
              <field name="Connectionless" attrib="32854" fieldtype="System.Net.TransportType" value="1" />
              <field name="Tcp" attrib="32854" fieldtype="System.Net.TransportType" value="2" />
              <field name="Udp" attrib="32854" fieldtype="System.Net.TransportType" value="1" />
            </fields>
          </class>
          <class name="UploadDataCompletedEventArgs" type="class" base="System.ComponentModel.AsyncCompletedEventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="Result" attrib="0" ptype="System.Byte[]">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.Byte[]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="UploadDataCompletedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.UploadDataCompletedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.UploadDataCompletedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.UploadDataCompletedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.UploadDataCompletedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UploadFileCompletedEventArgs" type="class" base="System.ComponentModel.AsyncCompletedEventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="Result" attrib="0" ptype="System.Byte[]">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.Byte[]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="UploadFileCompletedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.UploadFileCompletedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.UploadFileCompletedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.UploadFileCompletedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.UploadFileCompletedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UploadProgressChangedEventArgs" type="class" base="System.ComponentModel.ProgressChangedEventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="BytesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_BytesReceived()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="BytesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_BytesSent()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TotalBytesToReceive" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_TotalBytesToReceive()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TotalBytesToSend" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_TotalBytesToSend()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="UploadProgressChangedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.UploadProgressChangedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.UploadProgressChangedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.UploadProgressChangedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.UploadProgressChangedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UploadStringCompletedEventArgs" type="class" base="System.ComponentModel.AsyncCompletedEventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="Result" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="UploadStringCompletedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.UploadStringCompletedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.UploadStringCompletedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.UploadStringCompletedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.UploadStringCompletedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UploadValuesCompletedEventArgs" type="class" base="System.ComponentModel.AsyncCompletedEventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="Result" attrib="0" ptype="System.Byte[]">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.Byte[]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="UploadValuesCompletedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.UploadValuesCompletedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.UploadValuesCompletedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.UploadValuesCompletedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.UploadValuesCompletedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="WebClient" type="class" base="System.ComponentModel.Component" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ComponentModel.IComponent" />
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="AllowReadStreamBuffering" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API supports the .NET Framework infrastructure and is not intended to be used directly from your code." />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_AllowReadStreamBuffering()" attrib="2182" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_AllowReadStreamBuffering(System.Boolean)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="AllowWriteStreamBuffering" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API supports the .NET Framework infrastructure and is not intended to be used directly from your code." />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_AllowWriteStreamBuffering()" attrib="2182" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_AllowWriteStreamBuffering(System.Boolean)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="BaseAddress" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_BaseAddress()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_BaseAddress(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CachePolicy" attrib="0" ptype="System.Net.Cache.RequestCachePolicy">
                <methods>
                  <method name="get_CachePolicy()" attrib="2182" returntype="System.Net.Cache.RequestCachePolicy">
                    <parameters />
                  </method>
                  <method name="set_CachePolicy(System.Net.Cache.RequestCachePolicy)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Cache.RequestCachePolicy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Credentials" attrib="0" ptype="System.Net.ICredentials">
                <methods>
                  <method name="get_Credentials()" attrib="2182" returntype="System.Net.ICredentials">
                    <parameters />
                  </method>
                  <method name="set_Credentials(System.Net.ICredentials)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.ICredentials" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Encoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_Encoding()" attrib="2182" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                  <method name="set_Encoding(System.Text.Encoding)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Text.Encoding" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Net.WebHeaderCollection">
                <methods>
                  <method name="get_Headers()" attrib="2182" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                  <method name="set_Headers(System.Net.WebHeaderCollection)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.WebHeaderCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsBusy" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsBusy()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Proxy" attrib="0" ptype="System.Net.IWebProxy">
                <methods>
                  <method name="get_Proxy()" attrib="2182" returntype="System.Net.IWebProxy">
                    <parameters />
                  </method>
                  <method name="set_Proxy(System.Net.IWebProxy)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IWebProxy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="QueryString" attrib="0" ptype="System.Collections.Specialized.NameValueCollection">
                <methods>
                  <method name="get_QueryString()" attrib="2182" returntype="System.Collections.Specialized.NameValueCollection">
                    <parameters />
                  </method>
                  <method name="set_QueryString(System.Collections.Specialized.NameValueCollection)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ResponseHeaders" attrib="0" ptype="System.Net.WebHeaderCollection">
                <methods>
                  <method name="get_ResponseHeaders()" attrib="2182" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UseDefaultCredentials" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UseDefaultCredentials()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseDefaultCredentials(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="DownloadDataCompleted" attrib="0" eventtype="System.Net.DownloadDataCompletedEventHandler" />
              <event name="DownloadFileCompleted" attrib="0" eventtype="System.ComponentModel.AsyncCompletedEventHandler" />
              <event name="DownloadProgressChanged" attrib="0" eventtype="System.Net.DownloadProgressChangedEventHandler" />
              <event name="DownloadStringCompleted" attrib="0" eventtype="System.Net.DownloadStringCompletedEventHandler" />
              <event name="OpenReadCompleted" attrib="0" eventtype="System.Net.OpenReadCompletedEventHandler" />
              <event name="OpenWriteCompleted" attrib="0" eventtype="System.Net.OpenWriteCompletedEventHandler" />
              <event name="UploadDataCompleted" attrib="0" eventtype="System.Net.UploadDataCompletedEventHandler" />
              <event name="UploadFileCompleted" attrib="0" eventtype="System.Net.UploadFileCompletedEventHandler" />
              <event name="UploadProgressChanged" attrib="0" eventtype="System.Net.UploadProgressChangedEventHandler" />
              <event name="UploadStringCompleted" attrib="0" eventtype="System.Net.UploadStringCompletedEventHandler" />
              <event name="UploadValuesCompleted" attrib="0" eventtype="System.Net.UploadValuesCompletedEventHandler" />
              <event name="WriteStreamClosed" attrib="0" eventtype="System.Net.WriteStreamClosedEventHandler">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API supports the .NET Framework infrastructure and is not intended to be used directly from your code." />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
              </event>
            </events>
            <methods>
              <method name="CancelAsync()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="DownloadData(System.String)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DownloadData(System.Uri)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="DownloadDataAsync(System.Uri)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="DownloadDataAsync(System.Uri, System.Object)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="userToken" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="DownloadDataTaskAsync(System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DownloadDataTaskAsync(System.Uri)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="DownloadFile(System.String, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="fileName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DownloadFile(System.Uri, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="fileName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DownloadFileAsync(System.Uri, System.String)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="fileName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DownloadFileAsync(System.Uri, System.String, System.Object)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="fileName" position="1" attrib="0" type="System.String" />
                  <parameter name="userToken" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="DownloadFileTaskAsync(System.String, System.String)" attrib="16518" returntype="System.Threading.Tasks.Task">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="fileName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DownloadFileTaskAsync(System.Uri, System.String)" attrib="16518" returntype="System.Threading.Tasks.Task">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="fileName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DownloadString(System.String)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DownloadString(System.Uri)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="DownloadStringAsync(System.Uri)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="DownloadStringAsync(System.Uri, System.Object)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="userToken" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="DownloadStringTaskAsync(System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.String]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DownloadStringTaskAsync(System.Uri)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.String]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="GetWebRequest(System.Uri)" attrib="452" virtual="true" returntype="System.Net.WebRequest">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="GetWebResponse(System.Net.WebRequest)" attrib="452" virtual="true" returntype="System.Net.WebResponse">
                <parameters>
                  <parameter name="request" position="0" attrib="0" type="System.Net.WebRequest" />
                </parameters>
              </method>
              <method name="GetWebResponse(System.Net.WebRequest, System.IAsyncResult)" attrib="452" virtual="true" returntype="System.Net.WebResponse">
                <parameters>
                  <parameter name="request" position="0" attrib="0" type="System.Net.WebRequest" />
                  <parameter name="result" position="1" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.DownloadDataCompletedEventArgs" />
                </parameters>
              </method>
              <method name="OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.ComponentModel.AsyncCompletedEventArgs" />
                </parameters>
              </method>
              <method name="OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.DownloadProgressChangedEventArgs" />
                </parameters>
              </method>
              <method name="OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.DownloadStringCompletedEventArgs" />
                </parameters>
              </method>
              <method name="OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.OpenReadCompletedEventArgs" />
                </parameters>
              </method>
              <method name="OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.OpenWriteCompletedEventArgs" />
                </parameters>
              </method>
              <method name="OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.UploadDataCompletedEventArgs" />
                </parameters>
              </method>
              <method name="OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.UploadFileCompletedEventArgs" />
                </parameters>
              </method>
              <method name="OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.UploadProgressChangedEventArgs" />
                </parameters>
              </method>
              <method name="OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.UploadStringCompletedEventArgs" />
                </parameters>
              </method>
              <method name="OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.UploadValuesCompletedEventArgs" />
                </parameters>
              </method>
              <method name="OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API supports the .NET Framework infrastructure and is not intended to be used directly from your code." />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.WriteStreamClosedEventArgs" />
                </parameters>
              </method>
              <method name="OpenRead(System.String)" attrib="134" returntype="System.IO.Stream">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="OpenRead(System.Uri)" attrib="134" returntype="System.IO.Stream">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="OpenReadAsync(System.Uri)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="OpenReadAsync(System.Uri, System.Object)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="userToken" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="OpenReadTaskAsync(System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.IO.Stream]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="OpenReadTaskAsync(System.Uri)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.IO.Stream]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="OpenWrite(System.String)" attrib="134" returntype="System.IO.Stream">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="OpenWrite(System.Uri)" attrib="134" returntype="System.IO.Stream">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="OpenWrite(System.String, System.String)" attrib="134" returntype="System.IO.Stream">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="OpenWrite(System.Uri, System.String)" attrib="134" returntype="System.IO.Stream">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="OpenWriteAsync(System.Uri)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="OpenWriteAsync(System.Uri, System.String)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="OpenWriteAsync(System.Uri, System.String, System.Object)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="userToken" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="OpenWriteTaskAsync(System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.IO.Stream]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="OpenWriteTaskAsync(System.Uri)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.IO.Stream]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="OpenWriteTaskAsync(System.String, System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.IO.Stream]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="OpenWriteTaskAsync(System.Uri, System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.IO.Stream]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadData(System.String, System.Byte[])" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="data" position="1" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="UploadData(System.Uri, System.Byte[])" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="data" position="1" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="UploadData(System.String, System.String, System.Byte[])" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="UploadData(System.Uri, System.String, System.Byte[])" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="UploadDataAsync(System.Uri, System.Byte[])" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="data" position="1" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="UploadDataAsync(System.Uri, System.String, System.Byte[])" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="UploadDataAsync(System.Uri, System.String, System.Byte[], System.Object)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.Byte[]" />
                  <parameter name="userToken" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="UploadDataTaskAsync(System.String, System.Byte[])" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="data" position="1" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="UploadDataTaskAsync(System.Uri, System.Byte[])" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="data" position="1" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="UploadDataTaskAsync(System.String, System.String, System.Byte[])" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="UploadDataTaskAsync(System.Uri, System.String, System.Byte[])" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="UploadFile(System.String, System.String)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="fileName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadFile(System.Uri, System.String)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="fileName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadFile(System.String, System.String, System.String)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="fileName" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadFile(System.Uri, System.String, System.String)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="fileName" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadFileAsync(System.Uri, System.String)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="fileName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadFileAsync(System.Uri, System.String, System.String)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="fileName" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadFileAsync(System.Uri, System.String, System.String, System.Object)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="fileName" position="2" attrib="0" type="System.String" />
                  <parameter name="userToken" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="UploadFileTaskAsync(System.String, System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="fileName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadFileTaskAsync(System.Uri, System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="fileName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadFileTaskAsync(System.String, System.String, System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="fileName" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadFileTaskAsync(System.Uri, System.String, System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="fileName" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadString(System.String, System.String)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="data" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadString(System.Uri, System.String)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="data" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadString(System.String, System.String, System.String)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadString(System.Uri, System.String, System.String)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadStringAsync(System.Uri, System.String)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="data" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadStringAsync(System.Uri, System.String, System.String)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadStringAsync(System.Uri, System.String, System.String, System.Object)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.String" />
                  <parameter name="userToken" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="UploadStringTaskAsync(System.String, System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.String]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="data" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadStringTaskAsync(System.Uri, System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.String]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="data" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadStringTaskAsync(System.String, System.String, System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.String]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadStringTaskAsync(System.Uri, System.String, System.String)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.String]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UploadValues(System.String, System.Collections.Specialized.NameValueCollection)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="data" position="1" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </method>
              <method name="UploadValues(System.Uri, System.Collections.Specialized.NameValueCollection)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="data" position="1" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </method>
              <method name="UploadValues(System.String, System.String, System.Collections.Specialized.NameValueCollection)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </method>
              <method name="UploadValues(System.Uri, System.String, System.Collections.Specialized.NameValueCollection)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </method>
              <method name="UploadValuesAsync(System.Uri, System.Collections.Specialized.NameValueCollection)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="data" position="1" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </method>
              <method name="UploadValuesAsync(System.Uri, System.String, System.Collections.Specialized.NameValueCollection)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </method>
              <method name="UploadValuesAsync(System.Uri, System.String, System.Collections.Specialized.NameValueCollection, System.Object)" attrib="16518" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                  <parameter name="userToken" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="UploadValuesTaskAsync(System.String, System.Collections.Specialized.NameValueCollection)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="data" position="1" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </method>
              <method name="UploadValuesTaskAsync(System.Uri, System.Collections.Specialized.NameValueCollection)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="data" position="1" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </method>
              <method name="UploadValuesTaskAsync(System.String, System.String, System.Collections.Specialized.NameValueCollection)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </method>
              <method name="UploadValuesTaskAsync(System.Uri, System.String, System.Collections.Specialized.NameValueCollection)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Byte[]]">
                <attributes>
                  <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="method" position="1" attrib="0" type="System.String" />
                  <parameter name="data" position="2" attrib="0" type="System.Collections.Specialized.NameValueCollection" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="WebException" type="class" base="System.InvalidOperationException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Net.WebExceptionStatus)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="status" position="1" attrib="0" type="System.Net.WebExceptionStatus" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception, System.Net.WebExceptionStatus, System.Net.WebResponse)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                  <parameter name="status" position="2" attrib="0" type="System.Net.WebExceptionStatus" />
                  <parameter name="response" position="3" attrib="0" type="System.Net.WebResponse" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Response" attrib="0" ptype="System.Net.WebResponse">
                <methods>
                  <method name="get_Response()" attrib="2182" returntype="System.Net.WebResponse">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Status" attrib="0" ptype="System.Net.WebExceptionStatus">
                <methods>
                  <method name="get_Status()" attrib="2182" returntype="System.Net.WebExceptionStatus">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16582" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="WebExceptionStatus" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="CacheEntryNotFound" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="18" />
              <field name="ConnectFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="2" />
              <field name="ConnectionClosed" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="8" />
              <field name="KeepAliveFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="12" />
              <field name="MessageLengthLimitExceeded" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="17" />
              <field name="NameResolutionFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="1" />
              <field name="Pending" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="13" />
              <field name="PipelineFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="5" />
              <field name="ProtocolError" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="7" />
              <field name="ProxyNameResolutionFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="15" />
              <field name="ReceiveFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="3" />
              <field name="RequestCanceled" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="6" />
              <field name="RequestProhibitedByCachePolicy" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="19" />
              <field name="RequestProhibitedByProxy" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="20" />
              <field name="SecureChannelFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="10" />
              <field name="SendFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="4" />
              <field name="ServerProtocolViolation" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="11" />
              <field name="Success" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="0" />
              <field name="Timeout" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="14" />
              <field name="TrustFailure" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="9" />
              <field name="UnknownError" attrib="32854" fieldtype="System.Net.WebExceptionStatus" value="16" />
            </fields>
          </class>
          <class name="WebHeaderCollection" type="class" base="System.Collections.Specialized.NameValueCollection" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Runtime.Serialization.IDeserializationCallback" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AllKeys" attrib="0" ptype="System.String[]">
                <methods>
                  <method name="get_AllKeys()" attrib="2246" virtual="true" is-override="true" returntype="System.String[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.String" params="System.Net.HttpRequestHeader">
                <methods>
                  <method name="get_Item(System.Net.HttpRequestHeader)" attrib="2182" returntype="System.String">
                    <parameters>
                      <parameter name="header" position="0" attrib="0" type="System.Net.HttpRequestHeader" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Net.HttpRequestHeader, System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="header" position="0" attrib="0" type="System.Net.HttpRequestHeader" />
                      <parameter name="value" position="1" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.String" params="System.Net.HttpResponseHeader">
                <methods>
                  <method name="get_Item(System.Net.HttpResponseHeader)" attrib="2182" returntype="System.String">
                    <parameters>
                      <parameter name="header" position="0" attrib="0" type="System.Net.HttpResponseHeader" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Net.HttpResponseHeader, System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="header" position="0" attrib="0" type="System.Net.HttpResponseHeader" />
                      <parameter name="value" position="1" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Keys" attrib="0" ptype="System.Collections.Specialized.NameObjectCollectionBase+KeysCollection">
                <methods>
                  <method name="get_Keys()" attrib="2246" virtual="true" is-override="true" returntype="System.Collections.Specialized.NameObjectCollectionBase+KeysCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="header" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Add(System.Net.HttpRequestHeader, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="header" position="0" attrib="0" type="System.Net.HttpRequestHeader" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Add(System.Net.HttpResponseHeader, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="header" position="0" attrib="0" type="System.Net.HttpResponseHeader" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Add(System.String, System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AddWithoutValidate(System.String, System.String)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="headerName" position="0" attrib="0" type="System.String" />
                  <parameter name="headerValue" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Clear()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Get(System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Get(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="198" virtual="true" is-override="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
              <method name="GetKey(System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16582" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="GetValues(System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.String[]">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetValues(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.String[]">
                <parameters>
                  <parameter name="header" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsRestricted(System.String)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="headerName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsRestricted(System.String, System.Boolean)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="headerName" position="0" attrib="0" type="System.String" />
                  <parameter name="response" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="OnDeserialization(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Remove(System.Net.HttpRequestHeader)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="header" position="0" attrib="0" type="System.Net.HttpRequestHeader" />
                </parameters>
              </method>
              <method name="Remove(System.Net.HttpResponseHeader)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="header" position="0" attrib="0" type="System.Net.HttpResponseHeader" />
                </parameters>
              </method>
              <method name="Remove(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Set(System.Net.HttpRequestHeader, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="header" position="0" attrib="0" type="System.Net.HttpRequestHeader" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Set(System.Net.HttpResponseHeader, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="header" position="0" attrib="0" type="System.Net.HttpResponseHeader" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Set(System.String, System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ToByteArray()" attrib="134" returntype="System.Byte[]">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="WebPermission" type="class" base="System.Security.CodeAccessPermission" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Security.IPermission" />
              <interface name="System.Security.ISecurityEncodable" />
              <interface name="System.Security.IStackWalk" />
              <interface name="System.Security.Permissions.IUnrestrictedPermission" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Security.Permissions.PermissionState)" attrib="6278">
                <parameters>
                  <parameter name="state" position="0" attrib="0" type="System.Security.Permissions.PermissionState" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.NetworkAccess, System.String)" attrib="6278">
                <parameters>
                  <parameter name="access" position="0" attrib="0" type="System.Net.NetworkAccess" />
                  <parameter name="uriString" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.NetworkAccess, System.Text.RegularExpressions.Regex)" attrib="6278">
                <parameters>
                  <parameter name="access" position="0" attrib="0" type="System.Net.NetworkAccess" />
                  <parameter name="uriRegex" position="1" attrib="0" type="System.Text.RegularExpressions.Regex" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AcceptList" attrib="0" ptype="System.Collections.IEnumerator">
                <methods>
                  <method name="get_AcceptList()" attrib="2182" returntype="System.Collections.IEnumerator">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ConnectList" attrib="0" ptype="System.Collections.IEnumerator">
                <methods>
                  <method name="get_ConnectList()" attrib="2182" returntype="System.Collections.IEnumerator">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddPermission(System.Net.NetworkAccess, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="access" position="0" attrib="0" type="System.Net.NetworkAccess" />
                  <parameter name="uriString" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AddPermission(System.Net.NetworkAccess, System.Text.RegularExpressions.Regex)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="access" position="0" attrib="0" type="System.Net.NetworkAccess" />
                  <parameter name="uriRegex" position="1" attrib="0" type="System.Text.RegularExpressions.Regex" />
                </parameters>
              </method>
              <method name="Copy()" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters />
              </method>
              <method name="FromXml(System.Security.SecurityElement)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="securityElement" position="0" attrib="0" type="System.Security.SecurityElement" />
                </parameters>
              </method>
              <method name="Intersect(System.Security.IPermission)" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Security.IPermission" />
                </parameters>
              </method>
              <method name="IsSubsetOf(System.Security.IPermission)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Security.IPermission" />
                </parameters>
              </method>
              <method name="IsUnrestricted()" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="ToXml()" attrib="198" virtual="true" is-override="true" returntype="System.Security.SecurityElement">
                <parameters />
              </method>
              <method name="Union(System.Security.IPermission)" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Security.IPermission" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="WebPermissionAttribute" type="class" base="System.Security.Permissions.CodeAccessSecurityAttribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method, Constructor, Struct, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Security.Permissions.SecurityAction)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Security.Permissions.SecurityAction" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Accept" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Accept()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Accept(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="AcceptPattern" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_AcceptPattern()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_AcceptPattern(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Connect" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Connect()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Connect(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ConnectPattern" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ConnectPattern()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ConnectPattern(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreatePermission()" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="WebProxy" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Net.IWebProxy" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="Address" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Uri)" attrib="6278">
                <parameters>
                  <parameter name="Address" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="Address" position="0" attrib="0" type="System.String" />
                  <parameter name="BypassOnLocal" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="Host" position="0" attrib="0" type="System.String" />
                  <parameter name="Port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Uri, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="Address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="BypassOnLocal" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Boolean, System.String[])" attrib="6278">
                <parameters>
                  <parameter name="Address" position="0" attrib="0" type="System.String" />
                  <parameter name="BypassOnLocal" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="BypassList" position="2" attrib="0" type="System.String[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Uri, System.Boolean, System.String[])" attrib="6278">
                <parameters>
                  <parameter name="Address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="BypassOnLocal" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="BypassList" position="2" attrib="0" type="System.String[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Boolean, System.String[], System.Net.ICredentials)" attrib="6278">
                <parameters>
                  <parameter name="Address" position="0" attrib="0" type="System.String" />
                  <parameter name="BypassOnLocal" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="BypassList" position="2" attrib="0" type="System.String[]" />
                  <parameter name="Credentials" position="3" attrib="0" type="System.Net.ICredentials" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Uri, System.Boolean, System.String[], System.Net.ICredentials)" attrib="6278">
                <parameters>
                  <parameter name="Address" position="0" attrib="0" type="System.Uri" />
                  <parameter name="BypassOnLocal" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="BypassList" position="2" attrib="0" type="System.String[]" />
                  <parameter name="Credentials" position="3" attrib="0" type="System.Net.ICredentials" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Address" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_Address()" attrib="2182" returntype="System.Uri">
                    <parameters />
                  </method>
                  <method name="set_Address(System.Uri)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Uri" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="BypassArrayList" attrib="0" ptype="System.Collections.ArrayList">
                <methods>
                  <method name="get_BypassArrayList()" attrib="2182" returntype="System.Collections.ArrayList">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="BypassList" attrib="0" ptype="System.String[]">
                <methods>
                  <method name="get_BypassList()" attrib="2182" returntype="System.String[]">
                    <parameters />
                  </method>
                  <method name="set_BypassList(System.String[])" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String[]" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="BypassProxyOnLocal" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_BypassProxyOnLocal()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_BypassProxyOnLocal(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Credentials" attrib="0" ptype="System.Net.ICredentials">
                <methods>
                  <method name="get_Credentials()" attrib="2534" virtual="true" returntype="System.Net.ICredentials">
                    <parameters />
                  </method>
                  <method name="set_Credentials(System.Net.ICredentials)" attrib="2534" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.ICredentials" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UseDefaultCredentials" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UseDefaultCredentials()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseDefaultCredentials(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateDefaultProxy()" attrib="150" static="true" returntype="System.Net.IWebProxy">
                <parameters />
              </method>
              <method name="GetDefaultProxy()" attrib="150" static="true" returntype="System.Net.WebProxy">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This method has been deprecated. Please use the proxy selected for you by default. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16836" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="GetProxy(System.Uri)" attrib="486" virtual="true" returntype="System.Uri">
                <parameters>
                  <parameter name="destination" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="IsBypassed(System.Uri)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="WebRequest" type="class" base="System.MarshalByRefObject" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AuthenticationLevel" attrib="0" ptype="System.Net.Security.AuthenticationLevel">
                <methods>
                  <method name="get_AuthenticationLevel()" attrib="2182" returntype="System.Net.Security.AuthenticationLevel">
                    <parameters />
                  </method>
                  <method name="set_AuthenticationLevel(System.Net.Security.AuthenticationLevel)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Security.AuthenticationLevel" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CachePolicy" attrib="0" ptype="System.Net.Cache.RequestCachePolicy">
                <methods>
                  <method name="get_CachePolicy()" attrib="2502" virtual="true" returntype="System.Net.Cache.RequestCachePolicy">
                    <parameters />
                  </method>
                  <method name="set_CachePolicy(System.Net.Cache.RequestCachePolicy)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Cache.RequestCachePolicy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ConnectionGroupName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ConnectionGroupName()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ConnectionGroupName(System.String)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentLength" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ContentLength()" attrib="2502" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_ContentLength(System.Int64)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ContentType()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ContentType(System.String)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CreatorInstance" attrib="0" ptype="System.Net.IWebRequestCreate">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API supports the .NET Framework infrastructure and is not intended to be used directly from your code." />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_CreatorInstance()" attrib="2502" virtual="true" returntype="System.Net.IWebRequestCreate">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Credentials" attrib="0" ptype="System.Net.ICredentials">
                <methods>
                  <method name="get_Credentials()" attrib="2502" virtual="true" returntype="System.Net.ICredentials">
                    <parameters />
                  </method>
                  <method name="set_Credentials(System.Net.ICredentials)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.ICredentials" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="DefaultCachePolicy" attrib="0" ptype="System.Net.Cache.RequestCachePolicy">
                <methods>
                  <method name="get_DefaultCachePolicy()" attrib="2198" static="true" returntype="System.Net.Cache.RequestCachePolicy">
                    <parameters />
                  </method>
                  <method name="set_DefaultCachePolicy(System.Net.Cache.RequestCachePolicy)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Cache.RequestCachePolicy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="DefaultWebProxy" attrib="0" ptype="System.Net.IWebProxy">
                <methods>
                  <method name="get_DefaultWebProxy()" attrib="2198" static="true" returntype="System.Net.IWebProxy">
                    <parameters />
                  </method>
                  <method name="set_DefaultWebProxy(System.Net.IWebProxy)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IWebProxy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Net.WebHeaderCollection">
                <methods>
                  <method name="get_Headers()" attrib="2502" virtual="true" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                  <method name="set_Headers(System.Net.WebHeaderCollection)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.WebHeaderCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ImpersonationLevel" attrib="0" ptype="System.Security.Principal.TokenImpersonationLevel">
                <methods>
                  <method name="get_ImpersonationLevel()" attrib="2182" returntype="System.Security.Principal.TokenImpersonationLevel">
                    <parameters />
                  </method>
                  <method name="set_ImpersonationLevel(System.Security.Principal.TokenImpersonationLevel)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Method" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Method()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Method(System.String)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PreAuthenticate" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_PreAuthenticate()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_PreAuthenticate(System.Boolean)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Proxy" attrib="0" ptype="System.Net.IWebProxy">
                <methods>
                  <method name="get_Proxy()" attrib="2502" virtual="true" returntype="System.Net.IWebProxy">
                    <parameters />
                  </method>
                  <method name="set_Proxy(System.Net.IWebProxy)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IWebProxy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RequestUri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_RequestUri()" attrib="2502" virtual="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Timeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Timeout()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Timeout(System.Int32)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UseDefaultCredentials" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UseDefaultCredentials()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseDefaultCredentials(System.Boolean)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Abort()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="BeginGetRequestStream(System.AsyncCallback, System.Object)" attrib="16838" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginGetResponse(System.AsyncCallback, System.Object)" attrib="16838" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Create(System.String)" attrib="150" static="true" returntype="System.Net.WebRequest">
                <parameters>
                  <parameter name="requestUriString" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Create(System.Uri)" attrib="150" static="true" returntype="System.Net.WebRequest">
                <parameters>
                  <parameter name="requestUri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="CreateDefault(System.Uri)" attrib="150" static="true" returntype="System.Net.WebRequest">
                <parameters>
                  <parameter name="requestUri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="CreateHttp(System.String)" attrib="150" static="true" returntype="System.Net.HttpWebRequest">
                <parameters>
                  <parameter name="requestUriString" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CreateHttp(System.Uri)" attrib="150" static="true" returntype="System.Net.HttpWebRequest">
                <parameters>
                  <parameter name="requestUri" position="0" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="EndGetRequestStream(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.IO.Stream">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndGetResponse(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Net.WebResponse">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16836" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="GetRequestStream()" attrib="454" virtual="true" returntype="System.IO.Stream">
                <parameters />
              </method>
              <method name="GetRequestStreamAsync()" attrib="16838" virtual="true" returntype="System.Threading.Tasks.Task`1[System.IO.Stream]">
                <parameters />
              </method>
              <method name="GetResponse()" attrib="454" virtual="true" returntype="System.Net.WebResponse">
                <parameters />
              </method>
              <method name="GetResponseAsync()" attrib="16838" virtual="true" returntype="System.Threading.Tasks.Task`1[System.Net.WebResponse]">
                <parameters />
              </method>
              <method name="GetSystemWebProxy()" attrib="150" static="true" returntype="System.Net.IWebProxy">
                <parameters />
              </method>
              <method name="RegisterPortableWebRequestCreator(System.Net.IWebRequestCreate)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API supports the .NET Framework infrastructure and is not intended to be used directly from your code." />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="creator" position="0" attrib="0" type="System.Net.IWebRequestCreate" />
                </parameters>
              </method>
              <method name="RegisterPrefix(System.String, System.Net.IWebRequestCreate)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="prefix" position="0" attrib="0" type="System.String" />
                  <parameter name="creator" position="1" attrib="0" type="System.Net.IWebRequestCreate" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="WebRequestMethods" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <classes>
              <class name="File" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <fields>
                  <field name="DownloadFile" attrib="32854" fieldtype="System.String" value="GET" />
                  <field name="UploadFile" attrib="32854" fieldtype="System.String" value="PUT" />
                </fields>
              </class>
              <class name="Ftp" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <fields>
                  <field name="AppendFile" attrib="32854" fieldtype="System.String" value="APPE" />
                  <field name="DeleteFile" attrib="32854" fieldtype="System.String" value="DELE" />
                  <field name="DownloadFile" attrib="32854" fieldtype="System.String" value="RETR" />
                  <field name="GetDateTimestamp" attrib="32854" fieldtype="System.String" value="MDTM" />
                  <field name="GetFileSize" attrib="32854" fieldtype="System.String" value="SIZE" />
                  <field name="ListDirectory" attrib="32854" fieldtype="System.String" value="NLST" />
                  <field name="ListDirectoryDetails" attrib="32854" fieldtype="System.String" value="LIST" />
                  <field name="MakeDirectory" attrib="32854" fieldtype="System.String" value="MKD" />
                  <field name="PrintWorkingDirectory" attrib="32854" fieldtype="System.String" value="PWD" />
                  <field name="RemoveDirectory" attrib="32854" fieldtype="System.String" value="RMD" />
                  <field name="Rename" attrib="32854" fieldtype="System.String" value="RENAME" />
                  <field name="UploadFile" attrib="32854" fieldtype="System.String" value="STOR" />
                  <field name="UploadFileWithUniqueName" attrib="32854" fieldtype="System.String" value="STOU" />
                </fields>
              </class>
              <class name="Http" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <fields>
                  <field name="Connect" attrib="32854" fieldtype="System.String" value="CONNECT" />
                  <field name="Get" attrib="32854" fieldtype="System.String" value="GET" />
                  <field name="Head" attrib="32854" fieldtype="System.String" value="HEAD" />
                  <field name="MkCol" attrib="32854" fieldtype="System.String" value="MKCOL" />
                  <field name="Post" attrib="32854" fieldtype="System.String" value="POST" />
                  <field name="Put" attrib="32854" fieldtype="System.String" value="PUT" />
                </fields>
              </class>
            </classes>
          </class>
          <class name="WebResponse" type="class" base="System.MarshalByRefObject" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ContentLength" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ContentLength()" attrib="2502" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_ContentLength(System.Int64)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ContentType()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ContentType(System.String)" attrib="2502" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Net.WebHeaderCollection">
                <methods>
                  <method name="get_Headers()" attrib="2502" virtual="true" returntype="System.Net.WebHeaderCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsFromCache" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsFromCache()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsMutuallyAuthenticated" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsMutuallyAuthenticated()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ResponseUri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_ResponseUri()" attrib="2502" virtual="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsHeaders" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsHeaders()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16836" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="GetResponseStream()" attrib="454" virtual="true" returntype="System.IO.Stream">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="WebUtility" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="HtmlDecode(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="HtmlDecode(System.String, System.IO.TextWriter)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                  <parameter name="output" position="1" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </method>
              <method name="HtmlEncode(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="HtmlEncode(System.String, System.IO.TextWriter)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                  <parameter name="output" position="1" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </method>
              <method name="UrlDecode(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="encodedValue" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UrlDecodeToBytes(System.Byte[], System.Int32, System.Int32)" attrib="150" static="true" returntype="System.Byte[]">
                <parameters>
                  <parameter name="encodedValue" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="UrlEncode(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UrlEncodeToBytes(System.Byte[], System.Int32, System.Int32)" attrib="150" static="true" returntype="System.Byte[]">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="WriteStreamClosedEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                <properties>
                  <property name="State" value="Never" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API supports the .NET Framework infrastructure and is not intended to be used directly from your code." />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Error" attrib="0" ptype="System.Exception">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API supports the .NET Framework infrastructure and is not intended to be used directly from your code." />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Error()" attrib="2182" returntype="System.Exception">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="WriteStreamClosedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                <properties>
                  <property name="State" value="Never" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.WriteStreamClosedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.WriteStreamClosedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.WriteStreamClosedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.WriteStreamClosedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Net.Cache">
        <classes>
          <class name="HttpCacheAgeControl" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="MaxAge" attrib="32854" fieldtype="System.Net.Cache.HttpCacheAgeControl" value="2" />
              <field name="MaxAgeAndMaxStale" attrib="32854" fieldtype="System.Net.Cache.HttpCacheAgeControl" value="6" />
              <field name="MaxAgeAndMinFresh" attrib="32854" fieldtype="System.Net.Cache.HttpCacheAgeControl" value="3" />
              <field name="MaxStale" attrib="32854" fieldtype="System.Net.Cache.HttpCacheAgeControl" value="4" />
              <field name="MinFresh" attrib="32854" fieldtype="System.Net.Cache.HttpCacheAgeControl" value="1" />
              <field name="None" attrib="32854" fieldtype="System.Net.Cache.HttpCacheAgeControl" value="0" />
            </fields>
          </class>
          <class name="HttpRequestCacheLevel" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="BypassCache" attrib="32854" fieldtype="System.Net.Cache.HttpRequestCacheLevel" value="1" />
              <field name="CacheIfAvailable" attrib="32854" fieldtype="System.Net.Cache.HttpRequestCacheLevel" value="3" />
              <field name="CacheOnly" attrib="32854" fieldtype="System.Net.Cache.HttpRequestCacheLevel" value="2" />
              <field name="CacheOrNextCacheOnly" attrib="32854" fieldtype="System.Net.Cache.HttpRequestCacheLevel" value="7" />
              <field name="Default" attrib="32854" fieldtype="System.Net.Cache.HttpRequestCacheLevel" value="0" />
              <field name="NoCacheNoStore" attrib="32854" fieldtype="System.Net.Cache.HttpRequestCacheLevel" value="6" />
              <field name="Refresh" attrib="32854" fieldtype="System.Net.Cache.HttpRequestCacheLevel" value="8" />
              <field name="Reload" attrib="32854" fieldtype="System.Net.Cache.HttpRequestCacheLevel" value="5" />
              <field name="Revalidate" attrib="32854" fieldtype="System.Net.Cache.HttpRequestCacheLevel" value="4" />
            </fields>
          </class>
          <class name="HttpRequestCachePolicy" type="class" base="System.Net.Cache.RequestCachePolicy" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.DateTime)" attrib="6278">
                <parameters>
                  <parameter name="cacheSyncDate" position="0" attrib="0" type="System.DateTime" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Cache.HttpRequestCacheLevel)" attrib="6278">
                <parameters>
                  <parameter name="level" position="0" attrib="0" type="System.Net.Cache.HttpRequestCacheLevel" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Cache.HttpCacheAgeControl, System.TimeSpan)" attrib="6278">
                <parameters>
                  <parameter name="cacheAgeControl" position="0" attrib="0" type="System.Net.Cache.HttpCacheAgeControl" />
                  <parameter name="ageOrFreshOrStale" position="1" attrib="0" type="System.TimeSpan" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Cache.HttpCacheAgeControl, System.TimeSpan, System.TimeSpan)" attrib="6278">
                <parameters>
                  <parameter name="cacheAgeControl" position="0" attrib="0" type="System.Net.Cache.HttpCacheAgeControl" />
                  <parameter name="maxAge" position="1" attrib="0" type="System.TimeSpan" />
                  <parameter name="freshOrStale" position="2" attrib="0" type="System.TimeSpan" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Cache.HttpCacheAgeControl, System.TimeSpan, System.TimeSpan, System.DateTime)" attrib="6278">
                <parameters>
                  <parameter name="cacheAgeControl" position="0" attrib="0" type="System.Net.Cache.HttpCacheAgeControl" />
                  <parameter name="maxAge" position="1" attrib="0" type="System.TimeSpan" />
                  <parameter name="freshOrStale" position="2" attrib="0" type="System.TimeSpan" />
                  <parameter name="cacheSyncDate" position="3" attrib="0" type="System.DateTime" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CacheSyncDate" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_CacheSyncDate()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Level" attrib="0" ptype="System.Net.Cache.HttpRequestCacheLevel">
                <methods>
                  <method name="get_Level()" attrib="2182" returntype="System.Net.Cache.HttpRequestCacheLevel">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MaxAge" attrib="0" ptype="System.TimeSpan">
                <methods>
                  <method name="get_MaxAge()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MaxStale" attrib="0" ptype="System.TimeSpan">
                <methods>
                  <method name="get_MaxStale()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MinFresh" attrib="0" ptype="System.TimeSpan">
                <methods>
                  <method name="get_MinFresh()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="RequestCacheLevel" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="BypassCache" attrib="32854" fieldtype="System.Net.Cache.RequestCacheLevel" value="1" />
              <field name="CacheIfAvailable" attrib="32854" fieldtype="System.Net.Cache.RequestCacheLevel" value="3" />
              <field name="CacheOnly" attrib="32854" fieldtype="System.Net.Cache.RequestCacheLevel" value="2" />
              <field name="Default" attrib="32854" fieldtype="System.Net.Cache.RequestCacheLevel" value="0" />
              <field name="NoCacheNoStore" attrib="32854" fieldtype="System.Net.Cache.RequestCacheLevel" value="6" />
              <field name="Reload" attrib="32854" fieldtype="System.Net.Cache.RequestCacheLevel" value="5" />
              <field name="Revalidate" attrib="32854" fieldtype="System.Net.Cache.RequestCacheLevel" value="4" />
            </fields>
          </class>
          <class name="RequestCachePolicy" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Net.Cache.RequestCacheLevel)" attrib="6278">
                <parameters>
                  <parameter name="level" position="0" attrib="0" type="System.Net.Cache.RequestCacheLevel" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Level" attrib="0" ptype="System.Net.Cache.RequestCacheLevel">
                <methods>
                  <method name="get_Level()" attrib="2182" returntype="System.Net.Cache.RequestCacheLevel">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Net.Mail">
        <classes>
          <class name="AlternateView" type="class" base="System.Net.Mail.AttachmentBase" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.IO.Stream)" attrib="6278">
                <parameters>
                  <parameter name="contentStream" position="0" attrib="0" type="System.IO.Stream" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.Net.Mime.ContentType)" attrib="6278">
                <parameters>
                  <parameter name="contentStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="contentType" position="1" attrib="0" type="System.Net.Mime.ContentType" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.String)" attrib="6278">
                <parameters>
                  <parameter name="contentStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="mediaType" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Net.Mime.ContentType)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="contentType" position="1" attrib="0" type="System.Net.Mime.ContentType" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="mediaType" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="BaseUri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_BaseUri()" attrib="2182" returntype="System.Uri">
                    <parameters />
                  </method>
                  <method name="set_BaseUri(System.Uri)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Uri" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="LinkedResources" attrib="0" ptype="System.Net.Mail.LinkedResourceCollection">
                <methods>
                  <method name="get_LinkedResources()" attrib="2182" returntype="System.Net.Mail.LinkedResourceCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateAlternateViewFromString(System.String)" attrib="150" static="true" returntype="System.Net.Mail.AlternateView">
                <parameters>
                  <parameter name="content" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CreateAlternateViewFromString(System.String, System.Net.Mime.ContentType)" attrib="150" static="true" returntype="System.Net.Mail.AlternateView">
                <parameters>
                  <parameter name="content" position="0" attrib="0" type="System.String" />
                  <parameter name="contentType" position="1" attrib="0" type="System.Net.Mime.ContentType" />
                </parameters>
              </method>
              <method name="CreateAlternateViewFromString(System.String, System.Text.Encoding, System.String)" attrib="150" static="true" returntype="System.Net.Mail.AlternateView">
                <parameters>
                  <parameter name="content" position="0" attrib="0" type="System.String" />
                  <parameter name="contentEncoding" position="1" attrib="0" type="System.Text.Encoding" />
                  <parameter name="mediaType" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AlternateViewCollection" type="class" base="System.Collections.ObjectModel.Collection`1[System.Net.Mail.AlternateView]" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IList`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyList`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
              <interface name="System.IDisposable" />
            </interfaces>
            <methods>
              <method name="ClearItems()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="InsertItem(System.Int32, System.Net.Mail.AlternateView)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="System.Net.Mail.AlternateView" />
                </parameters>
              </method>
              <method name="RemoveItem(System.Int32)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SetItem(System.Int32, System.Net.Mail.AlternateView)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="System.Net.Mail.AlternateView" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Attachment" type="class" base="System.Net.Mail.AttachmentBase" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.Net.Mime.ContentType)" attrib="6278">
                <parameters>
                  <parameter name="contentStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="contentType" position="1" attrib="0" type="System.Net.Mime.ContentType" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.String)" attrib="6278">
                <parameters>
                  <parameter name="contentStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Net.Mime.ContentType)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="contentType" position="1" attrib="0" type="System.Net.Mime.ContentType" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="mediaType" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="contentStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                  <parameter name="mediaType" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ContentDisposition" attrib="0" ptype="System.Net.Mime.ContentDisposition">
                <methods>
                  <method name="get_ContentDisposition()" attrib="2182" returntype="System.Net.Mime.ContentDisposition">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Name(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="NameEncoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_NameEncoding()" attrib="2182" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                  <method name="set_NameEncoding(System.Text.Encoding)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Text.Encoding" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateAttachmentFromString(System.String, System.Net.Mime.ContentType)" attrib="150" static="true" returntype="System.Net.Mail.Attachment">
                <parameters>
                  <parameter name="content" position="0" attrib="0" type="System.String" />
                  <parameter name="contentType" position="1" attrib="0" type="System.Net.Mime.ContentType" />
                </parameters>
              </method>
              <method name="CreateAttachmentFromString(System.String, System.String)" attrib="150" static="true" returntype="System.Net.Mail.Attachment">
                <parameters>
                  <parameter name="content" position="0" attrib="0" type="System.String" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CreateAttachmentFromString(System.String, System.String, System.Text.Encoding, System.String)" attrib="150" static="true" returntype="System.Net.Mail.Attachment">
                <parameters>
                  <parameter name="content" position="0" attrib="0" type="System.String" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                  <parameter name="contentEncoding" position="2" attrib="0" type="System.Text.Encoding" />
                  <parameter name="mediaType" position="3" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AttachmentBase" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.IO.Stream)" attrib="6276">
                <parameters>
                  <parameter name="contentStream" position="0" attrib="0" type="System.IO.Stream" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6276">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.Net.Mime.ContentType)" attrib="6276">
                <parameters>
                  <parameter name="contentStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="contentType" position="1" attrib="0" type="System.Net.Mime.ContentType" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.String)" attrib="6276">
                <parameters>
                  <parameter name="contentStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="mediaType" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Net.Mime.ContentType)" attrib="6276">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="contentType" position="1" attrib="0" type="System.Net.Mime.ContentType" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6276">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="mediaType" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ContentId" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ContentId()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ContentId(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ContentStream" attrib="0" ptype="System.IO.Stream">
                <methods>
                  <method name="get_ContentStream()" attrib="2182" returntype="System.IO.Stream">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContentType" attrib="0" ptype="System.Net.Mime.ContentType">
                <methods>
                  <method name="get_ContentType()" attrib="2182" returntype="System.Net.Mime.ContentType">
                    <parameters />
                  </method>
                  <method name="set_ContentType(System.Net.Mime.ContentType)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Mime.ContentType" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TransferEncoding" attrib="0" ptype="System.Net.Mime.TransferEncoding">
                <methods>
                  <method name="get_TransferEncoding()" attrib="2182" returntype="System.Net.Mime.TransferEncoding">
                    <parameters />
                  </method>
                  <method name="set_TransferEncoding(System.Net.Mime.TransferEncoding)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Mime.TransferEncoding" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AttachmentCollection" type="class" base="System.Collections.ObjectModel.Collection`1[System.Net.Mail.Attachment]" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IList`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyList`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
              <interface name="System.IDisposable" />
            </interfaces>
            <methods>
              <method name="ClearItems()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="InsertItem(System.Int32, System.Net.Mail.Attachment)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="System.Net.Mail.Attachment" />
                </parameters>
              </method>
              <method name="RemoveItem(System.Int32)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SetItem(System.Int32, System.Net.Mail.Attachment)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="System.Net.Mail.Attachment" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DeliveryNotificationOptions" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Delay" attrib="32854" fieldtype="System.Net.Mail.DeliveryNotificationOptions" value="4" />
              <field name="Never" attrib="32854" fieldtype="System.Net.Mail.DeliveryNotificationOptions" value="134217728" />
              <field name="None" attrib="32854" fieldtype="System.Net.Mail.DeliveryNotificationOptions" value="0" />
              <field name="OnFailure" attrib="32854" fieldtype="System.Net.Mail.DeliveryNotificationOptions" value="2" />
              <field name="OnSuccess" attrib="32854" fieldtype="System.Net.Mail.DeliveryNotificationOptions" value="1" />
            </fields>
          </class>
          <class name="LinkedResource" type="class" base="System.Net.Mail.AttachmentBase" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.IO.Stream)" attrib="6278">
                <parameters>
                  <parameter name="contentStream" position="0" attrib="0" type="System.IO.Stream" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.Net.Mime.ContentType)" attrib="6278">
                <parameters>
                  <parameter name="contentStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="contentType" position="1" attrib="0" type="System.Net.Mime.ContentType" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.String)" attrib="6278">
                <parameters>
                  <parameter name="contentStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="mediaType" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Net.Mime.ContentType)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="contentType" position="1" attrib="0" type="System.Net.Mime.ContentType" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="mediaType" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ContentLink" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_ContentLink()" attrib="2182" returntype="System.Uri">
                    <parameters />
                  </method>
                  <method name="set_ContentLink(System.Uri)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Uri" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateLinkedResourceFromString(System.String)" attrib="150" static="true" returntype="System.Net.Mail.LinkedResource">
                <parameters>
                  <parameter name="content" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CreateLinkedResourceFromString(System.String, System.Net.Mime.ContentType)" attrib="150" static="true" returntype="System.Net.Mail.LinkedResource">
                <parameters>
                  <parameter name="content" position="0" attrib="0" type="System.String" />
                  <parameter name="contentType" position="1" attrib="0" type="System.Net.Mime.ContentType" />
                </parameters>
              </method>
              <method name="CreateLinkedResourceFromString(System.String, System.Text.Encoding, System.String)" attrib="150" static="true" returntype="System.Net.Mail.LinkedResource">
                <parameters>
                  <parameter name="content" position="0" attrib="0" type="System.String" />
                  <parameter name="contentEncoding" position="1" attrib="0" type="System.Text.Encoding" />
                  <parameter name="mediaType" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="LinkedResourceCollection" type="class" base="System.Collections.ObjectModel.Collection`1[System.Net.Mail.LinkedResource]" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IList`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyList`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
              <interface name="System.IDisposable" />
            </interfaces>
            <methods>
              <method name="ClearItems()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="InsertItem(System.Int32, System.Net.Mail.LinkedResource)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="System.Net.Mail.LinkedResource" />
                </parameters>
              </method>
              <method name="RemoveItem(System.Int32)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SetItem(System.Int32, System.Net.Mail.LinkedResource)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="System.Net.Mail.LinkedResource" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MailAddress" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="displayName" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.Text.Encoding)" attrib="6278">
                <attributes />
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                  <parameter name="displayName" position="1" attrib="0" type="System.String" />
                  <parameter name="displayNameEncoding" position="2" attrib="0" type="System.Text.Encoding" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Address" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Address()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DisplayName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DisplayName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Host" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Host()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="User" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_User()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="MailAddressCollection" type="class" base="System.Collections.ObjectModel.Collection`1[System.Net.Mail.MailAddress]" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IList`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyList`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Add(System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="addresses" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="InsertItem(System.Int32, System.Net.Mail.MailAddress)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="System.Net.Mail.MailAddress" />
                </parameters>
              </method>
              <method name="SetItem(System.Int32, System.Net.Mail.MailAddress)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="System.Net.Mail.MailAddress" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="MailMessage" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Net.Mail.MailAddress, System.Net.Mail.MailAddress)" attrib="6278">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.Net.Mail.MailAddress" />
                  <parameter name="to" position="1" attrib="0" type="System.Net.Mail.MailAddress" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.String" />
                  <parameter name="to" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.String" />
                  <parameter name="to" position="1" attrib="0" type="System.String" />
                  <parameter name="subject" position="2" attrib="0" type="System.String" />
                  <parameter name="body" position="3" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AlternateViews" attrib="0" ptype="System.Net.Mail.AlternateViewCollection">
                <methods>
                  <method name="get_AlternateViews()" attrib="2182" returntype="System.Net.Mail.AlternateViewCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Attachments" attrib="0" ptype="System.Net.Mail.AttachmentCollection">
                <methods>
                  <method name="get_Attachments()" attrib="2182" returntype="System.Net.Mail.AttachmentCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Bcc" attrib="0" ptype="System.Net.Mail.MailAddressCollection">
                <methods>
                  <method name="get_Bcc()" attrib="2182" returntype="System.Net.Mail.MailAddressCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Body" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Body()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Body(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="BodyEncoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_BodyEncoding()" attrib="2182" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                  <method name="set_BodyEncoding(System.Text.Encoding)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Text.Encoding" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="BodyTransferEncoding" attrib="0" ptype="System.Net.Mime.TransferEncoding">
                <methods>
                  <method name="get_BodyTransferEncoding()" attrib="2182" returntype="System.Net.Mime.TransferEncoding">
                    <parameters />
                  </method>
                  <method name="set_BodyTransferEncoding(System.Net.Mime.TransferEncoding)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Mime.TransferEncoding" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CC" attrib="0" ptype="System.Net.Mail.MailAddressCollection">
                <methods>
                  <method name="get_CC()" attrib="2182" returntype="System.Net.Mail.MailAddressCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DeliveryNotificationOptions" attrib="0" ptype="System.Net.Mail.DeliveryNotificationOptions">
                <methods>
                  <method name="get_DeliveryNotificationOptions()" attrib="2182" returntype="System.Net.Mail.DeliveryNotificationOptions">
                    <parameters />
                  </method>
                  <method name="set_DeliveryNotificationOptions(System.Net.Mail.DeliveryNotificationOptions)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Mail.DeliveryNotificationOptions" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="From" attrib="0" ptype="System.Net.Mail.MailAddress">
                <methods>
                  <method name="get_From()" attrib="2182" returntype="System.Net.Mail.MailAddress">
                    <parameters />
                  </method>
                  <method name="set_From(System.Net.Mail.MailAddress)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Mail.MailAddress" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Collections.Specialized.NameValueCollection">
                <methods>
                  <method name="get_Headers()" attrib="2182" returntype="System.Collections.Specialized.NameValueCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HeadersEncoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_HeadersEncoding()" attrib="2182" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                  <method name="set_HeadersEncoding(System.Text.Encoding)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Text.Encoding" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsBodyHtml" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsBodyHtml()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IsBodyHtml(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Priority" attrib="0" ptype="System.Net.Mail.MailPriority">
                <methods>
                  <method name="get_Priority()" attrib="2182" returntype="System.Net.Mail.MailPriority">
                    <parameters />
                  </method>
                  <method name="set_Priority(System.Net.Mail.MailPriority)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Mail.MailPriority" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReplyTo" attrib="0" ptype="System.Net.Mail.MailAddress">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use ReplyToList instead" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_ReplyTo()" attrib="2182" returntype="System.Net.Mail.MailAddress">
                    <parameters />
                  </method>
                  <method name="set_ReplyTo(System.Net.Mail.MailAddress)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Mail.MailAddress" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReplyToList" attrib="0" ptype="System.Net.Mail.MailAddressCollection">
                <methods>
                  <method name="get_ReplyToList()" attrib="2182" returntype="System.Net.Mail.MailAddressCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Sender" attrib="0" ptype="System.Net.Mail.MailAddress">
                <methods>
                  <method name="get_Sender()" attrib="2182" returntype="System.Net.Mail.MailAddress">
                    <parameters />
                  </method>
                  <method name="set_Sender(System.Net.Mail.MailAddress)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Mail.MailAddress" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Subject" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Subject()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Subject(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SubjectEncoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_SubjectEncoding()" attrib="2182" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                  <method name="set_SubjectEncoding(System.Text.Encoding)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Text.Encoding" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="To" attrib="0" ptype="System.Net.Mail.MailAddressCollection">
                <methods>
                  <method name="get_To()" attrib="2182" returntype="System.Net.Mail.MailAddressCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MailPriority" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="High" attrib="32854" fieldtype="System.Net.Mail.MailPriority" value="2" />
              <field name="Low" attrib="32854" fieldtype="System.Net.Mail.MailPriority" value="1" />
              <field name="Normal" attrib="32854" fieldtype="System.Net.Mail.MailPriority" value="0" />
            </fields>
          </class>
          <class name="SendCompletedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.ComponentModel.AsyncCompletedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.AsyncCompletedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.ComponentModel.AsyncCompletedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.ComponentModel.AsyncCompletedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SmtpAccess" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Connect" attrib="32854" fieldtype="System.Net.Mail.SmtpAccess" value="1" />
              <field name="ConnectToUnrestrictedPort" attrib="32854" fieldtype="System.Net.Mail.SmtpAccess" value="2" />
              <field name="None" attrib="32854" fieldtype="System.Net.Mail.SmtpAccess" value="0" />
            </fields>
          </class>
          <class name="SmtpClient" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ObsoleteAttribute">
                <properties>
                  <property name="Message" value="SmtpClient and its network of types are poorly designed, we strongly recommend you use https://github.com/jstedfast/MailKit and https://github.com/jstedfast/MimeKit instead" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ClientCertificates" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509CertificateCollection">
                <attributes />
                <methods>
                  <method name="get_ClientCertificates()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509CertificateCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Credentials" attrib="0" ptype="System.Net.ICredentialsByHost">
                <methods>
                  <method name="get_Credentials()" attrib="2182" returntype="System.Net.ICredentialsByHost">
                    <parameters />
                  </method>
                  <method name="set_Credentials(System.Net.ICredentialsByHost)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.ICredentialsByHost" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="DeliveryFormat" attrib="0" ptype="System.Net.Mail.SmtpDeliveryFormat">
                <methods>
                  <method name="get_DeliveryFormat()" attrib="2182" returntype="System.Net.Mail.SmtpDeliveryFormat">
                    <parameters />
                  </method>
                  <method name="set_DeliveryFormat(System.Net.Mail.SmtpDeliveryFormat)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Mail.SmtpDeliveryFormat" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="DeliveryMethod" attrib="0" ptype="System.Net.Mail.SmtpDeliveryMethod">
                <methods>
                  <method name="get_DeliveryMethod()" attrib="2182" returntype="System.Net.Mail.SmtpDeliveryMethod">
                    <parameters />
                  </method>
                  <method name="set_DeliveryMethod(System.Net.Mail.SmtpDeliveryMethod)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Mail.SmtpDeliveryMethod" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="EnableSsl" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_EnableSsl()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_EnableSsl(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Host" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Host()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Host(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PickupDirectoryLocation" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_PickupDirectoryLocation()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_PickupDirectoryLocation(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Port" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Port()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Port(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ServicePoint" attrib="0" ptype="System.Net.ServicePoint">
                <attributes />
                <methods>
                  <method name="get_ServicePoint()" attrib="2182" returntype="System.Net.ServicePoint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TargetName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TargetName()" attrib="2182" returntype="System.String">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_TargetName(System.String)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Timeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Timeout()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Timeout(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UseDefaultCredentials" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UseDefaultCredentials()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseDefaultCredentials(System.Boolean)" attrib="2182" returntype="System.Void">
                    <attributes />
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="SendCompleted" attrib="0" eventtype="System.Net.Mail.SendCompletedEventHandler" />
            </events>
            <methods>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.ComponentModel.AsyncCompletedEventArgs" />
                </parameters>
              </method>
              <method name="Send(System.Net.Mail.MailMessage)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.Net.Mail.MailMessage" />
                </parameters>
              </method>
              <method name="Send(System.String, System.String, System.String, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.String" />
                  <parameter name="recipients" position="1" attrib="0" type="System.String" />
                  <parameter name="subject" position="2" attrib="0" type="System.String" />
                  <parameter name="body" position="3" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SendAsync(System.Net.Mail.MailMessage, System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.Net.Mail.MailMessage" />
                  <parameter name="userToken" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SendAsync(System.String, System.String, System.String, System.String, System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.String" />
                  <parameter name="recipients" position="1" attrib="0" type="System.String" />
                  <parameter name="subject" position="2" attrib="0" type="System.String" />
                  <parameter name="body" position="3" attrib="0" type="System.String" />
                  <parameter name="userToken" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SendAsyncCancel()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="SendMailAsync(System.Net.Mail.MailMessage)" attrib="134" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.Net.Mail.MailMessage" />
                </parameters>
              </method>
              <method name="SendMailAsync(System.String, System.String, System.String, System.String)" attrib="134" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.String" />
                  <parameter name="recipients" position="1" attrib="0" type="System.String" />
                  <parameter name="subject" position="2" attrib="0" type="System.String" />
                  <parameter name="body" position="3" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SmtpDeliveryFormat" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="International" attrib="32854" fieldtype="System.Net.Mail.SmtpDeliveryFormat" value="1" />
              <field name="SevenBit" attrib="32854" fieldtype="System.Net.Mail.SmtpDeliveryFormat" value="0" />
            </fields>
          </class>
          <class name="SmtpDeliveryMethod" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Network" attrib="32854" fieldtype="System.Net.Mail.SmtpDeliveryMethod" value="0" />
              <field name="PickupDirectoryFromIis" attrib="32854" fieldtype="System.Net.Mail.SmtpDeliveryMethod" value="2" />
              <field name="SpecifiedPickupDirectory" attrib="32854" fieldtype="System.Net.Mail.SmtpDeliveryMethod" value="1" />
            </fields>
          </class>
          <class name="SmtpException" type="class" base="System.Exception" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Net.Mail.SmtpStatusCode)" attrib="6278">
                <parameters>
                  <parameter name="statusCode" position="0" attrib="0" type="System.Net.Mail.SmtpStatusCode" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Mail.SmtpStatusCode, System.String)" attrib="6278">
                <parameters>
                  <parameter name="statusCode" position="0" attrib="0" type="System.Net.Mail.SmtpStatusCode" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="StatusCode" attrib="0" ptype="System.Net.Mail.SmtpStatusCode">
                <methods>
                  <method name="get_StatusCode()" attrib="2182" returntype="System.Net.Mail.SmtpStatusCode">
                    <parameters />
                  </method>
                  <method name="set_StatusCode(System.Net.Mail.SmtpStatusCode)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Mail.SmtpStatusCode" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SmtpFailedRecipientException" type="class" base="System.Net.Mail.SmtpException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Mail.SmtpStatusCode, System.String)" attrib="6278">
                <parameters>
                  <parameter name="statusCode" position="0" attrib="0" type="System.Net.Mail.SmtpStatusCode" />
                  <parameter name="failedRecipient" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Mail.SmtpStatusCode, System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="statusCode" position="0" attrib="0" type="System.Net.Mail.SmtpStatusCode" />
                  <parameter name="failedRecipient" position="1" attrib="0" type="System.String" />
                  <parameter name="serverResponse" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="failedRecipient" position="1" attrib="0" type="System.String" />
                  <parameter name="innerException" position="2" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="FailedRecipient" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FailedRecipient()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SmtpFailedRecipientsException" type="class" base="System.Net.Mail.SmtpFailedRecipientException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Net.Mail.SmtpFailedRecipientException[])" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerExceptions" position="1" attrib="0" type="System.Net.Mail.SmtpFailedRecipientException[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="InnerExceptions" attrib="0" ptype="System.Net.Mail.SmtpFailedRecipientException[]">
                <methods>
                  <method name="get_InnerExceptions()" attrib="2182" returntype="System.Net.Mail.SmtpFailedRecipientException[]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SmtpStatusCode" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="BadCommandSequence" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="503" />
              <field name="CannotVerifyUserWillAttemptDelivery" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="252" />
              <field name="ClientNotPermitted" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="454" />
              <field name="CommandNotImplemented" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="502" />
              <field name="CommandParameterNotImplemented" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="504" />
              <field name="CommandUnrecognized" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="500" />
              <field name="ExceededStorageAllocation" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="552" />
              <field name="GeneralFailure" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="-1" />
              <field name="HelpMessage" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="214" />
              <field name="InsufficientStorage" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="452" />
              <field name="LocalErrorInProcessing" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="451" />
              <field name="MailboxBusy" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="450" />
              <field name="MailboxNameNotAllowed" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="553" />
              <field name="MailboxUnavailable" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="550" />
              <field name="MustIssueStartTlsFirst" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="530" />
              <field name="Ok" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="250" />
              <field name="ServiceClosingTransmissionChannel" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="221" />
              <field name="ServiceNotAvailable" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="421" />
              <field name="ServiceReady" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="220" />
              <field name="StartMailInput" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="354" />
              <field name="SyntaxError" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="501" />
              <field name="SystemStatus" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="211" />
              <field name="TransactionFailed" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="554" />
              <field name="UserNotLocalTryAlternatePath" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="551" />
              <field name="UserNotLocalWillForward" attrib="32854" fieldtype="System.Net.Mail.SmtpStatusCode" value="251" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Net.Mime">
        <classes>
          <class name="ContentDisposition" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="disposition" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CreationDate" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_CreationDate()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                  <method name="set_CreationDate(System.DateTime)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.DateTime" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="DispositionType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DispositionType()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_DispositionType(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="FileName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FileName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_FileName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Inline" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Inline()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Inline(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ModificationDate" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_ModificationDate()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                  <method name="set_ModificationDate(System.DateTime)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.DateTime" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Parameters" attrib="0" ptype="System.Collections.Specialized.StringDictionary">
                <methods>
                  <method name="get_Parameters()" attrib="2182" returntype="System.Collections.Specialized.StringDictionary">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReadDate" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_ReadDate()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                  <method name="set_ReadDate(System.DateTime)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.DateTime" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Size" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Size()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_Size(System.Int64)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="rparam" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ContentType" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="contentType" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Boundary" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Boundary()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Boundary(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CharSet" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_CharSet()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_CharSet(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MediaType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_MediaType()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_MediaType(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Name(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Parameters" attrib="0" ptype="System.Collections.Specialized.StringDictionary">
                <methods>
                  <method name="get_Parameters()" attrib="2182" returntype="System.Collections.Specialized.StringDictionary">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="rparam" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DispositionTypeNames" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="Attachment" attrib="32854" fieldtype="System.String" value="attachment" />
              <field name="Inline" attrib="32854" fieldtype="System.String" value="inline" />
            </fields>
          </class>
          <class name="MediaTypeNames" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <classes>
              <class name="Application" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <fields>
                  <field name="Octet" attrib="32854" fieldtype="System.String" value="application/octet-stream" />
                  <field name="Pdf" attrib="32854" fieldtype="System.String" value="application/pdf" />
                  <field name="Rtf" attrib="32854" fieldtype="System.String" value="application/rtf" />
                  <field name="Soap" attrib="32854" fieldtype="System.String" value="application/soap+xml" />
                  <field name="Zip" attrib="32854" fieldtype="System.String" value="application/zip" />
                </fields>
              </class>
              <class name="Image" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <fields>
                  <field name="Gif" attrib="32854" fieldtype="System.String" value="image/gif" />
                  <field name="Jpeg" attrib="32854" fieldtype="System.String" value="image/jpeg" />
                  <field name="Tiff" attrib="32854" fieldtype="System.String" value="image/tiff" />
                </fields>
              </class>
              <class name="Text" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <fields>
                  <field name="Html" attrib="32854" fieldtype="System.String" value="text/html" />
                  <field name="Plain" attrib="32854" fieldtype="System.String" value="text/plain" />
                  <field name="RichText" attrib="32854" fieldtype="System.String" value="text/richtext" />
                  <field name="Xml" attrib="32854" fieldtype="System.String" value="text/xml" />
                </fields>
              </class>
            </classes>
          </class>
          <class name="TransferEncoding" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Base64" attrib="32854" fieldtype="System.Net.Mime.TransferEncoding" value="1" />
              <field name="EightBit" attrib="32854" fieldtype="System.Net.Mime.TransferEncoding" value="3" />
              <field name="QuotedPrintable" attrib="32854" fieldtype="System.Net.Mime.TransferEncoding" value="0" />
              <field name="SevenBit" attrib="32854" fieldtype="System.Net.Mime.TransferEncoding" value="2" />
              <field name="Unknown" attrib="32854" fieldtype="System.Net.Mime.TransferEncoding" value="-1" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Net.NetworkInformation">
        <classes>
          <class name="DuplicateAddressDetectionState" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Deprecated" attrib="32854" fieldtype="System.Net.NetworkInformation.DuplicateAddressDetectionState" value="3" />
              <field name="Duplicate" attrib="32854" fieldtype="System.Net.NetworkInformation.DuplicateAddressDetectionState" value="2" />
              <field name="Invalid" attrib="32854" fieldtype="System.Net.NetworkInformation.DuplicateAddressDetectionState" value="0" />
              <field name="Preferred" attrib="32854" fieldtype="System.Net.NetworkInformation.DuplicateAddressDetectionState" value="4" />
              <field name="Tentative" attrib="32854" fieldtype="System.Net.NetworkInformation.DuplicateAddressDetectionState" value="1" />
            </fields>
          </class>
          <class name="GatewayIPAddressInformation" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Address" attrib="0" ptype="System.Net.IPAddress">
                <methods>
                  <method name="get_Address()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.IPAddress">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="GatewayIPAddressInformationCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[System.Net.NetworkInformation.GatewayIPAddressInformation]" />
              <interface name="System.Collections.Generic.IEnumerable`1[System.Net.NetworkInformation.GatewayIPAddressInformation]" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6277">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Net.NetworkInformation.GatewayIPAddressInformation" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2502" virtual="true" returntype="System.Net.NetworkInformation.GatewayIPAddressInformation">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Net.NetworkInformation.GatewayIPAddressInformation)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.NetworkInformation.GatewayIPAddressInformation" />
                </parameters>
              </method>
              <method name="Clear()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.Net.NetworkInformation.GatewayIPAddressInformation)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.NetworkInformation.GatewayIPAddressInformation" />
                </parameters>
              </method>
              <method name="CopyTo(System.Net.NetworkInformation.GatewayIPAddressInformation[], System.Int32)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Net.NetworkInformation.GatewayIPAddressInformation[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="454" virtual="true" returntype="System.Collections.Generic.IEnumerator`1[System.Net.NetworkInformation.GatewayIPAddressInformation]">
                <parameters />
              </method>
              <method name="Remove(System.Net.NetworkInformation.GatewayIPAddressInformation)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.NetworkInformation.GatewayIPAddressInformation" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IPAddressCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[System.Net.IPAddress]" />
              <interface name="System.Collections.Generic.IEnumerable`1[System.Net.IPAddress]" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6277">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Net.IPAddress" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2502" virtual="true" returntype="System.Net.IPAddress">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Net.IPAddress)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
              <method name="Clear()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.Net.IPAddress)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
              <method name="CopyTo(System.Net.IPAddress[], System.Int32)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Net.IPAddress[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="454" virtual="true" returntype="System.Collections.Generic.IEnumerator`1[System.Net.IPAddress]">
                <parameters />
              </method>
              <method name="Remove(System.Net.IPAddress)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IPAddressInformation" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Address" attrib="0" ptype="System.Net.IPAddress">
                <methods>
                  <method name="get_Address()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.IPAddress">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsDnsEligible" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsDnsEligible()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsTransient" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsTransient()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IPAddressInformationCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[System.Net.NetworkInformation.IPAddressInformation]" />
              <interface name="System.Collections.Generic.IEnumerable`1[System.Net.NetworkInformation.IPAddressInformation]" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Net.NetworkInformation.IPAddressInformation" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2502" virtual="true" returntype="System.Net.NetworkInformation.IPAddressInformation">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Net.NetworkInformation.IPAddressInformation)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.NetworkInformation.IPAddressInformation" />
                </parameters>
              </method>
              <method name="Clear()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.Net.NetworkInformation.IPAddressInformation)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.NetworkInformation.IPAddressInformation" />
                </parameters>
              </method>
              <method name="CopyTo(System.Net.NetworkInformation.IPAddressInformation[], System.Int32)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Net.NetworkInformation.IPAddressInformation[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="454" virtual="true" returntype="System.Collections.Generic.IEnumerator`1[System.Net.NetworkInformation.IPAddressInformation]">
                <parameters />
              </method>
              <method name="Remove(System.Net.NetworkInformation.IPAddressInformation)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.NetworkInformation.IPAddressInformation" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IPGlobalProperties" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="DhcpScopeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DhcpScopeName()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DomainName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DomainName()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HostName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_HostName()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWinsProxy" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWinsProxy()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Net.NetworkInformation.NetBiosNodeType">
                <methods>
                  <method name="get_NodeType()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.NetBiosNodeType">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="BeginGetUnicastAddresses(System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndGetUnicastAddresses(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Net.NetworkInformation.UnicastIPAddressInformationCollection">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="GetActiveTcpConnections()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.TcpConnectionInformation[]">
                <parameters />
              </method>
              <method name="GetActiveTcpListeners()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.IPEndPoint[]">
                <parameters />
              </method>
              <method name="GetActiveUdpListeners()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.IPEndPoint[]">
                <parameters />
              </method>
              <method name="GetIPGlobalProperties()" attrib="150" static="true" returntype="System.Net.NetworkInformation.IPGlobalProperties">
                <parameters />
              </method>
              <method name="GetIPv4GlobalStatistics()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.IPGlobalStatistics">
                <parameters />
              </method>
              <method name="GetIPv6GlobalStatistics()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.IPGlobalStatistics">
                <parameters />
              </method>
              <method name="GetIcmpV4Statistics()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.IcmpV4Statistics">
                <parameters />
              </method>
              <method name="GetIcmpV6Statistics()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.IcmpV6Statistics">
                <parameters />
              </method>
              <method name="GetTcpIPv4Statistics()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.TcpStatistics">
                <parameters />
              </method>
              <method name="GetTcpIPv6Statistics()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.TcpStatistics">
                <parameters />
              </method>
              <method name="GetUdpIPv4Statistics()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.UdpStatistics">
                <parameters />
              </method>
              <method name="GetUdpIPv6Statistics()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.UdpStatistics">
                <parameters />
              </method>
              <method name="GetUnicastAddresses()" attrib="454" virtual="true" returntype="System.Net.NetworkInformation.UnicastIPAddressInformationCollection">
                <parameters />
              </method>
              <method name="GetUnicastAddressesAsync()" attrib="16838" virtual="true" returntype="System.Threading.Tasks.Task`1[System.Net.NetworkInformation.UnicastIPAddressInformationCollection]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="IPGlobalStatistics" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="DefaultTtl" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_DefaultTtl()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ForwardingEnabled" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_ForwardingEnabled()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NumberOfIPAddresses" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_NumberOfIPAddresses()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NumberOfInterfaces" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_NumberOfInterfaces()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NumberOfRoutes" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_NumberOfRoutes()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OutputPacketRequests" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_OutputPacketRequests()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OutputPacketRoutingDiscards" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_OutputPacketRoutingDiscards()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OutputPacketsDiscarded" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_OutputPacketsDiscarded()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OutputPacketsWithNoRoute" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_OutputPacketsWithNoRoute()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PacketFragmentFailures" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_PacketFragmentFailures()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PacketReassembliesRequired" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_PacketReassembliesRequired()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PacketReassemblyFailures" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_PacketReassemblyFailures()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PacketReassemblyTimeout" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_PacketReassemblyTimeout()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PacketsFragmented" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_PacketsFragmented()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PacketsReassembled" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_PacketsReassembled()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReceivedPackets" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ReceivedPackets()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReceivedPacketsDelivered" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ReceivedPacketsDelivered()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReceivedPacketsDiscarded" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ReceivedPacketsDiscarded()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReceivedPacketsForwarded" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ReceivedPacketsForwarded()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReceivedPacketsWithAddressErrors" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ReceivedPacketsWithAddressErrors()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReceivedPacketsWithHeadersErrors" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ReceivedPacketsWithHeadersErrors()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReceivedPacketsWithUnknownProtocol" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ReceivedPacketsWithUnknownProtocol()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IPInterfaceProperties" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="AnycastAddresses" attrib="0" ptype="System.Net.NetworkInformation.IPAddressInformationCollection">
                <methods>
                  <method name="get_AnycastAddresses()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.IPAddressInformationCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DhcpServerAddresses" attrib="0" ptype="System.Net.NetworkInformation.IPAddressCollection">
                <methods>
                  <method name="get_DhcpServerAddresses()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.IPAddressCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DnsAddresses" attrib="0" ptype="System.Net.NetworkInformation.IPAddressCollection">
                <methods>
                  <method name="get_DnsAddresses()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.IPAddressCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DnsSuffix" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DnsSuffix()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="GatewayAddresses" attrib="0" ptype="System.Net.NetworkInformation.GatewayIPAddressInformationCollection">
                <methods>
                  <method name="get_GatewayAddresses()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.GatewayIPAddressInformationCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsDnsEnabled" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsDnsEnabled()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsDynamicDnsEnabled" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsDynamicDnsEnabled()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MulticastAddresses" attrib="0" ptype="System.Net.NetworkInformation.MulticastIPAddressInformationCollection">
                <methods>
                  <method name="get_MulticastAddresses()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.MulticastIPAddressInformationCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UnicastAddresses" attrib="0" ptype="System.Net.NetworkInformation.UnicastIPAddressInformationCollection">
                <methods>
                  <method name="get_UnicastAddresses()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.UnicastIPAddressInformationCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WinsServersAddresses" attrib="0" ptype="System.Net.NetworkInformation.IPAddressCollection">
                <methods>
                  <method name="get_WinsServersAddresses()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.IPAddressCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetIPv4Properties()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.IPv4InterfaceProperties">
                <parameters />
              </method>
              <method name="GetIPv6Properties()" attrib="1478" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.IPv6InterfaceProperties">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="IPInterfaceStatistics" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="BytesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_BytesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="BytesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_BytesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IncomingPacketsDiscarded" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_IncomingPacketsDiscarded()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IncomingPacketsWithErrors" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_IncomingPacketsWithErrors()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IncomingUnknownProtocolPackets" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_IncomingUnknownProtocolPackets()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NonUnicastPacketsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_NonUnicastPacketsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NonUnicastPacketsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_NonUnicastPacketsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OutgoingPacketsDiscarded" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_OutgoingPacketsDiscarded()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OutgoingPacketsWithErrors" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_OutgoingPacketsWithErrors()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OutputQueueLength" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_OutputQueueLength()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UnicastPacketsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_UnicastPacketsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UnicastPacketsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_UnicastPacketsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IPStatus" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="BadDestination" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11018" />
              <field name="BadHeader" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11042" />
              <field name="BadOption" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11007" />
              <field name="BadRoute" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11012" />
              <field name="DestinationHostUnreachable" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11003" />
              <field name="DestinationNetworkUnreachable" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11002" />
              <field name="DestinationPortUnreachable" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11005" />
              <field name="DestinationProhibited" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11004" />
              <field name="DestinationProtocolUnreachable" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11004" />
              <field name="DestinationScopeMismatch" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11045" />
              <field name="DestinationUnreachable" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11040" />
              <field name="HardwareError" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11008" />
              <field name="IcmpError" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11044" />
              <field name="NoResources" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11006" />
              <field name="PacketTooBig" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11009" />
              <field name="ParameterProblem" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11015" />
              <field name="SourceQuench" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11016" />
              <field name="Success" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="0" />
              <field name="TimeExceeded" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11041" />
              <field name="TimedOut" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11010" />
              <field name="TtlExpired" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11013" />
              <field name="TtlReassemblyTimeExceeded" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11014" />
              <field name="Unknown" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="-1" />
              <field name="UnrecognizedNextHeader" attrib="32854" fieldtype="System.Net.NetworkInformation.IPStatus" value="11043" />
            </fields>
          </class>
          <class name="IPv4InterfaceProperties" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Index" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Index()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsAutomaticPrivateAddressingActive" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsAutomaticPrivateAddressingActive()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsAutomaticPrivateAddressingEnabled" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsAutomaticPrivateAddressingEnabled()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsDhcpEnabled" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsDhcpEnabled()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsForwardingEnabled" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsForwardingEnabled()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Mtu" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Mtu()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UsesWins" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UsesWins()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IPv4InterfaceStatistics" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="BytesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_BytesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="BytesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_BytesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IncomingPacketsDiscarded" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_IncomingPacketsDiscarded()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IncomingPacketsWithErrors" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_IncomingPacketsWithErrors()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IncomingUnknownProtocolPackets" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_IncomingUnknownProtocolPackets()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NonUnicastPacketsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_NonUnicastPacketsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NonUnicastPacketsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_NonUnicastPacketsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OutgoingPacketsDiscarded" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_OutgoingPacketsDiscarded()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OutgoingPacketsWithErrors" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_OutgoingPacketsWithErrors()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OutputQueueLength" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_OutputQueueLength()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UnicastPacketsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_UnicastPacketsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UnicastPacketsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_UnicastPacketsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IPv6InterfaceProperties" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Index" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Index()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Mtu" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Mtu()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetScopeId(System.Net.NetworkInformation.ScopeLevel)" attrib="454" virtual="true" returntype="System.Int64">
                <parameters>
                  <parameter name="scopeLevel" position="0" attrib="0" type="System.Net.NetworkInformation.ScopeLevel" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IcmpV4Statistics" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="AddressMaskRepliesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_AddressMaskRepliesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AddressMaskRepliesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_AddressMaskRepliesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AddressMaskRequestsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_AddressMaskRequestsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AddressMaskRequestsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_AddressMaskRequestsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DestinationUnreachableMessagesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_DestinationUnreachableMessagesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DestinationUnreachableMessagesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_DestinationUnreachableMessagesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EchoRepliesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_EchoRepliesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EchoRepliesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_EchoRepliesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EchoRequestsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_EchoRequestsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EchoRequestsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_EchoRequestsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ErrorsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ErrorsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ErrorsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ErrorsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MessagesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MessagesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MessagesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MessagesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ParameterProblemsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ParameterProblemsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ParameterProblemsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ParameterProblemsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RedirectsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_RedirectsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RedirectsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_RedirectsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SourceQuenchesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_SourceQuenchesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SourceQuenchesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_SourceQuenchesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TimeExceededMessagesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_TimeExceededMessagesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TimeExceededMessagesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_TimeExceededMessagesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TimestampRepliesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_TimestampRepliesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TimestampRepliesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_TimestampRepliesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TimestampRequestsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_TimestampRequestsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TimestampRequestsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_TimestampRequestsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IcmpV6Statistics" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="DestinationUnreachableMessagesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_DestinationUnreachableMessagesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DestinationUnreachableMessagesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_DestinationUnreachableMessagesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EchoRepliesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_EchoRepliesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EchoRepliesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_EchoRepliesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EchoRequestsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_EchoRequestsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EchoRequestsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_EchoRequestsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ErrorsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ErrorsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ErrorsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ErrorsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MembershipQueriesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MembershipQueriesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MembershipQueriesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MembershipQueriesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MembershipReductionsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MembershipReductionsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MembershipReductionsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MembershipReductionsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MembershipReportsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MembershipReportsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MembershipReportsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MembershipReportsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MessagesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MessagesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MessagesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MessagesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NeighborAdvertisementsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_NeighborAdvertisementsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NeighborAdvertisementsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_NeighborAdvertisementsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NeighborSolicitsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_NeighborSolicitsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NeighborSolicitsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_NeighborSolicitsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PacketTooBigMessagesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_PacketTooBigMessagesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PacketTooBigMessagesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_PacketTooBigMessagesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ParameterProblemsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ParameterProblemsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ParameterProblemsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ParameterProblemsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RedirectsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_RedirectsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RedirectsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_RedirectsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RouterAdvertisementsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_RouterAdvertisementsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RouterAdvertisementsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_RouterAdvertisementsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RouterSolicitsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_RouterSolicitsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RouterSolicitsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_RouterSolicitsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TimeExceededMessagesReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_TimeExceededMessagesReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TimeExceededMessagesSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_TimeExceededMessagesSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="MulticastIPAddressInformation" type="class" base="System.Net.NetworkInformation.IPAddressInformation" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="AddressPreferredLifetime" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_AddressPreferredLifetime()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AddressValidLifetime" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_AddressValidLifetime()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DhcpLeaseLifetime" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_DhcpLeaseLifetime()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DuplicateAddressDetectionState" attrib="0" ptype="System.Net.NetworkInformation.DuplicateAddressDetectionState">
                <methods>
                  <method name="get_DuplicateAddressDetectionState()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.DuplicateAddressDetectionState">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PrefixOrigin" attrib="0" ptype="System.Net.NetworkInformation.PrefixOrigin">
                <methods>
                  <method name="get_PrefixOrigin()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.PrefixOrigin">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SuffixOrigin" attrib="0" ptype="System.Net.NetworkInformation.SuffixOrigin">
                <methods>
                  <method name="get_SuffixOrigin()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.SuffixOrigin">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="MulticastIPAddressInformationCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[System.Net.NetworkInformation.MulticastIPAddressInformation]" />
              <interface name="System.Collections.Generic.IEnumerable`1[System.Net.NetworkInformation.MulticastIPAddressInformation]" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6277">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Net.NetworkInformation.MulticastIPAddressInformation" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2502" virtual="true" returntype="System.Net.NetworkInformation.MulticastIPAddressInformation">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Net.NetworkInformation.MulticastIPAddressInformation)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.NetworkInformation.MulticastIPAddressInformation" />
                </parameters>
              </method>
              <method name="Clear()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.Net.NetworkInformation.MulticastIPAddressInformation)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.NetworkInformation.MulticastIPAddressInformation" />
                </parameters>
              </method>
              <method name="CopyTo(System.Net.NetworkInformation.MulticastIPAddressInformation[], System.Int32)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Net.NetworkInformation.MulticastIPAddressInformation[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="454" virtual="true" returntype="System.Collections.Generic.IEnumerator`1[System.Net.NetworkInformation.MulticastIPAddressInformation]">
                <parameters />
              </method>
              <method name="Remove(System.Net.NetworkInformation.MulticastIPAddressInformation)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.NetworkInformation.MulticastIPAddressInformation" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NetBiosNodeType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Broadcast" attrib="32854" fieldtype="System.Net.NetworkInformation.NetBiosNodeType" value="1" />
              <field name="Hybrid" attrib="32854" fieldtype="System.Net.NetworkInformation.NetBiosNodeType" value="8" />
              <field name="Mixed" attrib="32854" fieldtype="System.Net.NetworkInformation.NetBiosNodeType" value="4" />
              <field name="Peer2Peer" attrib="32854" fieldtype="System.Net.NetworkInformation.NetBiosNodeType" value="2" />
              <field name="Unknown" attrib="32854" fieldtype="System.Net.NetworkInformation.NetBiosNodeType" value="0" />
            </fields>
          </class>
          <class name="NetworkAddressChangedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.EventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.EventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.EventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.EventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NetworkAvailabilityChangedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.NetworkInformation.NetworkAvailabilityEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.NetworkInformation.NetworkAvailabilityEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.NetworkInformation.NetworkAvailabilityEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.NetworkInformation.NetworkAvailabilityEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NetworkAvailabilityEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="IsAvailable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsAvailable()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="NetworkChange" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <events>
              <event name="NetworkAddressChanged" attrib="0" eventtype="System.Net.NetworkInformation.NetworkAddressChangedEventHandler" />
              <event name="NetworkAvailabilityChanged" attrib="0" eventtype="System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler" />
            </events>
          </class>
          <class name="NetworkInformationAccess" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="None" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInformationAccess" value="0" />
              <field name="Ping" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInformationAccess" value="4" />
              <field name="Read" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInformationAccess" value="1" />
            </fields>
          </class>
          <class name="NetworkInformationException" type="class" base="System.ComponentModel.Win32Exception" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="errorCode" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ErrorCode" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ErrorCode()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="NetworkInformationPermission" type="class" base="System.Security.CodeAccessPermission" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Security.IPermission" />
              <interface name="System.Security.ISecurityEncodable" />
              <interface name="System.Security.IStackWalk" />
              <interface name="System.Security.Permissions.IUnrestrictedPermission" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Net.NetworkInformation.NetworkInformationAccess)" attrib="6278">
                <parameters>
                  <parameter name="access" position="0" attrib="0" type="System.Net.NetworkInformation.NetworkInformationAccess" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Permissions.PermissionState)" attrib="6278">
                <parameters>
                  <parameter name="state" position="0" attrib="0" type="System.Security.Permissions.PermissionState" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Access" attrib="0" ptype="System.Net.NetworkInformation.NetworkInformationAccess">
                <methods>
                  <method name="get_Access()" attrib="2182" returntype="System.Net.NetworkInformation.NetworkInformationAccess">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddPermission(System.Net.NetworkInformation.NetworkInformationAccess)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="access" position="0" attrib="0" type="System.Net.NetworkInformation.NetworkInformationAccess" />
                </parameters>
              </method>
              <method name="Copy()" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters />
              </method>
              <method name="FromXml(System.Security.SecurityElement)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="securityElement" position="0" attrib="0" type="System.Security.SecurityElement" />
                </parameters>
              </method>
              <method name="Intersect(System.Security.IPermission)" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Security.IPermission" />
                </parameters>
              </method>
              <method name="IsSubsetOf(System.Security.IPermission)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Security.IPermission" />
                </parameters>
              </method>
              <method name="IsUnrestricted()" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="ToXml()" attrib="198" virtual="true" is-override="true" returntype="System.Security.SecurityElement">
                <parameters />
              </method>
              <method name="Union(System.Security.IPermission)" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Security.IPermission" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NetworkInformationPermissionAttribute" type="class" base="System.Security.Permissions.CodeAccessSecurityAttribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method, Constructor, Struct, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Security.Permissions.SecurityAction)" attrib="6278">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Security.Permissions.SecurityAction" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Access" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Access()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Access(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreatePermission()" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="NetworkInterface" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Description" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Description()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IPv6LoopbackInterfaceIndex" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_IPv6LoopbackInterfaceIndex()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Id" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Id()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReceiveOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReceiveOnly()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LoopbackInterfaceIndex" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_LoopbackInterfaceIndex()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NetworkInterfaceType" attrib="0" ptype="System.Net.NetworkInformation.NetworkInterfaceType">
                <methods>
                  <method name="get_NetworkInterfaceType()" attrib="2502" virtual="true" returntype="System.Net.NetworkInformation.NetworkInterfaceType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OperationalStatus" attrib="0" ptype="System.Net.NetworkInformation.OperationalStatus">
                <methods>
                  <method name="get_OperationalStatus()" attrib="2502" virtual="true" returntype="System.Net.NetworkInformation.OperationalStatus">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Speed" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Speed()" attrib="2502" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsMulticast" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SupportsMulticast()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetAllNetworkInterfaces()" attrib="150" static="true" returntype="System.Net.NetworkInformation.NetworkInterface[]">
                <parameters />
              </method>
              <method name="GetIPProperties()" attrib="454" virtual="true" returntype="System.Net.NetworkInformation.IPInterfaceProperties">
                <parameters />
              </method>
              <method name="GetIPStatistics()" attrib="454" virtual="true" returntype="System.Net.NetworkInformation.IPInterfaceStatistics">
                <parameters />
              </method>
              <method name="GetIPv4Statistics()" attrib="454" virtual="true" returntype="System.Net.NetworkInformation.IPv4InterfaceStatistics">
                <parameters />
              </method>
              <method name="GetIsNetworkAvailable()" attrib="150" static="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="GetPhysicalAddress()" attrib="454" virtual="true" returntype="System.Net.NetworkInformation.PhysicalAddress">
                <parameters />
              </method>
              <method name="Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="networkInterfaceComponent" position="0" attrib="0" type="System.Net.NetworkInformation.NetworkInterfaceComponent" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NetworkInterfaceComponent" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="IPv4" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceComponent" value="0" />
              <field name="IPv6" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceComponent" value="1" />
            </fields>
          </class>
          <class name="NetworkInterfaceType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AsymmetricDsl" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="94" />
              <field name="Atm" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="37" />
              <field name="BasicIsdn" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="20" />
              <field name="Ethernet" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="6" />
              <field name="Ethernet3Megabit" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="26" />
              <field name="FastEthernetFx" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="69" />
              <field name="FastEthernetT" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="62" />
              <field name="Fddi" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="15" />
              <field name="GenericModem" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="48" />
              <field name="GigabitEthernet" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="117" />
              <field name="HighPerformanceSerialBus" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="144" />
              <field name="IPOverAtm" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="114" />
              <field name="Isdn" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="63" />
              <field name="Loopback" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="24" />
              <field name="MultiRateSymmetricDsl" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="143" />
              <field name="Ppp" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="23" />
              <field name="PrimaryIsdn" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="21" />
              <field name="RateAdaptDsl" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="95" />
              <field name="Slip" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="28" />
              <field name="SymmetricDsl" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="96" />
              <field name="TokenRing" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="9" />
              <field name="Tunnel" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="131" />
              <field name="Unknown" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="1" />
              <field name="VeryHighSpeedDsl" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="97" />
              <field name="Wireless80211" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="71" />
              <field name="Wman" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="237" />
              <field name="Wwanpp" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="243" />
              <field name="Wwanpp2" attrib="32854" fieldtype="System.Net.NetworkInformation.NetworkInterfaceType" value="244" />
            </fields>
          </class>
          <class name="OperationalStatus" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Dormant" attrib="32854" fieldtype="System.Net.NetworkInformation.OperationalStatus" value="5" />
              <field name="Down" attrib="32854" fieldtype="System.Net.NetworkInformation.OperationalStatus" value="2" />
              <field name="LowerLayerDown" attrib="32854" fieldtype="System.Net.NetworkInformation.OperationalStatus" value="7" />
              <field name="NotPresent" attrib="32854" fieldtype="System.Net.NetworkInformation.OperationalStatus" value="6" />
              <field name="Testing" attrib="32854" fieldtype="System.Net.NetworkInformation.OperationalStatus" value="3" />
              <field name="Unknown" attrib="32854" fieldtype="System.Net.NetworkInformation.OperationalStatus" value="4" />
              <field name="Up" attrib="32854" fieldtype="System.Net.NetworkInformation.OperationalStatus" value="1" />
            </fields>
          </class>
          <class name="PhysicalAddress" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="None" attrib="54" fieldtype="System.Net.NetworkInformation.PhysicalAddress" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Byte[])" attrib="6278">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="comparand" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetAddressBytes()" attrib="134" returntype="System.Byte[]">
                <parameters />
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="Parse(System.String)" attrib="150" static="true" returntype="System.Net.NetworkInformation.PhysicalAddress">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="Ping" type="class" base="System.ComponentModel.Component" charset="Ansi" layout="Auto">
            <attributes />
            <interfaces>
              <interface name="System.ComponentModel.IComponent" />
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <events>
              <event name="PingCompleted" attrib="0" eventtype="System.Net.NetworkInformation.PingCompletedEventHandler" />
            </events>
            <methods>
              <method name="OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.NetworkInformation.PingCompletedEventArgs" />
                </parameters>
              </method>
              <method name="Send(System.Net.IPAddress)" attrib="134" returntype="System.Net.NetworkInformation.PingReply">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
              <method name="Send(System.String)" attrib="134" returntype="System.Net.NetworkInformation.PingReply">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Send(System.Net.IPAddress, System.Int32)" attrib="134" returntype="System.Net.NetworkInformation.PingReply">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Send(System.String, System.Int32)" attrib="134" returntype="System.Net.NetworkInformation.PingReply">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Send(System.Net.IPAddress, System.Int32, System.Byte[])" attrib="134" returntype="System.Net.NetworkInformation.PingReply">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="Send(System.String, System.Int32, System.Byte[])" attrib="134" returntype="System.Net.NetworkInformation.PingReply">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="Send(System.Net.IPAddress, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions)" attrib="134" returntype="System.Net.NetworkInformation.PingReply">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.Byte[]" />
                  <parameter name="options" position="3" attrib="0" type="System.Net.NetworkInformation.PingOptions" />
                </parameters>
              </method>
              <method name="Send(System.String, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions)" attrib="134" returntype="System.Net.NetworkInformation.PingReply">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.Byte[]" />
                  <parameter name="options" position="3" attrib="0" type="System.Net.NetworkInformation.PingOptions" />
                </parameters>
              </method>
              <method name="SendAsync(System.Net.IPAddress, System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="userToken" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SendAsync(System.String, System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                  <parameter name="userToken" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SendAsync(System.Net.IPAddress, System.Int32, System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="userToken" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SendAsync(System.String, System.Int32, System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="userToken" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SendAsync(System.Net.IPAddress, System.Int32, System.Byte[], System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.Byte[]" />
                  <parameter name="userToken" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SendAsync(System.String, System.Int32, System.Byte[], System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.Byte[]" />
                  <parameter name="userToken" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SendAsync(System.Net.IPAddress, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions, System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.Byte[]" />
                  <parameter name="options" position="3" attrib="0" type="System.Net.NetworkInformation.PingOptions" />
                  <parameter name="userToken" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SendAsync(System.String, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions, System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.Byte[]" />
                  <parameter name="options" position="3" attrib="0" type="System.Net.NetworkInformation.PingOptions" />
                  <parameter name="userToken" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SendAsyncCancel()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="SendPingAsync(System.Net.IPAddress)" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.NetworkInformation.PingReply]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
              <method name="SendPingAsync(System.String)" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.NetworkInformation.PingReply]">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SendPingAsync(System.Net.IPAddress, System.Int32)" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.NetworkInformation.PingReply]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SendPingAsync(System.String, System.Int32)" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.NetworkInformation.PingReply]">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SendPingAsync(System.Net.IPAddress, System.Int32, System.Byte[])" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.NetworkInformation.PingReply]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="SendPingAsync(System.String, System.Int32, System.Byte[])" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.NetworkInformation.PingReply]">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="SendPingAsync(System.Net.IPAddress, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions)" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.NetworkInformation.PingReply]">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.Byte[]" />
                  <parameter name="options" position="3" attrib="0" type="System.Net.NetworkInformation.PingOptions" />
                </parameters>
              </method>
              <method name="SendPingAsync(System.String, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions)" attrib="134" returntype="System.Threading.Tasks.Task`1[System.Net.NetworkInformation.PingReply]">
                <parameters>
                  <parameter name="hostNameOrAddress" position="0" attrib="0" type="System.String" />
                  <parameter name="timeout" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.Byte[]" />
                  <parameter name="options" position="3" attrib="0" type="System.Net.NetworkInformation.PingOptions" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PingCompletedEventArgs" type="class" base="System.ComponentModel.AsyncCompletedEventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="Reply" attrib="0" ptype="System.Net.NetworkInformation.PingReply">
                <methods>
                  <method name="get_Reply()" attrib="2182" returntype="System.Net.NetworkInformation.PingReply">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="PingCompletedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Net.NetworkInformation.PingCompletedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.NetworkInformation.PingCompletedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Net.NetworkInformation.PingCompletedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Net.NetworkInformation.PingCompletedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PingException" type="class" base="System.InvalidOperationException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="PingOptions" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Int32, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="ttl" position="0" attrib="0" type="System.Int32" />
                  <parameter name="dontFragment" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="DontFragment" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_DontFragment()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_DontFragment(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Ttl" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Ttl()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Ttl(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="PingReply" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <properties>
              <property name="Address" attrib="0" ptype="System.Net.IPAddress">
                <methods>
                  <method name="get_Address()" attrib="2182" returntype="System.Net.IPAddress">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Buffer" attrib="0" ptype="System.Byte[]">
                <methods>
                  <method name="get_Buffer()" attrib="2182" returntype="System.Byte[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Options" attrib="0" ptype="System.Net.NetworkInformation.PingOptions">
                <methods>
                  <method name="get_Options()" attrib="2182" returntype="System.Net.NetworkInformation.PingOptions">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RoundtripTime" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_RoundtripTime()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Status" attrib="0" ptype="System.Net.NetworkInformation.IPStatus">
                <methods>
                  <method name="get_Status()" attrib="2182" returntype="System.Net.NetworkInformation.IPStatus">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="PrefixOrigin" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Dhcp" attrib="32854" fieldtype="System.Net.NetworkInformation.PrefixOrigin" value="3" />
              <field name="Manual" attrib="32854" fieldtype="System.Net.NetworkInformation.PrefixOrigin" value="1" />
              <field name="Other" attrib="32854" fieldtype="System.Net.NetworkInformation.PrefixOrigin" value="0" />
              <field name="RouterAdvertisement" attrib="32854" fieldtype="System.Net.NetworkInformation.PrefixOrigin" value="4" />
              <field name="WellKnown" attrib="32854" fieldtype="System.Net.NetworkInformation.PrefixOrigin" value="2" />
            </fields>
          </class>
          <class name="ScopeLevel" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Admin" attrib="32854" fieldtype="System.Net.NetworkInformation.ScopeLevel" value="4" />
              <field name="Global" attrib="32854" fieldtype="System.Net.NetworkInformation.ScopeLevel" value="14" />
              <field name="Interface" attrib="32854" fieldtype="System.Net.NetworkInformation.ScopeLevel" value="1" />
              <field name="Link" attrib="32854" fieldtype="System.Net.NetworkInformation.ScopeLevel" value="2" />
              <field name="None" attrib="32854" fieldtype="System.Net.NetworkInformation.ScopeLevel" value="0" />
              <field name="Organization" attrib="32854" fieldtype="System.Net.NetworkInformation.ScopeLevel" value="8" />
              <field name="Site" attrib="32854" fieldtype="System.Net.NetworkInformation.ScopeLevel" value="5" />
              <field name="Subnet" attrib="32854" fieldtype="System.Net.NetworkInformation.ScopeLevel" value="3" />
            </fields>
          </class>
          <class name="SuffixOrigin" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="LinkLayerAddress" attrib="32854" fieldtype="System.Net.NetworkInformation.SuffixOrigin" value="4" />
              <field name="Manual" attrib="32854" fieldtype="System.Net.NetworkInformation.SuffixOrigin" value="1" />
              <field name="OriginDhcp" attrib="32854" fieldtype="System.Net.NetworkInformation.SuffixOrigin" value="3" />
              <field name="Other" attrib="32854" fieldtype="System.Net.NetworkInformation.SuffixOrigin" value="0" />
              <field name="Random" attrib="32854" fieldtype="System.Net.NetworkInformation.SuffixOrigin" value="5" />
              <field name="WellKnown" attrib="32854" fieldtype="System.Net.NetworkInformation.SuffixOrigin" value="2" />
            </fields>
          </class>
          <class name="TcpConnectionInformation" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="LocalEndPoint" attrib="0" ptype="System.Net.IPEndPoint">
                <methods>
                  <method name="get_LocalEndPoint()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.IPEndPoint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RemoteEndPoint" attrib="0" ptype="System.Net.IPEndPoint">
                <methods>
                  <method name="get_RemoteEndPoint()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.IPEndPoint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="State" attrib="0" ptype="System.Net.NetworkInformation.TcpState">
                <methods>
                  <method name="get_State()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.TcpState">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="TcpState" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="CloseWait" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="8" />
              <field name="Closed" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="1" />
              <field name="Closing" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="9" />
              <field name="DeleteTcb" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="12" />
              <field name="Established" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="5" />
              <field name="FinWait1" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="6" />
              <field name="FinWait2" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="7" />
              <field name="LastAck" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="10" />
              <field name="Listen" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="2" />
              <field name="SynReceived" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="4" />
              <field name="SynSent" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="3" />
              <field name="TimeWait" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="11" />
              <field name="Unknown" attrib="32854" fieldtype="System.Net.NetworkInformation.TcpState" value="0" />
            </fields>
          </class>
          <class name="TcpStatistics" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="ConnectionsAccepted" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ConnectionsAccepted()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ConnectionsInitiated" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ConnectionsInitiated()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CumulativeConnections" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_CumulativeConnections()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CurrentConnections" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_CurrentConnections()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ErrorsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ErrorsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FailedConnectionAttempts" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_FailedConnectionAttempts()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MaximumConnections" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MaximumConnections()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MaximumTransmissionTimeout" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MaximumTransmissionTimeout()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MinimumTransmissionTimeout" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_MinimumTransmissionTimeout()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ResetConnections" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ResetConnections()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ResetsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_ResetsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SegmentsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_SegmentsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SegmentsResent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_SegmentsResent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SegmentsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_SegmentsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="UdpStatistics" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="DatagramsReceived" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_DatagramsReceived()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DatagramsSent" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_DatagramsSent()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IncomingDatagramsDiscarded" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_IncomingDatagramsDiscarded()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IncomingDatagramsWithErrors" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_IncomingDatagramsWithErrors()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="UdpListeners" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_UdpListeners()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="UnicastIPAddressInformation" type="class" base="System.Net.NetworkInformation.IPAddressInformation" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="AddressPreferredLifetime" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_AddressPreferredLifetime()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AddressValidLifetime" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_AddressValidLifetime()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DhcpLeaseLifetime" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_DhcpLeaseLifetime()" attrib="3526" abstract="true" virtual="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DuplicateAddressDetectionState" attrib="0" ptype="System.Net.NetworkInformation.DuplicateAddressDetectionState">
                <methods>
                  <method name="get_DuplicateAddressDetectionState()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.DuplicateAddressDetectionState">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IPv4Mask" attrib="0" ptype="System.Net.IPAddress">
                <methods>
                  <method name="get_IPv4Mask()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.IPAddress">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PrefixLength" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_PrefixLength()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PrefixOrigin" attrib="0" ptype="System.Net.NetworkInformation.PrefixOrigin">
                <methods>
                  <method name="get_PrefixOrigin()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.PrefixOrigin">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SuffixOrigin" attrib="0" ptype="System.Net.NetworkInformation.SuffixOrigin">
                <methods>
                  <method name="get_SuffixOrigin()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.NetworkInformation.SuffixOrigin">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="UnicastIPAddressInformationCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[System.Net.NetworkInformation.UnicastIPAddressInformation]" />
              <interface name="System.Collections.Generic.IEnumerable`1[System.Net.NetworkInformation.UnicastIPAddressInformation]" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6277">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Net.NetworkInformation.UnicastIPAddressInformation" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2502" virtual="true" returntype="System.Net.NetworkInformation.UnicastIPAddressInformation">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Net.NetworkInformation.UnicastIPAddressInformation)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.NetworkInformation.UnicastIPAddressInformation" />
                </parameters>
              </method>
              <method name="Clear()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.Net.NetworkInformation.UnicastIPAddressInformation)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.NetworkInformation.UnicastIPAddressInformation" />
                </parameters>
              </method>
              <method name="CopyTo(System.Net.NetworkInformation.UnicastIPAddressInformation[], System.Int32)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Net.NetworkInformation.UnicastIPAddressInformation[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="454" virtual="true" returntype="System.Collections.Generic.IEnumerator`1[System.Net.NetworkInformation.UnicastIPAddressInformation]">
                <parameters />
              </method>
              <method name="Remove(System.Net.NetworkInformation.UnicastIPAddressInformation)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.NetworkInformation.UnicastIPAddressInformation" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Net.Security">
        <classes>
          <class name="AuthenticatedStream" type="class" base="System.IO.Stream" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.IO.Stream, System.Boolean)" attrib="6276">
                <parameters>
                  <parameter name="innerStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="leaveInnerStreamOpen" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="InnerStream" attrib="0" ptype="System.IO.Stream">
                <methods>
                  <method name="get_InnerStream()" attrib="2180" returntype="System.IO.Stream">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsAuthenticated" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsAuthenticated()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsEncrypted" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsEncrypted()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsMutuallyAuthenticated" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsMutuallyAuthenticated()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsServer" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsServer()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSigned" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSigned()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LeaveInnerStreamOpen" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_LeaveInnerStreamOpen()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AuthenticationLevel" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="MutualAuthRequested" attrib="32854" fieldtype="System.Net.Security.AuthenticationLevel" value="1" />
              <field name="MutualAuthRequired" attrib="32854" fieldtype="System.Net.Security.AuthenticationLevel" value="2" />
              <field name="None" attrib="32854" fieldtype="System.Net.Security.AuthenticationLevel" value="0" />
            </fields>
          </class>
          <class name="EncryptionPolicy" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AllowNoEncryption" attrib="32854" fieldtype="System.Net.Security.EncryptionPolicy" value="1" />
              <field name="NoEncryption" attrib="32854" fieldtype="System.Net.Security.EncryptionPolicy" value="2" />
              <field name="RequireEncryption" attrib="32854" fieldtype="System.Net.Security.EncryptionPolicy" value="0" />
            </fields>
          </class>
          <class name="LocalCertificateSelectionCallback" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.String, System.Security.Cryptography.X509Certificates.X509CertificateCollection, System.Security.Cryptography.X509Certificates.X509Certificate, System.String[], System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="targetHost" position="1" attrib="0" type="System.String" />
                  <parameter name="localCertificates" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
                  <parameter name="remoteCertificate" position="3" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                  <parameter name="acceptableIssuers" position="4" attrib="0" type="System.String[]" />
                  <parameter name="callback" position="5" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="6" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Security.Cryptography.X509Certificates.X509Certificate">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.String, System.Security.Cryptography.X509Certificates.X509CertificateCollection, System.Security.Cryptography.X509Certificates.X509Certificate, System.String[])" attrib="454" virtual="true" returntype="System.Security.Cryptography.X509Certificates.X509Certificate">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="targetHost" position="1" attrib="0" type="System.String" />
                  <parameter name="localCertificates" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
                  <parameter name="remoteCertificate" position="3" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                  <parameter name="acceptableIssuers" position="4" attrib="0" type="System.String[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NegotiateStream" type="class" base="System.Net.Security.AuthenticatedStream" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.IO.Stream)" attrib="6278">
                <attributes />
                <parameters>
                  <parameter name="innerStream" position="0" attrib="0" type="System.IO.Stream" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.Boolean)" attrib="6278">
                <attributes />
                <parameters>
                  <parameter name="innerStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="leaveInnerStreamOpen" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CanRead" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanRead()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanSeek" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanSeek()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanTimeout" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_CanTimeout()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanWrite" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanWrite()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ImpersonationLevel" attrib="0" ptype="System.Security.Principal.TokenImpersonationLevel">
                <attributes />
                <methods>
                  <method name="get_ImpersonationLevel()" attrib="2502" virtual="true" returntype="System.Security.Principal.TokenImpersonationLevel">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsAuthenticated" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_IsAuthenticated()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsEncrypted" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_IsEncrypted()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsMutuallyAuthenticated" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_IsMutuallyAuthenticated()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsServer" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_IsServer()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSigned" attrib="0" ptype="System.Boolean">
                <attributes />
                <methods>
                  <method name="get_IsSigned()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Length()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Position" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Position()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_Position(System.Int64)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReadTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ReadTimeout()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ReadTimeout(System.Int32)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RemoteIdentity" attrib="0" ptype="System.Security.Principal.IIdentity">
                <attributes />
                <methods>
                  <method name="get_RemoteIdentity()" attrib="2502" virtual="true" returntype="System.Security.Principal.IIdentity">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WriteTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_WriteTimeout()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_WriteTimeout(System.Int32)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AuthenticateAsClient()" attrib="454" virtual="true" returntype="System.Void">
                <attributes />
                <parameters />
              </method>
              <method name="AuthenticateAsClient(System.Net.NetworkCredential, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="targetName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AuthenticateAsClient(System.Net.NetworkCredential, System.Security.Authentication.ExtendedProtection.ChannelBinding, System.String)" attrib="454" virtual="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="binding" position="1" attrib="0" type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
                  <parameter name="targetName" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AuthenticateAsClient(System.Net.NetworkCredential, System.String, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)" attrib="454" virtual="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="targetName" position="1" attrib="0" type="System.String" />
                  <parameter name="requiredProtectionLevel" position="2" attrib="0" type="System.Net.Security.ProtectionLevel" />
                  <parameter name="allowedImpersonationLevel" position="3" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                </parameters>
              </method>
              <method name="AuthenticateAsClient(System.Net.NetworkCredential, System.Security.Authentication.ExtendedProtection.ChannelBinding, System.String, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)" attrib="454" virtual="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="binding" position="1" attrib="0" type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
                  <parameter name="targetName" position="2" attrib="0" type="System.String" />
                  <parameter name="requiredProtectionLevel" position="3" attrib="0" type="System.Net.Security.ProtectionLevel" />
                  <parameter name="allowedImpersonationLevel" position="4" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                </parameters>
              </method>
              <method name="AuthenticateAsClientAsync()" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters />
              </method>
              <method name="AuthenticateAsClientAsync(System.Net.NetworkCredential, System.String)" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="targetName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AuthenticateAsClientAsync(System.Net.NetworkCredential, System.Security.Authentication.ExtendedProtection.ChannelBinding, System.String)" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="binding" position="1" attrib="0" type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
                  <parameter name="targetName" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AuthenticateAsClientAsync(System.Net.NetworkCredential, System.String, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="targetName" position="1" attrib="0" type="System.String" />
                  <parameter name="requiredProtectionLevel" position="2" attrib="0" type="System.Net.Security.ProtectionLevel" />
                  <parameter name="allowedImpersonationLevel" position="3" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                </parameters>
              </method>
              <method name="AuthenticateAsClientAsync(System.Net.NetworkCredential, System.Security.Authentication.ExtendedProtection.ChannelBinding, System.String, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="binding" position="1" attrib="0" type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
                  <parameter name="targetName" position="2" attrib="0" type="System.String" />
                  <parameter name="requiredProtectionLevel" position="3" attrib="0" type="System.Net.Security.ProtectionLevel" />
                  <parameter name="allowedImpersonationLevel" position="4" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                </parameters>
              </method>
              <method name="AuthenticateAsServer()" attrib="454" virtual="true" returntype="System.Void">
                <attributes />
                <parameters />
              </method>
              <method name="AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" attrib="454" virtual="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="policy" position="0" attrib="0" type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
                </parameters>
              </method>
              <method name="AuthenticateAsServer(System.Net.NetworkCredential, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)" attrib="454" virtual="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="requiredProtectionLevel" position="1" attrib="0" type="System.Net.Security.ProtectionLevel" />
                  <parameter name="requiredImpersonationLevel" position="2" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                </parameters>
              </method>
              <method name="AuthenticateAsServer(System.Net.NetworkCredential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)" attrib="454" virtual="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="policy" position="1" attrib="0" type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
                  <parameter name="requiredProtectionLevel" position="2" attrib="0" type="System.Net.Security.ProtectionLevel" />
                  <parameter name="requiredImpersonationLevel" position="3" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                </parameters>
              </method>
              <method name="AuthenticateAsServerAsync()" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters />
              </method>
              <method name="AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="policy" position="0" attrib="0" type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
                </parameters>
              </method>
              <method name="AuthenticateAsServerAsync(System.Net.NetworkCredential, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="requiredProtectionLevel" position="1" attrib="0" type="System.Net.Security.ProtectionLevel" />
                  <parameter name="requiredImpersonationLevel" position="2" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                </parameters>
              </method>
              <method name="AuthenticateAsServerAsync(System.Net.NetworkCredential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="policy" position="1" attrib="0" type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
                  <parameter name="requiredProtectionLevel" position="2" attrib="0" type="System.Net.Security.ProtectionLevel" />
                  <parameter name="requiredImpersonationLevel" position="3" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsClient(System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <attributes />
                <parameters>
                  <parameter name="asyncCallback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsClient(System.Net.NetworkCredential, System.String, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <attributes />
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="targetName" position="1" attrib="0" type="System.String" />
                  <parameter name="asyncCallback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsClient(System.Net.NetworkCredential, System.Security.Authentication.ExtendedProtection.ChannelBinding, System.String, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <attributes />
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="binding" position="1" attrib="0" type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
                  <parameter name="targetName" position="2" attrib="0" type="System.String" />
                  <parameter name="asyncCallback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsClient(System.Net.NetworkCredential, System.String, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <attributes />
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="targetName" position="1" attrib="0" type="System.String" />
                  <parameter name="requiredProtectionLevel" position="2" attrib="0" type="System.Net.Security.ProtectionLevel" />
                  <parameter name="allowedImpersonationLevel" position="3" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                  <parameter name="asyncCallback" position="4" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="5" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsClient(System.Net.NetworkCredential, System.Security.Authentication.ExtendedProtection.ChannelBinding, System.String, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <attributes />
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="binding" position="1" attrib="0" type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
                  <parameter name="targetName" position="2" attrib="0" type="System.String" />
                  <parameter name="requiredProtectionLevel" position="3" attrib="0" type="System.Net.Security.ProtectionLevel" />
                  <parameter name="allowedImpersonationLevel" position="4" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                  <parameter name="asyncCallback" position="5" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="6" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsServer(System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <attributes />
                <parameters>
                  <parameter name="asyncCallback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <attributes />
                <parameters>
                  <parameter name="policy" position="0" attrib="0" type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
                  <parameter name="asyncCallback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsServer(System.Net.NetworkCredential, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <attributes />
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="requiredProtectionLevel" position="1" attrib="0" type="System.Net.Security.ProtectionLevel" />
                  <parameter name="requiredImpersonationLevel" position="2" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                  <parameter name="asyncCallback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsServer(System.Net.NetworkCredential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <attributes />
                <parameters>
                  <parameter name="credential" position="0" attrib="0" type="System.Net.NetworkCredential" />
                  <parameter name="policy" position="1" attrib="0" type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
                  <parameter name="requiredProtectionLevel" position="2" attrib="0" type="System.Net.Security.ProtectionLevel" />
                  <parameter name="requiredImpersonationLevel" position="3" attrib="0" type="System.Security.Principal.TokenImpersonationLevel" />
                  <parameter name="asyncCallback" position="4" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="5" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <attributes />
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="asyncCallback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <attributes />
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="asyncCallback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="EndAuthenticateAsClient(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndAuthenticateAsServer(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndRead(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <attributes />
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndWrite(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Flush()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <attributes />
                <parameters />
              </method>
              <method name="Read(System.Byte[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <attributes />
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Seek(System.Int64, System.IO.SeekOrigin)" attrib="198" virtual="true" is-override="true" returntype="System.Int64">
                <attributes />
                <parameters>
                  <parameter name="offset" position="0" attrib="0" type="System.Int64" />
                  <parameter name="origin" position="1" attrib="0" type="System.IO.SeekOrigin" />
                </parameters>
              </method>
              <method name="SetLength(System.Int64)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="Write(System.Byte[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ProtectionLevel" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="EncryptAndSign" attrib="32854" fieldtype="System.Net.Security.ProtectionLevel" value="2" />
              <field name="None" attrib="32854" fieldtype="System.Net.Security.ProtectionLevel" value="0" />
              <field name="Sign" attrib="32854" fieldtype="System.Net.Security.ProtectionLevel" value="1" />
            </fields>
          </class>
          <class name="RemoteCertificateValidationCallback" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="certificate" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                  <parameter name="chain" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Chain" />
                  <parameter name="sslPolicyErrors" position="3" attrib="0" type="System.Net.Security.SslPolicyErrors" />
                  <parameter name="callback" position="4" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="5" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="certificate" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                  <parameter name="chain" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Chain" />
                  <parameter name="sslPolicyErrors" position="3" attrib="0" type="System.Net.Security.SslPolicyErrors" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SslPolicyErrors" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="None" attrib="32854" fieldtype="System.Net.Security.SslPolicyErrors" value="0" />
              <field name="RemoteCertificateChainErrors" attrib="32854" fieldtype="System.Net.Security.SslPolicyErrors" value="4" />
              <field name="RemoteCertificateNameMismatch" attrib="32854" fieldtype="System.Net.Security.SslPolicyErrors" value="2" />
              <field name="RemoteCertificateNotAvailable" attrib="32854" fieldtype="System.Net.Security.SslPolicyErrors" value="1" />
            </fields>
          </class>
          <class name="SslStream" type="class" base="System.Net.Security.AuthenticatedStream" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.IO.Stream)" attrib="6278">
                <parameters>
                  <parameter name="innerStream" position="0" attrib="0" type="System.IO.Stream" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="innerStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="leaveInnerStreamOpen" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.Boolean, System.Net.Security.RemoteCertificateValidationCallback)" attrib="6278">
                <parameters>
                  <parameter name="innerStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="leaveInnerStreamOpen" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="userCertificateValidationCallback" position="2" attrib="0" type="System.Net.Security.RemoteCertificateValidationCallback" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.Boolean, System.Net.Security.RemoteCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback)" attrib="6278">
                <parameters>
                  <parameter name="innerStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="leaveInnerStreamOpen" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="userCertificateValidationCallback" position="2" attrib="0" type="System.Net.Security.RemoteCertificateValidationCallback" />
                  <parameter name="userCertificateSelectionCallback" position="3" attrib="0" type="System.Net.Security.LocalCertificateSelectionCallback" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.Stream, System.Boolean, System.Net.Security.RemoteCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback, System.Net.Security.EncryptionPolicy)" attrib="6278">
                <attributes />
                <parameters>
                  <parameter name="innerStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="leaveInnerStreamOpen" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="userCertificateValidationCallback" position="2" attrib="0" type="System.Net.Security.RemoteCertificateValidationCallback" />
                  <parameter name="userCertificateSelectionCallback" position="3" attrib="0" type="System.Net.Security.LocalCertificateSelectionCallback" />
                  <parameter name="encryptionPolicy" position="4" attrib="0" type="System.Net.Security.EncryptionPolicy" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CanRead" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanRead()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanSeek" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanSeek()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanTimeout" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanTimeout()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanWrite" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanWrite()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CheckCertRevocationStatus" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CheckCertRevocationStatus()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CipherAlgorithm" attrib="0" ptype="System.Security.Authentication.CipherAlgorithmType">
                <methods>
                  <method name="get_CipherAlgorithm()" attrib="2502" virtual="true" returntype="System.Security.Authentication.CipherAlgorithmType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CipherStrength" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_CipherStrength()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HashAlgorithm" attrib="0" ptype="System.Security.Authentication.HashAlgorithmType">
                <methods>
                  <method name="get_HashAlgorithm()" attrib="2502" virtual="true" returntype="System.Security.Authentication.HashAlgorithmType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HashStrength" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_HashStrength()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsAuthenticated" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsAuthenticated()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsEncrypted" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsEncrypted()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsMutuallyAuthenticated" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsMutuallyAuthenticated()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsServer" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsServer()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSigned" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSigned()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="KeyExchangeAlgorithm" attrib="0" ptype="System.Security.Authentication.ExchangeAlgorithmType">
                <methods>
                  <method name="get_KeyExchangeAlgorithm()" attrib="2502" virtual="true" returntype="System.Security.Authentication.ExchangeAlgorithmType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="KeyExchangeStrength" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_KeyExchangeStrength()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Length()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LocalCertificate" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Certificate">
                <methods>
                  <method name="get_LocalCertificate()" attrib="2502" virtual="true" returntype="System.Security.Cryptography.X509Certificates.X509Certificate">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Position" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Position()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_Position(System.Int64)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReadTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ReadTimeout()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ReadTimeout(System.Int32)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RemoteCertificate" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Certificate">
                <methods>
                  <method name="get_RemoteCertificate()" attrib="2502" virtual="true" returntype="System.Security.Cryptography.X509Certificates.X509Certificate">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SslProtocol" attrib="0" ptype="System.Security.Authentication.SslProtocols">
                <methods>
                  <method name="get_SslProtocol()" attrib="2502" virtual="true" returntype="System.Security.Authentication.SslProtocols">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TransportContext" attrib="0" ptype="System.Net.TransportContext">
                <methods>
                  <method name="get_TransportContext()" attrib="2182" returntype="System.Net.TransportContext">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WriteTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_WriteTimeout()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_WriteTimeout(System.Int32)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AuthenticateAsClient(System.String)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="targetHost" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AuthenticateAsClient(System.String, System.Security.Cryptography.X509Certificates.X509CertificateCollection, System.Security.Authentication.SslProtocols, System.Boolean)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="targetHost" position="0" attrib="0" type="System.String" />
                  <parameter name="clientCertificates" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
                  <parameter name="enabledSslProtocols" position="2" attrib="0" type="System.Security.Authentication.SslProtocols" />
                  <parameter name="checkCertificateRevocation" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="AuthenticateAsClientAsync(System.String)" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="targetHost" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AuthenticateAsClientAsync(System.String, System.Security.Cryptography.X509Certificates.X509CertificateCollection, System.Security.Authentication.SslProtocols, System.Boolean)" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="targetHost" position="0" attrib="0" type="System.String" />
                  <parameter name="clientCertificates" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
                  <parameter name="enabledSslProtocols" position="2" attrib="0" type="System.Security.Authentication.SslProtocols" />
                  <parameter name="checkCertificateRevocation" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serverCertificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                </parameters>
              </method>
              <method name="AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate, System.Boolean, System.Security.Authentication.SslProtocols, System.Boolean)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="serverCertificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                  <parameter name="clientCertificateRequired" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="enabledSslProtocols" position="2" attrib="0" type="System.Security.Authentication.SslProtocols" />
                  <parameter name="checkCertificateRevocation" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="serverCertificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                </parameters>
              </method>
              <method name="AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate, System.Boolean, System.Security.Authentication.SslProtocols, System.Boolean)" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="serverCertificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                  <parameter name="clientCertificateRequired" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="enabledSslProtocols" position="2" attrib="0" type="System.Security.Authentication.SslProtocols" />
                  <parameter name="checkCertificateRevocation" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsClient(System.String, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="targetHost" position="0" attrib="0" type="System.String" />
                  <parameter name="asyncCallback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsClient(System.String, System.Security.Cryptography.X509Certificates.X509CertificateCollection, System.Security.Authentication.SslProtocols, System.Boolean, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="targetHost" position="0" attrib="0" type="System.String" />
                  <parameter name="clientCertificates" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
                  <parameter name="enabledSslProtocols" position="2" attrib="0" type="System.Security.Authentication.SslProtocols" />
                  <parameter name="checkCertificateRevocation" position="3" attrib="0" type="System.Boolean" />
                  <parameter name="asyncCallback" position="4" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="5" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="serverCertificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                  <parameter name="asyncCallback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate, System.Boolean, System.Security.Authentication.SslProtocols, System.Boolean, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="serverCertificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                  <parameter name="clientCertificateRequired" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="enabledSslProtocols" position="2" attrib="0" type="System.Security.Authentication.SslProtocols" />
                  <parameter name="checkCertificateRevocation" position="3" attrib="0" type="System.Boolean" />
                  <parameter name="asyncCallback" position="4" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="5" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="asyncCallback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="asyncCallback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="asyncState" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="EndAuthenticateAsClient(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndAuthenticateAsServer(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndRead(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndWrite(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Flush()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Read(System.Byte[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Seek(System.Int64, System.IO.SeekOrigin)" attrib="198" virtual="true" is-override="true" returntype="System.Int64">
                <parameters>
                  <parameter name="offset" position="0" attrib="0" type="System.Int64" />
                  <parameter name="origin" position="1" attrib="0" type="System.IO.SeekOrigin" />
                </parameters>
              </method>
              <method name="SetLength(System.Int64)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="ShutdownAsync()" attrib="454" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters />
              </method>
              <method name="Write(System.Byte[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="Write(System.Byte[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Net.Sockets">
        <classes>
          <class name="AddressFamily" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AppleTalk" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="16" />
              <field name="Atm" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="22" />
              <field name="Banyan" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="21" />
              <field name="Ccitt" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="10" />
              <field name="Chaos" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="5" />
              <field name="Cluster" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="24" />
              <field name="DataKit" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="9" />
              <field name="DataLink" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="13" />
              <field name="DecNet" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="12" />
              <field name="Ecma" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="8" />
              <field name="FireFox" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="19" />
              <field name="HyperChannel" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="15" />
              <field name="Ieee12844" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="25" />
              <field name="ImpLink" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="3" />
              <field name="InterNetwork" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="2" />
              <field name="InterNetworkV6" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="23" />
              <field name="Ipx" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="6" />
              <field name="Irda" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="26" />
              <field name="Iso" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="7" />
              <field name="Lat" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="14" />
              <field name="Max" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="29" />
              <field name="NS" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="6" />
              <field name="NetBios" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="17" />
              <field name="NetworkDesigners" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="28" />
              <field name="Osi" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="7" />
              <field name="Pup" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="4" />
              <field name="Sna" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="11" />
              <field name="Unix" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="1" />
              <field name="Unknown" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="-1" />
              <field name="Unspecified" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="0" />
              <field name="VoiceView" attrib="32854" fieldtype="System.Net.Sockets.AddressFamily" value="18" />
            </fields>
          </class>
          <class name="IOControlCode" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int64">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AbsorbRouterAlert" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2550136837" />
              <field name="AddMulticastGroupOnInterface" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2550136842" />
              <field name="AddressListChange" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="671088663" />
              <field name="AddressListQuery" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="1207959574" />
              <field name="AddressListSort" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="3355443225" />
              <field name="AssociateHandle" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2281701377" />
              <field name="AsyncIO" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2147772029" />
              <field name="BindToInterface" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2550136840" />
              <field name="DataToRead" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="1074030207" />
              <field name="DeleteMulticastGroupFromInterface" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2550136843" />
              <field name="EnableCircularQueuing" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="671088642" />
              <field name="Flush" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="671088644" />
              <field name="GetBroadcastAddress" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="1207959557" />
              <field name="GetExtensionFunctionPointer" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="3355443206" />
              <field name="GetGroupQos" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="3355443208" />
              <field name="GetQos" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="3355443207" />
              <field name="KeepAliveValues" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2550136836" />
              <field name="LimitBroadcasts" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2550136839" />
              <field name="MulticastInterface" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2550136841" />
              <field name="MulticastScope" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2281701386" />
              <field name="MultipointLoopback" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2281701385" />
              <field name="NamespaceChange" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2281701401" />
              <field name="NonBlockingIO" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2147772030" />
              <field name="OobDataRead" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="1074033415" />
              <field name="QueryTargetPnpHandle" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="1207959576" />
              <field name="ReceiveAll" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2550136833" />
              <field name="ReceiveAllIgmpMulticast" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2550136835" />
              <field name="ReceiveAllMulticast" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2550136834" />
              <field name="RoutingInterfaceChange" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2281701397" />
              <field name="RoutingInterfaceQuery" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="3355443220" />
              <field name="SetGroupQos" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2281701388" />
              <field name="SetQos" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2281701387" />
              <field name="TranslateHandle" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="3355443213" />
              <field name="UnicastInterface" attrib="32854" fieldtype="System.Net.Sockets.IOControlCode" value="2550136838" />
            </fields>
          </class>
          <class name="IPPacketInformation" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
            <properties>
              <property name="Address" attrib="0" ptype="System.Net.IPAddress">
                <methods>
                  <method name="get_Address()" attrib="2182" returntype="System.Net.IPAddress">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Interface" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Interface()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="comparand" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="op_Equality(System.Net.Sockets.IPPacketInformation, System.Net.Sockets.IPPacketInformation)" attrib="2198" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="packetInformation1" position="0" attrib="0" type="System.Net.Sockets.IPPacketInformation" />
                  <parameter name="packetInformation2" position="1" attrib="0" type="System.Net.Sockets.IPPacketInformation" />
                </parameters>
              </method>
              <method name="op_Inequality(System.Net.Sockets.IPPacketInformation, System.Net.Sockets.IPPacketInformation)" attrib="2198" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="packetInformation1" position="0" attrib="0" type="System.Net.Sockets.IPPacketInformation" />
                  <parameter name="packetInformation2" position="1" attrib="0" type="System.Net.Sockets.IPPacketInformation" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IPProtectionLevel" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="EdgeRestricted" attrib="32854" fieldtype="System.Net.Sockets.IPProtectionLevel" value="20" />
              <field name="Restricted" attrib="32854" fieldtype="System.Net.Sockets.IPProtectionLevel" value="30" />
              <field name="Unrestricted" attrib="32854" fieldtype="System.Net.Sockets.IPProtectionLevel" value="10" />
              <field name="Unspecified" attrib="32854" fieldtype="System.Net.Sockets.IPProtectionLevel" value="-1" />
            </fields>
          </class>
          <class name="IPv6MulticastOption" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Net.IPAddress)" attrib="6278">
                <parameters>
                  <parameter name="group" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.IPAddress, System.Int64)" attrib="6278">
                <parameters>
                  <parameter name="group" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="ifindex" position="1" attrib="0" type="System.Int64" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Group" attrib="0" ptype="System.Net.IPAddress">
                <methods>
                  <method name="get_Group()" attrib="2182" returntype="System.Net.IPAddress">
                    <parameters />
                  </method>
                  <method name="set_Group(System.Net.IPAddress)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IPAddress" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="InterfaceIndex" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_InterfaceIndex()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_InterfaceIndex(System.Int64)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="LingerOption" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Boolean, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="enable" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="seconds" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Enabled" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Enabled()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Enabled(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="LingerTime" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_LingerTime()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_LingerTime(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="MulticastOption" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Net.IPAddress)" attrib="6278">
                <parameters>
                  <parameter name="group" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.IPAddress, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="group" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="interfaceIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.IPAddress, System.Net.IPAddress)" attrib="6278">
                <parameters>
                  <parameter name="group" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="mcint" position="1" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Group" attrib="0" ptype="System.Net.IPAddress">
                <methods>
                  <method name="get_Group()" attrib="2182" returntype="System.Net.IPAddress">
                    <parameters />
                  </method>
                  <method name="set_Group(System.Net.IPAddress)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IPAddress" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="InterfaceIndex" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InterfaceIndex()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_InterfaceIndex(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="LocalAddress" attrib="0" ptype="System.Net.IPAddress">
                <methods>
                  <method name="get_LocalAddress()" attrib="2182" returntype="System.Net.IPAddress">
                    <parameters />
                  </method>
                  <method name="set_LocalAddress(System.Net.IPAddress)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IPAddress" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="NetworkStream" type="class" base="System.IO.Stream" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Net.Sockets.Socket)" attrib="6278">
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Sockets.Socket, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" />
                  <parameter name="ownsSocket" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Sockets.Socket, System.IO.FileAccess)" attrib="6278">
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" />
                  <parameter name="access" position="1" attrib="0" type="System.IO.FileAccess" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Sockets.Socket, System.IO.FileAccess, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" />
                  <parameter name="access" position="1" attrib="0" type="System.IO.FileAccess" />
                  <parameter name="ownsSocket" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CanRead" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanRead()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanSeek" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanSeek()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanTimeout" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanTimeout()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanWrite" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanWrite()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DataAvailable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_DataAvailable()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Length()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Position" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_Position()" attrib="2246" virtual="true" is-override="true" returntype="System.Int64">
                    <parameters />
                  </method>
                  <method name="set_Position(System.Int64)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReadTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ReadTimeout()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ReadTimeout(System.Int32)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Readable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Readable()" attrib="2180" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Readable(System.Boolean)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Socket" attrib="0" ptype="System.Net.Sockets.Socket">
                <methods>
                  <method name="get_Socket()" attrib="2180" returntype="System.Net.Sockets.Socket">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WriteTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_WriteTimeout()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_WriteTimeout(System.Int32)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Writeable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Writeable()" attrib="2180" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Writeable(System.Boolean)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" attrib="16582" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="callback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" attrib="16582" virtual="true" is-override="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="callback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Close(System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="timeout" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="EndRead(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndWrite(System.IAsyncResult)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Flush()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="FlushAsync(System.Threading.CancellationToken)" attrib="198" virtual="true" is-override="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="cancellationToken" position="0" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="Read(System.Byte[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="3" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Seek(System.Int64, System.IO.SeekOrigin)" attrib="198" virtual="true" is-override="true" returntype="System.Int64">
                <parameters>
                  <parameter name="offset" position="0" attrib="0" type="System.Int64" />
                  <parameter name="origin" position="1" attrib="0" type="System.IO.SeekOrigin" />
                </parameters>
              </method>
              <method name="SetLength(System.Int64)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="Write(System.Byte[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="~NetworkStream()" attrib="196" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ProtocolFamily" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AppleTalk" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="16" />
              <field name="Atm" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="22" />
              <field name="Banyan" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="21" />
              <field name="Ccitt" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="10" />
              <field name="Chaos" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="5" />
              <field name="Cluster" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="24" />
              <field name="DataKit" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="9" />
              <field name="DataLink" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="13" />
              <field name="DecNet" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="12" />
              <field name="Ecma" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="8" />
              <field name="FireFox" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="19" />
              <field name="HyperChannel" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="15" />
              <field name="Ieee12844" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="25" />
              <field name="ImpLink" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="3" />
              <field name="InterNetwork" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="2" />
              <field name="InterNetworkV6" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="23" />
              <field name="Ipx" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="6" />
              <field name="Irda" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="26" />
              <field name="Iso" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="7" />
              <field name="Lat" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="14" />
              <field name="Max" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="29" />
              <field name="NS" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="6" />
              <field name="NetBios" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="17" />
              <field name="NetworkDesigners" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="28" />
              <field name="Osi" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="7" />
              <field name="Pup" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="4" />
              <field name="Sna" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="11" />
              <field name="Unix" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="1" />
              <field name="Unknown" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="-1" />
              <field name="Unspecified" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="0" />
              <field name="VoiceView" attrib="32854" fieldtype="System.Net.Sockets.ProtocolFamily" value="18" />
            </fields>
          </class>
          <class name="ProtocolType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Ggp" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="3" />
              <field name="IP" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="0" />
              <field name="IPSecAuthenticationHeader" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="51" />
              <field name="IPSecEncapsulatingSecurityPayload" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="50" />
              <field name="IPv4" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="4" />
              <field name="IPv6" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="41" />
              <field name="IPv6DestinationOptions" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="60" />
              <field name="IPv6FragmentHeader" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="44" />
              <field name="IPv6HopByHopOptions" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="0" />
              <field name="IPv6NoNextHeader" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="59" />
              <field name="IPv6RoutingHeader" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="43" />
              <field name="Icmp" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="1" />
              <field name="IcmpV6" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="58" />
              <field name="Idp" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="22" />
              <field name="Igmp" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="2" />
              <field name="Ipx" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="1000" />
              <field name="ND" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="77" />
              <field name="Pup" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="12" />
              <field name="Raw" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="255" />
              <field name="Spx" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="1256" />
              <field name="SpxII" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="1257" />
              <field name="Tcp" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="6" />
              <field name="Udp" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="17" />
              <field name="Unknown" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="-1" />
              <field name="Unspecified" attrib="32854" fieldtype="System.Net.Sockets.ProtocolType" value="0" />
            </fields>
          </class>
          <class name="SelectMode" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="SelectError" attrib="32854" fieldtype="System.Net.Sockets.SelectMode" value="2" />
              <field name="SelectRead" attrib="32854" fieldtype="System.Net.Sockets.SelectMode" value="0" />
              <field name="SelectWrite" attrib="32854" fieldtype="System.Net.Sockets.SelectMode" value="1" />
            </fields>
          </class>
          <class name="SendPacketsElement" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Byte[])" attrib="6278">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="filepath" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Byte[], System.Int32, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Int32, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="filepath" position="0" attrib="0" type="System.String" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Byte[], System.Int32, System.Int32, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="endOfPacket" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Int32, System.Int32, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="filepath" position="0" attrib="0" type="System.String" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="endOfPacket" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Buffer" attrib="0" ptype="System.Byte[]">
                <methods>
                  <method name="get_Buffer()" attrib="2182" returntype="System.Byte[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EndOfPacket" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_EndOfPacket()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FilePath" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FilePath()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Offset" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Offset()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="Socket" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Net.Sockets.SocketInformation)" attrib="6278">
                <parameters>
                  <parameter name="socketInformation" position="0" attrib="0" type="System.Net.Sockets.SocketInformation" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Sockets.SocketType, System.Net.Sockets.ProtocolType)" attrib="6278">
                <parameters>
                  <parameter name="socketType" position="0" attrib="0" type="System.Net.Sockets.SocketType" />
                  <parameter name="protocolType" position="1" attrib="0" type="System.Net.Sockets.ProtocolType" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Sockets.AddressFamily, System.Net.Sockets.SocketType, System.Net.Sockets.ProtocolType)" attrib="6278">
                <parameters>
                  <parameter name="addressFamily" position="0" attrib="0" type="System.Net.Sockets.AddressFamily" />
                  <parameter name="socketType" position="1" attrib="0" type="System.Net.Sockets.SocketType" />
                  <parameter name="protocolType" position="2" attrib="0" type="System.Net.Sockets.ProtocolType" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AddressFamily" attrib="0" ptype="System.Net.Sockets.AddressFamily">
                <methods>
                  <method name="get_AddressFamily()" attrib="2182" returntype="System.Net.Sockets.AddressFamily">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Available" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Available()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Blocking" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Blocking()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Blocking(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Connected" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Connected()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DontFragment" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_DontFragment()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_DontFragment(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="DualMode" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_DualMode()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_DualMode(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="EnableBroadcast" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_EnableBroadcast()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_EnableBroadcast(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExclusiveAddressUse" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_ExclusiveAddressUse()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_ExclusiveAddressUse(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Handle" attrib="0" ptype="System.IntPtr">
                <methods>
                  <method name="get_Handle()" attrib="2182" returntype="System.IntPtr">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsBound" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsBound()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LingerState" attrib="0" ptype="System.Net.Sockets.LingerOption">
                <methods>
                  <method name="get_LingerState()" attrib="2182" returntype="System.Net.Sockets.LingerOption">
                    <parameters />
                  </method>
                  <method name="set_LingerState(System.Net.Sockets.LingerOption)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Sockets.LingerOption" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="LocalEndPoint" attrib="0" ptype="System.Net.EndPoint">
                <methods>
                  <method name="get_LocalEndPoint()" attrib="2182" returntype="System.Net.EndPoint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MulticastLoopback" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_MulticastLoopback()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_MulticastLoopback(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="NoDelay" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_NoDelay()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_NoDelay(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="OSSupportsIPv4" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_OSSupportsIPv4()" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OSSupportsIPv6" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_OSSupportsIPv6()" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProtocolType" attrib="0" ptype="System.Net.Sockets.ProtocolType">
                <methods>
                  <method name="get_ProtocolType()" attrib="2182" returntype="System.Net.Sockets.ProtocolType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReceiveBufferSize" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ReceiveBufferSize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ReceiveBufferSize(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReceiveTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ReceiveTimeout()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ReceiveTimeout(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RemoteEndPoint" attrib="0" ptype="System.Net.EndPoint">
                <methods>
                  <method name="get_RemoteEndPoint()" attrib="2182" returntype="System.Net.EndPoint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SendBufferSize" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_SendBufferSize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_SendBufferSize(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SendTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_SendTimeout()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_SendTimeout(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SocketType" attrib="0" ptype="System.Net.Sockets.SocketType">
                <methods>
                  <method name="get_SocketType()" attrib="2182" returntype="System.Net.Sockets.SocketType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsIPv4" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="SupportsIPv4 is obsoleted for this type, please use OSSupportsIPv4 instead. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_SupportsIPv4()" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SupportsIPv6" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="SupportsIPv6 is obsoleted for this type, please use OSSupportsIPv6 instead. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_SupportsIPv6()" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Ttl" attrib="0" ptype="System.Int16">
                <methods>
                  <method name="get_Ttl()" attrib="2182" returntype="System.Int16">
                    <parameters />
                  </method>
                  <method name="set_Ttl(System.Int16)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int16" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UseOnlyOverlappedIO" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UseOnlyOverlappedIO()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseOnlyOverlappedIO(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept()" attrib="134" returntype="System.Net.Sockets.Socket">
                <parameters />
              </method>
              <method name="AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.Sockets.SocketAsyncEventArgs" />
                </parameters>
              </method>
              <method name="BeginAccept(System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAccept(System.Int32, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="receiveSize" position="0" attrib="0" type="System.Int32" />
                  <parameter name="callback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAccept(System.Net.Sockets.Socket, System.Int32, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="acceptSocket" position="0" attrib="0" type="System.Net.Sockets.Socket" />
                  <parameter name="receiveSize" position="1" attrib="0" type="System.Int32" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginConnect(System.Net.EndPoint, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="remoteEP" position="0" attrib="0" type="System.Net.EndPoint" />
                  <parameter name="callback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginConnect(System.Net.IPAddress, System.Int32, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                  <parameter name="requestCallback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginConnect(System.Net.IPAddress[], System.Int32, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="addresses" position="0" attrib="0" type="System.Net.IPAddress[]" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                  <parameter name="requestCallback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginConnect(System.String, System.Int32, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                  <parameter name="requestCallback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginDisconnect(System.Boolean, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="reuseSocket" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="callback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginReceive(System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]], System.Net.Sockets.SocketFlags, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="buffers" position="0" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginReceive(System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]], System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError&amp;, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="buffers" position="0" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="errorCode" position="2" attrib="2" type="System.Net.Sockets.SocketError" direction="out" />
                  <parameter name="callback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginReceive(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="callback" position="4" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="5" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginReceive(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError&amp;, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="errorCode" position="4" attrib="2" type="System.Net.Sockets.SocketError" direction="out" />
                  <parameter name="callback" position="5" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="6" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginReceiveFrom(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint&amp;, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="remoteEP" position="4" attrib="0" type="System.Net.EndPoint" direction="ref" />
                  <parameter name="callback" position="5" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="6" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginReceiveMessageFrom(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint&amp;, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <attributes />
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="remoteEP" position="4" attrib="0" type="System.Net.EndPoint" direction="ref" />
                  <parameter name="callback" position="5" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="6" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginSend(System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]], System.Net.Sockets.SocketFlags, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="buffers" position="0" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginSend(System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]], System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError&amp;, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="buffers" position="0" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="errorCode" position="2" attrib="2" type="System.Net.Sockets.SocketError" direction="out" />
                  <parameter name="callback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginSend(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="callback" position="4" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="5" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginSend(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError&amp;, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="errorCode" position="4" attrib="2" type="System.Net.Sockets.SocketError" direction="out" />
                  <parameter name="callback" position="5" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="6" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginSendFile(System.String, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="callback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginSendFile(System.String, System.Byte[], System.Byte[], System.Net.Sockets.TransmitFileOptions, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="preBuffer" position="1" attrib="0" type="System.Byte[]" />
                  <parameter name="postBuffer" position="2" attrib="0" type="System.Byte[]" />
                  <parameter name="flags" position="3" attrib="0" type="System.Net.Sockets.TransmitFileOptions" />
                  <parameter name="callback" position="4" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="5" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginSendTo(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint, System.AsyncCallback, System.Object)" attrib="134" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="remoteEP" position="4" attrib="0" type="System.Net.EndPoint" />
                  <parameter name="callback" position="5" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="6" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Bind(System.Net.EndPoint)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="localEP" position="0" attrib="0" type="System.Net.EndPoint" />
                </parameters>
              </method>
              <method name="CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.Sockets.SocketAsyncEventArgs" />
                </parameters>
              </method>
              <method name="Close()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Close(System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="timeout" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Connect(System.Net.EndPoint)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="remoteEP" position="0" attrib="0" type="System.Net.EndPoint" />
                </parameters>
              </method>
              <method name="Connect(System.Net.IPAddress, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Connect(System.Net.IPAddress[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="addresses" position="0" attrib="0" type="System.Net.IPAddress[]" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Connect(System.String, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.Sockets.SocketAsyncEventArgs" />
                </parameters>
              </method>
              <method name="ConnectAsync(System.Net.Sockets.SocketType, System.Net.Sockets.ProtocolType, System.Net.Sockets.SocketAsyncEventArgs)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="socketType" position="0" attrib="0" type="System.Net.Sockets.SocketType" />
                  <parameter name="protocolType" position="1" attrib="0" type="System.Net.Sockets.ProtocolType" />
                  <parameter name="e" position="2" attrib="0" type="System.Net.Sockets.SocketAsyncEventArgs" />
                </parameters>
              </method>
              <method name="Disconnect(System.Boolean)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="reuseSocket" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.Sockets.SocketAsyncEventArgs" />
                </parameters>
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="DuplicateAndClose(System.Int32)" attrib="134" returntype="System.Net.Sockets.SocketInformation">
                <attributes />
                <parameters>
                  <parameter name="targetProcessId" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="EndAccept(System.IAsyncResult)" attrib="134" returntype="System.Net.Sockets.Socket">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndAccept(out System.Byte[]&amp;, System.IAsyncResult)" attrib="134" returntype="System.Net.Sockets.Socket">
                <parameters>
                  <parameter name="buffer" position="0" attrib="2" type="System.Byte[]" direction="out" />
                  <parameter name="asyncResult" position="1" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndAccept(out System.Byte[]&amp;, out System.Int32&amp;, System.IAsyncResult)" attrib="134" returntype="System.Net.Sockets.Socket">
                <parameters>
                  <parameter name="buffer" position="0" attrib="2" type="System.Byte[]" direction="out" />
                  <parameter name="bytesTransferred" position="1" attrib="2" type="System.Int32" direction="out" />
                  <parameter name="asyncResult" position="2" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndConnect(System.IAsyncResult)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndDisconnect(System.IAsyncResult)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndReceive(System.IAsyncResult)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndReceive(System.IAsyncResult, out System.Net.Sockets.SocketError&amp;)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                  <parameter name="errorCode" position="1" attrib="2" type="System.Net.Sockets.SocketError" direction="out" />
                </parameters>
              </method>
              <method name="EndReceiveFrom(System.IAsyncResult, System.Net.EndPoint&amp;)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                  <parameter name="endPoint" position="1" attrib="0" type="System.Net.EndPoint" direction="ref" />
                </parameters>
              </method>
              <method name="EndReceiveMessageFrom(System.IAsyncResult, System.Net.Sockets.SocketFlags&amp;, System.Net.EndPoint&amp;, out System.Net.Sockets.IPPacketInformation&amp;)" attrib="134" returntype="System.Int32">
                <attributes />
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" direction="ref" />
                  <parameter name="endPoint" position="2" attrib="0" type="System.Net.EndPoint" direction="ref" />
                  <parameter name="ipPacketInformation" position="3" attrib="2" type="System.Net.Sockets.IPPacketInformation" direction="out" />
                </parameters>
              </method>
              <method name="EndSend(System.IAsyncResult)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndSend(System.IAsyncResult, out System.Net.Sockets.SocketError&amp;)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                  <parameter name="errorCode" position="1" attrib="2" type="System.Net.Sockets.SocketError" direction="out" />
                </parameters>
              </method>
              <method name="EndSendFile(System.IAsyncResult)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndSendTo(System.IAsyncResult)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="GetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName)" attrib="134" returntype="System.Object">
                <parameters>
                  <parameter name="optionLevel" position="0" attrib="0" type="System.Net.Sockets.SocketOptionLevel" />
                  <parameter name="optionName" position="1" attrib="0" type="System.Net.Sockets.SocketOptionName" />
                </parameters>
              </method>
              <method name="GetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Byte[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="optionLevel" position="0" attrib="0" type="System.Net.Sockets.SocketOptionLevel" />
                  <parameter name="optionName" position="1" attrib="0" type="System.Net.Sockets.SocketOptionName" />
                  <parameter name="optionValue" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="GetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Int32)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="optionLevel" position="0" attrib="0" type="System.Net.Sockets.SocketOptionLevel" />
                  <parameter name="optionName" position="1" attrib="0" type="System.Net.Sockets.SocketOptionName" />
                  <parameter name="optionLength" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IOControl(System.Int32, System.Byte[], System.Byte[])" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="ioControlCode" position="0" attrib="0" type="System.Int32" />
                  <parameter name="optionInValue" position="1" attrib="0" type="System.Byte[]" />
                  <parameter name="optionOutValue" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="IOControl(System.Net.Sockets.IOControlCode, System.Byte[], System.Byte[])" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="ioControlCode" position="0" attrib="0" type="System.Net.Sockets.IOControlCode" />
                  <parameter name="optionInValue" position="1" attrib="0" type="System.Byte[]" />
                  <parameter name="optionOutValue" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="Listen(System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="backlog" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Poll(System.Int32, System.Net.Sockets.SelectMode)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="microSeconds" position="0" attrib="0" type="System.Int32" />
                  <parameter name="mode" position="1" attrib="0" type="System.Net.Sockets.SelectMode" />
                </parameters>
              </method>
              <method name="Receive(System.Byte[])" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="Receive(System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]])" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffers" position="0" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                </parameters>
              </method>
              <method name="Receive(System.Byte[], System.Net.Sockets.SocketFlags)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" />
                </parameters>
              </method>
              <method name="Receive(System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]], System.Net.Sockets.SocketFlags)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffers" position="0" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" />
                </parameters>
              </method>
              <method name="Receive(System.Byte[], System.Int32, System.Net.Sockets.SocketFlags)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="size" position="1" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="2" attrib="0" type="System.Net.Sockets.SocketFlags" />
                </parameters>
              </method>
              <method name="Receive(System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]], System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError&amp;)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="buffers" position="0" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="errorCode" position="2" attrib="2" type="System.Net.Sockets.SocketError" direction="out" />
                </parameters>
              </method>
              <method name="Receive(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                </parameters>
              </method>
              <method name="Receive(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError&amp;)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="errorCode" position="4" attrib="2" type="System.Net.Sockets.SocketError" direction="out" />
                </parameters>
              </method>
              <method name="ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.Sockets.SocketAsyncEventArgs" />
                </parameters>
              </method>
              <method name="ReceiveFrom(System.Byte[], System.Net.EndPoint&amp;)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="remoteEP" position="1" attrib="0" type="System.Net.EndPoint" direction="ref" />
                </parameters>
              </method>
              <method name="ReceiveFrom(System.Byte[], System.Net.Sockets.SocketFlags, System.Net.EndPoint&amp;)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="remoteEP" position="2" attrib="0" type="System.Net.EndPoint" direction="ref" />
                </parameters>
              </method>
              <method name="ReceiveFrom(System.Byte[], System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint&amp;)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="size" position="1" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="2" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="remoteEP" position="3" attrib="0" type="System.Net.EndPoint" direction="ref" />
                </parameters>
              </method>
              <method name="ReceiveFrom(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint&amp;)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="remoteEP" position="4" attrib="0" type="System.Net.EndPoint" direction="ref" />
                </parameters>
              </method>
              <method name="ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.Sockets.SocketAsyncEventArgs" />
                </parameters>
              </method>
              <method name="ReceiveMessageFrom(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags&amp;, System.Net.EndPoint&amp;, out System.Net.Sockets.IPPacketInformation&amp;)" attrib="134" returntype="System.Int32">
                <attributes />
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" direction="ref" />
                  <parameter name="remoteEP" position="4" attrib="0" type="System.Net.EndPoint" direction="ref" />
                  <parameter name="ipPacketInformation" position="5" attrib="2" type="System.Net.Sockets.IPPacketInformation" direction="out" />
                </parameters>
              </method>
              <method name="ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" attrib="134" returntype="System.Boolean">
                <attributes />
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.Sockets.SocketAsyncEventArgs" />
                </parameters>
              </method>
              <method name="Select(System.Collections.IList, System.Collections.IList, System.Collections.IList, System.Int32)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="checkRead" position="0" attrib="0" type="System.Collections.IList" />
                  <parameter name="checkWrite" position="1" attrib="0" type="System.Collections.IList" />
                  <parameter name="checkError" position="2" attrib="0" type="System.Collections.IList" />
                  <parameter name="microSeconds" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Send(System.Byte[])" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="Send(System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]])" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffers" position="0" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                </parameters>
              </method>
              <method name="Send(System.Byte[], System.Net.Sockets.SocketFlags)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" />
                </parameters>
              </method>
              <method name="Send(System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]], System.Net.Sockets.SocketFlags)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffers" position="0" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" />
                </parameters>
              </method>
              <method name="Send(System.Byte[], System.Int32, System.Net.Sockets.SocketFlags)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="size" position="1" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="2" attrib="0" type="System.Net.Sockets.SocketFlags" />
                </parameters>
              </method>
              <method name="Send(System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]], System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError&amp;)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="buffers" position="0" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="errorCode" position="2" attrib="2" type="System.Net.Sockets.SocketError" direction="out" />
                </parameters>
              </method>
              <method name="Send(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                </parameters>
              </method>
              <method name="Send(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError&amp;)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="errorCode" position="4" attrib="2" type="System.Net.Sockets.SocketError" direction="out" />
                </parameters>
              </method>
              <method name="SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.Sockets.SocketAsyncEventArgs" />
                </parameters>
              </method>
              <method name="SendFile(System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SendFile(System.String, System.Byte[], System.Byte[], System.Net.Sockets.TransmitFileOptions)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="preBuffer" position="1" attrib="0" type="System.Byte[]" />
                  <parameter name="postBuffer" position="2" attrib="0" type="System.Byte[]" />
                  <parameter name="flags" position="3" attrib="0" type="System.Net.Sockets.TransmitFileOptions" />
                </parameters>
              </method>
              <method name="SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" attrib="134" returntype="System.Boolean">
                <attributes />
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.Sockets.SocketAsyncEventArgs" />
                </parameters>
              </method>
              <method name="SendTo(System.Byte[], System.Net.EndPoint)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="remoteEP" position="1" attrib="0" type="System.Net.EndPoint" />
                </parameters>
              </method>
              <method name="SendTo(System.Byte[], System.Net.Sockets.SocketFlags, System.Net.EndPoint)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="socketFlags" position="1" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="remoteEP" position="2" attrib="0" type="System.Net.EndPoint" />
                </parameters>
              </method>
              <method name="SendTo(System.Byte[], System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="size" position="1" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="2" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="remoteEP" position="3" attrib="0" type="System.Net.EndPoint" />
                </parameters>
              </method>
              <method name="SendTo(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="size" position="2" attrib="0" type="System.Int32" />
                  <parameter name="socketFlags" position="3" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="remoteEP" position="4" attrib="0" type="System.Net.EndPoint" />
                </parameters>
              </method>
              <method name="SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.Sockets.SocketAsyncEventArgs" />
                </parameters>
              </method>
              <method name="SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="level" position="0" attrib="0" type="System.Net.Sockets.IPProtectionLevel" />
                </parameters>
              </method>
              <method name="SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Boolean)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="optionLevel" position="0" attrib="0" type="System.Net.Sockets.SocketOptionLevel" />
                  <parameter name="optionName" position="1" attrib="0" type="System.Net.Sockets.SocketOptionName" />
                  <parameter name="optionValue" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Byte[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="optionLevel" position="0" attrib="0" type="System.Net.Sockets.SocketOptionLevel" />
                  <parameter name="optionName" position="1" attrib="0" type="System.Net.Sockets.SocketOptionName" />
                  <parameter name="optionValue" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="optionLevel" position="0" attrib="0" type="System.Net.Sockets.SocketOptionLevel" />
                  <parameter name="optionName" position="1" attrib="0" type="System.Net.Sockets.SocketOptionName" />
                  <parameter name="optionValue" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Object)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="optionLevel" position="0" attrib="0" type="System.Net.Sockets.SocketOptionLevel" />
                  <parameter name="optionName" position="1" attrib="0" type="System.Net.Sockets.SocketOptionName" />
                  <parameter name="optionValue" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Shutdown(System.Net.Sockets.SocketShutdown)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="how" position="0" attrib="0" type="System.Net.Sockets.SocketShutdown" />
                </parameters>
              </method>
              <method name="~Socket()" attrib="196" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="SocketAsyncEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="AcceptSocket" attrib="0" ptype="System.Net.Sockets.Socket">
                <methods>
                  <method name="get_AcceptSocket()" attrib="2182" returntype="System.Net.Sockets.Socket">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_AcceptSocket(System.Net.Sockets.Socket)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Sockets.Socket" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Buffer" attrib="0" ptype="System.Byte[]">
                <methods>
                  <method name="get_Buffer()" attrib="2182" returntype="System.Byte[]">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="BufferList" attrib="0" ptype="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]">
                <methods>
                  <method name="get_BufferList()" attrib="2182" returntype="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]">
                    <parameters />
                  </method>
                  <method name="set_BufferList(System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]])" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="BytesTransferred" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_BytesTransferred()" attrib="2182" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ConnectByNameError" attrib="0" ptype="System.Exception">
                <methods>
                  <method name="get_ConnectByNameError()" attrib="2182" returntype="System.Exception">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ConnectSocket" attrib="0" ptype="System.Net.Sockets.Socket">
                <methods>
                  <method name="get_ConnectSocket()" attrib="2182" returntype="System.Net.Sockets.Socket">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DisconnectReuseSocket" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_DisconnectReuseSocket()" attrib="2182" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_DisconnectReuseSocket(System.Boolean)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="LastOperation" attrib="0" ptype="System.Net.Sockets.SocketAsyncOperation">
                <methods>
                  <method name="get_LastOperation()" attrib="2182" returntype="System.Net.Sockets.SocketAsyncOperation">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Offset" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Offset()" attrib="2182" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReceiveMessageFromPacketInfo" attrib="0" ptype="System.Net.Sockets.IPPacketInformation">
                <methods>
                  <method name="get_ReceiveMessageFromPacketInfo()" attrib="2182" returntype="System.Net.Sockets.IPPacketInformation">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RemoteEndPoint" attrib="0" ptype="System.Net.EndPoint">
                <methods>
                  <method name="get_RemoteEndPoint()" attrib="2182" returntype="System.Net.EndPoint">
                    <parameters />
                  </method>
                  <method name="set_RemoteEndPoint(System.Net.EndPoint)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.EndPoint" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SendPacketsElements" attrib="0" ptype="System.Net.Sockets.SendPacketsElement[]">
                <methods>
                  <method name="get_SendPacketsElements()" attrib="2182" returntype="System.Net.Sockets.SendPacketsElement[]">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_SendPacketsElements(System.Net.Sockets.SendPacketsElement[])" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Sockets.SendPacketsElement[]" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SendPacketsFlags" attrib="0" ptype="System.Net.Sockets.TransmitFileOptions">
                <methods>
                  <method name="get_SendPacketsFlags()" attrib="2182" returntype="System.Net.Sockets.TransmitFileOptions">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_SendPacketsFlags(System.Net.Sockets.TransmitFileOptions)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Sockets.TransmitFileOptions" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SendPacketsSendSize" attrib="0" ptype="System.Int32">
                <attributes />
                <methods>
                  <method name="get_SendPacketsSendSize()" attrib="2182" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_SendPacketsSendSize(System.Int32)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SocketError" attrib="0" ptype="System.Net.Sockets.SocketError">
                <methods>
                  <method name="get_SocketError()" attrib="2182" returntype="System.Net.Sockets.SocketError">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_SocketError(System.Net.Sockets.SocketError)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Sockets.SocketError" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SocketFlags" attrib="0" ptype="System.Net.Sockets.SocketFlags">
                <methods>
                  <method name="get_SocketFlags()" attrib="2182" returntype="System.Net.Sockets.SocketFlags">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_SocketFlags(System.Net.Sockets.SocketFlags)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Sockets.SocketFlags" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UserToken" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_UserToken()" attrib="2182" returntype="System.Object">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_UserToken(System.Object)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="Completed" attrib="0" eventtype="System.EventHandler`1[System.Net.Sockets.SocketAsyncEventArgs]" />
            </events>
            <methods>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="System.Net.Sockets.SocketAsyncEventArgs" />
                </parameters>
              </method>
              <method name="SetBuffer(System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="offset" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SetBuffer(System.Byte[], System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="~SocketAsyncEventArgs()" attrib="196" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="SocketAsyncOperation" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Accept" attrib="32854" fieldtype="System.Net.Sockets.SocketAsyncOperation" value="1" />
              <field name="Connect" attrib="32854" fieldtype="System.Net.Sockets.SocketAsyncOperation" value="2" />
              <field name="Disconnect" attrib="32854" fieldtype="System.Net.Sockets.SocketAsyncOperation" value="3" />
              <field name="None" attrib="32854" fieldtype="System.Net.Sockets.SocketAsyncOperation" value="0" />
              <field name="Receive" attrib="32854" fieldtype="System.Net.Sockets.SocketAsyncOperation" value="4" />
              <field name="ReceiveFrom" attrib="32854" fieldtype="System.Net.Sockets.SocketAsyncOperation" value="5" />
              <field name="ReceiveMessageFrom" attrib="32854" fieldtype="System.Net.Sockets.SocketAsyncOperation" value="6" />
              <field name="Send" attrib="32854" fieldtype="System.Net.Sockets.SocketAsyncOperation" value="7" />
              <field name="SendPackets" attrib="32854" fieldtype="System.Net.Sockets.SocketAsyncOperation" value="8" />
              <field name="SendTo" attrib="32854" fieldtype="System.Net.Sockets.SocketAsyncOperation" value="9" />
            </fields>
          </class>
          <class name="SocketClientAccessPolicyProtocol" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                <properties>
                  <property name="State" value="Never" />
                </properties>
              </attribute>
              <attribute name="System.ObsoleteAttribute">
                <properties>
                  <property name="Message" value="This API supports the .NET Framework infrastructure and is not intended to be used directly from your code." />
                  <property name="IsError" value="True" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Http" attrib="32854" fieldtype="System.Net.Sockets.SocketClientAccessPolicyProtocol" value="1" />
              <field name="Tcp" attrib="32854" fieldtype="System.Net.Sockets.SocketClientAccessPolicyProtocol" value="0" />
            </fields>
          </class>
          <class name="SocketError" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AccessDenied" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10013" />
              <field name="AddressAlreadyInUse" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10048" />
              <field name="AddressFamilyNotSupported" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10047" />
              <field name="AddressNotAvailable" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10049" />
              <field name="AlreadyInProgress" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10037" />
              <field name="ConnectionAborted" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10053" />
              <field name="ConnectionRefused" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10061" />
              <field name="ConnectionReset" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10054" />
              <field name="DestinationAddressRequired" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10039" />
              <field name="Disconnecting" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10101" />
              <field name="Fault" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10014" />
              <field name="HostDown" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10064" />
              <field name="HostNotFound" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="11001" />
              <field name="HostUnreachable" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10065" />
              <field name="IOPending" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="997" />
              <field name="InProgress" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10036" />
              <field name="Interrupted" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10004" />
              <field name="InvalidArgument" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10022" />
              <field name="IsConnected" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10056" />
              <field name="MessageSize" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10040" />
              <field name="NetworkDown" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10050" />
              <field name="NetworkReset" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10052" />
              <field name="NetworkUnreachable" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10051" />
              <field name="NoBufferSpaceAvailable" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10055" />
              <field name="NoData" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="11004" />
              <field name="NoRecovery" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="11003" />
              <field name="NotConnected" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10057" />
              <field name="NotInitialized" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10093" />
              <field name="NotSocket" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10038" />
              <field name="OperationAborted" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="995" />
              <field name="OperationNotSupported" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10045" />
              <field name="ProcessLimit" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10067" />
              <field name="ProtocolFamilyNotSupported" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10046" />
              <field name="ProtocolNotSupported" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10043" />
              <field name="ProtocolOption" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10042" />
              <field name="ProtocolType" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10041" />
              <field name="Shutdown" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10058" />
              <field name="SocketError" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="-1" />
              <field name="SocketNotSupported" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10044" />
              <field name="Success" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="0" />
              <field name="SystemNotReady" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10091" />
              <field name="TimedOut" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10060" />
              <field name="TooManyOpenSockets" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10024" />
              <field name="TryAgain" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="11002" />
              <field name="TypeNotFound" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10109" />
              <field name="VersionNotSupported" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10092" />
              <field name="WouldBlock" attrib="32854" fieldtype="System.Net.Sockets.SocketError" value="10035" />
            </fields>
          </class>
          <class name="SocketException" type="class" base="System.ComponentModel.Win32Exception" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="errorCode" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ErrorCode" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ErrorCode()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Message" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Message()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SocketErrorCode" attrib="0" ptype="System.Net.Sockets.SocketError">
                <methods>
                  <method name="get_SocketErrorCode()" attrib="2182" returntype="System.Net.Sockets.SocketError">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="SocketFlags" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Broadcast" attrib="32854" fieldtype="System.Net.Sockets.SocketFlags" value="1024" />
              <field name="ControlDataTruncated" attrib="32854" fieldtype="System.Net.Sockets.SocketFlags" value="512" />
              <field name="DontRoute" attrib="32854" fieldtype="System.Net.Sockets.SocketFlags" value="4" />
              <field name="MaxIOVectorLength" attrib="32854" fieldtype="System.Net.Sockets.SocketFlags" value="16" />
              <field name="Multicast" attrib="32854" fieldtype="System.Net.Sockets.SocketFlags" value="2048" />
              <field name="None" attrib="32854" fieldtype="System.Net.Sockets.SocketFlags" value="0" />
              <field name="OutOfBand" attrib="32854" fieldtype="System.Net.Sockets.SocketFlags" value="1" />
              <field name="Partial" attrib="32854" fieldtype="System.Net.Sockets.SocketFlags" value="32768" />
              <field name="Peek" attrib="32854" fieldtype="System.Net.Sockets.SocketFlags" value="2" />
              <field name="Truncated" attrib="32854" fieldtype="System.Net.Sockets.SocketFlags" value="256" />
            </fields>
          </class>
          <class name="SocketInformation" type="struct" base="System.ValueType" sealed="true" serializable="true" charset="Ansi" layout="Sequential">
            <properties>
              <property name="Options" attrib="0" ptype="System.Net.Sockets.SocketInformationOptions">
                <methods>
                  <method name="get_Options()" attrib="2182" returntype="System.Net.Sockets.SocketInformationOptions">
                    <parameters />
                  </method>
                  <method name="set_Options(System.Net.Sockets.SocketInformationOptions)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Sockets.SocketInformationOptions" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ProtocolInformation" attrib="0" ptype="System.Byte[]">
                <methods>
                  <method name="get_ProtocolInformation()" attrib="2182" returntype="System.Byte[]">
                    <parameters />
                  </method>
                  <method name="set_ProtocolInformation(System.Byte[])" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Byte[]" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="SocketInformationOptions" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Connected" attrib="32854" fieldtype="System.Net.Sockets.SocketInformationOptions" value="2" />
              <field name="Listening" attrib="32854" fieldtype="System.Net.Sockets.SocketInformationOptions" value="4" />
              <field name="NonBlocking" attrib="32854" fieldtype="System.Net.Sockets.SocketInformationOptions" value="1" />
              <field name="UseOnlyOverlappedIO" attrib="32854" fieldtype="System.Net.Sockets.SocketInformationOptions" value="8" />
            </fields>
          </class>
          <class name="SocketOptionLevel" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="IP" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionLevel" value="0" />
              <field name="IPv6" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionLevel" value="41" />
              <field name="Socket" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionLevel" value="65535" />
              <field name="Tcp" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionLevel" value="6" />
              <field name="Udp" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionLevel" value="17" />
            </fields>
          </class>
          <class name="SocketOptionName" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AcceptConnection" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="2" />
              <field name="AddMembership" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="12" />
              <field name="AddSourceMembership" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="15" />
              <field name="BlockSource" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="17" />
              <field name="Broadcast" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="32" />
              <field name="BsdUrgent" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="2" />
              <field name="ChecksumCoverage" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="20" />
              <field name="Debug" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="1" />
              <field name="DontFragment" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="14" />
              <field name="DontLinger" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="-129" />
              <field name="DontRoute" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="16" />
              <field name="DropMembership" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="13" />
              <field name="DropSourceMembership" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="16" />
              <field name="Error" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="4103" />
              <field name="ExclusiveAddressUse" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="-5" />
              <field name="Expedited" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="2" />
              <field name="HeaderIncluded" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="2" />
              <field name="HopLimit" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="21" />
              <field name="IPOptions" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="1" />
              <field name="IPProtectionLevel" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="23" />
              <field name="IPv6Only" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="27" />
              <field name="IpTimeToLive" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="4" />
              <field name="KeepAlive" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="8" />
              <field name="Linger" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="128" />
              <field name="MaxConnections" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="2147483647" />
              <field name="MulticastInterface" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="9" />
              <field name="MulticastLoopback" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="11" />
              <field name="MulticastTimeToLive" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="10" />
              <field name="NoChecksum" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="1" />
              <field name="NoDelay" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="1" />
              <field name="OutOfBandInline" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="256" />
              <field name="PacketInformation" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="19" />
              <field name="ReceiveBuffer" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="4098" />
              <field name="ReceiveLowWater" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="4100" />
              <field name="ReceiveTimeout" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="4102" />
              <field name="ReuseAddress" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="4" />
              <field name="ReuseUnicastPort" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="12295" />
              <field name="SendBuffer" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="4097" />
              <field name="SendLowWater" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="4099" />
              <field name="SendTimeout" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="4101" />
              <field name="Type" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="4104" />
              <field name="TypeOfService" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="3" />
              <field name="UnblockSource" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="18" />
              <field name="UpdateAcceptContext" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="28683" />
              <field name="UpdateConnectContext" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="28688" />
              <field name="UseLoopback" attrib="32854" fieldtype="System.Net.Sockets.SocketOptionName" value="64" />
            </fields>
          </class>
          <class name="SocketReceiveFromResult" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
            <fields>
              <field name="ReceivedBytes" attrib="6" fieldtype="System.Int32" />
              <field name="RemoteEndPoint" attrib="6" fieldtype="System.Net.EndPoint" />
            </fields>
          </class>
          <class name="SocketReceiveMessageFromResult" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
            <fields>
              <field name="PacketInformation" attrib="6" fieldtype="System.Net.Sockets.IPPacketInformation" />
              <field name="ReceivedBytes" attrib="6" fieldtype="System.Int32" />
              <field name="RemoteEndPoint" attrib="6" fieldtype="System.Net.EndPoint" />
              <field name="SocketFlags" attrib="6" fieldtype="System.Net.Sockets.SocketFlags" />
            </fields>
          </class>
          <class name="SocketShutdown" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Both" attrib="32854" fieldtype="System.Net.Sockets.SocketShutdown" value="2" />
              <field name="Receive" attrib="32854" fieldtype="System.Net.Sockets.SocketShutdown" value="0" />
              <field name="Send" attrib="32854" fieldtype="System.Net.Sockets.SocketShutdown" value="1" />
            </fields>
          </class>
          <class name="SocketTaskExtensions" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            </attributes>
            <methods>
              <method name="AcceptAsync(System.Net.Sockets.Socket)" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[System.Net.Sockets.Socket]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                </parameters>
              </method>
              <method name="AcceptAsync(System.Net.Sockets.Socket, System.Net.Sockets.Socket)" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[System.Net.Sockets.Socket]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                  <parameter name="acceptSocket" position="1" attrib="0" type="System.Net.Sockets.Socket" />
                </parameters>
              </method>
              <method name="ConnectAsync(System.Net.Sockets.Socket, System.Net.EndPoint)" attrib="150" static="true" returntype="System.Threading.Tasks.Task">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                  <parameter name="remoteEP" position="1" attrib="0" type="System.Net.EndPoint" />
                </parameters>
              </method>
              <method name="ConnectAsync(System.Net.Sockets.Socket, System.Net.IPAddress, System.Int32)" attrib="150" static="true" returntype="System.Threading.Tasks.Task">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                  <parameter name="address" position="1" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="port" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ConnectAsync(System.Net.Sockets.Socket, System.Net.IPAddress[], System.Int32)" attrib="150" static="true" returntype="System.Threading.Tasks.Task">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                  <parameter name="addresses" position="1" attrib="0" type="System.Net.IPAddress[]" />
                  <parameter name="port" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ConnectAsync(System.Net.Sockets.Socket, System.String, System.Int32)" attrib="150" static="true" returntype="System.Threading.Tasks.Task">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                  <parameter name="host" position="1" attrib="0" type="System.String" />
                  <parameter name="port" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ReceiveAsync(System.Net.Sockets.Socket, System.ArraySegment`1[System.Byte], System.Net.Sockets.SocketFlags)" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                  <parameter name="buffer" position="1" attrib="0" type="System.ArraySegment`1[System.Byte]" />
                  <parameter name="socketFlags" position="2" attrib="0" type="System.Net.Sockets.SocketFlags" />
                </parameters>
              </method>
              <method name="ReceiveAsync(System.Net.Sockets.Socket, System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]], System.Net.Sockets.SocketFlags)" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                  <parameter name="buffers" position="1" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                  <parameter name="socketFlags" position="2" attrib="0" type="System.Net.Sockets.SocketFlags" />
                </parameters>
              </method>
              <method name="ReceiveFromAsync(System.Net.Sockets.Socket, System.ArraySegment`1[System.Byte], System.Net.Sockets.SocketFlags, System.Net.EndPoint)" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[System.Net.Sockets.SocketReceiveFromResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                  <parameter name="buffer" position="1" attrib="0" type="System.ArraySegment`1[System.Byte]" />
                  <parameter name="socketFlags" position="2" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="remoteEndPoint" position="3" attrib="0" type="System.Net.EndPoint" />
                </parameters>
              </method>
              <method name="ReceiveMessageFromAsync(System.Net.Sockets.Socket, System.ArraySegment`1[System.Byte], System.Net.Sockets.SocketFlags, System.Net.EndPoint)" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[System.Net.Sockets.SocketReceiveMessageFromResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                  <parameter name="buffer" position="1" attrib="0" type="System.ArraySegment`1[System.Byte]" />
                  <parameter name="socketFlags" position="2" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="remoteEndPoint" position="3" attrib="0" type="System.Net.EndPoint" />
                </parameters>
              </method>
              <method name="SendAsync(System.Net.Sockets.Socket, System.ArraySegment`1[System.Byte], System.Net.Sockets.SocketFlags)" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                  <parameter name="buffer" position="1" attrib="0" type="System.ArraySegment`1[System.Byte]" />
                  <parameter name="socketFlags" position="2" attrib="0" type="System.Net.Sockets.SocketFlags" />
                </parameters>
              </method>
              <method name="SendAsync(System.Net.Sockets.Socket, System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]], System.Net.Sockets.SocketFlags)" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                  <parameter name="buffers" position="1" attrib="0" type="System.Collections.Generic.IList`1[System.ArraySegment`1[System.Byte]]" />
                  <parameter name="socketFlags" position="2" attrib="0" type="System.Net.Sockets.SocketFlags" />
                </parameters>
              </method>
              <method name="SendToAsync(System.Net.Sockets.Socket, System.ArraySegment`1[System.Byte], System.Net.Sockets.SocketFlags, System.Net.EndPoint)" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="socket" position="0" attrib="0" type="System.Net.Sockets.Socket" direction="this" />
                  <parameter name="buffer" position="1" attrib="0" type="System.ArraySegment`1[System.Byte]" />
                  <parameter name="socketFlags" position="2" attrib="0" type="System.Net.Sockets.SocketFlags" />
                  <parameter name="remoteEP" position="3" attrib="0" type="System.Net.EndPoint" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SocketType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Dgram" attrib="32854" fieldtype="System.Net.Sockets.SocketType" value="2" />
              <field name="Raw" attrib="32854" fieldtype="System.Net.Sockets.SocketType" value="3" />
              <field name="Rdm" attrib="32854" fieldtype="System.Net.Sockets.SocketType" value="4" />
              <field name="Seqpacket" attrib="32854" fieldtype="System.Net.Sockets.SocketType" value="5" />
              <field name="Stream" attrib="32854" fieldtype="System.Net.Sockets.SocketType" value="1" />
              <field name="Unknown" attrib="32854" fieldtype="System.Net.Sockets.SocketType" value="-1" />
            </fields>
          </class>
          <class name="TcpClient" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Net.IPEndPoint)" attrib="6278">
                <parameters>
                  <parameter name="localEP" position="0" attrib="0" type="System.Net.IPEndPoint" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Sockets.AddressFamily)" attrib="6278">
                <parameters>
                  <parameter name="family" position="0" attrib="0" type="System.Net.Sockets.AddressFamily" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="hostname" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Active" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Active()" attrib="2180" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Active(System.Boolean)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Available" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Available()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Client" attrib="0" ptype="System.Net.Sockets.Socket">
                <methods>
                  <method name="get_Client()" attrib="2182" returntype="System.Net.Sockets.Socket">
                    <parameters />
                  </method>
                  <method name="set_Client(System.Net.Sockets.Socket)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Sockets.Socket" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Connected" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Connected()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExclusiveAddressUse" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_ExclusiveAddressUse()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_ExclusiveAddressUse(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="LingerState" attrib="0" ptype="System.Net.Sockets.LingerOption">
                <methods>
                  <method name="get_LingerState()" attrib="2182" returntype="System.Net.Sockets.LingerOption">
                    <parameters />
                  </method>
                  <method name="set_LingerState(System.Net.Sockets.LingerOption)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Sockets.LingerOption" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="NoDelay" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_NoDelay()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_NoDelay(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReceiveBufferSize" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ReceiveBufferSize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ReceiveBufferSize(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReceiveTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ReceiveTimeout()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_ReceiveTimeout(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SendBufferSize" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_SendBufferSize()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_SendBufferSize(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SendTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_SendTimeout()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_SendTimeout(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="BeginConnect(System.Net.IPAddress, System.Int32, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                  <parameter name="requestCallback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginConnect(System.Net.IPAddress[], System.Int32, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="addresses" position="0" attrib="0" type="System.Net.IPAddress[]" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                  <parameter name="requestCallback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginConnect(System.String, System.Int32, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                  <parameter name="requestCallback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Close()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Connect(System.Net.IPEndPoint)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="remoteEP" position="0" attrib="0" type="System.Net.IPEndPoint" />
                </parameters>
              </method>
              <method name="Connect(System.Net.IPAddress, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Connect(System.Net.IPAddress[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="ipAddresses" position="0" attrib="0" type="System.Net.IPAddress[]" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Connect(System.String, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="hostname" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ConnectAsync(System.Net.IPAddress, System.Int32)" attrib="16518" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ConnectAsync(System.Net.IPAddress[], System.Int32)" attrib="16518" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="addresses" position="0" attrib="0" type="System.Net.IPAddress[]" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ConnectAsync(System.String, System.Int32)" attrib="16518" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="host" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="EndConnect(System.IAsyncResult)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="GetStream()" attrib="134" returntype="System.Net.Sockets.NetworkStream">
                <parameters />
              </method>
              <method name="~TcpClient()" attrib="196" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TcpListener" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. http://go.microsoft.com/fwlink/?linkid=14202" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="port" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.IPEndPoint)" attrib="6278">
                <parameters>
                  <parameter name="localEP" position="0" attrib="0" type="System.Net.IPEndPoint" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.IPAddress, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="localaddr" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Active" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Active()" attrib="2180" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExclusiveAddressUse" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_ExclusiveAddressUse()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_ExclusiveAddressUse(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="LocalEndpoint" attrib="0" ptype="System.Net.EndPoint">
                <methods>
                  <method name="get_LocalEndpoint()" attrib="2182" returntype="System.Net.EndPoint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Server" attrib="0" ptype="System.Net.Sockets.Socket">
                <methods>
                  <method name="get_Server()" attrib="2182" returntype="System.Net.Sockets.Socket">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AcceptSocket()" attrib="134" returntype="System.Net.Sockets.Socket">
                <parameters />
              </method>
              <method name="AcceptSocketAsync()" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Net.Sockets.Socket]">
                <parameters />
              </method>
              <method name="AcceptTcpClient()" attrib="134" returntype="System.Net.Sockets.TcpClient">
                <parameters />
              </method>
              <method name="AcceptTcpClientAsync()" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Net.Sockets.TcpClient]">
                <parameters />
              </method>
              <method name="AllowNatTraversal(System.Boolean)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="allowed" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="BeginAcceptSocket(System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginAcceptTcpClient(System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Create(System.Int32)" attrib="150" static="true" returntype="System.Net.Sockets.TcpListener">
                <parameters>
                  <parameter name="port" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="EndAcceptSocket(System.IAsyncResult)" attrib="134" returntype="System.Net.Sockets.Socket">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="EndAcceptTcpClient(System.IAsyncResult)" attrib="134" returntype="System.Net.Sockets.TcpClient">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Pending()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="Start()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Start(System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="backlog" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Stop()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TransmitFileOptions" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Disconnect" attrib="32854" fieldtype="System.Net.Sockets.TransmitFileOptions" value="1" />
              <field name="ReuseSocket" attrib="32854" fieldtype="System.Net.Sockets.TransmitFileOptions" value="2" />
              <field name="UseDefaultWorkerThread" attrib="32854" fieldtype="System.Net.Sockets.TransmitFileOptions" value="0" />
              <field name="UseKernelApc" attrib="32854" fieldtype="System.Net.Sockets.TransmitFileOptions" value="32" />
              <field name="UseSystemThread" attrib="32854" fieldtype="System.Net.Sockets.TransmitFileOptions" value="16" />
              <field name="WriteBehind" attrib="32854" fieldtype="System.Net.Sockets.TransmitFileOptions" value="4" />
            </fields>
          </class>
          <class name="UdpClient" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="port" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.IPEndPoint)" attrib="6278">
                <parameters>
                  <parameter name="localEP" position="0" attrib="0" type="System.Net.IPEndPoint" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.Sockets.AddressFamily)" attrib="6278">
                <parameters>
                  <parameter name="family" position="0" attrib="0" type="System.Net.Sockets.AddressFamily" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Net.Sockets.AddressFamily)" attrib="6278">
                <parameters>
                  <parameter name="port" position="0" attrib="0" type="System.Int32" />
                  <parameter name="family" position="1" attrib="0" type="System.Net.Sockets.AddressFamily" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="hostname" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Active" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Active()" attrib="2180" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Active(System.Boolean)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Available" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Available()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Client" attrib="0" ptype="System.Net.Sockets.Socket">
                <methods>
                  <method name="get_Client()" attrib="2182" returntype="System.Net.Sockets.Socket">
                    <parameters />
                  </method>
                  <method name="set_Client(System.Net.Sockets.Socket)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.Sockets.Socket" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="DontFragment" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_DontFragment()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_DontFragment(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="EnableBroadcast" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_EnableBroadcast()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_EnableBroadcast(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExclusiveAddressUse" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_ExclusiveAddressUse()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_ExclusiveAddressUse(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MulticastLoopback" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_MulticastLoopback()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_MulticastLoopback(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Ttl" attrib="0" ptype="System.Int16">
                <methods>
                  <method name="get_Ttl()" attrib="2182" returntype="System.Int16">
                    <parameters />
                  </method>
                  <method name="set_Ttl(System.Int16)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int16" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AllowNatTraversal(System.Boolean)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="allowed" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="BeginReceive(System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="requestCallback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginSend(System.Byte[], System.Int32, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="datagram" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="bytes" position="1" attrib="0" type="System.Int32" />
                  <parameter name="requestCallback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginSend(System.Byte[], System.Int32, System.Net.IPEndPoint, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="datagram" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="bytes" position="1" attrib="0" type="System.Int32" />
                  <parameter name="endPoint" position="2" attrib="0" type="System.Net.IPEndPoint" />
                  <parameter name="requestCallback" position="3" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="4" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BeginSend(System.Byte[], System.Int32, System.String, System.Int32, System.AsyncCallback, System.Object)" attrib="16518" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="datagram" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="bytes" position="1" attrib="0" type="System.Int32" />
                  <parameter name="hostname" position="2" attrib="0" type="System.String" />
                  <parameter name="port" position="3" attrib="0" type="System.Int32" />
                  <parameter name="requestCallback" position="4" attrib="0" type="System.AsyncCallback" />
                  <parameter name="state" position="5" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Close()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Connect(System.Net.IPEndPoint)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="endPoint" position="0" attrib="0" type="System.Net.IPEndPoint" />
                </parameters>
              </method>
              <method name="Connect(System.Net.IPAddress, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="addr" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Connect(System.String, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="hostname" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="DropMulticastGroup(System.Net.IPAddress)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="multicastAddr" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
              <method name="DropMulticastGroup(System.Net.IPAddress, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="multicastAddr" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="ifindex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="EndReceive(System.IAsyncResult, System.Net.IPEndPoint&amp;)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                  <parameter name="remoteEP" position="1" attrib="0" type="System.Net.IPEndPoint" direction="ref" />
                </parameters>
              </method>
              <method name="EndSend(System.IAsyncResult)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="asyncResult" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="JoinMulticastGroup(System.Net.IPAddress)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="multicastAddr" position="0" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
              <method name="JoinMulticastGroup(System.Int32, System.Net.IPAddress)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="ifindex" position="0" attrib="0" type="System.Int32" />
                  <parameter name="multicastAddr" position="1" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
              <method name="JoinMulticastGroup(System.Net.IPAddress, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="multicastAddr" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="timeToLive" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="JoinMulticastGroup(System.Net.IPAddress, System.Net.IPAddress)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="multicastAddr" position="0" attrib="0" type="System.Net.IPAddress" />
                  <parameter name="localAddress" position="1" attrib="0" type="System.Net.IPAddress" />
                </parameters>
              </method>
              <method name="Receive(System.Net.IPEndPoint&amp;)" attrib="134" returntype="System.Byte[]">
                <parameters>
                  <parameter name="remoteEP" position="0" attrib="0" type="System.Net.IPEndPoint" direction="ref" />
                </parameters>
              </method>
              <method name="ReceiveAsync()" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Net.Sockets.UdpReceiveResult]">
                <parameters />
              </method>
              <method name="Send(System.Byte[], System.Int32)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="dgram" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="bytes" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Send(System.Byte[], System.Int32, System.Net.IPEndPoint)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="dgram" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="bytes" position="1" attrib="0" type="System.Int32" />
                  <parameter name="endPoint" position="2" attrib="0" type="System.Net.IPEndPoint" />
                </parameters>
              </method>
              <method name="Send(System.Byte[], System.Int32, System.String, System.Int32)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="dgram" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="bytes" position="1" attrib="0" type="System.Int32" />
                  <parameter name="hostname" position="2" attrib="0" type="System.String" />
                  <parameter name="port" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SendAsync(System.Byte[], System.Int32)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Int32]">
                <parameters>
                  <parameter name="datagram" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="bytes" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SendAsync(System.Byte[], System.Int32, System.Net.IPEndPoint)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Int32]">
                <parameters>
                  <parameter name="datagram" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="bytes" position="1" attrib="0" type="System.Int32" />
                  <parameter name="endPoint" position="2" attrib="0" type="System.Net.IPEndPoint" />
                </parameters>
              </method>
              <method name="SendAsync(System.Byte[], System.Int32, System.String, System.Int32)" attrib="16518" returntype="System.Threading.Tasks.Task`1[System.Int32]">
                <parameters>
                  <parameter name="datagram" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="bytes" position="1" attrib="0" type="System.Int32" />
                  <parameter name="hostname" position="2" attrib="0" type="System.String" />
                  <parameter name="port" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UdpReceiveResult" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
            <interfaces>
              <interface name="System.IEquatable`1[System.Net.Sockets.UdpReceiveResult]" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Byte[], System.Net.IPEndPoint)" attrib="6278">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="remoteEndPoint" position="1" attrib="0" type="System.Net.IPEndPoint" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Buffer" attrib="0" ptype="System.Byte[]">
                <methods>
                  <method name="get_Buffer()" attrib="2182" returntype="System.Byte[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RemoteEndPoint" attrib="0" ptype="System.Net.IPEndPoint">
                <methods>
                  <method name="get_RemoteEndPoint()" attrib="2182" returntype="System.Net.IPEndPoint">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Net.Sockets.UdpReceiveResult)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Net.Sockets.UdpReceiveResult" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="op_Equality(System.Net.Sockets.UdpReceiveResult, System.Net.Sockets.UdpReceiveResult)" attrib="2198" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Net.Sockets.UdpReceiveResult" />
                  <parameter name="right" position="1" attrib="0" type="System.Net.Sockets.UdpReceiveResult" />
                </parameters>
              </method>
              <method name="op_Inequality(System.Net.Sockets.UdpReceiveResult, System.Net.Sockets.UdpReceiveResult)" attrib="2198" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Net.Sockets.UdpReceiveResult" />
                  <parameter name="right" position="1" attrib="0" type="System.Net.Sockets.UdpReceiveResult" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Net.WebSockets">
        <classes>
          <class name="ClientWebSocket" type="class" base="System.Net.WebSockets.WebSocket" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="CloseStatus" attrib="0" ptype="System.Nullable`1[System.Net.WebSockets.WebSocketCloseStatus]">
                <methods>
                  <method name="get_CloseStatus()" attrib="2246" virtual="true" is-override="true" returntype="System.Nullable`1[System.Net.WebSockets.WebSocketCloseStatus]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CloseStatusDescription" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_CloseStatusDescription()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Options" attrib="0" ptype="System.Net.WebSockets.ClientWebSocketOptions">
                <methods>
                  <method name="get_Options()" attrib="2182" returntype="System.Net.WebSockets.ClientWebSocketOptions">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="State" attrib="0" ptype="System.Net.WebSockets.WebSocketState">
                <methods>
                  <method name="get_State()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.WebSockets.WebSocketState">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SubProtocol" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SubProtocol()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Abort()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="CloseAsync(System.Net.WebSockets.WebSocketCloseStatus, System.String, System.Threading.CancellationToken)" attrib="198" virtual="true" is-override="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="closeStatus" position="0" attrib="0" type="System.Net.WebSockets.WebSocketCloseStatus" />
                  <parameter name="statusDescription" position="1" attrib="0" type="System.String" />
                  <parameter name="cancellationToken" position="2" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus, System.String, System.Threading.CancellationToken)" attrib="198" virtual="true" is-override="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="closeStatus" position="0" attrib="0" type="System.Net.WebSockets.WebSocketCloseStatus" />
                  <parameter name="statusDescription" position="1" attrib="0" type="System.String" />
                  <parameter name="cancellationToken" position="2" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="ConnectAsync(System.Uri, System.Threading.CancellationToken)" attrib="134" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="uri" position="0" attrib="0" type="System.Uri" />
                  <parameter name="cancellationToken" position="1" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="Dispose()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="ReceiveAsync(System.ArraySegment`1[System.Byte], System.Threading.CancellationToken)" attrib="198" virtual="true" is-override="true" returntype="System.Threading.Tasks.Task`1[System.Net.WebSockets.WebSocketReceiveResult]">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.ArraySegment`1[System.Byte]" />
                  <parameter name="cancellationToken" position="1" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="SendAsync(System.ArraySegment`1[System.Byte], System.Net.WebSockets.WebSocketMessageType, System.Boolean, System.Threading.CancellationToken)" attrib="198" virtual="true" is-override="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.ArraySegment`1[System.Byte]" />
                  <parameter name="messageType" position="1" attrib="0" type="System.Net.WebSockets.WebSocketMessageType" />
                  <parameter name="endOfMessage" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="cancellationToken" position="3" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ClientWebSocketOptions" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="ClientCertificates" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509CertificateCollection">
                <methods>
                  <method name="get_ClientCertificates()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509CertificateCollection">
                    <parameters />
                  </method>
                  <method name="set_ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Cookies" attrib="0" ptype="System.Net.CookieContainer">
                <methods>
                  <method name="get_Cookies()" attrib="2182" returntype="System.Net.CookieContainer">
                    <parameters />
                  </method>
                  <method name="set_Cookies(System.Net.CookieContainer)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.CookieContainer" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Credentials" attrib="0" ptype="System.Net.ICredentials">
                <methods>
                  <method name="get_Credentials()" attrib="2182" returntype="System.Net.ICredentials">
                    <parameters />
                  </method>
                  <method name="set_Credentials(System.Net.ICredentials)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.ICredentials" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="KeepAliveInterval" attrib="0" ptype="System.TimeSpan">
                <methods>
                  <method name="get_KeepAliveInterval()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                  <method name="set_KeepAliveInterval(System.TimeSpan)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.TimeSpan" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Proxy" attrib="0" ptype="System.Net.IWebProxy">
                <methods>
                  <method name="get_Proxy()" attrib="2182" returntype="System.Net.IWebProxy">
                    <parameters />
                  </method>
                  <method name="set_Proxy(System.Net.IWebProxy)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Net.IWebProxy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UseDefaultCredentials" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_UseDefaultCredentials()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_UseDefaultCredentials(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddSubProtocol(System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="subProtocol" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SetBuffer(System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="receiveBufferSize" position="0" attrib="0" type="System.Int32" />
                  <parameter name="sendBufferSize" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SetBuffer(System.Int32, System.Int32, System.ArraySegment`1[System.Byte])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="receiveBufferSize" position="0" attrib="0" type="System.Int32" />
                  <parameter name="sendBufferSize" position="1" attrib="0" type="System.Int32" />
                  <parameter name="buffer" position="2" attrib="0" type="System.ArraySegment`1[System.Byte]" />
                </parameters>
              </method>
              <method name="SetRequestHeader(System.String, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="headerName" position="0" attrib="0" type="System.String" />
                  <parameter name="headerValue" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="HttpListenerWebSocketContext" type="class" base="System.Net.WebSockets.WebSocketContext" charset="Ansi" layout="Auto">
            <properties>
              <property name="CookieCollection" attrib="0" ptype="System.Net.CookieCollection">
                <methods>
                  <method name="get_CookieCollection()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.CookieCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Collections.Specialized.NameValueCollection">
                <methods>
                  <method name="get_Headers()" attrib="2246" virtual="true" is-override="true" returntype="System.Collections.Specialized.NameValueCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsAuthenticated" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsAuthenticated()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsLocal" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLocal()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSecureConnection" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSecureConnection()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Origin" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Origin()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RequestUri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_RequestUri()" attrib="2246" virtual="true" is-override="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SecWebSocketKey" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SecWebSocketKey()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SecWebSocketProtocols" attrib="0" ptype="System.Collections.Generic.IEnumerable`1[System.String]">
                <methods>
                  <method name="get_SecWebSocketProtocols()" attrib="2246" virtual="true" is-override="true" returntype="System.Collections.Generic.IEnumerable`1[System.String]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SecWebSocketVersion" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SecWebSocketVersion()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="User" attrib="0" ptype="System.Security.Principal.IPrincipal">
                <methods>
                  <method name="get_User()" attrib="2246" virtual="true" is-override="true" returntype="System.Security.Principal.IPrincipal">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WebSocket" attrib="0" ptype="System.Net.WebSockets.WebSocket">
                <methods>
                  <method name="get_WebSocket()" attrib="2246" virtual="true" is-override="true" returntype="System.Net.WebSockets.WebSocket">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="WebSocket" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="CloseStatus" attrib="0" ptype="System.Nullable`1[System.Net.WebSockets.WebSocketCloseStatus]">
                <methods>
                  <method name="get_CloseStatus()" attrib="3526" abstract="true" virtual="true" returntype="System.Nullable`1[System.Net.WebSockets.WebSocketCloseStatus]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CloseStatusDescription" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_CloseStatusDescription()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DefaultKeepAliveInterval" attrib="0" ptype="System.TimeSpan">
                <methods>
                  <method name="get_DefaultKeepAliveInterval()" attrib="2198" static="true" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="State" attrib="0" ptype="System.Net.WebSockets.WebSocketState">
                <methods>
                  <method name="get_State()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.WebSockets.WebSocketState">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SubProtocol" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SubProtocol()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Abort()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="CloseAsync(System.Net.WebSockets.WebSocketCloseStatus, System.String, System.Threading.CancellationToken)" attrib="1478" abstract="true" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="closeStatus" position="0" attrib="0" type="System.Net.WebSockets.WebSocketCloseStatus" />
                  <parameter name="statusDescription" position="1" attrib="0" type="System.String" />
                  <parameter name="cancellationToken" position="2" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus, System.String, System.Threading.CancellationToken)" attrib="1478" abstract="true" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="closeStatus" position="0" attrib="0" type="System.Net.WebSockets.WebSocketCloseStatus" />
                  <parameter name="statusDescription" position="1" attrib="0" type="System.String" />
                  <parameter name="cancellationToken" position="2" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="CreateClientBuffer(System.Int32, System.Int32)" attrib="150" static="true" returntype="System.ArraySegment`1[System.Byte]">
                <parameters>
                  <parameter name="receiveBufferSize" position="0" attrib="0" type="System.Int32" />
                  <parameter name="sendBufferSize" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CreateClientWebSocket(System.IO.Stream, System.String, System.Int32, System.Int32, System.TimeSpan, System.Boolean, System.ArraySegment`1[System.Byte])" attrib="150" static="true" returntype="System.Net.WebSockets.WebSocket">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="innerStream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="subProtocol" position="1" attrib="0" type="System.String" />
                  <parameter name="receiveBufferSize" position="2" attrib="0" type="System.Int32" />
                  <parameter name="sendBufferSize" position="3" attrib="0" type="System.Int32" />
                  <parameter name="keepAliveInterval" position="4" attrib="0" type="System.TimeSpan" />
                  <parameter name="useZeroMaskingKey" position="5" attrib="0" type="System.Boolean" />
                  <parameter name="internalBuffer" position="6" attrib="0" type="System.ArraySegment`1[System.Byte]" />
                </parameters>
              </method>
              <method name="CreateServerBuffer(System.Int32)" attrib="150" static="true" returntype="System.ArraySegment`1[System.Byte]">
                <parameters>
                  <parameter name="receiveBufferSize" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Dispose()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="IsApplicationTargeting45()" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This API supports the .NET Framework infrastructure and is not intended to be used directly from your code." />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="IsStateTerminal(System.Net.WebSockets.WebSocketState)" attrib="148" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="state" position="0" attrib="0" type="System.Net.WebSockets.WebSocketState" />
                </parameters>
              </method>
              <method name="ReceiveAsync(System.ArraySegment`1[System.Byte], System.Threading.CancellationToken)" attrib="1478" abstract="true" virtual="true" returntype="System.Threading.Tasks.Task`1[System.Net.WebSockets.WebSocketReceiveResult]">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.ArraySegment`1[System.Byte]" />
                  <parameter name="cancellationToken" position="1" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="RegisterPrefixes()" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="SendAsync(System.ArraySegment`1[System.Byte], System.Net.WebSockets.WebSocketMessageType, System.Boolean, System.Threading.CancellationToken)" attrib="1478" abstract="true" virtual="true" returntype="System.Threading.Tasks.Task">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.ArraySegment`1[System.Byte]" />
                  <parameter name="messageType" position="1" attrib="0" type="System.Net.WebSockets.WebSocketMessageType" />
                  <parameter name="endOfMessage" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="cancellationToken" position="3" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="ThrowOnInvalidState(System.Net.WebSockets.WebSocketState, System.Net.WebSockets.WebSocketState[])" attrib="148" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="state" position="0" attrib="0" type="System.Net.WebSockets.WebSocketState" />
                  <parameter name="validStates" position="1" attrib="0" type="System.Net.WebSockets.WebSocketState[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
            </methods>
          </class>
          <class name="WebSocketCloseStatus" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Empty" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketCloseStatus" value="1005" />
              <field name="EndpointUnavailable" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketCloseStatus" value="1001" />
              <field name="InternalServerError" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketCloseStatus" value="1011" />
              <field name="InvalidMessageType" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketCloseStatus" value="1003" />
              <field name="InvalidPayloadData" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketCloseStatus" value="1007" />
              <field name="MandatoryExtension" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketCloseStatus" value="1010" />
              <field name="MessageTooBig" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketCloseStatus" value="1009" />
              <field name="NormalClosure" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketCloseStatus" value="1000" />
              <field name="PolicyViolation" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketCloseStatus" value="1008" />
              <field name="ProtocolError" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketCloseStatus" value="1002" />
            </fields>
          </class>
          <class name="WebSocketContext" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="CookieCollection" attrib="0" ptype="System.Net.CookieCollection">
                <methods>
                  <method name="get_CookieCollection()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.CookieCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Headers" attrib="0" ptype="System.Collections.Specialized.NameValueCollection">
                <methods>
                  <method name="get_Headers()" attrib="3526" abstract="true" virtual="true" returntype="System.Collections.Specialized.NameValueCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsAuthenticated" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsAuthenticated()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsLocal" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLocal()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSecureConnection" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSecureConnection()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Origin" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Origin()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RequestUri" attrib="0" ptype="System.Uri">
                <methods>
                  <method name="get_RequestUri()" attrib="3526" abstract="true" virtual="true" returntype="System.Uri">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SecWebSocketKey" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SecWebSocketKey()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SecWebSocketProtocols" attrib="0" ptype="System.Collections.Generic.IEnumerable`1[System.String]">
                <methods>
                  <method name="get_SecWebSocketProtocols()" attrib="3526" abstract="true" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[System.String]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SecWebSocketVersion" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SecWebSocketVersion()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="User" attrib="0" ptype="System.Security.Principal.IPrincipal">
                <methods>
                  <method name="get_User()" attrib="3526" abstract="true" virtual="true" returntype="System.Security.Principal.IPrincipal">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WebSocket" attrib="0" ptype="System.Net.WebSockets.WebSocket">
                <methods>
                  <method name="get_WebSocket()" attrib="3526" abstract="true" virtual="true" returntype="System.Net.WebSockets.WebSocket">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="WebSocketError" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="ConnectionClosedPrematurely" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketError" value="8" />
              <field name="Faulted" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketError" value="2" />
              <field name="HeaderError" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketError" value="7" />
              <field name="InvalidMessageType" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketError" value="1" />
              <field name="InvalidState" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketError" value="9" />
              <field name="NativeError" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketError" value="3" />
              <field name="NotAWebSocket" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketError" value="4" />
              <field name="Success" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketError" value="0" />
              <field name="UnsupportedProtocol" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketError" value="6" />
              <field name="UnsupportedVersion" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketError" value="5" />
            </fields>
          </class>
          <class name="WebSocketException" type="class" base="System.ComponentModel.Win32Exception" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="nativeError" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.WebSockets.WebSocketError)" attrib="6278">
                <parameters>
                  <parameter name="error" position="0" attrib="0" type="System.Net.WebSockets.WebSocketError" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="nativeError" position="0" attrib="0" type="System.Int32" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.String)" attrib="6278">
                <parameters>
                  <parameter name="nativeError" position="0" attrib="0" type="System.Int32" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.WebSockets.WebSocketError, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="error" position="0" attrib="0" type="System.Net.WebSockets.WebSocketError" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.WebSockets.WebSocketError, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="error" position="0" attrib="0" type="System.Net.WebSockets.WebSocketError" />
                  <parameter name="nativeError" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.WebSockets.WebSocketError, System.String)" attrib="6278">
                <parameters>
                  <parameter name="error" position="0" attrib="0" type="System.Net.WebSockets.WebSocketError" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.WebSockets.WebSocketError, System.Int32, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="error" position="0" attrib="0" type="System.Net.WebSockets.WebSocketError" />
                  <parameter name="nativeError" position="1" attrib="0" type="System.Int32" />
                  <parameter name="innerException" position="2" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.WebSockets.WebSocketError, System.Int32, System.String)" attrib="6278">
                <parameters>
                  <parameter name="error" position="0" attrib="0" type="System.Net.WebSockets.WebSocketError" />
                  <parameter name="nativeError" position="1" attrib="0" type="System.Int32" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.WebSockets.WebSocketError, System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="error" position="0" attrib="0" type="System.Net.WebSockets.WebSocketError" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="innerException" position="2" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Net.WebSockets.WebSocketError, System.Int32, System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="error" position="0" attrib="0" type="System.Net.WebSockets.WebSocketError" />
                  <parameter name="nativeError" position="1" attrib="0" type="System.Int32" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="innerException" position="3" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ErrorCode" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ErrorCode()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WebSocketErrorCode" attrib="0" ptype="System.Net.WebSockets.WebSocketError">
                <methods>
                  <method name="get_WebSocketErrorCode()" attrib="2182" returntype="System.Net.WebSockets.WebSocketError">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="WebSocketMessageType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Binary" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketMessageType" value="1" />
              <field name="Close" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketMessageType" value="2" />
              <field name="Text" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketMessageType" value="0" />
            </fields>
          </class>
          <class name="WebSocketReceiveResult" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Int32, System.Net.WebSockets.WebSocketMessageType, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                  <parameter name="messageType" position="1" attrib="0" type="System.Net.WebSockets.WebSocketMessageType" />
                  <parameter name="endOfMessage" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Net.WebSockets.WebSocketMessageType, System.Boolean, System.Nullable`1[System.Net.WebSockets.WebSocketCloseStatus], System.String)" attrib="6278">
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                  <parameter name="messageType" position="1" attrib="0" type="System.Net.WebSockets.WebSocketMessageType" />
                  <parameter name="endOfMessage" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="closeStatus" position="3" attrib="0" type="System.Nullable`1[System.Net.WebSockets.WebSocketCloseStatus]" />
                  <parameter name="closeStatusDescription" position="4" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CloseStatus" attrib="0" ptype="System.Nullable`1[System.Net.WebSockets.WebSocketCloseStatus]">
                <methods>
                  <method name="get_CloseStatus()" attrib="2182" returntype="System.Nullable`1[System.Net.WebSockets.WebSocketCloseStatus]">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CloseStatusDescription" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_CloseStatusDescription()" attrib="2182" returntype="System.String">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EndOfMessage" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_EndOfMessage()" attrib="2182" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MessageType" attrib="0" ptype="System.Net.WebSockets.WebSocketMessageType">
                <methods>
                  <method name="get_MessageType()" attrib="2182" returntype="System.Net.WebSockets.WebSocketMessageType">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="WebSocketState" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Aborted" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketState" value="6" />
              <field name="CloseReceived" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketState" value="4" />
              <field name="CloseSent" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketState" value="3" />
              <field name="Closed" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketState" value="5" />
              <field name="Connecting" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketState" value="1" />
              <field name="None" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketState" value="0" />
              <field name="Open" attrib="32854" fieldtype="System.Net.WebSockets.WebSocketState" value="2" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Runtime.InteropServices">
        <classes>
          <class name="DefaultParameterValueAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="Parameter" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Value" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="HandleCollector" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="initialThreshold" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Int32, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="initialThreshold" position="1" attrib="0" type="System.Int32" />
                  <parameter name="maximumThreshold" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InitialThreshold" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InitialThreshold()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MaximumThreshold" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_MaximumThreshold()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Remove()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Runtime.InteropServices.ComTypes">
        <classes>
          <class name="ADVF" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="ADVFCACHE_FORCEBUILTIN" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.ADVF" value="16" />
              <field name="ADVFCACHE_NOHANDLER" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.ADVF" value="8" />
              <field name="ADVFCACHE_ONSAVE" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.ADVF" value="32" />
              <field name="ADVF_DATAONSTOP" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.ADVF" value="64" />
              <field name="ADVF_NODATA" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.ADVF" value="1" />
              <field name="ADVF_ONLYONCE" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.ADVF" value="4" />
              <field name="ADVF_PRIMEFIRST" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.ADVF" value="2" />
            </fields>
          </class>
          <class name="DATADIR" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="DATADIR_GET" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.DATADIR" value="1" />
              <field name="DATADIR_SET" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.DATADIR" value="2" />
            </fields>
          </class>
          <class name="DVASPECT" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="DVASPECT_CONTENT" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.DVASPECT" value="1" />
              <field name="DVASPECT_DOCPRINT" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.DVASPECT" value="8" />
              <field name="DVASPECT_ICON" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.DVASPECT" value="4" />
              <field name="DVASPECT_THUMBNAIL" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.DVASPECT" value="2" />
            </fields>
          </class>
          <class name="FORMATETC" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
            <fields>
              <field name="cfFormat" attrib="4102" fieldtype="System.Int16" />
              <field name="dwAspect" attrib="4102" fieldtype="System.Runtime.InteropServices.ComTypes.DVASPECT" />
              <field name="lindex" attrib="6" fieldtype="System.Int32" />
              <field name="ptd" attrib="6" fieldtype="System.IntPtr" />
              <field name="tymed" attrib="4102" fieldtype="System.Runtime.InteropServices.ComTypes.TYMED" />
            </fields>
          </class>
          <class name="IAdviseSink" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.GuidAttribute">
                <properties>
                  <property name="Value" value="0000010F-0000-0000-C000-000000000046" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.InterfaceTypeAttribute">
                <properties>
                  <property name="Value" value="InterfaceIsIUnknown" />
                </properties>
              </attribute>
            </attributes>
            <methods>
              <method name="OnClose()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="OnDataChange(in System.Runtime.InteropServices.ComTypes.FORMATETC&amp;, in System.Runtime.InteropServices.ComTypes.STGMEDIUM&amp;)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="format" position="0" attrib="1" type="System.Runtime.InteropServices.ComTypes.FORMATETC" direction="ref" />
                  <parameter name="stgmedium" position="1" attrib="1" type="System.Runtime.InteropServices.ComTypes.STGMEDIUM" direction="ref" />
                </parameters>
              </method>
              <method name="OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="moniker" position="0" attrib="0" type="System.Runtime.InteropServices.ComTypes.IMoniker" />
                </parameters>
              </method>
              <method name="OnSave()" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="OnViewChange(System.Int32, System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="aspect" position="0" attrib="0" type="System.Int32" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IDataObject" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.GuidAttribute">
                <properties>
                  <property name="Value" value="0000010E-0000-0000-C000-000000000046" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.InterfaceTypeAttribute">
                <properties>
                  <property name="Value" value="InterfaceIsIUnknown" />
                </properties>
              </attribute>
            </attributes>
            <methods>
              <method name="DAdvise(in System.Runtime.InteropServices.ComTypes.FORMATETC&amp;, System.Runtime.InteropServices.ComTypes.ADVF, System.Runtime.InteropServices.ComTypes.IAdviseSink, out System.Int32&amp;)" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="pFormatetc" position="0" attrib="1" type="System.Runtime.InteropServices.ComTypes.FORMATETC" direction="ref" />
                  <parameter name="advf" position="1" attrib="0" type="System.Runtime.InteropServices.ComTypes.ADVF" />
                  <parameter name="adviseSink" position="2" attrib="0" type="System.Runtime.InteropServices.ComTypes.IAdviseSink" />
                  <parameter name="connection" position="3" attrib="2" type="System.Int32" direction="out" />
                </parameters>
              </method>
              <method name="DUnadvise(System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="connection" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="EnumDAdvise(out System.Runtime.InteropServices.ComTypes.IEnumSTATDATA&amp;)" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="enumAdvise" position="0" attrib="2" type="System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" direction="out" />
                </parameters>
              </method>
              <method name="EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" attrib="1478" abstract="true" virtual="true" returntype="System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
                <parameters>
                  <parameter name="direction" position="0" attrib="0" type="System.Runtime.InteropServices.ComTypes.DATADIR" />
                </parameters>
              </method>
              <method name="GetCanonicalFormatEtc(in System.Runtime.InteropServices.ComTypes.FORMATETC&amp;, out System.Runtime.InteropServices.ComTypes.FORMATETC&amp;)" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="formatIn" position="0" attrib="1" type="System.Runtime.InteropServices.ComTypes.FORMATETC" direction="ref" />
                  <parameter name="formatOut" position="1" attrib="2" type="System.Runtime.InteropServices.ComTypes.FORMATETC" direction="out" />
                </parameters>
              </method>
              <method name="GetData(in System.Runtime.InteropServices.ComTypes.FORMATETC&amp;, out System.Runtime.InteropServices.ComTypes.STGMEDIUM&amp;)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="format" position="0" attrib="1" type="System.Runtime.InteropServices.ComTypes.FORMATETC" direction="ref" />
                  <parameter name="medium" position="1" attrib="2" type="System.Runtime.InteropServices.ComTypes.STGMEDIUM" direction="out" />
                </parameters>
              </method>
              <method name="GetDataHere(in System.Runtime.InteropServices.ComTypes.FORMATETC&amp;, System.Runtime.InteropServices.ComTypes.STGMEDIUM&amp;)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="format" position="0" attrib="1" type="System.Runtime.InteropServices.ComTypes.FORMATETC" direction="ref" />
                  <parameter name="medium" position="1" attrib="0" type="System.Runtime.InteropServices.ComTypes.STGMEDIUM" direction="ref" />
                </parameters>
              </method>
              <method name="QueryGetData(in System.Runtime.InteropServices.ComTypes.FORMATETC&amp;)" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="format" position="0" attrib="1" type="System.Runtime.InteropServices.ComTypes.FORMATETC" direction="ref" />
                </parameters>
              </method>
              <method name="SetData(in System.Runtime.InteropServices.ComTypes.FORMATETC&amp;, in System.Runtime.InteropServices.ComTypes.STGMEDIUM&amp;, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="formatIn" position="0" attrib="1" type="System.Runtime.InteropServices.ComTypes.FORMATETC" direction="ref" />
                  <parameter name="medium" position="1" attrib="1" type="System.Runtime.InteropServices.ComTypes.STGMEDIUM" direction="ref" />
                  <parameter name="release" position="2" attrib="8192" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IEnumFORMATETC" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.GuidAttribute">
                <properties>
                  <property name="Value" value="00000103-0000-0000-C000-000000000046" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.InterfaceTypeAttribute">
                <properties>
                  <property name="Value" value="InterfaceIsIUnknown" />
                </properties>
              </attribute>
            </attributes>
            <methods>
              <method name="Clone(out System.Runtime.InteropServices.ComTypes.IEnumFORMATETC&amp;)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="newEnum" position="0" attrib="2" type="System.Runtime.InteropServices.ComTypes.IEnumFORMATETC" direction="out" />
                </parameters>
              </method>
              <method name="Next(System.Int32, System.Runtime.InteropServices.ComTypes.FORMATETC[], System.Int32[])" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="celt" position="0" attrib="0" type="System.Int32" />
                  <parameter name="rgelt" position="1" attrib="8194" type="System.Runtime.InteropServices.ComTypes.FORMATETC[]" />
                  <parameter name="pceltFetched" position="2" attrib="8194" type="System.Int32[]" />
                </parameters>
              </method>
              <method name="Reset()" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="Skip(System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="celt" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IEnumSTATDATA" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.GuidAttribute">
                <properties>
                  <property name="Value" value="00000103-0000-0000-C000-000000000046" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.InterfaceTypeAttribute">
                <properties>
                  <property name="Value" value="InterfaceIsIUnknown" />
                </properties>
              </attribute>
            </attributes>
            <methods>
              <method name="Clone(out System.Runtime.InteropServices.ComTypes.IEnumSTATDATA&amp;)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="newEnum" position="0" attrib="2" type="System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" direction="out" />
                </parameters>
              </method>
              <method name="Next(System.Int32, System.Runtime.InteropServices.ComTypes.STATDATA[], System.Int32[])" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="celt" position="0" attrib="0" type="System.Int32" />
                  <parameter name="rgelt" position="1" attrib="8194" type="System.Runtime.InteropServices.ComTypes.STATDATA[]" />
                  <parameter name="pceltFetched" position="2" attrib="8194" type="System.Int32[]" />
                </parameters>
              </method>
              <method name="Reset()" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="Skip(System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="celt" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="STATDATA" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
            <fields>
              <field name="advSink" attrib="6" fieldtype="System.Runtime.InteropServices.ComTypes.IAdviseSink" />
              <field name="advf" attrib="6" fieldtype="System.Runtime.InteropServices.ComTypes.ADVF" />
              <field name="connection" attrib="6" fieldtype="System.Int32" />
              <field name="formatetc" attrib="6" fieldtype="System.Runtime.InteropServices.ComTypes.FORMATETC" />
            </fields>
          </class>
          <class name="STGMEDIUM" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
            <fields>
              <field name="pUnkForRelease" attrib="4102" fieldtype="System.Object" />
              <field name="tymed" attrib="6" fieldtype="System.Runtime.InteropServices.ComTypes.TYMED" />
              <field name="unionmember" attrib="6" fieldtype="System.IntPtr" />
            </fields>
          </class>
          <class name="TYMED" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="TYMED_ENHMF" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.TYMED" value="64" />
              <field name="TYMED_FILE" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.TYMED" value="2" />
              <field name="TYMED_GDI" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.TYMED" value="16" />
              <field name="TYMED_HGLOBAL" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.TYMED" value="1" />
              <field name="TYMED_ISTORAGE" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.TYMED" value="8" />
              <field name="TYMED_ISTREAM" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.TYMED" value="4" />
              <field name="TYMED_MFPICT" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.TYMED" value="32" />
              <field name="TYMED_NULL" attrib="32854" fieldtype="System.Runtime.InteropServices.ComTypes.TYMED" value="0" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Runtime.Versioning">
        <classes>
          <class name="FrameworkName" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IEquatable`1[System.Runtime.Versioning.FrameworkName]" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="frameworkName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Version)" attrib="6278">
                <parameters>
                  <parameter name="identifier" position="0" attrib="0" type="System.String" />
                  <parameter name="version" position="1" attrib="0" type="System.Version" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Version, System.String)" attrib="6278">
                <parameters>
                  <parameter name="identifier" position="0" attrib="0" type="System.String" />
                  <parameter name="version" position="1" attrib="0" type="System.Version" />
                  <parameter name="profile" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="FullName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FullName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Identifier" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Identifier()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Profile" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Profile()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Version" attrib="0" ptype="System.Version">
                <methods>
                  <method name="get_Version()" attrib="2182" returntype="System.Version">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Equals(System.Runtime.Versioning.FrameworkName)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Runtime.Versioning.FrameworkName" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="op_Equality(System.Runtime.Versioning.FrameworkName, System.Runtime.Versioning.FrameworkName)" attrib="2198" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Runtime.Versioning.FrameworkName" />
                  <parameter name="right" position="1" attrib="0" type="System.Runtime.Versioning.FrameworkName" />
                </parameters>
              </method>
              <method name="op_Inequality(System.Runtime.Versioning.FrameworkName, System.Runtime.Versioning.FrameworkName)" attrib="2198" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Runtime.Versioning.FrameworkName" />
                  <parameter name="right" position="1" attrib="0" type="System.Runtime.Versioning.FrameworkName" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Security.AccessControl">
        <classes>
          <class name="SemaphoreAccessRule" type="class" base="System.Security.AccessControl.AccessRule" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="False" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Security.Principal.IdentityReference, System.Security.AccessControl.SemaphoreRights, System.Security.AccessControl.AccessControlType)" attrib="6278">
                <parameters>
                  <parameter name="identity" position="0" attrib="0" type="System.Security.Principal.IdentityReference" />
                  <parameter name="eventRights" position="1" attrib="0" type="System.Security.AccessControl.SemaphoreRights" />
                  <parameter name="type" position="2" attrib="0" type="System.Security.AccessControl.AccessControlType" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Security.AccessControl.SemaphoreRights, System.Security.AccessControl.AccessControlType)" attrib="6278">
                <parameters>
                  <parameter name="identity" position="0" attrib="0" type="System.String" />
                  <parameter name="eventRights" position="1" attrib="0" type="System.Security.AccessControl.SemaphoreRights" />
                  <parameter name="type" position="2" attrib="0" type="System.Security.AccessControl.AccessControlType" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="SemaphoreRights" attrib="0" ptype="System.Security.AccessControl.SemaphoreRights">
                <methods>
                  <method name="get_SemaphoreRights()" attrib="2182" returntype="System.Security.AccessControl.SemaphoreRights">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="SemaphoreAuditRule" type="class" base="System.Security.AccessControl.AuditRule" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="False" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Security.Principal.IdentityReference, System.Security.AccessControl.SemaphoreRights, System.Security.AccessControl.AuditFlags)" attrib="6278">
                <parameters>
                  <parameter name="identity" position="0" attrib="0" type="System.Security.Principal.IdentityReference" />
                  <parameter name="eventRights" position="1" attrib="0" type="System.Security.AccessControl.SemaphoreRights" />
                  <parameter name="flags" position="2" attrib="0" type="System.Security.AccessControl.AuditFlags" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="SemaphoreRights" attrib="0" ptype="System.Security.AccessControl.SemaphoreRights">
                <methods>
                  <method name="get_SemaphoreRights()" attrib="2182" returntype="System.Security.AccessControl.SemaphoreRights">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="SemaphoreRights" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="False" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="ChangePermissions" attrib="32854" fieldtype="System.Security.AccessControl.SemaphoreRights" value="262144" />
              <field name="Delete" attrib="32854" fieldtype="System.Security.AccessControl.SemaphoreRights" value="65536" />
              <field name="FullControl" attrib="32854" fieldtype="System.Security.AccessControl.SemaphoreRights" value="2031619" />
              <field name="Modify" attrib="32854" fieldtype="System.Security.AccessControl.SemaphoreRights" value="2" />
              <field name="ReadPermissions" attrib="32854" fieldtype="System.Security.AccessControl.SemaphoreRights" value="131072" />
              <field name="Synchronize" attrib="32854" fieldtype="System.Security.AccessControl.SemaphoreRights" value="1048576" />
              <field name="TakeOwnership" attrib="32854" fieldtype="System.Security.AccessControl.SemaphoreRights" value="524288" />
            </fields>
          </class>
          <class name="SemaphoreSecurity" type="class" base="System.Security.AccessControl.NativeObjectSecurity" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="False" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String, System.Security.AccessControl.AccessControlSections)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="includeSections" position="1" attrib="0" type="System.Security.AccessControl.AccessControlSections" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AccessRightType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_AccessRightType()" attrib="2246" virtual="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AccessRuleType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_AccessRuleType()" attrib="2246" virtual="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="AuditRuleType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_AuditRuleType()" attrib="2246" virtual="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)" attrib="198" virtual="true" is-override="true" returntype="System.Security.AccessControl.AccessRule">
                <parameters>
                  <parameter name="identityReference" position="0" attrib="0" type="System.Security.Principal.IdentityReference" />
                  <parameter name="accessMask" position="1" attrib="0" type="System.Int32" />
                  <parameter name="isInherited" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="inheritanceFlags" position="3" attrib="0" type="System.Security.AccessControl.InheritanceFlags" />
                  <parameter name="propagationFlags" position="4" attrib="0" type="System.Security.AccessControl.PropagationFlags" />
                  <parameter name="type" position="5" attrib="0" type="System.Security.AccessControl.AccessControlType" />
                </parameters>
              </method>
              <method name="AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rule" position="0" attrib="0" type="System.Security.AccessControl.SemaphoreAccessRule" />
                </parameters>
              </method>
              <method name="AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rule" position="0" attrib="0" type="System.Security.AccessControl.SemaphoreAuditRule" />
                </parameters>
              </method>
              <method name="AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)" attrib="198" virtual="true" is-override="true" returntype="System.Security.AccessControl.AuditRule">
                <parameters>
                  <parameter name="identityReference" position="0" attrib="0" type="System.Security.Principal.IdentityReference" />
                  <parameter name="accessMask" position="1" attrib="0" type="System.Int32" />
                  <parameter name="isInherited" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="inheritanceFlags" position="3" attrib="0" type="System.Security.AccessControl.InheritanceFlags" />
                  <parameter name="propagationFlags" position="4" attrib="0" type="System.Security.AccessControl.PropagationFlags" />
                  <parameter name="flags" position="5" attrib="0" type="System.Security.AccessControl.AuditFlags" />
                </parameters>
              </method>
              <method name="RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="rule" position="0" attrib="0" type="System.Security.AccessControl.SemaphoreAccessRule" />
                </parameters>
              </method>
              <method name="RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rule" position="0" attrib="0" type="System.Security.AccessControl.SemaphoreAccessRule" />
                </parameters>
              </method>
              <method name="RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rule" position="0" attrib="0" type="System.Security.AccessControl.SemaphoreAccessRule" />
                </parameters>
              </method>
              <method name="RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="rule" position="0" attrib="0" type="System.Security.AccessControl.SemaphoreAuditRule" />
                </parameters>
              </method>
              <method name="RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rule" position="0" attrib="0" type="System.Security.AccessControl.SemaphoreAuditRule" />
                </parameters>
              </method>
              <method name="RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rule" position="0" attrib="0" type="System.Security.AccessControl.SemaphoreAuditRule" />
                </parameters>
              </method>
              <method name="ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rule" position="0" attrib="0" type="System.Security.AccessControl.SemaphoreAccessRule" />
                </parameters>
              </method>
              <method name="SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rule" position="0" attrib="0" type="System.Security.AccessControl.SemaphoreAccessRule" />
                </parameters>
              </method>
              <method name="SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="rule" position="0" attrib="0" type="System.Security.AccessControl.SemaphoreAuditRule" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Security.Authentication">
        <classes>
          <class name="AuthenticationException" type="class" base="System.SystemException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="CipherAlgorithmType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Aes" attrib="32854" fieldtype="System.Security.Authentication.CipherAlgorithmType" value="26129" />
              <field name="Aes128" attrib="32854" fieldtype="System.Security.Authentication.CipherAlgorithmType" value="26126" />
              <field name="Aes192" attrib="32854" fieldtype="System.Security.Authentication.CipherAlgorithmType" value="26127" />
              <field name="Aes256" attrib="32854" fieldtype="System.Security.Authentication.CipherAlgorithmType" value="26128" />
              <field name="Des" attrib="32854" fieldtype="System.Security.Authentication.CipherAlgorithmType" value="26113" />
              <field name="None" attrib="32854" fieldtype="System.Security.Authentication.CipherAlgorithmType" value="0" />
              <field name="Null" attrib="32854" fieldtype="System.Security.Authentication.CipherAlgorithmType" value="24576" />
              <field name="Rc2" attrib="32854" fieldtype="System.Security.Authentication.CipherAlgorithmType" value="26114" />
              <field name="Rc4" attrib="32854" fieldtype="System.Security.Authentication.CipherAlgorithmType" value="26625" />
              <field name="TripleDes" attrib="32854" fieldtype="System.Security.Authentication.CipherAlgorithmType" value="26115" />
            </fields>
          </class>
          <class name="ExchangeAlgorithmType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="DiffieHellman" attrib="32854" fieldtype="System.Security.Authentication.ExchangeAlgorithmType" value="43522" />
              <field name="None" attrib="32854" fieldtype="System.Security.Authentication.ExchangeAlgorithmType" value="0" />
              <field name="RsaKeyX" attrib="32854" fieldtype="System.Security.Authentication.ExchangeAlgorithmType" value="41984" />
              <field name="RsaSign" attrib="32854" fieldtype="System.Security.Authentication.ExchangeAlgorithmType" value="9216" />
            </fields>
          </class>
          <class name="HashAlgorithmType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Md5" attrib="32854" fieldtype="System.Security.Authentication.HashAlgorithmType" value="32771" />
              <field name="None" attrib="32854" fieldtype="System.Security.Authentication.HashAlgorithmType" value="0" />
              <field name="Sha1" attrib="32854" fieldtype="System.Security.Authentication.HashAlgorithmType" value="32772" />
            </fields>
          </class>
          <class name="InvalidCredentialException" type="class" base="System.Security.Authentication.AuthenticationException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="serializationInfo" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="streamingContext" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="SslProtocols" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Default" attrib="32854" fieldtype="System.Security.Authentication.SslProtocols" value="240" />
              <field name="None" attrib="32854" fieldtype="System.Security.Authentication.SslProtocols" value="0" />
              <field name="Ssl2" attrib="32854" fieldtype="System.Security.Authentication.SslProtocols" value="12" />
              <field name="Ssl3" attrib="32854" fieldtype="System.Security.Authentication.SslProtocols" value="48" />
              <field name="Tls" attrib="32854" fieldtype="System.Security.Authentication.SslProtocols" value="192" />
              <field name="Tls11" attrib="32854" fieldtype="System.Security.Authentication.SslProtocols" value="768">
                <attributes />
              </field>
              <field name="Tls12" attrib="32854" fieldtype="System.Security.Authentication.SslProtocols" value="3072">
                <attributes />
              </field>
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Security.Authentication.ExtendedProtection">
        <classes>
          <class name="ChannelBinding" type="class" base="Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Boolean)" attrib="6276">
                <parameters>
                  <parameter name="ownsHandle" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Size" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Size()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ChannelBindingKind" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Endpoint" attrib="32854" fieldtype="System.Security.Authentication.ExtendedProtection.ChannelBindingKind" value="26" />
              <field name="Unique" attrib="32854" fieldtype="System.Security.Authentication.ExtendedProtection.ChannelBindingKind" value="25" />
              <field name="Unknown" attrib="32854" fieldtype="System.Security.Authentication.ExtendedProtection.ChannelBindingKind" value="0" />
            </fields>
          </class>
          <class name="ExtendedProtectionPolicy" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.TypeConverterAttribute">
                <properties>
                  <property name="ConverterTypeName" value="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Security.Authentication.ExtendedProtection.PolicyEnforcement)" attrib="6278">
                <attributes />
                <parameters>
                  <parameter name="policyEnforcement" position="0" attrib="0" type="System.Security.Authentication.ExtendedProtection.PolicyEnforcement" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Authentication.ExtendedProtection.PolicyEnforcement, System.Security.Authentication.ExtendedProtection.ChannelBinding)" attrib="6278">
                <parameters>
                  <parameter name="policyEnforcement" position="0" attrib="0" type="System.Security.Authentication.ExtendedProtection.PolicyEnforcement" />
                  <parameter name="customChannelBinding" position="1" attrib="0" type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Authentication.ExtendedProtection.PolicyEnforcement, System.Security.Authentication.ExtendedProtection.ProtectionScenario, System.Collections.ICollection)" attrib="6278">
                <parameters>
                  <parameter name="policyEnforcement" position="0" attrib="0" type="System.Security.Authentication.ExtendedProtection.PolicyEnforcement" />
                  <parameter name="protectionScenario" position="1" attrib="0" type="System.Security.Authentication.ExtendedProtection.ProtectionScenario" />
                  <parameter name="customServiceNames" position="2" attrib="0" type="System.Collections.ICollection" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Authentication.ExtendedProtection.PolicyEnforcement, System.Security.Authentication.ExtendedProtection.ProtectionScenario, System.Security.Authentication.ExtendedProtection.ServiceNameCollection)" attrib="6278">
                <parameters>
                  <parameter name="policyEnforcement" position="0" attrib="0" type="System.Security.Authentication.ExtendedProtection.PolicyEnforcement" />
                  <parameter name="protectionScenario" position="1" attrib="0" type="System.Security.Authentication.ExtendedProtection.ProtectionScenario" />
                  <parameter name="customServiceNames" position="2" attrib="0" type="System.Security.Authentication.ExtendedProtection.ServiceNameCollection" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CustomChannelBinding" attrib="0" ptype="System.Security.Authentication.ExtendedProtection.ChannelBinding">
                <methods>
                  <method name="get_CustomChannelBinding()" attrib="2182" returntype="System.Security.Authentication.ExtendedProtection.ChannelBinding">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CustomServiceNames" attrib="0" ptype="System.Security.Authentication.ExtendedProtection.ServiceNameCollection">
                <methods>
                  <method name="get_CustomServiceNames()" attrib="2182" returntype="System.Security.Authentication.ExtendedProtection.ServiceNameCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OSSupportsExtendedProtection" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_OSSupportsExtendedProtection()" attrib="2198" static="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PolicyEnforcement" attrib="0" ptype="System.Security.Authentication.ExtendedProtection.PolicyEnforcement">
                <methods>
                  <method name="get_PolicyEnforcement()" attrib="2182" returntype="System.Security.Authentication.ExtendedProtection.PolicyEnforcement">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ProtectionScenario" attrib="0" ptype="System.Security.Authentication.ExtendedProtection.ProtectionScenario">
                <methods>
                  <method name="get_ProtectionScenario()" attrib="2182" returntype="System.Security.Authentication.ExtendedProtection.ProtectionScenario">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <attributes />
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ExtendedProtectionPolicyTypeConverter" type="class" base="System.ComponentModel.TypeConverter" charset="Ansi" layout="Auto">
            <attributes />
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="destinationType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)" attrib="198" virtual="true" is-override="true" returntype="System.Object">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="System.ComponentModel.ITypeDescriptorContext" />
                  <parameter name="culture" position="1" attrib="0" type="System.Globalization.CultureInfo" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                  <parameter name="destinationType" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PolicyEnforcement" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Always" attrib="32854" fieldtype="System.Security.Authentication.ExtendedProtection.PolicyEnforcement" value="2" />
              <field name="Never" attrib="32854" fieldtype="System.Security.Authentication.ExtendedProtection.PolicyEnforcement" value="0" />
              <field name="WhenSupported" attrib="32854" fieldtype="System.Security.Authentication.ExtendedProtection.PolicyEnforcement" value="1" />
            </fields>
          </class>
          <class name="ProtectionScenario" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="TransportSelected" attrib="32854" fieldtype="System.Security.Authentication.ExtendedProtection.ProtectionScenario" value="0" />
              <field name="TrustedProxy" attrib="32854" fieldtype="System.Security.Authentication.ExtendedProtection.ProtectionScenario" value="1" />
            </fields>
          </class>
          <class name="ServiceNameCollection" type="class" base="System.Collections.ReadOnlyCollectionBase" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Collections.ICollection)" attrib="6278">
                <parameters>
                  <parameter name="items" position="0" attrib="0" type="System.Collections.ICollection" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Contains(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="searchServiceName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Merge(System.Collections.IEnumerable)" attrib="134" returntype="System.Security.Authentication.ExtendedProtection.ServiceNameCollection">
                <parameters>
                  <parameter name="serviceNames" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
              <method name="Merge(System.String)" attrib="134" returntype="System.Security.Authentication.ExtendedProtection.ServiceNameCollection">
                <parameters>
                  <parameter name="serviceName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TokenBinding" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <properties>
              <property name="BindingType" attrib="0" ptype="System.Security.Authentication.ExtendedProtection.TokenBindingType">
                <methods>
                  <method name="get_BindingType()" attrib="2182" returntype="System.Security.Authentication.ExtendedProtection.TokenBindingType">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetRawTokenBindingId()" attrib="134" returntype="System.Byte[]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TokenBindingType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Provided" attrib="32854" fieldtype="System.Security.Authentication.ExtendedProtection.TokenBindingType" value="0" />
              <field name="Referred" attrib="32854" fieldtype="System.Security.Authentication.ExtendedProtection.TokenBindingType" value="1" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Security.Cryptography">
        <classes>
          <class name="AsnEncodedData" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Byte[])" attrib="6278">
                <parameters>
                  <parameter name="rawData" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.AsnEncodedData)" attrib="6278">
                <parameters>
                  <parameter name="asnEncodedData" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.Oid, System.Byte[])" attrib="6278">
                <parameters>
                  <parameter name="oid" position="0" attrib="0" type="System.Security.Cryptography.Oid" />
                  <parameter name="rawData" position="1" attrib="0" type="System.Byte[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Byte[])" attrib="6278">
                <parameters>
                  <parameter name="oid" position="0" attrib="0" type="System.String" />
                  <parameter name="rawData" position="1" attrib="0" type="System.Byte[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Oid" attrib="0" ptype="System.Security.Cryptography.Oid">
                <methods>
                  <method name="get_Oid()" attrib="2182" returntype="System.Security.Cryptography.Oid">
                    <parameters />
                  </method>
                  <method name="set_Oid(System.Security.Cryptography.Oid)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.Oid" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RawData" attrib="0" ptype="System.Byte[]">
                <methods>
                  <method name="get_RawData()" attrib="2182" returntype="System.Byte[]">
                    <parameters />
                  </method>
                  <method name="set_RawData(System.Byte[])" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Byte[]" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyFrom(System.Security.Cryptography.AsnEncodedData)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="asnEncodedData" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                </parameters>
              </method>
              <method name="Format(System.Boolean)" attrib="454" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="multiLine" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AsnEncodedDataCollection" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.AsnEncodedData)" attrib="6278">
                <parameters>
                  <parameter name="asnEncodedData" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Security.Cryptography.AsnEncodedData" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Security.Cryptography.AsnEncodedData">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Security.Cryptography.AsnEncodedData)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="asnEncodedData" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                </parameters>
              </method>
              <method name="CopyTo(System.Security.Cryptography.AsnEncodedData[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Security.Cryptography.AsnEncodedDataEnumerator">
                <parameters />
              </method>
              <method name="Remove(System.Security.Cryptography.AsnEncodedData)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="asnEncodedData" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AsnEncodedDataEnumerator" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.IEnumerator" />
            </interfaces>
            <properties>
              <property name="Current" attrib="0" ptype="System.Security.Cryptography.AsnEncodedData">
                <methods>
                  <method name="get_Current()" attrib="2182" returntype="System.Security.Cryptography.AsnEncodedData">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="Reset()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="Oid" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.Oid)" attrib="6278">
                <parameters>
                  <parameter name="oid" position="0" attrib="0" type="System.Security.Cryptography.Oid" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="oid" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                  <parameter name="friendlyName" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="FriendlyName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FriendlyName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_FriendlyName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Value(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="FromFriendlyName(System.String, System.Security.Cryptography.OidGroup)" attrib="150" static="true" returntype="System.Security.Cryptography.Oid">
                <parameters>
                  <parameter name="friendlyName" position="0" attrib="0" type="System.String" />
                  <parameter name="group" position="1" attrib="0" type="System.Security.Cryptography.OidGroup" />
                </parameters>
              </method>
              <method name="FromOidValue(System.String, System.Security.Cryptography.OidGroup)" attrib="150" static="true" returntype="System.Security.Cryptography.Oid">
                <parameters>
                  <parameter name="oidValue" position="0" attrib="0" type="System.String" />
                  <parameter name="group" position="1" attrib="0" type="System.Security.Cryptography.OidGroup" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="OidCollection" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Security.Cryptography.Oid" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Security.Cryptography.Oid">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Security.Cryptography.Oid" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2182" returntype="System.Security.Cryptography.Oid">
                    <parameters>
                      <parameter name="oid" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Security.Cryptography.Oid)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="oid" position="0" attrib="0" type="System.Security.Cryptography.Oid" />
                </parameters>
              </method>
              <method name="CopyTo(System.Security.Cryptography.Oid[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Security.Cryptography.Oid[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Security.Cryptography.OidEnumerator">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="OidEnumerator" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.IEnumerator" />
            </interfaces>
            <properties>
              <property name="Current" attrib="0" ptype="System.Security.Cryptography.Oid">
                <methods>
                  <method name="get_Current()" attrib="2182" returntype="System.Security.Cryptography.Oid">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="Reset()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="OidGroup" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="All" attrib="32854" fieldtype="System.Security.Cryptography.OidGroup" value="0" />
              <field name="Attribute" attrib="32854" fieldtype="System.Security.Cryptography.OidGroup" value="5" />
              <field name="EncryptionAlgorithm" attrib="32854" fieldtype="System.Security.Cryptography.OidGroup" value="2" />
              <field name="EnhancedKeyUsage" attrib="32854" fieldtype="System.Security.Cryptography.OidGroup" value="7" />
              <field name="ExtensionOrAttribute" attrib="32854" fieldtype="System.Security.Cryptography.OidGroup" value="6" />
              <field name="HashAlgorithm" attrib="32854" fieldtype="System.Security.Cryptography.OidGroup" value="1" />
              <field name="KeyDerivationFunction" attrib="32854" fieldtype="System.Security.Cryptography.OidGroup" value="10" />
              <field name="Policy" attrib="32854" fieldtype="System.Security.Cryptography.OidGroup" value="8" />
              <field name="PublicKeyAlgorithm" attrib="32854" fieldtype="System.Security.Cryptography.OidGroup" value="3" />
              <field name="SignatureAlgorithm" attrib="32854" fieldtype="System.Security.Cryptography.OidGroup" value="4" />
              <field name="Template" attrib="32854" fieldtype="System.Security.Cryptography.OidGroup" value="9" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Security.Cryptography.X509Certificates">
        <classes>
          <class name="OpenFlags" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="IncludeArchived" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.OpenFlags" value="8" />
              <field name="MaxAllowed" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.OpenFlags" value="2" />
              <field name="OpenExistingOnly" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.OpenFlags" value="4" />
              <field name="ReadOnly" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.OpenFlags" value="0" />
              <field name="ReadWrite" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.OpenFlags" value="1" />
            </fields>
          </class>
          <class name="PublicKey" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Security.Cryptography.Oid, System.Security.Cryptography.AsnEncodedData, System.Security.Cryptography.AsnEncodedData)" attrib="6278">
                <parameters>
                  <parameter name="oid" position="0" attrib="0" type="System.Security.Cryptography.Oid" />
                  <parameter name="parameters" position="1" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                  <parameter name="keyValue" position="2" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="EncodedKeyValue" attrib="0" ptype="System.Security.Cryptography.AsnEncodedData">
                <methods>
                  <method name="get_EncodedKeyValue()" attrib="2182" returntype="System.Security.Cryptography.AsnEncodedData">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EncodedParameters" attrib="0" ptype="System.Security.Cryptography.AsnEncodedData">
                <methods>
                  <method name="get_EncodedParameters()" attrib="2182" returntype="System.Security.Cryptography.AsnEncodedData">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Key" attrib="0" ptype="System.Security.Cryptography.AsymmetricAlgorithm">
                <methods>
                  <method name="get_Key()" attrib="2182" returntype="System.Security.Cryptography.AsymmetricAlgorithm">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Oid" attrib="0" ptype="System.Security.Cryptography.Oid">
                <methods>
                  <method name="get_Oid()" attrib="2182" returntype="System.Security.Cryptography.Oid">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="StoreLocation" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="CurrentUser" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.StoreLocation" value="1" />
              <field name="LocalMachine" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.StoreLocation" value="2" />
            </fields>
          </class>
          <class name="StoreName" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AddressBook" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.StoreName" value="1" />
              <field name="AuthRoot" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.StoreName" value="2" />
              <field name="CertificateAuthority" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.StoreName" value="3" />
              <field name="Disallowed" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.StoreName" value="4" />
              <field name="My" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.StoreName" value="5" />
              <field name="Root" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.StoreName" value="6" />
              <field name="TrustedPeople" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.StoreName" value="7" />
              <field name="TrustedPublisher" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.StoreName" value="8" />
            </fields>
          </class>
          <class name="X500DistinguishedName" type="class" base="System.Security.Cryptography.AsnEncodedData" sealed="true" charset="Ansi" layout="Auto">
            <attributes />
            <constructors>
              <constructor name=".ctor(System.Byte[])" attrib="6278">
                <parameters>
                  <parameter name="encodedDistinguishedName" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.AsnEncodedData)" attrib="6278">
                <parameters>
                  <parameter name="encodedDistinguishedName" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.X500DistinguishedName)" attrib="6278">
                <parameters>
                  <parameter name="distinguishedName" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X500DistinguishedName" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="distinguishedName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags)" attrib="6278">
                <parameters>
                  <parameter name="distinguishedName" position="0" attrib="0" type="System.String" />
                  <parameter name="flag" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Decode(System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="flag" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" />
                </parameters>
              </method>
              <method name="Format(System.Boolean)" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters>
                  <parameter name="multiLine" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="X500DistinguishedNameFlags" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="DoNotUsePlusSign" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" value="32" />
              <field name="DoNotUseQuotes" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" value="64" />
              <field name="ForceUTF8Encoding" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" value="16384" />
              <field name="None" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" value="0" />
              <field name="Reversed" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" value="1" />
              <field name="UseCommas" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" value="128" />
              <field name="UseNewLines" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" value="256" />
              <field name="UseSemicolons" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" value="16" />
              <field name="UseT61Encoding" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" value="8192" />
              <field name="UseUTF8Encoding" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" value="4096" />
            </fields>
          </class>
          <class name="X509BasicConstraintsExtension" type="class" base="System.Security.Cryptography.X509Certificates.X509Extension" sealed="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.AsnEncodedData, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="encodedBasicConstraints" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                  <parameter name="critical" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Boolean, System.Boolean, System.Int32, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="certificateAuthority" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="hasPathLengthConstraint" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="pathLengthConstraint" position="2" attrib="0" type="System.Int32" />
                  <parameter name="critical" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CertificateAuthority" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CertificateAuthority()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HasPathLengthConstraint" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasPathLengthConstraint()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PathLengthConstraint" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_PathLengthConstraint()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyFrom(System.Security.Cryptography.AsnEncodedData)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="asnEncodedData" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="X509Certificate2" type="class" base="System.Security.Cryptography.X509Certificates.X509Certificate" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
              <interface name="System.Runtime.Serialization.IDeserializationCallback" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Byte[])" attrib="6278">
                <parameters>
                  <parameter name="rawData" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="handle" position="0" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.X509Certificate)" attrib="6278">
                <parameters>
                  <parameter name="certificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Byte[], System.Security.SecureString)" attrib="6278">
                <parameters>
                  <parameter name="rawData" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="password" position="1" attrib="0" type="System.Security.SecureString" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Byte[], System.String)" attrib="6278">
                <parameters>
                  <parameter name="rawData" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Security.SecureString)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="password" position="1" attrib="0" type="System.Security.SecureString" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Byte[], System.Security.SecureString, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" attrib="6278">
                <parameters>
                  <parameter name="rawData" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="password" position="1" attrib="0" type="System.Security.SecureString" />
                  <parameter name="keyStorageFlags" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Byte[], System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" attrib="6278">
                <parameters>
                  <parameter name="rawData" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                  <parameter name="keyStorageFlags" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Security.SecureString, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="password" position="1" attrib="0" type="System.Security.SecureString" />
                  <parameter name="keyStorageFlags" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" attrib="6278">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                  <parameter name="keyStorageFlags" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Archived" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Archived()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Archived(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Extensions" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509ExtensionCollection">
                <methods>
                  <method name="get_Extensions()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509ExtensionCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FriendlyName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FriendlyName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_FriendlyName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="HasPrivateKey" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasPrivateKey()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IssuerName" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X500DistinguishedName">
                <methods>
                  <method name="get_IssuerName()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X500DistinguishedName">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NotAfter" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_NotAfter()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NotBefore" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_NotBefore()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PrivateKey" attrib="0" ptype="System.Security.Cryptography.AsymmetricAlgorithm">
                <methods>
                  <method name="get_PrivateKey()" attrib="2182" returntype="System.Security.Cryptography.AsymmetricAlgorithm">
                    <parameters />
                  </method>
                  <method name="set_PrivateKey(System.Security.Cryptography.AsymmetricAlgorithm)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.AsymmetricAlgorithm" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="PublicKey" attrib="0" ptype="System.Security.Cryptography.X509Certificates.PublicKey">
                <methods>
                  <method name="get_PublicKey()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.PublicKey">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RawData" attrib="0" ptype="System.Byte[]">
                <methods>
                  <method name="get_RawData()" attrib="2182" returntype="System.Byte[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SerialNumber" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SerialNumber()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SignatureAlgorithm" attrib="0" ptype="System.Security.Cryptography.Oid">
                <methods>
                  <method name="get_SignatureAlgorithm()" attrib="2182" returntype="System.Security.Cryptography.Oid">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SubjectName" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X500DistinguishedName">
                <methods>
                  <method name="get_SubjectName()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X500DistinguishedName">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Thumbprint" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Thumbprint()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Version" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Version()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Export(System.Security.Cryptography.X509Certificates.X509ContentType, System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Byte[]">
                <attributes />
                <parameters>
                  <parameter name="contentType" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509ContentType" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetCertContentType(System.Byte[])" attrib="150" static="true" returntype="System.Security.Cryptography.X509Certificates.X509ContentType">
                <attributes />
                <parameters>
                  <parameter name="rawData" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="GetCertContentType(System.String)" attrib="150" static="true" returntype="System.Security.Cryptography.X509Certificates.X509ContentType">
                <attributes />
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType, System.Boolean)" attrib="134" returntype="System.String">
                <attributes />
                <parameters>
                  <parameter name="nameType" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509NameType" />
                  <parameter name="forIssuer" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Import(System.Byte[])" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="rawData" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="Import(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Import(System.Byte[], System.Security.SecureString, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="rawData" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="password" position="1" attrib="0" type="System.Security.SecureString" />
                  <parameter name="keyStorageFlags" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
                </parameters>
              </method>
              <method name="Import(System.Byte[], System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="rawData" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                  <parameter name="keyStorageFlags" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
                </parameters>
              </method>
              <method name="Import(System.String, System.Security.SecureString, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="password" position="1" attrib="0" type="System.Security.SecureString" />
                  <parameter name="keyStorageFlags" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
                </parameters>
              </method>
              <method name="Import(System.String, System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                  <parameter name="keyStorageFlags" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
                </parameters>
              </method>
              <method name="Reset()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="ToString(System.Boolean)" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters>
                  <parameter name="verbose" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Verify()" attrib="134" returntype="System.Boolean">
                <attributes />
                <parameters />
              </method>
            </methods>
          </class>
          <class name="X509Certificate2Collection" type="class" base="System.Security.Cryptography.X509Certificates.X509CertificateCollection" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)" attrib="6278">
                <parameters>
                  <parameter name="certificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" attrib="6278">
                <parameters>
                  <parameter name="certificates" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.X509Certificate2[])" attrib="6278">
                <parameters>
                  <parameter name="certificates" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Item" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Certificate2" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509Certificate2">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, System.Security.Cryptography.X509Certificates.X509Certificate2)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Security.Cryptography.X509Certificates.X509Certificate2)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="certificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
                </parameters>
              </method>
              <method name="AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" attrib="134" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="certificates" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
                </parameters>
              </method>
              <method name="AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2[])" attrib="134" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="certificates" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2[]" />
                </parameters>
              </method>
              <method name="Contains(System.Security.Cryptography.X509Certificates.X509Certificate2)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="certificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
                </parameters>
              </method>
              <method name="Export(System.Security.Cryptography.X509Certificates.X509ContentType)" attrib="134" returntype="System.Byte[]">
                <attributes />
                <parameters>
                  <parameter name="contentType" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509ContentType" />
                </parameters>
              </method>
              <method name="Export(System.Security.Cryptography.X509Certificates.X509ContentType, System.String)" attrib="134" returntype="System.Byte[]">
                <attributes />
                <parameters>
                  <parameter name="contentType" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509ContentType" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Find(System.Security.Cryptography.X509Certificates.X509FindType, System.Object, System.Boolean)" attrib="134" returntype="System.Security.Cryptography.X509Certificates.X509Certificate2Collection">
                <attributes />
                <parameters>
                  <parameter name="findType" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509FindType" />
                  <parameter name="findValue" position="1" attrib="0" type="System.Object" />
                  <parameter name="validOnly" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator">
                <parameters />
              </method>
              <method name="Import(System.Byte[])" attrib="134" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="rawData" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="Import(System.String)" attrib="134" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Import(System.Byte[], System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" attrib="134" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="rawData" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                  <parameter name="keyStorageFlags" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
                </parameters>
              </method>
              <method name="Import(System.String, System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" attrib="134" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="password" position="1" attrib="0" type="System.String" />
                  <parameter name="keyStorageFlags" position="2" attrib="0" type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
                </parameters>
              </method>
              <method name="Insert(System.Int32, System.Security.Cryptography.X509Certificates.X509Certificate2)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="certificate" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
                </parameters>
              </method>
              <method name="Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="certificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
                </parameters>
              </method>
              <method name="RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" attrib="134" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="certificates" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
                </parameters>
              </method>
              <method name="RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2[])" attrib="134" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="certificates" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="X509Certificate2Enumerator" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.IEnumerator" />
            </interfaces>
            <properties>
              <property name="Current" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Certificate2">
                <methods>
                  <method name="get_Current()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509Certificate2">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="MoveNext()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="Reset()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="X509CertificateCollection" type="class" base="System.Collections.CollectionBase" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.X509Certificate[])" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Item" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Certificate" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509Certificate">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, System.Security.Cryptography.X509Certificates.X509Certificate)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Security.Cryptography.X509Certificates.X509Certificate)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                </parameters>
              </method>
              <method name="AddRange(System.Security.Cryptography.X509Certificates.X509CertificateCollection)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
                </parameters>
              </method>
              <method name="AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate[]" />
                </parameters>
              </method>
              <method name="Contains(System.Security.Cryptography.X509Certificates.X509Certificate)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                </parameters>
              </method>
              <method name="CopyTo(System.Security.Cryptography.X509Certificates.X509Certificate[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Security.Cryptography.X509Certificates.X509CertificateCollection+X509CertificateEnumerator">
                <parameters />
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                </parameters>
              </method>
              <method name="Insert(System.Int32, System.Security.Cryptography.X509Certificates.X509Certificate)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="value" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                </parameters>
              </method>
              <method name="Remove(System.Security.Cryptography.X509Certificates.X509Certificate)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate" />
                </parameters>
              </method>
            </methods>
            <classes>
              <class name="X509CertificateEnumerator" type="class" base="System.Object" charset="Ansi" layout="Auto">
                <interfaces>
                  <interface name="System.Collections.IEnumerator" />
                </interfaces>
                <constructors>
                  <constructor name=".ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)" attrib="6278">
                    <parameters>
                      <parameter name="mappings" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
                    </parameters>
                  </constructor>
                </constructors>
                <properties>
                  <property name="Current" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Certificate">
                    <methods>
                      <method name="get_Current()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509Certificate">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="MoveNext()" attrib="134" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="Reset()" attrib="134" returntype="System.Void">
                    <parameters />
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="X509Chain" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="useMachineContext" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IntPtr)" attrib="6278">
                <attributes />
                <parameters>
                  <parameter name="chainContext" position="0" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ChainContext" attrib="0" ptype="System.IntPtr">
                <attributes />
                <methods>
                  <method name="get_ChainContext()" attrib="2182" returntype="System.IntPtr">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ChainElements" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509ChainElementCollection">
                <methods>
                  <method name="get_ChainElements()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509ChainElementCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ChainPolicy" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509ChainPolicy">
                <methods>
                  <method name="get_ChainPolicy()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509ChainPolicy">
                    <parameters />
                  </method>
                  <method name="set_ChainPolicy(System.Security.Cryptography.X509Certificates.X509ChainPolicy)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509ChainPolicy" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ChainStatus" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509ChainStatus[]">
                <methods>
                  <method name="get_ChainStatus()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509ChainStatus[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SafeHandle" attrib="0" ptype="Microsoft.Win32.SafeHandles.SafeX509ChainHandle">
                <methods>
                  <method name="get_SafeHandle()" attrib="2182" returntype="Microsoft.Win32.SafeHandles.SafeX509ChainHandle">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Build(System.Security.Cryptography.X509Certificates.X509Certificate2)" attrib="134" returntype="System.Boolean">
                <attributes />
                <parameters>
                  <parameter name="certificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
                </parameters>
              </method>
              <method name="Create()" attrib="150" static="true" returntype="System.Security.Cryptography.X509Certificates.X509Chain">
                <parameters />
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Reset()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="~X509Chain()" attrib="196" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="X509ChainElement" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <properties>
              <property name="Certificate" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Certificate2">
                <methods>
                  <method name="get_Certificate()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509Certificate2">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ChainElementStatus" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509ChainStatus[]">
                <methods>
                  <method name="get_ChainElementStatus()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509ChainStatus[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Information" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Information()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="X509ChainElementCollection" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509ChainElement" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509ChainElement">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyTo(System.Security.Cryptography.X509Certificates.X509ChainElement[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509ChainElement[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="X509ChainElementEnumerator" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.IEnumerator" />
            </interfaces>
            <properties>
              <property name="Current" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509ChainElement">
                <methods>
                  <method name="get_Current()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509ChainElement">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="Reset()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="X509ChainPolicy" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="ApplicationPolicy" attrib="0" ptype="System.Security.Cryptography.OidCollection">
                <methods>
                  <method name="get_ApplicationPolicy()" attrib="2182" returntype="System.Security.Cryptography.OidCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CertificatePolicy" attrib="0" ptype="System.Security.Cryptography.OidCollection">
                <methods>
                  <method name="get_CertificatePolicy()" attrib="2182" returntype="System.Security.Cryptography.OidCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExtraStore" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Certificate2Collection">
                <methods>
                  <method name="get_ExtraStore()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509Certificate2Collection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RevocationFlag" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509RevocationFlag">
                <methods>
                  <method name="get_RevocationFlag()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509RevocationFlag">
                    <parameters />
                  </method>
                  <method name="set_RevocationFlag(System.Security.Cryptography.X509Certificates.X509RevocationFlag)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509RevocationFlag" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RevocationMode" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509RevocationMode">
                <methods>
                  <method name="get_RevocationMode()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509RevocationMode">
                    <parameters />
                  </method>
                  <method name="set_RevocationMode(System.Security.Cryptography.X509Certificates.X509RevocationMode)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509RevocationMode" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UrlRetrievalTimeout" attrib="0" ptype="System.TimeSpan">
                <methods>
                  <method name="get_UrlRetrievalTimeout()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                  <method name="set_UrlRetrievalTimeout(System.TimeSpan)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.TimeSpan" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="VerificationFlags" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509VerificationFlags">
                <methods>
                  <method name="get_VerificationFlags()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509VerificationFlags">
                    <parameters />
                  </method>
                  <method name="set_VerificationFlags(System.Security.Cryptography.X509Certificates.X509VerificationFlags)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509VerificationFlags" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="VerificationTime" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_VerificationTime()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                  <method name="set_VerificationTime(System.DateTime)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.DateTime" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Reset()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="X509ChainStatus" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
            <properties>
              <property name="Status" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags">
                <methods>
                  <method name="get_Status()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags">
                    <parameters />
                  </method>
                  <method name="set_Status(System.Security.Cryptography.X509Certificates.X509ChainStatusFlags)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="StatusInformation" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_StatusInformation()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_StatusInformation(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="X509ChainStatusFlags" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="CtlNotSignatureValid" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="262144" />
              <field name="CtlNotTimeValid" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="131072" />
              <field name="CtlNotValidForUsage" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="524288" />
              <field name="Cyclic" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="128" />
              <field name="ExplicitDistrust" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="67108864" />
              <field name="HasExcludedNameConstraint" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="32768" />
              <field name="HasNotDefinedNameConstraint" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="8192" />
              <field name="HasNotPermittedNameConstraint" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="16384" />
              <field name="HasNotSupportedCriticalExtension" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="134217728" />
              <field name="HasNotSupportedNameConstraint" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="4096" />
              <field name="HasWeakSignature" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="1048576" />
              <field name="InvalidBasicConstraints" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="1024" />
              <field name="InvalidExtension" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="256" />
              <field name="InvalidNameConstraints" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="2048" />
              <field name="InvalidPolicyConstraints" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="512" />
              <field name="NoError" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="0" />
              <field name="NoIssuanceChainPolicy" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="33554432" />
              <field name="NotSignatureValid" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="8" />
              <field name="NotTimeNested" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="2" />
              <field name="NotTimeValid" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="1" />
              <field name="NotValidForUsage" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="16" />
              <field name="OfflineRevocation" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="16777216" />
              <field name="PartialChain" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="65536" />
              <field name="RevocationStatusUnknown" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="64" />
              <field name="Revoked" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="4" />
              <field name="UntrustedRoot" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" value="32" />
            </fields>
          </class>
          <class name="X509EnhancedKeyUsageExtension" type="class" base="System.Security.Cryptography.X509Certificates.X509Extension" sealed="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.AsnEncodedData, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="encodedEnhancedKeyUsages" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                  <parameter name="critical" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.OidCollection, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="enhancedKeyUsages" position="0" attrib="0" type="System.Security.Cryptography.OidCollection" />
                  <parameter name="critical" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="EnhancedKeyUsages" attrib="0" ptype="System.Security.Cryptography.OidCollection">
                <methods>
                  <method name="get_EnhancedKeyUsages()" attrib="2182" returntype="System.Security.Cryptography.OidCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyFrom(System.Security.Cryptography.AsnEncodedData)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="asnEncodedData" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="X509Extension" type="class" base="System.Security.Cryptography.AsnEncodedData" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.AsnEncodedData, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="encodedExtension" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                  <parameter name="critical" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.Oid, System.Byte[], System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="oid" position="0" attrib="0" type="System.Security.Cryptography.Oid" />
                  <parameter name="rawData" position="1" attrib="0" type="System.Byte[]" />
                  <parameter name="critical" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Byte[], System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="oid" position="0" attrib="0" type="System.String" />
                  <parameter name="rawData" position="1" attrib="0" type="System.Byte[]" />
                  <parameter name="critical" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Critical" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Critical()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Critical(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyFrom(System.Security.Cryptography.AsnEncodedData)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="asnEncodedData" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="X509ExtensionCollection" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Extension" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509Extension">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Extension" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509Extension">
                    <parameters>
                      <parameter name="oid" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Security.Cryptography.X509Certificates.X509Extension)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="extension" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Extension" />
                </parameters>
              </method>
              <method name="CopyTo(System.Security.Cryptography.X509Certificates.X509Extension[], System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Extension[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="X509ExtensionEnumerator" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.IEnumerator" />
            </interfaces>
            <properties>
              <property name="Current" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Extension">
                <methods>
                  <method name="get_Current()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509Extension">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="Reset()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="X509FindType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="FindByApplicationPolicy" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="10" />
              <field name="FindByCertificatePolicy" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="11" />
              <field name="FindByExtension" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="12" />
              <field name="FindByIssuerDistinguishedName" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="4" />
              <field name="FindByIssuerName" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="3" />
              <field name="FindByKeyUsage" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="13" />
              <field name="FindBySerialNumber" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="5" />
              <field name="FindBySubjectDistinguishedName" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="2" />
              <field name="FindBySubjectKeyIdentifier" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="14" />
              <field name="FindBySubjectName" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="1" />
              <field name="FindByTemplateName" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="9" />
              <field name="FindByThumbprint" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="0" />
              <field name="FindByTimeExpired" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="8" />
              <field name="FindByTimeNotYetValid" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="7" />
              <field name="FindByTimeValid" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509FindType" value="6" />
            </fields>
          </class>
          <class name="X509IncludeOption" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="EndCertOnly" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509IncludeOption" value="2" />
              <field name="ExcludeRoot" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509IncludeOption" value="1" />
              <field name="None" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509IncludeOption" value="0" />
              <field name="WholeChain" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509IncludeOption" value="3" />
            </fields>
          </class>
          <class name="X509KeyUsageExtension" type="class" base="System.Security.Cryptography.X509Certificates.X509Extension" sealed="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.AsnEncodedData, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="encodedKeyUsage" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                  <parameter name="critical" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.X509KeyUsageFlags, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="keyUsages" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" />
                  <parameter name="critical" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="KeyUsages" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags">
                <methods>
                  <method name="get_KeyUsages()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyFrom(System.Security.Cryptography.AsnEncodedData)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="asnEncodedData" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="X509KeyUsageFlags" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="CrlSign" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" value="2" />
              <field name="DataEncipherment" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" value="16" />
              <field name="DecipherOnly" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" value="32768" />
              <field name="DigitalSignature" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" value="128" />
              <field name="EncipherOnly" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" value="1" />
              <field name="KeyAgreement" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" value="8" />
              <field name="KeyCertSign" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" value="4" />
              <field name="KeyEncipherment" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" value="32" />
              <field name="NonRepudiation" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" value="64" />
              <field name="None" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" value="0" />
            </fields>
          </class>
          <class name="X509NameType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="DnsFromAlternativeName" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509NameType" value="4" />
              <field name="DnsName" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509NameType" value="3" />
              <field name="EmailName" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509NameType" value="1" />
              <field name="SimpleName" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509NameType" value="0" />
              <field name="UpnName" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509NameType" value="2" />
              <field name="UrlName" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509NameType" value="5" />
            </fields>
          </class>
          <class name="X509RevocationFlag" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="EndCertificateOnly" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509RevocationFlag" value="0" />
              <field name="EntireChain" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509RevocationFlag" value="1" />
              <field name="ExcludeRoot" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509RevocationFlag" value="2" />
            </fields>
          </class>
          <class name="X509RevocationMode" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="NoCheck" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509RevocationMode" value="0" />
              <field name="Offline" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509RevocationMode" value="2" />
              <field name="Online" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509RevocationMode" value="1" />
            </fields>
          </class>
          <class name="X509Store" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.IntPtr)" attrib="22662">
                <attributes />
                <parameters>
                  <parameter name="storeHandle" position="0" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.StoreLocation)" attrib="6278">
                <parameters>
                  <parameter name="storeLocation" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.StoreLocation" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.StoreName)" attrib="6278">
                <parameters>
                  <parameter name="storeName" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.StoreName" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="storeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation)" attrib="6278">
                <parameters>
                  <parameter name="storeName" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.StoreName" />
                  <parameter name="storeLocation" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.StoreLocation" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Security.Cryptography.X509Certificates.StoreLocation)" attrib="6278">
                <parameters>
                  <parameter name="storeName" position="0" attrib="0" type="System.String" />
                  <parameter name="storeLocation" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.StoreLocation" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Certificates" attrib="0" ptype="System.Security.Cryptography.X509Certificates.X509Certificate2Collection">
                <methods>
                  <method name="get_Certificates()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.X509Certificate2Collection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Location" attrib="0" ptype="System.Security.Cryptography.X509Certificates.StoreLocation">
                <methods>
                  <method name="get_Location()" attrib="2182" returntype="System.Security.Cryptography.X509Certificates.StoreLocation">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StoreHandle" attrib="0" ptype="System.IntPtr">
                <attributes />
                <methods>
                  <method name="get_StoreHandle()" attrib="2182" returntype="System.IntPtr">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Security.Cryptography.X509Certificates.X509Certificate2)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="certificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
                </parameters>
              </method>
              <method name="AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" attrib="134" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="certificates" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
                </parameters>
              </method>
              <method name="Close()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Open(System.Security.Cryptography.X509Certificates.OpenFlags)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="flags" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.OpenFlags" />
                </parameters>
              </method>
              <method name="Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="certificate" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
                </parameters>
              </method>
              <method name="RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" attrib="134" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="certificates" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="X509SubjectKeyIdentifierExtension" type="class" base="System.Security.Cryptography.X509Certificates.X509Extension" sealed="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Byte[], System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="subjectKeyIdentifier" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="critical" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.AsnEncodedData, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="encodedSubjectKeyIdentifier" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                  <parameter name="critical" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.PublicKey, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.PublicKey" />
                  <parameter name="critical" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="subjectKeyIdentifier" position="0" attrib="0" type="System.String" />
                  <parameter name="critical" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Cryptography.X509Certificates.PublicKey, System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.Security.Cryptography.X509Certificates.PublicKey" />
                  <parameter name="algorithm" position="1" attrib="0" type="System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm" />
                  <parameter name="critical" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="SubjectKeyIdentifier" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SubjectKeyIdentifier()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyFrom(System.Security.Cryptography.AsnEncodedData)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="asnEncodedData" position="0" attrib="0" type="System.Security.Cryptography.AsnEncodedData" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="X509SubjectKeyIdentifierHashAlgorithm" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="CapiSha1" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm" value="2" />
              <field name="Sha1" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm" value="0" />
              <field name="ShortSha1" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm" value="1" />
            </fields>
          </class>
          <class name="X509VerificationFlags" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AllFlags" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="4095" />
              <field name="AllowUnknownCertificateAuthority" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="16" />
              <field name="IgnoreCertificateAuthorityRevocationUnknown" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="1024" />
              <field name="IgnoreCtlNotTimeValid" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="2" />
              <field name="IgnoreCtlSignerRevocationUnknown" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="512" />
              <field name="IgnoreEndRevocationUnknown" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="256" />
              <field name="IgnoreInvalidBasicConstraints" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="8" />
              <field name="IgnoreInvalidName" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="64" />
              <field name="IgnoreInvalidPolicy" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="128" />
              <field name="IgnoreNotTimeNested" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="4" />
              <field name="IgnoreNotTimeValid" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="1" />
              <field name="IgnoreRootRevocationUnknown" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="2048" />
              <field name="IgnoreWrongUsage" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="32" />
              <field name="NoFlag" attrib="32854" fieldtype="System.Security.Cryptography.X509Certificates.X509VerificationFlags" value="0" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Security.Permissions">
        <classes>
          <class name="TypeDescriptorPermission" type="class" base="System.Security.CodeAccessPermission" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Security.IPermission" />
              <interface name="System.Security.ISecurityEncodable" />
              <interface name="System.Security.IStackWalk" />
              <interface name="System.Security.Permissions.IUnrestrictedPermission" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Security.Permissions.PermissionState)" attrib="6278">
                <parameters>
                  <parameter name="state" position="0" attrib="0" type="System.Security.Permissions.PermissionState" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Security.Permissions.TypeDescriptorPermissionFlags)" attrib="6278">
                <parameters>
                  <parameter name="flag" position="0" attrib="0" type="System.Security.Permissions.TypeDescriptorPermissionFlags" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Flags" attrib="0" ptype="System.Security.Permissions.TypeDescriptorPermissionFlags">
                <methods>
                  <method name="get_Flags()" attrib="2182" returntype="System.Security.Permissions.TypeDescriptorPermissionFlags">
                    <parameters />
                  </method>
                  <method name="set_Flags(System.Security.Permissions.TypeDescriptorPermissionFlags)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Security.Permissions.TypeDescriptorPermissionFlags" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Copy()" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters />
              </method>
              <method name="FromXml(System.Security.SecurityElement)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="securityElement" position="0" attrib="0" type="System.Security.SecurityElement" />
                </parameters>
              </method>
              <method name="Intersect(System.Security.IPermission)" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Security.IPermission" />
                </parameters>
              </method>
              <method name="IsSubsetOf(System.Security.IPermission)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Security.IPermission" />
                </parameters>
              </method>
              <method name="IsUnrestricted()" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="ToXml()" attrib="198" virtual="true" is-override="true" returntype="System.Security.SecurityElement">
                <parameters />
              </method>
              <method name="Union(System.Security.IPermission)" attrib="198" virtual="true" is-override="true" returntype="System.Security.IPermission">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Security.IPermission" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TypeDescriptorPermissionFlags" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="NoFlags" attrib="32854" fieldtype="System.Security.Permissions.TypeDescriptorPermissionFlags" value="0" />
              <field name="RestrictedRegistrationAccess" attrib="32854" fieldtype="System.Security.Permissions.TypeDescriptorPermissionFlags" value="1" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Text.RegularExpressions">
        <classes>
          <class name="Capture" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Index" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Index()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Length()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="CaptureCollection" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Text.RegularExpressions.Capture" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Text.RegularExpressions.Capture">
                    <parameters>
                      <parameter name="i" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="Group" type="class" base="System.Text.RegularExpressions.Capture" serializable="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Captures" attrib="0" ptype="System.Text.RegularExpressions.CaptureCollection">
                <methods>
                  <method name="get_Captures()" attrib="2182" returntype="System.Text.RegularExpressions.CaptureCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Success" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Success()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Synchronized(System.Text.RegularExpressions.Group)" attrib="150" static="true" returntype="System.Text.RegularExpressions.Group">
                <parameters>
                  <parameter name="inner" position="0" attrib="0" type="System.Text.RegularExpressions.Group" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="GroupCollection" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Text.RegularExpressions.Group" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="System.Text.RegularExpressions.Group">
                    <parameters>
                      <parameter name="groupnum" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Text.RegularExpressions.Group" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2182" returntype="System.Text.RegularExpressions.Group">
                    <parameters>
                      <parameter name="groupname" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="Match" type="class" base="System.Text.RegularExpressions.Group" serializable="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Empty" attrib="0" ptype="System.Text.RegularExpressions.Match">
                <methods>
                  <method name="get_Empty()" attrib="2198" static="true" returntype="System.Text.RegularExpressions.Match">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Groups" attrib="0" ptype="System.Text.RegularExpressions.GroupCollection">
                <methods>
                  <method name="get_Groups()" attrib="2502" virtual="true" returntype="System.Text.RegularExpressions.GroupCollection">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="NextMatch()" attrib="134" returntype="System.Text.RegularExpressions.Match">
                <parameters />
              </method>
              <method name="Result(System.String)" attrib="454" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="replacement" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Synchronized(System.Text.RegularExpressions.Match)" attrib="150" static="true" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="inner" position="0" attrib="0" type="System.Text.RegularExpressions.Match" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MatchCollection" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsSynchronized" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSynchronized()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Text.RegularExpressions.Match" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2502" virtual="true" returntype="System.Text.RegularExpressions.Match">
                    <parameters>
                      <parameter name="i" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SyncRoot" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_SyncRoot()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CopyTo(System.Array, System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Array" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="MatchEvaluator" type="delegate" base="System.MulticastDelegate" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Text.RegularExpressions.Match, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Text.RegularExpressions.Match" />
                  <parameter name="callback" position="1" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Text.RegularExpressions.Match)" attrib="454" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Text.RegularExpressions.Match" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Regex" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <fields>
              <field name="InfiniteMatchTimeout" attrib="182" fieldtype="System.TimeSpan" />
              <field name="capnames" attrib="5" fieldtype="System.Collections.Hashtable" />
              <field name="caps" attrib="5" fieldtype="System.Collections.Hashtable" />
              <field name="capsize" attrib="5" fieldtype="System.Int32" />
              <field name="capslist" attrib="5" fieldtype="System.String[]" />
              <field name="factory" attrib="5" fieldtype="System.Text.RegularExpressions.RegexRunnerFactory" />
              <field name="internalMatchTimeout" attrib="5" fieldtype="System.TimeSpan">
                <attributes>
                  <attribute name="System.Runtime.Serialization.OptionalFieldAttribute">
                    <properties>
                      <property name="VersionAdded" value="2" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="pattern" attrib="5" fieldtype="System.String" />
              <field name="roptions" attrib="5" fieldtype="System.Text.RegularExpressions.RegexOptions" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Text.RegularExpressions.RegexOptions)" attrib="6278">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                  <parameter name="options" position="1" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)" attrib="6278">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                  <parameter name="options" position="1" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                  <parameter name="matchTimeout" position="2" attrib="0" type="System.TimeSpan" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CacheSize" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_CacheSize()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_CacheSize(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CapNames" attrib="0" ptype="System.Collections.IDictionary">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_CapNames()" attrib="2180" returntype="System.Collections.IDictionary">
                    <parameters />
                  </method>
                  <method name="set_CapNames(System.Collections.IDictionary)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Collections.IDictionary" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Caps" attrib="0" ptype="System.Collections.IDictionary">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Caps()" attrib="2180" returntype="System.Collections.IDictionary">
                    <parameters />
                  </method>
                  <method name="set_Caps(System.Collections.IDictionary)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Collections.IDictionary" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MatchTimeout" attrib="0" ptype="System.TimeSpan">
                <methods>
                  <method name="get_MatchTimeout()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Options" attrib="0" ptype="System.Text.RegularExpressions.RegexOptions">
                <methods>
                  <method name="get_Options()" attrib="2182" returntype="System.Text.RegularExpressions.RegexOptions">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RightToLeft" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_RightToLeft()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Escape(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="str" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetGroupNames()" attrib="134" returntype="System.String[]">
                <parameters />
              </method>
              <method name="GetGroupNumbers()" attrib="134" returntype="System.Int32[]">
                <parameters />
              </method>
              <method name="GroupNameFromNumber(System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="i" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GroupNumberFromName(System.String)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="InitializeReferences()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="IsMatch(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsMatch(System.String, System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="startat" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IsMatch(System.String, System.String)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsMatch(System.String, System.String, System.Text.RegularExpressions.RegexOptions)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="options" position="2" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </method>
              <method name="IsMatch(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="options" position="2" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                  <parameter name="matchTimeout" position="3" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="Match(System.String)" attrib="134" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Match(System.String, System.Int32)" attrib="134" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="startat" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Match(System.String, System.String)" attrib="150" static="true" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Match(System.String, System.Int32, System.Int32)" attrib="134" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="beginning" position="1" attrib="0" type="System.Int32" />
                  <parameter name="length" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Match(System.String, System.String, System.Text.RegularExpressions.RegexOptions)" attrib="150" static="true" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="options" position="2" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </method>
              <method name="Match(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)" attrib="150" static="true" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="options" position="2" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                  <parameter name="matchTimeout" position="3" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="Matches(System.String)" attrib="134" returntype="System.Text.RegularExpressions.MatchCollection">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Matches(System.String, System.Int32)" attrib="134" returntype="System.Text.RegularExpressions.MatchCollection">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="startat" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Matches(System.String, System.String)" attrib="150" static="true" returntype="System.Text.RegularExpressions.MatchCollection">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Matches(System.String, System.String, System.Text.RegularExpressions.RegexOptions)" attrib="150" static="true" returntype="System.Text.RegularExpressions.MatchCollection">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="options" position="2" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </method>
              <method name="Matches(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)" attrib="150" static="true" returntype="System.Text.RegularExpressions.MatchCollection">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="options" position="2" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                  <parameter name="matchTimeout" position="3" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="replacement" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.Text.RegularExpressions.MatchEvaluator)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="evaluator" position="1" attrib="0" type="System.Text.RegularExpressions.MatchEvaluator" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="replacement" position="1" attrib="0" type="System.String" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="replacement" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="evaluator" position="2" attrib="0" type="System.Text.RegularExpressions.MatchEvaluator" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="evaluator" position="1" attrib="0" type="System.Text.RegularExpressions.MatchEvaluator" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.Int32, System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="replacement" position="1" attrib="0" type="System.String" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="startat" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.String, System.Text.RegularExpressions.RegexOptions)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="replacement" position="2" attrib="0" type="System.String" />
                  <parameter name="options" position="3" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator, System.Text.RegularExpressions.RegexOptions)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="evaluator" position="2" attrib="0" type="System.Text.RegularExpressions.MatchEvaluator" />
                  <parameter name="options" position="3" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32, System.Int32)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="evaluator" position="1" attrib="0" type="System.Text.RegularExpressions.MatchEvaluator" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="startat" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="replacement" position="2" attrib="0" type="System.String" />
                  <parameter name="options" position="3" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                  <parameter name="matchTimeout" position="4" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="evaluator" position="2" attrib="0" type="System.Text.RegularExpressions.MatchEvaluator" />
                  <parameter name="options" position="3" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                  <parameter name="matchTimeout" position="4" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="Split(System.String)" attrib="134" returntype="System.String[]">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Split(System.String, System.Int32)" attrib="134" returntype="System.String[]">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Split(System.String, System.String)" attrib="150" static="true" returntype="System.String[]">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Split(System.String, System.Int32, System.Int32)" attrib="134" returntype="System.String[]">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                  <parameter name="startat" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Split(System.String, System.String, System.Text.RegularExpressions.RegexOptions)" attrib="150" static="true" returntype="System.String[]">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="options" position="2" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                </parameters>
              </method>
              <method name="Split(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)" attrib="150" static="true" returntype="System.String[]">
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.String" />
                  <parameter name="pattern" position="1" attrib="0" type="System.String" />
                  <parameter name="options" position="2" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                  <parameter name="matchTimeout" position="3" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Unescape(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="str" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="UseOptionC()" attrib="132" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="UseOptionR()" attrib="132" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="ValidateMatchTimeout(System.TimeSpan)" attrib="149" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="matchTimeout" position="0" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="RegexCompilationInfo" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String, System.Text.RegularExpressions.RegexOptions, System.String, System.String, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                  <parameter name="options" position="1" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                  <parameter name="name" position="2" attrib="0" type="System.String" />
                  <parameter name="fullnamespace" position="3" attrib="0" type="System.String" />
                  <parameter name="ispublic" position="4" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Text.RegularExpressions.RegexOptions, System.String, System.String, System.Boolean, System.TimeSpan)" attrib="6278">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                  <parameter name="options" position="1" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                  <parameter name="name" position="2" attrib="0" type="System.String" />
                  <parameter name="fullnamespace" position="3" attrib="0" type="System.String" />
                  <parameter name="ispublic" position="4" attrib="0" type="System.Boolean" />
                  <parameter name="matchTimeout" position="5" attrib="0" type="System.TimeSpan" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsPublic" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsPublic()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IsPublic(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MatchTimeout" attrib="0" ptype="System.TimeSpan">
                <methods>
                  <method name="get_MatchTimeout()" attrib="2182" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                  <method name="set_MatchTimeout(System.TimeSpan)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.TimeSpan" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Name(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Namespace" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Namespace()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Namespace(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Options" attrib="0" ptype="System.Text.RegularExpressions.RegexOptions">
                <methods>
                  <method name="get_Options()" attrib="2182" returntype="System.Text.RegularExpressions.RegexOptions">
                    <parameters />
                  </method>
                  <method name="set_Options(System.Text.RegularExpressions.RegexOptions)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Text.RegularExpressions.RegexOptions" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Pattern" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Pattern()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Pattern(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="RegexMatchTimeoutException" type="class" base="System.TimeoutException" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="22660">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="inner" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.TimeSpan)" attrib="6278">
                <parameters>
                  <parameter name="regexInput" position="0" attrib="0" type="System.String" />
                  <parameter name="regexPattern" position="1" attrib="0" type="System.String" />
                  <parameter name="matchTimeout" position="2" attrib="0" type="System.TimeSpan" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Input" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Input()" attrib="18566" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MatchTimeout" attrib="0" ptype="System.TimeSpan">
                <methods>
                  <method name="get_MatchTimeout()" attrib="18566" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Pattern" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Pattern()" attrib="18566" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="RegexOptions" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Compiled" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="8" />
              <field name="CultureInvariant" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="512" />
              <field name="ECMAScript" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="256" />
              <field name="ExplicitCapture" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="4" />
              <field name="IgnoreCase" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="1" />
              <field name="IgnorePatternWhitespace" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="32" />
              <field name="Multiline" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="2" />
              <field name="None" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="0" />
              <field name="RightToLeft" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="64" />
              <field name="Singleline" attrib="32854" fieldtype="System.Text.RegularExpressions.RegexOptions" value="16" />
            </fields>
          </class>
          <class name="RegexRunner" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                <properties>
                  <property name="State" value="Never" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="runcrawl" attrib="5" fieldtype="System.Int32[]" />
              <field name="runcrawlpos" attrib="5" fieldtype="System.Int32" />
              <field name="runmatch" attrib="5" fieldtype="System.Text.RegularExpressions.Match" />
              <field name="runregex" attrib="5" fieldtype="System.Text.RegularExpressions.Regex" />
              <field name="runstack" attrib="5" fieldtype="System.Int32[]" />
              <field name="runstackpos" attrib="5" fieldtype="System.Int32" />
              <field name="runtext" attrib="5" fieldtype="System.String" />
              <field name="runtextbeg" attrib="5" fieldtype="System.Int32" />
              <field name="runtextend" attrib="5" fieldtype="System.Int32" />
              <field name="runtextpos" attrib="5" fieldtype="System.Int32" />
              <field name="runtextstart" attrib="5" fieldtype="System.Int32" />
              <field name="runtrack" attrib="5" fieldtype="System.Int32[]" />
              <field name="runtrackcount" attrib="5" fieldtype="System.Int32" />
              <field name="runtrackpos" attrib="5" fieldtype="System.Int32" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6277">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Capture(System.Int32, System.Int32, System.Int32)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="capnum" position="0" attrib="0" type="System.Int32" />
                  <parameter name="start" position="1" attrib="0" type="System.Int32" />
                  <parameter name="end" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CharInClass(System.Char, System.String)" attrib="148" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="ch" position="0" attrib="0" type="System.Char" />
                  <parameter name="charClass" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CharInSet(System.Char, System.String, System.String)" attrib="148" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="ch" position="0" attrib="0" type="System.Char" />
                  <parameter name="set" position="1" attrib="0" type="System.String" />
                  <parameter name="category" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CheckTimeout()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="Crawl(System.Int32)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="i" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Crawlpos()" attrib="132" returntype="System.Int32">
                <parameters />
              </method>
              <method name="DoubleCrawl()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="DoubleStack()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="DoubleTrack()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="EnsureStorage()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
              <method name="FindFirstChar()" attrib="1476" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="Go()" attrib="1476" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="InitTrackCount()" attrib="1476" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="IsBoundary(System.Int32, System.Int32, System.Int32)" attrib="132" returntype="System.Boolean">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="startpos" position="1" attrib="0" type="System.Int32" />
                  <parameter name="endpos" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IsECMABoundary(System.Int32, System.Int32, System.Int32)" attrib="132" returntype="System.Boolean">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="startpos" position="1" attrib="0" type="System.Int32" />
                  <parameter name="endpos" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="IsMatched(System.Int32)" attrib="132" returntype="System.Boolean">
                <parameters>
                  <parameter name="cap" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="MatchIndex(System.Int32)" attrib="132" returntype="System.Int32">
                <parameters>
                  <parameter name="cap" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="MatchLength(System.Int32)" attrib="132" returntype="System.Int32">
                <parameters>
                  <parameter name="cap" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Popcrawl()" attrib="132" returntype="System.Int32">
                <parameters />
              </method>
              <method name="Scan(System.Text.RegularExpressions.Regex, System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" attrib="133" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="regex" position="0" attrib="0" type="System.Text.RegularExpressions.Regex" />
                  <parameter name="text" position="1" attrib="0" type="System.String" />
                  <parameter name="textbeg" position="2" attrib="0" type="System.Int32" />
                  <parameter name="textend" position="3" attrib="0" type="System.Int32" />
                  <parameter name="textstart" position="4" attrib="0" type="System.Int32" />
                  <parameter name="prevlen" position="5" attrib="0" type="System.Int32" />
                  <parameter name="quick" position="6" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Scan(System.Text.RegularExpressions.Regex, System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean, System.TimeSpan)" attrib="133" returntype="System.Text.RegularExpressions.Match">
                <parameters>
                  <parameter name="regex" position="0" attrib="0" type="System.Text.RegularExpressions.Regex" />
                  <parameter name="text" position="1" attrib="0" type="System.String" />
                  <parameter name="textbeg" position="2" attrib="0" type="System.Int32" />
                  <parameter name="textend" position="3" attrib="0" type="System.Int32" />
                  <parameter name="textstart" position="4" attrib="0" type="System.Int32" />
                  <parameter name="prevlen" position="5" attrib="0" type="System.Int32" />
                  <parameter name="quick" position="6" attrib="0" type="System.Boolean" />
                  <parameter name="timeout" position="7" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="TransferCapture(System.Int32, System.Int32, System.Int32, System.Int32)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="capnum" position="0" attrib="0" type="System.Int32" />
                  <parameter name="uncapnum" position="1" attrib="0" type="System.Int32" />
                  <parameter name="start" position="2" attrib="0" type="System.Int32" />
                  <parameter name="end" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Uncapture()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="RegexRunnerFactory" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                <properties>
                  <property name="State" value="Never" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CreateInstance()" attrib="1477" abstract="true" virtual="true" returntype="System.Text.RegularExpressions.RegexRunner">
                <parameters />
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Threading">
        <classes>
          <class name="Barrier" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Participant Count={ParticipantCount},Participants Remaining={ParticipantsRemaining}" />
                </properties>
              </attribute>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="False" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="participantCount" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Action`1[System.Threading.Barrier])" attrib="6278">
                <parameters>
                  <parameter name="participantCount" position="0" attrib="0" type="System.Int32" />
                  <parameter name="postPhaseAction" position="1" attrib="0" type="System.Action`1[System.Threading.Barrier]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CurrentPhaseNumber" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_CurrentPhaseNumber()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ParticipantCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ParticipantCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ParticipantsRemaining" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ParticipantsRemaining()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddParticipant()" attrib="134" returntype="System.Int64">
                <parameters />
              </method>
              <method name="AddParticipants(System.Int32)" attrib="134" returntype="System.Int64">
                <parameters>
                  <parameter name="participantCount" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="RemoveParticipant()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="RemoveParticipants(System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="participantCount" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SignalAndWait()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="SignalAndWait(System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="millisecondsTimeout" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SignalAndWait(System.Threading.CancellationToken)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="cancellationToken" position="0" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="SignalAndWait(System.TimeSpan)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="timeout" position="0" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="SignalAndWait(System.Int32, System.Threading.CancellationToken)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="millisecondsTimeout" position="0" attrib="0" type="System.Int32" />
                  <parameter name="cancellationToken" position="1" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
              <method name="SignalAndWait(System.TimeSpan, System.Threading.CancellationToken)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="timeout" position="0" attrib="0" type="System.TimeSpan" />
                  <parameter name="cancellationToken" position="1" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="BarrierPostPhaseException" type="class" base="System.Exception" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="innerException" position="0" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <attributes>
                  <attribute name="System.Security.SecurityCriticalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="innerException" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="Semaphore" type="class" base="System.Threading.WaitHandle" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
                <properties>
                  <property name="Value" value="False" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Int32, System.Int32)" attrib="6278">
                <attributes>
                  <attribute name="System.Security.SecuritySafeCriticalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="initialCount" position="0" attrib="0" type="System.Int32" />
                  <parameter name="maximumCount" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Int32, System.String)" attrib="22662">
                <parameters>
                  <parameter name="initialCount" position="0" attrib="0" type="System.Int32" />
                  <parameter name="maximumCount" position="1" attrib="0" type="System.Int32" />
                  <parameter name="name" position="2" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Int32, System.String, out System.Boolean&amp;)" attrib="22662">
                <parameters>
                  <parameter name="initialCount" position="0" attrib="0" type="System.Int32" />
                  <parameter name="maximumCount" position="1" attrib="0" type="System.Int32" />
                  <parameter name="name" position="2" attrib="0" type="System.String" />
                  <parameter name="createdNew" position="3" attrib="2" type="System.Boolean" direction="out" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Int32, System.String, out System.Boolean&amp;, System.Security.AccessControl.SemaphoreSecurity)" attrib="22662">
                <parameters>
                  <parameter name="initialCount" position="0" attrib="0" type="System.Int32" />
                  <parameter name="maximumCount" position="1" attrib="0" type="System.Int32" />
                  <parameter name="name" position="2" attrib="0" type="System.String" />
                  <parameter name="createdNew" position="3" attrib="2" type="System.Boolean" direction="out" />
                  <parameter name="semaphoreSecurity" position="4" attrib="0" type="System.Security.AccessControl.SemaphoreSecurity" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetAccessControl()" attrib="134" returntype="System.Security.AccessControl.SemaphoreSecurity">
                <parameters />
              </method>
              <method name="OpenExisting(System.String)" attrib="16534" static="true" returntype="System.Threading.Semaphore">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="OpenExisting(System.String, System.Security.AccessControl.SemaphoreRights)" attrib="16534" static="true" returntype="System.Threading.Semaphore">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="rights" position="1" attrib="0" type="System.Security.AccessControl.SemaphoreRights" />
                </parameters>
              </method>
              <method name="Release()" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute" />
                  <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
                    <properties>
                      <property name="ConsistencyGuarantee" value="WillNotCorruptState" />
                      <property name="Cer" value="Success" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Release(System.Int32)" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
                    <properties>
                      <property name="ConsistencyGuarantee" value="WillNotCorruptState" />
                      <property name="Cer" value="Success" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="releaseCount" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="semaphoreSecurity" position="0" attrib="0" type="System.Security.AccessControl.SemaphoreSecurity" />
                </parameters>
              </method>
              <method name="TryOpenExisting(System.String, out System.Threading.Semaphore&amp;)" attrib="16534" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="result" position="1" attrib="2" type="System.Threading.Semaphore" direction="out" />
                </parameters>
              </method>
              <method name="TryOpenExisting(System.String, System.Security.AccessControl.SemaphoreRights, out System.Threading.Semaphore&amp;)" attrib="16534" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="rights" position="1" attrib="0" type="System.Security.AccessControl.SemaphoreRights" />
                  <parameter name="result" position="2" attrib="2" type="System.Threading.Semaphore" direction="out" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ThreadExceptionEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="t" position="0" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Exception" attrib="0" ptype="System.Exception">
                <methods>
                  <method name="get_Exception()" attrib="2182" returntype="System.Exception">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ThreadExceptionEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Threading.ThreadExceptionEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Threading.ThreadExceptionEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Threading.ThreadExceptionEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Threading.ThreadExceptionEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Timers">
        <classes>
          <class name="ElapsedEventArgs" type="class" base="System.EventArgs" charset="Ansi" layout="Auto">
            <properties>
              <property name="SignalTime" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_SignalTime()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ElapsedEventHandler" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, System.Timers.ElapsedEventArgs, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Timers.ElapsedEventArgs" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, System.Timers.ElapsedEventArgs)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="e" position="1" attrib="0" type="System.Timers.ElapsedEventArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Timer" type="class" base="System.ComponentModel.Component" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.DefaultEventAttribute">
                <properties>
                  <property name="Name" value="Elapsed" />
                </properties>
              </attribute>
              <attribute name="System.ComponentModel.DefaultPropertyAttribute">
                <properties>
                  <property name="Name" value="Interval" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ComponentModel.IComponent" />
              <interface name="System.ComponentModel.ISupportInitialize" />
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Double)" attrib="6278">
                <parameters>
                  <parameter name="interval" position="0" attrib="0" type="System.Double" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AutoReset" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.CategoryAttribute" />
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.Timers.TimersDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_AutoReset()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AutoReset(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Enabled" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.CategoryAttribute" />
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.Timers.TimersDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_Enabled()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Enabled(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Interval" attrib="0" ptype="System.Double">
                <attributes>
                  <attribute name="System.ComponentModel.CategoryAttribute" />
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="100" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.SettingsBindableAttribute">
                    <properties>
                      <property name="Bindable" value="True" />
                    </properties>
                  </attribute>
                  <attribute name="System.Timers.TimersDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_Interval()" attrib="2182" returntype="System.Double">
                    <parameters />
                  </method>
                  <method name="set_Interval(System.Double)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Double" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Site" attrib="0" ptype="System.ComponentModel.ISite">
                <methods>
                  <method name="get_Site()" attrib="2246" virtual="true" is-override="true" returntype="System.ComponentModel.ISite">
                    <parameters />
                  </method>
                  <method name="set_Site(System.ComponentModel.ISite)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.ISite" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SynchronizingObject" attrib="0" ptype="System.ComponentModel.ISynchronizeInvoke">
                <attributes>
                  <attribute name="System.ComponentModel.BrowsableAttribute">
                    <properties>
                      <property name="Browsable" value="False" />
                    </properties>
                  </attribute>
                  <attribute name="System.ComponentModel.DefaultValueAttribute">
                    <properties>
                      <property name="Value" value="null" />
                    </properties>
                  </attribute>
                  <attribute name="System.Timers.TimersDescriptionAttribute" />
                </attributes>
                <methods>
                  <method name="get_SynchronizingObject()" attrib="2182" returntype="System.ComponentModel.ISynchronizeInvoke">
                    <parameters />
                  </method>
                  <method name="set_SynchronizingObject(System.ComponentModel.ISynchronizeInvoke)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.ComponentModel.ISynchronizeInvoke" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="Elapsed" attrib="0" eventtype="System.Timers.ElapsedEventHandler">
                <attributes>
                  <attribute name="System.ComponentModel.CategoryAttribute" />
                  <attribute name="System.Timers.TimersDescriptionAttribute" />
                </attributes>
              </event>
            </events>
            <methods>
              <method name="BeginInit()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Close()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="EndInit()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Start()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Stop()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TimersDescriptionAttribute" type="class" base="System.ComponentModel.DescriptionAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="description" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Description" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Description()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Windows.Input">
        <classes>
          <class name="ICommand" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.CompilerServices.TypeForwardedFromAttribute">
                <properties>
                  <property name="AssemblyFullName" value="PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
                </properties>
              </attribute>
            </attributes>
            <events>
              <event name="CanExecuteChanged" attrib="0" eventtype="System.EventHandler" />
            </events>
            <methods>
              <method name="CanExecute(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Execute(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Windows.Markup">
        <classes>
          <class name="ValueSerializerAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Interface, Property, Method, Enum, Struct, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="valueSerializerTypeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="valueSerializerType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ValueSerializerType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ValueSerializerType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ValueSerializerTypeName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ValueSerializerTypeName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
        </classes>
      </namespace>
    </namespaces>
  </assembly>
</assemblies>