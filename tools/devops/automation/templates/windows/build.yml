parameters:

- name: statusContext
  type: string 
  default: 'Windows Integration Tests'

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

steps:

- template: ../common/checkout.yml
  parameters:
    isPR: ${{ parameters.isPR }}
    repositoryAlias: ${{ parameters.repositoryAlias }}
    commit: ${{ parameters.commit }}

- pwsh: |
    gci env: | format-table -autosize -wrap
  displayName: 'Dump Environment'

- pwsh: |
    Write-Host "Run windows tests."
    Write-Host "Mac agent to be used:"
    Write-Host "Mac agent pool: $Env:MAC_AGENT_POOL"
    Write-Host "Mac agent name: $Env:MAC_AGENT_NAME"
    Write-Host "Mac agent IP: $Env:MAC_AGENT_IP"
  displayName: Run tests

# Upload all the binlogs
# Copy all the binlogs to a separate directory, keeping directory structure.
- pwsh: |
    $sourceDir = '$(Build.SourcesDirectory)\xamarin-macios'
    $targetDir = '$(Build.ArtifactStagingDirectory)\windows-binlogs'
    New-Item -Path "$targetDir" -ItemType "directory" -Force

    $binlogs = Get-ChildItem $sourceDir -Recurse -Include "*.binlog"
    foreach ($binlog in $binlogs) {
        $targetFile = $targetDir + $binlog.FullName.SubString($sourceDir.Length);
        New-Item -ItemType File -Path $targetFile -Force
        Copy-Item $binlog.FullName -destination $targetFile
    }
  displayName: Copy all binlogs
  continueOnError: true
  condition: succeededOrFailed()

# Publish all the binlogs we collected in the previous step
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: Windows binlogs'
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)/windows-binlogs
    artifactName: windows-binlogs-test-$(Build.BuildId)-$(System.JobAttempt)
  continueOnError: true
  condition: succeededOrFailed()

# Make sure to report any errors
- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\MaciosCI.psd1
    $githubComments = New-GitHubCommentsObjectFromUrl -Url "$(Build.Repository.Uri)" -Token $(GitHub.Token) -Hash $Env:COMMENT_HASH
    $statuses = New-GitHubStatusesObjectFromUrl -Url "$(Build.Repository.Uri)" -Token $(GitHub.Token)

    if (Test-Path -Path "$Env:GITHUB_FAILURE_COMMENT_FILE" -PathType Leaf)  {
      $statuses.SetStatus("error", "${{ parameters.statusContext }} failed.", "${{ parameters.statusContext }}")
      $githubComments.NewCommentFromFile("${{ parameters.statusContext }} failed", ":x:", "$Env:GITHUB_FAILURE_COMMENT_FILE")
    } elseif ("$($Env:AGENT_JOBSTATUS)" -ne "Succeeded") {
      $statuses.SetStatus("error", "${{ parameters.statusContext }} failed.", "${{ parameters.statusContext }}")
      $message = ":x: $($Env:AGENT_JOBSTATUS) :x:"
      $githubComments.NewCommentFromMessage("${{ parameters.statusContext }} failed", ":x:", $message)
    } else {
      $statuses.SetStatus("success", "${{ parameters.statusContext }} passed.", "${{ parameters.statusContext }}")
      $message = ":white_check_mark: **All** ${{ parameters.statusContext }} passed."
      $githubComments.NewCommentFromMessage("${{ parameters.statusContext }} passed", ":computer:", $message)
    }
  displayName: 'Report results to GitHub'
  timeoutInMinutes: 5
  condition: always() # in particular we care if something failed, but let's always run just in case
  continueOnError: true
  env:
    CONTEXT: ${{ parameters.statusContext }}
    GITHUB_TOKEN: $(GitHub.Token)
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    TEST_BOT: $(Agent.Name)
    ${{ if eq(parameters.repositoryAlias, 'self') }}:
      COMMENT_HASH: $(fix_commit.GIT_HASH)
    ${{ else }}:
      COMMENT_HASH: $(Build.SourceVersion)

- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\MaciosCI.psd1
    $vsts = New-VSTS -Org "devdiv" -Project "DevDiv" -Token $(MacPoolAccessToken)

    # get the pool and the agent objects and disable the bot
    $pool = $vsts.Pools.GetPool("$Env:MAC_AGENT_POOL")
    $agent = $vsts.Agents.GetAgent($pool, $Env:MAC_AGENT_NAME)
    $vsts.Agents.SetEnabled($pool, $agent, $True)
  displayName: 'Re-enabled macOS bot from pool'
  condition: always()
