// vim: set filetype=c :
//
// delegates.m:
//
// Authors:
//   Rolf Bjarne Kvinge <rolf@xamarin.com>
//
// Copyright 2013-2014 Xamarin Inc.
//
<#@ include file="delegates.t4" #>

/*
 * This file was generated from delegates.inc.t4, any modifications will be lost once this file is re-generated.
 */

#include "delegates.h"

<# foreach (var d in delegates) { #>
typedef <#= d.CReturnType #><#= d.AlignCReturnType #> (*func_<#= d.EntryPoint #>)<#= d.AlignEntryPoint #> (<#= d.CArgumentSignature #>);
<# } #>

struct Delegates {
<# foreach (var d in delegates) { #>
	func_<#= d.EntryPoint #><#= d.AlignEntryPoint #> <#= d.EntryPoint.Substring ("xamarin_".Length) #>;
<# } #>
};

static struct Delegates delegates = { 0 };

static guint32
create_linked_away_exception (const char *func, MonoException *inner_exc)
{
	char *msg = xamarin_strdup_printf ("The runtime function %s has been linked away.", func);
	guint32 gchandle = xamarin_create_product_exception (8028, msg);
	xamarin_free (msg);
	return gchandle;
}

static guint32
create_inexistent_exception (const char *func, MonoObject *inner_exc)
{
#if DYNAMIC_MONO_RUNTIME
	char *msg = xamarin_strdup_printf ("The runtime function %s wasn't found or loaded correctly. This is most likely due to an incompatible Mono version at runtime (this version of Xamarin.Mac requires at least Mono " MIN_XM_MONO_VERSION ").", func);
#else
	char *msg = xamarin_strdup_printf ("The runtime function %s wasn't found or loaded correctly.", func);
#endif
	MonoException *exc = inner_exc == NULL ? xamarin_create_exception (msg) : xamarin_create_exception_with_inner (msg, (MonoException *) inner_exc);
	xamarin_free (msg);
	return mono_gchandle_new ((MonoObject *) exc, FALSE);;
}

<# foreach (var d in delegates) { #>
<#= d.CReturnType #>
<#= d.EntryPoint #> (<#= d.CArgumentSignature #>)
{
	<#if (d.ExceptionHandling) {#>if (delegates.<#= d.EntryPoint.Substring ("xamarin_".Length) #> == NULL) {
		*exception_gchandle = <#= d.OnlyDynamicUsage ? "create_linked_away_exception" : "create_inexistent_exception" #> ("<#= d.EntryPoint.Substring ("xamarin_".Length) #>", <#= d.InnerException #>);
		return<# if (d.CReturnType != "void") { #> (<#= d.CReturnType #>) 0<# } #>;
	}
<#}#>
	<# if (d.CReturnType != "void") { #>return <# } #>delegates.<#= d.EntryPoint.Substring ("xamarin_".Length) #> (<#= d.CArgumentNames #>);
}

<# } #>
