<Documentation>
  <Docs DocId="T:CoreImage.CIConstantColorGenerator">
    <summary>Generates a solid color.</summary>
    <remarks>
      <para>The following example shows this filter in use</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Create the ConstantColorGenerator
var colorGen = new CIConstantColorGenerator ()
{
	Color = new CIColor (UIColor.Blue)
};

// The Generator Filters need to be cropped before they can be displayed
var crop = new CICrop ()
{ 
	Image = colorGen.OutputImage,
	Rectangle = new CIVector (0, 0, window.Bounds.Width, window.Bounds.Height) 
};

// Get the final Image from the Crop Filter
var output = crop.OutputImage;
		
// To render the results, we need to create a context, and then
// use one of the context rendering APIs, in this case, we render the
// result into a CoreGraphics image, which is merely a useful representation
//
var context = CIContext.FromOptions (null);

var cgimage = context.CreateCGImage (output, output.Extent);

// The above cgimage can be added to a screen view, for example, this
// would add it to a UIImageView on the screen:
myImageView.Image = UIImage.FromImage (cgimage);
        ]]></code>
      </example>
      <para>
        <img href="~/CoreImage/_images/CoreImage.CIConstantColorGenerator.png" alt="Result of applying the filter." />
      </para>
    </remarks>
  </Docs>
</Documentation>