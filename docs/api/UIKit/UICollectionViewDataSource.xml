<Documentation>
  <Docs DocId="T:UIKit.UICollectionViewDataSource">
    <summary>The data source for a <see cref="T:UIKit.UICollectionView" />.</summary>
    <remarks>
      <para>
        As with other parts of iOS, such as <see cref="T:UIKit.UITableView" /> and <see cref="T:MapKit.MKMapView" />, <see cref="T:UIKit.UICollectionView" /> gets its data from a data source, which is exposed in MonoTouch via the <see cref="T:UIKit.UICollectionViewDataSource" /> class. This class is responsible for providing the content to the <see cref="T:UIKit.UICollectionView" /> including:
      </para>
      <list type="bullet">
        <item>
          <term>Cells – Returned from <see cref="M:UIKit.UICollectionViewDataSource.GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)" /> method.</term>
        </item>
        <item>
          <term>Supplementary Views – Returned from <see cref="M:UIKit.UICollectionViewDataSource.GetViewForSupplementaryElement(UIKit.UICollectionView,Foundation.NSString,Foundation.NSIndexPath)" /> method.</term>
        </item>
        <item>
          <term>Number of sections – Returned from <see cref="M:UIKit.UICollectionViewDataSource.NumberOfSections(UIKit.UICollectionView)" /> method. Defaults to 1 if not implemented.</term>
        </item>
        <item>
          <term>Number of items per section – Returned from <see cref="M:UIKit.UICollectionViewDataSource.GetItemsCount(UIKit.UICollectionView,System.nint)" /> method.</term>
        </item>
      </list>
      <para>The <see cref="T:UIKit.UICollectionView" /> maintains a reuse queue, which efficiently reuses <see cref="T:UIKit.UICollectionReusableView" />s without allocating and de-allocating any more than necessary. The <see cref="M:UIKit.UICollectionViewDataSource.GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)" /> and <see cref="M:UIKit.UICollectionViewDataSource.GetViewForSupplementaryElement(UIKit.UICollectionView,Foundation.NSString,Foundation.NSIndexPath)" /> are the functions that mutate the values of <see cref="T:UIKit.UICollectionReusableView" /> component views. Because these methods may be called frequently during scrolling (particularly <see cref="M:UIKit.UICollectionViewDataSource.GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)" />), the application developer should avoid unnecessary calculation in them.</para>
      <para>The following code, taken from the "Introduction to Collection Views," shows a simple <see cref="T:UIKit.UICollectionViewDataSource" /> implementation. There are 3 sections and a large <c>animal</c> array representing model data. The number of items per section is 1/3 of the total size of the <c>animals</c> array. The <c>AnimalCell</c> type is a subtype of <see cref="T:UIKit.UICollectionViewCell" /> and is defined as having a <see cref="T:UIKit.UIImage" /><c>Image</c> property; the <see cref="M:UIKit.UICollectionViewDataSource.GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)" /> method sets this property in the reused <c>animalCell</c> from the <c>animals</c> data as appropriate. Similarly, the <see cref="T:UIKit.UICollectionViewDataSource" /> sets the <c>Text</c> property of a <c>Header</c> type defined in the project. </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
          protected const int SectionCount = 3;
          
          public override int NumberOfSections (UICollectionView collectionView)
          {
            return SectionCount;
          }
          
          public override int GetItemsCount (UICollectionView collectionView, int section)
          {
            return animals.Count / SectionCount;
          }
          
          public override UICollectionViewCell GetCell (UICollectionView collectionView, MonoTouch.Foundation.NSIndexPath indexPath)
          {
            var animalCell = (AnimalCell)collectionView.DequeueReusableCell (animalCellId, indexPath);
          
            var animal = animals [indexPath.Section * (animals.Count / SectionCount) + indexPath.Row];
          
            animalCell.Image = animal.Image;
          
            return animalCell;
          }
          
          public override UICollectionReusableView GetViewForSupplementaryElement (UICollectionView collectionView, NSString elementKind, NSIndexPath indexPath)
          {
            var headerView = (Header)collectionView.DequeueReusableSupplementaryView (elementKind, headerId, indexPath);
            headerView.Text = "Supplementary View Section " + indexPath.Section.ToString ();
            return headerView;
          }
          
        ]]></code>
      </example>
      <para>The <see cref="T:UIKit.UICollectionViewSource" /> combines the <see cref="T:UIKit.UICollectionViewDataSource" /> API and the <see cref="T:UIKit.UICollectionViewDelegate" /> API in a single convenience class. Rather than creating two classes to assign to the <see cref="P:UIKit.UICollectionView.DataSource" /> and <see cref="P:UIKit.UICollectionView.Delegate" /> properties, a single <see cref="T:UIKit.UICollectionViewSource" /> can be created and assigned to the <see cref="P:UIKit.UICollectionView.Source" /> property.</para>
    </remarks>
    
    
    
    
    
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewDataSource_protocol/index.html">Apple documentation for <c>UICollectionViewDataSource</c></related>
  </Docs>
</Documentation>