#!/usr/bin/env /Library/Frameworks/Mono.framework/Commands/csharp

// this script is to make sure our versions.plist files are not out of date with our min/max supported OS versions.

// arguments are: <platform>

using System.IO;
using System.Xml;

var args = Environment.GetCommandLineArgs ();
var expectedArgumentCount = 2;
if (args.Length != expectedArgumentCount + 2 /* 2 default arguments (executable + script) + 'expectedArgumentCount' arguments we're interested in */) {
	// first arg is "/Library/Frameworks/Mono.framework/Versions/4.8.0/lib/mono/4.5/csharp.exe"
	// second arg the script itself
	// then comes the ones we care about
	Console.WriteLine ($"Need {expectedArgumentCount} arguments, got {args.Length - 2}");
	Environment.Exit (1);
	return;
}

var platform = args [2];
var outputPath = args [3];
var plistPath = platform == "macOS" ? "../Versions-mac.plist.in" : "../Versions-ios.plist.in";

var doc = new XmlDocument ();
doc.Load (plistPath);
var nodes = doc.SelectNodes ($"/plist/dict/key[text()='KnownVersions']/following-sibling::dict[1]/key[text()='{platform}']/following-sibling::array[1]/string");

// TextWriter writer = Console.Out;
using (TextWriter writer = new StreamWriter (outputPath)) {
	writer.WriteLine ($"<!-- This file contains a list of the {platform} platform versions that are supported for this SDK -->");
	writer.WriteLine ("<Project>");
	writer.WriteLine ("\t<ItemGroup>");

	foreach (XmlNode n in nodes)
		writer.WriteLine ($"\t\t<_{platform}SupportedTargetPlatform Include=\"{n.InnerText}\" />");

	writer.WriteLine ("\t</ItemGroup>");
	writer.WriteLine ("\t<ItemGroup>");
	writer.WriteLine ($"\t\t<SupportedTargetPlatform Condition=\"'$(TargetPlatformIdentifier)' == '{platform}'\" Include=\"@(_{platform}SupportedTargetPlatform)\" />");
	writer.WriteLine ("\t</ItemGroup>");
	writer.WriteLine ("</Project>");
}

Environment.Exit (0);
