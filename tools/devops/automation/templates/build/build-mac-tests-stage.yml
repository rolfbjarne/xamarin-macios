# template that contains all the different steps to create a pkgs, publish the results and provide feedback to the
# developers in github.
parameters:
- name: vsdropsPrefix
  type: string

- name: keyringPass
  type: string

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

- name: pool
  type: string
  default: automatic

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

- name: xcodeChannel
  type: string

- name: macOSName
  type: string

jobs:

# This job builds the macOS tests.
- job: build_macos_tests_job
  displayName: 'Build macOS tests'
  timeoutInMinutes: 120
  variables:
    DOTNET_PLATFORMS: $[ stageDependencies.configure_build.configure.outputs['configure_platforms.DOTNET_PLATFORMS'] ]
    ENABLE_DOTNET: $[ stageDependencies.configure_build.configure.outputs['configure_platforms.ENABLE_DOTNET'] ]
    INCLUDE_XAMARIN_LEGACY: $[ stageDependencies.configure_build.configure.outputs['configure_platforms.INCLUDE_XAMARIN_LEGACY'] ]
    ${{ if eq(parameters.pool, 'automatic') }}:
      AgentPoolComputed: $[ stageDependencies.configure_build.AgentPoolSelector.outputs['setAgentPool.AgentPoolComputed'] ]
    ${{ if eq(parameters.pool, 'ci') }}:
      AgentPoolComputed: $(CIBuildPool)
    ${{ if eq(parameters.pool, 'pr') }}:
      AgentPoolComputed: $(PRBuildPool)
    # add all the variables that have been parsed by the configuration step. Could we have a less verbose way??
    # old and ugly env var use by jenkins, we do have parts of the code that use it, contains the PR number
    PR_ID: $[ stageDependencies.configure_build.configure.outputs['labels.pr_number'] ]
    # set the branch variable name, this is required by jenkins and we have a lot of scripts that depend on it
    BRANCH_NAME: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
    RUN_MAC_TESTS: $[ stageDependencies.configure_build.configure.outputs['decisions.RUN_MAC_TESTS'] ]
  condition: ne(stageDependencies.configure_build.configure.outputs['decisions.RUN_MAC_TESTS'],'')
  pool:
    name: $(AgentPoolComputed)
    demands:
    - Agent.OS -equals Darwin
    - macOS.Name -equals ${{ parameters.macOSName }}
    - XcodeChannel -equals ${{ parameters.xcodeChannel }}
  workspace:
    clean: all

  steps:
  - template: build-mac-tests.yml
    parameters:
      isPR: ${{ parameters.isPR }}
      repositoryAlias: ${{ parameters.repositoryAlias }}
      commit: ${{ parameters.commit }}
      vsdropsPrefix: ${{ parameters.vsdropsPrefix }}
      keyringPass: ${{ parameters.keyringPass }}
      gitHubToken: ${{ parameters.gitHubToken }}
      xqaCertPass: ${{ parameters.xqaCertPass }}
