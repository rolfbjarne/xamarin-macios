# YAML pipeline build definition
# https://devdiv.visualstudio.com/DevDiv/_apps/hub/ms.vss-ciworkflow.build-ci-hub?_a=edit-build-definition&id=13947&view=Tab_Tasks
#
# YAML build pipeline based on the Jenkins multi-stage (main branch) build workflow
# https://jenkins.internalx.com/view/Xamarin.MaciOS/job/macios/job/main/
# https://jenkins.internalx.com/view/Xamarin.MaciOS/job/macios/configure
#
parameters:
- name: runTests
  type: boolean
  default: true

- name: runDeviceTests
  type: boolean
  default: true

resources:
  repositories:
  - repository: self
    checkoutOptions:
      submodules: true

  - repository: templates
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/main
    endpoint: xamarin

  - repository: maccore
    type: github
    name: xamarin/maccore
    ref: refs/heads/main
    endpoint: xamarin

  - repository: release-scripts
    type: github
    name: xamarin/release-scripts
    ref: refs/heads/sign-and-notarized
    endpoint: xamarin

variables:
- group: xamops-azdev-secrets
- group: Xamarin-Secrets
- group: Xamarin Signing
- group: Xamarin Release
- group: Xamarin Notarization
- group: XamarinCompatLab                                     # provisionator-uri setting
- name: GitHub.Token                                          # Override the GitHub.Token setting defined in the Xamarin Release group
  value: $(github--pat--vs-mobiletools-engineering-service2)  # Use a token dedicated to critical production workflows and help avoid GitHub throttling
- name: AzDoBuildAccess.Token
  value: $(pat--xamarinc--build-access)
- name: system.debug
  value: true
- name: SigningKeychain
  value: "builder.keychain"
- name: OSX_KEYCHAIN_PASS                                     # UNDONE: Override the OSX_KEYCHAIN_PASS to use same password as used by the iOS mac pool machines
  value: $(pass--lab--mac--builder--keychain)
- name: VSDropsPrefix
  value: 'https://vsdrop.corp.microsoft.com/file/v1/xamarin-macios/device-tests'
- name: USE_TCP_TUNNEL                                        # Needed to ensure that devices uses the usb cable to communicate with the devices to run the tests.
  value: true
- name: TeamName
  value: 'xamarin-macios'

trigger:
  branches:
    include:
    - '*'

pr:
  autoCancel: true
  branches:
    include:
    - main
    - d16-*
    - xcode*

stages:

- stage: governance_checks
  displayName: 'Governance Checks'
  dependsOn: []
  jobs:
    - job: governance
      displayName: 'Governance Checks'
      pool:
        vmImage: windows-latest
      steps:
      - template: templates/governance-checks.yml

- stage: build_packages
  displayName: 'Build'
  dependsOn: []
  jobs:
    - template: templates/build/stage.yml
      parameters:
        vsdropsPrefix: ${{ variables.vsdropsPrefix }}
        runTests: ${{ parameters.runTests }}
        runDeviceTests: ${{ parameters.runDeviceTests }}
        keyringPass: $(xma-password)

  # ideally we would use a matrix here, like:
  #  - job: device_tests
  #    displayName: 'Device tests'
  #    timeoutInMinutes: 1000
  #
  #    strategy:
  #      matrix:
  #        iOS32: # TODO: This bots should be moved to the ddfun pool
  #          deviceDemands: 'xismoke-32'
  #          testsLabels: '--label=run-ios-32-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
  #          poolName: 'VSEng-Xamarin-QA'
  #        iOS64:
  #          deviceDemands: 'ios'
  #          testsLabels: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
  #          poolName: 'VSEng-Xamarin-Mac-Devices'
  #        tvOS:
  #          deviceDemands: 'tvos'
  #          testsLabels: '--label=run-tvos-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
  #          poolName: 'VSEng-Xamarin-Mac-Devices'
  #
  #    pool:
  #      name: $(poolName)
  #      demands: $(deviceDemands)
  #      workspace:
  #        clean: all
  #
  #    steps:
  #    - template: templates/device-tests.yml
  #
  # Unfortunally, variable expansion will not happen on the right time, and will result in an agent error, to fix that
  # we use a template for the test and we set each of the jobs. Not ideal, but is only a 3 jobs matrix

- template: templates/devices/stage.yml
  parameters:
    devicePrefix: 'iOS32b'
    execute: 'runDevice32b'
    stageName: 'iOS32b Device Tests'
    iOSDevicePool: 'VSEng-Xamarin-QA'
    useXamarinStorage: False
    testsLabels: '--label=run-ios-32-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
    statusContext: 'VSTS: device tests iOS32b'
    iOSDeviceDemand: 'xismoke-32'
    vsdropsPrefix: ${{ variables.vsdropsPrefix }}
    keyringPass: $(xma-password)

- template: templates/devices/stage.yml
  parameters:
    devicePrefix: 'iOS64'
    execute: 'runDevice64b'
    stageName: 'iOS64 Device Tests'
    iOSDevicePool: 'VSEng-Xamarin-Mac-Devices'
    useXamarinStorage: False
    testsLabels: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
    statusContext: 'VSTS: device tests iOS'
    iOSDeviceDemand: 'ios'
    vsdropsPrefix: ${{ variables.vsdropsPrefix }}
    keyringPass: $(xma-password)

- template: templates/devices/stage.yml
  parameters:
    devicePrefix: 'tvOS'
    execute: 'runDeviceTv'
    stageName: 'tvOS Device Tests'
    iOSDevicePool: 'VSEng-Xamarin-Mac-Devices'
    useXamarinStorage: False
    testsLabels: '--label=run-tvos-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
    statusContext: 'VSTS: device tests tvOS'
    iOSDeviceDemand: 'tvos'
    vsdropsPrefix: ${{ variables.vsdropsPrefix }}
    keyringPass: $(xma-password)

- template: templates/mac-tests.yml
  parameters:
    stageName: 'Mac Mojave Tests'
    macPool: 'Hosted Mac Internal Mojave'

- template: templates/mac-tests.yml
  parameters:
    stageName: 'Mac High Sierra Tests'
    macPool: 'Hosted Mac Internal'

# TODO: Not the real step
- stage: sample_testing
  displayName: 'Sample testing'
  dependsOn:
  - build_packages
  condition: and(succeeded(), contains (stageDependencies.build_packages.build.outputs['configuration.RunSampleTests'], 'True')) 
  jobs:
  - job: sample_testing
    pool:
      vmImage: ubuntu-latest
    steps:
      # TODO: do parse labels
      - bash: |
          echo "Samples!"
        displayName: 'Sample testing'
