<?xml version="1.0" encoding="utf-8"?>
<!-- This file is processed by xharness, and contains logic shared by all our test suites -->
<Project>
	<!-- NativeLibName: the platform-specific subdirectory of tests/test-libraries/.libs where to get libraries with all the relevant architectures -->

	<!-- Logic for iOS -->
	<PropertyGroup Condition="$(TargetFramework.EndsWith('-ios'))">
		<AssetTargetFallback>xamarinios10;$(AssetTargetFallback)</AssetTargetFallback>
		<NativeLibName>ios-fat</NativeLibName>
		<!-- We need this because we'd otherwise default to the latest OS version we support, and we'll want to execute on earlier versions -->
		<CompilerResponseFile>$(MSBuildThisFileDirectory)\..\..\src\rsp\dotnet\ios-defines-dotnet.rsp</CompilerResponseFile>
	</PropertyGroup>
	<ItemGroup Condition="'$(_PlatformName)' == 'iOS'">
	</ItemGroup>

	<!-- Logic for tvOS -->
	<PropertyGroup Condition="$(TargetFramework.EndsWith('-tvos'))">
		<AssetTargetFallback>xamarintvos10;$(AssetTargetFallback)</AssetTargetFallback>
		<NativeLibName>tvos-fat</NativeLibName>
		<CompilerResponseFile>$(MSBuildThisFileDirectory)\..\..\src\rsp\dotnet\tvos-defines-dotnet.rsp</CompilerResponseFile>
	</PropertyGroup>
	<ItemGroup Condition="$(TargetFramework.EndsWith('-tvos'))">
	</ItemGroup>

	<!-- Logic for macOS -->
	<PropertyGroup Condition="$(TargetFramework.EndsWith('-macos'))">
		<DefineConstants>$(DefineConstants);MONOMAC</DefineConstants>
		<NativeLibName>macos-fat</NativeLibName>
		<CompilerResponseFile>$(MSBuildThisFileDirectory)\..\..\src\rsp\dotnet\macos-defines-dotnet.rsp</CompilerResponseFile>
		<RuntimeIdentifiers Condition="'$(UniversalBuild)' == 'true'">osx-x64;osx-arm64</RuntimeIdentifiers>
		<RuntimeIdentifiers Condition="'$(Configuration)' == 'Release' And '$(SingleArchReleaseBuild)' == 'true'">osx-x64</RuntimeIdentifiers>
	</PropertyGroup>

	<!-- Logic for Mac Catalyst -->
	<PropertyGroup Condition="$(TargetFramework.EndsWith('-maccatalyst'))">
		<AssetTargetFallback>xamarinios10;$(AssetTargetFallback)</AssetTargetFallback>
		<NativeLibName>maccatalyst-fat</NativeLibName>
		<CompilerResponseFile>$(MSBuildThisFileDirectory)\..\..\src\rsp\dotnet\maccatalyst-defines-dotnet.rsp</CompilerResponseFile>
		<RuntimeIdentifiers Condition="'$(UniversalBuild)' == 'true'">maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers>
		<RuntimeIdentifiers Condition="'$(Configuration)' == 'Release' And '$(SingleArchReleaseBuild)' == 'true'">maccatalyst-x64</RuntimeIdentifiers>
	</PropertyGroup>

	<!-- Logic for all test suites -->
	<PropertyGroup>
		<!-- Disable the implicit FSharp.Core reference, because sometimes the implicit reference wants a version that isn't available anywhere -->
		<DisableImplicitFSharpCoreReference>true</DisableImplicitFSharpCoreReference>

		<!-- There's unsafe code in shared test code, which means pretty much all test suites need unsafe code -->
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>

		<!-- Always use the latest C# version everywhere -->
		<LangVersion>latest</LangVersion>

		<!-- XAMCORE_3_0 is always defined for .NET -->
		<DefineConstants>$(DefineConstants);XAMCORE_3_0</DefineConstants>

		<!-- Don't show warnings about platform availability -->
		<NoWarn Condition="'$(IncludeCS1416Warnigs)' != 'true'">CA1416;$(NoWarn)</NoWarn>

		<CustomBeforeMicrosoftCommonTargets>$(CustomBeforeMicrosoftCommonTargets);$(MSBuildThisFileDirectory)SupportedOSPlatformVersions.targets</CustomBeforeMicrosoftCommonTargets>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="NUnitLite" Version="3.12.0" Condition="'$(ExcludeNUnitLiteReference)' != 'true'" />
		<ProjectReference Include="$(MSBuildThisFileDirectory)\..\..\external\Touch.Unit\Touch.Client\dotnet\$(_PlatformName)\Touch.Client-$(_PlatformName).dotnet.csproj" Condition="'$(ExcludeTouchUnitReference)' != 'true'" />
	</ItemGroup>

	<Import Project="$(MSBuildThisFileDirectory)/../ComputeRegistrarConstant.targets" />
	<Import Project="$(MSBuildThisFileDirectory)/../nunit.framework.targets" Condition="'$(ExcludeNUnitLiteReference)' != 'true'" />

	<Import Project="$(GeneratedProjectFile)" Condition="'$(GeneratedProjectFile)' != ''" />

	<!--
		This is a helper target for our tests to zip up the app bundle.
		This is useful when building remotely, and we want to inspect the results on Windows:
		we build on the Mac, zip up the resulting app bundle, transfer the zip file to Windows where the test is executing, and inspect the zip file there
	-->
	<Target Name="CompressAppBundle" AfterTargets="Codesign" Condition="'$(IsMacEnabled)' == 'true' And '$(CopyAppBundleToWindows)' == 'true'">
		<PropertyGroup>
			<DirectoryToCompress Condition="'$(DirectoryToCompress)' == ''">$(_AppBundlePath)</DirectoryToCompress>
			<CompressedName Condition="'$(CompressedName)' == ''">AppBundle.zip</CompressedName>
			<CompressedPath Condition="'$(CompressedPath)' == ''">$(DeviceSpecificIntermediateOutputPath)$(CompressedName)</CompressedPath>
		</PropertyGroup>

		<MakeDir SessionId="$(BuildSessionId)" Directories="$([System.IO.Path]::GetDirectoryName('$(CompressedPath)'))" />
		<Delete SessionId="$(BuildSessionId)" Files="$(CompressedPath)" />

		<Zip
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			ToolExe="$(ZipExe)"
			ToolPath="$(ZipPath)"
			Recursive="true"
			Symlinks="true"
			Sources="$(DirectoryToCompress)"
			OutputFile="$(CompressedPath)"
			WorkingDirectory="$(DirectoryToCompress)"
			>
			<Output TaskParameter="OutputFile" ItemName="FileWrites" />
		</Zip>
	</Target>

	<Target Name="VerifyRemoteConnection" AfterTargets="SayHello" Condition="'$(EnsureRemoteConnection)' == 'true'">
		<Error Condition="'$(IsMacEnabled)' != 'true'" Text="Unable to connect to the remote Mac. Please examine the output of the SayHello target to figure out what happened." />
	</Target>
</Project>
