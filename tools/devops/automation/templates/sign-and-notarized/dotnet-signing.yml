#  job that signs all the diff dotnet built artifacts.
parameters:

- name: condition
  default: succeeded()

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

jobs:
- job: configure
  displayName: 'Configure build'
  pool:
    vmImage: windows-latest

  steps:
  - template: ../common/configure.yml
    parameters:
      repositoryAlias: ${{ parameters.repositoryAlias }}
      commit: ${{ parameters.commit }}

- job: sign_notarize_dotnet
  dependsOn:
  - configure
  displayName: 'Sign & Notarize Dotnet'
  timeoutInMinutes: 1000
  pool:
    vmImage: internal-macos-11
  workspace:
    clean: all

  steps:

  - template: setup.yml
    parameters:
      isPR: ${{ parameters.isPR }}
      repositoryAlias: ${{ parameters.repositoryAlias }}
      commit: ${{ parameters.commit }}

  - task: DownloadPipelineArtifact@2
    displayName: Download not notarized build
    inputs:
      artifact: 'not-signed-package'
      patterns: '!*.pkg'
      allowFailedBuilds: true
      path: $(Build.SourcesDirectory)/package

  - ${{ if eq(parameters.isPR, false) }}:
    - pwsh: |
        # Get the list of files to sign
        $msiFiles = Get-ChildItem -Path $(Build.SourcesDirectory)/package/ -Filter "*.msi"

        # Add those files to an array
        $SignFiles = @()
        foreach($msi in $msiFiles) {
            Write-Host "$($msi.FullName)"
            $SignFiles += @{ "SrcPath"="$($msi.FullName)"}
        }

        Write-Host "$msiFiles"

        # array of dicts
        $SignFileRecord = @(
          @{
            "Certs" = "400";
            "SignFileList" = $SignFiles;
          }
        )

        $SignFileList = @{
            "SignFileRecordList" = $SignFileRecord
        }

        # Write the json to a file
        ConvertTo-Json -InputObject $SignFileList -Depth 5 | Out-File -FilePath $(Build.ArtifactStagingDirectory)/MsiFiles2Notarize.json -Force
        dotnet $Env:MBSIGN_APPFOLDER/ddsignfiles.dll /filelist:$(Build.ArtifactStagingDirectory)/MsiFiles2Notarize.json
      displayName: 'Sign .msi'
      condition: ${{ parameters.condition }}

  - pwsh: |
      mv $(Build.SourcesDirectory)/package/bundle.zip $(Build.ArtifactStagingDirectory)/not-signed-bundle.zip
      $bundlePath = "$(Build.ArtifactStagingDirectory)/bundle"
      unzip $(Build.ArtifactStagingDirectory)/not-signed-bundle.zip -d $bundlePath
      $patterns = @(
        "*.iOS.dll",
        "*.tvOS.dll",
        "*.Mac.dll", "*.macOS.dll", "*XamMac.dll",
        "*.MacCatalyst.dll",
        "*.WatchOS.dll"
      )
      $files = @()
      foreach ($p in $patterns) {
        $files += Get-ChildItem -Path $bundlePath -Recurse  -Filter $p
      }

      $SignFiles = @()
      foreach($f in $files) {
          Write-Host "$($f.FullName)"
          $SignFiles += @{ "SrcPath"="$($f.FullName)"}
      }

      $SignFileRecord = @(
        @{
          "Certs" = "400";
          "SignFileList" = $SignFiles;
        }
      )

      $SignFileList = @{
          "SignFileRecordList" = $SignFileRecord
      }

      # Write the json to a file
      ConvertTo-Json -InputObject $SignFileList -Depth 100 | Out-File -FilePath $(Build.ArtifactStagingDirectory)/bundle.json -Force
      dotnet $Env:MBSIGN_APPFOLDER/ddsignfiles.dll /filelist:$(Build.ArtifactStagingDirectory)/bundle.json
      # rezip and move back
      ditto -c -k --sequesterRsrc $bundlePath bundle.zip
      mv bundle.zip $(Build.SourcesDirectory)/package/bundle.zip
    displayName: 'Sign bundle.zip'
    workingDirectory: $(Build.ArtifactStagingDirectory)

  - template: publish-nugets.yml
    parameters:
      isPR: ${{ parameters.isPR }}
      repositoryAlias: ${{ parameters.repositoryAlias }}
      commit: ${{ parameters.commit }}

  # always upload no matter what, since if we are not signing we need the artifact in the pipeline
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Notarized Dotnet Artifacts'
    inputs:
      targetPath: $(Build.SourcesDirectory)/package
      artifactName: dotnet-signed
    continueOnError: true
